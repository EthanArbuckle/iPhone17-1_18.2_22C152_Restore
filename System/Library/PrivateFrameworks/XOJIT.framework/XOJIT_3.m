uint64_t llvm::StringMap<anonymous namespace'::AsmParser::DirectiveKind,llvm::MallocAllocator>::operator[](llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t *i;

  v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  v7 = *(void *)a1;
  v8 = v6;
  v9 = *(void *)(*(void *)a1 + 8 * v6);
  if (v9 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v9)
  {
    return v9 + 8;
  }
  v10 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v11 = v10;
  v12 = v10 + 16;
  if (a3) {
    memcpy(v10 + 16, a2, a3);
  }
  v12[a3] = 0;
  *(void *)v11 = a3;
  *((_DWORD *)v11 + 2) = 0;
  *(void *)(v7 + 8 * v8) = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8)); ; ++i)
  {
    v9 = *i;
    if (*i && v9 != -8) {
      break;
    }
  }
  return v9 + 8;
}

void llvm::MCAsmMacro::~MCAsmMacro(llvm::MCAsmMacro *this)
{
  v2 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  v2 = (void **)((char *)this + 32);
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](&v2);
}

void std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        v7 = (void **)(v4 - 32);
        std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<llvm::AsmToken>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, *v2);
    v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<llvm::AsmToken>::__base_destruct_at_end[abi:nn180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 40)
  {
    if (*(_DWORD *)(i - 8) >= 0x41u)
    {
      result = *(void *)(i - 16);
      if (result) {
        result = MEMORY[0x263E50080](result, 0x1000C8000313F17);
      }
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseCppHashLineFilenameComment(uint64_t a1, uint64_t a2, int a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  v9 = *(uint64_t **)(v6 + 24);
  v7 = (uint64_t *)(v6 + 24);
  v8 = v9;
  if (*((_DWORD *)v7 + 2) >= 0x41u) {
    v7 = v8;
  }
  uint64_t v10 = *v7;
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  uint64_t v11 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (a3)
  {
    unint64_t v15 = v13 - 2;
    if (v13) {
      uint64_t v16 = v12 + 1;
    }
    else {
      uint64_t v16 = v12;
    }
    if (v13 - (unint64_t)(v13 != 0) < v15) {
      unint64_t v15 = v13 - (v13 != 0);
    }
    *(void *)(a1 + 424) = v16;
    *(void *)(a1 + 432) = v15;
    *(void *)(a1 + 440) = v10;
    *(void *)(a1 + 448) = a2;
    *(_DWORD *)(a1 + 456) = *(_DWORD *)(a1 + 280);
    if (!*(void *)(a1 + 472))
    {
      *(void *)(a1 + 464) = v16;
      *(void *)(a1 + 472) = v15;
    }
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveIfb(uint64_t *a1, char a2)
{
  v4 = (uint64_t *)((char *)a1 + 284);
  uint64_t v6 = (void *)a1[38];
  unint64_t v5 = a1[39];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[37];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 8 * v9;
    unint64_t v15 = v12 + 8 * v13;
    *(void *)unint64_t v14 = *v4;
    v7 = (void *)(v14 + 8);
    v17 = (_WORD *)a1[37];
    uint64_t v16 = (_WORD *)a1[38];
    if (v16 != v17)
    {
      do
      {
        int v18 = *((_DWORD *)v16 - 2);
        v16 -= 4;
        __int16 v19 = v16[2];
        *(_DWORD *)(v14 - 8) = v18;
        v14 -= 8;
        *(_WORD *)(v14 + 4) = v19;
      }
      while (v16 != v17);
      uint64_t v16 = (_WORD *)a1[37];
    }
    a1[37] = v14;
    a1[38] = (uint64_t)v7;
    a1[39] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = *v4;
    v7 = v6 + 1;
  }
  a1[38] = (uint64_t)v7;
  *((_DWORD *)a1 + 71) = 1;
  uint64_t v20 = *a1;
  if (*((unsigned char *)a1 + 289))
  {
    (*(void (**)(uint64_t *))(v20 + 224))(a1);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t *))(v20 + 200))(a1);
    uint64_t v23 = v22;
    if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    {
      return 1;
    }
    else
    {
      uint64_t result = 0;
      char v24 = (v23 == 0) ^ a2;
      *((unsigned char *)a1 + 288) = v24 ^ 1;
      *((unsigned char *)a1 + 289) = v24;
    }
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveIfc(unsigned char *a1, char a2)
{
  v4 = a1 + 284;
  uint64_t v6 = (void *)*((void *)a1 + 38);
  unint64_t v5 = *((void *)a1 + 39);
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *((void *)a1 + 37);
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 8 * v9;
    unint64_t v15 = v12 + 8 * v13;
    *(void *)unint64_t v14 = *v4;
    v7 = (void *)(v14 + 8);
    v17 = (_WORD *)*((void *)a1 + 37);
    uint64_t v16 = (_WORD *)*((void *)a1 + 38);
    if (v16 != v17)
    {
      do
      {
        int v18 = *((_DWORD *)v16 - 2);
        v16 -= 4;
        __int16 v19 = v16[2];
        *(_DWORD *)(v14 - 8) = v18;
        v14 -= 8;
        *(_WORD *)(v14 + 4) = v19;
      }
      while (v16 != v17);
      uint64_t v16 = (_WORD *)*((void *)a1 + 37);
    }
    *((void *)a1 + 37) = v14;
    *((void *)a1 + 38) = v7;
    *((void *)a1 + 39) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = *v4;
    v7 = v6 + 1;
  }
  *((void *)a1 + 38) = v7;
  *((_DWORD *)a1 + 71) = 1;
  if (a1[289])
  {
    (*(void (**)(unsigned char *))(*(void *)a1 + 224))(a1);
    return 0;
  }
  else
  {
    uint64_t v21 = *(void *)(*(void *)((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 40))(a1) + 8) + 8);
    while (1)
    {
      unsigned int v22 = **((_DWORD **)a1 + 6);
      BOOL v23 = v22 > 0x19;
      int v24 = (1 << v22) & 0x2000201;
      if (!v23 && v24 != 0) {
        break;
      }
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
    }
    uint64_t v26 = *(void *)(*(void *)((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 40))(a1) + 8) + 8) - v21;
    v36[0] = v21;
    v36[1] = v26;
    v37[0] = (uint64_t)"expected comma";
    __int16 v38 = 259;
    if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 25, (llvm::Twine *)v37)) {
      return 1;
    }
    v37[0] = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 200))(a1);
    v37[1] = v28;
    if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    {
      return 1;
    }
    else
    {
      v29 = (const void *)llvm::StringRef::trim(v36, " \t\n\v\f\r", 6);
      size_t v31 = v30;
      v32 = (const void *)llvm::StringRef::trim(v37, " \t\n\v\f\r", 6);
      if (v31 == v33)
      {
        if (v31) {
          BOOL v34 = memcmp(v29, v32, v31) == 0;
        }
        else {
          BOOL v34 = 1;
        }
      }
      else
      {
        BOOL v34 = 0;
      }
      uint64_t result = 0;
      char v35 = v34 ^ a2;
      a1[288] = v35 ^ 1;
      a1[289] = v35;
    }
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveIfeqs(uint64_t a1, int a2)
{
  if (**(_DWORD **)(a1 + 48) != 3) {
    goto LABEL_24;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unint64_t v5 = *(void *)(*(void *)(v4 + 8) + 16);
  unint64_t v6 = v5 != 0;
  if (v5) {
    v7 = (const void *)(*(void *)(*(void *)(v4 + 8) + 8) + 1);
  }
  else {
    v7 = *(const void **)(*(void *)(v4 + 8) + 8);
  }
  if (v5 - 1 < v6) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = v5 - 1;
  }
  if (v8 >= v5) {
    unint64_t v9 = *(void *)(*(void *)(v4 + 8) + 16);
  }
  else {
    unint64_t v9 = v8;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) != 25)
  {
    if (a2) {
      uint64_t v20 = "expected comma after first string for '.ifeqs' directive";
    }
    else {
      uint64_t v20 = "expected comma after first string for '.ifnes' directive";
    }
    goto LABEL_30;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) != 3)
  {
LABEL_24:
    if (a2) {
      uint64_t v20 = "expected string parameter for '.ifeqs' directive";
    }
    else {
      uint64_t v20 = "expected string parameter for '.ifnes' directive";
    }
LABEL_30:
    v37 = v20;
    __int16 v38 = 259;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(void *)(v21 + 96), (llvm::Twine *)&v37, 0, 0);
    return 1;
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unint64_t v11 = *(void *)(*(void *)(v10 + 8) + 16);
  unint64_t v12 = v11 != 0;
  if (v11) {
    uint64_t v13 = (const void *)(*(void *)(*(void *)(v10 + 8) + 8) + 1);
  }
  else {
    uint64_t v13 = *(const void **)(*(void *)(v10 + 8) + 8);
  }
  if (v11 - 1 < v12) {
    unint64_t v14 = 1;
  }
  else {
    unint64_t v14 = v11 - 1;
  }
  if (v14 >= v11) {
    unint64_t v15 = *(void *)(*(void *)(v10 + 8) + 16);
  }
  else {
    unint64_t v15 = v14;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  uint64_t v16 = (void *)(a1 + 284);
  int v18 = *(void **)(a1 + 304);
  unint64_t v17 = *(void *)(a1 + 312);
  if ((unint64_t)v18 >= v17)
  {
    uint64_t v23 = *(void *)(a1 + 296);
    uint64_t v24 = ((uint64_t)v18 - v23) >> 3;
    if ((unint64_t)(v24 + 1) >> 61) {
      abort();
    }
    uint64_t v25 = v17 - v23;
    uint64_t v26 = v25 >> 2;
    if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
      uint64_t v26 = v24 + 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v26;
    }
    if (v27) {
      unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v27);
    }
    else {
      uint64_t v28 = 0;
    }
    unint64_t v29 = v27 + 8 * v24;
    unint64_t v30 = v27 + 8 * v28;
    *(void *)unint64_t v29 = *v16;
    __int16 v19 = (void *)(v29 + 8);
    v32 = *(_WORD **)(a1 + 296);
    size_t v31 = *(_WORD **)(a1 + 304);
    if (v31 != v32)
    {
      do
      {
        int v33 = *((_DWORD *)v31 - 2);
        v31 -= 4;
        __int16 v34 = v31[2];
        *(_DWORD *)(v29 - 8) = v33;
        v29 -= 8;
        *(_WORD *)(v29 + 4) = v34;
      }
      while (v31 != v32);
      size_t v31 = *(_WORD **)(a1 + 296);
    }
    *(void *)(a1 + 296) = v29;
    *(void *)(a1 + 304) = v19;
    *(void *)(a1 + 312) = v30;
    if (v31) {
      operator delete(v31);
    }
  }
  else
  {
    *int v18 = *v16;
    __int16 v19 = v18 + 1;
  }
  *(void *)(a1 + 304) = v19;
  *(_DWORD *)(a1 + 284) = 1;
  BOOL v35 = v9 - v6 == v15 - v12 && (v9 == v6 || memcmp(v7, v13, v9 - v6) == 0);
  uint64_t result = 0;
  char v36 = v35 ^ a2;
  *(unsigned char *)(a1 + 288) = v36 ^ 1;
  *(unsigned char *)(a1 + 289) = v36;
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveIfdef(uint64_t *a1, int a2)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v4 = (uint64_t *)((char *)a1 + 284);
  unint64_t v6 = (void *)a1[38];
  unint64_t v5 = a1[39];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[37];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 8 * v9;
    unint64_t v15 = v12 + 8 * v13;
    *(void *)unint64_t v14 = *v4;
    v7 = (void *)(v14 + 8);
    unint64_t v17 = (_WORD *)a1[37];
    uint64_t v16 = (_WORD *)a1[38];
    if (v16 != v17)
    {
      do
      {
        int v18 = *((_DWORD *)v16 - 2);
        v16 -= 4;
        __int16 v19 = v16[2];
        *(_DWORD *)(v14 - 8) = v18;
        v14 -= 8;
        *(_WORD *)(v14 + 4) = v19;
      }
      while (v16 != v17);
      uint64_t v16 = (_WORD *)a1[37];
    }
    a1[37] = v14;
    a1[38] = (uint64_t)v7;
    a1[39] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = *v4;
    v7 = v6 + 1;
  }
  a1[38] = (uint64_t)v7;
  *((_DWORD *)a1 + 71) = 1;
  uint64_t v20 = *a1;
  if (*((unsigned char *)a1 + 289))
  {
    (*(void (**)(uint64_t *))(v20 + 224))(a1);
    return 0;
  }
  else
  {
    uint64_t v22 = (*(uint64_t (**)(uint64_t *, uint64_t *))(v20 + 192))(a1, &v29);
    char v23 = v22;
    v27[0] = "expected identifier after '.ifdef'";
    __int16 v28 = 259;
    llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v22, (const llvm::Twine *)v27);
    if ((v23 & 1) != 0 || llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    {
      return 1;
    }
    else
    {
      uint64_t v24 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
      __int16 v28 = 261;
      v27[0] = v29;
      v27[1] = v30;
      uint64_t v25 = (llvm::MCSymbol *)llvm::MCContext::lookupSymbol(v24, (const llvm::Twine *)v27);
      if (a2)
      {
        if (v25) {
          BOOL v26 = llvm::MCSymbol::getFragment(v25, 0) != 0;
        }
        else {
          BOOL v26 = 0;
        }
      }
      else if (v25)
      {
        BOOL v26 = llvm::MCSymbol::getFragment(v25, 0) == 0;
      }
      else
      {
        BOOL v26 = 1;
      }
      *((unsigned char *)a1 + 288) = v26;
      uint64_t result = 0;
      *((unsigned char *)a1 + 289) = !v26;
    }
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveElseIf(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a1 + 284) - 1) >= 2)
  {
    v6[0] = "Encountered a .elseif that doesn't follow an .if or  an .elseif";
    __int16 v7 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (llvm::Twine *)v6, 0, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 284) = 2;
    uint64_t v3 = *(void *)(a1 + 304);
    if (*(void *)(a1 + 296) != v3 && *(unsigned char *)(v3 - 3) || *(unsigned char *)(a1 + 288))
    {
      *(unsigned char *)(a1 + 289) = 1;
      (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
      return 0;
    }
    else
    {
      v6[0] = 0;
      if (((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 256))(a1, v6) & 1) != 0
        || llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
      {
        return 1;
      }
      else
      {
        uint64_t result = 0;
        BOOL v5 = v6[0] == 0;
        *(unsigned char *)(a1 + 288) = v6[0] != 0;
        *(unsigned char *)(a1 + 289) = v5;
      }
    }
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveElse(uint64_t a1, uint64_t a2)
{
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1)) {
    return 1;
  }
  if ((*(_DWORD *)(a1 + 284) - 1) >= 2)
  {
    unint64_t v6 = "Encountered a .else that doesn't follow  an .if or an .elseif";
    __int16 v7 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (llvm::Twine *)&v6, 0, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 284) = 3;
    uint64_t v5 = *(void *)(a1 + 304);
    if (*(void *)(a1 + 296) != v5 && *(unsigned char *)(v5 - 3) || *(unsigned char *)(a1 + 288))
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 289) = 1;
    }
    else
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 289) = 0;
    }
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveEndIf(uint64_t a1, uint64_t a2)
{
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1)) {
    return 1;
  }
  if (!*(_DWORD *)(a1 + 284) || (uint64_t v5 = *(void *)(a1 + 304), *(void *)(a1 + 296) == v5))
  {
    uint64_t v8 = "Encountered a .endif that doesn't follow an .if or .else";
    __int16 v9 = 259;
    return llvm::MCAsmParser::Error(a1, a2, (llvm::Twine *)&v8, 0, 0);
  }
  else
  {
    uint64_t result = 0;
    int v7 = *(_DWORD *)(v5 - 8);
    uint64_t v6 = v5 - 8;
    *(_WORD *)(a1 + 288) = *(_WORD *)(v6 + 4);
    *(_DWORD *)(a1 + 284) = v7;
    *(void *)(a1 + 304) = v6;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12)) {
    return llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(a1, a2, a3, a4, a5, a6);
  }
  uint64_t v7 = *(void *)a1 + (v6 << 7);
  *(_DWORD *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 16) = a4;
  *(unsigned char *)(v7 + 20) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 24) = 0;
  *(void *)(v7 + 32) = 0;
  *(unsigned char *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 112) = 1;
  *(unsigned char *)(v7 + 120) = 0;
  *(void *)(v7 + 32) = a5;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 40) = a6;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t llvm::MCAsmLexer::Lex(llvm::MCAsmLexer *this)
{
  uint64_t v3 = (_DWORD *)((char *)this + 8);
  uint64_t v2 = *((void *)this + 1);
  *((unsigned char *)this + 107) = *(_DWORD *)v2 == 9;
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>((long long *)(v2 + 40), (long long *)(v2 + 40 * *((unsigned int *)this + 4)), v2);
  llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::pop_back((uint64_t)v3);
  if (!v3[2])
  {
    (**(void (***)(void *__return_ptr, llvm::MCAsmLexer *))this)(v5, this);
    llvm::SmallVectorImpl<llvm::AsmToken>::insert_one_impl<llvm::AsmToken const&>((uint64_t)v3, *((void *)this + 1), (unint64_t)v5);
    if (v7 >= 0x41)
    {
      if (v6) {
        MEMORY[0x263E50080](v6, 0x1000C8000313F17);
      }
    }
  }
  return *(void *)v3;
}

BOOL anonymous namespace'::AsmParser::enabledGenDwarfForAssembly(_anonymous_namespace_::AsmParser *this)
{
  v29[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
  int v3 = *(unsigned __int8 *)(v2 + 1601);
  if (*(unsigned char *)(v2 + 1601)
    && !*(_DWORD *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this) + 1604))
  {
    if (*((void *)this + 59))
    {
      uint64_t v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      uint64_t v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      unsigned int v7 = *(void **)(v6 + 1360);
      size_t v8 = *(void *)(v6 + 1368);
      __int16 v9 = (void *)*((void *)this + 58);
      size_t v10 = *((void *)this + 59);
      v26[0] = 0;
      v26[16] = 0;
      v22.n128_u8[0] = 0;
      char v23 = 0;
      v4.n128_f64[0] = llvm::MCContext::setMCLineTableRootFile(v5, 0, v7, v8, v9, v10, (uint64_t)v26, &v22);
    }
    uint64_t v11 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, __n128))(*(void *)this + 48))(this, v4);
    LODWORD(v27) = 0;
    *(void *)&long long v24 = &v27;
    unint64_t v12 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v11 + 1560), (unsigned int *)&v27, (uint64_t)&std::piecewise_construct, (_DWORD **)&v24);
    uint64_t v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
    uint64_t v14 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    uint64_t v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
    uint64_t v16 = *(void *)(v15 + 1360);
    uint64_t v17 = *(void *)(v15 + 1368);
    char v18 = *((unsigned char *)v12 + 439);
    if (v18 >= 0) {
      __int16 v19 = v12 + 52;
    }
    else {
      __int16 v19 = (uint64_t **)v12[52];
    }
    if (v18 >= 0) {
      uint64_t v20 = (uint64_t *)*((unsigned __int8 *)v12 + 439);
    }
    else {
      uint64_t v20 = v12[53];
    }
    long long v27 = *(_OWORD *)((char *)v12 + 444);
    char v28 = *((unsigned char *)v12 + 460);
    long long v24 = *((_OWORD *)v12 + 29);
    uint64_t v25 = v12[60];
    (*(void (**)(void *__return_ptr, uint64_t, void, uint64_t, uint64_t, uint64_t **, uint64_t *, long long *, long long *, _DWORD))(*(void *)v14 + 680))(v29, v14, 0, v16, v17, v19, v20, &v27, &v24, 0);
    *(_DWORD *)(v13 + 1604) = v29[0];
  }
  return v3 != 0;
}

uint64_t anonymous namespace'::AsmParser::parseAssignment(llvm::MCAsmParser *a1, char *a2, uint64_t a3, unsigned int a4)
{
  BOOL v26 = 0;
  uint64_t v8 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) + 8);
  uint64_t v9 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) + 8);
  int v33 = 0;
  if ((*(unsigned int (**)(llvm::MCAsmParser *, unsigned char **, const char **))(*(void *)a1 + 232))(a1, &v26, &v33))
  {
    int v33 = "missing expression";
    __int16 v36 = 259;
    uint64_t v10 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v10 + 96), (llvm::Twine *)&v33, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a1)) {
    return 1;
  }
  unsigned int v12 = a4 & 0xFFFFFFFD;
  uint64_t v13 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 48))(a1);
  __int16 v36 = 261;
  int v33 = a2;
  uint64_t v34 = a3;
  uint64_t v14 = (llvm::MCParserUtils *)llvm::MCContext::lookupSymbol(v13, (const llvm::Twine *)&v33);
  if (!v14)
  {
    if (a3 == 1 && *a2 == 46)
    {
      uint64_t v17 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
      (*(void (**)(uint64_t, unsigned char *, void, uint64_t))(*(void *)v17 + 648))(v17, v26, 0, v9);
      return 0;
    }
    uint64_t v25 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 48))(a1);
    __int16 v36 = 261;
    int v33 = a2;
    uint64_t v34 = a3;
    unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v25, (const llvm::Twine *)&v33);
    int v19 = *(_DWORD *)(Symbol + 8);
    goto LABEL_21;
  }
  unint64_t Symbol = (unint64_t)v14;
  if (llvm::MCParserUtils::isSymbolUsedInExpression(v14, (uint64_t)v26, v15))
  {
    __int16 v32 = 1283;
    v29[0] = (uint64_t)"Recursive use of '";
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    int v33 = (const char *)v29;
    BOOL v35 = "'";
    __int16 v36 = 770;
    goto LABEL_30;
  }
  unint64_t Fragment = llvm::MCSymbol::getFragment((llvm::MCSymbol *)Symbol, 0);
  int v19 = *(_DWORD *)(Symbol + 8);
  int v20 = v19 & 0x3800;
  if (!Fragment && (v19 & 4) == 0 && v20 != 4096 || (v20 == 4096 ? (BOOL v21 = (v19 & 4 | v12) == 0) : (BOOL v21 = 0), v21))
  {
LABEL_21:
    *(_DWORD *)(Symbol + 8) = v19 & 0xFFFFFFFD | (2 * (v12 == 0));
    goto LABEL_31;
  }
  unint64_t v22 = llvm::MCSymbol::getFragment((llvm::MCSymbol *)Symbol, 1);
  int v23 = *(_DWORD *)(Symbol + 8) & 0x3800;
  if (!v22)
  {
    if (v23 != 4096)
    {
      __int16 v32 = 1283;
      long long v24 = "invalid assignment to '";
      goto LABEL_29;
    }
LABEL_26:
    int v19 = *(_DWORD *)(Symbol + 8) | 4;
    *(_DWORD *)(Symbol + 8) = v19;
    if (**(unsigned char **)(Symbol + 24) != 1)
    {
      __int16 v32 = 1283;
      long long v24 = "invalid reassignment of non-absolute variable '";
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  if (!v12 && v23 == 4096) {
    goto LABEL_26;
  }
  __int16 v32 = 1283;
  long long v24 = "redefinition of '";
LABEL_29:
  v29[0] = (uint64_t)v24;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  long long v27 = "'";
  __int16 v28 = 259;
  llvm::operator+(v29, (uint64_t *)&v27, (uint64_t)&v33);
LABEL_30:
  if (llvm::MCAsmParser::Error((uint64_t)a1, v9, (llvm::Twine *)&v33, 0, 0)) {
    return 1;
  }
LABEL_31:
  if ((*(uint64_t (**)(llvm::MCAsmParser *, char *, uint64_t))(*(void *)a1 + 104))(a1, a2, a3)) {
    return 0;
  }
  if (a4 < 2)
  {
    (*(void (**)(void *, unint64_t, unsigned char *))(**((void **)a1 + 28) + 272))(*((void **)a1 + 28), Symbol, v26);
    (*(void (**)(void))(**((void **)a1 + 28) + 296))();
    return 0;
  }
  if (a4 != 3)
  {
    if (a4 == 2) {
      (*(void (**)(void *, unint64_t, unsigned char *))(**((void **)a1 + 28) + 272))(*((void **)a1 + 28), Symbol, v26);
    }
    return 0;
  }
  if (*v26 == 2)
  {
    (*(void (**)(void *, unint64_t))(**((void **)a1 + 28) + 280))(*((void **)a1 + 28), Symbol);
    return 0;
  }
  int v33 = "expected identifier";
  __int16 v36 = 259;
  return llvm::MCAsmParser::Error((uint64_t)a1, v8, (llvm::Twine *)&v33, 0, 0);
}

uint64_t anonymous namespace'::AsmParser::handleMacroEntry(void *a1, uint64_t *a2)
{
  v40[4] = *MEMORY[0x263EF8340];
  if (dword_26B41F7E0 == (uint64_t)(a1[44] - a1[43]) >> 3)
  {
    std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)&v34);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v34, (uint64_t)"macros cannot be nested more than ", 34);
    int v3 = (void *)std::ostream::operator<<();
    __n128 v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v3, (uint64_t)" levels deep.", 13);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v4, (uint64_t)" Use -asm-macro-max-nesting-depth to increase this limit.", 57);
    std::stringbuf::str();
    LOWORD(v23) = 260;
    p_p = &__p;
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v5 + 96), (llvm::Twine *)&p_p, 0, 0);
    if (v32 < 0) {
      operator delete(__p);
    }
    uint64_t v34 = (void *)*MEMORY[0x263F8C2C8];
    *(void **)((char *)&v34 + *((void *)v34 - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
    *(void *)&long long v35 = MEMORY[0x263F8C318] + 16;
    if (v38 < 0) {
      operator delete(v37);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x263E50010](&v39);
    return 1;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v6 = 1;
    {
      uint64_t v34 = v36;
      long long v35 = xmmword_261E8A780;
      uint64_t v8 = (unsigned __int8 *)a2[2];
      size_t v9 = a2[3];
      int v20 = 0;
      char v24 = 0;
      uint64_t v25 = 0;
      int v26 = 1;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0;
      p_p = (void **)&unk_270DBD758;
      long long v27 = &v34;
      llvm::raw_ostream::SetUnbuffered(&p_p);
      uint64_t v10 = a2[4];
      uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - v10) >> 4);
      uint64_t v12 = v28;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 3);
      uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
      if ((v6 & 1) == 0)
      {
        uint64_t v15 = (void *)v23;
        if ((unint64_t)(v22 - v23) > 9)
        {
          *(_WORD *)(v23 + 8) = 2671;
          *uint64_t v15 = *(void *)".endmacro\n";
          v23 += 10;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&p_p, ".endmacro\n", 0xAuLL);
        }
        uint64_t v16 = *v27;
        size_t v17 = (size_t)v27[1];
        __p = "<instantiation>";
        LOWORD(v33) = 259;
        getMemBufferCopyImpl(v16, v17, (uint64_t)&__p, (uint64_t)v40);
        operator new();
      }
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&p_p);
      if (v34 != v36) {
        free(v34);
      }
    }
    uint64_t v34 = &v28;
    std::vector<std::vector<llvm::AsmToken>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v34);
  }
  return v6;
}

uint64_t llvm::StringMap<std::pair<llvm::MCAsmParserExtension *,BOOL (*)(llvm::MCAsmParserExtension *,llvm::StringRef,llvm::SMLoc)>,llvm::MallocAllocator>::lookup(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 8)) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(*(void *)a1 + 8 * Key) + 8);
  }
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveSet(llvm::MCAsmParser *a1, unsigned int a2)
{
  size_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *, char **))(*(void *)a1 + 192))(a1, &v9);
  char v5 = v4;
  unsigned int v7 = "expected identifier";
  __int16 v8 = 259;
  llvm::MCAsmParser::check(a1, v4, (const llvm::Twine *)&v7);
  if (v5) {
    return 1;
  }
  uint64_t v11 = "expected comma";
  __int16 v12 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v11)) {
    return 1;
  }
  else {
}
  }

BOOL anonymous namespace'::AsmParser::parseDirectiveAlign(_anonymous_namespace_::AsmParser *this, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 96);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 264))(this)) {
    return 1;
  }
  int64_t v27 = 0;
  if (a3 != 1
    || !a2
    || **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) != 9)
  {
    if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, int64_t *))(*(void *)this + 256))(this, &v27))return 1; {
    if (llvm::MCAsmParser::parseOptionalToken(this, 25))
    }
    {
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                       + 8) == 25)
      {
        int v8 = 0;
      }
      else
      {
        int v8 = 1;
        uint64_t v7 = 1;
        if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v26))return v7; {
      }
        }
      if (llvm::MCAsmParser::parseOptionalToken(this, 25))
      {
        uint64_t v9 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                                   + 8)
                       + 8);
        if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v25))return 1; {
      }
        }
      else
      {
        uint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v9 = 0;
      int v8 = 0;
    }
    if (llvm::MCAsmParser::parseEOL(this)) {
      return 1;
    }
    uint64_t v11 = v27;
    if (a2)
    {
      if (v27 < 32)
      {
        uint64_t v7 = 0;
      }
      else
      {
        v23[0] = "invalid alignment value";
        __int16 v24 = 259;
        uint64_t v7 = llvm::MCAsmParser::Error((uint64_t)this, v6, (llvm::Twine *)v23, 0, 0);
        LOBYTE(v11) = 31;
      }
      uint64_t v11 = 1 << v11;
    }
    else if (v27)
    {
      if ((v27 & (v27 - 1)) != 0)
      {
        v23[0] = "alignment must be a power of 2";
        __int16 v24 = 259;
        uint64_t v7 = llvm::MCAsmParser::Error((uint64_t)this, v6, (llvm::Twine *)v23, 0, 0);
        uint64_t v12 = 1 << ~__clz(v27);
        if (v27) {
          uint64_t v11 = v12;
        }
        else {
          uint64_t v11 = 0;
        }
        int64_t v27 = v11;
      }
      else
      {
        uint64_t v7 = 0;
      }
      if (!HIDWORD(v11))
      {
LABEL_35:
        if (v9)
        {
          uint64_t v13 = v25;
          if (v25 <= 0)
          {
            v23[0] = "alignment directive can never be satisfied in this many bytes, ignoring maximum bytes expression";
            __int16 v24 = 259;
            int v14 = llvm::MCAsmParser::Error((uint64_t)this, v9, (llvm::Twine *)v23, 0, 0);
            uint64_t v13 = 0;
            uint64_t v7 = v7 | v14;
            uint64_t v25 = 0;
            uint64_t v11 = v27;
          }
          if (v13 >= v11)
          {
            v23[0] = "maximum bytes expression exceeds alignment and has no effect";
            __int16 v24 = 259;
            (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void *, void, void))(*(void *)this + 168))(this, v9, v23, 0, 0);
            uint64_t v25 = 0;
          }
        }
        uint64_t v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
        uint64_t v16 = *(void *)(*(void *)(v15 + 144) + 32 * *(unsigned int *)(v15 + 152) - 32);
        int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
        if (v8)
        {
          if (a3 == 1 && v26 == *(_DWORD *)(*((void *)this + 22) + 340)) {
            char v19 = v17;
          }
          else {
            char v19 = 0;
          }
          if (v19)
          {
LABEL_48:
            uint64_t v20 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
            (*(void (**)(uint64_t, void, void, void))(*(void *)v20 + 640))(v20, (63 - __clz(v27)), *(void *)(*((void *)this + 1) + 288), v25);
            return v7;
          }
        }
        else
        {
          if (a3 == 1) {
            int v21 = v17;
          }
          else {
            int v21 = 0;
          }
          if (v21 == 1) {
            goto LABEL_48;
          }
        }
        uint64_t v22 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t, void))(*(void *)v22 + 632))(v22, (63 - __clz(v27)), v26, a3, v25);
        return v7;
      }
      v23[0] = "alignment must be smaller than 2**32";
      __int16 v24 = 259;
      uint64_t v7 = v7 | llvm::MCAsmParser::Error((uint64_t)this, v6, (llvm::Twine *)v23, 0, 0);
      uint64_t v11 = 0x80000000;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v11 = 1;
    }
    int64_t v27 = v11;
    goto LABEL_35;
  }
  v23[0] = "p2align directive with no operand(s) is ignored";
  __int16 v24 = 259;
  (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void *, void, void))(*(void *)this + 168))(this, v6, v23, 0, 0);
  return llvm::MCAsmParser::parseEOL(this);
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveOrg(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *((void *)this + 17);
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 264))(this)) {
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, uint64_t *))(*(void *)this + 232))(this, &v5, &v6))return 1; {
  uint64_t v6 = 0;
  }
  if (llvm::MCAsmParser::parseOptionalToken(this, 25)
    && ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v6) & 1) != 0)
  {
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(this)) {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v4 + 648))(v4, v5, v6, v2);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveFill(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *((void *)this + 17);
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 264))(this)) {
    return 1;
  }
  uint64_t v12 = 0;
  v8[0] = 0;
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, void *))(*(void *)this + 232))(this, &v12, v8))return 1; {
  unint64_t v10 = 0;
  }
  unint64_t v11 = 1;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 25))
  {
    uint64_t v4 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                               + 8)
                   + 8);
    if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(void *)this + 256))(this, &v11))return 1; {
    if (llvm::MCAsmParser::parseOptionalToken(this, 25))
    }
    {
      uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                                 + 8)
                     + 8);
      if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(void *)this + 256))(this, &v10))return 1; {
    }
      }
    else
    {
      uint64_t v3 = 0;
    }
  }
  if (llvm::MCAsmParser::parseEOL(this)) {
    return 1;
  }
  unint64_t v6 = v11;
  if ((v11 & 0x8000000000000000) != 0)
  {
    v8[0] = "'.fill' directive with negative size has no effect";
    __int16 v9 = 259;
    (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void *, void, void))(*(void *)this
                                                                                                  + 168))(this, v4, v8, 0, 0);
  }
  else
  {
    if (v11 >= 9)
    {
      v8[0] = "'.fill' directive with size greater than 8 has been truncated to 8";
      __int16 v9 = 259;
      (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void *, void, void))(*(void *)this + 168))(this, v4, v8, 0, 0);
      unint64_t v6 = 8;
      unint64_t v11 = 8;
    }
    if (v6 >= 5)
    {
      if (HIDWORD(v10))
      {
        v8[0] = "'.fill' directive pattern has been truncated to 32-bits";
        __int16 v9 = 259;
        (*(void (**)(_anonymous_namespace_::AsmParser *, uint64_t, void *, void, void))(*(void *)this + 168))(this, v3, v8, 0, 0);
      }
    }
    uint64_t v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(void *)v7 + 616))(v7, v12, v11, v10, v2);
  }
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveZero(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *((void *)this + 17);
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 264))(this)) {
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, uint64_t *))(*(void *)this + 232))(this, &v5, &v6))return 1; {
  uint64_t v6 = 0;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 25)
  {
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
    if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v6))return 1; {
  }
    }
  if (llvm::MCAsmParser::parseEOL(this)) {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 608))(v4, v5, v6, v2);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveComm(_anonymous_namespace_::AsmParser *this, int a2)
{
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 264))(this)) {
    return 1;
  }
  uint64_t v4 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 96);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 192))(this, &v21))
  {
    v23[0] = "expected identifier in directive";
    __int16 v24 = 259;
    uint64_t v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(void *)(v5 + 96), (llvm::Twine *)v23, 0, 0);
    return 1;
  }
  uint64_t v6 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
  __int16 v24 = 261;
  v23[0] = v21;
  v23[1] = v22;
  unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)v23);
  v23[0] = "expected comma";
  __int16 v24 = 259;
  if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)v23)) {
    return 1;
  }
  uint64_t v20 = 0;
  uint64_t v8 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 96);
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v20)) {
    return 1;
  }
  int8x8_t v19 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 25)
  {
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
    uint64_t v9 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 96);
    if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, int8x8_t *))(*(void *)this + 256))(this, &v19))return 1; {
    uint64_t v10 = *((void *)this + 22);
    }
    int v11 = *(_DWORD *)(v10 + 356);
    if (a2 && !v11)
    {
      uint64_t v12 = "alignment not supported on this target";
LABEL_31:
      v23[0] = v12;
      __int16 v24 = 259;
      uint64_t v16 = this;
      uint64_t v17 = v9;
      return llvm::MCAsmParser::Error((uint64_t)v16, v17, (llvm::Twine *)v23, 0, 0);
    }
    if (a2)
    {
      if (v11 != 1) {
        goto LABEL_17;
      }
    }
    else if (!*(unsigned char *)(v10 + 354))
    {
      goto LABEL_17;
    }
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v19);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] != 1)
    {
      uint64_t v12 = "alignment must be a power of 2";
      goto LABEL_31;
    }
    int8x8_t v19 = (int8x8_t)(63 - __clz(*(void *)&v19));
  }
LABEL_17:
  if (llvm::MCAsmParser::parseEOL(this)) {
    return 1;
  }
  if (v20 < 0)
  {
    v23[0] = "size must be non-negative";
    __int16 v24 = 259;
    uint64_t v16 = this;
    uint64_t v17 = v8;
    return llvm::MCAsmParser::Error((uint64_t)v16, v17, (llvm::Twine *)v23, 0, 0);
  }
  int v15 = *(_DWORD *)(Symbol + 8);
  if ((v15 & 2) != 0)
  {
    if ((*(_DWORD *)(Symbol + 8) & 0x3800) == 0x1000)
    {
      *(void *)(Symbol + 24) = 0;
      v15 &= 0xFFFFC7FF;
    }
    *(void *)Symbol &= 7uLL;
    *(_DWORD *)(Symbol + 8) = v15 & 0xFFFFFFFD;
  }
  if (llvm::MCSymbol::getFragment((llvm::MCSymbol *)Symbol, 1))
  {
    v23[0] = "invalid symbol redefinition";
    __int16 v24 = 259;
    uint64_t v16 = this;
    uint64_t v17 = v4;
    return llvm::MCAsmParser::Error((uint64_t)v16, v17, (llvm::Twine *)v23, 0, 0);
  }
  uint64_t v18 = *(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  if (a2) {
    (*(void (**)(void))(v18 + 464))();
  }
  else {
    (*(void (**)(void))(v18 + 456))();
  }
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveAbort(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 96);
  uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 200))(this);
  uint64_t v5 = v4;
  if (llvm::MCAsmParser::parseEOL(this)) {
    return 1;
  }
  if (v5)
  {
    __int16 v9 = 1283;
    v8[0] = ".abort '";
    v8[2] = v3;
    v8[3] = v5;
    v10[0] = v8;
    v10[2] = "' detected. Assembly stopping.";
    __int16 v7 = 770;
  }
  else
  {
    v10[0] = ".abort detected. Assembly stopping.";
    __int16 v7 = 259;
  }
  __int16 v11 = v7;
  return llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v10, 0, 0);
}

BOOL anonymous namespace'::AsmParser::parseDirectiveInclude(_anonymous_namespace_::AsmParser *this)
{
  v24[0] = 0;
  v24[1] = 0;
  uint64_t v25 = 0;
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  int v3 = **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
  uint64_t v22 = "expected string in '.include' directive";
  __int16 v23 = 259;
  llvm::MCAsmParser::check(this, v3 != 3, (const llvm::Twine *)&v22);
  if (v3 == 3
    && ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, void **))(*(void *)this + 208))(this, v24) & 1) == 0
    && (int v4 = **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                         + 8),
        uint64_t v20 = "unexpected token in '.include' directive",
        __int16 v21 = 259,
        llvm::MCAsmParser::check(this, v4 != 9, (const llvm::Twine *)&v20),
        v4 == 9))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0;
    int v7 = llvm::SourceMgr::AddIncludeFile(*((uint64_t **)this + 30), (uint64_t)v24, *((void *)this + 17), (uint64_t)__p);
    int v8 = v7;
    BOOL v5 = v7 == 0;
    if (v7)
    {
      *((_DWORD *)this + 70) = v7;
      uint64_t v9 = *(void *)(**((void **)this + 30) + 24 * (v7 - 1));
      uint64_t v10 = *(void *)(v9 + 8);
      uint64_t v11 = *(void *)(v9 + 16) - v10;
      *((void *)this + 24) = v10;
      *((void *)this + 25) = v11;
      *((void *)this + 23) = v10;
      *((void *)this + 17) = 0;
      *((unsigned char *)this + 211) = 1;
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    std::operator+<char>();
    uint64_t v12 = std::string::append(&v14, "'");
    std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v15 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v16 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    __int16 v19 = 260;
    __p[0] = v15;
    if (!v8) {
      llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)__p, 0, 0);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v5 = 1;
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(v24[0]);
  }
  return v5;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveIncbin(_anonymous_namespace_::AsmParser *this)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v26 = 0;
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  int v3 = **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
  v27[0] = "expected string in '.incbin' directive";
  __int16 v28 = 259;
  llvm::MCAsmParser::check(this, v3 != 3, (const llvm::Twine *)v27);
  if (v3 != 3
    || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, void **))(*(void *)this + 208))(this, __p) & 1) != 0)
  {
    goto LABEL_24;
  }
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  if (!llvm::MCAsmParser::parseOptionalToken(this, 25))
  {
    uint64_t v4 = 0;
LABEL_11:
    uint64_t v5 = 0;
    goto LABEL_12;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 25)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                               + 8)
                   + 8);
    if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(void *)this + 256))(this, &v24))
    {
LABEL_24:
      uint64_t v17 = 1;
      goto LABEL_25;
    }
  }
  if (!llvm::MCAsmParser::parseOptionalToken(this, 25)) {
    goto LABEL_11;
  }
  uint64_t v5 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  v27[0] = 0;
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *, void *))(*(void *)this + 232))(this, &v23, v27))goto LABEL_24; {
LABEL_12:
  }
  if (llvm::MCAsmParser::parseEOL(this)) {
    goto LABEL_24;
  }
  unint64_t v6 = v24;
  v27[0] = "skip is negative";
  __int16 v28 = 259;
  if ((v24 & 0x8000000000000000) != 0)
  {
    llvm::MCAsmParser::Error((uint64_t)this, v4, (llvm::Twine *)v27, 0, 0);
    goto LABEL_24;
  }
  uint64_t v7 = v23;
  long long v29 = 0uLL;
  std::string::size_type v30 = 0;
  int v8 = llvm::SourceMgr::AddIncludeFile(*((uint64_t **)this + 30), (uint64_t)__p, *((void *)this + 17), (uint64_t)&v29);
  if (!v8)
  {
    int v16 = 1;
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)(**((void **)this + 30) + 24 * (v8 - 1));
  uint64_t v10 = *(void *)(v9 + 8);
  unint64_t v11 = *(void *)(v9 + 16) - v10;
  if (v11 < v6) {
    unint64_t v6 = v11;
  }
  std::string::size_type v12 = v11 - v6;
  if (v7)
  {
    v22.__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    std::string v14 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 72))(v13);
    if (llvm::MCExpr::evaluateAsAbsolute(v7, &v22, v14, 0, 0, 0))
    {
      if ((v22.__r_.__value_.__r.__words[0] & 0x8000000000000000) == 0)
      {
        if (v12 >= v22.__r_.__value_.__r.__words[0]) {
          std::string::size_type v12 = v22.__r_.__value_.__r.__words[0];
        }
        goto LABEL_22;
      }
      v27[0] = "negative count has no effect";
      __int16 v28 = 259;
      int v19 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t, void *, void, void))(*(void *)this + 168))(this, v5, v27, 0, 0);
    }
    else
    {
      v27[0] = "expected absolute expression";
      __int16 v28 = 259;
      int v19 = llvm::MCAsmParser::Error((uint64_t)this, v5, (llvm::Twine *)v27, 0, 0);
    }
    int v16 = v19;
    goto LABEL_32;
  }
LABEL_22:
  uint64_t v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(uint64_t, unint64_t, std::string::size_type))(*(void *)v15 + 488))(v15, v10 + v6, v12);
  int v16 = 0;
LABEL_32:
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  if (v16)
  {
    std::operator+<char>();
    uint64_t v20 = std::string::append(&v22, "'");
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[2];
    long long v29 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    __int16 v28 = 260;
    v27[0] = &v29;
    uint64_t v17 = llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v27, 0, 0);
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)v29);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
LABEL_25:
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  return v17;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveRept(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v31 = 0;
  uint64_t v8 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) + 8);
  char v32 = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, void **))(*(void *)a1 + 232))(a1, &v31, &v32)) {
    return 1;
  }
  uint64_t v30 = 0;
  uint64_t v10 = v31;
  uint64_t v11 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  std::string::size_type v12 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 72))(v11);
  if (!llvm::MCExpr::evaluateAsAbsolute(v10, &v30, v12, 0, 0, 0))
  {
    LOWORD(v25) = 1283;
    std::string::size_type v21 = "unexpected token in '";
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    char v32 = &v21;
    *((void *)&v33 + 1) = "' directive";
    __int16 v35 = 770;
    return llvm::MCAsmParser::Error((uint64_t)a1, v8, (llvm::Twine *)&v32, 0, 0);
  }
  uint64_t v13 = v30;
  char v32 = "Count is negative";
  __int16 v35 = 259;
  if (v30 < 0)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, v8, (llvm::Twine *)&v32, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a1)) {
    return 1;
  }
  BOOL v9 = 1;
  if (v14)
  {
    unint64_t v15 = v14;
    char v32 = &v34;
    long long v33 = xmmword_261E8A780;
    int v22 = 0;
    char v26 = 0;
    uint64_t v27 = 0;
    int v28 = 1;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    std::string::size_type v21 = (const char *)&unk_270DBD758;
    long long v29 = &v32;
    llvm::raw_ostream::SetUnbuffered(&v21);
    uint64_t v16 = v13 + 1;
    do
    {
      BOOL v9 = --v16 != 0;
      if (!v16) {
      uint64_t v17 = *(unsigned __int8 **)(v15 + 16);
      }
      size_t v18 = *(void *)(v15 + 24);
      uint64_t v19 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
    if (v32 != &v34) {
      free(v32);
    }
  }
  return v9;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveIrp(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  long long v27 = 0u;
  memset(v28, 0, 26);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *, long long *))(*(void *)a1 + 192))(a1, &v27);
  char v5 = v4;
  unint64_t v15 = "expected identifier in '.irp' directive";
  LOWORD(v19) = 259;
  llvm::MCAsmParser::check(a1, v4, (const llvm::Twine *)&v15);
  if ((v5 & 1) == 0)
  {
    long long v29 = "expected comma";
    v31[4] = 259;
    if (!llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v29)
      && !llvm::MCAsmParser::parseEOL(a1))
    {
      if (v7)
      {
        unint64_t v8 = v7;
        long long v29 = v31;
        long long v30 = xmmword_261E8A780;
        int v16 = 0;
        char v20 = 0;
        uint64_t v21 = 0;
        int v22 = 1;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v17 = 0;
        unint64_t v15 = (const char *)&unk_270DBD758;
        uint64_t v23 = &v29;
        llvm::raw_ostream::SetUnbuffered(&v15);
        uint64_t v9 = v24;
        uint64_t v10 = v25;
        if (v24 == v25) {
LABEL_11:
        }
        uint64_t v11 = v24;
        while (1)
        {
          std::string::size_type v12 = *(unsigned __int8 **)(v8 + 16);
          size_t v13 = *(void *)(v8 + 24);
          uint64_t v14 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
          v11 += 24;
          v9 += 24;
          if (v11 == v10) {
            goto LABEL_11;
          }
        }
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
        if (v29 != v31) {
          free(v29);
        }
      }
    }
  }
  long long v29 = &v24;
  std::vector<std::vector<llvm::AsmToken>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v29);
  long long v29 = v28;
  std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v29);
  return 1;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveIrpc(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  long long v47 = 0u;
  memset(v48, 0, 26);
  v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *, long long *))(*(void *)a1 + 192))(a1, &v47);
  char v5 = v4;
  __int16 v35 = "expected identifier in '.irpc' directive";
  LOWORD(v39) = 259;
  llvm::MCAsmParser::check(a1, v4, (const llvm::Twine *)&v35);
  if (v5) {
    goto LABEL_25;
  }
  v53 = "expected comma";
  __int16 v56 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v53)
  {
    goto LABEL_25;
  }
  unint64_t v6 = v44;
  if (v45 - (void)v44 != 24 || v44[1] - *v44 != 40)
  {
    v53 = "unexpected token in '.irpc' directive";
    __int16 v56 = 259;
    uint64_t v30 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v30 + 96), (llvm::Twine *)&v53, 0, 0);
LABEL_25:
    BOOL v11 = 1;
    goto LABEL_26;
  }
  if (llvm::MCAsmParser::parseEOL(a1)) {
    goto LABEL_25;
  }
  if (!v7) {
    goto LABEL_25;
  }
  unint64_t v8 = v7;
  v53 = &v55;
  long long v54 = xmmword_261E8A780;
  int v36 = 0;
  char v40 = 0;
  uint64_t v41 = 0;
  int v42 = 1;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  __int16 v35 = (const char *)&unk_270DBD758;
  v43 = &v53;
  llvm::raw_ostream::SetUnbuffered(&v35);
  unint64_t v9 = 0;
  unint64_t v10 = *(void *)(*v6 + 16);
  uint64_t v32 = *(void *)(*v6 + 8);
  do
  {
    BOOL v11 = v9 != v10;
    if (v9 == v10) {
    int64x2_t v33 = 0uLL;
    }
    uint64_t v34 = 0;
    unint64_t v12 = v9 + 1;
    if (v10 >= v9) {
      unint64_t v13 = v9;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13 <= v12) {
      ++v9;
    }
    if (v9 >= v10) {
      unint64_t v9 = v10;
    }
    uint64_t v14 = (void *)(v32 + v13);
    unint64_t v15 = (void *)(v9 - v13);
    v52 = &v34;
    int v16 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(1uLL);
    v49 = (int64x2_t *)v16;
    v50.i64[0] = (uint64_t)v16;
    v51 = &v16[5 * v17];
    *(_DWORD *)int v16 = 2;
    v16[1] = v14;
    v16[2] = v15;
    *((_DWORD *)v16 + 8) = 64;
    v16[3] = 0;
    llvm::APInt::clearUnusedBits((uint64_t)(v16 + 3));
    uint64_t v18 = (char *)(v16 + 5);
    v50.i64[1] = (uint64_t)(v16 + 5);
    int64x2_t v19 = v33;
    uint64_t v20 = v50.i64[0];
    if (v33.i64[1] == v33.i64[0])
    {
      int64x2_t v24 = vdupq_n_s64(v33.u64[1]);
    }
    else
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = v20 + v21;
        long long v23 = *(_OWORD *)(v19.i64[1] + v21 - 40);
        *(void *)(v22 - 24) = *(void *)(v19.i64[1] + v21 - 24);
        *(_OWORD *)(v22 - 40) = v23;
        *(_DWORD *)(v22 - 8) = *(_DWORD *)(v19.i64[1] + v21 - 8);
        *(void *)(v22 - 16) = *(void *)(v19.i64[1] + v21 - 16);
        *(_DWORD *)(v19.i64[1] + v21 - 8) = 0;
        v21 -= 40;
      }
      while (v19.i64[1] + v21 != v19.i64[0]);
      int64x2_t v24 = v33;
      uint64_t v18 = (char *)v50.i64[1];
      v20 += v21;
    }
    v33.i64[0] = v20;
    v33.i64[1] = (uint64_t)v18;
    int64x2_t v50 = v24;
    uint64_t v25 = v34;
    uint64_t v34 = v51;
    v51 = v25;
    v49 = (int64x2_t *)v24.i64[0];
    std::__split_buffer<llvm::AsmToken>::~__split_buffer((uint64_t)&v49);
    uint64_t v26 = *(void *)a1;
    int v28 = *(unsigned __int8 **)(v8 + 16);
    size_t v27 = *(void *)(v8 + 24);
    v33.i64[1] = (uint64_t)v18;
    uint64_t v29 = (*(uint64_t (**)(llvm::MCAsmParser *))(v26 + 40))(a1);
    v49 = &v33;
    std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v49);
    unint64_t v9 = v12;
  }
  while ((v27 & 1) == 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v35);
  if (v53 != &v55) {
    free(v53);
  }
LABEL_26:
  v53 = &v44;
  std::vector<std::vector<llvm::AsmToken>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v53);
  v53 = v48;
  std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v53);
  return v11;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveEndr(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *((void *)this + 43);
  uint64_t v3 = *((void *)this + 44);
  if (v2 == v3)
  {
    unint64_t v6 = "unmatched '.endr' directive";
    __int16 v7 = 259;
    uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(void *)(v4 + 96), (llvm::Twine *)&v6, 0, 0);
  }
  else
  {
  }
  return v2 == v3;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveBundleAlignMode(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 96);
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 264))(this) & 1) == 0)
  {
    unint64_t v7 = 0;
    if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(void *)this + 256))(this, &v7) & 1) == 0&& !llvm::MCAsmParser::parseEOL(this))
    {
      char v5 = "invalid bundle alignment size (expected between 0 and 30)";
      __int16 v6 = 259;
      if (v7 < 0x1F)
      {
        uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
        (*(void (**)(uint64_t))(*(void *)v4 + 1208))(v4);
        return 0;
      }
      llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)&v5, 0, 0);
    }
  }
  return 1;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveBundleLock(_anonymous_namespace_::AsmParser *this)
{
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 264))(this)) {
    return 1;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  BOOL v3 = llvm::MCAsmParser::parseOptionalToken(this, 9);
  if (v3)
  {
LABEL_3:
    uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t, BOOL))(*(void *)v4 + 1216))(v4, !v3);
    return 0;
  }
  int v6 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 192))(this, &v13);
  BOOL v11 = "invalid option for '.bundle_lock' directive";
  __int16 v12 = 259;
  if (v6)
  {
    unint64_t v7 = &v11;
LABEL_16:
    llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v7, 0, 0);
    return 1;
  }
  if (v14 != 12)
  {
    unint64_t v9 = "invalid option for '.bundle_lock' directive";
    __int16 v10 = 259;
LABEL_15:
    unint64_t v7 = &v9;
    goto LABEL_16;
  }
  BOOL v8 = *(void *)v13 == 0x6F745F6E67696C61 && *(_DWORD *)(v13 + 8) == 1684956511;
  unint64_t v9 = "invalid option for '.bundle_lock' directive";
  __int16 v10 = 259;
  if (!v8) {
    goto LABEL_15;
  }
  if (!llvm::MCAsmParser::parseEOL(this)) {
    goto LABEL_3;
  }
  return 1;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveBundleUnlock(_anonymous_namespace_::AsmParser *this)
{
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 264))(this) & 1) != 0
    || llvm::MCAsmParser::parseEOL(this))
  {
    return 1;
  }
  uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(uint64_t))(*(void *)v3 + 1224))(v3);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveLEB128(_anonymous_namespace_::AsmParser *this, char a2)
{
  char v5 = a2;
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 264))(this)) {
    return 1;
  }
  v4[0] = this;
  v4[1] = &v5;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveSpace(llvm::MCAsmParser *a1)
{
  uint64_t v2 = *((void *)a1 + 17);
  if ((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 264))(a1)) {
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, uint64_t *))(*(void *)a1 + 232))(a1, &v5, &v6)) {
    return 1;
  }
  uint64_t v6 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(a1, 25)
    && ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v6) & 1) != 0)
  {
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a1)) {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 608))(v4, v5, v6, v2);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveFile(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) == 4)
  {
    uint64_t v5 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
    uint64_t v8 = *(void *)(v5 + 24);
    uint64_t v6 = v5 + 24;
    uint64_t v7 = v8;
    if (*(_DWORD *)(v6 + 8) >= 0x41u) {
      uint64_t v6 = v7;
    }
    uint64_t v9 = *(void *)v6;
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    if (v9 < 0)
    {
      v69[0] = "negative file number";
      __int16 v70 = 259;
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      llvm::MCAsmParser::Error(a1, *(void *)(v10 + 96), (llvm::Twine *)v69, 0, 0);
      return 1;
    }
  }
  else
  {
    uint64_t v9 = -1;
  }
  v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  if (((*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 208))(a1, &v66) & 1) == 0)
  {
    v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) == 3)
    {
      v69[0] = "explicit path specified, but no file number";
      __int16 v70 = 259;
      llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v9 == -1, (const llvm::Twine *)v69);
      if (v9 == -1
        || (__int16 v12 = &v63, ((*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 208))(a1, &v63) & 1) != 0))
      {
        uint64_t v11 = 1;
LABEL_93:
        if (SHIBYTE(v65) < 0) {
          operator delete(v63);
        }
        goto LABEL_95;
      }
      if (v65 >= 0)
      {
        uint64_t v15 = HIBYTE(v65);
      }
      else
      {
        __int16 v12 = v63;
        uint64_t v15 = v64;
      }
      if (v68 >= 0) {
        uint64_t v14 = &v66;
      }
      else {
        uint64_t v14 = v66;
      }
      if (v68 >= 0) {
        uint64_t v13 = HIBYTE(v68);
      }
      else {
        uint64_t v13 = v67;
      }
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      if (v68 >= 0) {
        __int16 v12 = &v66;
      }
      else {
        __int16 v12 = v66;
      }
      if (v68 >= 0) {
        uint64_t v15 = HIBYTE(v68);
      }
      else {
        uint64_t v15 = v67;
      }
    }
    unint64_t v61 = 0;
    unint64_t v62 = 0;
    uint64_t v57 = 0;
    size_t v58 = 0;
    uint64_t v59 = 0;
    if (!llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 9))
    {
      uint64_t v45 = v13;
      uint64_t v46 = v14;
      uint64_t v47 = v15;
      v48 = v12;
      char v17 = 0;
      char v18 = 0;
      uint64_t v13 = 53;
      while (1)
      {
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        int v28 = **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
        v69[0] = "unexpected token in '.file' directive";
        __int16 v70 = 259;
        llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v28 != 2, (const llvm::Twine *)v69);
        if (v28 != 2 || ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 192))(a1, &v83) & 1) != 0) {
          break;
        }
        if (v84 == 6)
        {
          if (*(_DWORD *)v83 != 1920298867 || *(_WORD *)(v83 + 4) != 25955)
          {
LABEL_73:
            v69[0] = "unexpected token in '.file' directive";
            __int16 v70 = 259;
            uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
            llvm::MCAsmParser::Error(a1, *(void *)(v37 + 96), (llvm::Twine *)v69, 0, 0);
            break;
          }
          v69[0] = "source specified, but no file number";
          __int16 v70 = 259;
          llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v9 == -1, (const llvm::Twine *)v69);
          if (v9 == -1) {
            break;
          }
          int v31 = **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.file' directive";
          __int16 v56 = 259;
          llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v31 != 3, (const llvm::Twine *)&__p);
          if (v31 != 3 || ((*(uint64_t (**)(uint64_t, void **))(*(void *)a1 + 208))(a1, &v57) & 1) != 0) {
            break;
          }
          char v18 = 1;
        }
        else
        {
          if (v84 != 3) {
            goto LABEL_73;
          }
          if (*(_WORD *)v83 != 25709 || *(unsigned char *)(v83 + 2) != 53) {
            goto LABEL_73;
          }
          v69[0] = "MD5 checksum specified, but no file number";
          __int16 v70 = 259;
          llvm::MCAsmParser::check((llvm::MCAsmParser *)a1, v9 == -1, (const llvm::Twine *)v69);
          if (v9 == -1 || (parseHexOcta((_anonymous_namespace_::AsmParser *)a1, &v62, &v61) & 1) != 0) {
            break;
          }
          char v17 = 1;
        }
        if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 9)) {
          goto LABEL_31;
        }
      }
      uint64_t v11 = 1;
      goto LABEL_91;
    }
    if (v9 == -1)
    {
      if (*(unsigned char *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + 144) + 364))
      {
        uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v36 + 656))(v36, v12, v15);
      }
      goto LABEL_90;
    }
    uint64_t v45 = v13;
    uint64_t v46 = v14;
    uint64_t v47 = v15;
    v48 = v12;
    char v17 = 0;
    char v18 = 0;
LABEL_31:
    uint64_t v19 = *(void *)(a1 + 216);
    if (*(unsigned char *)(v19 + 1601))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      v69[0] = &__p;
      uint64_t v20 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v19 + 1560), (unsigned int *)&__p, (uint64_t)&std::piecewise_construct, v69);
      llvm::MCDwarfLineTableHeader::resetFileTable((llvm::MCDwarfLineTableHeader *)(v20 + 5));
      uint64_t v19 = *(void *)(a1 + 216);
      *(unsigned char *)(v19 + 1601) = 0;
    }
    if (v17)
    {
      uint64x2_t v21 = (uint64x2_t)vdupq_lane_s64(v62, 0);
      uint64x2_t v22 = (uint64x2_t)vdupq_lane_s64(v61, 0);
      *(int8x8_t *)v21.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v21, (uint64x2_t)xmmword_261E912F0), (int32x4_t)vshlq_u64(v21, (uint64x2_t)xmmword_261E912E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v21, (uint64x2_t)xmmword_261E91310), (int32x4_t)vshlq_u64(v21, (uint64x2_t)xmmword_261E91300))));
      int16x8_t v23 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_261E912F0), (int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_261E912E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_261E91310), (int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_261E91300)));
      int8x8_t v2 = vmovn_s16(v23);
      __int8 v24 = v21.i8[0];
      int8x8_t v44 = vext_s8(*(int8x8_t *)v21.i8, *(int8x8_t *)v23.i8, 1uLL);
      char v25 = 1;
      if ((v18 & 1) == 0)
      {
LABEL_35:
        char v26 = 0;
        uint64_t v27 = 0;
        goto LABEL_76;
      }
    }
    else
    {
      char v25 = 0;
      __int8 v24 = 0;
      int8x8_t v44 = v16;
      if ((v18 & 1) == 0) {
        goto LABEL_35;
      }
    }
    unsigned int v32 = HIBYTE(v59);
    if (v59 < 0) {
      unsigned int v32 = v58;
    }
    int64x2_t v33 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v19 + 184, v32, 3);
    uint64_t v27 = (uint64_t)v33;
    if (v59 >= 0) {
      uint64_t v34 = &v57;
    }
    else {
      uint64_t v34 = v57;
    }
    if (v59 >= 0) {
      size_t v35 = HIBYTE(v59);
    }
    else {
      size_t v35 = v58;
    }
    memcpy(v33, v34, v35);
    if (SHIBYTE(v59) < 0)
    {
      char v26 = 1;
      uint64_t v13 = v58;
    }
    else
    {
      uint64_t v13 = HIBYTE(v59);
      char v26 = 1;
    }
LABEL_76:
    if (v9)
    {
      uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      __int8 v71 = v24;
      __int8 v74 = v44.i8[6];
      __int16 v73 = v44.i16[2];
      __int32 v72 = v44.i32[0];
      int8x8_t v75 = v2;
      char v76 = v25;
      v49[1] = v27;
      v49[2] = v13;
      char v50 = v26;
      *(_DWORD *)v51 = *(_DWORD *)v60;
      *(_DWORD *)&v51[3] = *(_DWORD *)&v60[3];
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v38 + 680))(&v83);
      if (v84)
      {
        uint64_t v39 = v83;
        uint64_t v83 = 0;
        v49[0] = v39;
        llvm::toString(v49, &__p);
        __int16 v70 = 260;
        v69[0] = &__p;
        uint64_t v11 = llvm::MCAsmParser::Error(a1, a2, (llvm::Twine *)v69, 0, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v49[0]) {
          (*(void (**)(uint64_t))(*(void *)v49[0] + 8))(v49[0]);
        }
        if (v84)
        {
          uint64_t v40 = v83;
          uint64_t v83 = 0;
          if (v40) {
            (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
          }
        }
        goto LABEL_91;
      }
    }
    else
    {
      uint64_t v41 = *(void *)(a1 + 216);
      if (*(unsigned __int16 *)(v41 + 1712) <= 4u) {
        *(_WORD *)(v41 + 1712) = 5;
      }
      uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      __int8 v80 = v44.i8[6];
      __int8 v77 = v24;
      __int16 v79 = v44.i16[2];
      __int32 v78 = v44.i32[0];
      int8x8_t v81 = v2;
      char v82 = v25;
      v52[0] = v27;
      v52[1] = v13;
      char v53 = v26;
      *(_DWORD *)long long v54 = *(_DWORD *)v60;
      *(_DWORD *)&v54[3] = *(_DWORD *)&v60[3];
      (*(void (**)(uint64_t, void *, uint64_t, void *, uint64_t, __int8 *, void *, void))(*(void *)v42 + 688))(v42, v46, v45, v48, v47, &v77, v52, 0);
    }
    if (!*(unsigned char *)(a1 + 798) && !llvm::MCContext::isDwarfMD5UsageConsistent(*(llvm::MCContext **)(a1 + 216)))
    {
      *(unsigned char *)(a1 + 798) = 1;
      v69[0] = "inconsistent use of MD5 checksums";
      __int16 v70 = 259;
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD **, void, void))(*(void *)a1 + 168))(a1, a2, v69, 0, 0);
LABEL_91:
      if (SHIBYTE(v59) < 0) {
        operator delete(v57);
      }
      goto LABEL_93;
    }
LABEL_90:
    uint64_t v11 = 0;
    goto LABEL_91;
  }
  uint64_t v11 = 1;
LABEL_95:
  if (SHIBYTE(v68) < 0) {
    operator delete(v66);
  }
  return v11;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveLine(_anonymous_namespace_::AsmParser *this)
{
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4
    && (uint64_t v3 = "unexpected token in '.line' directive",
        __int16 v4 = 259,
        llvm::MCAsmParser::parseIntToken(this, &v5, (const llvm::Twine *)&v3)))
  {
    return 1;
  }
  else
  {
    return llvm::MCAsmParser::parseEOL(this);
  }
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveLoc(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v31 = 0;
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  v29[0] = "unexpected token in '.loc' directive";
  __int16 v30 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v31, (const llvm::Twine *)v29)) {
    return 1;
  }
  uint64_t v3 = v31;
  if (v31 <= 0)
  {
    unsigned int v4 = *(unsigned __int16 *)(*((void *)this + 27) + 1712);
    *(void *)uint64_t v27 = "file number less than one in '.loc' directive";
    __int16 v28 = 259;
    if (v4 <= 4)
    {
      uint64_t v5 = (llvm::Twine *)v27;
LABEL_12:
      __int16 v12 = this;
      uint64_t v13 = v2;
LABEL_13:
      llvm::MCAsmParser::Error((uint64_t)v12, v13, v5, 0, 0);
      return 1;
    }
  }
  uint64_t v6 = (uint64_t **)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
  *(void *)char v25 = "unassigned file number in '.loc' directive";
  __int16 v26 = 259;
  if (!llvm::MCContext::isValidDwarfFileNumber(v6, v3, 0))
  {
    uint64_t v5 = (llvm::Twine *)v25;
    goto LABEL_12;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4)
  {
    uint64_t v7 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
    uint64_t v10 = *(uint64_t **)(v7 + 24);
    uint64_t v8 = (uint64_t *)(v7 + 24);
    uint64_t v9 = v10;
    if (*((_DWORD *)v8 + 2) >= 0x41u) {
      uint64_t v8 = v9;
    }
    uint64_t v11 = *v8;
    if (*v8 < 0)
    {
      int16x8_t v23 = "line number less than zero in '.loc' directive";
      goto LABEL_27;
    }
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4)
  {
    uint64_t v16 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
    uint64_t v19 = *(uint64_t **)(v16 + 24);
    char v17 = (uint64_t *)(v16 + 24);
    char v18 = v19;
    if (*((_DWORD *)v17 + 2) >= 0x41u) {
      char v17 = v18;
    }
    uint64_t v20 = *v17;
    if ((*v17 & 0x8000000000000000) == 0)
    {
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
      goto LABEL_23;
    }
    int16x8_t v23 = "column position less than zero in '.loc' directive";
LABEL_27:
    v29[0] = v23;
    __int16 v30 = 259;
    uint64_t v13 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 96);
    uint64_t v5 = (llvm::Twine *)v29;
    __int16 v12 = this;
    goto LABEL_13;
  }
  uint64_t v20 = 0;
LABEL_23:
  int v21 = *(unsigned char *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this) + 1594) & 1;
  unsigned int v24 = 0;
  v25[0] = v21;
  *(void *)uint64_t v27 = 0;
  v29[0] = this;
  v29[1] = v25;
  uint64_t v29[2] = &v24;
  void v29[3] = v27;
  if ((v14 & 1) == 0)
  {
    uint64_t v22 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v22 + 712))(v22, v3, v11, v20, v25[0], v24, v27[0]);
  }
  return v14;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVFile(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  v35[0] = 0;
  v35[1] = 0;
  memset(&__p, 0, sizeof(__p));
  uint64_t v33 = 0;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected file number in '.cv_file' directive";
  __int16 v32 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v37, (const llvm::Twine *)&v31)) {
    goto LABEL_44;
  }
  v29[0] = "file number less than one";
  __int16 v30 = 259;
  if (v37 <= 0)
  {
    llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v29, 0, 0);
    goto LABEL_44;
  }
  int v3 = **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
  uint64_t v27 = "unexpected token in '.cv_file' directive";
  __int16 v28 = 259;
  llvm::MCAsmParser::check(this, v3 != 3, (const llvm::Twine *)&v27);
  if (v3 != 3
    || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, void **))(*(void *)this + 208))(this, v35) & 1) != 0)
  {
    goto LABEL_44;
  }
  if (llvm::MCAsmParser::parseOptionalToken(this, 9))
  {
    std::string::size_type size = 0;
    std::string::size_type v5 = 0;
    unsigned int v6 = 0;
    goto LABEL_7;
  }
  int v26 = **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_file' directive";
  __int16 v32 = 259;
  llvm::MCAsmParser::check(this, v26 != 3, (const llvm::Twine *)&v31);
  if (v26 != 3
    || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, std::string *))(*(void *)this + 208))(this, &__p) & 1) != 0|| (v29[0] = "expected checksum kind in '.cv_file' directive", __int16 v30 = 259, llvm::MCAsmParser::parseIntToken(this, &v33, (const llvm::Twine *)v29))|| llvm::MCAsmParser::parseEOL(this))
  {
LABEL_44:
    uint64_t v24 = 1;
    goto LABEL_45;
  }
  unsigned int v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[0];
LABEL_7:
  int v7 = (char)v6;
  if ((v6 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v5;
  }
  if ((v6 & 0x80u) == 0) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = size;
  }
  memset(&v31, 0, sizeof(v31));
  if (v9)
  {
    std::string::resize(&v31, (v9 + 1) >> 1, 0);
    uint64_t v10 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v31;
    }
    else {
      uint64_t v11 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if ((v9 & 1) == 0)
    {
LABEL_24:
      if (v9 >= 2)
      {
        unint64_t v14 = v9 >> 1;
        uint64_t v15 = &p_p->__r_.__value_.__s.__data_[1];
        do
        {
          int v16 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*(v15 - 1)];
          int v17 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[*v15];
          if (v16 == 0xFFFF || v17 == 0xFFFF) {
            break;
          }
          v15 += 2;
          v11->__r_.__value_.__s.__data_[0] = v17 | (16 * v16);
          uint64_t v11 = (std::string *)((char *)v11 + 1);
          --v14;
        }
        while (v14);
      }
      goto LABEL_31;
    }
    int v12 = (unsigned __int16)llvm::hexDigitValue(char)::LUT[p_p->__r_.__value_.__s.__data_[0]];
    if (v12 != 0xFFFF)
    {
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v10 = &v31;
      }
      v11->__r_.__value_.__s.__data_[0] = v12;
      uint64_t v11 = (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + 1);
      uint64_t v13 = &__p;
      if (v7 < 0) {
        uint64_t v13 = (std::string *)v5;
      }
      p_p = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
      --v9;
      goto LABEL_24;
    }
  }
LABEL_31:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v31;
  unsigned int v19 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unsigned int v19 = v31.__r_.__value_.__r.__words[1];
  }
  uint64_t v20 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((void *)this + 27) + 184, v19, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v21 = &__p;
  }
  else {
    int v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v22 = __p.__r_.__value_.__l.__size_;
  }
  memcpy(v20, v21, v22);
  uint64_t v23 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  if ((*(uint64_t (**)(void))(*(void *)v23 + 720))())
  {
    uint64_t v24 = 0;
  }
  else
  {
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"file number already allocated";
    __int16 v32 = 259;
    uint64_t v24 = llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)&v31, 0, 0);
  }
LABEL_45:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[0]);
  }
  return v24;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVFuncId(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  uint64_t v7 = 0;
    || llvm::MCAsmParser::parseEOL(this))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  if ((*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 728))(v4, v7)) {
    return 0;
  }
  std::string::size_type v5 = "function id already allocated";
  __int16 v6 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)&v5, 0, 0);
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVInlineSiteId(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  uint64_t v31 = 0;
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) != 2) {
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
  if (*(_DWORD *)v3 == 2)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    unint64_t v5 = *(void *)(v3 + 16);
  }
  else
  {
    uint64_t v4 = *(void *)(v3 + 8);
    unint64_t v6 = *(void *)(v3 + 16);
    unint64_t v7 = v6 - 1;
    unint64_t v8 = v6 != 0;
    if (v6) {
      ++v4;
    }
    if (v7 < v8) {
      unint64_t v7 = 1;
    }
    if (v7 >= v6) {
      unint64_t v7 = v6;
    }
    unint64_t v5 = v7 - v8;
  }
  if (v5 != 6)
  {
LABEL_18:
    v26[0] = "expected 'within' identifier in '.cv_inline_site_id' directive";
    __int16 v27 = 259;
    uint64_t v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(void *)(*(void *)(v13 + 8) + 8), (llvm::Twine *)v26, 0, 0);
    return 1;
  }
  int v9 = *(_DWORD *)v4 ^ 0x68746977 | *(unsigned __int16 *)(v4 + 4) ^ 0x6E69;
  v26[0] = "expected 'within' identifier in '.cv_inline_site_id' directive";
  __int16 v27 = 259;
  llvm::MCAsmParser::check(this, v9 != 0, (const llvm::Twine *)v26);
  if (v9) {
    return 1;
  }
  uint64_t v30 = 0;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) != 2) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
  if (*(_DWORD *)v10 == 2)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    unint64_t v12 = *(void *)(v10 + 16);
  }
  else
  {
    uint64_t v11 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(v10 + 16);
    unint64_t v17 = v16 - 1;
    unint64_t v18 = v16 != 0;
    if (v16) {
      ++v11;
    }
    if (v17 < v18) {
      unint64_t v17 = 1;
    }
    if (v17 >= v16) {
      unint64_t v17 = v16;
    }
    unint64_t v12 = v17 - v18;
  }
  if (v12 != 10)
  {
LABEL_36:
    v26[0] = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
    __int16 v27 = 259;
    uint64_t v14 = 1;
    llvm::MCAsmParser::check(this, 1, (const llvm::Twine *)v26);
    return v14;
  }
  uint64_t v19 = *(void *)v11 ^ 0x5F64656E696C6E69 | *(unsigned __int16 *)(v11 + 8) ^ 0x7461;
  v26[0] = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
  __int16 v27 = 259;
  llvm::MCAsmParser::check(this, v19 != 0, (const llvm::Twine *)v26);
  if (v19) {
    return 1;
  }
  uint64_t v29 = 0;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
  uint64_t v28 = 0;
  v26[0] = "expected line number after 'inlined_at'";
  __int16 v27 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v28, (const llvm::Twine *)v26)) {
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4)
  {
    uint64_t v20 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
    uint64_t v23 = *(unsigned int **)(v20 + 24);
    int v21 = (unsigned int *)(v20 + 24);
    size_t v22 = v23;
    if (v21[2] >= 0x41) {
      int v21 = v22;
    }
    uint64_t v24 = *v21;
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
  }
  else
  {
    uint64_t v24 = 0;
  }
  if (llvm::MCAsmParser::parseEOL(this)) {
    return 1;
  }
  uint64_t v25 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  if ((*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t, uint64_t))(*(void *)v25 + 736))(v25, v31, v30, v29, v28, v24, v2))return 0; {
  v26[0] = "function id already allocated";
  }
  __int16 v27 = 259;
  return llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v26, 0, 0);
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVLoc(_anonymous_namespace_::AsmParser *this)
{
  (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
  uint64_t v22 = 0;
    return 1;
  uint64_t v21 = 0;
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4)
  {
    uint64_t v2 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
    unint64_t v5 = *(uint64_t **)(v2 + 24);
    uint64_t v3 = (uint64_t *)(v2 + 24);
    uint64_t v4 = v5;
    if (*((_DWORD *)v3 + 2) >= 0x41u) {
      uint64_t v3 = v4;
    }
    uint64_t v6 = *v3;
    if (*v3 < 0)
    {
      uint64_t v14 = "line number less than zero in '.cv_loc' directive";
LABEL_19:
      v19[0] = v14;
      __int16 v20 = 259;
      uint64_t v15 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
      llvm::MCAsmParser::Error((uint64_t)this, *(void *)(v15 + 96), (llvm::Twine *)v19, 0, 0);
      return 1;
    }
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4)
  {
    uint64_t v7 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8);
    uint64_t v10 = *(uint64_t **)(v7 + 24);
    unint64_t v8 = (uint64_t *)(v7 + 24);
    int v9 = v10;
    if (*((_DWORD *)v8 + 2) >= 0x41u) {
      unint64_t v8 = v9;
    }
    uint64_t v11 = *v8;
    if ((*v8 & 0x8000000000000000) == 0)
    {
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
      goto LABEL_15;
    }
    uint64_t v14 = "column position less than zero in '.cv_loc' directive";
    goto LABEL_19;
  }
  uint64_t v11 = 0;
LABEL_15:
  unsigned __int8 v18 = 0;
  uint64_t v17 = 0;
  v19[0] = this;
  v19[1] = &v18;
  v19[2] = &v17;
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, void, BOOL))(*(void *)v13 + 744))(v13, v22, v21, v6, v11, v18, v17 != 0);
  }
  return v12;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVLinetable(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v18 = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
    return 1;
  uint64_t v19 = "expected comma";
  __int16 v21 = 259;
  if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v19)) {
    return 1;
  }
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  int v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(void *)this + 192))(this, &v16);
  uint64_t v12 = "expected identifier in directive";
  __int16 v13 = 259;
  if (v3)
  {
    uint64_t v4 = &v12;
LABEL_8:
    llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v4, 0, 0);
    return 1;
  }
  uint64_t v19 = "expected comma";
  __int16 v21 = 259;
  if (!llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v19))
  {
    uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                               + 8)
                   + 8);
    int v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(void *)this + 192))(this, &v14);
    uint64_t v10 = "expected identifier in directive";
    __int16 v11 = 259;
    if (!v5)
    {
      uint64_t v7 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      __int16 v21 = 261;
      uint64_t v19 = v16;
      uint64_t v20 = v17;
      llvm::MCContext::getOrCreateSymbol(v7, (const llvm::Twine *)&v19);
      unint64_t v8 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      __int16 v21 = 261;
      uint64_t v19 = v14;
      uint64_t v20 = v15;
      llvm::MCContext::getOrCreateSymbol(v8, (const llvm::Twine *)&v19);
      uint64_t v9 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
      (*(void (**)(uint64_t))(*(void *)v9 + 752))(v9);
      return 0;
    }
    uint64_t v4 = &v10;
    goto LABEL_8;
  }
  return 1;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVInlineLinetable(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v29 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
    return 1;
  uint64_t v28 = 0;
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  uint64_t v20 = "expected SourceField in '.cv_inline_linetable' directive";
  __int16 v22 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v28, (const llvm::Twine *)&v20)) {
    return 1;
  }
  uint64_t v18 = "File id less than zero in '.cv_inline_linetable' directive";
  __int16 v19 = 259;
  if (v28 < 1)
  {
    uint64_t v4 = &v18;
    goto LABEL_12;
  }
  uint64_t v27 = 0;
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                             + 8)
                 + 8);
  unint64_t v16 = "expected SourceLineNum in '.cv_inline_linetable' directive";
  __int16 v17 = 259;
  if (!llvm::MCAsmParser::parseIntToken(this, &v27, (const llvm::Twine *)&v16))
  {
    uint64_t v14 = "Line number less than zero in '.cv_inline_linetable' directive";
    __int16 v15 = 259;
    if (v27 < 0)
    {
      uint64_t v4 = &v14;
      goto LABEL_12;
    }
    uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                               + 8)
                   + 8);
    char v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(void *)this + 192))(this, &v25);
    uint64_t v12 = "expected identifier in directive";
    __int16 v13 = 259;
    if (v3)
    {
      uint64_t v4 = &v12;
LABEL_12:
      llvm::MCAsmParser::Error((uint64_t)this, v2, (llvm::Twine *)v4, 0, 0);
      return 1;
    }
    uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                               + 8)
                   + 8);
    int v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(void *)this + 192))(this, &v23);
    uint64_t v10 = "expected identifier in directive";
    __int16 v11 = 259;
    if (v5)
    {
      uint64_t v4 = &v10;
      goto LABEL_12;
    }
    if (!llvm::MCAsmParser::parseEOL(this))
    {
      uint64_t v7 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      __int16 v22 = 261;
      uint64_t v20 = v25;
      uint64_t v21 = v26;
      llvm::MCContext::getOrCreateSymbol(v7, (const llvm::Twine *)&v20);
      unint64_t v8 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      __int16 v22 = 261;
      uint64_t v20 = v23;
      uint64_t v21 = v24;
      llvm::MCContext::getOrCreateSymbol(v8, (const llvm::Twine *)&v20);
      uint64_t v9 = *(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
      (*(void (**)(void))(v9 + 760))();
      return 0;
    }
  }
  return 1;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVDefRange(_anonymous_namespace_::AsmParser *this)
{
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 2)
  {
    uint64_t v2 = 0;
    char v3 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                     + 96);
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, char **))(*(void *)this + 192))(this, &v33))
      {
        break;
      }
      uint64_t v6 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      __int16 v32 = 261;
      uint64_t v30 = v33;
      unint64_t v31 = v34;
      unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)&v30);
      uint64_t v5 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                     + 96);
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, const char **))(*(void *)this + 192))(this, &v28))
      {
        break;
      }
      unint64_t v8 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
      __int16 v32 = 261;
      uint64_t v30 = v28;
      unint64_t v31 = v29;
      unint64_t v9 = llvm::MCContext::getOrCreateSymbol(v8, (const llvm::Twine *)&v30);
      unint64_t v10 = v9;
      if (v3 >= v4)
      {
        uint64_t v11 = ((char *)v3 - (char *)v2) >> 4;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60) {
          abort();
        }
        if (v4 - v2 > v12) {
          unint64_t v12 = v4 - v2;
        }
        if ((unint64_t)((char *)v4 - (char *)v2) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          if (v13 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v14 = (char *)operator new(16 * v13);
        }
        else
        {
          uint64_t v14 = 0;
        }
        __int16 v15 = (unint64_t *)&v14[16 * v11];
        *__int16 v15 = Symbol;
        v15[1] = v10;
        if (v3 == v2)
        {
          __int16 v17 = &v14[16 * v11];
        }
        else
        {
          unint64_t v16 = &v14[16 * v11];
          do
          {
            __int16 v17 = v16 - 16;
            *((_OWORD *)v16 - 1) = *((_OWORD *)v3 - 1);
            v3 -= 2;
            v16 -= 16;
          }
          while (v3 != v2);
        }
        uint64_t v4 = (unint64_t *)&v14[16 * v13];
        char v3 = v15 + 2;
        if (v2) {
          operator delete(v2);
        }
        uint64_t v2 = (unint64_t *)v17;
      }
      else
      {
        unint64_t *v3 = Symbol;
        v3[1] = v9;
        v3 += 2;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                       + 8) != 2)
        goto LABEL_28;
    }
    uint64_t v18 = "expected identifier in directive";
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v5 = 0;
LABEL_28:
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    uint64_t v30 = "expected comma before def_range type in .cv_def_range directive";
    __int16 v32 = 259;
    if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v30)
      || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, char **))(*(void *)this + 192))(this, &v33) & 1) != 0)
    {
      uint64_t v18 = "expected def_range type in directive";
    }
    else
    {
      int Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 103, (uint64_t *)v33, v34);
      if (Key != -1 && Key != (unint64_t)*((unsigned int *)this + 208))
      {
        switch(*(_DWORD *)(*(void *)(*((void *)this + 103) + 8 * Key) + 8))
        {
          case 1:
            uint64_t v28 = 0;
            uint64_t v30 = "expected comma before register number in .cv_def_range directive";
            __int16 v32 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v30)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(void *)this + 256))(this, &v28) & 1) != 0)
            {
              goto LABEL_49;
            }
            uint64_t v22 = *(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
            (*(void (**)(void))(v22 + 792))();
            goto LABEL_45;
          case 2:
            uint64_t v28 = 0;
            uint64_t v30 = "expected comma before offset in .cv_def_range directive";
            __int16 v32 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v30)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(void *)this + 256))(this, &v28) & 1) != 0)
            {
              goto LABEL_55;
            }
            uint64_t v23 = *(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
            (*(void (**)(void))(v23 + 800))();
            goto LABEL_45;
          case 3:
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            uint64_t v30 = "expected comma before register number in .cv_def_range directive";
            __int16 v32 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v30)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(void *)this + 256))(this, &v28) & 1) != 0)
            {
LABEL_49:
              uint64_t v18 = "expected register number";
              goto LABEL_35;
            }
            uint64_t v30 = "expected comma before offset in .cv_def_range directive";
            __int16 v32 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v30)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v27) & 1) != 0)
            {
LABEL_55:
              uint64_t v18 = "expected offset value";
              goto LABEL_35;
            }
            uint64_t v24 = *(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
            (*(void (**)(void))(v24 + 784))();
            goto LABEL_45;
          case 4:
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            uint64_t v26 = 0;
            uint64_t v30 = "expected comma before register number in .cv_def_range directive";
            __int16 v32 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v30)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, const char **))(*(void *)this + 256))(this, &v28) & 1) != 0)
            {
              uint64_t v18 = "expected register value";
              goto LABEL_35;
            }
            uint64_t v30 = "expected comma before flag value in .cv_def_range directive";
            __int16 v32 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v30)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v27) & 1) != 0)
            {
              uint64_t v18 = "expected flag value";
              goto LABEL_35;
            }
            uint64_t v30 = "expected comma before base pointer offset in .cv_def_range directive";
            __int16 v32 = 259;
            if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)&v30)
              || ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v26) & 1) != 0)
            {
              uint64_t v18 = "expected base pointer offset value";
              goto LABEL_35;
            }
            uint64_t v25 = *(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
            (*(void (**)(void))(v25 + 776))();
LABEL_45:
            uint64_t v20 = 1;
            if (!v2) {
              return v20;
            }
            goto LABEL_36;
          default:
            break;
        }
      }
      uint64_t v18 = "unexpected def_range type in .cv_def_range directive";
    }
  }
LABEL_35:
  uint64_t v30 = v18;
  __int16 v32 = 259;
  uint64_t v20 = llvm::MCAsmParser::Error((uint64_t)this, v5, (llvm::Twine *)&v30, 0, 0);
  if (v2) {
LABEL_36:
  }
    operator delete(v2);
  return v20;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVString(llvm::MCContext **this)
{
  std::string __p = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  if (((*((uint64_t (**)(llvm::MCContext **))*this + 33))(this) & 1) != 0
    || ((*((uint64_t (**)(llvm::MCContext **, void **))*this + 26))(this, &__p) & 1) != 0)
  {
    uint64_t v2 = 1;
  }
  else
  {
    CVContext = (llvm::CodeViewContext *)llvm::MCContext::getCVContext(this[27]);
    if (v11 >= 0) {
      p_p = (uint64_t *)&__p;
    }
    else {
      p_p = (uint64_t *)__p;
    }
    if (v11 >= 0) {
      unint64_t v5 = HIBYTE(v11);
    }
    else {
      unint64_t v5 = v10;
    }
    llvm::CodeViewContext::addToStringTable(CVContext, p_p, v5, (uint64_t)&v8);
    uint64_t v6 = *(void *)(*((uint64_t (**)(llvm::MCContext **))*this + 7))(this);
    (*(void (**)(void))(v6 + 512))();
    uint64_t v2 = 0;
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  return v2;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVFileChecksumOffset(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v6 = 0;
  uint64_t v4 = "expected identifier in directive";
  __int16 v5 = 259;
  if (llvm::MCAsmParser::parseIntToken(this, &v6, (const llvm::Twine *)&v4) || llvm::MCAsmParser::parseEOL(this)) {
    return 1;
  }
  uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(uint64_t, void))(*(void *)v3 + 824))(v3, v6);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCVFPOData(_anonymous_namespace_::AsmParser *this)
{
  (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if ((*(unsigned int (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 192))(this, &v8))
  {
    v6[0] = "expected symbol name";
    __int16 v7 = 259;
    uint64_t v2 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(void *)(v2 + 96), (llvm::Twine *)v6, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(this)) {
    return 1;
  }
  uint64_t v4 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
  __int16 v7 = 261;
  v6[0] = v8;
  v6[1] = v9;
  llvm::MCContext::getOrCreateSymbol(v4, (const llvm::Twine *)v6);
  uint64_t v5 = *(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(void))(v5 + 832))();
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFISections(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v2 = 0;
  char v3 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 9))
  {
LABEL_2:
    uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t, void, void))(*(void *)v4 + 864))(v4, v3 & 1, v2 & 1);
    return 0;
  }
  while (!(*(unsigned int (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 192))(this, &v10))
  {
    if (v11 == 12)
    {
      BOOL v7 = *(void *)v10 == 0x665F67756265642ELL && *(_DWORD *)(v10 + 8) == 1701667186;
    }
    else
    {
      if (v11 == 9 && *(void *)v10 == 0x6D6172665F68652ELL && *(unsigned char *)(v10 + 8) == 101)
      {
        char v3 = 1;
        goto LABEL_18;
      }
      BOOL v7 = 0;
    }
    v2 |= v7;
LABEL_18:
    if (llvm::MCAsmParser::parseOptionalToken(this, 9)) {
      goto LABEL_2;
    }
    v12[0] = "expected comma";
    __int16 v13 = 259;
    if (llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)v12)) {
      return 1;
    }
  }
  v12[0] = "expected .eh_frame or .debug_frame";
  __int16 v13 = 259;
  uint64_t v9 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
  llvm::MCAsmParser::Error((uint64_t)this, *(void *)(v9 + 96), (llvm::Twine *)v12, 0, 0);
  return 1;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIStartProc(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  if (llvm::MCAsmParser::parseOptionalToken(this, 9)) {
    goto LABEL_2;
  }
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 192))(this, &v8) & 1) != 0
    || v9 != 6)
  {
    v6[0] = "unexpected token";
    __int16 v7 = 259;
    uint64_t v5 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(void *)(*(void *)(v5 + 8) + 8), (llvm::Twine *)v6, 0, 0);
  }
  else
  {
    int v4 = *(_DWORD *)v8 ^ 0x706D6973 | *(unsigned __int16 *)(v8 + 4) ^ 0x656C;
    v6[0] = "unexpected token";
    __int16 v7 = 259;
    llvm::MCAsmParser::check(this, v4 != 0, (const llvm::Twine *)v6);
    if (!v4 && !llvm::MCAsmParser::parseEOL(this))
    {
LABEL_2:
      uint64_t v2 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
      llvm::MCStreamer::emitCFIStartProc(v2, v9 != 0, *((void *)this + 17));
      return 0;
    }
  }
  return 1;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveCFIEndProc(_anonymous_namespace_::AsmParser *this)
{
  BOOL v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    char v3 = (llvm::MCStreamer *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    llvm::MCStreamer::emitCFIEndProc(v3);
  }
  return v2;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIDefCfa(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
    return 1;
  __int16 v7 = "expected comma";
  __int16 v8 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v7)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v5) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 872))(v4, v6, v5);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIDefCfaOffset(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v4 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v4) & 1) != 0
    || llvm::MCAsmParser::parseEOL(this))
  {
    return 1;
  }
  uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 880))(v3, v4);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIAdjustCfaOffset(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v4 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 256))(this, &v4) & 1) != 0
    || llvm::MCAsmParser::parseEOL(this))
  {
    return 1;
  }
  uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 968))(v3, v4);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIDefCfaRegister(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 888))(v4, v5);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFILLVMDefAspaceCfa(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v5 = 0;
    return 1;
  v8[0] = "expected comma";
  __int16 v9 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)v8)) {
    return 1;
  }
  if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v6)) {
    return 1;
  }
  v8[0] = "expected comma";
  __int16 v9 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)v8)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v5) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 896))(v4, v7, v6, v5);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIOffset(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
    return 1;
  uint64_t v7 = "expected comma";
  __int16 v8 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v7)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v5) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 904))(v4, v6, v5);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIRelOffset(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
    return 1;
  uint64_t v7 = "expected comma";
  __int16 v8 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v7)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v5) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 960))(v4, v6, v5);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIPersonalityOrLsda(_anonymous_namespace_::AsmParser *this, int a2)
{
  unint64_t v18 = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, unint64_t *))(*(void *)this + 256))(this, &v18) & 1) == 0)
  {
    if (v18 == 255) {
      return 0;
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    if (v18 > 0xFF
      || (v18 & 0xD) != 0 && ((v18 & 0xF) <= 0xC ? (BOOL v5 = ((1 << (v18 & 0xF)) & 0x1D18) == 0) : (BOOL v5 = 1), v5))
    {
      v14[0] = "unsupported encoding.";
      __int16 v15 = 259;
      uint64_t v11 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this);
      llvm::MCAsmParser::Error((uint64_t)this, *(void *)(*(void *)(v11 + 8) + 8), (llvm::Twine *)v14, 0, 0);
    }
    else
    {
      unint64_t v6 = v18 & 0x60;
      v14[0] = "unsupported encoding.";
      __int16 v15 = 259;
      llvm::MCAsmParser::check(this, v6 != 0, (const llvm::Twine *)v14);
      if (!v6)
      {
        v19[0] = "expected comma";
        __int16 v20 = 259;
        if (!llvm::MCAsmParser::parseToken(this, 25, (llvm::Twine *)v19))
        {
          uint64_t v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 192))(this, &v16);
          char v8 = v7;
          unint64_t v12 = "expected identifier in directive";
          __int16 v13 = 259;
          llvm::MCAsmParser::check(this, v7, (const llvm::Twine *)&v12);
          if ((v8 & 1) == 0 && !llvm::MCAsmParser::parseEOL(this))
          {
            __int16 v9 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this
                                                                                                  + 48))(this);
            __int16 v20 = 261;
            v19[0] = v16;
            v19[1] = v17;
            llvm::MCContext::getOrCreateSymbol(v9, (const llvm::Twine *)v19);
            uint64_t v10 = *(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
            if (a2) {
              (*(void (**)(void))(v10 + 912))();
            }
            else {
              (*(void (**)(void))(v10 + 920))();
            }
            return 0;
          }
        }
      }
    }
  }
  return 1;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveCFIRememberState(_anonymous_namespace_::AsmParser *this)
{
  BOOL v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t))(*(void *)v3 + 928))(v3);
  }
  return v2;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveCFIRestoreState(_anonymous_namespace_::AsmParser *this)
{
  BOOL v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t))(*(void *)v3 + 936))(v3);
  }
  return v2;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFISameValue(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 944))(v4, v5);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIRestore(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 952))(v4, v5);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIEscape(_anonymous_namespace_::AsmParser *this)
{
  memset(&v9, 0, sizeof(v9));
  *(void *)__c = 0;
  if (((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, std::string::value_type *))(*(void *)this
                                                                                                 + 256))(this, __c) & 1) != 0)
  {
LABEL_2:
    uint64_t v2 = 1;
  }
  else
  {
    for (std::string::value_type i = __c[0]; ; std::string::value_type i = __c[0])
    {
      std::string::push_back(&v9, i);
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                       + 8) != 25)
        break;
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
      if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *, std::string::value_type *))(*(void *)this + 256))(this, __c))goto LABEL_2; {
    }
      }
    uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = &v9;
    }
    else {
      uint64_t v5 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v9.__r_.__value_.__l.__size_;
    }
    (*(void (**)(uint64_t, std::string *, std::string::size_type))(*(void *)v4 + 976))(v4, v5, size);
    uint64_t v2 = 0;
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  return v2;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIReturnColumn(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 984))(v4, v5);
  return 0;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveCFISignalFrame(_anonymous_namespace_::AsmParser *this)
{
  BOOL v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t))(*(void *)v3 + 1000))(v3);
  }
  return v2;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIUndefined(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v5 = 0;
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 1008))(v4, v5);
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveCFIRegister(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
    return 1;
  char v8 = "expected comma";
  __int16 v9 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v8)
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 1016))(v5, v7, v6);
  return 0;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveCFIWindowSave(_anonymous_namespace_::AsmParser *this)
{
  BOOL v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t))(*(void *)v3 + 1024))(v3);
  }
  return v2;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveMacrosOnOff(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3)
{
  BOOL result = llvm::MCAsmParser::parseEOL(a1);
  if (!result)
  {
    BOOL v8 = a3 == 10 && *(void *)a2 == 0x5F736F7263616D2ELL && *(_WORD *)(a2 + 8) == 28271;
    *((unsigned char *)a1 + 416) = *((unsigned char *)a1 + 416) & 0xFE | v8;
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveMacro(uint64_t a1, uint64_t a2)
{
  long long v113 = 0uLL;
  if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1 + 192))(a1, &v113))
  {
    *(void *)&long long v86 = "expected identifier in '.macro' directive";
    *(_WORD *)&v87[16] = 259;
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(void *)(v4 + 96), (llvm::Twine *)&v86, 0, 0);
    return 1;
  }
  uint64_t v76 = a2;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) == 25) {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  uint64_t v6 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) != 9)
  {
    uint64_t v8 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      if ((const void **)v8 != v6 && *((unsigned char *)v6 - 7))
      {
        uint64_t v70 = *(void *)(a1 + 136);
        LOWORD(v109) = 1283;
        *(void *)&long long v106 = "vararg parameter '";
        v107 = (const char *)*(v6 - 6);
        uint64_t v108 = (uint64_t)*(v6 - 5);
        *(void *)&long long v86 = &v106;
        *(void *)v87 = "' should be the last parameter";
        *(_WORD *)&v87[16] = 770;
        uint64_t v5 = llvm::MCAsmParser::Error(a1, v70, (llvm::Twine *)&v86, 0, 0);
        goto LABEL_125;
      }
      long long v86 = 0u;
      memset(v87, 0, 26);
      if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1 + 192))(a1, &v86))
      {
        *(void *)&long long v106 = "expected identifier in '.macro' directive";
        LOWORD(v109) = 259;
        uint64_t v67 = llvm::MCAsmParser::TokError(a1, (llvm::Twine *)&v106, 0, 0);
        goto LABEL_146;
      }
      if ((const void **)v8 != v6)
      {
        long long v9 = v86;
        uint64_t v10 = (const void **)v8;
        while (v10[1] != *((const void **)&v9 + 1)
             || *((void *)&v9 + 1) && memcmp(*v10, (const void *)v9, *((size_t *)&v9 + 1)))
        {
          v10 += 6;
          if (v10 == v6) {
            goto LABEL_18;
          }
        }
        __int16 v99 = 1283;
        v97[0] = "macro '";
        long long v98 = v113;
        v100[0] = (uint64_t)v97;
        v101 = "' has multiple parameters named '";
        __int16 v102 = 770;
        v103[0] = (void **)v100;
        long long v104 = v9;
        __int16 v105 = 1282;
        *(void *)&long long v106 = v103;
        *((void *)&v106 + 1) = *((void *)&v9 + 1);
        v107 = "'";
        LOWORD(v109) = 770;
        uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(void *)(v28 + 96), (llvm::Twine *)&v106, 0, 0);
LABEL_62:
        uint64_t v5 = 1;
        goto LABEL_63;
      }
LABEL_18:
      if (**(_DWORD **)(a1 + 48) == 10)
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        uint64_t v95 = 0;
        uint64_t v96 = 0;
        uint64_t v11 = *(void *)(a1 + 136);
        if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 192))(a1, &v95))
        {
          __int16 v99 = 1283;
          v97[0] = "missing parameter qualifier for '";
          long long v98 = v86;
          v100[0] = (uint64_t)v97;
          v101 = "' in macro '";
          __int16 v102 = 770;
          v103[0] = (void **)v100;
          long long v104 = v113;
          __int16 v105 = 1282;
          *(void *)&long long v106 = v103;
          v107 = "'";
          LOWORD(v109) = 770;
LABEL_145:
          uint64_t v67 = llvm::MCAsmParser::Error(a1, v11, (llvm::Twine *)&v106, 0, 0);
LABEL_146:
          uint64_t v5 = v67;
LABEL_63:
          *(void *)&long long v106 = v87;
          std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v106);
          goto LABEL_125;
        }
        if (v96 == 6)
        {
          if (*(_DWORD *)v95 != 1634886006 || *(_WORD *)(v95 + 4) != 26482)
          {
LABEL_143:
            __int16 v94 = 773;
            v93[0] = v95;
            v93[1] = v96;
            v93[2] = " is not a valid parameter qualifier for '";
            v97[0] = v93;
            long long v98 = v86;
            __int16 v99 = 1282;
            v100[0] = (uint64_t)v97;
            v101 = "' in macro '";
            __int16 v102 = 770;
            v103[0] = (void **)v100;
            long long v104 = v113;
            __int16 v105 = 1282;
            *(void *)&long long v106 = v103;
            v107 = "'";
            LOWORD(v109) = 770;
            goto LABEL_145;
          }
          v87[25] = 1;
        }
        else
        {
          if (v96 != 3) {
            goto LABEL_143;
          }
          if (*(_WORD *)v95 != 25970 || *(unsigned char *)(v95 + 2) != 113) {
            goto LABEL_143;
          }
          v87[24] = 1;
        }
      }
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) == 27)
      {
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
        uint64_t v14 = *(void *)(a1 + 136);
          goto LABEL_62;
        if (v87[24])
        {
          __int16 v99 = 1283;
          v97[0] = "pointless default value for required parameter '";
          long long v98 = v86;
          v100[0] = (uint64_t)v97;
          v101 = "' in macro '";
          __int16 v102 = 770;
          v103[0] = (void **)v100;
          long long v104 = v113;
          __int16 v105 = 1282;
          *(void *)&long long v106 = v103;
          v107 = "'";
          LOWORD(v109) = 770;
          (*(void (**)(uint64_t, uint64_t, long long *, void, void))(*(void *)a1 + 168))(a1, v14, &v106, 0, 0);
        }
      }
      if (v6 >= (const void **)v112) {
        break;
      }
      *(_OWORD *)uint64_t v6 = v86;
      v6[3] = 0;
      void v6[4] = 0;
      v6[2] = 0;
      *((_OWORD *)v6 + 1) = *(_OWORD *)v87;
      void v6[4] = *(const void **)&v87[16];
      memset(v87, 0, 24);
      *((_WORD *)v6 + 20) = *(_WORD *)&v87[24];
      v6 += 6;
LABEL_55:
      v111 = v6;
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) == 25) {
        (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      }
      *(void *)&long long v106 = v87;
      std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v106);
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) == 9) {
        goto LABEL_6;
      }
    }
    uint64_t v15 = (uint64_t)v110;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v110) >> 4);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0x555555555555555) {
      abort();
    }
    if (0x5555555555555556 * ((v112 - (char *)v110) >> 4) > v17) {
      unint64_t v17 = 0x5555555555555556 * ((v112 - (char *)v110) >> 4);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v112 - (char *)v110) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v18 = 0x555555555555555;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v19 = 3 * v18;
    __int16 v20 = (char *)operator new(48 * v18);
    uint64_t v8 = (uint64_t)&v20[48 * v16];
    long long v21 = *(_OWORD *)v87;
    *(_OWORD *)uint64_t v8 = v86;
    *(_OWORD *)(v8 + 16) = v21;
    *(void *)(v8 + 32) = *(void *)&v87[16];
    memset(v87, 0, 24);
    *(_WORD *)(v8 + 40) = *(_WORD *)&v87[24];
    uint64_t v22 = (const void **)(v8 + 48);
    if (v6 == (const void **)v15)
    {
      v110 = (const void **)v8;
      v111 = (const void **)(v8 + 48);
      v112 = &v20[16 * v19];
      if (!v6) {
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = v8 + v23 * 8;
        uint64_t v25 = &v6[v23];
        *(_OWORD *)(v24 - 48) = *(_OWORD *)&v6[v23 - 6];
        *(void *)(v24 - 24) = 0;
        *(void *)(v24 - 16) = 0;
        *(void *)(v24 - 32) = 0;
        *(_OWORD *)(v24 - 32) = *(_OWORD *)&v6[v23 - 4];
        *(void *)(v24 - 16) = v6[v23 - 2];
        *(v25 - 4) = 0;
        *(v25 - 3) = 0;
        *(v25 - 2) = 0;
        *(_WORD *)(v24 - 8) = v6[v23 - 1];
        v23 -= 6;
      }
      while (&v6[v23] != (const void **)v15);
      uint64_t v6 = v110;
      uint64_t v26 = v111;
      v8 += v23 * 8;
      v110 = (const void **)v8;
      v111 = v22;
      v112 = &v20[16 * v19];
      if (v26 != v6)
      {
        do
        {
          uint64_t v27 = v26 - 6;
          *(void *)&long long v106 = v26 - 4;
          std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v106);
          uint64_t v26 = v27;
        }
        while (v27 != v6);
      }
      if (!v6) {
        goto LABEL_54;
      }
    }
    operator delete(v6);
LABEL_54:
    uint64_t v6 = v22;
    goto LABEL_55;
  }
LABEL_6:
  llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
  *((void *)&v106 + 1) = 0;
  v107 = 0;
  unsigned int v109 = 1;
  uint64_t v108 = 0;
  uint64_t v7 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  unsigned int v75 = *(_DWORD *)(v7 + 32);
  uint64_t v74 = *(void *)(v7 + 8);
  if (v75 > 0x40) {
    operator new[]();
  }
  int v29 = 0;
  while (1)
  {
    while (**(_DWORD **)(a1 + 48) == 1)
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
    if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8))
    {
      *(void *)&long long v86 = "no matching '.endmacro' in definition";
      *(_WORD *)&v87[16] = 259;
      goto LABEL_121;
    }
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) == 2) {
      break;
    }
    if (**(_DWORD **)(a1 + 48) == 8)
    {
      uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    }
LABEL_119:
    (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
  }
  uint64_t v30 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  if (*(_DWORD *)v30 == 2)
  {
    unint64_t v31 = *(int **)(v30 + 8);
    unint64_t v32 = *(void *)(v30 + 16);
  }
  else
  {
    unint64_t v31 = *(int **)(v30 + 8);
    unint64_t v34 = *(void *)(v30 + 16);
    unint64_t v35 = v34 - 1;
    unint64_t v36 = v34 != 0;
    if (v34) {
      unint64_t v31 = (int *)((char *)v31 + 1);
    }
    if (v35 < v36) {
      unint64_t v35 = 1;
    }
    if (v35 >= v34) {
      unint64_t v35 = v34;
    }
    unint64_t v32 = v35 - v36;
  }
  if (v32 != 5
    || ((v37 = *v31, int v38 = *((unsigned __int8 *)v31 + 4), v37 == 1684956462) ? (v39 = v38 == 109) : (v39 = 0), !v39))
  {
    uint64_t v40 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
    if (*(_DWORD *)v40 == 2)
    {
      uint64_t v41 = *(uint64_t **)(v40 + 8);
      unint64_t v42 = *(void *)(v40 + 16);
    }
    else
    {
      uint64_t v41 = *(uint64_t **)(v40 + 8);
      unint64_t v43 = *(void *)(v40 + 16);
      unint64_t v44 = v43 - 1;
      unint64_t v45 = v43 != 0;
      if (v43) {
        uint64_t v41 = (uint64_t *)((char *)v41 + 1);
      }
      if (v44 < v45) {
        unint64_t v44 = 1;
      }
      if (v44 >= v43) {
        unint64_t v44 = v43;
      }
      unint64_t v42 = v44 - v45;
    }
    if (v42 != 9
      || ((uint64_t v46 = *v41, v47 = *((unsigned __int8 *)v41 + 8), v46 == 0x7263616D646E652ELL)
        ? (BOOL v48 = v47 == 111)
        : (BOOL v48 = 0),
          !v48))
    {
      uint64_t v49 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v49 == 2)
      {
        uint64_t v50 = *(void *)(v49 + 8);
        unint64_t v51 = *(void *)(v49 + 16);
      }
      else
      {
        uint64_t v50 = *(void *)(v49 + 8);
        unint64_t v52 = *(void *)(v49 + 16);
        unint64_t v53 = v52 - 1;
        unint64_t v54 = v52 != 0;
        if (v52) {
          ++v50;
        }
        if (v53 < v54) {
          unint64_t v53 = 1;
        }
        if (v53 >= v52) {
          unint64_t v53 = v52;
        }
        unint64_t v51 = v53 - v54;
      }
      if (v51 == 6)
      {
        unsigned int v55 = bswap32(*(_DWORD *)v50);
        unsigned int v56 = 778920291;
        if (v55 == 778920291 && (unsigned int v55 = bswap32(*(unsigned __int16 *)(v50 + 4)) >> 16, v56 = 29295, v55 == 29295))
        {
          int v57 = 0;
        }
        else if (v55 < v56)
        {
          int v57 = -1;
        }
        else
        {
          int v57 = 1;
        }
        if (!v57) {
          ++v29;
        }
      }
      goto LABEL_119;
    }
  }
  if (v29)
  {
    --v29;
    goto LABEL_119;
  }
  uint64_t v59 = *(long long **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  v60 = (const char *)*((void *)v59 + 2);
  long long v106 = *v59;
  v107 = v60;
  llvm::APInt::operator=((llvm::APInt *)&v108, (const llvm::APInt *)((char *)v59 + 24));
  llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) == 9)
  {
    uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    int Key = llvm::StringMapImpl::FindKey((uint64_t *)(v61 + 2064), (uint64_t *)v113, *((unint64_t *)&v113 + 1));
    if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v61 + 2072))
    {
      uint64_t v63 = *((void *)&v106 + 1) - v74;
      uint64_t v64 = (uint64_t)v110;
      uint64_t v65 = v112;
      v110 = 0;
      v111 = 0;
      v112 = 0;
      long long v86 = v113;
      *(void *)v87 = v74;
      *(void *)&v87[8] = v63;
      memset(v85, 0, sizeof(v85));
      char v92 = 0;
      v103[0] = (void **)v85;
      std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](v103);
      v66 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      v77[0] = v86;
      v77[1] = *(_OWORD *)v87;
      uint64_t v78 = v64;
      __int16 v79 = v6;
      *(void *)&v87[16] = 0;
      *(void *)&v87[24] = 0;
      __int8 v80 = v65;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      uint64_t v83 = 0;
      uint64_t v88 = 0;
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      char v84 = 0;
      llvm::MCContext::defineMacro(v66, (uint64_t *)v113, *((unint64_t *)&v113 + 1), v77);
      llvm::MCAsmMacro::~MCAsmMacro((llvm::MCAsmMacro *)v77);
      llvm::MCAsmMacro::~MCAsmMacro((llvm::MCAsmMacro *)&v86);
      uint64_t v5 = 0;
      goto LABEL_122;
    }
    __int16 v105 = 1283;
    v103[0] = (void **)"macro '";
    long long v104 = v113;
    v100[0] = (uint64_t)"' is already defined";
    __int16 v102 = 259;
    llvm::operator+((uint64_t *)v103, v100, (uint64_t)&v86);
LABEL_121:
    uint64_t v5 = llvm::MCAsmParser::Error(a1, v76, (llvm::Twine *)&v86, 0, 0);
    goto LABEL_122;
  }
  if (v106 == 2)
  {
    uint64_t v68 = *((void *)&v106 + 1);
    v69 = v107;
  }
  else
  {
    uint64_t v68 = *((void *)&v106 + 1);
    unint64_t v71 = (unint64_t)v107;
    unint64_t v72 = (unint64_t)(v107 - 1);
    unint64_t v73 = v107 != 0;
    if (v107) {
      uint64_t v68 = *((void *)&v106 + 1) + 1;
    }
    if (v72 < v73) {
      unint64_t v72 = 1;
    }
    if (v72 < (unint64_t)v107) {
      unint64_t v71 = v72;
    }
    v69 = (const char *)(v71 - v73);
  }
  __int16 v105 = 1283;
  v103[0] = (void **)"unexpected token in '";
  *(void *)&long long v104 = v68;
  *((void *)&v104 + 1) = v69;
  *(void *)&long long v86 = v103;
  *(void *)v87 = "' directive";
  *(_WORD *)&v87[16] = 770;
  uint64_t v5 = llvm::MCAsmParser::TokError(a1, (llvm::Twine *)&v86, 0, 0);
LABEL_122:
  if (v109 >= 0x41 && v108) {
    MEMORY[0x263E50080](v108, 0x1000C8000313F17);
  }
LABEL_125:
  *(void *)&long long v86 = &v110;
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100]((void ***)&v86);
  return v5;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveAltmacro(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3)
{
  BOOL result = llvm::MCAsmParser::parseEOL(a1);
  if (!result)
  {
    BOOL v8 = a3 == 9 && *(void *)a2 == 0x7263616D746C612ELL && *(unsigned char *)(a2 + 8) == 111;
    *((unsigned char *)a1 + 799) = v8;
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveExitMacro(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1)) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 352);
  if (*(void *)(a1 + 344) == v6)
  {
    __int16 v16 = 1283;
    v15[0] = "unexpected '";
    v15[2] = a2;
    v15[3] = a3;
    v17[0] = v15;
    v17[2] = "' in file, no current macro definition";
    __int16 v18 = 770;
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(void *)(v14 + 96), (llvm::Twine *)v17, 0, 0);
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 296);
  uint64_t v7 = *(void *)(a1 + 304);
  if (*(void *)(*(void *)(v6 - 8) + 24) != (v7 - v8) >> 3)
  {
    long long v9 = (int *)(v7 - 8);
    uint64_t v10 = (uint64_t)v9 - v8;
    do
    {
      int v11 = *v9;
      *(_WORD *)(a1 + 288) = *((_WORD *)v9 + 2);
      *(_DWORD *)(a1 + 284) = v11;
      *(void *)(a1 + 304) = v9;
      BOOL v12 = *(void *)(*(void *)(v6 - 8) + 24) == v10 >> 3;
      v10 -= 8;
      v9 -= 2;
    }
    while (!v12);
  }
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveEndMacro(_anonymous_namespace_::AsmParser *a1, uint64_t a2, uint64_t a3)
{
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)a1 + 40))(a1) + 8) == 9)
  {
    if (*((void *)a1 + 43) != *((void *)a1 + 44))
    {
      return 0;
    }
    __int16 v12 = 1283;
    long long v9 = "unexpected '";
    uint64_t v10 = a2;
    uint64_t v11 = a3;
    uint64_t v7 = "' in file, no current macro definition";
  }
  else
  {
    __int16 v12 = 1283;
    long long v9 = "unexpected token in '";
    uint64_t v10 = a2;
    uint64_t v11 = a3;
    uint64_t v7 = "' directive";
  }
  v13[0] = &v9;
  v13[2] = v7;
  __int16 v14 = 770;
  uint64_t v8 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)a1 + 40))(a1);
  llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v8 + 96), (llvm::Twine *)v13, 0, 0);
  return 1;
}

uint64_t anonymous namespace'::AsmParser::parseDirectivePurgeMacro(llvm::MCAsmParser *a1, uint64_t a2)
{
  __int16 v16 = 0;
  unint64_t v17 = 0;
  uint64_t v4 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) + 8);
  char v5 = (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t **))(*(void *)a1 + 192))(a1, &v16);
  v14[0] = "expected identifier in '.purgem' directive";
  __int16 v15 = 259;
  if (v5)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, v4, (llvm::Twine *)v14, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a1)) {
    return 1;
  }
  uint64_t v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 48))(a1);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(v7 + 2064), v16, v17);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v7 + 2072))
  {
    __int16 v13 = 1283;
    v12[0] = "macro '";
    v12[2] = v16;
    v12[3] = v17;
    v14[0] = v12;
    v14[2] = "' is not defined";
    __int16 v15 = 770;
    return llvm::MCAsmParser::Error((uint64_t)a1, a2, (llvm::Twine *)v14, 0, 0);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 48))(a1);
    int v10 = llvm::StringMapImpl::FindKey((uint64_t *)(v9 + 2064), v16, v17);
    if (v10 != -1 && v10 != (unint64_t)*(unsigned int *)(v9 + 2072))
    {
      uint64_t v11 = *(unint64_t **)(*(void *)(v9 + 2064) + 8 * v10);
      llvm::StringMapImpl::RemoveKey(v9 + 2064, (uint64_t *)((char *)v11 + *(unsigned int *)(v9 + 2084)), *v11);
      llvm::StringMapEntry<llvm::MCAsmMacro>::Destroy<llvm::MallocAllocator>((uint64_t)v11);
    }
    return 0;
  }
}

BOOL anonymous namespace'::AsmParser::parseDirectiveEnd(_DWORD **a1)
{
  BOOL v2 = llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1);
  if (!v2 && *a1[6])
  {
    do
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 5));
    while (*a1[6]);
  }
  return v2;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveError(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *(void *)(a1 + 304);
  if (*(void *)(a1 + 296) != v5 && *(unsigned char *)(v5 - 3))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
    return 0;
  }
  if (a3)
  {
    int v7 = **(_DWORD **)(a1 + 48);
    if (v7 == 3)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      unint64_t v11 = *(void *)(*(void *)(v10 + 8) + 16);
      unint64_t v12 = v11 != 0;
      if (v11) {
        uint64_t v8 = (const char *)(*(void *)(*(void *)(v10 + 8) + 8) + 1);
      }
      else {
        uint64_t v8 = *(const char **)(*(void *)(v10 + 8) + 8);
      }
      if (v11 - 1 < v12) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = v11 - 1;
      }
      if (v13 >= v11) {
        unint64_t v13 = *(void *)(*(void *)(v10 + 8) + 16);
      }
      uint64_t v9 = v13 - v12;
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    }
    else
    {
      if (v7 != 9)
      {
        v15[0] = ".error argument must be a string";
        __int16 v16 = 259;
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(void *)(v14 + 96), (llvm::Twine *)v15, 0, 0);
        return 1;
      }
      uint64_t v8 = ".error directive invoked in source file";
      uint64_t v9 = 39;
    }
    __int16 v16 = 261;
    v15[0] = v8;
    v15[1] = v9;
  }
  else
  {
    v15[0] = ".err encountered";
    __int16 v16 = 259;
  }
  return llvm::MCAsmParser::Error(a1, a2, (llvm::Twine *)v15, 0, 0);
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveWarning(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4 = (_DWORD *)*((void *)a1 + 38);
  if (*((_DWORD **)a1 + 37) != v4 && *((unsigned char *)v4 - 3))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 224))(a1);
    return 0;
  }
  if (llvm::MCAsmParser::parseOptionalToken(a1, 9))
  {
    uint64_t v6 = ".warning directive invoked in source file";
    uint64_t v7 = 41;
LABEL_18:
    __int16 v15 = 261;
    v14[0] = v6;
    v14[1] = v7;
    return (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, void *, void, void))(*(void *)a1 + 168))(a1, a2, v14, 0, 0);
  }
  if (**((_DWORD **)a1 + 6) == 3)
  {
    uint64_t v8 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
    unint64_t v9 = *(void *)(*(void *)(v8 + 8) + 16);
    unint64_t v10 = v9 != 0;
    if (v9) {
      uint64_t v6 = (const char *)(*(void *)(*(void *)(v8 + 8) + 8) + 1);
    }
    else {
      uint64_t v6 = *(const char **)(*(void *)(v8 + 8) + 8);
    }
    if (v9 - 1 < v10) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = v9 - 1;
    }
    if (v11 >= v9) {
      unint64_t v12 = *(void *)(*(void *)(v8 + 8) + 16);
    }
    else {
      unint64_t v12 = v11;
    }
    (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 184))(a1);
    if (!llvm::MCAsmParser::parseEOL(a1))
    {
      uint64_t v7 = v12 - v10;
      goto LABEL_18;
    }
  }
  else
  {
    v14[0] = ".warning argument must be a string";
    __int16 v15 = 259;
    uint64_t v13 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v13 + 96), (llvm::Twine *)v14, 0, 0);
  }
  return 1;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveReloc(llvm::MCAsmParser *a1)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v2 = *(void *)(*((void *)a1 + 6) + 8);
  __int16 v15 = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, const char **))(*(void *)a1 + 232))(a1, &v14, &v15))return 1; {
  __int16 v15 = "expected comma";
  }
  __int16 v18 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v15)) {
    return 1;
  }
  int v3 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8);
  __int16 v15 = "expected relocation name";
  __int16 v18 = 259;
  llvm::MCAsmParser::check(a1, v3 != 2, (const llvm::Twine *)&v15);
  if (v3 != 2) {
    return 1;
  }
  uint64_t v4 = *(void *)(*((void *)a1 + 6) + 8);
  (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 184))(a1);
  if (**((_DWORD **)a1 + 6) == 25)
  {
    (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 184))(a1);
    uint64_t v5 = *((void *)a1 + 17);
    __int16 v15 = 0;
    if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, const char **))(*(void *)a1 + 232))(a1, &v13, &v15))return 1; {
    memset(v10, 0, sizeof(v10));
    }
    int v11 = 0;
    if (!llvm::MCExpr::evaluateAsRelocatableImpl(v13, (uint64_t)v10, 0, 0, 0, 0, 0))
    {
      __int16 v15 = "expression must be relocatable";
      __int16 v18 = 259;
      return llvm::MCAsmParser::Error((uint64_t)a1, v5, (llvm::Twine *)&v15, 0, 0);
    }
  }
  if (llvm::MCAsmParser::parseEOL(a1)) {
    return 1;
  }
  uint64_t v8 = *(void *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
  (*(void (**)(const char **__return_ptr))(v8 + 1168))(&v15);
  if (!(_BYTE)v18) {
    return 0;
  }
  if ((_BYTE)v15) {
    uint64_t v9 = v4;
  }
  else {
    uint64_t v9 = v2;
  }
  __int16 v12 = 260;
  v10[0] = &__p;
  uint64_t v6 = llvm::MCAsmParser::Error((uint64_t)a1, v9, (llvm::Twine *)v10, 0, 0);
  if ((_BYTE)v18 && v17 < 0) {
    operator delete(__p);
  }
  return v6;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveDCB(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *((void *)a1 + 17);
  if ((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 264))(a1)) {
    return 1;
  }
  uint64_t v19 = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v19)) {
    return 1;
  }
  if (v19 < 0)
  {
    v17[0] = "'";
    v17[2] = a2;
    v17[3] = a3;
    __int16 v18 = 1283;
    v20[0] = v17;
    v20[2] = "' directive with negative repeat count has no effect";
    __int16 v21 = 770;
    (*(void (**)(llvm::MCAsmParser *, uint64_t, void *, void, void))(*(void *)a1 + 168))(a1, v8, v20, 0, 0);
    return 0;
  }
  v20[0] = "expected comma";
  __int16 v21 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)v20)) {
    return 1;
  }
  v17[0] = 0;
  uint64_t v9 = *(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 96);
  v20[0] = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, void *, void *))(*(void *)a1 + 232))(a1, v17, v20)) {
    return 1;
  }
  if (*(unsigned char *)v17[0] != 1)
  {
    for (uint64_t i = v19; i; --i)
    {
      uint64_t v16 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v16 + 504))(v16, v17[0], a4, v9);
    }
    return llvm::MCAsmParser::parseEOL(a1);
  }
  int64_t v11 = *(void *)(v17[0] + 16);
  if (0xFFFFFFFFFFFFFFFFLL >> (-8 * a4) >= v11
    || (uint64_t v12 = -1 << (8 * a4 - 1), v12 <= v11) && v11 <= ~v12)
  {
    for (uint64_t j = v19; j; --j)
    {
      uint64_t v14 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
      (*(void (**)(uint64_t, int64_t, uint64_t))(*(void *)v14 + 512))(v14, v11, a4);
    }
    return llvm::MCAsmParser::parseEOL(a1);
  }
  v20[0] = "literal value out of range for directive";
  __int16 v21 = 259;
  return llvm::MCAsmParser::Error((uint64_t)a1, v9, (llvm::Twine *)v20, 0, 0);
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveRealDCB(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (_DWORD *)*((void *)a1 + 17);
  if ((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 264))(a1)) {
    return 1;
  }
  uint64_t v15 = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v15)) {
    return 1;
  }
  if (v15 < 0)
  {
    v13[0] = "'";
    v13[2] = a2;
    v13[3] = a3;
    __int16 v14 = 1283;
    uint64_t v16 = (uint64_t **)v13;
    __int16 v18 = "' directive with negative repeat count has no effect";
    __int16 v19 = 770;
    (*(void (**)(llvm::MCAsmParser *, _DWORD *, uint64_t ***, void, void))(*(void *)a1 + 168))(a1, v8, &v16, 0, 0);
    return 0;
  }
  else
  {
    uint64_t v16 = (uint64_t **)"expected comma";
    __int16 v19 = 259;
    uint64_t i = 1;
    if (!llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v16))
    {
      unsigned int v17 = 1;
      uint64_t v16 = 0;
        && !llvm::MCAsmParser::parseEOL(a1))
      {
        for (uint64_t i = v15; i; --i)
        {
          uint64_t v11 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
          LimitedValue = llvm::APInt::getLimitedValue(&v16, 0xFFFFFFFFFFFFFFFFLL);
          (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v11 + 512))(v11, LimitedValue, v17 >> 3);
        }
      }
      if (v17 >= 0x41 && v16) {
        MEMORY[0x263E50080](v16, 0x1000C8000313F17);
      }
    }
  }
  return i;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveDS(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = *((void *)a1 + 17);
  if ((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 264))(a1)) {
    return 1;
  }
  uint64_t v16 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(void *)a1 + 256))(a1, &v16) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  uint64_t v10 = v16;
  if (v16 < 0)
  {
    v12[0] = "'";
    v12[2] = a2;
    v12[3] = a3;
    __int16 v13 = 1283;
    v14[0] = v12;
    v14[2] = "' directive with negative repeat count has no effect";
    __int16 v15 = 770;
    (*(void (**)(llvm::MCAsmParser *, uint64_t, void *, void, void))(*(void *)a1 + 168))(a1, v8, v14, 0, 0);
  }
  else if (v16)
  {
    do
    {
      uint64_t v11 = (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 56))(a1);
      llvm::MCStreamer::emitFill(v11, a4, 0);
      --v10;
    }
    while (v10);
  }
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectivePrint(llvm::MCAsmParser *a1, uint64_t a2)
{
  uint64_t v4 = *(int **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8);
  int v5 = *v4;
  uint64_t v7 = (unsigned char *)*((void *)v4 + 1);
  unint64_t v6 = *((void *)v4 + 2);
  if (v4[8] > 0x40) {
    operator new[]();
  }
  (*(void (**)(llvm::MCAsmParser *))(*(void *)a1 + 184))(a1);
  if (v5 == 3 && *v7 == 34)
  {
    BOOL v8 = llvm::MCAsmParser::parseEOL(a1);
    if (v8)
    {
      return 1;
    }
    else
    {
      uint64_t v11 = (llvm::raw_ostream *)llvm::outs((llvm *)v8);
      unint64_t v12 = v6 - 1;
      unint64_t v13 = v6 != 0;
      if (v6) {
        __int16 v14 = v7 + 1;
      }
      else {
        __int16 v14 = v7;
      }
      if (v12 < v13) {
        unint64_t v12 = 1;
      }
      if (v12 >= v6) {
        unint64_t v12 = v6;
      }
      __int16 v15 = llvm::raw_ostream::operator<<(v11, v14, v12 - v13);
      uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
      if ((unint64_t)v16 >= *((void *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
        return 0;
      }
      else
      {
        uint64_t v9 = 0;
        *((void *)v15 + 4) = v16 + 1;
        *uint64_t v16 = 10;
      }
    }
  }
  else
  {
    unsigned int v17 = "expected double quoted string after .print";
    __int16 v18 = 259;
    return llvm::MCAsmParser::Error((uint64_t)a1, a2, (llvm::Twine *)&v17, 0, 0);
  }
  return v9;
}

BOOL anonymous namespace'::AsmParser::parseDirectiveAddrsig(_anonymous_namespace_::AsmParser *this)
{
  BOOL v2 = llvm::MCAsmParser::parseEOL(this);
  if (!v2)
  {
    uint64_t v3 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
    (*(void (**)(uint64_t))(*(void *)v3 + 1176))(v3);
  }
  return v2;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveAddrsigSym(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v2 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 192))(this, &v9);
  char v3 = v2;
  v7[0] = "expected identifier";
  __int16 v8 = 259;
  llvm::MCAsmParser::check(this, v2, (const llvm::Twine *)v7);
  if ((v3 & 1) != 0 || llvm::MCAsmParser::parseEOL(this)) {
    return 1;
  }
  int v5 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 48))(this);
  __int16 v8 = 261;
  v7[0] = v9;
  v7[1] = v10;
  llvm::MCContext::getOrCreateSymbol(v5, (const llvm::Twine *)v7);
  uint64_t v6 = *(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(void))(v6 + 1184))();
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectivePseudoProbe(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4)
  {
    uint64_t v23 = "unexpected token in '.pseudoprobe' directive";
    __int16 v26 = 259;
    if (llvm::MCAsmParser::parseIntToken(this, &v22, (const llvm::Twine *)&v23)) {
      return 1;
    }
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4)
  {
    uint64_t v23 = "unexpected token in '.pseudoprobe' directive";
    __int16 v26 = 259;
    if (llvm::MCAsmParser::parseIntToken(this, &v21, (const llvm::Twine *)&v23)) {
      return 1;
    }
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4)
  {
    uint64_t v23 = "unexpected token in '.pseudoprobe' directive";
    __int16 v26 = 259;
    if (llvm::MCAsmParser::parseIntToken(this, &v20, (const llvm::Twine *)&v23)) {
      return 1;
    }
  }
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 4)
  {
    uint64_t v23 = "unexpected token in '.pseudoprobe' directive";
    __int16 v26 = 259;
    if (llvm::MCAsmParser::parseIntToken(this, &v19, (const llvm::Twine *)&v23)) {
      return 1;
    }
  }
  uint64_t v23 = v25;
  uint64_t v24 = 0x800000000;
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this) + 8) == 45)
  {
    while (1)
    {
      (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
      uint64_t v14 = 0;
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                       + 8) == 4)
      {
        v17[0] = "unexpected token in '.pseudoprobe' directive";
        __int16 v18 = 259;
        if (llvm::MCAsmParser::parseIntToken(this, &v14, (const llvm::Twine *)v17)) {
          break;
        }
      }
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                       + 8) == 10)
        (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
      uint64_t v16 = 0;
      uint64_t v3 = 0;
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                       + 8) == 4)
      {
        v17[0] = "unexpected token in '.pseudoprobe' directive";
        __int16 v18 = 259;
        if (llvm::MCAsmParser::parseIntToken(this, &v16, (const llvm::Twine *)v17)) {
          break;
        }
        uint64_t v3 = v16;
      }
      uint64_t v4 = v14;
      uint64_t v5 = v24;
      if (v24 >= (unint64_t)HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v24 + 1, 16);
        uint64_t v5 = v24;
      }
      uint64_t v6 = (uint64_t *)((char *)v23 + 16 * v5);
      uint64_t *v6 = v4;
      v6[1] = v3;
      LODWORD(v24) = v24 + 1;
      if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 40))(this)
                       + 8) != 45)
        goto LABEL_21;
    }
LABEL_24:
    uint64_t v2 = 1;
    goto LABEL_26;
  }
LABEL_21:
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v7 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *, uint64_t *))(*(void *)this + 192))(this, &v14);
  uint64_t v8 = *(void *)this;
  if (v7)
  {
    uint64_t v9 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(v8 + 40))(this) + 96);
    v17[0] = "unexpected token in '.pseudoprobe' directive";
    __int16 v18 = 259;
    uint64_t v2 = llvm::MCAsmParser::Error((uint64_t)this, v9, (llvm::Twine *)v17, 0, 0);
    goto LABEL_26;
  }
  uint64_t v10 = (llvm::MCContext *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(v8 + 48))(this);
  __int16 v18 = 261;
  v17[0] = v14;
  v17[1] = v15;
  uint64_t v11 = llvm::MCContext::lookupSymbol(v10, (const llvm::Twine *)v17);
  if (llvm::MCAsmParser::parseEOL(this)) {
    goto LABEL_24;
  }
  uint64_t v12 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 56))(this);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)v12 + 1200))(v12, v22, v21, v20, v19, &v23, v11);
  uint64_t v2 = 0;
LABEL_26:
  if (v23 != v25) {
    free(v23);
  }
  return v2;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveLTODiscard(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v3 = this;
  *((_DWORD *)this + 182) = 0;
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)this + 768, *((void **)this + 97));
  *((void *)this + 96) = (char *)this + 776;
  *((void *)this + 98) = 0;
  *((void *)this + 97) = 0;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveMSEmit(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v16 = 0;
  uint64_t v8 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 96);
  v14[0] = 0;
  if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a1 + 232))(a1, &v16, v14)) {
    return 1;
  }
  if (*(unsigned char *)v16 != 1)
  {
    unint64_t v13 = "unexpected expression in _emit";
LABEL_9:
    v14[0] = v13;
    __int16 v15 = 259;
    return llvm::MCAsmParser::Error(a1, v8, (llvm::Twine *)v14, 0, 0);
  }
  if ((unint64_t)(*(void *)(v16 + 16) + 128) >= 0x180)
  {
    unint64_t v13 = "literal value out of range for directive";
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a3 + 88);
  uint64_t v11 = *(unsigned int *)(v10 + 8);
  if (v11 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long &>(*(void *)(a3 + 88), 2, a2, a4);
    return 0;
  }
  else
  {
    uint64_t result = 0;
    uint64_t v12 = *(void *)v10 + (v11 << 7);
    *(_DWORD *)uint64_t v12 = 2;
    *(void *)(v12 + 8) = a2;
    *(_DWORD *)(v12 + 16) = a4;
    *(unsigned char *)(v12 + 20) = 0;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(void *)(v12 + 104) = 0;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 40) = 0;
    *(void *)(v12 + 24) = 0;
    *(unsigned char *)(v12 + 48) = 0;
    *(_DWORD *)(v12 + 112) = 1;
    *(unsigned char *)(v12 + 120) = 0;
    ++*(_DWORD *)(v10 + 8);
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseDirectiveMSAlign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = 0;
  uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 96);
  v16[0] = 0;
  if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a1 + 232))(a1, &v18, v16)) {
    return 1;
  }
  if (*(unsigned char *)v18 != 1)
  {
    uint64_t v14 = "unexpected expression in align";
LABEL_9:
    v16[0] = v14;
    __int16 v17 = 259;
    return llvm::MCAsmParser::Error(a1, v6, (llvm::Twine *)v16, 0, 0);
  }
  unint64_t v8 = *(void *)(v18 + 16);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] != 1)
  {
    uint64_t v14 = "literal value not a power of two greater then zero";
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a3 + 88);
  uint64_t v11 = 63 - __clz(v8);
  uint64_t v12 = *(unsigned int *)(v10 + 8);
  if (v12 >= *(_DWORD *)(v10 + 12))
  {
    llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int,unsigned int>(v10, 0, a2, 5, v11);
    return 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v13 = *(void *)v10 + (v12 << 7);
    *(_DWORD *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = a2;
    *(_DWORD *)(v13 + 16) = 5;
    *(unsigned char *)(v13 + 20) = 0;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(void *)(v13 + 104) = 0;
    *(void *)(v13 + 32) = 0;
    *(void *)(v13 + 40) = 0;
    *(void *)(v13 + 24) = v11;
    *(unsigned char *)(v13 + 48) = 0;
    *(_DWORD *)(v13 + 112) = 1;
    *(unsigned char *)(v13 + 120) = 0;
    ++*(_DWORD *)(v10 + 8);
  }
  return v7;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,int>(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12)) {
    return llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int>(a1, a2, a3, a4);
  }
  uint64_t v5 = *(void *)a1 + (v4 << 7);
  *(_DWORD *)uint64_t v5 = a2;
  *(void *)(v5 + 8) = a3;
  *(_DWORD *)(v5 + 16) = a4;
  *(unsigned char *)(v5 + 20) = 0;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 24) = 0;
  *(unsigned char *)(v5 + 48) = 0;
  *(_DWORD *)(v5 + 112) = 1;
  *(unsigned char *)(v5 + 120) = 0;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t anonymous namespace'::AsmParser::parseAndMatchAndEmitTargetInstruction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, char *a6)
{
  v61[32] = *MEMORY[0x263EF8340];
  v46[0] = a3;
  v46[1] = a4;
  uint64_t v10 = __p;
  llvm::StringRef::lower((llvm::StringRef *)v46, __p);
  uint64_t v43 = *(void *)(a2 + 88);
  uint64_t v11 = *(void *)(a1 + 8);
  if ((v45 & 0x80u) == 0)
  {
    unint64_t v12 = v45;
  }
  else
  {
    uint64_t v10 = (void **)__p[0];
    unint64_t v12 = (unint64_t)__p[1];
  }
  long long v39 = *a5;
  uint64_t v40 = *((void *)a5 + 2);
  unsigned int v42 = *((_DWORD *)a5 + 8);
  if (v42 > 0x40) {
    operator new[]();
  }
  uint64_t v41 = *((void *)a5 + 3);
  char v13 = (*(uint64_t (**)(uint64_t, uint64_t *, void **, unint64_t, long long *, uint64_t))(*(void *)v11 + 56))(v11, &v43, v10, v12, &v39, a2);
  if (v42 >= 0x41 && v41) {
    MEMORY[0x263E50080](v41, 0x1000C8000313F17);
  }
  *(unsigned char *)(a2 + 84) = v13;
  if (*(unsigned char *)(a1 + 33))
  {
    size_t v58 = &v59;
    uint64_t v59 = v61;
    long long v60 = xmmword_261E8A780;
    int v51 = 0;
    char v55 = 0;
    uint64_t v56 = 0;
    int v57 = 1;
    unint64_t v53 = 0;
    unint64_t v54 = 0;
    uint64_t v52 = 0;
    uint64_t v50 = &unk_270DBD758;
    uint64_t v14 = (llvm *)llvm::raw_ostream::SetUnbuffered(&v50);
    __int16 v15 = v54;
    if ((unint64_t)(v53 - v54) > 0x14)
    {
      *(_OWORD *)unint64_t v54 = *(_OWORD *)"parsed instruction: [";
      *(void *)((char *)v15 + 13) = *(void *)"ction: [";
      v54 += 21;
    }
    else
    {
      uint64_t v14 = llvm::raw_ostream::write((llvm::raw_ostream *)&v50, "parsed instruction: [", 0x15uLL);
    }
    if (*(_DWORD *)(a2 + 8))
    {
      uint64_t v16 = 0;
      int v17 = 0;
      do
      {
        if (v17)
        {
          if ((unint64_t)(v53 - v54) > 1)
          {
            *(_WORD *)unint64_t v54 = 8236;
            v54 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v50, ", ", 2uLL);
          }
        }
        uint64_t v14 = (llvm *)(*(uint64_t (**)(void, void **))(**(void **)(*(void *)a2 + 8 * v16) + 120))(*(void *)(*(void *)a2 + 8 * v16), &v50);
        uint64_t v16 = (v17 + 1);
        int v17 = v16;
      }
      while (v16 != *(_DWORD *)(a2 + 8));
    }
    if (v53 == v54) {
      uint64_t v14 = llvm::raw_ostream::write((llvm::raw_ostream *)&v50, "]", 1uLL);
    }
    else {
      *v54++ = 93;
    }
    uint64_t v19 = *v58;
    uint64_t v18 = v58[1];
    __int16 v49 = 261;
    v48[0] = v19;
    v48[1] = v18;
    v47[0] = 0;
    v47[1] = 0;
    uint64_t v20 = *(uint64_t **)(a1 + 240);
    uint64_t v21 = (llvm::raw_ostream *)llvm::errs(v14);
    llvm::SourceMgr::PrintMessage(v20, v21, a6, 3, (llvm::Twine *)v48, v47, 1, v22, 0, 0, 1u);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v50);
    if (v59 != v61) {
      free(v59);
    }
  }
  if (*(_DWORD *)(a1 + 24)) {
    char v23 = 1;
  }
  else {
    char v23 = v13;
  }
  if (v23)
  {
    uint64_t v24 = 1;
  }
  else
  {
    {
      uint64_t v25 = (uint64_t *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + 1608);
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      uint64_t v27 = *(unsigned int *)(v26 + 152);
      uint64_t v28 = v27 ? *(void **)(*(void *)(v26 + 144) + 32 * v27 - 32) : 0;
      uint64_t v59 = v28;
      uint64_t v50 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v25, &v59, &v50))
      {
        int v29 = *(uint64_t **)(a1 + 344);
        if (v29 == *(uint64_t **)(a1 + 352))
        {
          int v32 = *(_DWORD *)(a1 + 280);
          unint64_t v31 = a6;
        }
        else
        {
          uint64_t v30 = *v29;
          unint64_t v31 = *(char **)v30;
          int v32 = *(_DWORD *)(v30 + 8);
        }
        unint64_t LineAndColumn = llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a1 + 240), v31, v32);
        if (*(void *)(a1 + 432))
        {
          uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
          LOBYTE(v50) = 0;
          LOBYTE(v52) = 0;
          LOBYTE(v59) = 0;
          BYTE8(v60) = 0;
          (*(void (**)(void *__return_ptr))(*(void *)v34 + 680))(v48);
          int v35 = v48[0];
          *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + 1604) = v35;
          unint64_t LineAndColumn = ~llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a1 + 240), *(char **)(a1 + 448), *(_DWORD *)(a1 + 456))+ *(_DWORD *)(a1 + 440)+ LineAndColumn;
        }
        uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        uint64_t v37 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + 1604);
        (*(void (**)(uint64_t, uint64_t, unint64_t, void, uint64_t, void, void))(*(void *)v36 + 712))(v36, v37, LineAndColumn, 0, 1, 0, 0);
      }
    }
    uint64_t v59 = 0;
    uint64_t v24 = (*(uint64_t (**)(void, char *, uint64_t, uint64_t, void, void **, void))(**(void **)(a1 + 8)
                                                                                               + 72))(*(void *)(a1 + 8), a6, a2 + 80, a2, *(void *)(a1 + 224), &v59, *(unsigned __int8 *)(*(void *)(a1 + 8) + 112));
  }
  if ((char)v45 < 0) {
    operator delete(__p[0]);
  }
  return v24;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,llvm::StringRef &>(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v17 = a2;
  uint64_t v18 = a3;
  int v19 = a4;
  char v20 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v28 = 0;
  char v24 = 0;
  int v29 = 1;
  char v30 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v7 = (_OWORD *)llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v17);
  unint64_t v8 = (_OWORD *)(*(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  long long v10 = v7[2];
  long long v9 = v7[3];
  long long v11 = v7[1];
  _OWORD *v8 = *v7;
  v8[1] = v11;
  v8[2] = v10;
  v8[3] = v9;
  long long v12 = v7[7];
  long long v13 = v7[4];
  long long v14 = v7[5];
  v8[6] = v7[6];
  v8[7] = v12;
  void v8[4] = v13;
  v8[5] = v14;
  uint64_t v15 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v15;
  return *(void *)a1 + (v15 << 7) - 128;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v5 = v3 + 1;
    unint64_t v6 = *(void *)a1 + (v3 << 7);
    if (*(void *)a1 <= a2 && v6 > a2)
    {
      unint64_t v8 = a2 - *(void *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 128);
      return *(void *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 128);
    }
  }
  return v2;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::pop_back(uint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 8) - 1;
  *(_DWORD *)(result + 8) = v1;
  if (*(_DWORD *)(*(void *)result + 40 * v1 + 32) >= 0x41u)
  {
    uint64_t result = *(void *)(*(void *)result + 40 * v1 + 24);
    if (result) {
      JUMPOUT(0x263E50080);
    }
  }
  return result;
}

long long *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v5 = a2;
  do
  {
    long long v6 = *v4;
    *(void *)(a3 + 16) = *((void *)v4 + 2);
    *(_OWORD *)a3 = v6;
    llvm::APInt::operator=(a3 + 24, (uint64_t)v4 + 24);
    a3 += 40;
    uint64_t v4 = (long long *)((char *)v4 + 40);
  }
  while (v4 != v5);
  return v5;
}

double llvm::MCContext::setMCLineTableRootFile(uint64_t a1, unsigned int a2, void *a3, size_t a4, void *a5, size_t a6, uint64_t a7, __n128 *a8)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unsigned int v18 = a2;
  int v19 = &v18;
  long long v14 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 1560), &v18, (uint64_t)&std::piecewise_construct, &v19);
  long long v20 = *(_OWORD *)a7;
  char v21 = *(unsigned char *)(a7 + 16);
  __n128 v16 = *a8;
  unint64_t v17 = a8[1].n128_u64[0];
  *(void *)&double result = llvm::MCDwarfLineTable::setRootFile((uint64_t)(v14 + 5), a3, a4, a5, a6, &v20, &v16).n128_u64[0];
  return result;
}

__n128 llvm::MCDwarfLineTable::setRootFile(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, long long *a6, __n128 *a7)
{
  if (__len > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_22;
  }
  if (__len >= 0x17)
  {
    size_t v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v15 = __len | 7;
    }
    size_t v16 = v15 + 1;
    p_dst = (long long *)operator new(v15 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v27 = v16 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v27) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  unint64_t v17 = (void **)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = __dst;
  *(void *)(a1 + 368) = v27;
  if (a5 > 0x7FFFFFFFFFFFFFF7) {
LABEL_22:
  }
    abort();
  if (a5 >= 0x17)
  {
    uint64_t v19 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17) {
      uint64_t v19 = a5 | 7;
    }
    uint64_t v20 = v19 + 1;
    unsigned int v18 = (long long *)operator new(v19 + 1);
    *((void *)&__dst + 1) = a5;
    unint64_t v27 = v20 | 0x8000000000000000;
    *(void *)&long long __dst = v18;
    goto LABEL_18;
  }
  HIBYTE(v27) = a5;
  unsigned int v18 = &__dst;
  if (a5) {
LABEL_18:
  }
    memmove(v18, a4, a5);
  *((unsigned char *)v18 + a5) = 0;
  char v21 = (void **)(a1 + 376);
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*v21);
  }
  *(_OWORD *)char v21 = __dst;
  *(void *)(a1 + 392) = v27;
  *(_DWORD *)(a1 + 400) = 0;
  long long v22 = *a6;
  *(unsigned char *)(a1 + 420) = *((unsigned char *)a6 + 16);
  *(_OWORD *)(a1 + 404) = v22;
  unsigned __int8 v23 = a7[1].n128_u8[0];
  __n128 result = *a7;
  *(__n128 *)(a1 + 424) = *a7;
  *(unsigned char *)(a1 + 440) = v23;
  char v25 = *((unsigned char *)a6 + 16);
  *(unsigned char *)(a1 + 449) &= v25;
  *(unsigned char *)(a1 + 450) |= v25;
  *(unsigned char *)(a1 + 448) = a7[1].n128_u8[0];
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  unint64_t v8 = a1 + 1;
  long long v9 = a1 + 1;
  if (v6)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unsigned int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        long long v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    long long v12 = (char *)operator new(0x220uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    *(_OWORD *)(v12 + 248) = 0u;
    *(_OWORD *)(v12 + 232) = 0u;
    *(_OWORD *)(v12 + 216) = 0u;
    *(_OWORD *)(v12 + 200) = 0u;
    *(_OWORD *)(v12 + 184) = 0u;
    *(_OWORD *)(v12 + 168) = 0u;
    *(_OWORD *)(v12 + 136) = 0u;
    *(_OWORD *)(v12 + 120) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_OWORD *)(v12 + 504) = 0u;
    *(_OWORD *)(v12 + 456) = 0u;
    *(_OWORD *)(v12 + 472) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(_OWORD *)(v12 + 440) = 0u;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 360) = 0u;
    *(_OWORD *)(v12 + 376) = 0u;
    *(_OWORD *)(v12 + 328) = 0u;
    *(_OWORD *)(v12 + 344) = 0u;
    *(_OWORD *)(v12 + 296) = 0u;
    *(_OWORD *)(v12 + 312) = 0u;
    *(_OWORD *)(v12 + 280) = 0u;
    *(_OWORD *)(v12 + 264) = 0u;
    *(_OWORD *)(v12 + 152) = 0u;
    *((void *)v12 + 6) = v12 + 64;
    *((_DWORD *)v12 + 15) = 3;
    *((void *)v12 + 17) = v12 + 152;
    *((_DWORD *)v12 + 37) = 3;
    *((void *)v12 + 47) = 0;
    *((void *)v12 + 46) = 0;
    *((void *)v12 + 48) = 0x1000000000;
    *(_OWORD *)(v12 + 392) = 0u;
    *(_OWORD *)(v12 + 408) = 0u;
    *(_OWORD *)(v12 + 424) = 0u;
    *(void *)(v12 + 437) = 0;
    v12[489] = 1;
    *((void *)v12 + 63) = 0;
    *((void *)v12 + 62) = 0;
    *((_DWORD *)v12 + 128) = 0;
    *((void *)v12 + 65) = 0;
    *((void *)v12 + 67) = 0;
    *((void *)v12 + 66) = 0;
    char v15 = 1;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,void *>>>>::reset[abi:nn180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<unsigned int const,llvm::MCDwarfLineTable>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

char **std::__destroy_at[abi:nn180100]<std::pair<unsigned int const,llvm::MCDwarfLineTable>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 488);
  std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__destroy_vector::operator()[abi:nn180100](&v3);
  MEMORY[0x263E500A0](*(void *)(a1 + 464), 8);
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*(void **)(a1 + 384));
  }
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(a1 + 336);
  llvm::SmallVector<llvm::MCDwarfFile,3u>::~SmallVector((char **)(a1 + 104));
  return llvm::SmallVector<std::string,2u>::~SmallVector((char **)(a1 + 16));
}

void std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

char **llvm::SmallVector<llvm::MCDwarfFile,3u>::~SmallVector(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 72 * v3;
    do
    {
      if (v2[v4 - 49] < 0) {
        operator delete(*(void **)&v2[v4 - 72]);
      }
      v4 -= 72;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 24;
  uint64_t v3 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + *(void *)(v5 - 24)) = v4;
  long long v6 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(void *)a1 = v2;
  *(void *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t anonymous namespace'::AsmParser::parseMacroArguments(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v80[4] = *MEMORY[0x263EF8340];
  if (a2) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - a2[4]) >> 4);
  }
  else {
    LODWORD(v5) = 0;
  }
  uint64_t v78 = v80;
  uint64_t v79 = 0x400000000;
  uint64_t v6 = v5;
  std::vector<std::vector<llvm::AsmToken>>::resize((char **)a3, v5);
  llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v78, v5);
  size_t v58 = a2;
  if (v5) {
    uint64_t v7 = *(unsigned char *)(a2[5] - 7) != 0;
  }
  else {
    uint64_t v7 = 0;
  }
  char v8 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = (v5 - 1);
  int v56 = v5;
  long long v11 = 0uLL;
  while (1)
  {
    uint64_t v12 = *(void *)(a1 + 136);
    *(_OWORD *)&v77[10] = v11;
    long long v76 = v11;
    *(_OWORD *)__int8 v77 = v11;
    if (**(_DWORD **)(a1 + 48) != 2) {
      goto LABEL_100;
    }
    *((void *)&v72 + 1) = 0;
    unint64_t v73 = 0;
    unsigned int v75 = 1;
    uint64_t v74 = 0;
    (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)(a1 + 40) + 32))(a1 + 40, &v72, 1, 1);
    int v13 = v72;
    if (v75 >= 0x41 && v74) {
      MEMORY[0x263E50080](v74, 0x1000C8000313F17);
    }
    if (v13 == 27)
    {
      if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1 + 192))(a1, &v76))
      {
        uint64_t v37 = "invalid argument identifier for formal argument";
        goto LABEL_91;
      }
      if (**(_DWORD **)(a1 + 48) != 27)
      {
        *(void *)&long long v72 = "expected '=' after formal parameter identifier";
        LOWORD(v75) = 259;
        char v55 = llvm::MCAsmParser::TokError(a1, (llvm::Twine *)&v72, 0, 0);
        goto LABEL_93;
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      int v14 = v9 == v10 ? v7 : 0;
    }
    else
    {
LABEL_100:
      if (v9 == v10) {
        int v14 = v7;
      }
      else {
        int v14 = 0;
      }
      if ((v8 & 1) == 0)
      {
        char v15 = 0;
        goto LABEL_25;
      }
    }
    if (!*((void *)&v76 + 1))
    {
      uint64_t v37 = "cannot mix positional and keyword arguments";
LABEL_91:
      *(void *)&long long v72 = v37;
      LOWORD(v75) = 259;
      char v55 = llvm::MCAsmParser::Error(a1, v12, (llvm::Twine *)&v72, 0, 0);
LABEL_93:
      char v36 = v55;
LABEL_94:
      *(void *)&long long v72 = v77;
      goto LABEL_74;
    }
    char v15 = 1;
LABEL_25:
    uint64_t v16 = *(void *)(a1 + 136);
    unint64_t v71 = 0;
    if (!*(unsigned char *)(a1 + 799)) {
      goto LABEL_42;
    }
    int v17 = **(_DWORD **)(a1 + 48);
    if (v17 == 36)
    {
      v67[0] = 0;
      v64[0] = 0;
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      if ((*(uint64_t (**)(uint64_t, void *, unsigned char **))(*(void *)a1 + 232))(a1, v67, &v71))
      {
        char v36 = 0;
      }
      else
      {
        uint64_t v22 = v67[0];
        uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
        char v24 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 72))(v23);
        if (llvm::MCExpr::evaluateAsAbsolute(v22, v64, v24, 0, 0, 0))
        {
          LODWORD(v72) = 4;
          *((void *)&v72 + 1) = v16;
          unint64_t v73 = &v71[-v16];
          unsigned int v75 = 64;
          uint64_t v74 = v64[0];
          goto LABEL_48;
        }
        *(void *)&long long v72 = "expected absolute expression";
        LOWORD(v75) = 259;
        char v36 = llvm::MCAsmParser::Error(a1, v16, (llvm::Twine *)&v72, 0, 0);
      }
      goto LABEL_94;
    }
    unsigned int v18 = (unsigned char *)v16;
    if (v17 != 38)
    {
LABEL_42:
        goto LABEL_49;
      char v36 = 1;
      goto LABEL_73;
    }
    while (1)
    {
      unsigned int v19 = *v18;
      if (v19 <= 0x20)
      {
        if (*v18) {
          BOOL v20 = v19 == 10;
        }
        else {
          BOOL v20 = 1;
        }
        if (v20 || v19 == 13) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (v19 == 33)
      {
        ++v18;
        goto LABEL_41;
      }
      if (v19 == 62) {
        break;
      }
LABEL_41:
      ++v18;
    }
    char v25 = v18 + 1;
    unint64_t v71 = v18 + 1;
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    LODWORD(v72) = 3;
    *((void *)&v72 + 1) = v16;
    unint64_t v73 = &v25[-v16];
    unsigned int v75 = 64;
    uint64_t v74 = 0;
LABEL_48:
    std::vector<llvm::AsmToken>::push_back[abi:nn180100]((uint64_t *)v77, &v72);
LABEL_49:
    char v57 = v15;
    uint64_t v26 = v10;
    uint64_t v27 = v7;
    size_t v28 = *((void *)&v76 + 1);
    LODWORD(v7) = v9;
    if (*((void *)&v76 + 1)) {
      break;
    }
LABEL_56:
    if (*(void *)v77 != *(void *)&v77[8])
    {
      unint64_t v31 = *(char **)a3;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3) <= v7)
      {
        std::vector<std::vector<llvm::AsmToken>>::resize((char **)a3, (v7 + 1));
        unint64_t v31 = *(char **)a3;
      }
      int v32 = (uint64_t *)&v31[24 * v7];
      if (v32 != (uint64_t *)v77) {
        std::vector<llvm::AsmToken>::__assign_with_size[abi:nn180100]<llvm::AsmToken*,llvm::AsmToken*>(v32, *(long long **)v77, *(long long **)&v77[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v77[8] - *(void *)v77) >> 3));
      }
      if (v79 <= v7) {
        llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v78, (v7 + 1));
      }
      v78[v7] = *(void *)(a1 + 136);
    }
    int v33 = **(_DWORD **)(a1 + 48);
    if (v33 == 25)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
      uint64_t v7 = v27;
    }
    else
    {
      uint64_t v7 = v27;
      if (v33 == 9)
      {
        if (v56)
        {
          uint64_t v41 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          char v36 = 0;
          uint64_t v44 = 48 * v6;
          do
          {
            if (*(void *)(*(void *)a3 + v42) == *(void *)(*(void *)a3 + v42 + 8))
            {
              uint64_t v45 = v58[4];
              if (*(unsigned char *)(v45 + v43 + 40))
              {
                uint64_t v46 = v78[v41];
                if (!v46) {
                  uint64_t v46 = *(void *)(a1 + 136);
                }
                int v47 = (const void **)(v45 + v43);
                __int16 v63 = 1283;
                v60[0] = "missing value for required parameter '";
                uint64_t v61 = *v47;
                size_t v62 = (size_t)v47[1];
                v64[0] = v60;
                uint64_t v65 = "' in macro '";
                __int16 v66 = 770;
                uint64_t v49 = *v58;
                uint64_t v48 = v58[1];
                v67[0] = v64;
                uint64_t v68 = v49;
                uint64_t v69 = v48;
                __int16 v70 = 1282;
                *(void *)&long long v72 = v67;
                unint64_t v73 = "'";
                LOWORD(v75) = 770;
                llvm::MCAsmParser::Error(a1, v46, (llvm::Twine *)&v72, 0, 0);
                uint64_t v45 = v58[4];
                char v36 = 1;
              }
              uint64_t v50 = v45 + v43;
              int v51 = *(long long **)(v50 + 16);
              uint64_t v52 = *(long long **)(v50 + 24);
              unint64_t v53 = (uint64_t *)(v50 + 16);
              if (v51 != v52)
              {
                unint64_t v54 = (uint64_t *)(*(void *)a3 + v42);
                if (v53 != v54) {
                  std::vector<llvm::AsmToken>::__assign_with_size[abi:nn180100]<llvm::AsmToken*,llvm::AsmToken*>(v54, v51, v52, 0xCCCCCCCCCCCCCCCDLL * (((char *)v52 - (char *)v51) >> 3));
                }
              }
            }
            v43 += 48;
            v42 += 24;
            ++v41;
          }
          while (v44 != v43);
        }
        else
        {
          char v36 = 0;
        }
        goto LABEL_73;
      }
    }
    *(void *)&long long v72 = v77;
    std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
    ++v9;
    uint64_t v10 = v26;
    BOOL v34 = v26 >= v9;
    long long v11 = 0uLL;
    char v8 = v57;
    if (!v34)
    {
      *(void *)&long long v76 = "too many positional arguments";
      *(_WORD *)&v77[16] = 259;
      uint64_t v35 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 40))(a1, (__n128)0);
      llvm::MCAsmParser::Error(a1, *(void *)(v35 + 96), (llvm::Twine *)&v76, 0, 0);
      char v36 = 1;
      goto LABEL_75;
    }
  }
  if (v56)
  {
    uint64_t v7 = 0;
    int v29 = (const void *)v76;
    char v30 = (void *)(v58[4] + 8);
    while (*v30 != v28 || memcmp((const void *)*(v30 - 1), v29, v28))
    {
      ++v7;
      v30 += 6;
      if (v6 == v7) {
        goto LABEL_72;
      }
    }
    goto LABEL_56;
  }
  int v29 = (const void *)v76;
LABEL_72:
  __int16 v63 = 1283;
  v60[0] = "parameter named '";
  uint64_t v61 = v29;
  size_t v62 = v28;
  v64[0] = v60;
  uint64_t v65 = "' does not exist for macro '";
  __int16 v66 = 770;
  uint64_t v39 = *v58;
  uint64_t v38 = v58[1];
  v67[0] = v64;
  uint64_t v68 = v39;
  uint64_t v69 = v38;
  __int16 v70 = 1282;
  *(void *)&long long v72 = v67;
  unint64_t v73 = "'";
  LOWORD(v75) = 770;
  char v36 = llvm::MCAsmParser::Error(a1, v12, (llvm::Twine *)&v72, 0, 0);
LABEL_73:
  *(void *)&long long v72 = v77;
LABEL_74:
  std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100]((void ***)&v72);
LABEL_75:
  if (v78 != v80) {
    free(v78);
  }
  return v36 & 1;
}

uint64_t anonymous namespace'::AsmParser::expandMacro(uint64_t a1, llvm::raw_ostream *this, unsigned __int8 *a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10)
{
  unint64_t v10 = a8;
  int v12 = a6;
  size_t v13 = __n;
  uint64_t v16 = a1;
  if (a6)
  {
    BOOL v17 = *(unsigned char *)(a5 + 48 * a6 - 7) != 0;
    unsigned int v18 = (unsigned char *)(a1 + 796);
    goto LABEL_3;
  }
  BOOL v17 = 0;
  unsigned int v18 = (unsigned char *)(a1 + 796);
  if (!*(unsigned char *)(a1 + 796))
  {
LABEL_3:
    if (a8 != a6)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Wrong number of arguments";
      __int16 v70 = 259;
      return llvm::MCAsmParser::Error(a1, a10, (llvm::Twine *)&__p, 0, 0);
    }
  }
  if (!__n) {
    return 0;
  }
  int v64 = a6 - 1;
  BOOL v65 = v17;
  uint64_t v67 = v18;
  uint64_t v68 = a6;
  __int16 v66 = (void *)(a5 + 8);
  do
  {
    size_t v20 = 0;
    if (v12) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = *v18 == 0;
    }
    char v22 = v21;
    size_t v23 = v13 - 1;
    for (unsigned int i = 2; ; ++i)
    {
      int v25 = a3[v20];
      if (v22)
      {
        if (v23 != v20 && v25 == 92) {
          break;
        }
        goto LABEL_26;
      }
      if (v25 == 36 && v23 != v20)
      {
        uint64_t v27 = a3[v20 + 1];
        if (v27 == 36 || v27 == 110 || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v27 + 60) & 0x400) != 0) {
          break;
        }
      }
LABEL_26:
      if (v13 == ++v20)
      {
        llvm::raw_ostream::operator<<(this, a3, v13);
        return 0;
      }
    }
    if (v20 >= v13) {
      size_t v28 = v13;
    }
    else {
      size_t v28 = v20;
    }
    llvm::raw_ostream::operator<<(this, a3, v28);
    if (v12 || !*v67)
    {
      if (!a9 || (size_t v31 = (v20 + 2), v13 == v31) || a3[(v20 + 1)] != 64)
      {
        do
        {
          size_t v31 = i - 1;
          int v32 = isIdentifierChar((char)a3[v31]);
          uint64_t v33 = i++;
          if (v32) {
            BOOL v34 = v13 == v33;
          }
          else {
            BOOL v34 = 1;
          }
        }
        while (!v34);
      }
      if (v31 - 2 == v20 && a3[v20 + 1] == 64)
      {
        write_unsigned<unsigned long>(this, *(unsigned int *)(v16 + 420), 0, 0, 0);
        size_t v31 = v20 + 2;
        goto LABEL_118;
      }
      uint64_t v62 = v16;
      uint64_t v63 = a7;
      unint64_t v61 = v10;
      if (v12)
      {
        uint64_t v35 = 0;
        char v36 = v66;
        while (~*v36 + v31 != v20 || v31 - 1 != v20 && memcmp((const void *)*(v36 - 1), &a3[v20 + 1], ~v20 + v31))
        {
          v36 += 6;
          if (v68 == ++v35) {
            goto LABEL_62;
          }
        }
      }
      else
      {
        LODWORD(v35) = 0;
      }
      if (v35 == v12)
      {
LABEL_62:
        uint64_t v16 = v62;
        if (a3[v20 + 1] != 40 || a3[v20 + 2] != 41)
        {
          unint64_t v10 = v61;
          uint64_t v42 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v42 >= *((void *)this + 3))
          {
            llvm::raw_ostream::write(this, 92);
          }
          else
          {
            *((void *)this + 4) = v42 + 1;
            *uint64_t v42 = 92;
          }
          llvm::raw_ostream::operator<<(this, &a3[v20 + 1], ~v20 + v31);
          goto LABEL_117;
        }
        size_t v31 = v20 + 3;
LABEL_116:
        unint64_t v10 = v61;
LABEL_117:
        a7 = v63;
        goto LABEL_118;
      }
      int v43 = v35 == v64 && v65;
      uint64_t v44 = (int **)(a7 + 24 * v35);
      uint64_t v45 = *v44;
      uint64_t v46 = v44[1];
      if (*v44 == v46)
      {
        uint64_t v16 = v62;
        goto LABEL_116;
      }
      unint64_t v10 = v61;
      uint64_t v16 = v62;
      while (1)
      {
        if (*(unsigned char *)(v62 + 799))
        {
          int v47 = (unsigned __int8 *)*((void *)v45 + 1);
          int v48 = *v47;
          int v49 = *v45;
          if (v48 == 37)
          {
            if (v49 == 4)
            {
              uint64_t v50 = (unint64_t *)(v45 + 6);
              if (v45[8] >= 0x41) {
                uint64_t v50 = (unint64_t *)*v50;
              }
              llvm::write_integer(this, *v50, 0, 0);
              goto LABEL_108;
            }
          }
          else if (v48 == 60)
          {
            if (v49 == 3)
            {
              unint64_t v51 = *((void *)v45 + 2);
              unint64_t v52 = v51 - 1;
              unint64_t v53 = v51 != 0;
              if (v51) {
                ++v47;
              }
              if (v52 < v53) {
                unint64_t v52 = 1;
              }
              if (v52 < v51) {
                unint64_t v51 = v52;
              }
              angleBracketString(&__p, (uint64_t)v47, v51 - v53);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t size = __p.__r_.__value_.__l.__size_;
              }
              llvm::raw_ostream::write(this, (const char *)p_p, size);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_108;
            }
            goto LABEL_97;
          }
        }
        else
        {
          int v49 = *v45;
        }
        if (((v49 == 3) & ~v43) != 0)
        {
          unint64_t v57 = *((void *)v45 + 2);
          unint64_t v58 = v57 != 0;
          if (v57) {
            int v47 = (unsigned __int8 *)(*((void *)v45 + 1) + 1);
          }
          else {
            int v47 = (unsigned __int8 *)*((void *)v45 + 1);
          }
          if (v57 - 1 < v58) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = v57 - 1;
          }
          if (v59 < v57) {
            unint64_t v57 = v59;
          }
          size_t v56 = v57 - v58;
          goto LABEL_107;
        }
        int v47 = (unsigned __int8 *)*((void *)v45 + 1);
LABEL_97:
        size_t v56 = *((void *)v45 + 2);
LABEL_107:
        llvm::raw_ostream::operator<<(this, v47, v56);
LABEL_108:
        v45 += 10;
        if (v45 == v46) {
          goto LABEL_117;
        }
      }
    }
    int v29 = (char)a3[v20 + 1];
    if (v29 == 110)
    {
      write_unsigned<unsigned long>(this, v10, 0, 0, 0);
      goto LABEL_113;
    }
    if (v29 == 36)
    {
      char v30 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v30 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 36);
      }
      else
      {
        *((void *)this + 4) = v30 + 1;
        *char v30 = 36;
      }
LABEL_113:
      uint64_t v38 = this;
    }
    else
    {
      unint64_t v37 = (v29 - 48);
      uint64_t v38 = this;
      if (v37 < v10)
      {
        uint64_t v39 = (uint64_t *)(a7 + 24 * v37);
        uint64_t v40 = *v39;
        uint64_t v41 = v39[1];
        while (v40 != v41)
        {
          llvm::raw_ostream::operator<<(v38, *(const void **)(v40 + 8), *(void *)(v40 + 16));
          v40 += 40;
        }
      }
    }
    size_t v31 = v20 + 2;
    this = v38;
LABEL_118:
    unsigned int v18 = v67;
    uint64_t result = 0;
    if (v13 >= v31) {
      size_t v60 = v31;
    }
    else {
      size_t v60 = v13;
    }
    a3 += v60;
    v13 -= v60;
  }
  while (v13);
  return result;
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x263E4FDE0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    uint64_t v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = a2;
    }
    int v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      long long v11 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x263E4FDF0](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      size_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void std::vector<std::vector<llvm::AsmToken>>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      unsigned int v19 = &v4[24 * a2];
      while (v3 != v19)
      {
        v3 -= 24;
        size_t v20 = (void **)v3;
        std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](&v20);
      }
      a1[1] = v19;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
      a1[1] = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v11 = 3 * v10;
      int64_t v12 = (char *)operator new(24 * v10);
      size_t v13 = &v12[24 * v5];
      uint64_t v14 = &v12[8 * v11];
      size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v13, v15);
      uint64_t v16 = &v13[v15];
      if (v3 == v4)
      {
        *a1 = v13;
        a1[1] = v16;
        a1[2] = v14;
      }
      else
      {
        do
        {
          long long v17 = *(_OWORD *)(v3 - 24);
          v3 -= 24;
          *(_OWORD *)(v13 - 24) = v17;
          v13 -= 24;
          *((void *)v13 + 2) = *((void *)v3 + 2);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          *((void *)v3 + 2) = 0;
        }
        while (v3 != v4);
        uint64_t v3 = *a1;
        char v18 = (void **)a1[1];
        *a1 = v13;
        a1[1] = v16;
        a1[2] = v14;
        while (v18 != (void **)v3)
        {
          v18 -= 3;
          size_t v20 = v18;
          std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](&v20);
        }
      }
      if (v3) {
        operator delete(v3);
      }
    }
  }
}

uint64_t *std::vector<llvm::AsmToken>::push_back[abi:nn180100](uint64_t *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 2;
  unint64_t v5 = result[2];
  unint64_t v6 = result[1];
  if (v6 >= v5)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *result) >> 3);
    if (v9 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *result) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    v18[4] = v4;
    size_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v12);
    uint64_t v14 = &v13[40 * v9];
    v18[0] = v13;
    v18[1] = v14;
    v18[3] = &v13[40 * v15];
    uint64_t v16 = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v14 = *a2;
    *((void *)v14 + 2) = v16;
    LODWORD(v16) = *((_DWORD *)a2 + 8);
    *((_DWORD *)v14 + 8) = v16;
    if (v16 > 0x40) {
      operator new[]();
    }
    *((void *)v14 + 3) = *((void *)a2 + 3);
    v18[2] = v14 + 40;
    std::vector<llvm::AsmToken>::__swap_out_circular_buffer(v3, v18);
    uint64_t v17 = v3[1];
    uint64_t result = (uint64_t *)std::__split_buffer<llvm::AsmToken>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    long long v7 = *a2;
    *(void *)(v6 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v6 = v7;
    unsigned int v8 = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v6 + 32) = v8;
    if (v8 > 0x40) {
      operator new[]();
    }
    *(void *)(v6 + 24) = *((void *)a2 + 3);
    uint64_t v17 = v6 + 40;
  }
  v3[1] = v17;
  return result;
}

uint64_t anonymous namespace'::AsmParser::jumpToLoc(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v4 = result;
  unint64_t v5 = *(void **)(result + 240);
  if (!a3)
  {
    uint64_t result = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(result + 240), a2);
    a3 = result;
  }
  uint64_t v6 = *(void *)(*v5 + 24 * (a3 - 1));
  *(_DWORD *)(v4 + 280) = a3;
  unint64_t v7 = *(void *)(v6 + 8);
  unint64_t v8 = *(void *)(v6 + 16) - v7;
  *(void *)(v4 + 192) = v7;
  *(void *)(v4 + 200) = v8;
  if (a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v7;
  }
  *(void *)(v4 + 184) = v9;
  *(void *)(v4 + 136) = 0;
  *(unsigned char *)(v4 + 211) = 1;
  return result;
}

uint64_t anonymous namespace'::AsmParser::parseMacroArgument(uint64_t a1, uint64_t *a2, int a3)
{
  if (a3)
  {
    if (**(_DWORD **)(a1 + 48) == 9) {
      return 0;
    }
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
    uint64_t v21 = v19;
    uint64_t v22 = v20;
    unint64_t v23 = a2[2];
    unint64_t v24 = a2[1];
    if (v24 >= v23)
    {
      unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - *a2) >> 3);
      if (v26 + 1 > 0x666666666666666) {
        abort();
      }
      unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - *a2) >> 3);
      uint64_t v28 = 2 * v27;
      if (2 * v27 <= v26 + 1) {
        uint64_t v28 = v26 + 1;
      }
      if (v27 >= 0x333333333333333) {
        unint64_t v29 = 0x666666666666666;
      }
      else {
        unint64_t v29 = v28;
      }
      char v36 = a2 + 2;
      char v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v29);
      size_t v31 = &v30[40 * v26];
      v35[0] = v30;
      v35[1] = v31;
      v35[3] = &v30[40 * v32];
      *(_DWORD *)size_t v31 = 3;
      *((void *)v31 + 1) = v21;
      *((void *)v31 + 2) = v22;
      *((_DWORD *)v31 + 8) = 64;
      *((void *)v31 + 3) = 0;
      llvm::APInt::clearUnusedBits((uint64_t)(v31 + 24));
      v35[2] = v31 + 40;
      std::vector<llvm::AsmToken>::__swap_out_circular_buffer(a2, v35);
      uint64_t v25 = a2[1];
      std::__split_buffer<llvm::AsmToken>::~__split_buffer((uint64_t)v35);
    }
    else
    {
      *(_DWORD *)unint64_t v24 = 3;
      *(void *)(v24 + 8) = v19;
      *(void *)(v24 + 16) = v20;
      *(_DWORD *)(v24 + 32) = 64;
      *(void *)(v24 + 24) = 0;
      llvm::APInt::clearUnusedBits(v24 + 24);
      uint64_t v25 = v24 + 40;
    }
    uint64_t result = 0;
    a2[1] = v25;
    return result;
  }
  int v6 = 0;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a1 + 796);
  while (1)
  {
    int v7 = **(_DWORD **)(a1 + 48);
    if (v7 == 27 || v7 == 0) {
      break;
    }
    if (v6)
    {
      if (v7 == 9)
      {
        uint64_t v33 = "unbalanced parentheses in macro argument";
        goto LABEL_46;
      }
      goto LABEL_18;
    }
    if (v7 == 25) {
      goto LABEL_45;
    }
    if (v7 == 11) {
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
    }
    if (*(unsigned char *)(a1 + 796)
      || ((v14 = **(_DWORD **)(a1 + 48), BOOL v15 = v14 > 0x2C, v16 = (1 << v14) & 0x1FCFF980F000, !v15)
        ? (BOOL v17 = v16 == 0)
        : (BOOL v17 = 1),
          v17))
    {
      if (v7 == 11 || (int v7 = **(_DWORD **)(a1 + 48), v7 == 9))
      {
LABEL_45:
        uint64_t result = 0;
        goto LABEL_47;
      }
LABEL_18:
      int v10 = v7 == 18 && v6 != 0;
      int v11 = v10 << 31 >> 31;
      if (v7 == 17) {
        int v11 = 1;
      }
      int v12 = v11 + v6;
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      std::vector<llvm::AsmToken>::push_back[abi:nn180100](a2, *(long long **)(v13 + 8));
LABEL_27:
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
      int v6 = v12;
    }
    else
    {
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      std::vector<llvm::AsmToken>::push_back[abi:nn180100](a2, *(long long **)(v18 + 8));
      llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 40));
      int v6 = 0;
      int v12 = 0;
      if (**(_DWORD **)(a1 + 48) == 11) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v33 = "unexpected token in macro instantiation";
LABEL_46:
  v35[0] = v33;
  LOWORD(v36) = 259;
  uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  llvm::MCAsmParser::Error(a1, *(void *)(v34 + 96), (llvm::Twine *)v35, 0, 0);
  uint64_t result = 1;
LABEL_47:
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

uint64_t *std::vector<llvm::AsmToken>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      long long v7 = *(_OWORD *)(v2 + v5 - 40);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(_OWORD *)(v6 - 40) = v7;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(_DWORD *)(v2 + v5 - 8) = 0;
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<llvm::AsmToken>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 40;
      *(void *)(a1 + 16) = v2 - 40;
      if (*(_DWORD *)(v2 - 8) >= 0x41u)
      {
        uint64_t v5 = *(void *)(v2 - 16);
        if (v5)
        {
          MEMORY[0x263E50080](v5, 0x1000C8000313F17);
          uint64_t v4 = *(void *)(a1 + 16);
        }
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<llvm::AsmToken>::__assign_with_size[abi:nn180100]<llvm::AsmToken*,llvm::AsmToken*>(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v9)
    {
      std::vector<llvm::AsmToken>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      goto LABEL_18;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666) {
LABEL_18:
    }
      abort();
    uint64_t v13 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)v13 + 40 * v14;
    uint64_t v15 = (uint64_t)a2;
    goto LABEL_14;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v16 = (long long *)((char *)a2 + 8 * ((a1[1] - v9) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(a2, v16, v9);
    uint64_t v13 = (void *)a1[1];
    uint64_t v15 = (uint64_t)v16;
LABEL_14:
    uint64_t result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<llvm::AsmToken>,llvm::AsmToken*,llvm::AsmToken*,llvm::AsmToken*>(v15, (uint64_t)a3, (uint64_t)v13);
    a1[1] = result;
    return result;
  }
  uint64_t v18 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(a2, a3, v9);
  return std::vector<llvm::AsmToken>::__base_destruct_at_end[abi:nn180100]((uint64_t)a1, v18);
}

uint64_t std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<llvm::AsmToken>,llvm::AsmToken*,llvm::AsmToken*,llvm::AsmToken*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 24;
    do
    {
      long long v5 = *(_OWORD *)(v4 - 24);
      *(void *)(a3 + 16) = *(void *)(v4 - 8);
      *(_OWORD *)a3 = v5;
      unsigned int v6 = *(_DWORD *)(v4 + 8);
      *(_DWORD *)(a3 + 32) = v6;
      if (v6 > 0x40) {
        operator new[]();
      }
      *(void *)(a3 + 24) = *(void *)v4;
      uint64_t v7 = v4 - 24;
      a3 += 40;
      v4 += 40;
    }
    while (v7 + 40 != a2);
  }
  return a3;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::AsmToken *,llvm::AsmToken *,llvm::AsmToken *,0>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      llvm::APInt::operator=((llvm::APInt *)(a3 + 24), (const llvm::APInt *)((char *)v5 + 24));
      a3 += 40;
      long long v5 = (long long *)((char *)v5 + 40);
    }
    while (v5 != a2);
  }
  return a3;
}

unint64_t isIdentifierChar(int a1)
{
  if (a1 < 0)
  {
    if (__maskrune(a1, 0x500uLL)) {
      return 1;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * a1 + 60) & 0x500) != 0)
  {
    return 1;
  }
  if ((a1 - 36) <= 0x3B) {
    return (0x800000000000401uLL >> (a1 - 36)) & 1;
  }
  else {
    return 0;
  }
}

void angleBracketString(std::string *this, uint64_t a2, unint64_t a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a3)
  {
    uint64_t v6 = 0;
    do
    {
      if (*(unsigned char *)(a2 + v6) == 33) {
        uint64_t v7 = v6 + 1;
      }
      else {
        uint64_t v7 = v6;
      }
      std::string::push_back(this, *(unsigned char *)(a2 + v7));
      uint64_t v6 = v7 + 1;
    }
    while (v7 + 1 < a3);
  }
}

void std::vector<std::vector<llvm::AsmToken>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<llvm::AsmToken>::__destroy_vector::operator()[abi:nn180100](&v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::AsmParser::parseDirectiveAscii(llvm::StringRef,BOOL)::$_0>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  std::string __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 264))(v2) & 1) == 0)
  {
    while (((*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 208))(v2, &__p) & 1) == 0)
    {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
      if (v11 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v11 >= 0) {
        uint64_t v6 = HIBYTE(v11);
      }
      else {
        uint64_t v6 = v10;
      }
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 488))(v4, p_p, v6);
      if (*(unsigned char *)a1[1]) {
        goto LABEL_13;
      }
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) != 3)
      {
        if (*(unsigned char *)a1[1])
        {
LABEL_13:
          uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v7 + 488))(v7, &unk_261E91320, 1);
        }
        uint64_t v3 = 0;
        goto LABEL_15;
      }
    }
  }
  uint64_t v3 = 1;
LABEL_15:
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  return v3;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::AsmParser::parseDirectiveValue(llvm::StringRef,unsigned int)::$_0>(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v14 = 0;
  uint64_t v3 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 96);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 264))(v2)) {
    return 1;
  }
  v12[0] = 0;
  if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v2 + 232))(v2, &v14, v12)) {
    return 1;
  }
  if (*(unsigned char *)v14 == 1)
  {
    int64_t v5 = *(void *)(v14 + 16);
    unsigned int v6 = 8 * **(_DWORD **)(a1 + 8);
    if (v6 <= 0x3F && 0xFFFFFFFFFFFFFFFFLL >> (-8 * **(unsigned char **)(a1 + 8)) < v5)
    {
      uint64_t v8 = -1 << (v6 - 1);
      if (v8 > v5 || v5 > ~v8)
      {
        v12[0] = "out of range literal value";
        __int16 v13 = 259;
        return llvm::MCAsmParser::Error(v2, v3, (llvm::Twine *)v12, 0, 0);
      }
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
    (*(void (**)(uint64_t, int64_t, void))(*(void *)v11 + 512))(v11, v5, **(unsigned int **)(a1 + 8));
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v10 + 504))(v10, v14, **(unsigned int **)(a1 + 8), v3);
  }
  return 0;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::AsmParser::parseDirectiveOctaValue(llvm::StringRef)::$_0>(_anonymous_namespace_::AsmParser **a1)
{
  unsigned int v1 = *a1;
  if ((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)*a1 + 264))(*a1)) {
    return 1;
  }
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  uint64_t v2 = parseHexOcta(v1, &v7, &v6);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)v1 + 56))(v1)
                          + 512);
    v3();
    uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)v1 + 56))(v1);
    (*(void (**)(void))(*(void *)v4 + 512))();
  }
  return v2;
}

uint64_t parseHexOcta(_anonymous_namespace_::AsmParser *a1, unint64_t *a2, unint64_t *a3)
{
  if (**(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)a1 + 40))(a1) + 8) == 4
    || **(_DWORD **)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)a1 + 40))(a1) + 8) == 5)
  {
    (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)a1 + 40))(a1);
    uint64_t v6 = *(void *)((*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)a1 + 40))(a1) + 8);
    unsigned int v12 = *(_DWORD *)(v6 + 32);
    if (v12 > 0x40) {
      operator new[]();
    }
    unint64_t v11 = *(void *)(v6 + 24);
    unint64_t v7 = v11;
    (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)a1 + 184))(a1);
    *a2 = 0;
    *a3 = v7;
    return 0;
  }
  else
  {
    __int16 v13 = "unknown token in expression";
    __int16 v14 = 259;
    uint64_t v9 = (*(uint64_t (**)(_anonymous_namespace_::AsmParser *))(*(void *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v9 + 96), (llvm::Twine *)&v13, 0, 0);
    return 1;
  }
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::AsmParser::parseDirectiveRealValue(llvm::StringRef,llvm::fltSemantics const&)::$_0>(uint64_t a1)
{
  uint64_t v2 = *(_DWORD ***)a1;
  uint64_t v3 = 1;
  unsigned int v8 = 1;
  unint64_t v7 = 0;
  if (((*((uint64_t (**)(_DWORD **))*v2 + 33))(v2) & 1) == 0
  {
    uint64_t v4 = (*((uint64_t (**)(_DWORD **))*v2 + 7))(v2);
    LimitedValue = llvm::APInt::getLimitedValue(&v7, 0xFFFFFFFFFFFFFFFFLL);
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v4 + 512))(v4, LimitedValue, v8 >> 3);
    uint64_t v3 = 0;
  }
  if (v8 >= 0x41 && v7) {
    MEMORY[0x263E50080](v7, 0x1000C8000313F17);
  }
  return v3;
}

uint64_t anonymous namespace'::AsmParser::parseRealValue(_DWORD **a1, void *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v6 = **(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
  if (v6 == 13 || **(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) == 12) {
    llvm::MCAsmLexer::Lex((llvm::MCAsmLexer *)(a1 + 5));
  }
  switch(*a1[6])
  {
    case 1:
      __int16 v25 = 260;
      BOOL v17 = (uint64_t (**)(_DWORD **))*a1;
      unint64_t v23 = (const char *)(a1 + 14);
      goto LABEL_42;
    case 2:
    case 4:
    case 6:
      llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)v22, a2);
      uint64_t v7 = *(void *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
      uint64_t v9 = *(char **)(v7 + 8);
      unint64_t v8 = *(void *)(v7 + 16);
      if (**(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) == 2)
      {
        if (v8 >= 8) {
          uint64_t v10 = 8;
        }
        else {
          uint64_t v10 = v8;
        }
        if (ascii_strncasecmp(v9, "infinity", v10)) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v8 == 8;
        }
        if (v11
          || (v8 >= 3 ? (uint64_t v12 = 3) : (uint64_t v12 = v8),
              !ascii_strncasecmp(v9, "inf", v12) ? (BOOL v13 = v8 == 3) : (BOOL v13 = 0),
              v13))
        {
          LODWORD(v20) = 0;
          llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)v24, a2);
          llvm::APFloat::makeInf((llvm::APFloat *)&v23, 0);
          llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)v22, v24);
        }
        else
        {
          if (ascii_strncasecmp(v9, "nan", v12)) {
            BOOL v14 = 0;
          }
          else {
            BOOL v14 = v8 == 3;
          }
          if (!v14)
          {
LABEL_30:
            unint64_t v23 = "invalid floating point literal";
            __int16 v25 = 259;
            uint64_t v15 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
            llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v15 + 96), (llvm::Twine *)&v23, 0, 0);
            uint64_t v16 = 1;
            goto LABEL_39;
          }
          llvm::APFloat::getNaN(a2, 0, -1, (uint64_t)&v23);
          llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)v22, v24);
        }
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v24);
      }
      else
      {
        llvm::APFloat::convertFromString((uint64_t)v21, v9, v8, 1, (uint64_t)&v23);
        if (((uint64_t)v24[0] & 1) != 0 && v23)
        {
          uint64_t v20 = v23;
          llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v20);
          if (v20) {
            (*(void (**)(const char *))(*(void *)v20 + 8))(v20);
          }
          goto LABEL_30;
        }
      }
      if (v6 == 13) {
        llvm::APFloat::changeSign((uint64_t)v21);
      }
      (*((void (**)(_DWORD **))*a1 + 23))(a1);
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v23, (llvm::APFloat *)v21);
      if (*(_DWORD *)(a3 + 8) >= 0x41u && *(void *)a3) {
        MEMORY[0x263E50080](*(void *)a3, 0x1000C8000313F17);
      }
      uint64_t v16 = 0;
      *(void *)a3 = v23;
      *(_DWORD *)(a3 + 8) = v24[0];
LABEL_39:
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v22);
      return v16;
    default:
      unint64_t v23 = "unexpected token in directive";
      __int16 v25 = 259;
      BOOL v17 = (uint64_t (**)(_DWORD **))*a1;
LABEL_42:
      uint64_t v18 = v17[5](a1);
      llvm::MCAsmParser::Error((uint64_t)a1, *(void *)(v18 + 96), (llvm::Twine *)&v23, 0, 0);
      return 1;
  }
}

void llvm::APFloat::getNaN(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    unsigned int v7 = 64;
    uint64_t v6 = a3;
    int v8 = 0;
    llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)(a4 + 8), a1);
    llvm::APFloat::makeNaN((llvm::APFloat *)a4, 0, a2, (const llvm::APInt *)&v6);
    if (v7 >= 0x41)
    {
      if (v6) {
        MEMORY[0x263E50080](v6, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)(a4 + 8), a1);
    llvm::APFloat::makeNaN((llvm::APFloat *)a4, 0, a2, 0);
  }
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::AsmParser::parseDirectiveSymbolAttribute(llvm::MCSymbolAttr)::$_0>(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v2 + 192))(v2, &v11))
  {
    uint64_t v4 = "expected identifier";
LABEL_3:
    v9[0] = v4;
    __int16 v10 = 259;
    return llvm::MCAsmParser::Error(v2, v3, (llvm::Twine *)v9, 0, 0);
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 104))(v2, v11, v12) & 1) == 0)
  {
    uint64_t v6 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
    __int16 v10 = 261;
    v9[0] = v11;
    v9[1] = v12;
    unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)v9);
    if ((*(unsigned char *)(Symbol + 8) & 1) != 0 && **(_DWORD **)(a1 + 8) != 28)
    {
      uint64_t v4 = "non-local symbol required";
      goto LABEL_3;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
    if (((*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v8 + 296))(v8, Symbol, **(unsigned int **)(a1 + 8)) & 1) == 0)
    {
      uint64_t v4 = "unable to emit symbol attribute";
      goto LABEL_3;
    }
  }
  return 0;
}

unint64_t anonymous namespace'::AsmParser::parseMacroLikeBody(uint64_t a1, uint64_t a2)
{
  *((void *)&v172 + 1) = 0;
  uint64_t v173 = 0;
  unsigned int v175 = 1;
  uint64_t v174 = 0;
  uint64_t v4 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  uint64_t v167 = *(void *)(v4 + 8);
  if (*(_DWORD *)(v4 + 32) > 0x40u) {
    operator new[]();
  }
  if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8))
  {
LABEL_77:
    v170[0] = (void **)"no matching '.endr' in definition";
    __int16 v171 = 259;
    (*(void (**)(uint64_t, uint64_t, void ***, void, void))(*(void *)a1 + 176))(a1, a2, v170, 0, 0);
LABEL_78:
    unint64_t v45 = 0;
    goto LABEL_79;
  }
  int v5 = 0;
  while (1)
  {
    if (**(_DWORD **)(a1 + 48) == 2)
    {
      uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v6 == 2)
      {
        unsigned int v7 = *(_DWORD **)(v6 + 8);
        unint64_t v8 = *(void *)(v6 + 16);
      }
      else
      {
        unsigned int v7 = *(_DWORD **)(v6 + 8);
        unint64_t v9 = *(void *)(v6 + 16);
        unint64_t v10 = v9 - 1;
        unint64_t v11 = v9 != 0;
        if (v9) {
          unsigned int v7 = (_DWORD *)((char *)v7 + 1);
        }
        if (v10 < v11) {
          unint64_t v10 = 1;
        }
        if (v10 >= v9) {
          unint64_t v10 = v9;
        }
        unint64_t v8 = v10 - v11;
      }
      if (v8 == 4 && *v7 == 1885696558) {
        goto LABEL_57;
      }
      uint64_t v12 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v12 == 2)
      {
        BOOL v13 = *(int **)(v12 + 8);
        unint64_t v14 = *(void *)(v12 + 16);
      }
      else
      {
        BOOL v13 = *(int **)(v12 + 8);
        unint64_t v15 = *(void *)(v12 + 16);
        unint64_t v16 = v15 - 1;
        unint64_t v17 = v15 != 0;
        if (v15) {
          BOOL v13 = (int *)((char *)v13 + 1);
        }
        if (v16 < v17) {
          unint64_t v16 = 1;
        }
        if (v16 >= v15) {
          unint64_t v16 = v15;
        }
        unint64_t v14 = v16 - v17;
      }
      if (v14 == 5)
      {
        int v18 = *v13;
        int v19 = *((unsigned __int8 *)v13 + 4);
        BOOL v20 = v18 == 1885696558 && v19 == 116;
        if (v20) {
          goto LABEL_57;
        }
      }
      uint64_t v21 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v21 == 2)
      {
        uint64_t v22 = *(_DWORD **)(v21 + 8);
        unint64_t v23 = *(void *)(v21 + 16);
      }
      else
      {
        uint64_t v22 = *(_DWORD **)(v21 + 8);
        unint64_t v24 = *(void *)(v21 + 16);
        unint64_t v25 = v24 - 1;
        unint64_t v26 = v24 != 0;
        if (v24) {
          uint64_t v22 = (_DWORD *)((char *)v22 + 1);
        }
        if (v25 < v26) {
          unint64_t v25 = 1;
        }
        if (v25 >= v24) {
          unint64_t v25 = v24;
        }
        unint64_t v23 = v25 - v26;
      }
      if (v23 == 4 && *v22 == 1886546222) {
        goto LABEL_57;
      }
      uint64_t v27 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v27 == 2)
      {
        uint64_t v28 = *(int **)(v27 + 8);
        unint64_t v29 = *(void *)(v27 + 16);
      }
      else
      {
        uint64_t v28 = *(int **)(v27 + 8);
        unint64_t v30 = *(void *)(v27 + 16);
        unint64_t v31 = v30 - 1;
        unint64_t v32 = v30 != 0;
        if (v30) {
          uint64_t v28 = (int *)((char *)v28 + 1);
        }
        if (v31 < v32) {
          unint64_t v31 = 1;
        }
        if (v31 >= v30) {
          unint64_t v31 = v30;
        }
        unint64_t v29 = v31 - v32;
      }
      if (v29 == 5)
      {
        int v33 = *v28;
        int v34 = *((unsigned __int8 *)v28 + 4);
        if (v33 == 1886546222 && v34 == 99) {
LABEL_57:
        }
          ++v5;
      }
    }
    if (**(_DWORD **)(a1 + 48) != 2) {
      goto LABEL_76;
    }
    uint64_t v36 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
    if (*(_DWORD *)v36 == 2)
    {
      unint64_t v37 = *(int **)(v36 + 8);
      unint64_t v38 = *(void *)(v36 + 16);
    }
    else
    {
      unint64_t v37 = *(int **)(v36 + 8);
      unint64_t v39 = *(void *)(v36 + 16);
      unint64_t v40 = v39 - 1;
      unint64_t v41 = v39 != 0;
      if (v39) {
        unint64_t v37 = (int *)((char *)v37 + 1);
      }
      if (v40 < v41) {
        unint64_t v40 = 1;
      }
      if (v40 >= v39) {
        unint64_t v40 = v39;
      }
      unint64_t v38 = v40 - v41;
    }
    if (v38 != 5) {
      goto LABEL_76;
    }
    int v42 = *v37;
    int v43 = *((unsigned __int8 *)v37 + 4);
    if (v42 != 1684956462 || v43 != 114) {
      goto LABEL_76;
    }
    if (!v5) {
      break;
    }
    --v5;
LABEL_76:
    (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
    if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8)) {
      goto LABEL_77;
    }
  }
  int v47 = *(long long **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  uint64_t v48 = *((void *)v47 + 2);
  long long v172 = *v47;
  uint64_t v173 = v48;
  llvm::APInt::operator=((llvm::APInt *)&v174, (const llvm::APInt *)((char *)v47 + 24));
  (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) != 9)
  {
    uint64_t v74 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8) + 8);
    v170[0] = (void **)"unexpected token in '.endr' directive";
    __int16 v171 = 259;
    (*(void (**)(uint64_t, uint64_t, void ***, void, void))(*(void *)a1 + 176))(a1, v74, v170, 0, 0);
    goto LABEL_78;
  }
  long long v49 = *(_OWORD *)(a1 + 376);
  v166 = (llvm::APInt *)(a1 + 376);
  uint64_t v50 = *(char **)(a1 + 384);
  unint64_t v51 = (char *)v49;
  unint64_t v52 = (uint64_t)(*((void *)&v49 + 1) - v49) >> 3;
  uint64_t v53 = 46 * v52 - 1;
  uint64_t v54 = *((void *)&v49 + 1) - v49;
  if (*((void *)&v49 + 1) == (void)v49) {
    uint64_t v53 = 0;
  }
  uint64_t v55 = v167;
  uint64_t v56 = *((void *)&v172 + 1) - v167;
  uint64_t v169 = 0;
  long long v168 = 0uLL;
  unint64_t v57 = *(void *)(a1 + 400);
  if (v53 == *(void *)(a1 + 408) + v57)
  {
    BOOL v58 = v57 >= 0x2E;
    unint64_t v59 = v57 - 46;
    if (v58)
    {
      *(void *)(a1 + 400) = v59;
      unint64_t v61 = (char *)(v49 + 8);
      uint64_t v60 = *(void *)v49;
      *(void *)(a1 + 376) = v49 + 8;
      if (*((void *)&v49 + 1) == *(void *)(a1 + 392))
      {
        unint64_t v62 = *(void *)(a1 + 368);
        uint64_t v63 = (uint64_t)&v61[-v62];
        if ((unint64_t)v61 <= v62)
        {
          uint64_t v107 = *((void *)&v49 + 1) - v62;
          BOOL v20 = v107 == 0;
          uint64_t v108 = v107 >> 2;
          if (v20) {
            unint64_t v109 = 1;
          }
          else {
            unint64_t v109 = v108;
          }
          v110 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v109);
          v112 = &v110[8 * (v109 >> 2)];
          long long v113 = *(uint64_t **)(a1 + 376);
          uint64_t v50 = v112;
          uint64_t v114 = *(void *)(a1 + 384) - (void)v113;
          if (v114)
          {
            uint64_t v50 = &v112[v114 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v115 = 8 * (v114 >> 3);
            v116 = &v110[8 * (v109 >> 2)];
            do
            {
              uint64_t v117 = *v113++;
              *(void *)v116 = v117;
              v116 += 8;
              v115 -= 8;
            }
            while (v115);
          }
          v118 = *(void **)(a1 + 368);
          *(void *)(a1 + 368) = v110;
          *(void *)(a1 + 376) = v112;
          *(void *)(a1 + 384) = v50;
          *(void *)(a1 + 392) = &v110[8 * v111];
          if (v118)
          {
            operator delete(v118);
            uint64_t v50 = *(char **)(a1 + 384);
          }
        }
        else
        {
          uint64_t v64 = v56;
          uint64_t v65 = v63 >> 3;
          BOOL v66 = v63 >> 3 < -1;
          uint64_t v67 = (v63 >> 3) + 2;
          if (v66) {
            uint64_t v68 = v67;
          }
          else {
            uint64_t v68 = v65 + 1;
          }
          uint64_t v69 = -(v68 >> 1);
          uint64_t v70 = v68 >> 1;
          unint64_t v71 = &v61[-8 * v70];
          uint64_t v72 = *((void *)&v49 + 1) - (void)v61;
          if (*((char **)&v49 + 1) != v61)
          {
            memmove(&v61[-8 * v70], v61, *((void *)&v49 + 1) - (void)v61);
            uint64_t v50 = *(char **)v166;
          }
          unint64_t v73 = &v50[8 * v69];
          uint64_t v50 = &v71[v72];
          *(void *)(a1 + 376) = v73;
          *(void *)(a1 + 384) = &v71[v72];
          uint64_t v56 = v64;
        }
      }
      *(void *)uint64_t v50 = v60;
      *(void *)(a1 + 384) += 8;
    }
    else
    {
      uint64_t v165 = *((void *)&v172 + 1) - v167;
      unsigned int v75 = *(char **)(a1 + 392);
      long long v76 = *(char **)(a1 + 368);
      if (v52 < (v75 - v76) >> 3)
      {
        __int8 v77 = operator new(0xFD0uLL);
        uint64_t v78 = v77;
        if (v75 == v50)
        {
          if (v51 == v76)
          {
            if (v50 == v51) {
              unint64_t v125 = 1;
            }
            else {
              unint64_t v125 = (v75 - v51) >> 2;
            }
            uint64_t v126 = 2 * v125;
            v127 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v125);
            unint64_t v51 = &v127[(v126 + 6) & 0xFFFFFFFFFFFFFFF8];
            v129 = *(uint64_t **)(a1 + 376);
            v130 = v51;
            uint64_t v131 = *(void *)(a1 + 384) - (void)v129;
            uint64_t v56 = *((void *)&v172 + 1) - v167;
            if (v131)
            {
              v130 = &v51[v131 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v132 = 8 * (v131 >> 3);
              v133 = &v127[(v126 + 6) & 0xFFFFFFFFFFFFFFF8];
              do
              {
                uint64_t v134 = *v129++;
                *(void *)v133 = v134;
                v133 += 8;
                v132 -= 8;
              }
              while (v132);
            }
            v135 = *(void **)(a1 + 368);
            *(void *)(a1 + 368) = v127;
            *(void *)(a1 + 376) = v51;
            *(void *)(a1 + 384) = v130;
            *(void *)(a1 + 392) = &v127[8 * v128];
            if (v135)
            {
              operator delete(v135);
              unint64_t v51 = *(char **)v166;
            }
          }
          else
          {
            uint64_t v56 = *((void *)&v172 + 1) - v167;
          }
          *((void *)v51 - 1) = v78;
          v136 = *(char **)(a1 + 376);
          v137 = *(char **)(a1 + 384);
          *(void *)(a1 + 376) = v136 - 8;
          uint64_t v138 = *((void *)v136 - 1);
          *(void *)(a1 + 376) = v136;
          if (v137 == *(char **)(a1 + 392))
          {
            unint64_t v139 = *(void *)(a1 + 368);
            uint64_t v140 = (uint64_t)&v136[-v139];
            if ((unint64_t)v136 <= v139)
            {
              uint64_t v148 = (uint64_t)&v137[-v139];
              BOOL v20 = v148 == 0;
              uint64_t v149 = v148 >> 2;
              if (v20) {
                unint64_t v150 = 1;
              }
              else {
                unint64_t v150 = v149;
              }
              v151 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v150);
              v153 = &v151[8 * (v150 >> 2)];
              v154 = *(uint64_t **)(a1 + 376);
              v137 = v153;
              uint64_t v155 = *(void *)(a1 + 384) - (void)v154;
              if (v155)
              {
                v137 = &v153[v155 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v156 = 8 * (v155 >> 3);
                v157 = &v151[8 * (v150 >> 2)];
                do
                {
                  uint64_t v158 = *v154++;
                  *(void *)v157 = v158;
                  v157 += 8;
                  v156 -= 8;
                }
                while (v156);
              }
              v159 = *(void **)(a1 + 368);
              *(void *)(a1 + 368) = v151;
              *(void *)(a1 + 376) = v153;
              *(void *)(a1 + 384) = v137;
              *(void *)(a1 + 392) = &v151[8 * v152];
              if (v159)
              {
                operator delete(v159);
                v137 = *(char **)(a1 + 384);
              }
            }
            else
            {
              uint64_t v141 = v140 >> 3;
              BOOL v66 = v140 >> 3 < -1;
              uint64_t v142 = (v140 >> 3) + 2;
              if (v66) {
                uint64_t v143 = v142;
              }
              else {
                uint64_t v143 = v141 + 1;
              }
              uint64_t v144 = -(v143 >> 1);
              uint64_t v145 = v143 >> 1;
              v146 = &v136[-8 * v145];
              int64_t v147 = v137 - v136;
              if (v137 != v136)
              {
                memmove(&v136[-8 * v145], v136, v137 - v136);
                v136 = *(char **)v166;
              }
              v137 = &v146[v147];
              *(void *)(a1 + 376) = &v136[8 * v144];
              *(void *)(a1 + 384) = &v146[v147];
              uint64_t v56 = v165;
            }
          }
          *(void *)v137 = v138;
          *(void *)(a1 + 384) += 8;
        }
        else
        {
          *(void *)uint64_t v50 = v77;
          *(void *)(a1 + 384) += 8;
          uint64_t v56 = v165;
        }
        goto LABEL_177;
      }
      if (v75 == v76) {
        unint64_t v79 = 1;
      }
      else {
        unint64_t v79 = (v75 - v76) >> 2;
      }
      __int8 v80 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v79);
      uint64_t v82 = v81;
      uint64_t v83 = &v80[8 * v52];
      char v84 = &v80[8 * v81];
      uint64_t v85 = operator new(0xFD0uLL);
      if (v52 == v82)
      {
        uint64_t v86 = 8 * v52;
        if (v54 >= 1)
        {
          uint64_t v87 = v86 >> 3;
          if (v87 >= -1) {
            unint64_t v88 = v87 + 1;
          }
          else {
            unint64_t v88 = v87 + 2;
          }
          v83 -= 8 * (v88 >> 1);
          goto LABEL_111;
        }
        v120 = v85;
        uint64_t v121 = v86 >> 2;
        if (v50 == v51) {
          unint64_t v122 = 1;
        }
        else {
          unint64_t v122 = v121;
        }
        v123 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v122);
        uint64_t v83 = &v123[8 * (v122 >> 2)];
        char v84 = &v123[8 * v124];
        uint64_t v89 = (void *)(a1 + 376);
        if (v80) {
          operator delete(v80);
        }
        __int8 v80 = v123;
        uint64_t v85 = v120;
      }
      else
      {
LABEL_111:
        uint64_t v89 = (void *)(a1 + 376);
      }
      *(void *)uint64_t v83 = v85;
      uint64_t v90 = v83 + 8;
      uint64_t v91 = *(void *)(a1 + 384);
      if (v91 != *(void *)(a1 + 376))
      {
        while (2)
        {
          if (v83 != v80)
          {
            char v92 = v90;
            v93 = v83;
            goto LABEL_128;
          }
          if (v90 >= v84)
          {
            if (v84 == v83) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (v84 - v83) >> 2;
            }
            uint64_t v97 = 2 * v96;
            long long v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v96);
            __int8 v80 = v98;
            v93 = &v98[(v97 + 6) & 0xFFFFFFFFFFFFFFF8];
            char v92 = v93;
            uint64_t v100 = v90 - v83;
            if (v90 != v83)
            {
              char v92 = &v93[v100 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v101 = 8 * (v100 >> 3);
              __int16 v102 = &v98[(v97 + 6) & 0xFFFFFFFFFFFFFFF8];
              v103 = v83;
              do
              {
                uint64_t v104 = *(void *)v103;
                v103 += 8;
                *(void *)__int16 v102 = v104;
                v102 += 8;
                v101 -= 8;
              }
              while (v101);
            }
            char v84 = &v98[8 * v99];
            operator delete(v83);
LABEL_128:
            uint64_t v83 = v80;
          }
          else
          {
            uint64_t v94 = (v84 - v90) >> 3;
            if (v94 >= -1) {
              unint64_t v95 = v94 + 1;
            }
            else {
              unint64_t v95 = v94 + 2;
            }
            char v92 = &v90[8 * (v95 >> 1)];
            v93 = &v83[8 * (v95 >> 1)];
            if (v90 == v83) {
              uint64_t v83 = v90;
            }
            else {
              memmove(&v83[8 * (v95 >> 1)], v83, v90 - v83);
            }
          }
          __int8 v80 = v83;
          uint64_t v105 = *(void *)(v91 - 8);
          v91 -= 8;
          *((void *)v93 - 1) = v105;
          long long v106 = v93 - 8;
          uint64_t v90 = v92;
          uint64_t v83 = v106;
          if (v91 == *v89) {
            goto LABEL_144;
          }
          continue;
        }
      }
      long long v106 = v83;
      char v92 = v83 + 8;
LABEL_144:
      v119 = *(void **)(a1 + 368);
      *(void *)(a1 + 368) = v80;
      *(void *)(a1 + 376) = v106;
      *(void *)(a1 + 384) = v92;
      *(void *)(a1 + 392) = v84;
      uint64_t v55 = v167;
      uint64_t v56 = v165;
      if (v119) {
        operator delete(v119);
      }
    }
LABEL_177:
    unint64_t v51 = *(char **)v166;
  }
  unint64_t v160 = *(void *)(a1 + 408) + *(void *)(a1 + 400);
  unint64_t v161 = *(void *)&v51[8 * (v160 / 0x2E)] + 88 * (v160 % 0x2E);
  uint64_t v162 = v169;
  long long v163 = v168;
  uint64_t v169 = 0;
  long long v168 = 0uLL;
  *(void *)unint64_t v161 = 0;
  *(void *)(v161 + 8) = 0;
  *(void *)(v161 + 16) = v55;
  *(void *)(v161 + 24) = v56;
  *(_OWORD *)(v161 + 32) = v163;
  *(void *)(v161 + 48) = v162;
  memset(v170, 0, 24);
  *(unsigned char *)(v161 + 80) = 0;
  *(void *)(v161 + 56) = 0;
  *(void *)(v161 + 64) = 0;
  *(void *)(v161 + 72) = 0;
  v176 = v170;
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100]((void ***)&v176);
  ++*(void *)(a1 + 408);
  v170[0] = (void **)&v168;
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](v170);
  unint64_t v164 = *(void *)(a1 + 408) + *(void *)(a1 + 400) - 1;
  unint64_t v45 = *(void *)(*(void *)(a1 + 376) + 8 * (v164 / 0x2E)) + 88 * (v164 % 0x2E);
LABEL_79:
  if (v175 >= 0x41 && v174) {
    MEMORY[0x263E50080](v174, 0x1000C8000313F17);
  }
  return v45;
}

void anonymous namespace'::AsmParser::instantiateMacroLikeBody(int a1, int a2, llvm::raw_ostream *this)
{
  void v10[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 2674;
    *(_DWORD *)uint64_t v4 = 1684956462;
    *((void *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, ".endr\n", 6uLL);
  }
  uint64_t v5 = *((void *)this + 8);
  uint64_t v6 = *(const void **)v5;
  size_t v7 = *(void *)(v5 + 8);
  unint64_t v8 = "<instantiation>";
  LOWORD(v9) = 259;
  getMemBufferCopyImpl(v6, v7, (uint64_t)&v8, (uint64_t)v10);
  operator new();
}

uint64_t anonymous namespace'::AsmParser::handleMacroExit(_anonymous_namespace_::AsmParser *this)
{
  (*(void (**)(_anonymous_namespace_::AsmParser *))(*(void *)this + 184))(this);
  uint64_t v2 = *((void *)this + 44);
  uint64_t result = *(void *)(v2 - 8);
  if (result)
  {
    uint64_t result = MEMORY[0x263E500B0](result, 0x1050C4073F788CFLL);
    uint64_t v2 = *((void *)this + 44);
  }
  *((void *)this + 44) = v2 - 8;
  return result;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::AsmParser::parseDirectiveLEB128(BOOL)::$_0>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v2 + 232))(v2, &v7, &v8);
  if ((v3 & 1) == 0)
  {
    int v4 = *(unsigned __int8 *)a1[1];
    uint64_t v5 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
    if (v4) {
      (*(void (**)(void))(v5 + 552))();
    }
    else {
      (*(void (**)(void))(v5 + 544))();
    }
  }
  return v3;
}

BOOL llvm::MCContext::isDwarfMD5UsageConsistent(llvm::MCContext *this)
{
  unsigned int v1 = (void *)*((void *)this + 196);
  if (!v1) {
    goto LABEL_5;
  }
  do
  {
    uint64_t v2 = (char *)v1;
    unsigned int v1 = (void *)*v1;
  }
  while (v1);
  if (v2 == (char *)this + 1568 || *((_DWORD *)v2 + 8)) {
LABEL_5:
  }
    uint64_t v2 = (char *)this + 1568;
  return !*((_DWORD *)v2 + 36) || v2[489] == v2[490];
}

void llvm::MCDwarfLineTableHeader::resetFileTable(llvm::MCDwarfLineTableHeader *this)
{
  llvm::SmallVectorImpl<std::string>::clear((uint64_t *)this + 1);
  uint64_t v2 = *((unsigned int *)this + 26);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 12);
    uint64_t v4 = 72 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 49) < 0) {
        operator delete(*(void **)(v3 + v4 - 72));
      }
      v4 -= 72;
    }
    while (v4);
  }
  *((_DWORD *)this + 26) = 0;
  if (*((char *)this + 399) < 0)
  {
    **((unsigned char **)this + 47) = 0;
    *((void *)this + 48) = 0;
  }
  else
  {
    *((unsigned char *)this + 376) = 0;
    *((unsigned char *)this + 399) = 0;
  }
  *((unsigned char *)this + 450) = 0;
  *((_WORD *)this + 224) = 256;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::AsmParser::parseDirectiveLoc(void)::$_0>(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v2 + 192))(v2, &v20))
  {
    v18[0] = "unexpected token in '.loc' directive";
    __int16 v19 = 259;
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(void *)(v4 + 96), (llvm::Twine *)v18, 0, 0);
    return 1;
  }
  switch(v21)
  {
    case 3:
      if (*(_WORD *)v20 != 29545 || *(unsigned char *)(v20 + 2) != 97) {
        goto LABEL_47;
      }
      uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
      uint64_t v17 = 0;
      v18[0] = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v2 + 232))(v2, &v17, v18)) {
        return 1;
      }
      if (*(unsigned char *)v17 == 1)
      {
        int v7 = *(_DWORD *)(v17 + 16);
        if ((v7 & 0x80000000) == 0)
        {
          **(_DWORD **)(a1 + 16) = v7;
          return 0;
        }
        unint64_t v16 = "isa number less than zero";
      }
      else
      {
        unint64_t v16 = "isa number not a constant value";
      }
      goto LABEL_48;
    case 7:
      if (*(_DWORD *)v20 != 1935635305 || *(_DWORD *)(v20 + 3) != 1953330291) {
        goto LABEL_47;
      }
      uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
      uint64_t v17 = 0;
      v18[0] = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v2 + 232))(v2, &v17, v18)) {
        return 1;
      }
      if (*(unsigned char *)v17 != 1)
      {
        unint64_t v16 = "is_stmt value not the constant value of 0 or 1";
        goto LABEL_48;
      }
      int v9 = *(_DWORD *)(v17 + 16);
      if (v9 != 1)
      {
        if (!v9)
        {
          unint64_t v10 = *(unsigned int **)(a1 + 8);
          unsigned int v11 = *v10 & 0xFFFFFFFE;
          goto LABEL_50;
        }
        unint64_t v16 = "is_stmt value not 0 or 1";
LABEL_48:
        v18[0] = v16;
        __int16 v19 = 259;
        return llvm::MCAsmParser::Error(v2, v3, (llvm::Twine *)v18, 0, 0);
      }
      unint64_t v10 = *(unsigned int **)(a1 + 8);
      unsigned int v11 = *v10 | 1;
LABEL_50:
      *unint64_t v10 = v11;
      return 0;
    case 11:
      if (*(void *)v20 != 0x6C625F6369736162 || *(void *)(v20 + 3) != 0x6B636F6C625F6369) {
        goto LABEL_47;
      }
      unint64_t v10 = *(unsigned int **)(a1 + 8);
      unsigned int v11 = *v10 | 2;
      goto LABEL_50;
    case 12:
      if (*(void *)v20 != 0x6575676F6C6F7270 || *(_DWORD *)(v20 + 8) != 1684956511) {
        goto LABEL_47;
      }
      unint64_t v10 = *(unsigned int **)(a1 + 8);
      unsigned int v11 = *v10 | 4;
      goto LABEL_50;
    case 13:
      if (*(void *)v20 != 0x696D697263736964 || *(void *)(v20 + 5) != 0x726F74616E696D69) {
        goto LABEL_47;
      }
      return ((*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 256))(v2, *(void *)(a1 + 24)) & 1) != 0;
    case 14:
      if (*(void *)v20 != 0x6575676F6C697065 || *(void *)(v20 + 6) != 0x6E696765625F6575) {
        goto LABEL_47;
      }
      unint64_t v10 = *(unsigned int **)(a1 + 8);
      unsigned int v11 = *v10 | 8;
      goto LABEL_50;
    default:
LABEL_47:
      unint64_t v16 = "unknown sub-directive in '.loc' directive";
      goto LABEL_48;
  }
}

uint64_t anonymous namespace'::AsmParser::parseCVFunctionId(llvm::MCAsmParser *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8) + 8);
  __int16 v14 = 1283;
  v13[0] = "expected function id in '";
  v13[2] = a3;
  v13[3] = a4;
  v15[0] = v13;
  v15[2] = "' directive";
  __int16 v16 = 770;
  if (llvm::MCAsmParser::parseIntToken(a1, a2, (const llvm::Twine *)v15)) {
    return 1;
  }
  unint64_t v9 = *a2;
  unsigned int v11 = "expected function id within range [0, UINT_MAX)";
  __int16 v12 = 259;
  if (v9 >= 0xFFFFFFFF)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, v8, (llvm::Twine *)&v11, 0, 0);
    return 1;
  }
  return 0;
}

uint64_t anonymous namespace'::AsmParser::parseCVFileId(llvm::MCContext **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(*(void *)((*((uint64_t (**)(llvm::MCContext **))*a1 + 5))(a1) + 8) + 8);
  __int16 v24 = 1283;
  v23[0] = "expected integer in '";
  v23[2] = a3;
  v23[3] = a4;
  v25[0] = v23;
  v25[2] = "' directive";
  __int16 v26 = 770;
  if (!llvm::MCAsmParser::parseIntToken((llvm::MCAsmParser *)a1, a2, (const llvm::Twine *)v25))
  {
    uint64_t v9 = *a2;
    __int16 v20 = 1283;
    v19[0] = "file number less than one in '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "' directive";
    __int16 v22 = 770;
    if (v9 < 1)
    {
      BOOL v13 = (llvm::Twine *)v21;
    }
    else
    {
      uint64_t CVContext = llvm::MCContext::getCVContext(a1[27]);
      uint64_t v11 = (*(_DWORD *)a2 - 1);
      BOOL v12 = *(_DWORD *)(CVContext + 48) <= v11
         || *(unsigned __int8 *)(*(void *)(CVContext + 40) + 32 * v11 + 4) == 0;
      __int16 v16 = 1283;
      v15[0] = "unassigned file number in '";
      v15[2] = a3;
      v15[3] = a4;
      v17[0] = v15;
      v17[2] = "' directive";
      __int16 v18 = 770;
      if (!v12) {
        return 0;
      }
      BOOL v13 = (llvm::Twine *)v17;
    }
    llvm::MCAsmParser::Error((uint64_t)a1, v8, v13, 0, 0);
  }
  return 1;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::AsmParser::parseDirectiveCVLoc(void)::$_0>(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v2 + 192))(v2, &v14))
  {
    v12[0] = "unexpected token in '.cv_loc' directive";
    __int16 v13 = 259;
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(void *)(v4 + 96), (llvm::Twine *)v12, 0, 0);
    return 1;
  }
  if (v15 != 7)
  {
    if (v15 == 12 && *(void *)v14 == 0x6575676F6C6F7270 && *(_DWORD *)(v14 + 8) == 1684956511)
    {
      uint64_t result = 0;
      **(unsigned char **)(a1 + 8) = 1;
      return result;
    }
    goto LABEL_16;
  }
  if (*(_DWORD *)v14 != 1935635305 || *(_DWORD *)(v14 + 3) != 1953330291)
  {
LABEL_16:
    uint64_t v8 = "unknown sub-directive in '.cv_loc' directive";
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2) + 8) + 8);
  uint64_t v11 = 0;
  v12[0] = 0;
  if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v2 + 232))(v2, &v11, v12)) {
    return 1;
  }
  uint64_t v9 = *(unint64_t **)(a1 + 16);
  unint64_t *v9 = -1;
  if (*(unsigned char *)v11 == 1)
  {
    unint64_t v10 = *(void *)(v11 + 16);
    unint64_t *v9 = v10;
    if (v10 < 2) {
      return 0;
    }
  }
  uint64_t v8 = "is_stmt value not 0 or 1";
LABEL_17:
  v12[0] = v8;
  __int16 v13 = 259;
  return llvm::MCAsmParser::Error(v2, v3, (llvm::Twine *)v12, 0, 0);
}

uint64_t anonymous namespace'::AsmParser::parseRegisterOrRegisterNumber(void **a1, void *a2, uint64_t a3)
{
  uint64_t v10 = a3;
  unsigned int v9 = 0;
  if (**(_DWORD **)(((uint64_t (*)(void **))(*a1)[5])(a1) + 8) == 4)
  {
    uint64_t v5 = (uint64_t (*)(void **, void *))(*a1)[32];
    return v5(a1, a2);
  }
  else if ((*(uint64_t (**)(void *, unsigned int *, uint64_t *, uint64_t *))(*a1[1] + 32))(a1[1], &v9, &v10, &v10))
  {
    return 1;
  }
  else
  {
    uint64_t v7 = ((uint64_t (*)(void **))(*a1)[6])(a1);
    int DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(*(void *)(v7 + 152), v9, 1);
    uint64_t result = 0;
    *a2 = DwarfRegNum;
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::checkForBadMacro(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned int a6)
{
  if (a6)
  {
    unint64_t v6 = a4;
    if (a4)
    {
      int v8 = 0;
      int v9 = 0;
      uint64_t v10 = a6;
      uint64_t v11 = (void *)(a5 + 8);
      uint64_t v12 = MEMORY[0x263EF8318];
      do
      {
        int v13 = 0;
        uint64_t v14 = 1;
        while (1)
        {
          int v15 = *(unsigned __int8 *)(a3 + v14 - 1);
          if (v6 != v14 && v15 == 92) {
            break;
          }
          if (v6 != v14 && v15 == 36)
          {
            uint64_t v16 = *(unsigned __int8 *)(a3 + v14);
            if (v16 == 36 || v16 == 110 || (*(_DWORD *)(v12 + 4 * v16 + 60) & 0x400) != 0)
            {
              if (v16 != 36) {
                int v9 = 1;
              }
              unint64_t v17 = v14 + 1;
              goto LABEL_36;
            }
          }
          ++v14;
          ++v13;
          if (v14 - v6 == 1) {
            goto LABEL_40;
          }
        }
        int v20 = v8;
        int v23 = v9;
        uint64_t v24 = result;
        uint64_t v25 = a2;
        do
        {
          unint64_t v17 = (v13 + 1);
          if (isIdentifierChar(*(char *)(a3 + v17))) {
            BOOL v18 = v6 == v13 + 2;
          }
          else {
            BOOL v18 = 1;
          }
          ++v13;
        }
        while (!v18);
        uint64_t v21 = v11;
        uint64_t v22 = v10;
        while (v14 - v17 + *v11
             || v14 != v17 && memcmp((const void *)*(v11 - 1), (const void *)(a3 + v14), v17 - v14))
        {
          v11 += 6;
          if (!--v10) {
            goto LABEL_31;
          }
        }
        if (v10)
        {
          int v8 = 1;
          uint64_t result = v24;
          a2 = v25;
          int v9 = v23;
          goto LABEL_35;
        }
LABEL_31:
        if (*(unsigned char *)(a3 + v14) == 40 && *(unsigned char *)(a3 + v14 + 1) == 41) {
          unint64_t v17 = v14 + 2;
        }
        uint64_t result = v24;
        a2 = v25;
        int v9 = v23;
        int v8 = v20;
LABEL_35:
        uint64_t v11 = v21;
        uint64_t v10 = v22;
LABEL_36:
        if (v6 >= v17) {
          unint64_t v19 = v17;
        }
        else {
          unint64_t v19 = v6;
        }
        a3 += v19;
        v6 -= v19;
      }
      while (v6);
LABEL_40:
      if (v8 & 1) == 0 && (v9)
      {
        __int16 v26 = "macro defined with named parameters which are not used in macro body, possible positional parameter found "
              "in body which will have no effect";
        __int16 v27 = 259;
        return (*(uint64_t (**)(uint64_t, uint64_t, const char **, void, void))(*(void *)result + 168))(result, a2, &v26, 0, 0);
      }
    }
  }
  return result;
}

void llvm::MCContext::defineMacro(_DWORD *a1, uint64_t *a2, unint64_t a3, long long *a4)
{
  uint64_t v7 = (llvm::StringMapImpl *)(a1 + 516);
  long long v26 = *a4;
  long long v27 = a4[1];
  uint64_t v9 = *((void *)a4 + 4);
  uint64_t v8 = *((void *)a4 + 5);
  uint64_t v28 = v9;
  uint64_t v29 = v8;
  uint64_t v25 = v8;
  *((void *)a4 + 4) = 0;
  *((void *)a4 + 5) = 0;
  uint64_t v10 = *((void *)a4 + 6);
  uint64_t v11 = *((void *)a4 + 7);
  *((void *)a4 + 6) = 0;
  *((void *)a4 + 7) = 0;
  uint64_t v23 = v11;
  uint64_t v24 = v10;
  uint64_t v30 = v10;
  uint64_t v31 = v11;
  uint64_t v12 = *((void *)a4 + 9);
  uint64_t v22 = *((void *)a4 + 8);
  uint64_t v32 = v22;
  uint64_t v33 = v12;
  *((void *)a4 + 8) = 0;
  *((void *)a4 + 9) = 0;
  char v21 = *((unsigned char *)a4 + 80);
  char v34 = v21;
  unsigned int v13 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)(a1 + 516), a2, a3);
  uint64_t v14 = *((void *)a1 + 258);
  uint64_t v15 = *(void *)(v14 + 8 * v13);
  if (v15)
  {
    if (v15 != -8) {
      goto LABEL_7;
    }
    --a1[520];
  }
  uint64_t v20 = v9;
  uint64_t v19 = v13;
  uint64_t v16 = (char *)operator new(a3 + 97, (std::align_val_t)8uLL);
  unint64_t v17 = v16;
  BOOL v18 = v16 + 96;
  if (a3) {
    memcpy(v16 + 96, a2, a3);
  }
  v18[a3] = 0;
  *(_OWORD *)(v17 + 8) = v26;
  *(void *)unint64_t v17 = a3;
  *(_OWORD *)(v17 + 24) = v27;
  *((void *)v17 + 5) = v20;
  *((void *)v17 + 6) = v25;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  *((void *)v17 + 7) = v24;
  *((void *)v17 + 8) = v23;
  *((void *)v17 + 9) = v22;
  *((void *)v17 + 10) = v12;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v31 = 0;
  v17[88] = v21;
  *(void *)(v14 + 8 * v19) = v17;
  ++a1[519];
  llvm::StringMapImpl::RehashTable(v7, v19);
LABEL_7:
  v35[0] = (void **)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v35);
  v35[0] = (void **)&v28;
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](v35);
}

uint64_t llvm::StringMapEntry<llvm::MCAsmMacro>::Destroy<llvm::MallocAllocator>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<llvm::MCAsmMacroParameter>::__destroy_vector::operator()[abi:nn180100](&v3);
  return MEMORY[0x263E500A0](a1, 8);
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::AsmParser::parseDirectiveLTODiscard(void)::$_0>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v12 = 0uLL;
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)v1 + 40))(v1) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)v1 + 192))(v1, &v12))
  {
    uint64_t v10 = "expected identifier";
    __int16 v11 = 259;
    return llvm::MCAsmParser::Error(v1, v2, (llvm::Twine *)&v10, 0, 0);
  }
  if (*(void *)(v1 + 784))
  {
    uint64_t v4 = (uint64_t **)(v1 + 768);
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 720);
    uint64_t v6 = *(unsigned int *)(v1 + 728);
    long long v7 = v12;
    if (llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::vfind(v5, *(_DWORD *)(v1 + 728), (void *)v12, *((size_t *)&v12 + 1)) != v5 + 16 * v6)return 0; {
    if (v6 <= 1)
    }
    {
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)(v1 + 720), v7, *((uint64_t *)&v7 + 1));
      return 0;
    }
    do
    {
      uint64_t v8 = (long long *)(*(void *)(v1 + 720) + 16 * v6 - 16);
      std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>((uint64_t **)(v1 + 768), v8, v8);
      int v9 = *(_DWORD *)(v1 + 728);
      LODWORD(v6) = v9 - 1;
      *(_DWORD *)(v1 + 728) = v9 - 1;
    }
    while (v9 != 1);
    uint64_t v4 = (uint64_t **)(v1 + 768);
  }
  std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(v4, &v12, &v12);
  return 0;
}

uint64_t llvm::SmallSet<llvm::StringRef,2u,std::less<llvm::StringRef>>::vfind(uint64_t a1, unsigned int a2, void *__s2, size_t __n)
{
  uint64_t v4 = a1 + 16 * a2;
  if (a2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = 16 * a2;
    while (*(void *)(v7 + 8) != __n || __n && memcmp(*(const void **)v7, __s2, __n))
    {
      v7 += 16;
      v8 -= 16;
      if (!v8) {
        return v4;
      }
    }
    return v7;
  }
  return v4;
}

__n128 llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long &>(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v13 = a2;
  uint64_t v14 = a3;
  int v15 = a4;
  char v16 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v24 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  char v20 = 0;
  int v25 = 1;
  char v26 = 0;
  unint64_t v5 = llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v13);
  unint64_t v6 = *(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7);
  long long v8 = *(_OWORD *)(v5 + 32);
  long long v7 = *(_OWORD *)(v5 + 48);
  long long v9 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)unint64_t v6 = *(_OWORD *)v5;
  *(_OWORD *)(v6 + 16) = v9;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v7;
  __n128 result = *(__n128 *)(v5 + 112);
  long long v11 = *(_OWORD *)(v5 + 64);
  long long v12 = *(_OWORD *)(v5 + 80);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(v5 + 96);
  *(__n128 *)(v6 + 112) = result;
  *(_OWORD *)(v6 + 64) = v11;
  *(_OWORD *)(v6 + 80) = v12;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

__n128 llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int,unsigned int>(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5)
{
  int v14 = a2;
  uint64_t v15 = a3;
  int v16 = a4;
  char v17 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v25 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = a5;
  char v21 = 0;
  int v26 = 1;
  char v27 = 0;
  unint64_t v6 = llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v14);
  unint64_t v7 = *(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7);
  long long v9 = *(_OWORD *)(v6 + 32);
  long long v8 = *(_OWORD *)(v6 + 48);
  long long v10 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v6;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)(v7 + 48) = v8;
  __n128 result = *(__n128 *)(v6 + 112);
  long long v12 = *(_OWORD *)(v6 + 64);
  long long v13 = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(v7 + 96) = *(_OWORD *)(v6 + 96);
  *(__n128 *)(v7 + 112) = result;
  *(_OWORD *)(v7 + 64) = v12;
  *(_OWORD *)(v7 + 80) = v13;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,int>(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v15 = a2;
  uint64_t v16 = a3;
  int v17 = a4;
  char v18 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  char v22 = 0;
  int v27 = 1;
  char v28 = 0;
  unint64_t v5 = (_OWORD *)llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v15);
  unint64_t v6 = (_OWORD *)(*(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  long long v8 = v5[2];
  long long v7 = v5[3];
  long long v9 = v5[1];
  _OWORD *v6 = *v5;
  v6[1] = v9;
  v6[2] = v8;
  v6[3] = v7;
  long long v10 = v5[7];
  long long v11 = v5[4];
  long long v12 = v5[5];
  v6[6] = v5[6];
  v6[7] = v10;
  void v6[4] = v11;
  v6[5] = v12;
  uint64_t v13 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v13;
  return *(void *)a1 + (v13 << 7) - 128;
}

void llvm::MCAsmParser::printPendingErrors(llvm::MCAsmParser *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = v3 + 112 * v2;
    uint64_t v5 = v3 + 8;
    do
    {
      uint64_t v7 = v5 - 8;
      uint64_t v6 = *(void *)(v5 - 8);
      uint64_t v16 = v6;
      int v17 = v19;
      long long v18 = xmmword_261E8ACE0;
      uint64_t v8 = *(void *)(v5 + 8);
      if (v8)
      {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v17, v5);
        uint64_t v6 = v16;
        long long v9 = v17;
        uint64_t v8 = v18;
      }
      else
      {
        long long v9 = v19;
      }
      long long v20 = *(_OWORD *)(v5 + 88);
      __int16 v15 = 261;
      v14[0] = v9;
      v14[1] = v8;
      (*(void (**)(llvm::MCAsmParser *, uint64_t, void *, void, void))(*(void *)this + 176))(this, v6, v14, v20, *((void *)&v20 + 1));
      if (v17 != v19) {
        free(v17);
      }
      v5 += 112;
    }
    while (v7 + 112 != v4);
    uint64_t v10 = *((unsigned int *)this + 6);
    if (v10)
    {
      uint64_t v11 = *((void *)this + 2);
      uint64_t v12 = 112 * v10;
      do
      {
        uint64_t v13 = *(void **)(v11 + v12 - 104);
        if ((void *)(v11 + v12 - 80) != v13) {
          free(v13);
        }
        v12 -= 112;
      }
      while (v12);
    }
  }
  *((_DWORD *)this + 6) = 0;
}

BOOL llvm::SetVector<llvm::MCSection *,std::vector<llvm::MCSection *>,llvm::DenseSet<llvm::MCSection *,llvm::DenseMapInfo<llvm::MCSection *,void>>>::insert(void *a1, void *a2)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)a1, a2, (uint64_t)&v20);
  int v4 = v21;
  if (v21)
  {
    unint64_t v5 = a1[5];
    uint64_t v6 = (void *)a1[4];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = a1[3];
      uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v5 - v8;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 5), v12);
      }
      else {
        uint64_t v13 = 0;
      }
      int v14 = &v13[8 * v9];
      __int16 v15 = &v13[8 * v12];
      *(void *)int v14 = *a2;
      uint64_t v7 = v14 + 8;
      int v17 = (char *)a1[3];
      uint64_t v16 = (char *)a1[4];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        uint64_t v16 = (char *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      void *v6 = *a2;
      uint64_t v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

char **llvm::SmallVector<std::unique_ptr<llvm::MCParsedAsmOperand>,8u>::~SmallVector(char **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    unint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v4 -= 8;
    }
    while (v4);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmRewrite>::emplace_back<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>(uint64_t a1, int a2, uint64_t a3, int a4, int a5, char a6)
{
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12)) {
    return llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>(a1, a2, a3, a4, a5, a6);
  }
  uint64_t v7 = *(void *)a1 + (v6 << 7);
  *(_DWORD *)uint64_t v7 = a2;
  *(void *)(v7 + 8) = a3;
  *(_DWORD *)(v7 + 16) = a4;
  *(unsigned char *)(v7 + 20) = 0;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 32) = 0;
  *(void *)(v7 + 40) = 0;
  *(void *)(v7 + 24) = a5;
  *(unsigned char *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 112) = 1;
  *(unsigned char *)(v7 + 120) = a6;
  ++*(_DWORD *)(a1 + 8);
  return a1;
}

uint64_t rewritesSort(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2 = *((void *)a1 + 1);
  unint64_t v3 = *((void *)a2 + 1);
  if (v2 < v3) {
    return 0xFFFFFFFFLL;
  }
  if (v3 < v2) {
    return 1;
  }
  if (llvm::AsmRewritePrecedence[*a1] > llvm::AsmRewritePrecedence[*a2]) {
    return 0xFFFFFFFFLL;
  }
  return 1;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>::growAndEmplaceBack<llvm::AsmRewriteKind,llvm::SMLoc &,unsigned long,int,BOOL &>(uint64_t a1, int a2, uint64_t a3, int a4, int a5, char a6)
{
  int v17 = a2;
  uint64_t v18 = a3;
  int v19 = a4;
  char v20 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v28 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = a5;
  char v24 = 0;
  int v29 = 1;
  char v30 = a6;
  uint64_t v7 = (_OWORD *)llvm::SmallVectorTemplateCommon<llvm::AsmRewrite,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::AsmRewrite,true>>(a1, (unint64_t)&v17);
  uint64_t v8 = (_OWORD *)(*(void *)a1 + ((unint64_t)*(unsigned int *)(a1 + 8) << 7));
  long long v10 = v7[2];
  long long v9 = v7[3];
  long long v11 = v7[1];
  _OWORD *v8 = *v7;
  v8[1] = v11;
  v8[2] = v10;
  v8[3] = v9;
  long long v12 = v7[7];
  long long v13 = v7[4];
  long long v14 = v7[5];
  v8[6] = v7[6];
  v8[7] = v12;
  void v8[4] = v13;
  v8[5] = v14;
  uint64_t v15 = (*(_DWORD *)(a1 + 8) + 1);
  *(_DWORD *)(a1 + 8) = v15;
  return *(void *)a1 + (v15 << 7) - 128;
}

uint64_t llvm::array_pod_sort_comparator<unsigned int>(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

void anonymous namespace'::AsmParser::printMacroInstantiations(_anonymous_namespace_::AsmParser *this)
{
  uint64_t v2 = *((void *)this + 43);
  uint64_t v1 = *((void *)this + 44);
  while (v1 != v2)
  {
    uint64_t v4 = *(char ***)(v1 - 8);
    v1 -= 8;
    unint64_t v5 = *v4;
    long long v9 = "while in macro instantiation";
    __int16 v10 = 259;
    v11[0] = 0;
    v11[1] = 0;
    uint64_t v6 = (uint64_t *)*((void *)this + 30);
    uint64_t v7 = (llvm::raw_ostream *)llvm::errs(this);
    llvm::SourceMgr::PrintMessage(v6, v7, v5, 3, (llvm::Twine *)&v9, v11, 1, v8, 0, 0, 1u);
  }
}

uint64_t anonymous namespace'::AsmParser::parseBinOpRHS(uint64_t a1, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 136);
  int v19 = 0;
  if (BinOpPrecedence < a2) {
    return 0;
  }
  unsigned int v10 = BinOpPrecedence;
  while (1)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 184))(a1);
    uint64_t v18 = 0;
    {
      break;
    }
    int v11 = v19;
    unint64_t v12 = *a3;
    uint64_t v13 = v18;
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    unint64_t v15 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v14 + 184, 32, 3);
    *(unsigned char *)unint64_t v15 = 0;
    *(_DWORD *)(v15 + 1) = v11 & 0xFFFFFF | (*(unsigned __int8 *)(v15 + 4) << 24);
    *(void *)(v15 + 8) = v8;
    *(void *)(v15 + 16) = v12;
    *(void *)(v15 + 24) = v13;
    *a3 = v15;
    int v19 = 0;
    if (v10 < a2) {
      return 0;
    }
  }
  return 1;
}

unint64_t anonymous namespace'::AsmParser::applyModifierToExpr(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), a2, a3, *(void *)(a1 + 216));
  if (!result)
  {
    switch(*(unsigned char *)a2)
    {
      case 1:
      case 4:
        return result;
      case 2:
        if (*(_WORD *)(a2 + 1))
        {
          uint64_t v12 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
          if (*(_DWORD *)v12 == 2)
          {
            uint64_t v13 = *(void *)(v12 + 8);
            unint64_t v14 = *(void *)(v12 + 16);
          }
          else
          {
            uint64_t v13 = *(void *)(v12 + 8);
            unint64_t v21 = *(void *)(v12 + 16);
            unint64_t v22 = v21 - 1;
            unint64_t v23 = v21 != 0;
            if (v21) {
              ++v13;
            }
            if (v22 < v23) {
              unint64_t v22 = 1;
            }
            if (v22 >= v21) {
              unint64_t v22 = v21;
            }
            unint64_t v14 = v22 - v23;
          }
          __int16 v26 = 1283;
          v25[0] = "invalid variant on expression '";
          v25[2] = v13;
          v25[3] = v14;
          v27[0] = v25;
          v27[2] = "' (already modified)";
          __int16 v28 = 770;
          uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
          llvm::MCAsmParser::Error(a1, *(void *)(v24 + 96), (llvm::Twine *)v27, 0, 0);
          unint64_t result = a2;
        }
        else
        {
          uint64_t v18 = *(void *)(a2 + 16);
          uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
          unint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v19 + 184, 24, 3);
          int v20 = a3 | (*(unsigned __int8 *)(*(void *)(v19 + 144) + 18) << 16);
          *(unsigned char *)unint64_t result = 2;
          *(_DWORD *)(result + 1) = v20 | (*(unsigned __int8 *)(result + 4) << 24);
          *(void *)(result + 8) = 0;
          *(void *)(result + 16) = v18;
        }
        break;
      case 3:
        if (result)
        {
          unint64_t v15 = result;
          int v16 = *(_DWORD *)(a2 + 1);
          uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
          unint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v17 + 184, 24, 3);
          *(unsigned char *)unint64_t result = 3;
          *(_DWORD *)(result + 1) = v16 & 0xFFFFFF | (*(unsigned __int8 *)(result + 4) << 24);
          *(void *)(result + 8) = 0;
          *(void *)(result + 16) = v15;
        }
        break;
      default:
        if (v7 | v8)
        {
          uint64_t v9 = v8;
          if (!v7) {
            uint64_t v7 = *(void *)(a2 + 16);
          }
          if (!v8) {
            uint64_t v9 = *(void *)(a2 + 24);
          }
          int v10 = *(_DWORD *)(a2 + 1);
          uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
          unint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v11 + 184, 32, 3);
          *(unsigned char *)unint64_t result = 0;
          *(_DWORD *)(result + 1) = v10 & 0xFFFFFF | (*(unsigned __int8 *)(result + 4) << 24);
          *(void *)(result + 8) = 0;
          *(void *)(result + 16) = v7;
          *(void *)(result + 24) = v9;
        }
        else
        {
          unint64_t result = 0;
        }
        break;
    }
  }
  return result;
}

uint64_t anonymous namespace'::AsmParser::getBinOpPrecedence(uint64_t a1, char a2, int a3, int *a4)
{
  int v4 = *(unsigned __int8 *)(a1 + 488);
  if (a2)
  {
    uint64_t result = 0;
    uint64_t v6 = 1;
    int v7 = 6;
    switch(a3)
    {
      case 12:
        int v7 = 0;
        uint64_t v6 = 5;
        goto LABEL_44;
      case 13:
        uint64_t v6 = 5;
        goto LABEL_25;
      case 15:
        goto LABEL_6;
      case 23:
        goto LABEL_7;
      case 28:
        goto LABEL_8;
      case 29:
        uint64_t v6 = 2;
        goto LABEL_27;
      case 30:
        goto LABEL_29;
      case 31:
        uint64_t v6 = 2;
        goto LABEL_31;
      case 32:
        uint64_t v6 = 2;
        goto LABEL_33;
      case 33:
        goto LABEL_44;
      case 35:
      case 41:
        goto LABEL_5;
      case 36:
        goto LABEL_9;
      case 38:
        goto LABEL_10;
      case 39:
        goto LABEL_11;
      case 40:
        uint64_t v6 = 4;
        goto LABEL_38;
      case 42:
        goto LABEL_12;
      case 43:
        goto LABEL_13;
      case 44:
        if (v4) {
          int v7 = 17;
        }
        else {
          int v7 = 16;
        }
        goto LABEL_23;
      default:
        return result;
    }
  }
  else
  {
    uint64_t result = 0;
    uint64_t v6 = 2;
    int v7 = 6;
    switch(a3)
    {
      case 12:
        int v7 = 0;
LABEL_23:
        uint64_t v6 = 4;
        goto LABEL_44;
      case 13:
        uint64_t v6 = 4;
LABEL_25:
        int v7 = 18;
        goto LABEL_44;
      case 15:
LABEL_6:
        uint64_t v6 = 6;
        int v7 = 2;
        goto LABEL_44;
      case 23:
LABEL_7:
        uint64_t v6 = 6;
        int v7 = 11;
        goto LABEL_44;
      case 28:
LABEL_8:
        int v7 = 3;
        uint64_t v6 = 3;
        goto LABEL_44;
      case 29:
        uint64_t v6 = 5;
LABEL_27:
        int v7 = 13;
        goto LABEL_44;
      case 30:
        uint64_t v6 = 1;
LABEL_29:
        int v7 = 7;
        goto LABEL_44;
      case 31:
        uint64_t v6 = 5;
LABEL_31:
        int v7 = 19;
        goto LABEL_44;
      case 32:
        uint64_t v6 = 5;
LABEL_33:
        int v7 = 1;
        goto LABEL_44;
      case 33:
        goto LABEL_44;
      case 34:
        if (*(void *)(a1 + 56) == 1 && **(unsigned char **)(a1 + 48) == 64)
        {
          uint64_t result = 0;
        }
        else
        {
          uint64_t v6 = 5;
          int v7 = 14;
LABEL_44:
          *a4 = v7;
          uint64_t result = v6;
        }
        break;
      case 35:
      case 41:
LABEL_5:
        uint64_t v6 = 3;
        int v7 = 12;
        goto LABEL_44;
      case 36:
LABEL_9:
        uint64_t v6 = 6;
        int v7 = 10;
        goto LABEL_44;
      case 38:
LABEL_10:
        uint64_t v6 = 3;
        int v7 = 8;
        goto LABEL_44;
      case 39:
LABEL_11:
        uint64_t v6 = 3;
        int v7 = 9;
        goto LABEL_44;
      case 40:
        uint64_t v6 = 6;
LABEL_38:
        int v7 = 15;
        goto LABEL_44;
      case 42:
LABEL_12:
        uint64_t v6 = 3;
        int v7 = 4;
        goto LABEL_44;
      case 43:
LABEL_13:
        uint64_t v6 = 3;
        int v7 = 5;
        goto LABEL_44;
      case 44:
        if (v4) {
          int v7 = 17;
        }
        else {
          int v7 = 16;
        }
        uint64_t v6 = 6;
        goto LABEL_44;
      default:
        return result;
    }
  }
  return result;
}

__n128 llvm::SmallVectorTemplateBase<std::tuple<llvm::SMLoc,anonymous namespace'::AsmParser::CppHashInfoTy,llvm::MCSymbol *>,true>::push_back(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v10 = v4 + 1;
    unint64_t v11 = v5 + 56 * v4;
    if (v5 <= a2 && v11 > a2)
    {
      unint64_t v13 = a2 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 56);
      unint64_t v5 = *(void *)a1;
      unint64_t v2 = *(void *)a1 + v13;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10, 56);
      unint64_t v5 = *(void *)a1;
    }
  }
  unint64_t v6 = v5 + 56 * *(unsigned int *)(a1 + 8);
  __n128 result = *(__n128 *)v2;
  long long v8 = *(_OWORD *)(v2 + 16);
  long long v9 = *(_OWORD *)(v2 + 32);
  *(void *)(v6 + 48) = *(void *)(v2 + 48);
  *(_OWORD *)(v6 + 16) = v8;
  *(_OWORD *)(v6 + 32) = v9;
  *(__n128 *)unint64_t v6 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL anonymous namespace'::AsmParser::parseParenExpr(llvm::MCAsmParser *a1, uint64_t a2, void *a3)
{
  v6[0] = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, void *))(*(void *)a1 + 232))(a1, a2, v6)) {
    return 1;
  }
  *a3 = *(void *)(*((void *)a1 + 6) + 8) + *(void *)(*((void *)a1 + 6) + 16);
  v6[0] = "expected ')'";
  __int16 v7 = 259;
  return llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)v6);
}

BOOL anonymous namespace'::AsmParser::parseBracketExpr(llvm::MCAsmParser *a1, uint64_t a2, void *a3)
{
  v7[0] = 0;
  if ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, void *))(*(void *)a1 + 232))(a1, a2, v7)) {
    return 1;
  }
  uint64_t v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1);
  *a3 = *(void *)(*(void *)(v6 + 8) + 8) + *(void *)(*(void *)(v6 + 8) + 16);
  v7[0] = "expected ']' in brackets expression";
  __int16 v8 = 259;
  return llvm::MCAsmParser::parseToken(a1, 20, (llvm::Twine *)v7);
}

llvm::MCAsmLexer *anonymous namespace'::HLASMAsmParser::lexLeadingSpaces(_anonymous_namespace_::HLASMAsmParser *this)
{
  for (__n128 result = (llvm::MCAsmLexer *)*((void *)this + 106);
        **((_DWORD **)result + 1) == 11;
        __n128 result = (llvm::MCAsmLexer *)*((void *)this + 106))
  {
    llvm::MCAsmLexer::Lex(result);
  }
  return result;
}

void anonymous namespace'::COFFAsmParser::~COFFAsmParser(_anonymous_namespace_::COFFAsmParser *this)
{
}

uint64_t anonymous namespace'::COFFAsmParser::Initialize(_anonymous_namespace_::COFFAsmParser *this, llvm::MCAsmParser *a2)
{
  *((void *)this + 1) = a2;
  unint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 16);
  return v3();
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSectionDirectiveText>(uint64_t a1)
{
}

BOOL anonymous namespace'::COFFAsmParser::ParseSectionSwitch(uint64_t a1, const void *a2, std::string::size_type a3, int a4, int a5, std::string::size_type a6, std::string::size_type a7, unsigned int a8)
{
  int v16 = **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  if (v16 == 9)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    int v20 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    unint64_t COFFSection = llvm::MCContext::getCOFFSection(v20, a2, a3, a4, a5, a6, a7, a8, -1, 0);
    (*(void (**)(uint64_t, unint64_t, void))(*(void *)v19 + 168))(v19, COFFSection, 0);
  }
  else
  {
    unint64_t v23 = "unexpected token in section switching directive";
    __int16 v24 = 259;
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
    llvm::MCAsmParser::Error(v17, *(void *)(v18 + 96), (llvm::Twine *)&v23, 0, 0);
  }
  return v16 != 9;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSectionDirectiveData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSectionDirectiveBSS>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveSection>(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 2
    && **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 3)
  {
LABEL_72:
    char v34 = "expected identifier in directive";
LABEL_93:
    unint64_t v45 = v34;
    __int16 v46 = 259;
    uint64_t v40 = *(void *)(a1 + 8);
    uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 40))(v40);
    llvm::MCAsmParser::Error(v40, *(void *)(v41 + 96), (llvm::Twine *)&v45, 0, 0);
    return 1;
  }
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    unint64_t v3 = *(unsigned __int16 **)(v2 + 8);
    std::string::size_type v4 = *(void *)(v2 + 16);
  }
  else
  {
    uint64_t v7 = v2 + 8;
    unint64_t v5 = *(unsigned __int16 **)(v2 + 8);
    unint64_t v6 = *(void *)(v7 + 8);
    unint64_t v8 = v6 != 0;
    if (v6) {
      unint64_t v3 = (unsigned __int16 *)((char *)v5 + 1);
    }
    else {
      unint64_t v3 = v5;
    }
    if (v6 - 1 < v8) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = v6 - 1;
    }
    if (v9 >= v6) {
      unint64_t v9 = v6;
    }
    std::string::size_type v4 = v9 - v8;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
  {
    unsigned int v33 = -1073741760;
    goto LABEL_67;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 3)
  {
    char v34 = "expected string in directive";
    goto LABEL_93;
  }
  uint64_t v15 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  uint64_t v17 = *(void *)(v15 + 8);
  unint64_t v16 = *(void *)(v15 + 16);
  unint64_t v18 = v16 - 1;
  unint64_t v19 = v16 != 0;
  if (v16 - 1 < v19) {
    unint64_t v18 = 1;
  }
  if (v18 >= v16) {
    unint64_t v20 = v16;
  }
  else {
    unint64_t v20 = v18;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  unint64_t v21 = v20 - v19;
  if (v20 == v19)
  {
LABEL_51:
    unsigned int v23 = 8;
    goto LABEL_52;
  }
  char v22 = 0;
  unsigned int v23 = 0;
  __int16 v24 = (unsigned char *)(v17 + v19);
  uint64_t v10 = 4294967143;
  uint64_t v11 = 24;
  uint64_t v12 = 28;
  uint64_t v13 = 2;
  uint64_t v14 = 6;
  while (2)
  {
    switch(*v24)
    {
      case 'a':
        goto LABEL_49;
      case 'b':
        if ((v23 & 8) != 0) {
          goto LABEL_95;
        }
        unsigned int v23 = v23 & 0xFFFFFFFA | 1;
        goto LABEL_49;
      case 'c':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 't':
      case 'u':
      case 'v':
        goto LABEL_96;
      case 'd':
        if (v23)
        {
LABEL_95:
          char v34 = "conflicting section flags 'b' and 'd'.";
          goto LABEL_93;
        }
        unsigned int v25 = v23 & 0xFFFFFF77;
        if ((v23 & 0x20) != 0) {
          int v26 = 8;
        }
        else {
          int v26 = 12;
        }
LABEL_41:
        unsigned int v23 = v26 | v25;
LABEL_49:
        ++v24;
        if (--v21) {
          continue;
        }
        if (!v23) {
          goto LABEL_51;
        }
LABEL_52:
        if ((v23 & 5) == 1) {
          int v29 = ((int)(v23 << 30) >> 31) & 0x20000020 | (((v23 >> 3) & 1) << 6) | 0x80;
        }
        else {
          int v29 = ((int)(v23 << 30) >> 31) & 0x20000020 | (((v23 >> 3) & 1) << 6);
        }
        unsigned int v30 = v29 & 0xFFFFF7FF | (((v23 >> 5) & 1) << 11);
        if ((v23 & 0x100) != 0 || v4 >= 6 && (*(_DWORD *)v3 == 1650811950 ? (BOOL v31 = v3[2] == 26485) : (BOOL v31 = 0), v31)) {
          v30 |= 0x2000000u;
        }
        BOOL v31 = (v23 & 0x2D0) == 192;
        unsigned int v32 = v30 | ((v23 << 24) & 0xD0000000 | v23 & 0x200) ^ 0xC0000000;
        if (v31) {
          unsigned int v33 = v30;
        }
        else {
          unsigned int v33 = v32;
        }
LABEL_67:
        unsigned __int8 v44 = 0;
        std::string::size_type v42 = 0;
        std::string::size_type v43 = 0;
        if (**(_DWORD **)((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v10, v11, v12, v13, v14)+ 8) != 25)goto LABEL_77; {
        unsigned __int8 v44 = 2;
        }
        (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
        if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 2)
        {
          char v34 = "expected comdat type such as 'discard' or 'largest' after protection bits";
          goto LABEL_93;
        }
          return 1;
        if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
        {
          char v34 = "expected comma in directive";
          goto LABEL_93;
        }
        (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
        if ((*(unsigned int (**)(void, std::string::size_type *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v42))
        {
          goto LABEL_72;
        }
        v33 |= 0x1000u;
LABEL_77:
        if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 9)
        {
          char v34 = "unexpected token in directive";
          goto LABEL_93;
        }
        if (v33 >> 30 == 1) {
          int v35 = 4;
        }
        else {
          int v35 = 19;
        }
        if ((v33 & 0x20000000) != 0) {
          int v36 = 2;
        }
        else {
          int v36 = v35;
        }
        if ((v36 & 0xFFFFFFFE) == 2)
        {
          int v37 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8)) + 48);
          if (v37 == 35 || v37 == 1) {
            v33 |= 0x20000u;
          }
        }
        return 0;
      case 'i':
        v23 |= 0x200u;
        goto LABEL_49;
      case 'n':
        unsigned int v23 = v23 & 0xFFFFFFDB | 0x20;
        goto LABEL_49;
      case 'r':
        char v22 = 0;
        if ((v23 & 2) != 0) {
          int v27 = 128;
        }
        else {
          int v27 = 136;
        }
        v23 |= (v27 | (v23 >> 3) & 4) ^ 4;
        goto LABEL_49;
      case 's':
        unsigned int v25 = v23 & 0xFFFFFF67;
        if ((v23 & 0x20) != 0) {
          int v26 = 24;
        }
        else {
          int v26 = 28;
        }
        goto LABEL_41;
      case 'w':
        v23 &= ~0x80u;
        char v22 = 1;
        goto LABEL_49;
      case 'x':
        if ((v23 & 0x20) != 0) {
          int v28 = 2;
        }
        else {
          int v28 = 6;
        }
        v23 |= v28;
        if ((v22 & 1) == 0) {
          v23 |= 0x80u;
        }
        goto LABEL_49;
      case 'y':
        v23 |= 0xC0u;
        goto LABEL_49;
      default:
        if (*v24 != 68)
        {
LABEL_96:
          char v34 = "unknown flag";
          goto LABEL_93;
        }
        v23 |= 0x100u;
        goto LABEL_49;
    }
  }
}

uint64_t anonymous namespace'::COFFAsmParser::parseCOMDATType(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  if (*(_DWORD *)v4 == 2)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    unint64_t v6 = *(void *)(v4 + 16);
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 8);
    unint64_t v7 = *(void *)(v4 + 16);
    unint64_t v8 = v7 - 1;
    unint64_t v9 = v7 != 0;
    if (v7) {
      ++v5;
    }
    if (v8 < v9) {
      unint64_t v8 = 1;
    }
    if (v8 >= v7) {
      unint64_t v8 = v7;
    }
    unint64_t v6 = v8 - v9;
  }
  switch(v6)
  {
    case 6uLL:
      if (*(_DWORD *)v5 != 1702323566 || *(_WORD *)(v5 + 4) != 29811) {
        goto LABEL_45;
      }
      char v11 = 7;
      goto LABEL_48;
    case 7uLL:
      if (*(_DWORD *)v5 == 1668508004 && *(_DWORD *)(v5 + 3) == 1685217635)
      {
        char v11 = 2;
      }
      else
      {
        if (*(_DWORD *)v5 != 1735549292 || *(_DWORD *)(v5 + 3) != 1953719655)
        {
LABEL_45:
          *a2 = 0;
          __int16 v21 = 1283;
          v20[0] = "unrecognized COMDAT type '";
          v20[2] = v5;
          v20[3] = v6;
          v22[0] = v20;
          v22[2] = "'";
          __int16 v23 = 770;
          uint64_t v17 = *(void *)(a1 + 8);
          uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
          llvm::MCAsmParser::Error(v17, *(void *)(v18 + 96), (llvm::Twine *)v22, 0, 0);
          return 1;
        }
        char v11 = 6;
      }
LABEL_48:
      *a2 = v11;
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      return 0;
    case 8uLL:
      if (*(void *)v5 != 0x796C6E6F5F656E6FLL) {
        goto LABEL_45;
      }
      char v11 = 1;
      goto LABEL_48;
    case 9uLL:
      if (*(void *)v5 != 0x7A69735F656D6173 || *(unsigned char *)(v5 + 8) != 101) {
        goto LABEL_45;
      }
      char v11 = 3;
      goto LABEL_48;
    case 0xBuLL:
      if (*(void *)v5 != 0x746169636F737361 || *(void *)(v5 + 3) != 0x657669746169636FLL) {
        goto LABEL_45;
      }
      char v11 = 5;
      goto LABEL_48;
    case 0xDuLL:
      if (*(void *)v5 != 0x6E6F635F656D6173 || *(void *)(v5 + 5) != 0x73746E65746E6F63) {
        goto LABEL_45;
      }
      char v11 = 4;
      goto LABEL_48;
    default:
      goto LABEL_45;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveDef>(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10);
  if (v2)
  {
    v8[0] = "expected identifier in directive";
    __int16 v9 = 259;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(void *)(v4 + 96), (llvm::Twine *)v8, 0, 0);
  }
  else
  {
    uint64_t v5 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v9 = 261;
    v8[0] = v10;
    v8[1] = v11;
    llvm::MCContext::getOrCreateSymbol(v5, (const llvm::Twine *)v8);
    uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v6 + 312))();
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  }
  return v2;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveScl>(uint64_t a1)
{
  uint64_t v8 = 0;
  if (((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), &v8) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v2 + 320))();
      return 0;
    }
    uint64_t v6 = "unexpected token in directive";
    __int16 v7 = 259;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(void *)(v5 + 96), (llvm::Twine *)&v6, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveType>(uint64_t a1)
{
  uint64_t v8 = 0;
  if (((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), &v8) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v2 + 328))();
      return 0;
    }
    uint64_t v6 = "unexpected token in directive";
    __int16 v7 = 259;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(void *)(v5 + 96), (llvm::Twine *)&v6, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveEndef>(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(void))(v2 + 336))();
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveSecRel32>(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10))
  {
    uint64_t v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 12)
    {
      (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
      if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))()) {
        return 1;
      }
    }
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      uint64_t v5 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
      __int16 v9 = 261;
      v8[0] = v10;
      v8[1] = v11;
      llvm::MCContext::getOrCreateSymbol(v5, (const llvm::Twine *)v8);
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v6 + 368))();
      return 0;
    }
    uint64_t v2 = "unexpected token in directive";
  }
  v8[0] = v2;
  __int16 v9 = 259;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
  llvm::MCAsmParser::Error(v3, *(void *)(v4 + 96), (llvm::Twine *)v8, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveSymIdx>(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10))
  {
    uint64_t v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
      __int16 v9 = 261;
      v8[0] = v10;
      v8[1] = v11;
      llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v8);
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v4 + 352))();
      return 0;
    }
    uint64_t v2 = "unexpected token in directive";
  }
  v8[0] = v2;
  __int16 v9 = 259;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v8, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveSafeSEH>(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10))
  {
    uint64_t v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
      __int16 v9 = 261;
      v8[0] = v10;
      v8[1] = v11;
      llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v8);
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v4 + 344))();
      return 0;
    }
    uint64_t v2 = "unexpected token in directive";
  }
  v8[0] = v2;
  __int16 v9 = 259;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v8, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveSecIdx>(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10))
  {
    uint64_t v2 = "expected identifier in directive";
  }
  else
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
      __int16 v9 = 261;
      v8[0] = v10;
      v8[1] = v11;
      llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v8);
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v4 + 360))();
      return 0;
    }
    uint64_t v2 = "unexpected token in directive";
  }
  v8[0] = v2;
  __int16 v9 = 259;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v8, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveLinkOnce>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v19 = 2;
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 2
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    uint64_t v7 = *(unsigned int *)(v6 + 152);
    if (v7) {
      uint64_t v8 = *(void *)(*(void *)(v6 + 144) + 32 * v7 - 32);
    }
    else {
      uint64_t v8 = 0;
    }
    if (v19 == 5)
    {
      v17[0] = "cannot make section associative with .linkonce";
      __int16 v9 = 259;
LABEL_12:
      __int16 v18 = v9;
      return llvm::MCAsmParser::Error(*(void *)(a1 + 8), a4, (llvm::Twine *)v17, 0, 0);
    }
    int v10 = *(_DWORD *)(v8 + 224);
    if ((v10 & 0x1000) != 0)
    {
      uint64_t v14 = "section '";
      long long v15 = *(_OWORD *)(v8 + 200);
      __int16 v16 = 1283;
      v17[0] = &v14;
      v17[2] = "' is already linkonce";
      __int16 v9 = 770;
      goto LABEL_12;
    }
    *(_DWORD *)(v8 + 240) = v19;
    *(_DWORD *)(v8 + 224) = v10 | 0x1000;
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9) {
      return 0;
    }
    v17[0] = "unexpected token in directive";
    __int16 v18 = 259;
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
    llvm::MCAsmParser::Error(v12, *(void *)(v13 + 96), (llvm::Twine *)v17, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveRVA>(uint64_t a1)
{
  uint64_t v5 = a1;
  if (result)
  {
    uint64_t v3 = " in directive";
    __int16 v4 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)&v3);
  }
  return result;
}

uint64_t llvm::function_ref<BOOL ()(void)>::callback_fn<anonymous namespace'::COFFAsmParser::ParseDirectiveRVA(llvm::StringRef,llvm::SMLoc)::$_0>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(v1 + 8) + 192))(*(void *)(v1 + 8), &v9))
  {
    v7[0] = "expected identifier in directive";
    __int16 v8 = 259;
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(void *)(v3 + 96), (llvm::Twine *)v7, 0, 0);
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(v1 + 8) + 40))(*(void *)(v1 + 8)) + 8) == 12
    || **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(v1 + 8) + 40))(*(void *)(v1 + 8)) + 8) == 13)
  {
    (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 40))(*(void *)(v1 + 8));
    if ((*(uint64_t (**)(void))(**(void **)(v1 + 8) + 256))()) {
      return 1;
    }
  }
  uint64_t v5 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(v1 + 8) + 48))(*(void *)(v1 + 8));
  __int16 v8 = 261;
  v7[0] = v9;
  v7[1] = v10;
  llvm::MCContext::getOrCreateSymbol(v5, (const llvm::Twine *)v7);
  uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)(v1 + 8) + 56))(*(void *)(v1 + 8));
  (*(void (**)(void))(v6 + 376))();
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseDirectiveSymbolAttribute>(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
  {
LABEL_2:
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    return 0;
  }
  uint64_t v10 = 0;
  for (uint64_t i = 0;
        ((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10) & 1) == 0;
        uint64_t i = 0)
  {
    uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v9 = 261;
    v8[0] = v10;
    v8[1] = i;
    llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v8);
    uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v4 + 296))();
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9) {
      goto LABEL_2;
    }
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
    {
      uint64_t v5 = "unexpected token in directive";
      goto LABEL_9;
    }
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v10 = 0;
  }
  uint64_t v5 = "expected identifier in directive";
LABEL_9:
  v8[0] = v5;
  __int16 v9 = 259;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v8, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSEHDirectiveStartProc>(uint64_t a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v9) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      uint64_t v2 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
      __int16 v8 = 261;
      v7[0] = v9;
      v7[1] = v10;
      llvm::MCContext::getOrCreateSymbol(v2, (const llvm::Twine *)v7);
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v3 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v3 + 1040))();
      return 0;
    }
    v7[0] = "unexpected token in directive";
    __int16 v8 = 259;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(void *)(v6 + 96), (llvm::Twine *)v7, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndProc>(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(void))(v2 + 1048))();
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndFuncletOrFunc>(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(void))(v2 + 1056))();
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSEHDirectiveStartChained>(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(void))(v2 + 1064))();
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndChained>(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(void))(v2 + 1072))();
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSEHDirectiveHandler>(_anonymous_namespace_::COFFAsmParser *a1)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if ((*(uint64_t (**)(void *, uint64_t *))(**((void **)a1 + 1) + 192))(*((void **)a1 + 1), &v11)) {
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(void *))(**((void **)a1 + 1) + 40))(*((void **)a1 + 1)) + 8) == 25)
  {
    (*(void (**)(void *))(**((void **)a1 + 1) + 184))(*((void **)a1 + 1));
    *(_WORD *)__int16 v8 = 0;
      return 1;
    if (**(_DWORD **)((*(uint64_t (**)(void *))(**((void **)a1 + 1) + 40))(*((void **)a1 + 1)) + 8) == 25)
    {
      (*(void (**)(void *))(**((void **)a1 + 1) + 184))(*((void **)a1 + 1));
        return 1;
    }
    if (**(_DWORD **)((*(uint64_t (**)(void *))(**((void **)a1 + 1) + 40))(*((void **)a1 + 1)) + 8) == 9)
    {
      uint64_t v2 = (llvm::MCContext *)(*(uint64_t (**)(void *))(**((void **)a1 + 1) + 48))(*((void **)a1 + 1));
      __int16 v10 = 261;
      v9[0] = v11;
      v9[1] = v12;
      llvm::MCContext::getOrCreateSymbol(v2, (const llvm::Twine *)v9);
      (*(void (**)(void *))(**((void **)a1 + 1) + 184))(*((void **)a1 + 1));
      uint64_t v3 = *(void *)(*(uint64_t (**)(void *))(**((void **)a1 + 1) + 56))(*((void **)a1 + 1));
      (*(void (**)(void))(v3 + 1136))();
      return 0;
    }
    uint64_t v5 = "unexpected token in directive";
  }
  else
  {
    uint64_t v5 = "you must specify one or both of @unwind or @except";
  }
  v9[0] = v5;
  __int16 v10 = 259;
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v9, 0, 0);
  return 1;
}

uint64_t anonymous namespace'::COFFAsmParser::ParseAtUnwindOrAtExcept(_anonymous_namespace_::COFFAsmParser *this, BOOL *a2, BOOL *a3)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8) == 45
    || **(_DWORD **)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8) == 36)
  {
    uint64_t v6 = *(void *)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 96);
    (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
    if ((*(unsigned int (**)(void, uint64_t *))(**((void **)this + 1) + 192))(*((void *)this + 1), &v14)|| v15 != 6)
    {
LABEL_13:
      v12[0] = "expected @unwind or @except";
      __int16 v13 = 259;
      return llvm::MCAsmParser::Error(*((void *)this + 1), v6, (llvm::Twine *)v12, 0, 0);
    }
    if (*(_DWORD *)v14 == 1769434741 && *(_WORD *)(v14 + 4) == 25710)
    {
      uint64_t result = 0;
      *a2 = 1;
    }
    else
    {
      if (*(_DWORD *)v14 != 1701017701 || *(_WORD *)(v14 + 4) != 29808) {
        goto LABEL_13;
      }
      uint64_t result = 0;
      *a3 = 1;
    }
  }
  else
  {
    v12[0] = "a handler attribute must begin with '@' or '%'";
    __int16 v13 = 259;
    uint64_t v10 = *((void *)this + 1);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(void *)(v11 + 96), (llvm::Twine *)v12, 0, 0);
    return 1;
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSEHDirectiveHandlerData>(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(void))(v2 + 1144))();
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSEHDirectiveAllocStack>(uint64_t a1)
{
  uint64_t v8 = 0;
  if (((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 256))(*(void *)(a1 + 8), &v8) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v2 + 1096))();
      return 0;
    }
    uint64_t v6 = "unexpected token in directive";
    __int16 v7 = 259;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(void *)(v5 + 96), (llvm::Twine *)&v6, 0, 0);
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::COFFAsmParser,&anonymous namespace'::COFFAsmParser::ParseSEHDirectiveEndProlog>(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(void))(v2 + 1128))();
  return 0;
}

void anonymous namespace'::GOFFAsmParser::~GOFFAsmParser(_anonymous_namespace_::GOFFAsmParser *this)
{
}

uint64_t anonymous namespace'::GOFFAsmParser::Initialize(uint64_t this, llvm::MCAsmParser *a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

void anonymous namespace'::DarwinAsmParser::~DarwinAsmParser(_anonymous_namespace_::DarwinAsmParser *this)
{
}

uint64_t anonymous namespace'::DarwinAsmParser::Initialize(_anonymous_namespace_::DarwinAsmParser *this, llvm::MCAsmParser *a2)
{
  *((void *)this + 1) = a2;
  *((void *)this + 3) = 0;
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveAltEntry>(uint64_t a1)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v11))
  {
    uint64_t v2 = "expected identifier in directive";
  }
  else
  {
    uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v10 = 261;
    v9[0] = v11;
    v9[1] = v12;
    unint64_t Symbol = (llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v9);
    if (llvm::MCSymbol::getFragment(Symbol, 1))
    {
      uint64_t v2 = ".alt_entry must preceed symbol definition";
    }
    else
    {
      uint64_t v5 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      if ((*(uint64_t (**)(void))(v5 + 296))())
      {
        (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
        return 0;
      }
      uint64_t v2 = "unable to emit symbol attribute";
    }
  }
  v9[0] = v2;
  __int16 v10 = 259;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
  llvm::MCAsmParser::Error(v7, *(void *)(v8 + 96), (llvm::Twine *)v9, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveDesc>(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10))
  {
    uint64_t v2 = "expected identifier in directive";
LABEL_8:
    v8[0] = v2;
    __int16 v9 = 259;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  __int16 v9 = 261;
  v8[0] = v10;
  v8[1] = v11;
  llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v8);
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
  {
LABEL_7:
    uint64_t v2 = "unexpected token in '.desc' directive";
    goto LABEL_8;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))() & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v4 + 304))();
      return 0;
    }
    goto LABEL_7;
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveIndirectSymbol>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  unsigned int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(v6 + 144) + 32 * *(unsigned int *)(v6 + 152) - 32) + 240);
  BOOL v8 = v7 > 0x14;
  int v9 = (1 << v7) & 0x1001C0;
  if (v8 || v9 == 0)
  {
    v19[0] = "indirect symbol not in a symbol pointer or stub section";
    __int16 v20 = 259;
    return llvm::MCAsmParser::Error(*(void *)(a1 + 8), a4, (llvm::Twine *)v19, 0, 0);
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v17))
  {
    uint64_t v11 = "expected identifier in .indirect_symbol directive";
LABEL_15:
    v19[0] = v11;
    __int16 v20 = 259;
    goto LABEL_16;
  }
  uint64_t v12 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  __int16 v20 = 261;
  v19[0] = v17;
  v19[1] = v18;
  if (*(unsigned char *)(llvm::MCContext::getOrCreateSymbol(v12, (const llvm::Twine *)v19) + 8))
  {
    uint64_t v11 = "non-local symbol required in directive";
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  if ((*(uint64_t (**)(void))(v13 + 296))())
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      return 0;
    }
    uint64_t v11 = "unexpected token in '.indirect_symbol' directive";
    goto LABEL_15;
  }
  __int16 v20 = 1283;
  v19[0] = "unable to emit indirect symbol attribute for: ";
  v19[2] = v17;
  v19[3] = v18;
LABEL_16:
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15);
  llvm::MCAsmParser::Error(v15, *(void *)(v16 + 96), (llvm::Twine *)v19, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveLsym>(uint64_t a1)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10))
  {
    uint64_t v2 = "expected identifier in directive";
LABEL_8:
    v8[0] = v2;
    __int16 v9 = 259;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(void *)(v5 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  __int16 v9 = 261;
  v8[0] = v10;
  v8[1] = v11;
  llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v8);
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
  {
LABEL_7:
    uint64_t v2 = "unexpected token in '.lsym' directive";
    goto LABEL_8;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v7 = 0;
  v8[0] = 0;
  if (((*(uint64_t (**)(void, uint64_t *, void *))(**(void **)(a1 + 8) + 232))(*(void *)(a1 + 8), &v7, v8) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v2 = "directive '.lsym' is unsupported";
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  return 1;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveSubsectionsViaSymbols>(uint64_t a1)
{
  int v2 = **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  if (v2 == 9)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 208))(v5, 1);
  }
  else
  {
    uint64_t v7 = "unexpected token in '.subsections_via_symbols' directive";
    __int16 v8 = 259;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(void *)(v4 + 96), (llvm::Twine *)&v7, 0, 0);
  }
  return v2 != 9;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveDumpOrLoad>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = a3 == 5 && *(_DWORD *)a2 == 1836409902 && *(unsigned char *)(a2 + 4) == 112;
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 3)
  {
    __int16 v9 = "expected string in '.dump' or '.load' directive";
LABEL_15:
    v13[0] = v9;
    __int16 v14 = 259;
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(void *)(v11 + 96), (llvm::Twine *)v13, 0, 0);
    return 1;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 9)
  {
    __int16 v9 = "unexpected token in '.dump' or '.load' directive";
    goto LABEL_15;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  if (v7) {
    __int16 v8 = "ignoring directive .dump for now";
  }
  else {
    __int16 v8 = "ignoring directive .load for now";
  }
  v13[0] = v8;
  __int16 v14 = 259;
  return (*(uint64_t (**)(void, uint64_t, void *, void, void))(**(void **)(a1 + 8) + 168))(*(void *)(a1 + 8), a4, v13, 0, 0);
}

uint64_t anonymous namespace'::DarwinAsmParser::parseDirectiveSection(uint64_t a1)
{
  int v2 = *(char **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 96);
  uint64_t v74 = 0;
  unint64_t v75 = 0;
  if ((*(unsigned int (**)(void, const void **))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v74))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier after '.section' directive";
    WORD4(v64) = 259;
    return llvm::MCAsmParser::Error(*(void *)(a1 + 8), (uint64_t)v2, (llvm::Twine *)&__p, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.section' directive";
    WORD4(v64) = 259;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(void *)(v8 + 96), (llvm::Twine *)&__p, 0, 0);
    return 1;
  }
  std::string::size_type v4 = v75;
  if (v75 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v5 = v74;
  if (v75 >= 0x17)
  {
    uint64_t v9 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v75 | 7) != 0x17) {
      uint64_t v9 = v75 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v4;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_12;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v75;
  p_dst = &__dst;
  if (v75) {
LABEL_12:
  }
    memmove(p_dst, v5, v4);
  p_dst->__r_.__value_.__s.__data_[v4] = 0;
  std::string::append(&__dst, ",");
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
  __int16 v14 = v12;
  unint64_t v15 = v13;
  LOBYTE(v16) = *((unsigned char *)&__dst.__r_.__value_.__s + 23);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v13) {
      goto LABEL_39;
    }
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    std::string::size_type v19 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    uint64_t v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    std::string::size_type v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else
  {
    if (!v13) {
      goto LABEL_39;
    }
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    uint64_t v18 = &__dst;
    std::string::size_type v19 = 22;
  }
  if (v18 <= (std::string *)v12 && (char *)&v18->__r_.__value_.__l.__data_ + size + 1 > v12)
  {
    std::string::__init_with_size[abi:nn180100]<char *,char *>(&__p, v12, &v12[v15], v15);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&__dst, (const std::string::value_type *)p_p, v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (v19 - size < v15)
    {
      std::string::__grow_by(&__dst, v19, size + v15 - v19, size, size, 0, 0);
      __dst.__r_.__value_.__l.__size_ = size;
      LOBYTE(v16) = *((unsigned char *)&__dst.__r_.__value_.__s + 23);
    }
    BOOL v21 = (v16 & 0x80u) != 0;
    char v22 = &__dst;
    if (v21) {
      char v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    __int16 v23 = (char *)v22 + size;
    unint64_t v24 = v15;
    do
    {
      char v25 = *v14++;
      *v23++ = v25;
      --v24;
    }
    while (v24);
    *__int16 v23 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      __dst.__r_.__value_.__l.__size_ = size + v15;
    }
    else {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = (size + v15) & 0x7F;
    }
  }
LABEL_39:
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v28 = &__dst;
    }
    else {
      int v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    uint64_t v71 = 0;
    unint64_t v72 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v68 = 0;
    char v67 = 0;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = __dst.__r_.__value_.__l.__size_;
    }
    llvm::MCSectionMachO::ParseSectionSpecifier((uint64_t)v28, v29, &v71, &v69, (int *)&v68, &v67, (_DWORD *)&v68 + 1, v58);
    if (v58[0])
    {
      uint64_t v66 = v58[0];
      v58[0] = 0;
      llvm::toString(&v66, &v62);
      WORD4(v64) = 260;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
      uint64_t v3 = llvm::MCAsmParser::Error(*(void *)(a1 + 8), (uint64_t)v2, (llvm::Twine *)&__p, 0, 0);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (v66) {
        (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
      }
      if (v58[0]) {
        (*(void (**)(uint64_t))(*(void *)v58[0] + 8))(v58[0]);
      }
      goto LABEL_98;
    }
    uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    uint64_t v33 = v32;
    if (*(char *)(v32 + 47) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v32 + 24), *(void *)(v32 + 32));
    }
    else {
      std::string __p = *(std::string *)(v32 + 24);
    }
    long long v64 = *(_OWORD *)(v33 + 48);
    uint64_t v65 = *(void *)(v33 + 64);
    if ((v64 & 0xFFFFFFFD) != 0x15)
    {
      uint64_t v34 = v69;
      uint64_t v35 = v70;
      if (v70 == 12)
      {
        if (*(void *)v69 != 0x5F74736E6F635F5FLL || *(_DWORD *)(v69 + 8) != 1818324835) {
          goto LABEL_90;
        }
        unint64_t v38 = "__const";
        uint64_t v40 = 7;
        goto LABEL_78;
      }
      if (v70 == 13)
      {
        if (*(void *)v69 == 0x6F63747865745F5FLL && *(void *)(v69 + 5) == 0x746E5F6C616F6374)
        {
          unint64_t v38 = "__text";
        }
        else
        {
          if (*(void *)v69 != 0x6F63617461645F5FLL || *(void *)(v69 + 5) != 0x746E5F6C616F6361) {
            goto LABEL_90;
          }
          unint64_t v38 = "__data";
        }
        uint64_t v40 = 6;
LABEL_78:
        if (v2 && (size_t v41 = strlen(v2)) != 0)
        {
          size_t v42 = v41;
          std::string::size_type v43 = memchr(v2, 44, v41);
          if (v43) {
            unint64_t v44 = v43 - v2 + 1;
          }
          else {
            unint64_t v44 = 0;
          }
          if (v42 > v44)
          {
            unint64_t v45 = memchr(&v2[v44], 44, v42 - v44);
            uint64_t v46 = v45 - v2;
            if (!v45) {
              uint64_t v46 = -1;
            }
            goto LABEL_89;
          }
        }
        else
        {
          unint64_t v44 = 0;
        }
        uint64_t v46 = -1;
LABEL_89:
        int v47 = &v2[v44];
        uint64_t v48 = *(void *)(a1 + 8);
        long long v49 = &v2[v46];
        __int16 v61 = 1283;
        v58[0] = (uint64_t)"section \"";
        uint64_t v59 = v34;
        uint64_t v60 = v35;
        v56[0] = (uint64_t)"\" is deprecated";
        __int16 v57 = 259;
        llvm::operator+(v58, v56, (uint64_t)&v62);
        (*(void (**)(uint64_t, char *, std::string *, char *, char *))(*(void *)v48 + 168))(v48, v2, &v62, v47, v49);
        uint64_t v50 = *(void *)(a1 + 8);
        __int16 v61 = 1283;
        v58[0] = (uint64_t)"change section name to \"";
        uint64_t v59 = (uint64_t)v38;
        uint64_t v60 = v40;
        v56[0] = (uint64_t)"\"";
        __int16 v57 = 259;
        llvm::operator+(v58, v56, (uint64_t)&v62);
        (*(void (**)(uint64_t, char *, std::string *, char *, char *))(*(void *)v50 + 160))(v50, v2, &v62, v47, v49);
      }
    }
LABEL_90:
    if (v72 == 6)
    {
      if (*(_DWORD *)v71 ^ 0x45545F5F | *(unsigned __int16 *)(v71 + 4) ^ 0x5458) {
        int v51 = 19;
      }
      else {
        int v51 = 2;
      }
    }
    else
    {
      int v51 = 19;
    }
    uint64_t v52 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    uint64_t v53 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    unint64_t MachOSection = llvm::MCContext::getMachOSection(v53, v71, v72, v69, v70, v68, SHIDWORD(v68), v51, 0);
    (*(void (**)(uint64_t, unint64_t, void))(*(void *)v52 + 168))(v52, MachOSection, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v3 = 0;
    goto LABEL_98;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.section' directive";
  WORD4(v64) = 259;
  uint64_t v30 = *(void *)(a1 + 8);
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 40))(v30);
  llvm::MCAsmParser::Error(v30, *(void *)(v31 + 96), (llvm::Twine *)&__p, 0, 0);
  uint64_t v3 = 1;
LABEL_98:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectivePushSection>(uint64_t a1)
{
  int v2 = (llvm::MCStreamer *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  llvm::MCStreamer::pushSection(v2);
  if (v3)
  {
    std::string::size_type v4 = (llvm::MCStreamer *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    llvm::MCStreamer::popSection(v4);
  }
  return v3;
}

__n128 llvm::MCStreamer::pushSection(llvm::MCStreamer *this)
{
  int v2 = (void *)((char *)this + 144);
  uint64_t v3 = *((unsigned int *)this + 38);
  if (v3)
  {
    uint64_t v4 = *v2 + 32 * v3;
    long long v5 = *(_OWORD *)(v4 - 32);
    long long v6 = *(_OWORD *)(v4 - 16);
  }
  else
  {
    long long v5 = 0uLL;
    long long v6 = 0uLL;
  }
  v11[0] = v5;
  v11[1] = v6;
  unint64_t v7 = llvm::SmallVectorTemplateCommon<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,true>>((uint64_t)v2, (unint64_t)v11, 1);
  uint64_t v8 = (_OWORD *)(*((void *)this + 18) + 32 * *((unsigned int *)this + 38));
  __n128 result = *(__n128 *)v7;
  long long v10 = *(_OWORD *)(v7 + 16);
  _OWORD *v8 = *(_OWORD *)v7;
  v8[1] = v10;
  ++*((_DWORD *)this + 38);
  return result;
}

BOOL llvm::MCStreamer::popSection(llvm::MCStreamer *this)
{
  uint64_t v1 = *((unsigned int *)this + 38);
  if (v1 >= 2)
  {
    uint64_t v3 = *((void *)this + 18) + 32 * v1;
    uint64_t v4 = *(void *)(v3 - 64);
    if (v4)
    {
      BOOL v5 = *(void *)(v3 - 32) == v4 && *(void *)(v3 - 24) == *(void *)(v3 - 56);
      int v6 = *((_DWORD *)this + 38);
      if (!v5)
      {
        (*(void (**)(llvm::MCStreamer *))(*(void *)this + 160))(this);
        int v6 = *((_DWORD *)this + 38);
      }
    }
    else
    {
      int v6 = *((_DWORD *)this + 38);
    }
    *((_DWORD *)this + 38) = v6 - 1;
  }
  return v1 > 1;
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 32 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 32);
      return *(void *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 32);
    }
  }
  return v3;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectivePopSection>(uint64_t a1)
{
  int v2 = (llvm::MCStreamer *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  BOOL v3 = llvm::MCStreamer::popSection(v2);
  if (!v3)
  {
    unint64_t v7 = ".popsection without corresponding .pushsection";
    __int16 v8 = 259;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(void *)(v5 + 96), (llvm::Twine *)&v7, 0, 0);
  }
  return !v3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectivePrevious>(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  uint64_t v3 = *(unsigned int *)(v2 + 152);
  if (v3 && (v4 = *(void *)(v2 + 144) + 32 * v3, (uint64_t v5 = *(void *)(v4 - 16)) != 0))
  {
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 168))(v7, v5, v6);
    return 0;
  }
  else
  {
    uint64_t v11 = ".previous without corresponding .section";
    __int16 v12 = 259;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
    llvm::MCAsmParser::Error(v9, *(void *)(v10 + 96), (llvm::Twine *)&v11, 0, 0);
    return 1;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveSecureLogUnique>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 200))(*(void *)(a1 + 8));
  uint64_t v8 = v7;
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 9)
  {
    v30[0] = "unexpected token in '.secure_log_unique' directive";
    __int16 v31 = 259;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
    llvm::MCAsmParser::Error(v11, *(void *)(v12 + 96), (llvm::Twine *)v30, 0, 0);
    return 1;
  }
  if (*(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8)) + 1352))
  {
    uint64_t v9 = ".secure_log_unique specified multiple times";
LABEL_4:
    v30[0] = v9;
    __int16 v31 = 259;
    return llvm::MCAsmParser::Error(*(void *)(a1 + 8), (uint64_t)a4, (llvm::Twine *)v30, 0, 0);
  }
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  if (*(char *)(v14 + 1343) >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(v14 + 1343);
  }
  else {
    uint64_t v15 = *(void *)(v14 + 1328);
  }
  if (!v15)
  {
    uint64_t v9 = ".secure_log_unique used but AS_SECURE_LOG_FILE environment variable unset.";
    goto LABEL_4;
  }
  std::string::size_type v16 = *(llvm::raw_ostream **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8))
                              + 1344);
  if (!v16)
  {
    v29.__val_ = 0;
    v29.__cat_ = std::system_category();
    operator new();
  }
  uint64_t v17 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v17, (unint64_t)a4);
  uint64_t v19 = *(void *)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8))
                  + 24 * (BufferContainingLoc - 1));
  __int16 v20 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
  char v22 = llvm::raw_ostream::operator<<(v16, v20, v21);
  __int16 v23 = v22;
  unint64_t v24 = (unsigned char *)*((void *)v22 + 4);
  if (*((unsigned char **)v22 + 3) == v24)
  {
    llvm::raw_ostream::write(v22, ":", 1uLL);
  }
  else
  {
    *unint64_t v24 = 58;
    ++*((void *)v22 + 4);
  }
  char v25 = (uint64_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  unsigned int LineAndColumn = llvm::SourceMgr::getLineAndColumn(v25, a4, BufferContainingLoc);
  write_unsigned<unsigned long>(v23, LineAndColumn, 0, 0, 0);
  std::string::size_type v27 = (unsigned char *)*((void *)v23 + 4);
  if (*((unsigned char **)v23 + 3) == v27)
  {
    llvm::raw_ostream::write(v23, ":", 1uLL);
  }
  else
  {
    *std::string::size_type v27 = 58;
    ++*((void *)v23 + 4);
  }
  __int16 v31 = 773;
  v30[0] = v6;
  v30[1] = v8;
  v30[2] = "\n";
  llvm::Twine::print((llvm::Twine *)v30, v23);
  uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  uint64_t v10 = 0;
  *(unsigned char *)(v28 + 1352) = 1;
  return v10;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveSecureLogReset>(uint64_t a1)
{
  int v2 = **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  if (v2 == 9)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8)) + 1352) = 0;
  }
  else
  {
    uint64_t v6 = "unexpected token in '.secure_log_reset' directive";
    __int16 v7 = 259;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(void *)(v4 + 96), (llvm::Twine *)&v6, 0, 0);
  }
  return v2 != 9;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveTBSS>(uint64_t a1)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 96);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v14))
  {
    uint64_t v3 = "expected identifier in directive";
LABEL_11:
    v12[0] = v3;
    __int16 v13 = 259;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v12, 0, 0);
    return 1;
  }
  uint64_t v4 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  __int16 v13 = 261;
  v12[0] = v14;
  v12[1] = v15;
  unint64_t Symbol = (llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v4, (const llvm::Twine *)v12);
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
  {
    uint64_t v3 = "unexpected token in directive";
    goto LABEL_11;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))()) {
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 25)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))()) {
      return 1;
    }
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 9)
  {
    uint64_t v3 = "unexpected token in '.tbss' directive";
    goto LABEL_11;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  if (llvm::MCSymbol::getFragment(Symbol, 1))
  {
    v12[0] = "invalid symbol redefinition";
    __int16 v13 = 259;
    return llvm::MCAsmParser::Error(*(void *)(a1 + 8), v2, (llvm::Twine *)v12, 0, 0);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    uint64_t v10 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    unint64_t MachOSection = llvm::MCContext::getMachOSection(v10, (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_bss", 12, 18, 0, 12, 0);
    (*(void (**)(uint64_t, unint64_t, llvm::MCSymbol *, void, void))(*(void *)v9 + 480))(v9, MachOSection, Symbol, 0, 0);
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveZerofill>(uint64_t a1)
{
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  if (!(*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v24))
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 25)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v3 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 96);
      if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v20))
      {
        uint64_t v2 = "expected section name after comma in '.zerofill' directive";
        goto LABEL_20;
      }
      int v4 = **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
      uint64_t v5 = **(void **)(a1 + 8);
      if (v4 == 9)
      {
        uint64_t v6 = (*(uint64_t (**)(void))(v5 + 56))();
        uint64_t v7 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
        unint64_t MachOSection = llvm::MCContext::getMachOSection(v7, v24, v25, v20, v21, 1, 0, 15, 0);
        (*(void (**)(uint64_t, unint64_t, void, void, void, uint64_t))(*(void *)v6 + 472))(v6, MachOSection, 0, 0, 0, v3);
        return 0;
      }
      if (**(_DWORD **)((*(uint64_t (**)(void))(v5 + 40))() + 8) == 25)
      {
        (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
        uint64_t v10 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 96);
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v18))
        {
          uint64_t v2 = "expected identifier in directive";
          goto LABEL_20;
        }
        uint64_t v11 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
        __int16 v23 = 261;
        v22[0] = v18;
        v22[1] = v19;
        unint64_t Symbol = (llvm::MCSymbol *)llvm::MCContext::getOrCreateSymbol(v11, (const llvm::Twine *)v22);
        if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 25)
        {
          (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
          (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
          if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))()) {
            return 1;
          }
          if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 25)
          {
            (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
            (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
            if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 256))()) {
              return 1;
            }
          }
          if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 9)
          {
            uint64_t v2 = "unexpected token in '.zerofill' directive";
            goto LABEL_20;
          }
          (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
          if (llvm::MCSymbol::getFragment(Symbol, 1))
          {
            v22[0] = "invalid symbol redefinition";
            __int16 v23 = 259;
            return llvm::MCAsmParser::Error(*(void *)(a1 + 8), v10, (llvm::Twine *)v22, 0, 0);
          }
          uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
          std::string::size_type v16 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
          unint64_t v17 = llvm::MCContext::getMachOSection(v16, v24, v25, v20, v21, 1, 0, 15, 0);
          (*(void (**)(uint64_t, unint64_t, llvm::MCSymbol *, void, void, uint64_t))(*(void *)v15 + 472))(v15, v17, Symbol, 0, 0, v3);
          return 0;
        }
      }
    }
    uint64_t v2 = "unexpected token in directive";
    goto LABEL_20;
  }
  uint64_t v2 = "expected segment name after '.zerofill' directive";
LABEL_20:
  v22[0] = v2;
  __int16 v23 = 259;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 40))(v13);
  llvm::MCAsmParser::Error(v13, *(void *)(v14 + 96), (llvm::Twine *)v22, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveDataRegion>(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v2 = *(void (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8))
                          + 224);
LABEL_3:
    v2();
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v4 = *(void *)(*(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8))
                             + 8)
                 + 8);
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10))
  {
    v8[0] = "expected region type after '.data_region' directive";
    __int16 v9 = 259;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(void *)(v6 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  if (v11 != 4)
  {
    if (v11 != 3) {
      goto LABEL_16;
    }
    if (*(_WORD *)v10 != 29802 || *(unsigned char *)(v10 + 2) != 56) {
      goto LABEL_16;
    }
LABEL_17:
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v2 = *(void (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8))
                          + 224);
    goto LABEL_3;
  }
  if (*(_DWORD *)v10 == 909210730 || *(_DWORD *)v10 == 842232938) {
    goto LABEL_17;
  }
LABEL_16:
  v8[0] = "unknown region type in '.data_region' directive";
  __int16 v9 = 259;
  return llvm::MCAsmParser::Error(*(void *)(a1 + 8), v4, (llvm::Twine *)v8, 0, 0);
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveDataRegionEnd>(uint64_t a1)
{
  int v2 = **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  if (v2 == 9)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 224))(v5, 4);
  }
  else
  {
    uint64_t v7 = "unexpected token in '.end_data_region' directive";
    __int16 v8 = 259;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(void *)(v4 + 96), (llvm::Twine *)&v7, 0, 0);
  }
  return v2 != 9;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveBss>(uint64_t a1)
{
}

BOOL anonymous namespace'::DarwinAsmParser::parseSectionSwitch(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  int v16 = **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  if (v16 == 9)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    uint64_t v20 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    if (a6 < 0) {
      int v21 = 2;
    }
    else {
      int v21 = 19;
    }
    unint64_t MachOSection = llvm::MCContext::getMachOSection(v20, a2, a3, a4, a5, a6, a8, v21, 0);
    (*(void (**)(uint64_t, unint64_t, void))(*(void *)v19 + 168))(v19, MachOSection, 0);
    if (a7)
    {
      uint64_t v23 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v23 + 632))();
    }
  }
  else
  {
    unint64_t v25 = "unexpected token in section switching directive";
    __int16 v26 = 259;
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
    llvm::MCAsmParser::Error(v17, *(void *)(v18 + 96), (llvm::Twine *)&v25, 0, 0);
  }
  return v16 != 9;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveConst>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveConstData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveConstructor>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveCString>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveDestructor>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveDyld>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveFVMLibInit0>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveFVMLibInit1>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLazySymbolPointers>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseDirectiveLinkerOption>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[12] = *MEMORY[0x263EF8340];
  uint64_t v23 = (char *)v25;
  uint64_t v24 = 0x400000000;
  do
  {
    while (1)
    {
      if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 3)
      {
        v16[0] = "expected string in '";
        uint64_t v17 = a2;
        uint64_t v18 = a3;
        __int16 v19 = 1283;
        v20[0] = v16;
        int v21 = "' directive";
        __int16 v22 = 770;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11);
        llvm::MCAsmParser::Error(v11, *(void *)(v12 + 96), (llvm::Twine *)v20, 0, 0);
        goto LABEL_18;
      }
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v15 = 0;
      if ((*(uint64_t (**)(void, void **))(**(void **)(a1 + 8) + 208))(*(void *)(a1 + 8), __p)) {
        goto LABEL_4;
      }
      llvm::SmallVectorTemplateBase<std::string,false>::push_back((uint64_t)&v23, (unint64_t)__p);
      if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
      {
        int v6 = 3;
      }
      else
      {
        if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
        {
          v16[0] = "unexpected token in '";
          uint64_t v17 = a2;
          uint64_t v18 = a3;
          __int16 v19 = 1283;
          v20[0] = v16;
          int v21 = "' directive";
          __int16 v22 = 770;
          uint64_t v7 = *(void *)(a1 + 8);
          uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
          llvm::MCAsmParser::Error(v7, *(void *)(v8 + 96), (llvm::Twine *)v20, 0, 0);
LABEL_4:
          int v6 = 1;
          goto LABEL_9;
        }
        (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
        int v6 = 0;
      }
LABEL_9:
      if (SHIBYTE(v15) < 0) {
        break;
      }
      if (v6) {
        goto LABEL_15;
      }
    }
    operator delete(__p[0]);
  }
  while (!v6);
LABEL_15:
  if (v6 == 3)
  {
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(uint64_t, char *, void))(*(void *)v9 + 216))(v9, v23, v24);
    uint64_t v10 = 0;
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v10 = 1;
LABEL_19:
  llvm::SmallVector<std::string,2u>::~SmallVector(&v23);
  return v10;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLiteral16>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLiteral4>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveLiteral8>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveModInitFunc>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveModTermFunc>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveNonLazySymbolPointers>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveThreadLocalVariablePointers>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCCatClsMeth>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCCatInstMeth>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCCategory>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClass>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClassNames>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClassVars>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClsMeth>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCClsRefs>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCInstMeth>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCInstanceVars>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMessageRefs>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMetaClass>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMethVarNames>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCMethVarTypes>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCModuleInfo>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCProtocol>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCSelectorStrs>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCStringObject>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveObjCSymbols>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectivePICSymbolStub>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveStaticConst>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveStaticData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveSymbolStub>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveTData>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveText>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveThreadInitFunc>(uint64_t a1)
{
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveTLV>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseSectionDirectiveIdent>(uint64_t a1)
{
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseBridgeOSVersionMin>(_anonymous_namespace_::DarwinAsmParser *a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)int v16 = 0;
  unsigned int v15 = 0;
    return 1;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v8 = (*(uint64_t (**)(void *))(**((void **)a1 + 1) + 40))(*((void **)a1 + 1));
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (isSDKVersionToken(*(void *)(v8 + 8)))
  {
      return 1;
    uint64_t v10 = v13;
    uint64_t v9 = v14;
  }
  uint64_t v12 = (*(uint64_t (**)(void *))(**((void **)a1 + 1) + 56))(*((void **)a1 + 1));
  (*(void (**)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(*(void *)v12 + 240))(v12, 5, v16[1], v16[0], v15, v10, v9);
  return 0;
}

uint64_t anonymous namespace'::DarwinAsmParser::parseVersion(_anonymous_namespace_::DarwinAsmParser *this, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
    return 1;
  *a4 = 0;
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  uint64_t result = 0;
  if (**(_DWORD **)(v7 + 8) != 9)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
    if (isSDKVersionToken(*(void *)(v8 + 8)))
    {
      return 0;
    }
    else
    {
      if (**(_DWORD **)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8) != 25)
      {
        uint64_t v11 = "invalid OS update specifier, comma expected";
        __int16 v12 = 259;
        uint64_t v9 = *((void *)this + 1);
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
        llvm::MCAsmParser::Error(v9, *(void *)(v10 + 96), (llvm::Twine *)&v11, 0, 0);
        return 1;
      }
    }
  }
  return result;
}

BOOL isSDKVersionToken(uint64_t a1)
{
  if (*(_DWORD *)a1 != 2 || *(void *)(a1 + 16) != 11) {
    return 0;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = *(uint64_t *)((char *)v3 + 3);
  return v4 == 0x737265765F6B6473 && v5 == 0x6E6F69737265765FLL;
}

uint64_t anonymous namespace'::DarwinAsmParser::parseSDKVersion(_anonymous_namespace_::DarwinAsmParser *this, llvm::VersionTuple *a2)
{
  (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
  *(void *)uint64_t v8 = 0;
    return 1;
  unint64_t v5 = v8[1] | ((unint64_t)v8[0] << 32);
  *(void *)a2 = v5 | 0x8000000000000000;
  *((void *)a2 + 1) = 0;
  if (**(_DWORD **)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8) != 25) {
    return 0;
  }
  unsigned int v7 = 0;
    return 1;
  uint64_t result = 0;
  uint64_t v6 = v7 | 0x80000000;
  *(void *)a2 = v5 | 0x8000000000000000;
  *((void *)a2 + 1) = v6;
  return result;
}

uint64_t anonymous namespace'::DarwinAsmParser::checkVersion(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  if (*(_DWORD *)(result + 60) != a7)
  {
    unsigned int v15 = (llvm::Triple *)(result + 24);
    if (a5)
    {
      v20[0] = 32;
      void v20[2] = a4;
      v20[3] = a5;
      __int16 v21 = 1287;
      __int16 v22 = a2;
      uint64_t v23 = a3;
      uint64_t v24 = v20;
      char v16 = 2;
      a2 = &v22;
      __int16 v25 = 517;
    }
    else
    {
      __int16 v21 = 257;
      __int16 v22 = a2;
      uint64_t v23 = a3;
      __int16 v25 = 261;
      char v16 = 5;
    }
    v26[0] = a2;
    v26[1] = a3;
    v26[2] = " used while targeting ";
    char v27 = v16;
    char v28 = 3;
    uint64_t OSName = llvm::Triple::getOSName(v15);
    v29[0] = v26;
    uint64_t v29[2] = OSName;
    void v29[3] = v18;
    __int16 v30 = 1282;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void *, void, void))(**(void **)(a1 + 8) + 168))(*(void *)(a1 + 8), a6, v29, 0, 0);
  }
  if (*(void *)(a1 + 24))
  {
    v29[0] = "overriding previous version directive";
    __int16 v30 = 259;
    (*(void (**)(void, uint64_t, void *, void, void))(**(void **)(a1 + 8) + 168))(*(void *)(a1 + 8), a6, v29, 0, 0);
    uint64_t v19 = *(void *)(a1 + 24);
    v29[0] = "previous definition is here";
    __int16 v30 = 259;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void *, void, void))(**(void **)(a1 + 8) + 160))(*(void *)(a1 + 8), v19, v29, 0, 0);
  }
  *(void *)(a1 + 24) = a6;
  return result;
}

uint64_t anonymous namespace'::DarwinAsmParser::parseMajorMinorVersionComponent(_anonymous_namespace_::DarwinAsmParser *this, unsigned int *a2, unsigned int *a3, const char *a4)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8) == 4)
  {
    uint64_t v8 = *(void *)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8);
    uint64_t v9 = (void *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u) {
      uint64_t v9 = (void *)*v9;
    }
    uint64_t v10 = (void *)*v9;
    if ((unint64_t)(v10 - 0x2000) > 0xFFFFFFFFFFFF0000)
    {
      *a2 = v10;
      (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
      if (**(_DWORD **)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8) != 25)
      {
        if (*a4)
        {
          __int16 v31 = a4;
          uint64_t v32 = " minor version number required, comma expected";
          __int16 v20 = 771;
        }
        else
        {
          __int16 v31 = " minor version number required, comma expected";
          __int16 v20 = 259;
        }
        __int16 v33 = v20;
        goto LABEL_28;
      }
      (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
      if (**(_DWORD **)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8) == 4)
      {
        uint64_t v16 = *(void *)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8);
        uint64_t v17 = (unint64_t *)(v16 + 24);
        if (*(_DWORD *)(v16 + 32) >= 0x41u) {
          uint64_t v17 = (unint64_t *)*v17;
        }
        unint64_t v18 = *v17;
        if (v18 < 0x100)
        {
          *a3 = v18;
          (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
          return 0;
        }
        int v19 = *(unsigned __int8 *)a4;
        if (*a4)
        {
          v28[0] = "invalid ";
          std::error_code v29 = a4;
          __int16 v30 = 771;
          char v12 = 2;
        }
        else
        {
          v28[0] = "invalid ";
          __int16 v30 = 259;
          char v12 = 3;
        }
        BOOL v21 = v19 == 0;
        __int16 v22 = (const char *)v28;
        if (v21) {
          __int16 v22 = "invalid ";
        }
        uint64_t v23 = " minor version number";
      }
      else
      {
        int v27 = *(unsigned __int8 *)a4;
        if (*a4)
        {
          v28[0] = "invalid ";
          std::error_code v29 = a4;
          __int16 v30 = 771;
          char v12 = 2;
        }
        else
        {
          v28[0] = "invalid ";
          __int16 v30 = 259;
          char v12 = 3;
        }
        BOOL v21 = v27 == 0;
        __int16 v22 = (const char *)v28;
        if (v21) {
          __int16 v22 = "invalid ";
        }
        uint64_t v23 = " minor version number, integer expected";
      }
    }
    else
    {
      int v11 = *(unsigned __int8 *)a4;
      if (*a4)
      {
        v28[0] = "invalid ";
        std::error_code v29 = a4;
        __int16 v30 = 771;
        char v12 = 2;
      }
      else
      {
        v28[0] = "invalid ";
        __int16 v30 = 259;
        char v12 = 3;
      }
      BOOL v21 = v11 == 0;
      __int16 v22 = (const char *)v28;
      if (v21) {
        __int16 v22 = "invalid ";
      }
      uint64_t v23 = " major version number";
    }
    __int16 v31 = v22;
    uint64_t v32 = v23;
    LOBYTE(v33) = v12;
  }
  else
  {
    int v13 = *(unsigned __int8 *)a4;
    uint64_t v14 = "invalid ";
    if (*a4)
    {
      v28[0] = "invalid ";
      std::error_code v29 = a4;
      __int16 v30 = 771;
      char v15 = 2;
    }
    else
    {
      v28[0] = "invalid ";
      __int16 v30 = 259;
      char v15 = 3;
    }
    if (v13) {
      uint64_t v14 = (const char *)v28;
    }
    __int16 v31 = v14;
    uint64_t v32 = " major version number, integer expected";
    LOBYTE(v33) = v15;
  }
  HIBYTE(v33) = 3;
LABEL_28:
  uint64_t v24 = *((void *)this + 1);
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 40))(v24);
  llvm::MCAsmParser::Error(v24, *(void *)(v25 + 96), (llvm::Twine *)&v31, 0, 0);
  return 1;
}

uint64_t anonymous namespace'::DarwinAsmParser::parseOptionalTrailingVersionComponent(_anonymous_namespace_::DarwinAsmParser *this, unsigned int *a2, const char *a3)
{
  (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
  if (**(_DWORD **)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8) == 4)
  {
    uint64_t v6 = *(void *)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8);
    unsigned int v7 = (unint64_t *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u) {
      unsigned int v7 = (unint64_t *)*v7;
    }
    unint64_t v8 = *v7;
    if (v8 < 0x100)
    {
      *a2 = v8;
      (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
      return 0;
    }
    int v9 = *(unsigned __int8 *)a3;
    if (*a3)
    {
      v19[0] = "invalid ";
      __int16 v20 = a3;
      __int16 v21 = 771;
      char v10 = 2;
    }
    else
    {
      v19[0] = "invalid ";
      __int16 v21 = 259;
      char v10 = 3;
    }
    BOOL v15 = v9 == 0;
    uint64_t v16 = (const char *)v19;
    if (v15) {
      uint64_t v16 = "invalid ";
    }
    __int16 v22 = v16;
    uint64_t v23 = " version number";
    char v24 = v10;
  }
  else
  {
    int v11 = *(unsigned __int8 *)a3;
    char v12 = "invalid ";
    if (*a3)
    {
      v19[0] = "invalid ";
      __int16 v20 = a3;
      __int16 v21 = 771;
      char v13 = 2;
    }
    else
    {
      v19[0] = "invalid ";
      __int16 v21 = 259;
      char v13 = 3;
    }
    if (v11) {
      char v12 = (const char *)v19;
    }
    __int16 v22 = v12;
    uint64_t v23 = " version number, integer expected";
    char v24 = v13;
  }
  char v25 = 3;
  uint64_t v17 = *((void *)this + 1);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 40))(v17);
  llvm::MCAsmParser::Error(v17, *(void *)(v18 + 96), (llvm::Twine *)&v22, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseWatchOSVersionMin>(llvm::MCAsmParser **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t anonymous namespace'::DarwinAsmParser::parseVersionMin(llvm::MCAsmParser **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)__int16 v20 = 0;
  unsigned int v19 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v11 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1[1] + 40))(a1[1]);
  if (isSDKVersionToken(*(void *)(v11 + 8))
  {
    return 1;
  }
  v15[0] = "unexpected token";
  __int16 v16 = 259;
  if (llvm::MCAsmParser::parseEOL(a1[1], (const llvm::Twine *)v15))
  {
    v13[0] = " in '";
    v13[2] = a2;
    v13[3] = a3;
    __int16 v14 = 1283;
    v15[0] = v13;
    v15[2] = "' directive";
    __int16 v16 = 770;
    return llvm::MCAsmParser::addErrorSuffix(a1[1], (const llvm::Twine *)v15);
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1[1] + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(*(void *)v12 + 232))(v12, a5, v20[1], v20[0], v19, v17, v18);
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseTvOSVersionMin>(llvm::MCAsmParser **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseIOSVersionMin>(llvm::MCAsmParser **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseMacOSXVersionMin>(llvm::MCAsmParser **a1, void *a2, uint64_t a3, uint64_t a4)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parseBuildVersion>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v8 = *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1[1] + 192))(a1[1], &v32))
  {
    int v9 = "platform name expected";
LABEL_3:
    v30[0] = v9;
    __int16 v31 = 259;
    uint64_t v10 = a1[1];
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(void *)(v11 + 96), (llvm::Twine *)v30, 0, 0);
    return 1;
  }
  else
  {
    switch(v33)
    {
      case 3:
        if (*(_WORD *)v32 != 28521 || *(unsigned char *)(v32 + 2) != 115) {
          goto LABEL_65;
        }
        uint64_t v14 = 2;
        goto LABEL_71;
      case 4:
        if (*(_DWORD *)v32 == 1936684660)
        {
          uint64_t v14 = 3;
        }
        else
        {
          if (*(_DWORD *)v32 != 1936683640) {
            goto LABEL_65;
          }
          uint64_t v14 = 11;
        }
        goto LABEL_71;
      case 5:
        if (*(_DWORD *)v32 == 1868783981 && *(unsigned char *)(v32 + 4) == 115)
        {
          uint64_t v14 = 1;
          goto LABEL_71;
        }
        if (*(_DWORD *)v32 == 1869636979 && *(unsigned char *)(v32 + 4) == 115)
        {
          uint64_t v14 = 14;
          goto LABEL_71;
        }
        goto LABEL_65;
      case 7:
        if (*(_DWORD *)v32 != 1668571511 || *(_DWORD *)(v32 + 3) != 1936681059) {
          goto LABEL_65;
        }
        uint64_t v14 = 4;
        goto LABEL_71;
      case 8:
        if (*(void *)v32 != 0x736F656764697262) {
          goto LABEL_65;
        }
        uint64_t v14 = 5;
        goto LABEL_71;
      case 9:
        if (*(void *)v32 != 0x696B726576697264 || *(unsigned char *)(v32 + 8) != 116) {
          goto LABEL_65;
        }
        uint64_t v14 = 10;
        goto LABEL_71;
      case 11:
        if (*(void *)v32 == 0x6C6174614363616DLL && *(void *)(v32 + 3) == 0x7473796C61746143)
        {
          uint64_t v14 = 6;
        }
        else
        {
          if (*(void *)v32 != 0x616C756D69737278 || *(void *)(v32 + 3) != 0x726F74616C756D69)
          {
LABEL_65:
            v30[0] = "unknown platform name";
            __int16 v31 = 259;
            return llvm::MCAsmParser::Error(a1[1], v8, (llvm::Twine *)v30, 0, 0);
          }
          uint64_t v14 = 12;
        }
LABEL_71:
        if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) != 25)
        {
          int v9 = "version number required, comma expected";
          goto LABEL_3;
        }
        (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
        *(void *)std::error_code v29 = 0;
        unsigned int v28 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]);
        if (isSDKVersionToken(*(void *)(v24 + 8))
        {
          return 1;
        }
        v30[0] = "unexpected token";
        __int16 v31 = 259;
        if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1[1], (const llvm::Twine *)v30))
        {
          v30[0] = " in '.build_version' directive";
          __int16 v31 = 259;
          uint64_t result = llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1[1], (const llvm::Twine *)v30);
        }
        else
        {
          uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 56))(a1[1]);
          (*(void (**)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(*(void *)v25 + 240))(v25, v14, v29[1], v29[0], v28, v26, v27);
          uint64_t result = 0;
        }
        break;
      case 12:
        if (*(void *)v32 != 0x6C756D6973736F69 || *(_DWORD *)(v32 + 8) != 1919906913) {
          goto LABEL_65;
        }
        uint64_t v14 = 7;
        goto LABEL_71;
      case 13:
        if (*(void *)v32 != 0x756D6973736F7674 || *(void *)(v32 + 5) != 0x726F74616C756D69) {
          goto LABEL_65;
        }
        uint64_t v14 = 8;
        goto LABEL_71;
      case 16:
        if (*(void *)v32 != 0x73736F6863746177 || *(void *)(v32 + 8) != 0x726F74616C756D69) {
          goto LABEL_65;
        }
        uint64_t v14 = 9;
        goto LABEL_71;
      default:
        goto LABEL_65;
    }
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parsePtrAuthABIVersion>(uint64_t a1)
{
  uint64_t v9 = 0;
  int v2 = *(llvm::MCAsmParser **)(a1 + 8);
  v7[0] = "expected integer version in '.ptrauth_abi_version' directive";
  __int16 v8 = 259;
  if (llvm::MCAsmParser::parseIntToken(v2, &v9, (const llvm::Twine *)v7)) {
    return 1;
  }
  if ((unint64_t)v9 >= 0x40)
  {
    v7[0] = "invalid ptrauth ABI version number";
    __int16 v8 = 259;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(void *)(v4 + 96), (llvm::Twine *)v7, 0, 0);
    return 1;
  }
  v7[0] = "unexpected token";
  __int16 v8 = 259;
  if (llvm::MCAsmParser::parseEOL(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v7))
  {
    v7[0] = " in '.ptrauth_abi_version' directive";
    __int16 v8 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v7);
  }
  else
  {
    uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v6 + 256))();
    return 0;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::DarwinAsmParser,&anonymous namespace'::DarwinAsmParser::parsePtrAuthKernelABIVersion>(uint64_t a1)
{
  uint64_t v9 = 0;
  int v2 = *(llvm::MCAsmParser **)(a1 + 8);
  v7[0] = "expected integer version in '.ptrauth_kernel_abi_version' directive";
  __int16 v8 = 259;
  if (llvm::MCAsmParser::parseIntToken(v2, &v9, (const llvm::Twine *)v7)) {
    return 1;
  }
  if ((unint64_t)v9 >= 0x40)
  {
    v7[0] = "invalid ptrauth kernel ABI version number";
    __int16 v8 = 259;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(void *)(v4 + 96), (llvm::Twine *)v7, 0, 0);
    return 1;
  }
  v7[0] = "unexpected token";
  __int16 v8 = 259;
  if (llvm::MCAsmParser::parseEOL(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v7))
  {
    v7[0] = " in '.ptrauth_kernel_abi_version' directive";
    __int16 v8 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v7);
  }
  else
  {
    uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v6 + 256))();
    return 0;
  }
}

void anonymous namespace'::ELFAsmParser::~ELFAsmParser(_anonymous_namespace_::ELFAsmParser *this)
{
}

uint64_t anonymous namespace'::ELFAsmParser::Initialize(_anonymous_namespace_::ELFAsmParser *this, llvm::MCAsmParser *a2)
{
  *((void *)this + 1) = a2;
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 16);
  return v3();
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseSectionDirectiveData>(uint64_t a1)
{
}

uint64_t anonymous namespace'::ELFAsmParser::ParseSectionSwitch(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v17 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 9)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    v18[0] = 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v10 + 232))(v10, &v17, v18)) {
      return 1;
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  char v13 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  __int16 v16 = 261;
  v15[0] = a2;
  v15[1] = a3;
  __int16 v19 = 257;
  uint64_t ELFSection = llvm::MCContext::getELFSection(v13, (llvm::Twine *)v15, a4, a5, 0, (llvm::Twine *)v18, 0, -1, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v12 + 168))(v12, ELFSection, v17);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseSectionDirectiveText>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseSectionDirectiveBSS>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseSectionDirectiveRoData>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseSectionDirectiveTData>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseSectionDirectiveTBSS>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseSectionDirectiveDataRel>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseSectionDirectiveDataRelRo>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseSectionDirectiveEhFrame>(uint64_t a1)
{
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectiveSection>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t anonymous namespace'::ELFAsmParser::ParseSectionArguments(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 96);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]);
  __int16 v8 = (_DWORD *)a1[1];
  if (**(_DWORD **)(v7 + 8) == 3)
  {
    uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(a1[1]) + 8);
    if (*(_DWORD *)v9 == 2)
    {
      uint64_t v11 = *(void *)(v9 + 8);
      size_t v10 = *(void *)(v9 + 16);
    }
    else
    {
      uint64_t v16 = v9 + 8;
      uint64_t v14 = *(void *)(v9 + 8);
      unint64_t v15 = *(void *)(v16 + 8);
      unint64_t v17 = v15 != 0;
      if (v15) {
        uint64_t v11 = v14 + 1;
      }
      else {
        uint64_t v11 = v14;
      }
      if (v15 - 1 < v17) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = v15 - 1;
      }
      if (v18 >= v15) {
        unint64_t v18 = v15;
      }
      size_t v10 = v18 - v17;
    }
    (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
    goto LABEL_16;
  }
  if (v8[6])
  {
LABEL_5:
    *(void *)&long long v160 = "expected identifier";
    __int16 v162 = 259;
    uint64_t v12 = *(void *)((*(uint64_t (**)(_DWORD *))(*(void *)v8 + 40))(v8) + 96);
    uint64_t v13 = (uint64_t)v8;
LABEL_336:
    llvm::MCAsmParser::Error(v13, v12, (llvm::Twine *)&v160, 0, 0);
    return 1;
  }
  int v22 = 0;
  uint64_t v11 = 0;
  size_t v10 = 0;
  while (1)
  {
    uint64_t v23 = *(void *)((*(uint64_t (**)(_DWORD *))(*(void *)v8 + 40))(v8) + 96);
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) == 25
      || **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) == 9)
    {
      break;
    }
    int v24 = **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8);
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]);
    if (v24 == 3)
    {
      uint64_t v26 = *(int **)(v25 + 8);
      int v27 = *v26;
      unint64_t v28 = *((void *)v26 + 2);
      if (v27 != 2)
      {
        unint64_t v29 = v28 - 1;
        unint64_t v30 = v28 != 0;
        if (v28 - 1 < v30) {
          unint64_t v29 = 1;
        }
        if (v29 < v28) {
          LODWORD(v28) = v29;
        }
        LODWORD(v28) = v28 - v30;
      }
      LODWORD(v31) = v28 + 2;
    }
    else
    {
      int v32 = **(_DWORD **)(v25 + 8);
      uint64_t v33 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8);
      if (v32 == 2)
      {
        unint64_t v31 = *(void *)(v33 + 16);
        if (*(_DWORD *)v33 != 2)
        {
          unint64_t v34 = v31 - 1;
          unint64_t v35 = v31 != 0;
          if (v31 - 1 < v35) {
            unint64_t v34 = 1;
          }
          if (v34 >= v31) {
            LODWORD(v34) = v31;
          }
          LODWORD(v31) = v34 - v35;
        }
      }
      else
      {
        LODWORD(v31) = *(_DWORD *)(v33 + 16);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
    size_t v10 = (v22 + v31);
    v22 += v31;
    if (v23 + v31 == *(void *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1])
                                                          + 8)
                                              + 8))
    {
      __int16 v8 = (_DWORD *)a1[1];
      uint64_t v11 = v6;
      if (!v8[6]) {
        continue;
      }
    }
    uint64_t v11 = v6;
    break;
  }
  if (!v22)
  {
    __int16 v8 = (_DWORD *)a1[1];
    goto LABEL_5;
  }
LABEL_16:
  long long v159 = 0uLL;
  uint64_t v158 = 0;
  unint64_t v156 = 0;
  uint64_t v157 = 0;
  BOOL v155 = 0;
  uint64_t v153 = 0;
  uint64_t v154 = 0;
  uint64_t v152 = -1;
  if (v10 >= 7)
  {
    BOOL v19 = *(_DWORD *)v11 == 1685025326 && *(_DWORD *)(v11 + 3) == 1635017060;
    if (v19 && (v10 < 8 || *(unsigned char *)(v11 + 7) == 46)) {
      goto LABEL_82;
    }
  }
  if (v10 == 5)
  {
    if ((*(_DWORD *)v11 != 1852401198 || *(unsigned char *)(v11 + 4) != 105)
      && (*(_DWORD *)v11 != 1768843566 || *(unsigned char *)(v11 + 4) != 116)
      && (*(_DWORD *)v11 != 2019914798 || *(unsigned char *)(v11 + 4) != 116))
    {
      if (*(_DWORD *)v11 == 1952539694 && *(unsigned char *)(v11 + 4) == 97) {
        goto LABEL_118;
      }
      goto LABEL_103;
    }
LABEL_89:
    int v40 = 6;
    goto LABEL_119;
  }
  if (v10 == 8)
  {
    if (*(void *)v11 == 0x31617461646F722ELL)
    {
LABEL_82:
      int v40 = 2;
      goto LABEL_119;
    }
    if (*(_DWORD *)v11 != 2019914798 || *(unsigned char *)(v11 + 4) != 116)
    {
      if (*(_DWORD *)v11 != 1952539694 || *(unsigned char *)(v11 + 4) != 97) {
        goto LABEL_103;
      }
LABEL_95:
      if (*(unsigned char *)(v11 + 5) == 46) {
        goto LABEL_118;
      }
LABEL_96:
      if (v10 == 6)
      {
        if (*(_DWORD *)v11 == 1952539694 && *(_WORD *)(v11 + 4) == 12641) {
          goto LABEL_118;
        }
        if (*(_DWORD *)v11 != 1936941614) {
          goto LABEL_109;
        }
LABEL_114:
        if (*(unsigned char *)(v11 + 4) != 46) {
          goto LABEL_104;
        }
LABEL_118:
        int v40 = 3;
        goto LABEL_119;
      }
LABEL_103:
      if (*(_DWORD *)v11 != 1936941614)
      {
LABEL_104:
        if (v10 >= 0xB)
        {
          BOOL v44 = *(void *)v11 == 0x72615F74696E692ELL && *(void *)(v11 + 3) == 0x79617272615F7469;
          if (v44 && (v10 < 0xC || *(unsigned char *)(v11 + 11) == 46)) {
            goto LABEL_118;
          }
        }
        goto LABEL_109;
      }
      goto LABEL_114;
    }
LABEL_88:
    if (*(unsigned char *)(v11 + 5) == 46) {
      goto LABEL_89;
    }
LABEL_90:
    if (*(_DWORD *)v11 != 1952539694 || *(unsigned char *)(v11 + 4) != 97) {
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  if (v10 >= 5)
  {
    if (*(_DWORD *)v11 != 2019914798 || *(unsigned char *)(v11 + 4) != 116) {
      goto LABEL_90;
    }
    goto LABEL_88;
  }
  if (v10 == 4 && *(_DWORD *)v11 == 1936941614) {
    goto LABEL_118;
  }
LABEL_109:
  if (hasPrefix((unsigned __int8 *)v11, v10, ".fini_array", 0xBuLL)
    || hasPrefix((unsigned __int8 *)v11, v10, ".preinit_array", 0xEuLL))
  {
    goto LABEL_118;
  }
  if (hasPrefix((unsigned __int8 *)v11, v10, ".tdata", 6uLL) || hasPrefix((unsigned __int8 *)v11, v10, ".tbss", 5uLL)) {
    int v40 = 1027;
  }
  else {
    int v40 = 0;
  }
LABEL_119:
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) != 25) {
    goto LABEL_139;
  }
  (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
  if (a2 && **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) != 3)
  {
    uint64_t v45 = a1[1];
    *(void *)&long long v160 = 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t *, long long *))(*(void *)v45 + 232))(v45, &v154, &v160)) {
      return 1;
    }
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) == 25)
    {
      (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
      goto LABEL_125;
    }
LABEL_139:
    int v56 = 0;
    int v55 = 0;
    goto LABEL_140;
  }
LABEL_125:
  int v46 = **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8);
  uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]);
  if (v46 != 3)
  {
    if (**(_DWORD **)(v47 + 8) != 37)
    {
      BOOL v58 = "expected string";
      goto LABEL_335;
    }
    if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) == 37)
    {
      int v55 = 0;
      while (1)
      {
        (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
        if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) != 2) {
          goto LABEL_228;
        }
        uint64_t v59 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8);
        if (*(_DWORD *)v59 == 2)
        {
          uint64_t v60 = *(unsigned __int16 **)(v59 + 8);
          unint64_t v61 = *(void *)(v59 + 16);
        }
        else
        {
          uint64_t v60 = *(unsigned __int16 **)(v59 + 8);
          unint64_t v62 = *(void *)(v59 + 16);
          unint64_t v63 = v62 - 1;
          unint64_t v64 = v62 != 0;
          if (v62) {
            uint64_t v60 = (unsigned __int16 *)((char *)v60 + 1);
          }
          if (v63 < v64) {
            unint64_t v63 = 1;
          }
          if (v63 >= v62) {
            unint64_t v63 = v62;
          }
          unint64_t v61 = v63 - v64;
        }
        switch(v61)
        {
          case 3uLL:
            int v70 = *v60;
            int v71 = *((unsigned __int8 *)v60 + 2);
            if (v70 != 27764 || v71 != 115) {
              goto LABEL_228;
            }
            int v69 = 1024;
            break;
          case 9uLL:
            uint64_t v73 = *(void *)v60;
            int v74 = *((unsigned __int8 *)v60 + 8);
            if (v73 != 0x74736E6963657865 || v74 != 114) {
              goto LABEL_228;
            }
            int v69 = 4;
            break;
          case 5uLL:
            if (*(_DWORD *)v60 == 1869376609 && *((unsigned char *)v60 + 4) == 99)
            {
              int v69 = 2;
            }
            else
            {
              int v66 = *(_DWORD *)v60;
              int v67 = *((unsigned __int8 *)v60 + 4);
              if (v66 != 1953067639 || v67 != 101) {
                goto LABEL_228;
              }
              int v69 = 1;
            }
            break;
          default:
            goto LABEL_228;
        }
        v55 |= v69;
        (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
        if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) == 25)
        {
          (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
          if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) == 37) {
            continue;
          }
        }
        goto LABEL_138;
      }
    }
LABEL_189:
    int v55 = 0;
    int v56 = 0;
    goto LABEL_219;
  }
  unint64_t v48 = *(void *)(*(void *)(v47 + 8) + 16);
  unint64_t v49 = v48 != 0;
  if (v48) {
    uint64_t v50 = (unsigned char *)(*(void *)(*(void *)(v47 + 8) + 8) + 1);
  }
  else {
    uint64_t v50 = *(unsigned char **)(*(void *)(v47 + 8) + 8);
  }
  if (v48 - 1 < v49) {
    unint64_t v51 = 1;
  }
  else {
    unint64_t v51 = v48 - 1;
  }
  if (v51 >= v48) {
    unint64_t v52 = *(void *)(*(void *)(v47 + 8) + 16);
  }
  else {
    unint64_t v52 = v51;
  }
  (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
  uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 48))(a1[1]);
  unint64_t v148 = 0;
  *(void *)&long long v160 = v50;
  *((void *)&v160 + 1) = v52 - v49;
  if ((llvm::consumeUnsignedInteger((llvm *)&v160, 0, &v148, v54) & 1) != 0
    || *((void *)&v160 + 1)
    || (int v55 = v148, HIDWORD(v148)))
  {
    unint64_t v76 = v52 - v49;
    if (v52 != v49)
    {
      int v56 = 0;
      int v55 = 0;
      while (2)
      {
        int v77 = (char)*v50;
        if (v77 > 96)
        {
          switch(*v50)
          {
            case 'o':
              v55 |= 0x80u;
              goto LABEL_217;
            case 'p':
            case 'q':
            case 'r':
            case 't':
            case 'u':
            case 'v':
              goto LABEL_228;
            case 's':
LABEL_207:
              v55 |= 0x10000000u;
              goto LABEL_217;
            case 'w':
              v55 |= 1u;
              goto LABEL_217;
            case 'x':
              v55 |= 4u;
              goto LABEL_217;
            case 'y':
LABEL_206:
              v55 |= 0x20000000u;
              goto LABEL_217;
            default:
              switch(*v50)
              {
                case 'a':
                  v55 |= 2u;
                  goto LABEL_217;
                case 'c':
                  goto LABEL_206;
                case 'd':
                  goto LABEL_207;
                case 'e':
                  v55 |= 0x80000000;
                  goto LABEL_217;
                default:
                  goto LABEL_228;
              }
          }
        }
        switch(*v50)
        {
          case 'M':
            v55 |= 0x10u;
            goto LABEL_217;
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
            goto LABEL_228;
          case 'R':
            if (*(_DWORD *)(v53 + 60) == 14) {
              v55 |= 0x100000u;
            }
            else {
              v55 |= 0x200000u;
            }
            goto LABEL_217;
          case 'S':
            v55 |= 0x20u;
            goto LABEL_217;
          case 'T':
            v55 |= 0x400u;
            goto LABEL_217;
          default:
            if (v77 == 63)
            {
              int v56 = 1;
            }
            else
            {
              if (v77 != 71) {
                goto LABEL_228;
              }
              v55 |= 0x200u;
            }
LABEL_217:
            ++v50;
            if (!--v76) {
              goto LABEL_218;
            }
            continue;
        }
      }
    }
    goto LABEL_189;
  }
LABEL_138:
  int v56 = 0;
LABEL_218:
  if (v55 == -1)
  {
LABEL_228:
    BOOL v58 = "unknown flag";
    goto LABEL_335;
  }
LABEL_219:
  if ((v55 & 0x200) != 0 && v56)
  {
    BOOL v58 = "Section cannot specifiy a group name while also acting as a member of the last group";
    goto LABEL_335;
  }
  uint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]);
  if (**(_DWORD **)(v78 + 8) == 25)
  {
    uint64_t v79 = v78;
    (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
    int v80 = **(_DWORD **)(v79 + 8);
    if (v80 != 3)
    {
      if (v80 != 36 && v80 != 45)
      {
        if (*(unsigned char *)(v79 + 105)) {
          char v84 = "expected '@<type>', '%<type>' or \"<type>\"";
        }
        else {
          char v84 = "expected '%<type>' or \"<type>\"";
        }
LABEL_343:
        *(void *)&long long v160 = v84;
        __int16 v162 = 259;
        if (llvm::MCAsmParser::TokError(a1[1], (llvm::Twine *)&v160, 0, 0)) {
          return 1;
        }
        goto LABEL_344;
      }
      (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
      if (**(_DWORD **)(v79 + 8) == 4)
      {
        long long v159 = *(_OWORD *)(*(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) + 8);
        (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
        goto LABEL_344;
      }
    }
    if (!(*(unsigned int (**)(uint64_t, long long *))(*(void *)a1[1] + 192))(a1[1], &v159)) {
      goto LABEL_344;
    }
    char v84 = "expected identifier";
    goto LABEL_343;
  }
LABEL_344:
  uint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]);
  if (*((void *)&v159 + 1))
  {
    if ((v55 & 0x10) != 0 {
      || (v55 & 0x200) != 0
    }
    {
      return 1;
    }
    goto LABEL_353;
  }
  if ((v55 & 0x10) != 0)
  {
    uint64_t v104 = "Mergeable section must specify the type";
LABEL_436:
    *(void *)&long long v160 = v104;
    __int16 v162 = 259;
    return llvm::MCAsmParser::TokError(a1[1], (llvm::Twine *)&v160, 0, 0);
  }
  if ((v55 & 0x200) != 0)
  {
    uint64_t v104 = "Group section must specify the type";
    goto LABEL_436;
  }
  if (**(_DWORD **)(v103 + 8) != 9)
  {
    uint64_t v104 = "expected end of directive";
    goto LABEL_436;
  }
LABEL_353:
  if ((v55 & 0x80) != 0
  {
    return 1;
  }
  v40 |= v55;
LABEL_140:
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 40))(a1[1]) + 8) != 9)
  {
    BOOL v58 = "expected end of directive";
LABEL_335:
    *(void *)&long long v160 = v58;
    __int16 v162 = 259;
    uint64_t v101 = a1[1];
    uint64_t v12 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)v101 + 40))(v101) + 96);
    uint64_t v13 = v101;
    goto LABEL_336;
  }
  (*(void (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]);
  if (*((void *)&v159 + 1))
  {
    switch(*((void *)&v159 + 1))
    {
      case 4:
        if (*(_DWORD *)v159 == 1702129518) {
          goto LABEL_246;
        }
        goto LABEL_331;
      case 6:
        if (*(_DWORD *)v159 == 1768058734 && *(_WORD *)(v159 + 4) == 29556) {
          goto LABEL_241;
        }
        if (*(_DWORD *)v159 != 1769434741 || *(_WORD *)(v159 + 4) != 25710) {
          goto LABEL_331;
        }
        int v83 = 1879048193;
        goto LABEL_360;
      case 8:
        if (*(void *)v159 != 0x73746962676F7270) {
          goto LABEL_331;
        }
        int v83 = 1;
        goto LABEL_360;
      case 0xALL:
        if (*(void *)v159 == 0x7272615F74696E69 && *(_WORD *)(v159 + 8) == 31073) {
          goto LABEL_341;
        }
        if (*(void *)v159 == 0x7272615F696E6966 && *(_WORD *)(v159 + 8) == 31073) {
          goto LABEL_243;
        }
        goto LABEL_331;
      case 0xBLL:
        if (*(void *)v159 != 0x72646F5F6D766C6CLL || *(void *)(v159 + 3) != 0x62617472646F5F6DLL) {
          goto LABEL_331;
        }
        int v83 = 1879002112;
        goto LABEL_360;
      case 0xCLL:
        if (*(void *)v159 != 0x6D79735F6D766C6CLL || *(_DWORD *)(v159 + 8) != 1953653104) {
          goto LABEL_331;
        }
        int v91 = 5;
        goto LABEL_323;
      case 0xDLL:
        if (*(void *)v159 != 0x5F74696E69657270 || *(void *)(v159 + 5) != 0x79617272615F7469) {
          goto LABEL_331;
        }
        int v83 = 16;
        goto LABEL_360;
      case 0xFLL:
        if (*(void *)v159 != 0x66666F5F6D766C6CLL || *(void *)(v159 + 7) != 0x676E6964616F6C66) {
          goto LABEL_331;
        }
        int v91 = 11;
        goto LABEL_323;
      case 0x10:
        if (*(void *)v159 != 0x5F62625F6D766C6CLL || *(void *)(v159 + 8) != 0x70616D5F72646461) {
          goto LABEL_331;
        }
        int v91 = 10;
        goto LABEL_323;
      case 0x13:
        if (*(void *)v159 != 0x6E696C5F6D766C6CLL
          || *(void *)(v159 + 8) != 0x6974706F5F72656BLL
          || *(void *)(v159 + 11) != 0x736E6F6974706F5FLL)
        {
          goto LABEL_331;
        }
        int v83 = 1879002113;
        goto LABEL_360;
      case 0x17:
        if (*(void *)v159 != 0x6C61635F6D766C6CLL
          || *(void *)(v159 + 8) != 0x5F68706172675F6CLL
          || *(void *)(v159 + 15) != 0x656C69666F72705FLL)
        {
          goto LABEL_331;
        }
        int v91 = 9;
LABEL_323:
        int v83 = v91 | 0x6FFF4C00;
        goto LABEL_360;
      case 0x18:
        if (*(void *)v159 != 0x7065645F6D766C6CLL
          || *(void *)(v159 + 8) != 0x6C5F746E65646E65
          || *(void *)(v159 + 16) != 0x7365697261726269)
        {
          goto LABEL_331;
        }
        int v83 = 1879002116;
        goto LABEL_360;
      default:
LABEL_331:
        unint64_t v148 = 0;
        long long v160 = v159;
        if ((llvm::consumeUnsignedInteger((llvm *)&v160, 0, &v148, v57) & 1) == 0 && !*((void *)&v160 + 1))
        {
          int v83 = v148;
          if (!HIDWORD(v148)) {
            goto LABEL_360;
          }
        }
        BOOL v58 = "unknown section type";
        break;
    }
    goto LABEL_335;
  }
  if (v10 >= 5)
  {
    if (*(_DWORD *)v11 == 1953459758 && *(unsigned char *)(v11 + 4) == 101)
    {
LABEL_246:
      int v83 = 7;
      goto LABEL_360;
    }
    if (v10 >= 0xB)
    {
      BOOL v82 = *(void *)v11 == 0x72615F74696E692ELL && *(void *)(v11 + 3) == 0x79617272615F7469;
      if (v82 && (v10 < 0xC || *(unsigned char *)(v11 + 11) == 46))
      {
LABEL_341:
        int v83 = 14;
        goto LABEL_360;
      }
    }
    if (*(_DWORD *)v11 == 1936941614 && *(unsigned char *)(v11 + 4) == 46) {
      goto LABEL_241;
    }
  }
  else if (v10 == 4 && *(_DWORD *)v11 == 1936941614)
  {
    goto LABEL_241;
  }
  if (hasPrefix((unsigned __int8 *)v11, v10, ".tbss", 5uLL))
  {
LABEL_241:
    int v83 = 8;
    goto LABEL_360;
  }
  if (hasPrefix((unsigned __int8 *)v11, v10, ".fini_array", 0xBuLL))
  {
LABEL_243:
    int v83 = 15;
  }
  else if (hasPrefix((unsigned __int8 *)v11, v10, ".preinit_array", 0xEuLL))
  {
    int v83 = 16;
  }
  else
  {
    int v83 = 1;
  }
LABEL_360:
  if (v56)
  {
    uint64_t v105 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 56))(a1[1]);
    uint64_t v106 = *(unsigned int *)(v105 + 152);
    if (v106)
    {
      uint64_t v107 = *(void *)(*(void *)(v105 + 144) + 32 * v106 - 32);
      if (v107)
      {
        uint64_t v108 = *(void *)(v107 + 240);
        unint64_t v109 = (unsigned char *)(v108 & 0xFFFFFFFFFFFFFFF8);
        if ((v108 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if ((*v109 & 4) != 0)
          {
            v112 = (uint64_t *)*((void *)v109 - 1);
            uint64_t v113 = *v112;
            v110 = v112 + 2;
            uint64_t v111 = v113;
          }
          else
          {
            v110 = 0;
            uint64_t v111 = 0;
          }
          unint64_t v156 = (unint64_t)v110;
          uint64_t v157 = v111;
          BOOL v155 = (v108 & 4) != 0;
          v40 |= 0x200u;
        }
      }
    }
  }
  uint64_t v114 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 48))(a1[1]);
  __int16 v162 = 261;
  *(void *)&long long v160 = v11;
  *((void *)&v160 + 1) = v10;
  __int16 v151 = 261;
  unint64_t v148 = v156;
  uint64_t v149 = v157;
  uint64_t ELFSection = llvm::MCContext::getELFSection(v114, (llvm::Twine *)&v160, v83, v40, v158, (llvm::Twine *)&v148, v155, v152, (unsigned char *)v153);
  uint64_t v116 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 56))(a1[1]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v116 + 168))(v116, ELFSection, v154);
  if (*((void *)&v159 + 1) && *(_DWORD *)(ELFSection + 224) != v83)
  {
    int v117 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 48))(a1[1]) + 48);
    if (v117 == 38)
    {
      if (v10 == 9)
      {
        int v118 = *(unsigned __int8 *)(v11 + 8);
        BOOL v119 = *(void *)v11 == 0x6D6172665F68652ELL;
        int v120 = 101;
        goto LABEL_376;
      }
    }
    else if (v10 >= 7 && (v117 & 0xFFFFFFFC) == 0x10)
    {
      int v118 = *(_DWORD *)(v11 + 3);
      BOOL v119 = *(_DWORD *)v11 == 1650811950;
      int v120 = 1600615778;
LABEL_376:
      int v122 = !v119 || v118 != v120;
      if (v83 == 1 && !v122) {
        goto LABEL_400;
      }
    }
    __int16 v147 = 1283;
    v144[0] = "changed section type for ";
    uint64_t v145 = v11;
    size_t v146 = v10;
    unint64_t v148 = (unint64_t)v144;
    unint64_t v150 = ", expected: 0x";
    __int16 v151 = 770;
    unint64_t v123 = *(unsigned int *)(ELFSection + 224);
    if (v123)
    {
      uint64_t v124 = (char *)&v161 + 1;
      do
      {
        *--uint64_t v124 = llvm::hexdigit(unsigned int,BOOL)::LUT[v123 & 0xF];
        BOOL v125 = v123 > 0xF;
        v123 >>= 4;
      }
      while (v125);
    }
    else
    {
      uint64_t v124 = (char *)&v161;
      LOBYTE(v161) = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(__p, v124, (char *)&v161 + 1, (char *)&v161 + 1 - v124);
    char v126 = v151;
    if (v151 == 1)
    {
      *(void *)&long long v160 = __p;
      long long v161 = v143;
      __int16 v162 = 260;
      int v163 = v141;
      __int16 v164 = v142;
    }
    else if ((_BYTE)v151)
    {
      if (HIBYTE(v151) != 1) {
        char v126 = 2;
      }
      v127 = &v148;
      if (HIBYTE(v151) == 1) {
        v127 = (unint64_t *)v148;
      }
      *(void *)&long long v160 = v127;
      *((void *)&v160 + 1) = v149;
      *(void *)&long long v161 = __p;
      LOBYTE(v162) = v126;
      HIBYTE(v162) = 4;
    }
    else
    {
      __int16 v162 = 256;
    }
    llvm::MCAsmParser::Error(a1[1], a3, (llvm::Twine *)&v160, 0, 0);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_400:
  uint64_t v128 = v158;
  uint64_t v129 = *((void *)&v159 + 1);
  if (v55 || v158 || *((void *)&v159 + 1))
  {
    unint64_t v130 = *(unsigned int *)(ELFSection + 228);
    if (v130 != v40)
    {
      __int16 v147 = 1283;
      v144[0] = "changed section flags for ";
      uint64_t v145 = v11;
      size_t v146 = v10;
      unint64_t v148 = (unint64_t)v144;
      unint64_t v150 = ", expected: 0x";
      __int16 v151 = 770;
      if (v130)
      {
        uint64_t v131 = (char *)&v161 + 1;
        do
        {
          *--uint64_t v131 = llvm::hexdigit(unsigned int,BOOL)::LUT[v130 & 0xF];
          BOOL v125 = v130 > 0xF;
          v130 >>= 4;
        }
        while (v125);
      }
      else
      {
        uint64_t v131 = (char *)&v161;
        LOBYTE(v161) = 48;
      }
      std::string::__init_with_size[abi:nn180100]<char *,char *>(__p, v131, (char *)&v161 + 1, (char *)&v161 + 1 - v131);
      char v132 = v151;
      if (v151 == 1)
      {
        *(void *)&long long v160 = __p;
        long long v161 = v143;
        __int16 v162 = 260;
        int v163 = v141;
        __int16 v164 = v142;
      }
      else if ((_BYTE)v151)
      {
        if (HIBYTE(v151) != 1) {
          char v132 = 2;
        }
        v133 = &v148;
        if (HIBYTE(v151) == 1) {
          v133 = (unint64_t *)v148;
        }
        *(void *)&long long v160 = v133;
        *((void *)&v160 + 1) = v149;
        *(void *)&long long v161 = __p;
        LOBYTE(v162) = v132;
        HIBYTE(v162) = 4;
      }
      else
      {
        __int16 v162 = 256;
      }
      llvm::MCAsmParser::Error(a1[1], a3, (llvm::Twine *)&v160, 0, 0);
      if (v140 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v128 = v158;
      uint64_t v129 = *((void *)&v159 + 1);
    }
  }
  else
  {
    uint64_t v128 = 0;
  }
  if (v55 || v128 || v129)
  {
    uint64_t v134 = *(unsigned int *)(ELFSection + 236);
    if (v128 != v134)
    {
      __int16 v147 = 1283;
      v144[0] = "changed section entsize for ";
      uint64_t v145 = v11;
      size_t v146 = v10;
      unint64_t v148 = (unint64_t)v144;
      unint64_t v150 = ", expected: ";
      __int16 v151 = 770;
      *(void *)&long long v160 = &v148;
      *(void *)&long long v161 = v134;
      __int16 v162 = 2050;
      llvm::MCAsmParser::Error(a1[1], a3, (llvm::Twine *)&v160, 0, 0);
    }
  }
  if (!*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 48))(a1[1]) + 1601)
    || (~*(_DWORD *)(ELFSection + 228) & 6) != 0)
  {
    return 0;
  }
  uint64_t v135 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 48))(a1[1]);
  *(void *)&long long v160 = ELFSection;
  uint64_t result = llvm::SetVector<llvm::MCSection *,std::vector<llvm::MCSection *>,llvm::DenseSet<llvm::MCSection *,llvm::DenseMapInfo<llvm::MCSection *,void>>>::insert((void *)(v135 + 1608), &v160);
  if (result)
  {
    if (*(unsigned __int16 *)((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 48))(a1[1]) + 1712) <= 2u)
    {
      *(void *)&long long v160 = "DWARF2 only supports one section per compilation unit";
      __int16 v162 = 259;
      (*(void (**)(uint64_t, uint64_t, long long *, void, void))(*(void *)a1[1] + 168))(a1[1], a3, &v160, 0, 0);
    }
    if (!*(void *)(ELFSection + 8))
    {
      v136 = (llvm::MCContext *)(*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 48))(a1[1]);
      *(void *)&long long v160 = "tmp";
      __int16 v162 = 259;
      Tempunint64_t Symbol = llvm::MCContext::createTempSymbol(v136, (const llvm::Twine *)&v160, 1);
      uint64_t v138 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 56))(a1[1]);
      (*(void (**)(uint64_t, unint64_t, void))(*(void *)v138 + 192))(v138, TempSymbol, 0);
      uint64_t result = 0;
      *(void *)(ELFSection + 8) = TempSymbol;
      return result;
    }
    return 0;
  }
  return result;
}

BOOL hasPrefix(unsigned __int8 *__s1, size_t a2, void *__s2, size_t __n)
{
  if (a2 < __n) {
    return 0;
  }
  if (__n && memcmp(__s1, __s2, __n)) {
    return 0;
  }
  if (a2 <= __n) {
    return 1;
  }
  return __s1[__n] == 46;
}

uint64_t anonymous namespace'::ELFAsmParser::parseMergeSize(_anonymous_namespace_::ELFAsmParser *this, uint64_t *a2)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1)) + 8) != 25)
  {
    unint64_t v5 = "expected the entry size";
LABEL_6:
    __int16 v8 = v5;
    __int16 v9 = 259;
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)&v8, 0, 0);
    return 1;
  }
  (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
  if (((*(uint64_t (**)(void))(**((void **)this + 1) + 256))() & 1) == 0)
  {
    if (*a2 > 0) {
      return 0;
    }
    unint64_t v5 = "entry size must be positive";
    goto LABEL_6;
  }
  return 1;
}

uint64_t anonymous namespace'::ELFAsmParser::parseGroup(_anonymous_namespace_::ELFAsmParser *this, llvm::StringRef *a2, BOOL *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  if (**(_DWORD **)(v6 + 8) == 25)
  {
    uint64_t v7 = v6;
    (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
    uint64_t v8 = **((void **)this + 1);
    if (**(_DWORD **)(v7 + 8) == 4)
    {
      *(_OWORD *)a2 = *(_OWORD *)(*(void *)((*(uint64_t (**)(void))(v8 + 40))() + 8) + 8);
      (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
    }
    else if ((*(unsigned int (**)(void))(v8 + 192))())
    {
      __int16 v9 = "invalid group name";
      goto LABEL_5;
    }
    if (**(_DWORD **)(v7 + 8) != 25)
    {
      uint64_t result = 0;
      *a3 = 0;
      return result;
    }
    (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    if ((*(unsigned int (**)(void, uint64_t *))(**((void **)this + 1) + 192))(*((void *)this + 1), &v14))
    {
      __int16 v9 = "invalid linkage";
    }
    else
    {
      if (v15 == 6 && *(_DWORD *)v14 == 1684893539 && *(_WORD *)(v14 + 4) == 29793)
      {
        uint64_t result = 0;
        *a3 = 1;
        return result;
      }
      __int16 v9 = "Linkage must be 'comdat'";
    }
  }
  else
  {
    __int16 v9 = "expected group name";
  }
LABEL_5:
  uint64_t v16 = v9;
  __int16 v17 = 259;
  uint64_t v10 = *((void *)this + 1);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 40))(v10);
  llvm::MCAsmParser::Error(v10, *(void *)(v11 + 96), (llvm::Twine *)&v16, 0, 0);
  return 1;
}

uint64_t anonymous namespace'::ELFAsmParser::parseLinkedToSym(uint64_t a1, llvm::MCSymbol **a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (**(_DWORD **)(v4 + 8) != 25)
  {
    uint64_t v11 = "expected linked-to symbol";
LABEL_12:
    v18[0] = v11;
    __int16 v19 = 259;
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14);
    llvm::MCAsmParser::Error(v14, *(void *)(v15 + 96), (llvm::Twine *)v18, 0, 0);
    return 1;
  }
  uint64_t v5 = v4;
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v6 = *(void *)(v5 + 96);
  int v7 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v16);
  uint64_t v8 = **(void **)(a1 + 8);
  if (v7)
  {
    uint64_t v9 = *(void *)((*(uint64_t (**)(void))(v8 + 40))() + 8);
    if (*(void *)(v9 + 16) == 1 && **(unsigned char **)(v9 + 8) == 48)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t result = 0;
      *a2 = 0;
      return result;
    }
    uint64_t v11 = "invalid linked-to symbol";
    goto LABEL_12;
  }
  uint64_t v12 = (llvm::MCContext *)(*(uint64_t (**)(void))(v8 + 48))();
  __int16 v19 = 261;
  v18[0] = v16;
  v18[1] = v17;
  uint64_t v13 = (llvm::MCSymbol *)llvm::MCContext::lookupSymbol(v12, (const llvm::Twine *)v18);
  if (v13 && (*((_DWORD *)v13 + 2) & 0x380) == 0x100)
  {
    *a2 = v13;
    if (llvm::MCSymbol::isInSection(v13)) {
      return 0;
    }
  }
  else
  {
    *a2 = 0;
  }
  __int16 v19 = 1283;
  v18[0] = "linked-to symbol is not in a section: ";
  v18[2] = v16;
  v18[3] = v17;
  return llvm::MCAsmParser::Error(*(void *)(a1 + 8), v6, (llvm::Twine *)v18, 0, 0);
}

uint64_t anonymous namespace'::ELFAsmParser::maybeParseUniqueID(_anonymous_namespace_::ELFAsmParser *this, unint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  if (**(_DWORD **)(v4 + 8) == 25)
  {
    uint64_t v5 = v4;
    (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    if ((*(unsigned int (**)(void, uint64_t *))(**((void **)this + 1) + 192))(*((void *)this + 1), &v14))
    {
      uint64_t v6 = "expected identifier";
LABEL_10:
      v12[0] = v6;
      __int16 v13 = 259;
      uint64_t v8 = *((void *)this + 1);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
      llvm::MCAsmParser::Error(v8, *(void *)(v9 + 96), (llvm::Twine *)v12, 0, 0);
      return 1;
    }
    if (v15 != 6 || (*(_DWORD *)v14 == 1902734965 ? (BOOL v7 = *(unsigned __int16 *)(v14 + 4) == 25973) : (BOOL v7 = 0), !v7))
    {
      uint64_t v6 = "expected 'unique'";
      goto LABEL_10;
    }
    if (**(_DWORD **)(v5 + 8) != 25)
    {
      uint64_t v6 = "expected commma";
      goto LABEL_10;
    }
    (*(void (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
    if ((*(uint64_t (**)(void))(**((void **)this + 1) + 256))()) {
      return 1;
    }
    if ((*a2 & 0x8000000000000000) != 0)
    {
      uint64_t v11 = "unique id must be positive";
      goto LABEL_21;
    }
    if (*a2 >= 0xFFFFFFFF)
    {
      uint64_t v11 = "unique id is too large";
LABEL_21:
      v12[0] = v11;
      __int16 v13 = 259;
      return llvm::MCAsmParser::TokError(*((void *)this + 1), (llvm::Twine *)v12, 0, 0);
    }
  }
  return 0;
}

unint64_t llvm::MCSymbol::isInSection(llvm::MCSymbol *this)
{
  unint64_t result = llvm::MCSymbol::getFragment(this, 1);
  if (result) {
    return llvm::MCSymbol::getFragment(this, 1) != llvm::MCSymbol::AbsolutePseudoFragment;
  }
  return result;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectivePushSection>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (llvm::MCStreamer *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  llvm::MCStreamer::pushSection(v6);
  if (v7)
  {
    uint64_t v8 = (llvm::MCStreamer *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    llvm::MCStreamer::popSection(v8);
  }
  return v7;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectivePopSection>(uint64_t a1)
{
  int v2 = (llvm::MCStreamer *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  BOOL v3 = llvm::MCStreamer::popSection(v2);
  if (!v3)
  {
    uint64_t v7 = ".popsection without corresponding .pushsection";
    __int16 v8 = 259;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(void *)(v5 + 96), (llvm::Twine *)&v7, 0, 0);
  }
  return !v3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectiveSize>(uint64_t a1)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v11))
  {
    int v2 = "expected identifier";
LABEL_9:
    v9[0] = v2;
    __int16 v10 = 259;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v9, 0, 0);
    return 1;
  }
  BOOL v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  __int16 v10 = 261;
  v9[0] = v11;
  v9[1] = v12;
  llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v9);
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
  {
    int v2 = "expected comma";
    goto LABEL_9;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v8 = 0;
  v9[0] = 0;
  if (((*(uint64_t (**)(void, uint64_t *, void *))(**(void **)(a1 + 8) + 232))(*(void *)(a1 + 8), &v8, v9) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v4 + 424))();
      return 0;
    }
    int v2 = "unexpected token";
    goto LABEL_9;
  }
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectivePrevious>(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  uint64_t v3 = *(unsigned int *)(v2 + 152);
  if (v3 && (v4 = *(void *)(v2 + 144) + 32 * v3, (uint64_t v5 = *(void *)(v4 - 16)) != 0))
  {
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 168))(v7, v5, v6);
    return 0;
  }
  else
  {
    uint64_t v11 = ".previous without corresponding .section";
    __int16 v12 = 259;
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
    llvm::MCAsmParser::Error(v9, *(void *)(v10 + 96), (llvm::Twine *)&v11, 0, 0);
    return 1;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectiveType>(uint64_t a1)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v29))
  {
    uint64_t v2 = "expected identifier";
  }
  else
  {
    uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v28 = 261;
    v27[0] = v29;
    v27[1] = v30;
    llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v27);
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 25) {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    }
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 2
      && **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 37
      && **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 36
      && **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 3)
    {
      if (!*(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 105))
      {
        uint64_t v2 = "expected STT_<TYPE_IN_UPPER_CASE>, '#<type>', '%<type>' or \"<type>\"";
        goto LABEL_16;
      }
      if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 45)
      {
        uint64_t v2 = "expected STT_<TYPE_IN_UPPER_CASE>, '#<type>', '@<type>', '%<type>' or \"<type>\"";
        goto LABEL_16;
      }
    }
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 3
      && **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 2)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    }
    uint64_t v4 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 96);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v25))
    {
      uint64_t v2 = "expected symbol type";
    }
    else
    {
      switch(v26)
      {
        case 6:
          if (*(_DWORD *)v25 == 1701470831 && *(_WORD *)(v25 + 4) == 29795) {
            goto LABEL_78;
          }
          if (*(_DWORD *)v25 == 1835888483 && *(_WORD *)(v25 + 4) == 28271) {
            goto LABEL_78;
          }
          int v10 = *(unsigned __int16 *)(v25 + 4);
          BOOL v11 = *(_DWORD *)v25 == 2037673838;
          int v12 = 25968;
          goto LABEL_49;
        case 7:
          if (*(_DWORD *)v25 != 1599362131 || *(_DWORD *)(v25 + 3) != 1397511263) {
            goto LABEL_73;
          }
          goto LABEL_78;
        case 8:
          if (*(void *)v25 == 0x434E55465F545453 || *(void *)v25 == 0x6E6F6974636E7566) {
            goto LABEL_78;
          }
          goto LABEL_73;
        case 10:
          if ((*(void *)v25 != 0x454A424F5F545453 || *(_WORD *)(v25 + 8) != 21571)
            && (*(void *)v25 != 0x656A626F5F736C74 || *(_WORD *)(v25 + 8) != 29795)
            && (*(void *)v25 != 0x4D4D4F435F545453 || *(_WORD *)(v25 + 8) != 20047))
          {
            int v10 = *(unsigned __int16 *)(v25 + 8);
            BOOL v11 = *(void *)v25 == 0x59544F4E5F545453;
            int v12 = 17744;
LABEL_49:
            if (!v11 || v10 != v12) {
              goto LABEL_73;
            }
          }
          goto LABEL_78;
        case 13:
          uint64_t v18 = *(void *)(v25 + 5);
          BOOL v19 = *(void *)v25 == 0x5F554E475F545453;
          uint64_t v20 = 0x434E5546495F554ELL;
          goto LABEL_69;
        case 17:
          if (*(void *)v25 != 0x71696E755F756E67
            || *(void *)(v25 + 8) != 0x63656A626F5F6575
            || *(unsigned char *)(v25 + 16) != 116)
          {
            goto LABEL_73;
          }
          goto LABEL_78;
        case 21:
          uint64_t v18 = *(void *)(v25 + 13);
          BOOL v19 = *(void *)v25 == 0x69646E695F756E67 && *(void *)(v25 + 8) == 0x6E75665F74636572;
          uint64_t v20 = 0x6E6F6974636E7566;
LABEL_69:
          if (!v19 || v18 != v20) {
            goto LABEL_73;
          }
LABEL_78:
          if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
          {
            (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
            uint64_t v24 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
            (*(void (**)(void))(v24 + 296))();
            return 0;
          }
          uint64_t v2 = "expected end of directive";
          break;
        default:
LABEL_73:
          v27[0] = "unsupported attribute";
          __int16 v28 = 259;
          return llvm::MCAsmParser::Error(*(void *)(a1 + 8), v4, (llvm::Twine *)v27, 0, 0);
      }
    }
  }
LABEL_16:
  v27[0] = v2;
  __int16 v28 = 259;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
  llvm::MCAsmParser::Error(v5, *(void *)(v6 + 96), (llvm::Twine *)v27, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectiveIdent>(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 3)
  {
    (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v3 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      (*(void (**)(void))(v3 + 672))();
      return 0;
    }
    uint64_t v2 = "expected end of directive";
  }
  else
  {
    uint64_t v2 = "expected string";
  }
  uint64_t v7 = v2;
  __int16 v8 = 259;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 40))(v5);
  llvm::MCAsmParser::Error(v5, *(void *)(v6 + 96), (llvm::Twine *)&v7, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectiveSymver>(uint64_t a1)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  __s = 0;
  size_t __n = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if (!(*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v20))
  {
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
    {
      uint64_t v3 = "expected a comma";
      goto LABEL_18;
    }
    char v2 = *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 105);
    *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 105) = 1;
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 105) = v2;
    if (!(*(unsigned int (**)(void, void **))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &__s))
    {
      if (!__n || (v4 = __s, (uint64_t v5 = memchr(__s, 64, __n)) == 0) || v5 - v4 == -1)
      {
        uint64_t v3 = "expected a '@' in the name";
        goto LABEL_18;
      }
      BOOL v6 = llvm::StringRef::find((uint64_t *)&__s, "@@@", 3uLL, 0) == -1;
      if (llvm::MCAsmParser::parseOptionalToken(*(llvm::MCAsmParser **)(a1 + 8), 25))
      {
        if (((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v16) & 1) != 0
          || v17 != 6
          || (*(_DWORD *)v16 == 1869440370 ? (BOOL v7 = *(unsigned __int16 *)(v16 + 4) == 25974) : (BOOL v7 = 0), !v7))
        {
          uint64_t v3 = "expected 'remove'";
          goto LABEL_18;
        }
        BOOL v6 = 0;
      }
      llvm::MCAsmParser::parseOptionalToken(*(llvm::MCAsmParser **)(a1 + 8), 9);
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
      int v12 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
      __int16 v15 = 261;
      v14[0] = v20;
      v14[1] = v21;
      unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v12, (const llvm::Twine *)v14);
      (*(void (**)(uint64_t, unint64_t, void *, size_t, BOOL))(*(void *)v11 + 432))(v11, Symbol, __s, __n, v6);
      return 0;
    }
  }
  uint64_t v3 = "expected identifier";
LABEL_18:
  v14[0] = v3;
  __int16 v15 = 259;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
  llvm::MCAsmParser::Error(v8, *(void *)(v9 + 96), (llvm::Twine *)v14, 0, 0);
  return 1;
}

BOOL llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectiveVersion>(uint64_t a1)
{
  int v2 = **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  if (v2 == 3)
  {
    (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v5 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    uint64_t v18 = ".note";
    __int16 v19 = 259;
    __int16 v21 = 257;
    uint64_t ELFSection = llvm::MCContext::getELFSection(v5, (llvm::Twine *)&v18, 7, 0, 0, (llvm::Twine *)v20, 0, -1, 0);
    BOOL v7 = (llvm::MCStreamer *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    __n128 v8 = llvm::MCStreamer::pushSection(v7);
    uint64_t v9 = (*(uint64_t (**)(void, __n128))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8), v8);
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v9 + 168))(v9, ELFSection, 0);
    uint64_t v10 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v10 + 512))();
    uint64_t v11 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v11 + 512))();
    uint64_t v12 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v12 + 512))();
    uint64_t v13 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v13 + 488))();
    uint64_t v14 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v14 + 512))();
    uint64_t v15 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v15 + 632))();
    uint64_t v16 = (llvm::MCStreamer *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    llvm::MCStreamer::popSection(v16);
  }
  else
  {
    v20[0] = "expected string";
    __int16 v21 = 259;
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(void *)(v4 + 96), (llvm::Twine *)v20, 0, 0);
  }
  return v2 != 3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectiveWeakref>(uint64_t a1)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if ((*(unsigned int (**)(void, const char **))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v17))
  {
    int v2 = "expected identifier";
LABEL_7:
    uint64_t v14 = v2;
    __int16 v16 = 259;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)&v14, 0, 0);
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
  {
    int v2 = "expected a comma";
    goto LABEL_7;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v3 = (*(uint64_t (**)(void, const char **))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v12);
  if (v3)
  {
    uint64_t v14 = "expected identifier";
    __int16 v16 = 259;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(void *)(v5 + 96), (llvm::Twine *)&v14, 0, 0);
  }
  else
  {
    uint64_t v9 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v16 = 261;
    uint64_t v14 = v17;
    uint64_t v15 = v18;
    llvm::MCContext::getOrCreateSymbol(v9, (const llvm::Twine *)&v14);
    uint64_t v10 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v16 = 261;
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    llvm::MCContext::getOrCreateSymbol(v10, (const llvm::Twine *)&v14);
    uint64_t v11 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v11 + 288))();
  }
  return v3;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectiveSymbolAttribute>(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
  {
LABEL_2:
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if ((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v12))
  {
LABEL_11:
    uint64_t v7 = "expected identifier";
    goto LABEL_12;
  }
  while (1)
  {
    int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), v12, v13);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3)
    {
      if (**(_DWORD **)((*(uint64_t (**)(void))(v4 + 40))() + 8) == 9) {
        goto LABEL_2;
      }
      goto LABEL_10;
    }
    uint64_t v5 = (llvm::MCContext *)(*(uint64_t (**)(void))(v4 + 48))();
    __int16 v11 = 261;
    v10[0] = v12;
    v10[1] = v13;
    llvm::MCContext::getOrCreateSymbol(v5, (const llvm::Twine *)v10);
    uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v6 + 296))();
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9) {
      goto LABEL_2;
    }
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25) {
      break;
    }
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
LABEL_10:
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if ((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v12)) {
      goto LABEL_11;
    }
  }
  uint64_t v7 = "expected comma";
LABEL_12:
  v10[0] = v7;
  __int16 v11 = 259;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 40))(v8);
  llvm::MCAsmParser::Error(v8, *(void *)(v9 + 96), (llvm::Twine *)v10, 0, 0);
  return 1;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::ELFAsmParser,&anonymous namespace'::ELFAsmParser::ParseDirectiveSubsection>(uint64_t a1)
{
  uint64_t v10 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 9)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    v8[0] = 0;
    if ((*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)v2 + 232))(v2, &v10, v8)) {
      return 1;
    }
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 9)
  {
    v8[0] = "expected end of directive";
    __int16 v9 = 259;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v8, 0, 0);
    return 1;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  uint64_t v4 = *(unsigned int *)(v3 + 152);
  if (v4) {
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v3 + 168))(v3, *(void *)(*(void *)(v3 + 144) + 32 * v4 - 32), v10);
  }
  return 0;
}

llvm::MCAsmLexer *llvm::MCAsmLexer::MCAsmLexer(llvm::MCAsmLexer *this)
{
  *(void *)this = &unk_270DC1D38;
  *((void *)this + 1) = (char *)this + 24;
  *((void *)this + 2) = 0x100000000;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 104) = 1;
  *((_WORD *)this + 53) = 256;
  *((_DWORD *)this + 27) = 0;
  *((unsigned char *)this + 112) = 0;
  *((_DWORD *)this + 29) = 10;
  *((_WORD *)this + 60) = 0;
  *((void *)this + 16) = 0;
  int v4 = 11;
  long long v3 = 0uLL;
  llvm::SmallVectorImpl<llvm::AsmToken>::emplace_back<llvm::AsmToken::TokenKind,llvm::StringRef>((uint64_t)this + 8, &v4, &v3);
  return this;
}

uint64_t llvm::SmallVectorImpl<llvm::AsmToken>::emplace_back<llvm::AsmToken::TokenKind,llvm::StringRef>(uint64_t a1, _DWORD *a2, long long *a3)
{
  unsigned int v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    return llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::growAndEmplaceBack<llvm::AsmToken::TokenKind,llvm::StringRef>(a1, a2, a3);
  }
  else
  {
    uint64_t v5 = *(void *)a1 + 40 * v4;
    *(_DWORD *)uint64_t v5 = *a2;
    long long v6 = *a3;
    *(void *)(v5 + 24) = 0;
    v5 += 24;
    *(_OWORD *)(v5 - 16) = v6;
    *(_DWORD *)(v5 + 8) = 64;
    llvm::APInt::clearUnusedBits(v5);
    unsigned int v7 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v7;
    return *(void *)a1 + 40 * v7 - 40;
  }
}

void llvm::MCAsmLexer::~MCAsmLexer(void **this)
{
  *this = &unk_270DC1D38;
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  llvm::SmallVector<llvm::AsmToken,1u>::~SmallVector((uint64_t)(this + 1));
}

uint64_t llvm::SmallVector<llvm::AsmToken,1u>::~SmallVector(uint64_t a1)
{
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::growAndEmplaceBack<llvm::AsmToken::TokenKind,llvm::StringRef>(uint64_t a1, _DWORD *a2, long long *a3)
{
  uint64_t v13 = 0;
  uint64_t v6 = a1 + 16;
  unsigned int v7 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 40, &v13);
  uint64_t v8 = (uint64_t)v7 + 40 * *(unsigned int *)(a1 + 8);
  *(_DWORD *)uint64_t v8 = *a2;
  long long v9 = *a3;
  *(void *)(v8 + 24) = 0;
  v8 += 24;
  *(_OWORD *)(v8 - 16) = v9;
  *(_DWORD *)(v8 + 8) = 64;
  llvm::APInt::clearUnusedBits(v8);
  llvm::SmallVectorTemplateBase<llvm::AsmToken,false>::moveElementsForGrow(a1, (uint64_t)v7);
  int v10 = v13;
  if (*(void *)a1 != v6) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  unsigned int v11 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v10;
  return (uint64_t)v7 + 40 * v11 - 40;
}

BOOL llvm::MCAsmParser::parseEOL(llvm::MCAsmParser *this)
{
  int v2 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)this + 40))(this) + 8);
  uint64_t v3 = *(void *)this;
  if (v2 == 9)
  {
    (*(void (**)(llvm::MCAsmParser *))(v3 + 184))(this);
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)((*(uint64_t (**)(llvm::MCAsmParser *))(v3 + 40))(this) + 8) + 8);
    uint64_t v6 = "expected newline";
    __int16 v7 = 259;
    llvm::MCAsmParser::Error((uint64_t)this, v4, (llvm::Twine *)&v6, 0, 0);
  }
  return v2 != 9;
}

uint64_t llvm::MCAsmParser::Error(uint64_t a1, uint64_t a2, llvm::Twine *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  long long v13 = xmmword_261E8ACE0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v11 = a2;
  uint64_t v12 = v14;
  llvm::Twine::toVector(a3, (uint64_t)&v12);
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  __n128 v8 = llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back(a1 + 16, (unint64_t)&v11);
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 40))(a1, v8) + 8) == 1)
  {
    long long v9 = (llvm::MCAsmLexer *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    llvm::MCAsmLexer::Lex(v9);
  }
  if (v12 != v14) {
    free(v12);
  }
  return 1;
}

BOOL llvm::MCAsmParser::parseEOL(llvm::MCAsmParser *this, const llvm::Twine *a2)
{
  int v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)this + 40))(this) + 8);
  uint64_t v5 = *(void *)this;
  if (v4 == 9)
  {
    (*(void (**)(llvm::MCAsmParser *))(v5 + 184))(this);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(v5 + 40))(this);
    llvm::MCAsmParser::Error((uint64_t)this, *(void *)(*(void *)(v6 + 8) + 8), a2, 0, 0);
  }
  return v4 != 9;
}

BOOL llvm::MCAsmParser::parseToken(llvm::MCAsmParser *this, int a2, llvm::Twine *a3)
{
  if (a2 == 9)
  {
    return llvm::MCAsmParser::parseEOL(this, a3);
  }
  else
  {
    int v7 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)this + 40))(this) + 8);
    uint64_t v8 = *(void *)this;
    if (v7 == a2)
    {
      (*(void (**)(llvm::MCAsmParser *))(v8 + 184))(this);
      return 0;
    }
    else
    {
      uint64_t v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(v8 + 40))(this);
      llvm::MCAsmParser::Error((uint64_t)this, *(void *)(*(void *)(v9 + 8) + 8), a3, 0, 0);
      return 1;
    }
  }
}

BOOL llvm::MCAsmParser::parseIntToken(llvm::MCAsmParser *this, uint64_t *a2, const llvm::Twine *a3)
{
  int v6 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)this + 40))(this) + 8);
  uint64_t v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)this + 40))(this);
  if (v6 == 4)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    uint64_t v9 = (void *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u) {
      uint64_t v9 = (void *)*v9;
    }
    *a2 = *v9;
    (*(void (**)(llvm::MCAsmParser *))(*(void *)this + 184))(this);
  }
  else
  {
    llvm::MCAsmParser::Error((uint64_t)this, *(void *)(v7 + 96), a3, 0, 0);
  }
  return v6 != 4;
}

uint64_t llvm::MCAsmParser::TokError(uint64_t a1, llvm::Twine *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  llvm::MCAsmParser::Error(a1, *(void *)(v8 + 96), a2, a3, a4);
  return 1;
}

BOOL llvm::MCAsmParser::parseOptionalToken(llvm::MCAsmParser *a1, int a2)
{
  int v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a1 + 40))(a1) + 8);
  if (v4 == a2)
  {
    int v6 = "unexpected token";
    __int16 v7 = 259;
    llvm::MCAsmParser::parseToken(a1, a2, (llvm::Twine *)&v6);
  }
  return v4 == a2;
}

uint64_t llvm::MCAsmParser::check(llvm::MCAsmParser *this, uint64_t a2, const llvm::Twine *a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)this + 40))(this);
  if (a2) {
    llvm::MCAsmParser::Error((uint64_t)this, *(void *)(*(void *)(v6 + 8) + 8), a3, 0, 0);
  }
  return a2;
}

__n128 llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::push_back(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = (__n128 *)llvm::SmallVectorTemplateCommon<llvm::MCAsmParser::MCPendingError,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>>(a1, a2, 1);
  uint64_t v4 = *(void *)a1;
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void *)a1 + 112 * v5;
  *(void *)uint64_t v6 = v3->n128_u64[0];
  *(_OWORD *)(v6 + 16) = xmmword_261E8ACE0;
  *(void *)(v6 + 8) = v6 + 32;
  uint64_t v7 = v6 + 8;
  if (v3[1].n128_u64[0]) {
    llvm::SmallVectorImpl<char>::operator=(v7, (uint64_t)&v3->n128_i64[1]);
  }
  __n128 result = v3[6];
  *(__n128 *)(v4 + 112 * v5 + 96) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::MCAsmParser::addErrorSuffix(llvm::MCAsmParser *this, const llvm::Twine *a2)
{
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)this + 40))(this) + 8) == 1) {
    (*(void (**)(llvm::MCAsmParser *))(*(void *)this + 184))(this);
  }
  uint64_t v4 = *((unsigned int *)this + 6);
  if (v4)
  {
    uint64_t v5 = 112 * v4;
    uint64_t v6 = *((void *)this + 2) + 8;
    do
    {
      llvm::Twine::toVector(a2, v6);
      v6 += 112;
      v5 -= 112;
    }
    while (v5);
  }
  return 1;
}

uint64_t llvm::MCAsmParser::parseMany(llvm::MCAsmParser *a1, uint64_t (*a2)(uint64_t), uint64_t a3, int a4)
{
  if (llvm::MCAsmParser::parseOptionalToken(a1, 9)) {
    return 0;
  }
  if (a2(a3)) {
    return 1;
  }
  do
  {
    BOOL v9 = llvm::MCAsmParser::parseOptionalToken(a1, 9);
    if (v9) {
      break;
    }
    if (a4)
    {
      int v10 = "unexpected token";
      __int16 v11 = 259;
      if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v10)) {
        break;
      }
    }
  }
  while (!a2(a3));
  return !v9;
}

uint64_t llvm::MCAsmParser::getAssemblerDialect(llvm::MCAsmParser *this)
{
  return 0;
}

uint64_t llvm::MCAsmParser::discardLTOSymbol()
{
  return 0;
}

char **llvm::SmallVector<llvm::MCAsmParser::MCPendingError,0u>::~SmallVector(char **a1)
{
  int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 112 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 104];
      if (&v2[v4 - 80] != v5) {
        free(v5);
      }
      v4 -= 112;
    }
    while (v4);
    int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::MCAsmParser::MCPendingError,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 112 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::grow(a1, v5);
      return *(void *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::grow(a1, v5);
    }
  }
  return a2;
}

void llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 112, &v6);
  llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v4);
  int v5 = v6;
  if (*(void *)a1 != v3) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

void llvm::SmallVectorTemplateBase<llvm::MCAsmParser::MCPendingError,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = *a1 + 112 * v2;
    uint64_t v6 = *a1 + 8;
    do
    {
      uint64_t v7 = v6 - 8;
      *(void *)a2 = *(void *)(v6 - 8);
      *(void *)(a2 + 8) = a2 + 32;
      *(_OWORD *)(a2 + 16) = xmmword_261E8ACE0;
      if (*(void *)(v6 + 8)) {
        llvm::SmallVectorImpl<char>::operator=(a2 + 8, (const void **)v6);
      }
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(v6 + 88);
      a2 += 112;
      v6 += 112;
    }
    while (v7 + 112 != v5);
    uint64_t v8 = *((unsigned int *)a1 + 2);
    if (v8)
    {
      uint64_t v9 = *a1;
      uint64_t v10 = 112 * v8;
      do
      {
        __int16 v11 = *(void **)(v9 + v10 - 104);
        if ((void *)(v9 + v10 - 80) != v11) {
          free(v11);
        }
        v10 -= 112;
      }
      while (v10);
    }
  }
}

uint64_t _GLOBAL__sub_I_MCAsmParser_cpp()
{
  uint64_t v4 = &v3;
  int v2 = 1;
  int v3 = 20;
  v1.n128_u64[0] = (unint64_t)"The maximum nesting depth allowed for assembly macros.";
  v1.n128_u64[1] = 54;
  llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::opt<char [28],llvm::cl::initializer<int>,llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&llvm::AsmMacroMaxNestingDepth, "asm-macro-max-nesting-depth", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::AsmMacroMaxNestingDepth, &dword_261C2B000);
}

uint64_t llvm::MCAsmParserExtension::ParseDirectiveCGProfile(uint64_t a1)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 96);
  if ((*(unsigned int (**)(void, const char **))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v24))
  {
    goto LABEL_2;
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25) {
    goto LABEL_9;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  __int16 v19 = 0;
  uint64_t v20 = 0;
  uint64_t v4 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 96);
  if ((*(unsigned int (**)(void, const char **))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v19))
  {
LABEL_2:
    int v3 = "expected identifier in directive";
LABEL_10:
    __int16 v21 = v3;
    __int16 v23 = 259;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16);
    llvm::MCAsmParser::Error(v16, *(void *)(v17 + 96), (llvm::Twine *)&v21, 0, 0);
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
  {
LABEL_9:
    int v3 = "expected a comma";
    goto LABEL_10;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  uint64_t v18 = 0;
  uint64_t v5 = *(llvm::MCAsmParser **)(a1 + 8);
  __int16 v21 = "expected integer count in '.cg_profile' directive";
  __int16 v23 = 259;
  if (llvm::MCAsmParser::parseIntToken(v5, &v18, (const llvm::Twine *)&v21)) {
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
  {
    uint64_t v6 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v23 = 261;
    __int16 v21 = v24;
    uint64_t v22 = v25;
    unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v6, (const llvm::Twine *)&v21);
    uint64_t v8 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v23 = 261;
    __int16 v21 = v19;
    uint64_t v22 = v20;
    unint64_t v9 = llvm::MCContext::getOrCreateSymbol(v8, (const llvm::Twine *)&v21);
    uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    unint64_t v12 = llvm::MCSymbolRefExpr::create(Symbol, 0, v11, v2);
    uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    unint64_t v14 = llvm::MCSymbolRefExpr::create(v9, 0, v13, v4);
    (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t))(*(void *)v10 + 1152))(v10, v12, v14, v18);
    return 0;
  }
  else
  {
    __int16 v21 = "unexpected token in directive";
    __int16 v23 = 259;
    return llvm::MCAsmParser::TokError(*(void *)(a1 + 8), (llvm::Twine *)&v21, 0, 0);
  }
}

void anonymous namespace'::WasmAsmParser::~WasmAsmParser(_anonymous_namespace_::WasmAsmParser *this)
{
}

uint64_t anonymous namespace'::WasmAsmParser::Initialize(_anonymous_namespace_::WasmAsmParser *this, llvm::MCAsmParser *a2)
{
  *((void *)this + 3) = a2;
  *((void *)this + 4) = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a2 + 40))(a2);
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 1) = v3;
  uint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 1) + 16);
  return v4();
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::WasmAsmParser,&anonymous namespace'::WasmAsmParser::parseSectionDirectiveText>()
{
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::WasmAsmParser,&anonymous namespace'::WasmAsmParser::parseSectionDirectiveData>(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8))
                             + 160)
                 + 32);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v3 + 168))(v3, v2, 0);
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::WasmAsmParser,&anonymous namespace'::WasmAsmParser::parseSectionDirective>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), &v57))
  {
    uint64_t v6 = "expected identifier in directive";
    goto LABEL_3;
  }
    return 1;
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(_DWORD *)v10 != 3)
  {
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = *(void *)(v10 + 16);
    uint64_t v59 = "expected string in directive, instead got: ";
    uint64_t v60 = 43;
    *(void *)&long long v61 = v12;
    *((void *)&v61 + 1) = v13;
    __int16 v62 = 1285;
    return llvm::MCAsmParser::Error(v11, v12, (llvm::Twine *)&v59, 0, 0);
  }
  if (v58 < 5)
  {
    if (v58 != 4) {
      goto LABEL_37;
    }
LABEL_36:
    if (*(_DWORD *)v57 != 1936941614)
    {
LABEL_37:
      int v19 = 19;
      goto LABEL_38;
    }
    goto LABEL_95;
  }
  if (*(_DWORD *)v57 == 1952539694 && *(unsigned char *)(v57 + 4) == 97) {
    goto LABEL_37;
  }
  if (v58 < 6)
  {
    if (*(_DWORD *)v57 != 1935832110 || *(unsigned char *)(v57 + 4) != 115)
    {
LABEL_32:
      if (*(_DWORD *)v57 != 2019914798 || *(unsigned char *)(v57 + 4) != 116) {
        goto LABEL_36;
      }
      goto LABEL_96;
    }
LABEL_62:
    int v19 = 12;
    goto LABEL_38;
  }
  if (*(_DWORD *)v57 == 1633973294 && *(_WORD *)(v57 + 4) == 24948)
  {
    int v19 = 13;
    goto LABEL_38;
  }
  if (*(_DWORD *)v57 == 1935832110 && *(unsigned char *)(v57 + 4) == 115) {
    goto LABEL_62;
  }
  if (v58 < 7) {
    goto LABEL_32;
  }
  if (*(_DWORD *)v57 != 1685025326 || *(_DWORD *)(v57 + 3) != 1635017060)
  {
    if (*(_DWORD *)v57 != 2019914798 || *(unsigned char *)(v57 + 4) != 116)
    {
      if (v58 < 0xF
        || (*(void *)v57 == 0x5F6D6F747375632ELL ? (BOOL v32 = *(void *)(v57 + 7) == 0x6E6F69746365735FLL) : (BOOL v32 = 0),
            !v32))
      {
        if (*(_DWORD *)v57 == 1936941614)
        {
LABEL_95:
          int v19 = 15;
          goto LABEL_38;
        }
        if (v58 >= 0xB && *(void *)v57 == 0x72615F74696E692ELL && *(void *)(v57 + 3) == 0x79617272615F7469) {
          goto LABEL_37;
        }
        if (*(_DWORD *)v57 != 1650811950 || *(_DWORD *)(v57 + 3) != 1600615778) {
          goto LABEL_37;
        }
      }
      int v19 = 0;
      goto LABEL_38;
    }
LABEL_96:
    int v19 = 2;
    goto LABEL_38;
  }
  int v19 = 4;
LABEL_38:
  uint64_t v20 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8);
  unint64_t v21 = *(void *)(v20 + 16);
  unint64_t v22 = v21 - 1;
  unint64_t v23 = v21 != 0;
  if (v21 - 1 < v23) {
    unint64_t v22 = 1;
  }
  if (v22 < v21) {
    unint64_t v21 = v22;
  }
  unint64_t v24 = v21 - v23;
  if (v24)
  {
    int v27 = 0;
    int v26 = 0;
    int v25 = 0;
    __int16 v28 = (char *)(*(void *)(v20 + 8) + v23);
    while (1)
    {
      int v29 = *v28;
      if (v29 > 83)
      {
        if (v29 == 84)
        {
          v25 |= 2u;
        }
        else
        {
          if (v29 != 112)
          {
LABEL_61:
            uint64_t v6 = "unknown flag";
            goto LABEL_3;
          }
          int v26 = 1;
        }
      }
      else if (v29 == 71)
      {
        int v27 = 1;
      }
      else
      {
        if (v29 != 83) {
          goto LABEL_61;
        }
        v25 |= 1u;
      }
      ++v28;
      if (!--v24) {
        goto LABEL_55;
      }
    }
  }
  int v25 = 0;
  int v26 = 0;
  int v27 = 0;
LABEL_55:
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  {
    return 1;
  }
  long long v56 = 0uLL;
  if (!v27) {
    goto LABEL_103;
  }
  if (**(_DWORD **)(*(void *)(a1 + 32) + 8) != 25)
  {
    uint64_t v6 = "expected group name";
LABEL_3:
    uint64_t v59 = v6;
    __int16 v62 = 259;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(void *)(v8 + 96), (llvm::Twine *)&v59, 0, 0);
    return 1;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
  if (**(_DWORD **)(*(void *)(a1 + 32) + 8) == 4)
  {
    long long v56 = *(_OWORD *)(*(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8))
                                + 8)
                    + 8);
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    goto LABEL_67;
  }
  if ((*(unsigned int (**)(void, long long *))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), &v56))
  {
    uint64_t v6 = "invalid group name";
    goto LABEL_3;
  }
LABEL_67:
  if (**(_DWORD **)(*(void *)(a1 + 32) + 8) == 25)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    long long v53 = 0uLL;
    if ((*(unsigned int (**)(void, long long *))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), &v53))
    {
      uint64_t v6 = "invalid linkage";
      goto LABEL_3;
    }
    if (*((void *)&v53 + 1) != 6
      || (*(_DWORD *)v53 == 1684893539 ? (BOOL v35 = *(unsigned __int16 *)(v53 + 4) == 29793) : (BOOL v35 = 0), !v35))
    {
      uint64_t v6 = "Linkage must be 'comdat'";
      goto LABEL_3;
    }
  }
LABEL_103:
    return 1;
  int v36 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  __int16 v62 = 261;
  uint64_t v59 = (const char *)v57;
  uint64_t v60 = v58;
  __int16 v55 = 261;
  long long v53 = v56;
  uint64_t WasmSection = llvm::MCContext::getWasmSection(v36, (llvm::Twine *)&v59, v19, v25, (llvm::Twine *)&v53, -1);
  unint64_t v38 = *(unsigned int *)(WasmSection + 256);
  if (v38 != v25)
  {
    uint64_t v39 = *(void *)(a1 + 24);
    __int16 v52 = 1283;
    v51[0] = "changed section flags for ";
    v51[2] = v57;
    v51[3] = v58;
    *(void *)&long long v53 = v51;
    uint64_t v54 = ", expected: 0x";
    __int16 v55 = 770;
    if (v38)
    {
      int v40 = (char *)&v61 + 1;
      do
      {
        *--int v40 = llvm::hexdigit(unsigned int,BOOL)::LUT[v38 & 0xF];
        BOOL v41 = v38 > 0xF;
        v38 >>= 4;
      }
      while (v41);
    }
    else
    {
      int v40 = (char *)&v61;
      LOBYTE(v61) = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(__p, v40, (char *)&v61 + 1, (char *)&v61 + 1 - v40);
    char v42 = v55;
    if (v55 == 1)
    {
      uint64_t v59 = (const char *)__p;
      long long v61 = v50;
      __int16 v62 = 260;
      int v63 = v48;
      __int16 v64 = v49;
    }
    else if ((_BYTE)v55)
    {
      if (HIBYTE(v55) != 1) {
        char v42 = 2;
      }
      std::string::size_type v43 = (const char *)&v53;
      if (HIBYTE(v55) == 1) {
        std::string::size_type v43 = (const char *)v53;
      }
      uint64_t v59 = v43;
      uint64_t v60 = *((void *)&v53 + 1);
      *(void *)&long long v61 = __p;
      LOBYTE(v62) = v42;
      HIBYTE(v62) = 4;
    }
    else
    {
      __int16 v62 = 256;
    }
    llvm::MCAsmParser::Error(v39, a4, (llvm::Twine *)&v59, 0, 0);
    if (v47 < 0) {
      operator delete(__p[0]);
    }
  }
  if (!v26) {
    goto LABEL_128;
  }
  int v44 = *(unsigned __int8 *)(WasmSection + 220);
  if ((v44 - 15) >= 6 && (v44 & 0xFC) != 4 && (v44 & 0xFC) != 8 && (v44 - 12) >= 3)
  {
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v59 = "Only data sections can be passive";
    __int16 v62 = 259;
    uint64_t v12 = a4;
    return llvm::MCAsmParser::Error(v11, v12, (llvm::Twine *)&v59, 0, 0);
  }
  *(unsigned char *)(WasmSection + 252) = 1;
LABEL_128:
  uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)v45 + 168))(v45, WasmSection, 0);
  return 0;
}

uint64_t anonymous namespace'::WasmAsmParser::expect(uint64_t a1, int a2, const std::string::value_type *a3)
{
  if (**(_DWORD **)(*(void *)(a1 + 32) + 8) == a2)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    return 0;
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v17, "Expected ");
    uint64_t v6 = std::string::append(&v17, a3);
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v18, ", instead got: ");
    std::string::size_type v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    uint64_t v20 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = (void *)HIBYTE(v20);
    uint64_t v11 = __p;
    if (v20 < 0)
    {
      uint64_t v11 = (void **)__p[0];
      uint64_t v10 = __p[1];
    }
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v14 = *(void *)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 16);
    v21[0] = v11;
    v21[1] = v10;
    v21[2] = v14;
    v21[3] = v15;
    __int16 v22 = 1285;
    uint64_t v4 = llvm::MCAsmParser::Error(v12, v14, (llvm::Twine *)v21, 0, 0);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  return v4;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::WasmAsmParser,&anonymous namespace'::WasmAsmParser::parseDirectiveSize>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), &v16))
  {
    v14[0] = "expected identifier in directive";
    __int16 v15 = 259;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v14, 0, 0);
    return 1;
  }
  uint64_t v8 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  __int16 v15 = 261;
  v14[0] = v16;
  v14[1] = v17;
  unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v8, (const llvm::Twine *)v14);
    return 1;
  uint64_t v13 = 0;
  v14[0] = 0;
  {
    return 1;
  }
  if (*(unsigned char *)(Symbol + 36)) {
    BOOL v11 = *(_DWORD *)(Symbol + 32) == 0;
  }
  else {
    BOOL v11 = 0;
  }
  if (v11)
  {
    v14[0] = ".size directive ignored for function symbols";
    __int16 v15 = 259;
    (*(void (**)(void, uint64_t, void *, void, void))(**(void **)(a1 + 8) + 168))(*(void *)(a1 + 8), a4, v14, 0, 0);
  }
  else
  {
    uint64_t v12 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v12 + 424))();
  }
  return 0;
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::WasmAsmParser,&anonymous namespace'::WasmAsmParser::parseDirectiveType>(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    uint64_t v3 = *(llvm::MCContext **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8))
                             + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = *(const char **)(v4 + 8);
    uint64_t v5 = *(void *)(v4 + 16);
    __int16 v22 = 261;
    std::string v18 = v6;
    uint64_t v19 = v5;
    unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)&v18);
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    if (*(_DWORD *)v8 == 25)
    {
      (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
      if (*(_DWORD *)v8 == 45)
      {
        (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
        if (*(_DWORD *)v8 == 2)
        {
          uint64_t v9 = *(void *)(v8 + 8);
          uint64_t v10 = *(void *)(v8 + 16);
          if (v10 != 6)
          {
            if (v10 == 8 && *(void *)v9 == 0x6E6F6974636E7566)
            {
              *(_DWORD *)(Symbol + 32) = 0;
              *(unsigned char *)(Symbol + 36) = 1;
              uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
              if (*(void *)(*(void *)(*(void *)(v11 + 144) + 32 * *(unsigned int *)(v11 + 152) - 32) + 232)) {
                *(unsigned char *)(Symbol + 42) = 1;
              }
              goto LABEL_26;
            }
            goto LABEL_22;
          }
          if (*(_DWORD *)v9 == 1651469415 && *(_WORD *)(v9 + 4) == 27745)
          {
            *(_DWORD *)(Symbol + 32) = 2;
          }
          else
          {
            if (*(_DWORD *)v9 != 1701470831 || *(_WORD *)(v9 + 4) != 29795)
            {
LABEL_22:
              uint64_t v12 = *(void *)(a1 + 24);
              uint64_t v13 = "Unknown WASM symbol type: ";
              uint64_t v14 = 26;
              goto LABEL_12;
            }
            *(_DWORD *)(Symbol + 32) = 1;
          }
          *(unsigned char *)(Symbol + 36) = 1;
LABEL_26:
          (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
        }
      }
    }
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t v10 = *(void *)(v8 + 16);
    uint64_t v13 = "Expected label,@type declaration, got: ";
    uint64_t v14 = 39;
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v9 = *(void *)(v2 + 8);
    uint64_t v10 = *(void *)(v2 + 16);
    uint64_t v13 = "Expected label after .type directive, got: ";
    uint64_t v14 = 43;
  }
LABEL_12:
  std::string v18 = v13;
  uint64_t v19 = v14;
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  __int16 v22 = 1285;
  return llvm::MCAsmParser::Error(v12, v9, (llvm::Twine *)&v18, 0, 0);
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::WasmAsmParser,&anonymous namespace'::WasmAsmParser::ParseDirectiveIdent>(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 3
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)),
        (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8)),
        **(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9))
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v2 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v2 + 672))();
    return 0;
  }
  else
  {
    uint64_t v6 = "unexpected token in '.ident' directive";
    __int16 v7 = 259;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(void *)(v5 + 96), (llvm::Twine *)&v6, 0, 0);
    return 1;
  }
}

uint64_t llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::WasmAsmParser,&anonymous namespace'::WasmAsmParser::ParseDirectiveSymbolAttribute>(uint64_t a1)
{
  if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9)
  {
LABEL_2:
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    return 0;
  }
  uint64_t v10 = 0;
  for (uint64_t i = 0;
        ((*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 192))(*(void *)(a1 + 8), &v10) & 1) == 0;
        uint64_t i = 0)
  {
    uint64_t v3 = (llvm::MCContext *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
    __int16 v9 = 261;
    v8[0] = v10;
    v8[1] = i;
    llvm::MCContext::getOrCreateSymbol(v3, (const llvm::Twine *)v8);
    uint64_t v4 = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
    (*(void (**)(void))(v4 + 296))();
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) == 9) {
      goto LABEL_2;
    }
    if (**(_DWORD **)((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8)) + 8) != 25)
    {
      uint64_t v5 = "unexpected token in directive";
      goto LABEL_8;
    }
    (*(void (**)(void))(**(void **)(a1 + 8) + 184))(*(void *)(a1 + 8));
    uint64_t v10 = 0;
  }
  uint64_t v5 = "expected identifier in directive";
LABEL_8:
  v8[0] = v5;
  __int16 v9 = 259;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6);
  llvm::MCAsmParser::Error(v6, *(void *)(v7 + 96), (llvm::Twine *)v8, 0, 0);
  return 1;
}

void anonymous namespace'::XCOFFAsmParser::~XCOFFAsmParser(_anonymous_namespace_::XCOFFAsmParser *this)
{
}

uint64_t anonymous namespace'::XCOFFAsmParser::Initialize(_anonymous_namespace_::XCOFFAsmParser *this, llvm::MCAsmParser *a2)
{
  *((void *)this + 3) = a2;
  *((void *)this + 4) = (*(uint64_t (**)(llvm::MCAsmParser *))(*(void *)a2 + 40))(a2);
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 1) = v3;
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 16);
  return v4();
}

void llvm::MCAsmParserExtension::HandleDirective<anonymous namespace'::XCOFFAsmParser,&anonymous namespace'::XCOFFAsmParser::ParseDirectiveCSect>()
{
}

uint64_t llvm::MCAssembler::isThumbFunc(llvm::MCAssembler *this, const llvm::MCSymbol *a2)
{
  uint64_t v4 = (llvm::MCAssembler *)((char *)this + 184);
  imp = llvm::SmallPtrSetImplBase::find_imp((llvm::MCAssembler *)((char *)this + 184), a2);
  uint64_t v6 = *((void *)this + 24);
  uint64_t v7 = 200;
  if (v6 == *((void *)this + 23)) {
    uint64_t v7 = 204;
  }
  if (imp != (const void **)(v6 + 8 * *(unsigned int *)((char *)this + v7))) {
    return 1;
  }
  if ((*((_DWORD *)a2 + 2) & 0x3800) != 0x1000) {
    return 0;
  }
  *((_DWORD *)a2 + 2) |= 4u;
  uint64_t v9 = *((void *)a2 + 3);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v15 = 0;
  uint64_t v14 = 0;
  int v10 = llvm::MCExpr::evaluateAsRelocatableImpl(v9, &v12, 0, 0, 0, 0, 0);
  uint64_t result = 0;
  if (v10 && !v13 && !v15)
  {
    if (!v12 || *(_WORD *)(v12 + 1)) {
      return 0;
    }
    uint64_t result = llvm::MCAssembler::isThumbFunc(this, *(const llvm::MCSymbol **)(v12 + 16));
    if (result)
    {
      llvm::SmallPtrSetImpl<llvm::Value *>::insert(v4, a2, (uint64_t)v11);
      return 1;
    }
  }
  return result;
}

unint64_t llvm::MCAssembler::computeFragmentSize(llvm::MCAssembler *this, const llvm::MCAsmLayout *a2, const llvm::MCFragment *a3)
{
  unint64_t result = 4;
  switch(*((unsigned char *)a3 + 48))
  {
    case 1:
    case 2:
    case 5:
    case 7:
    case 8:
    case 9:
    case 0xD:
    case 0xE:
      return *((void *)a3 + 9);
    case 3:
      v29[0] = 0;
      if ((llvm::MCExpr::evaluateAsAbsolute(*((void *)a3 + 8), v29, *(void *)a2, a2, 0, 0) & 1) == 0)
      {
        int v10 = *(void **)this;
        uint64_t v11 = *((void *)a3 + 9);
        goto LABEL_29;
      }
      unint64_t result = v29[0] * *((unsigned __int8 *)a3 + 51);
      if ((result & 0x8000000000000000) != 0)
      {
        int v10 = *(void **)this;
        uint64_t v11 = *((void *)a3 + 9);
        uint64_t v12 = "invalid number of bytes";
        goto LABEL_30;
      }
      return result;
    case 4:
      return *((void *)a3 + 7);
    case 6:
      v32[0] = 0;
      v32[1] = 0;
      int v34 = 0;
      uint64_t v33 = 0;
      if ((llvm::MCExpr::evaluateAsRelocatableImpl(*((void *)a3 + 7), v32, *(void *)a2, a2, 0, 0, 1) & 1) == 0)
      {
        int v10 = *(void **)this;
        uint64_t v11 = *((void *)a3 + 8);
LABEL_29:
        uint64_t v12 = "expected assembly-time absolute expression";
        goto LABEL_30;
      }
      llvm::MCAsmLayout::ensureValid(a2, a3);
      uint64_t v13 = *((void *)a3 + 4);
      uint64_t v14 = v33;
      uint64_t v30 = v33;
      uint64_t v31 = v13;
      if (!v32[0]) {
        goto LABEL_23;
      }
      v29[0] = 0;
      if (!getSymbolOffsetImpl(a2, *(const llvm::MCSymbol **)(v32[0] + 16), 0, v29))
      {
        int v10 = *(void **)this;
        uint64_t v11 = *((void *)a3 + 8);
        uint64_t v12 = "expected absolute expression";
LABEL_30:
        *(void *)BOOL v35 = v12;
        __int16 v36 = 259;
        goto LABEL_31;
      }
      v14 += v29[0];
      uint64_t v30 = v14;
LABEL_23:
      unint64_t result = v14 - v13;
      if ((unint64_t)(v14 - v13) >> 30)
      {
        int v15 = *(void **)this;
        uint64_t v16 = *((void *)a3 + 8);
        int v25 = "invalid .org offset '";
        __int16 v26 = 259;
        __int16 v24 = 269;
        v23[0] = (uint64_t)&v30;
        llvm::operator+((uint64_t *)&v25, v23, (uint64_t)v27);
        uint64_t v21 = "' (at offset '";
        __int16 v22 = 259;
        llvm::operator+(v27, (uint64_t *)&v21, (uint64_t)v28);
        __int16 v20 = 268;
        v19[0] = (uint64_t)&v31;
        llvm::operator+(v28, v19, (uint64_t)v29);
        uint64_t v17 = "')";
        __int16 v18 = 259;
        llvm::operator+((uint64_t *)v29, (uint64_t *)&v17, (uint64_t)v35);
        int v10 = v15;
        uint64_t v11 = v16;
LABEL_31:
        llvm::MCContext::reportError((uint64_t)v10, v11, (uint64_t)v35);
        return 0;
      }
      return result;
    case 0xA:
      return *((void *)a3 + 8);
    case 0xB:
      return result;
    case 0xC:
      return *((void *)a3 + 11);
    default:
      llvm::MCAsmLayout::ensureValid(a2, a3);
      unsigned int v7 = ((*((_DWORD *)a3 + 8) + (1 << *((unsigned char *)a3 + 51)) - 1) & -(int)(1 << *((unsigned char *)a3 + 51)))
         - *((_DWORD *)a3 + 8);
      v35[0] = v7;
      if (!(*(unsigned int (**)(void))(**((void **)a3 + 2) + 8))(*((void *)a3 + 2))
        || (*((unsigned char *)a3 + 52) & 1) == 0
        || (char v8 = (*(uint64_t (**)(void, const llvm::MCFragment *, unsigned int *))(**((void **)this + 1)
                                                                                             + 96))(*((void *)this + 1), a3, v35), unsigned int v7 = v35[0], (v8 & 1) == 0))
      {
        if (v7
          && (*((unsigned char *)a3 + 52) & 1) != 0
          && v7 % (*(unsigned int (**)(void))(**((void **)this + 1) + 176))(*((void *)this + 1)))
        {
          do
          {
            v35[0] += 1 << *((unsigned char *)a3 + 51);
            unsigned int v9 = v35[0];
          }
          while (v9 % (*(unsigned int (**)(void))(**((void **)this + 1) + 176))(*((void *)this + 1)));
        }
        if (v35[0] <= *((_DWORD *)a3 + 17)) {
          return v35[0];
        }
        else {
          return 0;
        }
      }
      return v7;
  }
}

llvm::MCAssembler *llvm::MCAsmLayout::layoutFragment(llvm::MCAsmLayout *this, llvm::MCFragment *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  uint64_t v5 = *(llvm::MCFragment **)(v4 + 112);
  uint64_t v6 = *(const llvm::MCFragment **)a2;
  *((unsigned char *)a2 + 49) = 1;
  if (v5 == a2 || v6 == 0)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = *((void *)v6 + 4);
    uint64_t v9 = llvm::MCAssembler::computeFragmentSize(*(llvm::MCAssembler **)this, this, v6) + v8;
    uint64_t v4 = *((void *)a2 + 2);
  }
  *((void *)a2 + 4) = v9;
  *((unsigned char *)a2 + 49) = 0;
  uint64_t v19 = v4;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 19, &v19)[1] = a2;
  unint64_t result = *(llvm::MCAssembler **)this;
  if (*(_DWORD *)(*(void *)this + 472) && *((unsigned char *)a2 + 50))
  {
    unint64_t result = (llvm::MCAssembler *)llvm::MCAssembler::computeFragmentSize(result, this, a2);
    uint64_t v11 = *(llvm::MCAssembler **)this;
    if (*(unsigned char *)(*(void *)this + 476))
    {
      unint64_t v12 = *((unsigned int *)v11 + 118);
    }
    else
    {
      unint64_t v12 = *((unsigned int *)v11 + 118);
      if ((unint64_t)result > v12)
      {
        uint64_t v13 = "Fragment can't be larger than a bundle size";
        goto LABEL_28;
      }
    }
    uint64_t v14 = *((void *)a2 + 4);
    uint64_t v15 = (v12 - 1) & v14;
    uint64_t v16 = (char *)result + v15;
    if (*((unsigned char *)a2 + 51))
    {
      if ((char *)v12 != v16)
      {
        if (v12 > (unint64_t)v16) {
          unint64_t v17 = v12 - (void)v16;
        }
        else {
          unint64_t v17 = 2 * v12 - (void)v16;
        }
LABEL_24:
        if (v17 >= 0x100)
        {
          uint64_t v13 = "Padding cannot exceed 255 bytes";
LABEL_28:
          llvm::report_fatal_error((llvm *)v13, (const llvm::Twine *)1);
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (v15) {
        BOOL v18 = v12 >= (unint64_t)v16;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18)
      {
        unint64_t v17 = v12 - v15;
        goto LABEL_24;
      }
    }
    unint64_t v17 = 0;
LABEL_25:
    *((unsigned char *)a2 + 52) = v17;
    *((void *)a2 + 4) = v17 + v14;
  }
  return result;
}

void llvm::CodeViewContext::~CodeViewContext(llvm::CodeViewContext *this)
{
  if (!*((unsigned char *)this + 32))
  {
    uint64_t v2 = (void *)*((void *)this + 3);
    if (v2)
    {
      uint64_t v3 = (void *)v2[15];
      if (v3 != v2 + 17) {
        free(v3);
      }
      uint64_t v4 = (void *)v2[8];
      if (v4 != v2 + 11) {
        free(v4);
      }
      MEMORY[0x263E500B0](v2, 0x10E0C400AE5E4C8);
    }
  }
  unsigned int v7 = (void **)((char *)this + 232);
  std::vector<llvm::MCCVFunctionInfo>::__destroy_vector::operator()[abi:nn180100](&v7);
  uint64_t v5 = (void *)*((void *)this + 26);
  if (v5)
  {
    *((void *)this + 27) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  uint64_t v6 = (char *)*((void *)this + 5);
  if (v6 != (char *)this + 56) {
    free(v6);
  }
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this);
}

BOOL llvm::CodeViewContext::addFile(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  llvm::CodeViewContext::addToStringTable((llvm::CodeViewContext *)a1, a4, a5, (uint64_t)v29);
  uint64_t v14 = (uint64_t *)v29[0];
  unint64_t v15 = v29[1];
  uint64_t v16 = a3 - 1;
  if (*(_DWORD *)(a1 + 48) <= v16) {
    llvm::SmallVectorImpl<llvm::CodeViewContext::FileInfo>::resizeImpl<false>(a1 + 40, a3);
  }
  uint64_t v17 = *(void *)(a1 + 40) + 32 * v16;
  int v18 = *(unsigned __int8 *)(v17 + 4);
  if (!*(unsigned char *)(v17 + 4))
  {
    if (v15) {
      unint64_t v19 = v15;
    }
    else {
      unint64_t v19 = 7;
    }
    if (v15) {
      __int16 v20 = v14;
    }
    else {
      __int16 v20 = (uint64_t *)"<stdin>";
    }
    llvm::CodeViewContext::addToStringTable((llvm::CodeViewContext *)a1, v20, v19, (uint64_t)v26);
    int v21 = v27;
    __int16 v22 = *(llvm::MCContext **)(a2 + 8);
    v26[0] = "checksum_offset";
    __int16 v28 = 259;
    Tempunint64_t Symbol = llvm::MCContext::createTempSymbol(v22, (const llvm::Twine *)v26, 0);
    uint64_t v24 = *(void *)(a1 + 40) + 32 * v16;
    *(_DWORD *)uint64_t v24 = v21;
    *(void *)(v24 + 16) = a7;
    *(void *)(v24 + 24) = TempSymbol;
    *(unsigned char *)(v24 + 4) = 1;
    *(void *)(v24 + 8) = a6;
    *(unsigned char *)(*(void *)(a1 + 40) + 32 * v16 + 5) = a8;
  }
  return v18 == 0;
}

uint64_t *llvm::CodeViewContext::addToStringTable@<X0>(llvm::CodeViewContext *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  StringTableunint64_t Fragment = llvm::CodeViewContext::getStringTableFragment(a1);
  int v15 = *(void *)(StringTableFragment + 72);
  unint64_t result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(a1, a2, a3, &v15);
  char v11 = v10;
  unint64_t v12 = (void *)*result;
  uint64_t v13 = (unsigned char *)(*result + 16);
  uint64_t v14 = *(void *)*result;
  *(void *)a4 = v13;
  *(void *)(a4 + 8) = v14;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)v12 + 2);
  if (v11) {
    return llvm::SmallVectorImpl<char>::append<char const*,void>((void *)(StringTableFragment + 64), v13, &v13[v14 + 1]);
  }
  return result;
}

BOOL llvm::CodeViewContext::recordFunctionId(llvm::CodeViewContext *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 29);
  uint64_t v4 = (uint64_t *)((char *)this + 232);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 30) - v3) >> 4) <= a2)
  {
    std::vector<llvm::MCCVFunctionInfo>::resize((uint64_t)this + 232, a2 + 1);
    uint64_t v3 = *v4;
  }
  uint64_t v5 = (int *)(v3 + 48 * a2);
  int v6 = *v5;
  if (!*v5) {
    int *v5 = -1;
  }
  return v6 == 0;
}

void std::vector<llvm::MCCVFunctionInfo>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *(void *)a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<llvm::MCCVFunctionInfo>::__append((char **)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *(void *)a1 + 48 * a2;
    if (v3 != v7)
    {
      do
      {
        uint64_t v8 = v3 - 48;
        MEMORY[0x263E500A0](*(void *)(v3 - 24), 4);
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    *(void *)(a1 + 8) = v7;
  }
}

BOOL llvm::CodeViewContext::recordInlinedCallSiteId(llvm::CodeViewContext *this, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  unsigned int v24 = a2;
  uint64_t v12 = *((void *)this + 29);
  uint64_t v13 = (uint64_t *)((char *)this + 232);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 30) - v12) >> 4) <= a2)
  {
    std::vector<llvm::MCCVFunctionInfo>::resize((uint64_t)this + 232, a2 + 1);
    uint64_t v12 = *v13;
  }
  uint64_t v14 = (uint64_t *)(v12 + 48 * a2);
  int v15 = *(_DWORD *)v14;
  if (!*(_DWORD *)v14)
  {
    *(_DWORD *)uint64_t v14 = a3 + 1;
    uint64_t v16 = (_DWORD *)(v12 + 48 * a2);
    v16[1] = a4;
    unsigned int v16[2] = a5;
    v16[3] = a6;
    if (a3 <= 0xFFFFFFFD)
    {
      do
      {
        uint64_t v17 = *((void *)this + 29);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 30) - v17) >> 4) <= a3)
        {
          unint64_t v19 = 0;
        }
        else
        {
          int v18 = (uint64_t *)(v17 + 48 * a3);
          if (*(_DWORD *)v18) {
            unint64_t v19 = v18;
          }
          else {
            unint64_t v19 = 0;
          }
        }
        uint64_t v20 = *(uint64_t *)((char *)v14 + 4);
        int v21 = *((_DWORD *)v14 + 3);
        __int16 v22 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>,unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::FindAndConstruct(v19 + 3, &v24);
        *(void *)(v22 + 1) = v20;
        v22[3] = v21;
        a3 = *(_DWORD *)v19 - 1;
        uint64_t v14 = v19;
      }
      while (a3 < 0xFFFFFFFE);
    }
  }
  return v15 == 0;
}

uint64_t llvm::CodeViewContext::getStringTableFragment(llvm::CodeViewContext *this)
{
  uint64_t result = *((void *)this + 3);
  if (!result) {
    operator new();
  }
  return result;
}

void std::vector<llvm::MCCVFunctionInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  __n128 v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 48;
        MEMORY[0x263E500A0](*((void *)v4 - 3), 4);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::SmallVectorImpl<llvm::CodeViewContext::FileInfo>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 32);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 32 * v2), 32 * a2 - 32 * v2);
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void std::vector<llvm::MCCVFunctionInfo>::__append(char **a1, unint64_t a2)
{
  BOOL v5 = a1[1];
  unint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v10 = 0x555555555555555;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      char v11 = (char *)operator new(48 * v10);
    }
    else
    {
      char v11 = 0;
    }
    uint64_t v13 = &v11[48 * v7];
    uint64_t v14 = &v11[48 * v10];
    size_t v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v5) {
        return;
      }
      goto LABEL_21;
    }
    uint64_t v17 = 0;
    do
    {
      int v18 = &v13[v17];
      unint64_t v19 = &v5[v17];
      long long v20 = *(_OWORD *)&v5[v17 - 48];
      *((void *)v18 - 4) = *(void *)&v5[v17 - 32];
      *((_OWORD *)v18 - 3) = v20;
      *((void *)v18 - 2) = 0;
      *((_DWORD *)v18 - 2) = 0;
      *((void *)v18 - 3) = *(void *)&v5[v17 - 24];
      *((void *)v19 - 3) = 0;
      *((_DWORD *)v18 - 4) = *(_DWORD *)&v5[v17 - 16];
      *((_DWORD *)v19 - 4) = 0;
      int v21 = *(_DWORD *)&v13[v17 - 12];
      *((_DWORD *)v18 - 3) = *(_DWORD *)&v5[v17 - 12];
      *((_DWORD *)v19 - 3) = v21;
      int v22 = *(_DWORD *)&v13[v17 - 8];
      *((_DWORD *)v18 - 2) = *(_DWORD *)&v5[v17 - 8];
      *((_DWORD *)v19 - 2) = v22;
      v17 -= 48;
    }
    while (&v5[v17] != v6);
    BOOL v5 = *a1;
    unint64_t v23 = a1[1];
    *a1 = &v13[v17];
    a1[1] = v16;
    a1[2] = v14;
    if (v23 != v5)
    {
      do
      {
        unsigned int v24 = v23 - 48;
        MEMORY[0x263E500A0](*((void *)v23 - 3), 4);
        unint64_t v23 = v24;
      }
      while (v24 != v5);
    }
    if (v5)
    {
LABEL_21:
      operator delete(v5);
    }
  }
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>,unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  unint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>,unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    _DWORD *inserted = *a2;
    inserted[3] = 0;
    *(void *)(inserted + 1) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>,unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::grow(a1, v7);
  unint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::MCCVFunctionInfo::LineInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCCVFunctionInfo::LineInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = v4;
      do
      {
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          int v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)v13, &v18);
          uint64_t v14 = v18;
          *int v18 = *(_DWORD *)v13;
          uint64_t v15 = *(void *)(v13 + 4);
          v14[3] = *(_DWORD *)(v13 + 12);
          *(void *)(v14 + 1) = v15;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *uint64_t result = -1;
      result += 4;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, _DWORD *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  uint64_t i = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      uint64_t v11 = i[1];
      ++i;
      uint64_t v10 = v11;
    }
    return i;
  }
  uint64_t v12 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  uint64_t v13 = v12;
  uint64_t v14 = v12 + 16;
  if (a3) {
    memcpy(v12 + 16, a2, a3);
  }
  v14[a3] = 0;
  *(void *)uint64_t v13 = a3;
  *((_DWORD *)v13 + 2) = *a4;
  *uint64_t i = (uint64_t)v13;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t llvm::MCContext::MCContext(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a1 + 8) = a9;
  *(void *)(a1 + 16) = a10;
  int v18 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v19 = *a2;
    v18->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  long long v20 = *(long long *)((char *)a2 + 24);
  uint64_t v21 = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 48) = v20;
  *(void *)(a1 + 64) = v21;
  *(void *)(a1 + 72) = a6;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = &unk_270DC1F48;
  *(void *)(a1 + 120) = defaultDiagHandler;
  *(void *)(a1 + 136) = a1 + 112;
  *(void *)(a1 + 144) = a3;
  *(void *)(a1 + 152) = a4;
  *(void *)(a1 + 168) = a5;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 200) = a1 + 216;
  *(void *)(a1 + 208) = 0x400000000;
  *(void *)(a1 + 248) = a1 + 264;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 1;
  *(_OWORD *)(a1 + 280) = 0u;
  *(void *)(a1 + 296) = a1 + 312;
  *(void *)(a1 + 304) = 0x400000000;
  *(void *)(a1 + 344) = a1 + 360;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = a1 + 408;
  *(void *)(a1 + 400) = 0x400000000;
  *(void *)(a1 + 440) = a1 + 456;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = a1 + 504;
  *(void *)(a1 + 496) = 0x400000000;
  *(void *)(a1 + 536) = a1 + 552;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = a1 + 600;
  *(void *)(a1 + 592) = 0x400000000;
  *(void *)(a1 + 632) = a1 + 648;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 680) = a1 + 696;
  *(void *)(a1 + 688) = 0x400000000;
  *(void *)(a1 + 728) = a1 + 744;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 776) = a1 + 792;
  *(void *)(a1 + 784) = 0x400000000;
  *(void *)(a1 + 824) = a1 + 840;
  *(void *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(void *)(a1 + 872) = a1 + 888;
  *(void *)(a1 + 880) = 0x400000000;
  *(void *)(a1 + 920) = a1 + 936;
  *(void *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(void *)(a1 + 968) = a1 + 984;
  *(void *)(a1 + 976) = 0x400000000;
  *(void *)(a1 + 1016) = a1 + 1032;
  *(void *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1064) = a1 + 1080;
  *(void *)(a1 + 1072) = 0x400000000;
  *(void *)(a1 + 1112) = a1 + 1128;
  *(_OWORD *)(a1 + 1148) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1164) = 16;
  *(void *)(a1 + 1168) = a1 + 184;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_DWORD *)(a1 + 1216) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_DWORD *)(a1 + 1220) = 16;
  *(void *)(a1 + 1224) = a1 + 184;
  *(_DWORD *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_DWORD *)(a1 + 1252) = 16;
  *(void *)(a1 + 1256) = a1 + 184;
  *(_DWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_DWORD *)(a1 + 1284) = 16;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(unsigned char *)(a1 + 1312) = 2;
  *(unsigned char *)(a1 + 1352) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(void *)(a1 + 1360) = a1 + 1384;
  *(void *)(a1 + 1368) = 0;
  *(void *)(a1 + 1376) = 128;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(void *)(a1 + 1512) = a1 + 1520;
  int v22 = (void **)(a1 + 1536);
  *(void *)(a1 + 1552) = 0;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(void *)(a1 + 1560) = a1 + 1568;
  *(void *)(a1 + 1584) = 0;
  *(_WORD *)(a1 + 1592) = 0;
  *(unsigned char *)(a1 + 1594) = 1;
  *(_DWORD *)(a1 + 1598) = 0;
  *(_DWORD *)(a1 + 1595) = 0;
  *(void *)(a1 + 1620) = 0;
  *(_OWORD *)(a1 + 1604) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_DWORD *)(a1 + 1712) = 16777220;
  *(unsigned char *)(a1 + 1716) = 0;
  *(_DWORD *)(a1 + 1720) = 0;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(void *)(a1 + 1728) = a1 + 1736;
  *(_DWORD *)(a1 + 1768) = 0;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_DWORD *)(a1 + 1772) = 16;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(void *)(a1 + 1776) = a1 + 1784;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(void *)(a1 + 1800) = a1 + 1808;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(void *)(a1 + 1824) = a1 + 1832;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(void *)(a1 + 1848) = a1 + 1856;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(void *)(a1 + 1872) = a1 + 1880;
  *(_DWORD *)(a1 + 1912) = 0;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_DWORD *)(a1 + 1916) = 16;
  *(_DWORD *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_DWORD *)(a1 + 1940) = 16;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(void *)(a1 + 1960) = a1 + 1976;
  *(void *)(a1 + 1968) = 0x400000000;
  *(void *)(a1 + 2008) = a1 + 2024;
  *(void *)(a1 + 2032) = 0;
  *(_OWORD *)(a1 + 2016) = 0u;
  *(unsigned char *)(a1 + 2040) = a8;
  *(void *)(a1 + 2048) = a7;
  *(unsigned char *)(a1 + 2056) = 0;
  *(_DWORD *)(a1 + 2080) = 0;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_DWORD *)(a1 + 2084) = 96;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(void *)(a1 + 2088) = a1 + 2096;
  *(_DWORD *)(a1 + 2128) = 0;
  *(_OWORD *)(a1 + 2112) = 0u;
  if (a7)
  {
    if (*(char *)(a7 + 111) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a7 + 88), *(void *)(a7 + 96));
    }
    else {
      std::string __p = *(std::string *)(a7 + 88);
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&__p, (char *)&str_24);
  }
  std::string::operator=((std::string *)(a1 + 1320), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v23 = *(uint64_t **)(a1 + 72);
  if (v23)
  {
    uint64_t v24 = *v23;
    if (-1431655765 * ((unint64_t)(*(void *)(*(void *)(a1 + 72) + 8) - v24) >> 3))
    {
      uint64_t v25 = (*(uint64_t (**)(void))(**(void **)v24 + 16))();
      if (v26 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      int v27 = (const void *)v25;
      std::string::size_type v28 = v26;
      if (v26 >= 0x17)
      {
        uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17) {
          uint64_t v30 = v26 | 7;
        }
        uint64_t v31 = v30 + 1;
        p_p = (std::string *)operator new(v30 + 1);
        __p.__r_.__value_.__l.__size_ = v28;
        __p.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      }
      else
      {
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v26;
        p_p = &__p;
        if (!v26) {
          goto LABEL_21;
        }
      }
      memmove(p_p, v27, v28);
LABEL_21:
      p_p->__r_.__value_.__s.__data_[v28] = 0;
      if (*(char *)(a1 + 1559) < 0) {
        operator delete(*v22);
      }
      *(_OWORD *)int v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(a1 + 1552) = *((void *)&__p.__r_.__value_.__l + 2);
    }
  }
  int v32 = 0;
  switch(*((_DWORD *)a2 + 11))
  {
    case 0:
      int v34 = "Cannot initialize MC for unknown object file format.";
      goto LABEL_38;
    case 1:
      if (*((_DWORD *)a2 + 9) != 15)
      {
        int v34 = "Cannot initialize MC for non-Windows COFF object files.";
LABEL_38:
        llvm::report_fatal_error((llvm *)v34, (const llvm::Twine *)1);
      }
      int v32 = 3;
LABEL_33:
      *(_DWORD *)a1 = v32;
      return a1;
    case 2:
      int v32 = 7;
      goto LABEL_33;
    case 3:
      int v32 = 1;
      goto LABEL_33;
    case 4:
      int v32 = 2;
      goto LABEL_33;
    case 5:
      goto LABEL_33;
    case 6:
      int v32 = 4;
      goto LABEL_33;
    case 7:
      int v32 = 5;
      goto LABEL_33;
    case 8:
      int v32 = 6;
      goto LABEL_33;
    default:
      return a1;
  }
}

void defaultDiagHandler(llvm *a1)
{
  unint64_t v2 = (char **)llvm::errs(a1);
  llvm::SMDiagnostic::print(a1, 0, v2, 1, 1);
}

void llvm::MCContext::~MCContext(llvm::MCContext *this)
{
  v81[3] = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 2040)) {
    goto LABEL_90;
  }
  *((void *)this + 9) = 0;
  std::unique_ptr<llvm::SourceMgr>::reset[abi:nn180100]((llvm::SourceMgr **)this + 10);
  *((void *)this + 12) = *((void *)this + 11);
  unint64_t v2 = (char *)this + 112;
  v79[0] = &unk_270DC1F48;
  v79[1] = defaultDiagHandler;
  int v80 = (char *)v79;
  if ((void *)((char *)this + 112) != v79)
  {
    uint64_t v3 = (char *)*((void *)this + 17);
    if (v3 == v2)
    {
      int v80 = 0;
      v81[0] = &unk_270DC1F48;
      v81[1] = defaultDiagHandler;
      (*(void (**)(char *, void *))(*((void *)this + 14) + 24))((char *)this + 112, v79);
      (*(void (**)(void))(**((void **)this + 17) + 32))(*((void *)this + 17));
      *((void *)this + 17) = 0;
      int v80 = (char *)v79;
      (*(void (**)(void *, char *))(v81[0] + 24))(v81, (char *)this + 112);
      (*(void (**)(void *))(v81[0] + 32))(v81);
    }
    else
    {
      *((void *)this + 14) = &unk_270DC1F48;
      *((void *)this + 15) = defaultDiagHandler;
      int v80 = v3;
    }
    *((void *)this + 17) = v2;
  }
  std::__function::__value_func<void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::~__value_func[abi:nn180100](v79);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((uint64_t)this + 280);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((uint64_t)this + 376);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionELF>::DestroyAll((uint64_t)this + 472);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionGOFF>::DestroyAll((uint64_t)this + 664);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((uint64_t)this + 568);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionWasm>::DestroyAll((uint64_t)this + 856);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionXCOFF>::DestroyAll((uint64_t)this + 952);
  llvm::SpecificBumpPtrAllocator<llvm::MCInst>::DestroyAll((uint64_t)this + 1048);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((uint64_t)this + 760);
  llvm::SpecificBumpPtrAllocator<llvm::MCSubtargetInfo>::DestroyAll((uint64_t)this + 1944);
  if (*((_DWORD *)this + 311))
  {
    uint64_t v4 = *((unsigned int *)this + 310);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 8 * v4;
      do
      {
        *(void *)(*((void *)this + 154) + v5) = 0;
        v5 += 8;
      }
      while (v6 != v5);
    }
    *(void *)((char *)this + 1244) = 0;
  }
  if (*((_DWORD *)this + 303))
  {
    uint64_t v7 = *((unsigned int *)this + 302);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      do
      {
        *(void *)(*((void *)this + 150) + v8) = 0;
        v8 += 8;
      }
      while (v9 != v8);
    }
    *(void *)((char *)this + 1212) = 0;
  }
  if (*((_DWORD *)this + 289))
  {
    uint64_t v10 = *((unsigned int *)this + 288);
    if (v10)
    {
      uint64_t v11 = 0;
      uint64_t v12 = 8 * v10;
      do
      {
        *(void *)(*((void *)this + 143) + v11) = 0;
        v11 += 8;
      }
      while (v12 != v11);
    }
    *(void *)((char *)this + 1156) = 0;
  }
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset((uint64_t)this + 184);
  uint64_t v13 = (void *)((char *)this + 1288);
  int v14 = *((_DWORD *)this + 324);
  if (v14)
  {
    unsigned int v15 = *((_DWORD *)this + 326);
    if (v15 > 4 * v14 && v15 >= 0x41)
    {
      int v16 = 1 << (33 - __clz(v14 - 1));
      if (v16 <= 64) {
        int v17 = 64;
      }
      else {
        int v17 = v16;
      }
LABEL_31:
      if (v17 == v15)
      {
        *((void *)this + 162) = 0;
        int v18 = (_DWORD *)*((void *)this + 161);
        uint64_t v19 = 16 * v15;
        do
        {
          *int v18 = -1;
          v18 += 4;
          v19 -= 16;
        }
        while (v19);
      }
      else
      {
        MEMORY[0x263E500A0](*v13, 8);
        if (v17)
        {
          unint64_t v69 = (4 * v17 / 3u + 1) | ((unint64_t)(4 * v17 / 3u + 1) >> 1);
          unint64_t v70 = v69 | (v69 >> 2) | ((v69 | (v69 >> 2)) >> 4);
          LODWORD(v70) = (((v70 | (v70 >> 8)) >> 16) | v70 | (v70 >> 8)) + 1;
          *((_DWORD *)this + 326) = v70;
          int v71 = operator new(16 * v70, (std::align_val_t)8uLL);
          *((void *)this + 161) = v71;
          *((void *)this + 162) = 0;
          uint64_t v72 = *((unsigned int *)this + 326);
          if (v72)
          {
            uint64_t v73 = 16 * v72;
            do
            {
              *int v71 = -1;
              v71 += 4;
              v73 -= 16;
            }
            while (v73);
          }
        }
        else
        {
          *uint64_t v13 = 0;
          *((void *)this + 162) = 0;
          *((_DWORD *)this + 326) = 0;
        }
      }
      goto LABEL_39;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 325)) {
      goto LABEL_39;
    }
    unsigned int v15 = *((_DWORD *)this + 326);
    if (v15 > 0x40)
    {
      int v17 = 0;
      goto LABEL_31;
    }
  }
  if (v15)
  {
    long long v20 = (_DWORD *)*v13;
    uint64_t v21 = 16 * v15;
    do
    {
      *long long v20 = -1;
      v20 += 4;
      v21 -= 16;
    }
    while (v21);
  }
  *((void *)this + 162) = 0;
LABEL_39:
  *((void *)this + 171) = 0;
  if (*((char *)this + 1559) < 0)
  {
    **((unsigned char **)this + 192) = 0;
    *((void *)this + 193) = 0;
  }
  else
  {
    *((unsigned char *)this + 1536) = 0;
    *((unsigned char *)this + 1559) = 0;
  }
  std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(*((void **)this + 196));
  *((void *)this + 195) = (char *)this + 1568;
  *((void *)this + 197) = 0;
  *((void *)this + 196) = 0;
  int v22 = (void *)((char *)this + 1608);
  int v23 = *((_DWORD *)this + 404);
  if (v23)
  {
    unsigned int v24 = *((_DWORD *)this + 406);
    if (v24 > 4 * v23 && v24 >= 0x41)
    {
      int v25 = 1 << (33 - __clz(v23 - 1));
      if (v25 <= 64) {
        int v26 = 64;
      }
      else {
        int v26 = v25;
      }
LABEL_51:
      if (v26 == v24)
      {
        *((void *)this + 202) = 0;
        int v27 = (void *)*((void *)this + 201);
        uint64_t v28 = 8 * v24;
        do
        {
          *v27++ = -4096;
          v28 -= 8;
        }
        while (v28);
      }
      else
      {
        MEMORY[0x263E500A0](*v22, 8);
        if (v26)
        {
          unint64_t v74 = (4 * v26 / 3u + 1) | ((unint64_t)(4 * v26 / 3u + 1) >> 1);
          unint64_t v75 = v74 | (v74 >> 2) | ((v74 | (v74 >> 2)) >> 4);
          LODWORD(v75) = (((v75 | (v75 >> 8)) >> 16) | v75 | (v75 >> 8)) + 1;
          *((_DWORD *)this + 406) = v75;
          unint64_t v76 = operator new(8 * v75, (std::align_val_t)8uLL);
          *((void *)this + 201) = v76;
          *((void *)this + 202) = 0;
          uint64_t v77 = *((unsigned int *)this + 406);
          if (v77)
          {
            uint64_t v78 = 8 * v77;
            do
            {
              *v76++ = -4096;
              v78 -= 8;
            }
            while (v78);
          }
        }
        else
        {
          *int v22 = 0;
          *((void *)this + 202) = 0;
          *((_DWORD *)this + 406) = 0;
        }
      }
      goto LABEL_59;
    }
    goto LABEL_55;
  }
  if (*((_DWORD *)this + 405))
  {
    unsigned int v24 = *((_DWORD *)this + 406);
    if (v24 > 0x40)
    {
      int v26 = 0;
      goto LABEL_51;
    }
LABEL_55:
    if (v24)
    {
      int v29 = (void *)*v22;
      uint64_t v30 = 8 * v24;
      do
      {
        *v29++ = -4096;
        v30 -= 8;
      }
      while (v30);
    }
    *((void *)this + 202) = 0;
  }
LABEL_59:
  *((void *)this + 205) = *((void *)this + 204);
  *((void *)this + 208) = *((void *)this + 207);
  *((_OWORD *)this + 105) = 0u;
  *((_DWORD *)this + 430) = 0;
  *((void *)this + 198) = 0;
  *((void *)this + 199) = 0x10000;
  std::unique_ptr<llvm::CodeViewContext>::reset[abi:nn180100]((llvm::CodeViewContext **)this + 22, 0);
  if (*((_DWORD *)this + 441))
  {
    uint64_t v31 = *((unsigned int *)this + 440);
    if (v31)
    {
      uint64_t v32 = 0;
      uint64_t v33 = 8 * v31;
      do
      {
        uint64_t v34 = *((void *)this + 219);
        uint64_t v35 = *(void *)(v34 + v32);
        if (v35 != -8 && v35 != 0) {
          MEMORY[0x263E500A0](v35, 8);
        }
        *(void *)(v34 + v32) = 0;
        v32 += 8;
      }
      while (v33 != v32);
    }
    *(void *)((char *)this + 1764) = 0;
  }
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 223));
  *((void *)this + 222) = (char *)this + 1784;
  *((void *)this + 224) = 0;
  *((void *)this + 223) = 0;
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 229));
  *((void *)this + 228) = (char *)this + 1832;
  *((void *)this + 230) = 0;
  *((void *)this + 229) = 0;
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 226));
  *((void *)this + 225) = (char *)this + 1808;
  *((void *)this + 227) = 0;
  *((void *)this + 226) = 0;
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 232));
  *((void *)this + 231) = (char *)this + 1856;
  *((void *)this + 233) = 0;
  *((void *)this + 232) = 0;
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 235));
  *((void *)this + 234) = (char *)this + 1880;
  *((void *)this + 236) = 0;
  *((void *)this + 235) = 0;
  if (*((_DWORD *)this + 477))
  {
    uint64_t v37 = *((unsigned int *)this + 476);
    if (v37)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 8 * v37;
      do
      {
        uint64_t v40 = *((void *)this + 237);
        uint64_t v41 = *(void *)(v40 + v38);
        if (v41 != -8 && v41 != 0) {
          MEMORY[0x263E500A0](v41, 8);
        }
        *(void *)(v40 + v38) = 0;
        v38 += 8;
      }
      while (v39 != v38);
    }
    *(void *)((char *)this + 1908) = 0;
  }
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 262));
  *((void *)this + 261) = (char *)this + 2096;
  *((void *)this + 263) = 0;
  *((void *)this + 262) = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::clear((_DWORD *)this + 528);
  if (*((_DWORD *)this + 319))
  {
    uint64_t v43 = *((unsigned int *)this + 318);
    if (v43)
    {
      uint64_t v44 = 0;
      uint64_t v45 = 8 * v43;
      do
      {
        uint64_t v46 = *((void *)this + 158);
        uint64_t v47 = *(void *)(v46 + v44);
        if (v47 != -8 && v47 != 0) {
          MEMORY[0x263E500A0](v47, 8);
        }
        *(void *)(v46 + v44) = 0;
        v44 += 8;
      }
      while (v45 != v44);
    }
    *(void *)((char *)this + 1276) = 0;
  }
  *((unsigned char *)this + 1715) = 1;
  *((_WORD *)this + 800) = 0;
  *((_DWORD *)this + 401) = 0;
  *((unsigned char *)this + 2056) = 0;
LABEL_90:
  MEMORY[0x263E500A0](*((void *)this + 264), 8);
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 262));
  if (*((_DWORD *)this + 519))
  {
    uint64_t v49 = *((unsigned int *)this + 518);
    if (v49)
    {
      uint64_t v50 = 0;
      uint64_t v51 = 8 * v49;
      do
      {
        uint64_t v52 = *(void *)(*((void *)this + 258) + v50);
        if (v52 != -8 && v52 != 0) {
          llvm::StringMapEntry<llvm::MCAsmMacro>::Destroy<llvm::MallocAllocator>(v52);
        }
        v50 += 8;
      }
      while (v51 != v50);
    }
  }
  free(*((void **)this + 258));
  llvm::SpecificBumpPtrAllocator<llvm::MCSubtargetInfo>::DestroyAll((uint64_t)this + 1944);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 1944);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 1920);
  if (*((_DWORD *)this + 477))
  {
    uint64_t v54 = *((unsigned int *)this + 476);
    if (v54)
    {
      uint64_t v55 = 0;
      uint64_t v56 = 8 * v54;
      do
      {
        uint64_t v57 = *(void *)(*((void *)this + 237) + v55);
        if (v57 != -8 && v57 != 0) {
          MEMORY[0x263E500A0](v57, 8);
        }
        v55 += 8;
      }
      while (v56 != v55);
    }
  }
  free(*((void **)this + 237));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 235));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 232));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 229));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 226));
  std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((char **)this + 223));
  if (*((_DWORD *)this + 441))
  {
    uint64_t v59 = *((unsigned int *)this + 440);
    if (v59)
    {
      uint64_t v60 = 0;
      uint64_t v61 = 8 * v59;
      do
      {
        uint64_t v62 = *(void *)(*((void *)this + 219) + v60);
        if (v62 != -8 && v62 != 0) {
          MEMORY[0x263E500A0](v62, 8);
        }
        v60 += 8;
      }
      while (v61 != v60);
    }
  }
  free(*((void **)this + 219));
  std::__tree<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__map_value_compare<llvm::MCSymbol *,std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::less<llvm::MCSymbol *>,true>,std::allocator<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::destroy(*((void **)this + 217));
  __int16 v64 = (void *)*((void *)this + 207);
  if (v64)
  {
    *((void *)this + 208) = v64;
    operator delete(v64);
  }
  uint64_t v65 = (void *)*((void *)this + 204);
  if (v65)
  {
    *((void *)this + 205) = v65;
    operator delete(v65);
  }
  MEMORY[0x263E500A0](*((void *)this + 201), 8);
  std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(*((void **)this + 196));
  if (*((char *)this + 1559) < 0) {
    operator delete(*((void **)this + 192));
  }
  std::__tree<std::__value_type<std::string,std::string const>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string const>,std::greater<void>,true>,std::allocator<std::__value_type<std::string,std::string const>>>::destroy(*((char **)this + 190));
  int v66 = (char *)*((void *)this + 170);
  if (v66 != (char *)this + 1384) {
    free(v66);
  }
  uint64_t v67 = *((void *)this + 168);
  *((void *)this + 168) = 0;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  }
  if (*((char *)this + 1343) < 0) {
    operator delete(*((void **)this + 165));
  }
  MEMORY[0x263E500A0](*((void *)this + 161), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 1264);
  free(*((void **)this + 154));
  free(*((void **)this + 150));
  MEMORY[0x263E500A0](*((void *)this + 147), 8);
  free(*((void **)this + 143));
  llvm::SpecificBumpPtrAllocator<llvm::MCInst>::DestroyAll((uint64_t)this + 1048);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 1048);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionXCOFF>::DestroyAll((uint64_t)this + 952);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 952);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionWasm>::DestroyAll((uint64_t)this + 856);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 856);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((uint64_t)this + 760);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 760);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionGOFF>::DestroyAll((uint64_t)this + 664);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 664);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((uint64_t)this + 568);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 568);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionELF>::DestroyAll((uint64_t)this + 472);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 472);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll((uint64_t)this + 376);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 376);
  llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll((uint64_t)this + 280);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 280);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 184);
  std::unique_ptr<llvm::CodeViewContext>::reset[abi:nn180100]((llvm::CodeViewContext **)this + 22, 0);
  std::__function::__value_func<void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::~__value_func[abi:nn180100]((void *)this + 14);
  uint64_t v68 = (void *)*((void *)this + 11);
  if (v68)
  {
    *((void *)this + 12) = v68;
    operator delete(v68);
  }
  std::unique_ptr<llvm::SourceMgr>::reset[abi:nn180100]((llvm::SourceMgr **)this + 10);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

llvm::SourceMgr *std::unique_ptr<llvm::SourceMgr>::reset[abi:nn180100](llvm::SourceMgr **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    llvm::SourceMgr::~SourceMgr(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionCOFF>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      uint64_t v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v10 = (char *)v9 + 248;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        uint64_t v10 = (char *)(v11 + 496);
        uint64_t v9 = (llvm::MCSection *)(v11 + 248);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  if (v12)
  {
    uint64_t v13 = *(void **)(a1 + 64);
    int v14 = &v13[2 * v12];
    do
    {
      unsigned int v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v16 = *v13 + v13[1];
      int v17 = (char *)v15 + 248;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        int v17 = (char *)(v18 + 496);
        unsigned int v15 = (llvm::MCSection *)(v18 + 248);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionDXContainer>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      uint64_t v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v10 = (char *)v9 + 224;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        uint64_t v10 = (char *)(v11 + 448);
        uint64_t v9 = (llvm::MCSection *)(v11 + 224);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  if (v12)
  {
    uint64_t v13 = *(void **)(a1 + 64);
    int v14 = &v13[2 * v12];
    do
    {
      unsigned int v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v16 = *v13 + v13[1];
      int v17 = (char *)v15 + 224;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        int v17 = (char *)(v18 + 448);
        unsigned int v15 = (llvm::MCSection *)(v18 + 224);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionELF>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      uint64_t v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v10 = (char *)v9 + 256;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        uint64_t v10 = (char *)(v11 + 512);
        uint64_t v9 = (llvm::MCSection *)(v11 + 256);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  if (v12)
  {
    uint64_t v13 = *(void **)(a1 + 64);
    int v14 = &v13[2 * v12];
    do
    {
      unsigned int v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v16 = *v13 + v13[1];
      int v17 = (char *)v15 + 256;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        int v17 = (char *)(v18 + 512);
        unsigned int v15 = (llvm::MCSection *)(v18 + 256);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionGOFF>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      uint64_t v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v10 = (char *)v9 + 240;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        uint64_t v10 = (char *)(v11 + 480);
        uint64_t v9 = (llvm::MCSection *)(v11 + 240);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  if (v12)
  {
    uint64_t v13 = *(void **)(a1 + 64);
    int v14 = &v13[2 * v12];
    do
    {
      unsigned int v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v16 = *v13 + v13[1];
      int v17 = (char *)v15 + 240;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        int v17 = (char *)(v18 + 480);
        unsigned int v15 = (llvm::MCSection *)(v18 + 240);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionWasm>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      uint64_t v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v10 = (char *)v9 + 264;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        uint64_t v10 = (char *)(v11 + 528);
        uint64_t v9 = (llvm::MCSection *)(v11 + 264);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  if (v12)
  {
    uint64_t v13 = *(void **)(a1 + 64);
    int v14 = &v13[2 * v12];
    do
    {
      unsigned int v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v16 = *v13 + v13[1];
      int v17 = (char *)v15 + 264;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        int v17 = (char *)(v18 + 528);
        unsigned int v15 = (llvm::MCSection *)(v18 + 264);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSectionXCOFF>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      uint64_t v9 = (llvm::MCSection *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v10 = (char *)v9 + 272;
      while ((unint64_t)v10 <= v8)
      {
        llvm::MCSection::~MCSection(v9);
        uint64_t v10 = (char *)(v11 + 544);
        uint64_t v9 = (llvm::MCSection *)(v11 + 272);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  if (v12)
  {
    uint64_t v13 = *(void **)(a1 + 64);
    int v14 = &v13[2 * v12];
    do
    {
      unsigned int v15 = (llvm::MCSection *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v16 = *v13 + v13[1];
      int v17 = (char *)v15 + 272;
      while ((unint64_t)v17 <= v16)
      {
        llvm::MCSection::~MCSection(v15);
        int v17 = (char *)(v18 + 544);
        unsigned int v15 = (llvm::MCSection *)(v18 + 272);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCInst>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      for (unint64_t i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; i <= v8; i += 192)
      {
        uint64_t v10 = *(void **)(i - 176);
        if ((void *)(i - 160) != v10) {
          free(v10);
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v11 = *(unsigned int *)(a1 + 72);
  if (v11)
  {
    uint64_t v12 = *(void **)(a1 + 64);
    uint64_t v13 = &v12[2 * v11];
    do
    {
      unint64_t v14 = *v12 + v12[1];
      for (unint64_t j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 192; j <= v14; j += 192)
      {
        unint64_t v16 = *(void **)(j - 176);
        if ((void *)(j - 160) != v16) {
          free(v16);
        }
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

uint64_t llvm::SpecificBumpPtrAllocator<llvm::MCSubtargetInfo>::DestroyAll(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      unint64_t v9 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v9 + 328 <= v8)
      {
        uint64_t v10 = (void (***)(void))((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
        do
        {
          (**v10)(v10);
          uint64_t v11 = v10 + 82;
          v10 += 41;
          v9 += 328;
        }
        while ((unint64_t)v11 <= v8);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 72);
  if (v12)
  {
    uint64_t v13 = *(void **)(a1 + 64);
    unint64_t v14 = &v13[2 * v12];
    do
    {
      unint64_t v15 = (*v13 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = *v13 + v13[1];
      if (v15 + 328 <= v16)
      {
        int v17 = (void (***)(void))((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
        do
        {
          (**v17)(v17);
          uint64_t v18 = v17 + 82;
          v17 += 41;
          v15 += 328;
        }
        while ((unint64_t)v18 <= v16);
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(a1);
}

llvm::CodeViewContext *std::unique_ptr<llvm::CodeViewContext>::reset[abi:nn180100](llvm::CodeViewContext **a1, llvm::CodeViewContext *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::CodeViewContext::~CodeViewContext(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

unint64_t llvm::MCContext::getOrCreateSymbol(llvm::MCContext *this, const llvm::Twine *a2)
{
  v12[16] = *MEMORY[0x263EF8340];
  uint64_t v10 = v12;
  long long v11 = xmmword_261E8A720;
  uint64_t v3 = (uint64_t *)llvm::Twine::toStringRef((uint64_t)a2, (uint64_t)&v10);
  unint64_t v5 = v4;
  uint64_t v6 = llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>((uint64_t)this + 1144, v3, v4);
  uint64_t v7 = *v6;
  unint64_t Symbol = *(void *)(*v6 + 8);
  if (!Symbol)
  {
    unint64_t Symbol = llvm::MCContext::createSymbol((uint64_t)this, v3, v5, 0, 0);
    *(void *)(v7 + 8) = Symbol;
  }
  if (v10 != v12) {
    free(v10);
  }
  return Symbol;
}

unint64_t llvm::MCContext::createSymbol(uint64_t a1, unsigned char *a2, unint64_t a3, int a4, int a5)
{
  v32[16] = *MEMORY[0x263EF8340];
  if (a5)
  {
    if (!*(unsigned char *)(a1 + 1716))
    {
      return llvm::MCContext::createSymbolImpl(a1, 0, 1);
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 1715) || (uint64_t v10 = *(void *)(a1 + 144), v11 = *(void *)(v10 + 96), a3 < v11))
    {
      BOOL v9 = 0;
      goto LABEL_12;
    }
    if (v11)
    {
      BOOL v9 = memcmp(a2, *(const void **)(v10 + 88), v11) == 0;
      goto LABEL_12;
    }
  }
  BOOL v9 = 1;
LABEL_12:
  uint64_t v30 = v32;
  long long v31 = xmmword_261E8A720;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v30, a2, &a2[a3]);
  uint64_t v13 = *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(a1 + 1264), (uint64_t *)a2, a3);
  if (!a4) {
    goto LABEL_14;
  }
  do
  {
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&v30, a3);
    int v22 = 0;
    char v26 = 0;
    uint64_t v27 = 0;
    int v28 = 1;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = &unk_270DBD758;
    int v29 = &v30;
    llvm::raw_ostream::SetUnbuffered(&v21);
    unint64_t v14 = *(unsigned int *)(v13 + 8);
    *(_DWORD *)(v13 + 8) = v14 + 1;
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v21, v14, 0, 0, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v21);
LABEL_14:
    v20[0] = 1;
    unint64_t v15 = llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(a1 + 1200, (uint64_t *)v30, v31, v20);
    char v17 = v16;
    uint64_t v18 = *v15;
  }
  while (!v17 && *(unsigned char *)(v18 + 8));
  *(unsigned char *)(v18 + 8) = 1;
  unint64_t SymbolImpl = llvm::MCContext::createSymbolImpl(a1, v18, v9);
  if (v30 != v32) {
    free(v30);
  }
  return SymbolImpl;
}

unint64_t llvm::MCContext::createSymbolImpl(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  switch(*(_DWORD *)a1)
  {
    case 0:
      BOOL v6 = a2 != 0;
      if (a2) {
        uint64_t v7 = 40;
      }
      else {
        uint64_t v7 = 32;
      }
      unint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v7, 3) + 8 * v6;
      unsigned int v9 = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x200;
      goto LABEL_20;
    case 1:
      BOOL v11 = a2 != 0;
      if (a2) {
        uint64_t v12 = 48;
      }
      else {
        uint64_t v12 = 40;
      }
      unint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v12, 3) + 8 * v11;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x100;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)unint64_t v8 = 4 * v11;
      if (a2) {
        *(void *)(v8 - 8) = a2;
      }
      *(void *)(v8 + 32) = 0;
      return v8;
    case 2:
      BOOL v6 = a2 != 0;
      if (a2) {
        uint64_t v13 = 40;
      }
      else {
        uint64_t v13 = 32;
      }
      unint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v13, 3) + 8 * v6;
      unsigned int v9 = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x180;
      goto LABEL_20;
    case 3:
      BOOL v14 = a2 != 0;
      if (a2) {
        uint64_t v15 = 48;
      }
      else {
        uint64_t v15 = 40;
      }
      unint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v15, 3) + 8 * v14;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x80;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)unint64_t v8 = 4 * v14;
      if (a2) {
        *(void *)(v8 - 8) = a2;
      }
      *(_WORD *)(v8 + 32) = 0;
      return v8;
    case 5:
      BOOL v16 = a2 != 0;
      if (a2) {
        uint64_t v17 = 192;
      }
      else {
        uint64_t v17 = 184;
      }
      unint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v17, 3) + 8 * v16;
      *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x280;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)unint64_t v8 = 4 * v16;
      if (a2) {
        *(void *)(v8 - 8) = a2;
      }
      *(unsigned char *)(v8 + 32) = 0;
      *(unsigned char *)(v8 + 36) = 0;
      *(unsigned char *)(v8 + 48) = 0;
      *(unsigned char *)(v8 + 64) = 0;
      *(unsigned char *)(v8 + 72) = 0;
      *(unsigned char *)(v8 + 88) = 0;
      *(unsigned char *)(v8 + 96) = 0;
      *(unsigned char *)(v8 + 112) = 0;
      *(void *)(v8 + 120) = 0;
      *(unsigned char *)(v8 + 128) = 0;
      *(unsigned char *)(v8 + 130) = 0;
      *(unsigned char *)(v8 + 136) = 0;
      *(unsigned char *)(v8 + 168) = 0;
      *(void *)(v8 + 176) = 0;
      *(_DWORD *)(v8 + 40) = 0;
      *(_WORD *)(v8 + 44) = 0;
      return v8;
    case 6:
      if (!a2)
      {
        unint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, 72, 3);
        *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x300;
        *(_WORD *)(v8 + 12) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
        *(void *)unint64_t v8 = 0;
        *(_WORD *)(v8 + 32) = 0;
        *(void *)(v8 + 40) = 0;
        *(_WORD *)(v8 + 48) = 0;
        *(void *)(v8 + 56) = 0;
        *(void *)(v8 + 64) = 0;
        return v8;
      }
      uint64_t v19 = (unsigned __int8 *)(a2 + 16);
      uint64_t v18 = *(unsigned __int8 **)a2;
      if (*(void *)a2 >= 0xBuLL)
      {
        BOOL v20 = *(void *)v19 == 0x656D616E65525F2ELL && *(void *)(a2 + 19) == 0x2E2E64656D616E65;
        if (v20) {
          goto LABEL_48;
        }
      }
      else if (v18 != (unsigned __int8 *)10)
      {
        goto LABEL_49;
      }
      if (*(void *)v19 == 0x64656D616E65525FLL && *(_WORD *)(a2 + 24) == 11822)
      {
LABEL_48:
        uint64_t v51 = "invalid symbol name from source";
        v53[4] = 259;
        llvm::MCContext::reportError(a1, 0, (uint64_t)&v51);
      }
LABEL_49:
      if ((*(unsigned int (**)(void, uint64_t, unsigned __int8 *))(**(void **)(a1 + 144) + 56))(*(void *)(a1 + 144), a2 + 16, v18))
      {
        unint64_t v22 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, 80, 3);
        *(_DWORD *)(v22 + 16) = *(_DWORD *)(v22 + 16) & 0xFFF80000 | a3 | 0x300;
        *(_WORD *)(v22 + 20) = 0;
        *(_DWORD *)(v22 + 24) = 0;
        *(void *)(v22 + 32) = 0;
        *(void *)unint64_t v22 = a2;
        *(_WORD *)(v22 + 40) = 0;
        *(void *)(v22 + 48) = 0;
        *(_WORD *)(v22 + 56) = 0;
        *(void *)(v22 + 64) = 0;
        *(void *)(v22 + 72) = 0;
        *(void *)(v22 + 8) = 4;
        return v22 + 8;
      }
      else
      {
        uint64_t v51 = (char *)v53;
        long long v52 = xmmword_261E8A720;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v51, (unsigned char *)(a2 + 16), &v18[(void)v19]);
        if ((void)v52)
        {
          BOOL v23 = *v51 == 46;
          if (*v51 == 46) {
            uint64_t v24 = "._Renamed..";
          }
          else {
            uint64_t v24 = "_Renamed..";
          }
        }
        else
        {
          BOOL v23 = 0;
          uint64_t v24 = "_Renamed..";
        }
        size_t v25 = strlen(v24);
        int v48 = v50;
        long long v49 = xmmword_261E8A720;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v48, v24, &v24[v25]);
        uint64_t v26 = v52;
        if ((void)v52)
        {
          unint64_t v27 = 0;
          do
          {
            if (!(*(unsigned int (**)(void, void))(**(void **)(a1 + 144) + 48))(*(void *)(a1 + 144), v51[v27])|| v51[v27] == 95)
            {
              int v40 = 0;
              char v44 = 0;
              uint64_t v45 = 0;
              int v46 = 1;
              uint64_t v42 = 0;
              uint64_t v43 = 0;
              uint64_t v41 = 0;
              uint64_t v39 = &unk_270DBD758;
              uint64_t v47 = &v48;
              llvm::raw_ostream::SetUnbuffered(&v39);
              llvm::write_hex((llvm::raw_ostream *)&v39, v51[v27], 1, 0, 0);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v39);
              v51[v27] = 95;
            }
            ++v27;
            uint64_t v26 = v52;
          }
          while (v27 < (unint64_t)v52);
        }
        if (v23)
        {
          uint64_t v28 = v26 - 1;
          if (v26 - (unint64_t)(v26 != 0) < v26 - 1) {
            uint64_t v28 = v26 - (v26 != 0);
          }
          if (v26) {
            int v29 = v51 + 1;
          }
          else {
            int v29 = v51;
          }
          uint64_t v30 = &v51[(v26 != 0) + v28];
        }
        else
        {
          int v29 = v51;
          uint64_t v30 = &v51[v26];
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v48, v29, v30);
        v38[0] = 1;
        long long v31 = llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(a1 + 1200, (uint64_t *)v48, v49, v38);
        unint64_t v32 = *v31;
        *(unsigned char *)(v32 + 8) = 1;
        if (v32) {
          uint64_t v33 = 80;
        }
        else {
          uint64_t v33 = 72;
        }
        unint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v33, 3)
           + 8 * (v32 != 0);
        unint64_t v34 = *v31;
        BOOL v20 = *v31 == 0;
        *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3 | 0x300;
        unsigned int v35 = !v20;
        *(_WORD *)(v8 + 12) = 0;
        *(_DWORD *)(v8 + 16) = 0;
        *(void *)(v8 + 24) = 0;
        *(void *)unint64_t v8 = 4 * v35;
        if (v34) {
          *(void *)(v8 - 8) = v34;
        }
        *(_WORD *)(v8 + 32) = 0;
        *(void *)(v8 + 40) = 0;
        *(_WORD *)(v8 + 48) = 0;
        *(void *)(v8 + 56) = 0;
        *(void *)(v8 + 64) = 0;
        *(void *)(v8 + 56) = llvm::MCSymbolXCOFF::getUnqualifiedName(v19, v18);
        *(void *)(v8 + 64) = v36;
        if (v48 != v50) {
          free(v48);
        }
        if (v51 != (char *)v53) {
          free(v51);
        }
      }
      return v8;
    default:
      BOOL v6 = a2 != 0;
      if (a2) {
        uint64_t v10 = 40;
      }
      else {
        uint64_t v10 = 32;
      }
      unint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v10, 3) + 8 * v6;
      unsigned int v9 = *(_DWORD *)(v8 + 8) & 0xFFF80000 | a3;
LABEL_20:
      *(_DWORD *)(v8 + 8) = v9;
      *(_WORD *)(v8 + 12) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      *(void *)unint64_t v8 = 4 * v6;
      if (a2) {
        *(void *)(v8 - 8) = a2;
      }
      return v8;
  }
}

unint64_t llvm::MCContext::createTempSymbol(llvm::MCContext *this, const llvm::Twine *a2, int a3)
{
  v19[16] = *MEMORY[0x263EF8340];
  BOOL v16 = &v17;
  uint64_t v17 = v19;
  long long v18 = xmmword_261E8A720;
  int v9 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  int v15 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  unint64_t v8 = &unk_270DBD758;
  llvm::raw_ostream::SetUnbuffered(&v8);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v8, *(const void **)(*((void *)this + 18) + 88), *(void *)(*((void *)this + 18) + 96));
  llvm::Twine::print(a2, (llvm::raw_ostream *)&v8);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
  unint64_t Symbol = llvm::MCContext::createSymbol((uint64_t)this, v17, v18, a3, 1);
  if (v17 != v19) {
    free(v17);
  }
  return Symbol;
}

unint64_t llvm::MCContext::createNamedTempSymbol(llvm::MCContext *this, const llvm::Twine *a2)
{
  v17[16] = *MEMORY[0x263EF8340];
  uint64_t v14 = &v15;
  int v15 = v17;
  long long v16 = xmmword_261E8A720;
  int v7 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  int v13 = 1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  BOOL v6 = &unk_270DBD758;
  llvm::raw_ostream::SetUnbuffered(&v6);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v6, *(const void **)(*((void *)this + 18) + 88), *(void *)(*((void *)this + 18) + 96));
  llvm::Twine::print(a2, (llvm::raw_ostream *)&v6);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v6);
  unint64_t Symbol = llvm::MCContext::createSymbol((uint64_t)this, v15, v16, 1, 0);
  if (v15 != v17) {
    free(v15);
  }
  return Symbol;
}

uint64_t llvm::MCContext::NextInstance(llvm::MCContext *this, int a2)
{
  int v7 = a2;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct((uint64_t *)this + 161, &v7);
  unint64_t v4 = (_DWORD *)*((void *)v3 + 1);
  if (v4)
  {
    uint64_t v5 = (*v4 + 1);
  }
  else
  {
    unint64_t v4 = (_DWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this + 184, 4, 3);
    _DWORD *v4 = 0;
    *((void *)v3 + 1) = v4;
    uint64_t v5 = 1;
  }
  _DWORD *v4 = v5;
  return v5;
}

uint64_t llvm::MCContext::GetInstance(llvm::MCContext *this, int a2)
{
  int v8 = a2;
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct((uint64_t *)this + 161, &v8);
  unint64_t v4 = (unsigned int *)*((void *)v3 + 1);
  if (v4) {
    return *v4;
  }
  BOOL v6 = v3;
  int v7 = (_DWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this + 184, 4, 3);
  uint64_t result = 0;
  _DWORD *v7 = 0;
  *((void *)v6 + 1) = v7;
  return result;
}

unint64_t llvm::MCContext::getOrCreateDirectionalLocalSymbol(llvm::MCContext *this, unsigned int a2, uint64_t a3)
{
  *(void *)BOOL v6 = a2 | (unint64_t)(a3 << 32);
  unint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::FindAndConstruct((uint64_t *)this + 147, v6);
  unint64_t result = *((void *)v4 + 1);
  if (!result)
  {
    *(void *)BOOL v6 = "tmp";
    __int16 v7 = 259;
    unint64_t result = llvm::MCContext::createNamedTempSymbol(this, (const llvm::Twine *)v6);
    *((void *)v4 + 1) = result;
  }
  return result;
}

unint64_t llvm::MCContext::createDirectionalLocalSymbol(llvm::MCContext *this, unsigned int a2)
{
  uint64_t Instance = llvm::MCContext::NextInstance(this, a2);
  return llvm::MCContext::getOrCreateDirectionalLocalSymbol(this, a2, Instance);
}

unint64_t llvm::MCContext::getDirectionalLocalSymbol(llvm::MCContext *this, unsigned int a2, int a3)
{
  uint64_t v5 = llvm::MCContext::GetInstance(this, a2) + (a3 ^ 1);
  return llvm::MCContext::getOrCreateDirectionalLocalSymbol(this, a2, v5);
}

uint64_t llvm::MCContext::lookupSymbol(llvm::MCContext *this, const llvm::Twine *a2)
{
  v10[16] = *MEMORY[0x263EF8340];
  int v8 = v10;
  long long v9 = xmmword_261E8A720;
  uint64_t v3 = (uint64_t *)llvm::Twine::toStringRef((uint64_t)a2, (uint64_t)&v8);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 143, v3, v4);
  if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 288)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(*((void *)this + 143) + 8 * Key) + 8);
  }
  if (v8 != v10) {
    free(v8);
  }
  return v6;
}

void *llvm::MCContext::reportError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[4] = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 2056) = 1;
  uint64_t v4 = a2;
  v5[0] = &unk_270DC1F90;
  v5[1] = &v4;
  v5[2] = a3;
  void v5[3] = v5;
  llvm::MCContext::reportCommon(a1, a2, (uint64_t)v5);
  return std::__function::__value_func<void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::~__value_func[abi:nn180100](v5);
}

unsigned __int8 *llvm::MCSymbolXCOFF::getUnqualifiedName(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[(void)a2 - 1] == 93)
  {
    unsigned __int8 v4 = 91;
    v5[0] = a1;
    v5[1] = a2;
    std::string_view::rfind[abi:nn180100](v5, &v4, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
  }
  return a1;
}

unint64_t llvm::MCContext::getMachOSection(llvm::MCContext *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, unsigned char *a9)
{
  v32[0] = a2;
  v32[1] = a3;
  void v32[2] = 44;
  __int16 v33 = 1797;
  long long v16 = (llvm::MCContext *)((char *)a1 + 1752);
  v34[0] = v32;
  v34[2] = a4;
  v34[3] = a5;
  __int16 v35 = 1282;
  llvm::Twine::str((llvm::Twine *)v34, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v19 = llvm::StringMap<llvm::MCSectionMachO *,llvm::MallocAllocator>::try_emplace<>(v16, (uint64_t *)p_p, size);
  char v21 = v20;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v21)
  {
    int v31 = a6;
    if (a9)
    {
      char v22 = 1;
      HIBYTE(v35) = 1;
      int v23 = a7;
      if (*a9)
      {
        v34[0] = a9;
        char v22 = 3;
      }
      LOBYTE(v35) = v22;
      Tempunint64_t Symbol = llvm::MCContext::createTempSymbol(a1, (const llvm::Twine *)v34, 0);
    }
    else
    {
      int v23 = a7;
      Tempunint64_t Symbol = 0;
    }
    unint64_t v25 = **v19;
    if (v25 >= v25 - a5) {
      unint64_t v26 = v25 - a5;
    }
    else {
      unint64_t v26 = **v19;
    }
    unint64_t v27 = (char *)*v19 + v26;
    unint64_t v28 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)a1 + 568, 248, 3);
    llvm::MCSectionMachO::MCSectionMachO(v28, a2, a3, (uint64_t)(v27 + 16), v25 - v26, v31, v23, a8, TempSymbol);
    (*v19)[1] = v29;
  }
  return (*v19)[1];
}

unint64_t **llvm::StringMap<llvm::MCSectionMachO *,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  unint64_t i = (unint64_t **)(*(void *)a1 + 8 * v6);
  int v8 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == (unint64_t *)-8)
    {
      long long v9 = i[1];
      ++i;
      int v8 = v9;
    }
    return i;
  }
  uint64_t v10 = operator new(a3 + 17, (std::align_val_t)8uLL);
  char v11 = v10;
  uint64_t v12 = (char *)(v10 + 2);
  if (a3) {
    memcpy(v10 + 2, a2, a3);
  }
  v12[a3] = 0;
  *char v11 = a3;
  v11[1] = 0;
  *unint64_t i = v11;
  ++*((_DWORD *)a1 + 3);
  for (unint64_t i = (unint64_t **)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t llvm::MCContext::getELFSection(llvm::MCContext *a1, llvm::Twine *a2, int a3, int a4, int a5, llvm::Twine *this, int a7, int a8, unsigned char *a9)
{
  if (*((unsigned __int8 *)this + 32) < 2u) {
    goto LABEL_9;
  }
  llvm::Twine::str(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_7;
    }
LABEL_9:
    unint64_t Symbol = 0;
    return llvm::MCContext::getELFSection((uint64_t)a1, a2, a3, a4, a5, Symbol, a7, a8, a9);
  }
  if (!size) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t Symbol = llvm::MCContext::getOrCreateSymbol(a1, this);
  return llvm::MCContext::getELFSection((uint64_t)a1, a2, a3, a4, a5, Symbol, a7, a8, a9);
}

uint64_t llvm::MCContext::getELFSection(uint64_t a1, llvm::Twine *this, int a3, int a4, int a5, unint64_t a6, int a7, int a8, unsigned char *a9)
{
  if (a6)
  {
    if ((*(unsigned char *)a6 & 4) != 0)
    {
      uint64_t v14 = *(uint64_t **)(a6 - 8);
      uint64_t v15 = *v14;
      uint64_t v12 = v14 + 2;
      uint64_t v13 = v15;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = &str_24;
  }
  llvm::Twine::str(this, &v89);
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v16 = &v89;
  }
  else {
    long long v16 = (std::string *)v89.__r_.__value_.__r.__words[0];
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v89.__r_.__value_.__l.__size_;
  }
  if (a9)
  {
    if ((*a9 & 4) != 0)
    {
      char v20 = (uint64_t *)*((void *)a9 - 1);
      uint64_t v21 = *v20;
      long long v18 = v20 + 2;
      uint64_t v19 = v21;
    }
    else
    {
      long long v18 = 0;
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    long long v18 = &str_24;
  }
  if (size > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  int v84 = a7;
  if (size >= 0x17)
  {
    uint64_t v23 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17) {
      uint64_t v23 = size | 7;
    }
    uint64_t v24 = v23 + 1;
    p_dst = (long long *)operator new(v23 + 1);
    *((void *)&__dst + 1) = size;
    unint64_t v91 = v24 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_24;
  }
  HIBYTE(v91) = size;
  p_dst = &__dst;
  if (size) {
LABEL_24:
  }
    memmove(p_dst, v16, size);
  *((unsigned char *)p_dst + size) = 0;
  *((void *)&v92 + 1) = v13;
  *(void *)&long long v93 = v18;
  *((void *)&v93 + 1) = v19;
  int v25 = a8;
  int v94 = a8;
  *(_OWORD *)std::string __p = __dst;
  unint64_t v96 = v91;
  long long __dst = 0uLL;
  unint64_t v91 = 0;
  *(void *)&long long v92 = v12;
  int v99 = a8;
  long long v97 = v92;
  long long v98 = v93;
  uint64_t v100 = 0;
  unint64_t v26 = (void **)(a1 + 1784);
  unint64_t v27 = *(char **)(a1 + 1784);
  if (v27)
  {
    int v28 = a4;
    while (1)
    {
      while (1)
      {
        unint64_t v29 = (void **)v27;
        uint64_t v30 = (unsigned __int8 *)(v27 + 32);
        if (!llvm::MCContext::ELFSectionKey::operator<((unsigned __int8 *)__p, (unsigned __int8 **)v27 + 4)) {
          break;
        }
        unint64_t v27 = (char *)*v29;
        unint64_t v26 = v29;
        if (!*v29) {
          goto LABEL_34;
        }
      }
      if (!llvm::MCContext::ELFSectionKey::operator<(v30, (unsigned __int8 **)__p)) {
        break;
      }
      unint64_t v26 = v29 + 1;
      unint64_t v27 = (char *)v29[1];
      if (!v27) {
        goto LABEL_34;
      }
    }
    int v31 = (char *)*v26;
    if (*v26)
    {
      int v35 = 1;
      goto LABEL_37;
    }
  }
  else
  {
    unint64_t v29 = (void **)(a1 + 1784);
    int v28 = a4;
  }
LABEL_34:
  int v31 = (char *)operator new(0x68uLL);
  *((_OWORD *)v31 + 2) = *(_OWORD *)__p;
  long long v32 = v98;
  *(_OWORD *)(v31 + 56) = v97;
  *((void *)v31 + 6) = v96;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v96 = 0;
  *(_OWORD *)(v31 + 72) = v32;
  *((_DWORD *)v31 + 22) = v99;
  *((void *)v31 + 12) = 0;
  *(void *)int v31 = 0;
  *((void *)v31 + 1) = 0;
  *((void *)v31 + 2) = v29;
  *unint64_t v26 = v31;
  uint64_t v33 = **(void **)(a1 + 1776);
  unint64_t v34 = (uint64_t *)v31;
  if (v33)
  {
    *(void *)(a1 + 1776) = v33;
    unint64_t v34 = (uint64_t *)*v26;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1784), v34);
  int v35 = 0;
  ++*(void *)(a1 + 1792);
LABEL_37:
  if (SHIBYTE(v96) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete((void *)__dst);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v89.__r_.__value_.__l.__data_);
    if (v35) {
      return *((void *)v31 + 12);
    }
LABEL_45:
    int v36 = v31[55];
    if (v36 >= 0) {
      uint64_t v37 = (uint64_t)(v31 + 32);
    }
    else {
      uint64_t v37 = *((void *)v31 + 4);
    }
    if (v36 >= 0) {
      unint64_t v38 = v31[55];
    }
    else {
      unint64_t v38 = *((void *)v31 + 5);
    }
    if ((v28 & 0x20000000) != 0)
    {
      int v39 = 3;
      goto LABEL_67;
    }
    if ((v28 & 4) != 0) {
      goto LABEL_66;
    }
    if ((v28 & 1) == 0)
    {
LABEL_54:
      int v39 = 4;
LABEL_67:
      int v83 = v39;
      goto LABEL_68;
    }
    if ((v28 & 0x400) != 0)
    {
      int v39 = 12;
      if ((a3 & 8) == 0) {
        int v39 = 13;
      }
      goto LABEL_67;
    }
    if (v38 == 4)
    {
      if (*(_DWORD *)v37 == 1936941614)
      {
LABEL_123:
        int v39 = 15;
        goto LABEL_67;
      }
LABEL_66:
      int v39 = 2;
      goto LABEL_67;
    }
    if (v38 < 5) {
      goto LABEL_66;
    }
    BOOL v54 = *(_DWORD *)v37 == 1936941614 && *(unsigned char *)(v37 + 4) == 46;
    if (v54) {
      goto LABEL_123;
    }
    if (v38 >= 0x10)
    {
      if (*(void *)v37 == 0x6E696C2E756E672ELL && *(void *)(v37 + 8) == 0x2E622E65636E6F6BLL) {
        goto LABEL_123;
      }
      if (v38 >= 0x11)
      {
        BOOL v58 = *(void *)v37 == 0x696C2E6D766C6C2ELL && *(void *)(v37 + 8) == 0x622E65636E6F6B6ELL;
        if (v58 && *(unsigned char *)(v37 + 16) == 46) {
          goto LABEL_123;
        }
      }
    }
    else
    {
      switch(v38)
      {
        case 0xCuLL:
          if (*(void *)v37 == 0x65722E617461642ELL && *(_DWORD *)(v37 + 8) == 1869753964)
          {
            int v39 = 20;
            goto LABEL_67;
          }
          break;
        case 6uLL:
          if (*(_DWORD *)v37 == 1952539694 && *(_WORD *)(v37 + 4) == 12641) {
            goto LABEL_154;
          }
          break;
        case 5uLL:
          if (*(_DWORD *)v37 != 1952539694 || *(unsigned char *)(v37 + 4) != 97)
          {
            if (*(_DWORD *)v37 == 1935832110 && *(unsigned char *)(v37 + 4) == 115)
            {
              int v39 = 12;
              goto LABEL_67;
            }
            goto LABEL_66;
          }
LABEL_154:
          int v39 = 19;
          goto LABEL_67;
      }
    }
    if (*(_DWORD *)v37 == 1952539694 && *(_WORD *)(v37 + 4) == 11873) {
      goto LABEL_154;
    }
    if (v38 == 8)
    {
      if (*(void *)v37 == 0x31617461646F722ELL) {
        goto LABEL_54;
      }
    }
    else
    {
      if (v38 == 7)
      {
        if (*(_DWORD *)v37 == 1685025326 && *(_DWORD *)(v37 + 3) == 1635017060) {
          goto LABEL_54;
        }
        if ((*(_DWORD *)v37 != 1935832110 || *(_WORD *)(v37 + 4) != 11891)
          && (*(_DWORD *)v37 != 1633973294 || *(_DWORD *)(v37 + 3) != 778138721))
        {
LABEL_196:
          BOOL v75 = *(_DWORD *)v37 != 1650811950 || *(_DWORD *)(v37 + 3) != 1600615778;
          int v39 = 2 * v75;
          goto LABEL_67;
        }
        goto LABEL_191;
      }
      if (v38 < 8)
      {
LABEL_159:
        if (*(_DWORD *)v37 != 1935832110 || *(_WORD *)(v37 + 4) != 11891)
        {
          if (v38 >= 0x11)
          {
            if (*(void *)v37 != 0x6E696C2E756E672ELL
              || *(void *)(v37 + 8) != 0x62742E65636E6F6BLL
              || *(unsigned char *)(v37 + 16) != 46)
            {
              if (v38 >= 0x12)
              {
                BOOL v77 = *(void *)v37 == 0x696C2E6D766C6C2ELL
                   && *(void *)(v37 + 8) == 0x742E65636E6F6B6ELL
                   && *(_WORD *)(v37 + 16) == 11874;
                if (v77
                  || (*(_DWORD *)v37 == 1633973294 ? (BOOL v78 = *(_DWORD *)(v37 + 3) == 778138721) : (BOOL v78 = 0),
                      v78
                   || (*(void *)v37 == 0x6E696C2E756E672ELL
                     ? (BOOL v79 = *(void *)(v37 + 8) == 0x64742E65636E6F6BLL)
                     : (BOOL v79 = 0),
                       v79 ? (BOOL v80 = *(unsigned char *)(v37 + 16) == 46) : (BOOL v80 = 0),
                       v80)))
                {
                  int v83 = 13;
                  int v28 = a4;
LABEL_68:
                  int v40 = llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>(a1 + 1144, (uint64_t *)v37, v38);
                  uint64_t v41 = *v40;
                  uint64_t v42 = *(llvm::MCSymbol **)(*v40 + 8);
                  if (!v42) {
                    goto LABEL_76;
                  }
                  if (llvm::MCSymbol::getFragment(v42, 1))
                  {
                    if (llvm::MCSymbol::isInSection(*(llvm::MCSymbol **)(v41 + 8)))
                    {
                      uint64_t v43 = *(llvm::MCSymbol **)(*(void *)(llvm::MCSymbol::getFragment(*(llvm::MCSymbol **)(v41 + 8), 1)+ 16)+ 8);
                      if (v43 == *(llvm::MCSymbol **)(v41 + 8))
                      {
LABEL_74:
                        if (v43 && !llvm::MCSymbol::getFragment(v43, 1))
                        {
                          uint64_t v47 = *(void *)(v41 + 8);
                          goto LABEL_87;
                        }
LABEL_76:
                        __p[0] = (void *)v37;
                        __p[1] = (void *)v38;
                        LOBYTE(v96) = 0;
                        char v44 = llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(a1 + 1200, (uint64_t *)v37, v38, &v96);
                        if (*v44) {
                          uint64_t v46 = 48;
                        }
                        else {
                          uint64_t v46 = 40;
                        }
                        BOOL v45 = *v44 != 0;
                        uint64_t v47 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 184, v46, 3)+ 8 * v45;
                        unint64_t v48 = *v44;
                        BOOL v54 = *v44 == 0;
                        *(_DWORD *)(v47 + 8) = *(_DWORD *)(v47 + 8) & 0xFFF80000 | 0x100;
                        unsigned int v49 = !v54;
                        *(_WORD *)(v47 + 12) = 0;
                        *(_DWORD *)(v47 + 16) = 0;
                        *(void *)(v47 + 24) = 0;
                        *(void *)uint64_t v47 = 4 * v49;
                        if (v48) {
                          *(void *)(v47 - 8) = v48;
                        }
                        *(void *)(v47 + 32) = 0;
                        if (!*(void *)(v41 + 8)) {
                          *(void *)(v41 + 8) = v47;
                        }
LABEL_87:
                        *(_WORD *)(v47 + 12) = *(_WORD *)(v47 + 12) & 0xEFE0 | 0x1003;
                        unint64_t v50 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 472, 256, 3);
                        llvm::MCSection::MCSection(v50, 1, v37, v38, v83, v47);
                        *(void *)uint64_t v51 = &unk_270DC2090;
                        *(_DWORD *)(v51 + 224) = a3;
                        *(_DWORD *)(v51 + 228) = v28;
                        *(_DWORD *)(v51 + 232) = v25;
                        *(_DWORD *)(v51 + 236) = a5;
                        uint64_t v52 = 4;
                        if (!v84) {
                          uint64_t v52 = 0;
                        }
                        *(void *)(v51 + 240) = v52 | a6 & 0xFFFFFFFFFFFFFFFBLL;
                        *(void *)(v51 + 248) = a9;
                        if ((a6 & 0xFFFFFFFFFFFFFFF8) != 0) {
                          *(_WORD *)((a6 & 0xFFFFFFFFFFFFFFF8) + 12) |= 0x400u;
                        }
                        operator new();
                      }
                    }
                    __p[0] = "invalid symbol redefinition";
                    WORD4(v97) = 259;
                    llvm::MCContext::reportError(a1, 0, (uint64_t)__p);
                  }
                  uint64_t v43 = *(llvm::MCSymbol **)(v41 + 8);
                  goto LABEL_74;
                }
                BOOL v82 = *(void *)v37 == 0x696C2E6D766C6C2ELL
                   && *(void *)(v37 + 8) == 0x742E65636E6F6B6ELL
                   && *(_WORD *)(v37 + 16) == 11876;
                int v28 = a4;
                if (!v82) {
                  goto LABEL_196;
                }
              }
              else if (*(_DWORD *)v37 != 1633973294 || *(_DWORD *)(v37 + 3) != 778138721)
              {
                BOOL v71 = *(void *)v37 == 0x6E696C2E756E672ELL && *(void *)(v37 + 8) == 0x64742E65636E6F6BLL;
                if (!v71 || *(unsigned char *)(v37 + 16) != 46) {
                  goto LABEL_196;
                }
              }
            }
          }
          else if (v38 == 6)
          {
            if (*(_DWORD *)v37 != 1633973294 || *(_WORD *)(v37 + 4) != 24948) {
              goto LABEL_66;
            }
          }
          else if (*(_DWORD *)v37 != 1633973294 || *(_DWORD *)(v37 + 3) != 778138721)
          {
            goto LABEL_196;
          }
        }
LABEL_191:
        int v39 = 13;
        goto LABEL_67;
      }
    }
    if (*(void *)v37 == 0x2E617461646F722ELL) {
      goto LABEL_54;
    }
    goto LABEL_159;
  }
  if (!v35) {
    goto LABEL_45;
  }
  return *((void *)v31 + 12);
}

void llvm::MCContext::getGOFFSection(uint64_t a1, void *__src, size_t __len, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (uint64_t **)(a1 + 1824);
  if (__src)
  {
    std::string::basic_string[abi:nn180100](__p, __src, __len);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v17 = 0;
  }
  long long v18 = __p;
  uint64_t v13 = std::__tree<std::__value_type<std::string,llvm::MCSectionGOFF *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::MCSectionGOFF *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::MCSectionGOFF *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (!*((void *)v13 + 7))
  {
    unint64_t v14 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 664, 240, 3);
    llvm::MCSection::MCSection(v14, 2, (uint64_t)__src, __len, a4, 0);
    *uint64_t v15 = &unk_270DC1EE8;
    v15[28] = a5;
    v15[29] = a6;
    *((void *)v13 + 7) = v15;
  }
}

unint64_t llvm::MCContext::getCOFFSection(llvm::MCContext *this, const void *a2, std::string::size_type a3, int a4, int a5, std::string::size_type a6, std::string::size_type a7, unsigned int a8, int a9, unsigned char *a10)
{
  char v11 = (void *)a6;
  long long v16 = this;
  if (a7)
  {
    WORD4(v53) = 261;
    v52.__r_.__value_.__r.__words[0] = a6;
    v52.__r_.__value_.__l.__size_ = a7;
    unint64_t Symbol = (unsigned char *)llvm::MCContext::getOrCreateSymbol(this, (const llvm::Twine *)&v52);
    if ((*Symbol & 4) != 0)
    {
      uint64_t v19 = (uint64_t *)*((void *)Symbol - 1);
      uint64_t v20 = *v19;
      char v11 = v19 + 2;
      uint64_t v18 = v20;
    }
    else
    {
      char v11 = 0;
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    unint64_t Symbol = 0;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  int v21 = a9;
  uint64_t v51 = Symbol;
  if (a3 >= 0x17)
  {
    uint64_t v23 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v23 = a3 | 7;
    }
    uint64_t v24 = v16;
    uint64_t v25 = v18;
    unint64_t v26 = a2;
    int v27 = a5;
    unsigned int v28 = a8;
    int v29 = a4;
    uint64_t v30 = v23 + 1;
    p_dst = (std::string *)operator new(v23 + 1);
    unint64_t v31 = v30 | 0x8000000000000000;
    a4 = v29;
    a8 = v28;
    a5 = v27;
    a2 = v26;
    uint64_t v18 = v25;
    long long v16 = v24;
    int v21 = a9;
    __dst.__r_.__value_.__l.__size_ = a3;
    __dst.__r_.__value_.__r.__words[2] = v31;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_13;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = a3;
  p_dst = &__dst;
  if (a3) {
LABEL_13:
  }
    memmove(p_dst, a2, a3);
  p_dst->__r_.__value_.__s.__data_[a3] = 0;
  *(void *)&long long v57 = v11;
  *((void *)&v57 + 1) = v18;
  unint64_t v58 = __PAIR64__(v21, a8);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v52, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string v52 = __dst;
  }
  long long v53 = v57;
  unint64_t v54 = v58;
  uint64_t v55 = 0;
  long long v32 = (void **)((char *)v16 + 1808);
  uint64_t v33 = (char *)*((void *)v16 + 226);
  if (v33)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v34 = (void **)v33;
        int v35 = (unsigned __int8 *)(v33 + 32);
        if (!llvm::MCContext::COFFSectionKey::operator<((unsigned __int8 *)&v52, (unsigned __int8 **)v33 + 4)) {
          break;
        }
        uint64_t v33 = (char *)*v34;
        long long v32 = v34;
        if (!*v34) {
          goto LABEL_25;
        }
      }
      if (!llvm::MCContext::COFFSectionKey::operator<(v35, (unsigned __int8 **)&v52)) {
        break;
      }
      long long v32 = v34 + 1;
      uint64_t v33 = (char *)v34[1];
      if (!v33) {
        goto LABEL_25;
      }
    }
    int v36 = (char *)*v32;
    if (*v32)
    {
      int v39 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v34 = (void **)((char *)v16 + 1808);
  }
LABEL_25:
  int v36 = (char *)operator new(0x58uLL);
  *(std::string *)(v36 + 32) = v52;
  memset(&v52, 0, sizeof(v52));
  *(_OWORD *)(v36 + 56) = v53;
  *((void *)v36 + 9) = v54;
  *((void *)v36 + 10) = 0;
  *(void *)int v36 = 0;
  *((void *)v36 + 1) = 0;
  *((void *)v36 + 2) = v34;
  const char *v32 = v36;
  uint64_t v37 = **((void **)v16 + 225);
  unint64_t v38 = (uint64_t *)v36;
  if (v37)
  {
    *((void *)v16 + 225) = v37;
    unint64_t v38 = (uint64_t *)*v32;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v16 + 226), v38);
  int v39 = 0;
  ++*((void *)v16 + 227);
LABEL_28:
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v52.__r_.__value_.__l.__data_);
    if (v39) {
      goto LABEL_30;
    }
  }
  else if (v39)
  {
LABEL_30:
    unint64_t v40 = *((void *)v36 + 10);
    goto LABEL_46;
  }
  if (a10)
  {
    char v41 = 1;
    BYTE9(v53) = 1;
    if (*a10)
    {
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)a10;
      char v41 = 3;
    }
    BYTE8(v53) = v41;
    Tempunint64_t Symbol = llvm::MCContext::createTempSymbol(v16, (const llvm::Twine *)&v52, 0);
  }
  else
  {
    Tempunint64_t Symbol = 0;
  }
  uint64_t v45 = *((void *)v36 + 4);
  char v44 = v36 + 32;
  uint64_t v43 = v45;
  int v46 = v44[23];
  if (v46 >= 0) {
    uint64_t v47 = (uint64_t)v44;
  }
  else {
    uint64_t v47 = v43;
  }
  if (v46 >= 0) {
    uint64_t v48 = v44[23];
  }
  else {
    uint64_t v48 = *((void *)v44 + 1);
  }
  unint64_t v40 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v16 + 280, 248, 3);
  llvm::MCSection::MCSection(v40, 0, v47, v48, a5, TempSymbol);
  *(void *)uint64_t v49 = &unk_270DC2030;
  *(_DWORD *)(v49 + 224) = a4;
  *(_DWORD *)(v49 + 228) = -1;
  *(void *)(v49 + 232) = v51;
  *(_DWORD *)(v49 + 240) = a8;
  *((void *)v44 + 6) = v49;
LABEL_46:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v40;
}

uint64_t llvm::MCContext::getWasmSection(llvm::MCContext *a1, llvm::Twine *a2, int a3, int a4, llvm::Twine *this, int a6)
{
  if (*((unsigned __int8 *)this + 32) < 2u) {
    goto LABEL_9;
  }
  llvm::Twine::str(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_7;
    }
LABEL_9:
    unint64_t Symbol = 0;
    return llvm::MCContext::getWasmSection((uint64_t)a1, a2, a3, a4, Symbol, a6);
  }
  if (!size) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t Symbol = (unsigned char *)llvm::MCContext::getOrCreateSymbol(a1, this);
  Symbol[42] = 1;
  return llvm::MCContext::getWasmSection((uint64_t)a1, a2, a3, a4, Symbol, a6);
}

uint64_t llvm::MCContext::getWasmSection(uint64_t a1, llvm::Twine *this, int a3, int a4, unsigned char *a5, int a6)
{
  if (a5)
  {
    if ((*a5 & 4) != 0)
    {
      uint64_t v13 = (uint64_t *)*((void *)a5 - 1);
      uint64_t v14 = *v13;
      char v11 = v13 + 2;
      uint64_t v12 = v14;
    }
    else
    {
      char v11 = 0;
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    char v11 = &str_24;
  }
  llvm::Twine::str(this, &v40);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v15 = &v40;
  }
  else {
    uint64_t v15 = (std::string *)v40.__r_.__value_.__r.__words[0];
  }
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v40.__r_.__value_.__l.__size_;
  }
  if (size >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  int v39 = a4;
  if (size >= 0x17)
  {
    uint64_t v18 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17) {
      uint64_t v18 = size | 7;
    }
    uint64_t v19 = v18 + 1;
    p_dst = (long long *)operator new(v18 + 1);
    *((void *)&__dst + 1) = size;
    unint64_t v42 = v19 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v42) = size;
  p_dst = &__dst;
  if (size) {
LABEL_19:
  }
    memmove(p_dst, v15, size);
  *((unsigned char *)p_dst + size) = 0;
  *(void *)&long long v43 = v11;
  *((void *)&v43 + 1) = v12;
  int v44 = a6;
  *(_OWORD *)std::string __p = __dst;
  unint64_t v46 = v42;
  long long __dst = 0uLL;
  unint64_t v42 = 0;
  int v48 = a6;
  long long v47 = v43;
  uint64_t v49 = 0;
  uint64_t v20 = (void **)(a1 + 1856);
  int v21 = *(char **)(a1 + 1856);
  if (v21)
  {
    while (1)
    {
      while (1)
      {
        char v22 = (void **)v21;
        uint64_t v23 = (unsigned __int8 *)(v21 + 32);
        if (!llvm::MCContext::WasmSectionKey::operator<((unsigned __int8 *)__p, (unsigned __int8 **)v21 + 4)) {
          break;
        }
        int v21 = (char *)*v22;
        uint64_t v20 = v22;
        if (!*v22) {
          goto LABEL_28;
        }
      }
      if (!llvm::MCContext::WasmSectionKey::operator<(v23, (unsigned __int8 **)__p)) {
        break;
      }
      uint64_t v20 = v22 + 1;
      int v21 = (char *)v22[1];
      if (!v21) {
        goto LABEL_28;
      }
    }
    uint64_t v24 = (char *)*v20;
    if (*v20)
    {
      int v27 = 1;
      goto LABEL_31;
    }
  }
  else
  {
    char v22 = (void **)(a1 + 1856);
  }
LABEL_28:
  uint64_t v24 = (char *)operator new(0x58uLL);
  *((_OWORD *)v24 + 2) = *(_OWORD *)__p;
  *((void *)v24 + 6) = v46;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v46 = 0;
  *(_OWORD *)(v24 + 56) = v43;
  *((_DWORD *)v24 + 18) = v44;
  *((void *)v24 + 10) = 0;
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 2) = v22;
  *uint64_t v20 = v24;
  uint64_t v25 = **(void **)(a1 + 1848);
  unint64_t v26 = (uint64_t *)v24;
  if (v25)
  {
    *(void *)(a1 + 1848) = v25;
    unint64_t v26 = (uint64_t *)*v20;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1856), v26);
  int v27 = 0;
  ++*(void *)(a1 + 1864);
LABEL_31:
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)__dst);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if (v27) {
      return *((void *)v24 + 10);
    }
LABEL_39:
    int v28 = v24[55];
    if (v28 >= 0) {
      int v29 = v24 + 32;
    }
    else {
      int v29 = (unsigned char *)*((void *)v24 + 4);
    }
    if (v28 >= 0) {
      unint64_t v30 = v24[55];
    }
    else {
      unint64_t v30 = *((void *)v24 + 5);
    }
    unint64_t Symbol = llvm::MCContext::createSymbol(a1, v29, v30, 1, 0);
    if ((*(unsigned char *)Symbol & 4) != 0)
    {
      unint64_t v34 = *(void **)(Symbol - 8);
      unint64_t v35 = *v34;
      long long v32 = v34 + 2;
      unint64_t v33 = v35;
    }
    else
    {
      long long v32 = 0;
      unint64_t v33 = 0;
    }
    *(void *)(*llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>(a1 + 1144, v32, v33)+ 8) = Symbol;
    *(_DWORD *)(Symbol + 32) = 3;
    *(unsigned char *)(Symbol + 36) = 1;
    unint64_t v36 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 856, 264, 3);
    llvm::MCSection::MCSection(v36, 4, (uint64_t)v29, v30, a3, Symbol);
    *(void *)uint64_t v37 = &unk_270DC20F0;
    *(_DWORD *)(v37 + 224) = a6;
    *(void *)(v37 + 232) = a5;
    *(void *)(v37 + 240) = 0;
    *(_DWORD *)(v37 + 248) = 0;
    *(unsigned char *)(v37 + 252) = 0;
    *(_DWORD *)(v37 + 256) = v39;
    *((void *)v24 + 10) = v37;
    operator new();
  }
  if (!v27) {
    goto LABEL_39;
  }
  return *((void *)v24 + 10);
}

uint64_t llvm::MCContext::getXCOFFSection(uint64_t a1, void *a2, size_t a3, int a4, __int16 a5, int a6, unsigned char *TempSymbol, uint64_t a8)
{
  int v63 = a8;
  uint64_t v13 = a8 & 0xFF00000000;
  if ((a8 & 0xFF00000000) != 0)
  {
    if (a2)
    {
      std::string::basic_string[abi:nn180100](&v72, a2, a3);
      unsigned int v14 = HIBYTE(v74);
      long long v16 = (void **)v72;
      size_t v15 = v73;
    }
    else
    {
      size_t v15 = 0;
      long long v16 = 0;
      unsigned int v14 = 0;
      uint64_t v72 = 0;
      size_t v73 = 0;
      uint64_t v74 = 0;
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v20 = &v72;
    }
    else {
      uint64_t v20 = v16;
    }
    if ((v14 & 0x80u) == 0) {
      size_t v21 = v14;
    }
    else {
      size_t v21 = v15;
    }
    if (v21 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v21 >= 0x17)
      {
        uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v23 = v21 | 7;
        }
        uint64_t v24 = v23 + 1;
        p_dst = (long long *)operator new(v23 + 1);
        *((void *)&__dst + 1) = v21;
        unint64_t v69 = v24 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v69) = v21;
        p_dst = &__dst;
        if (!v21) {
          goto LABEL_21;
        }
      }
      memmove(p_dst, v20, v21);
LABEL_21:
      char v25 = 0;
      *((unsigned char *)p_dst + v21) = 0;
      LODWORD(v70) = v63;
      goto LABEL_38;
    }
LABEL_98:
    abort();
  }
  if (a2)
  {
    std::string::basic_string[abi:nn180100](&v64, a2, a3);
    unsigned int v17 = HIBYTE(v66);
    uint64_t v19 = (void **)v64;
    size_t v18 = v65;
  }
  else
  {
    size_t v18 = 0;
    uint64_t v19 = 0;
    unsigned int v17 = 0;
    __int16 v64 = 0;
    size_t v65 = 0;
    int v66 = 0;
  }
  if ((v17 & 0x80u) == 0) {
    unint64_t v26 = &v64;
  }
  else {
    unint64_t v26 = v19;
  }
  if ((v17 & 0x80u) == 0) {
    size_t v27 = v17;
  }
  else {
    size_t v27 = v18;
  }
  if (v27 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_98;
  }
  if (v27 >= 0x17)
  {
    uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v29 = v27 | 7;
    }
    uint64_t v30 = v29 + 1;
    int v28 = (long long *)operator new(v29 + 1);
    *((void *)&__dst + 1) = v27;
    unint64_t v69 = v30 | 0x8000000000000000;
    *(void *)&long long __dst = v28;
  }
  else
  {
    HIBYTE(v69) = v27;
    int v28 = &__dst;
    if (!v27) {
      goto LABEL_37;
    }
  }
  memmove(v28, v26, v27);
LABEL_37:
  *((unsigned char *)v28 + v27) = 0;
  LOBYTE(v70) = a5;
  char v25 = 1;
LABEL_38:
  BYTE4(v70) = v25;
  *(_OWORD *)std::string __p = __dst;
  unint64_t v76 = (const char *)v69;
  long long __dst = 0uLL;
  unint64_t v69 = 0;
  int v77 = v70;
  char v78 = v25;
  uint64_t v79 = 0;
  unint64_t v31 = *(const void ***)(a1 + 1880);
  if (v31)
  {
    while (1)
    {
      while (1)
      {
        long long v32 = v31;
        unint64_t v33 = v31 + 4;
        if (!llvm::MCContext::XCOFFSectionKey::operator<((const void **)__p, v31 + 4)) {
          break;
        }
        unint64_t v31 = (const void **)*v32;
        unint64_t v34 = (uint64_t **)v32;
        if (!*v32) {
          goto LABEL_46;
        }
      }
      if (!llvm::MCContext::XCOFFSectionKey::operator<(v33, (const void **)__p)) {
        break;
      }
      unint64_t v31 = (const void **)v32[1];
      if (!v31)
      {
        unint64_t v34 = (uint64_t **)(v32 + 1);
        goto LABEL_46;
      }
    }
    char v38 = 1;
  }
  else
  {
    unint64_t v34 = (uint64_t **)(a1 + 1880);
    long long v32 = (void *)(a1 + 1880);
LABEL_46:
    unint64_t v35 = v32;
    long long v32 = operator new(0x48uLL);
    *((_OWORD *)v32 + 2) = *(_OWORD *)__p;
    v32[6] = v76;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v76 = 0;
    *((_DWORD *)v32 + 14) = v70;
    *((unsigned char *)v32 + 60) = BYTE4(v70);
    v32[8] = 0;
    void *v32 = 0;
    v32[1] = 0;
    void v32[2] = v35;
    *unint64_t v34 = v32;
    uint64_t v36 = **(void **)(a1 + 1872);
    uint64_t v37 = v32;
    if (v36)
    {
      *(void *)(a1 + 1872) = v36;
      uint64_t v37 = *v34;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1880), v37);
    char v38 = 0;
    ++*(void *)(a1 + 1888);
  }
  if (SHIBYTE(v76) < 0) {
    operator delete(__p[0]);
  }
  if ((SHIBYTE(v69) & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_54;
    }
LABEL_58:
    if (SHIBYTE(v66) < 0)
    {
      operator delete(v64);
      if (v38) {
        goto LABEL_70;
      }
    }
    else if (v38)
    {
      goto LABEL_70;
    }
    int v42 = *((char *)v32 + 55);
    if (v42 >= 0) {
      std::string v40 = v32 + 4;
    }
    else {
      std::string v40 = (void *)v32[4];
    }
    if (v42 >= 0) {
      char v41 = (void *)*((unsigned __int8 *)v32 + 55);
    }
    else {
      char v41 = (void *)v32[5];
    }
    __int16 v67 = 773;
    __int16 v64 = v40;
    size_t v65 = (size_t)v41;
    int v66 = "[";
    MappingClassString = llvm::XCOFF::getMappingClassString(a5);
    *(void *)&long long __dst = &v64;
    unint64_t v69 = (unint64_t)MappingClassString;
    uint64_t v70 = v44;
    __int16 v71 = 1282;
    __p[0] = &__dst;
    unint64_t v76 = "]";
    LOWORD(v79) = 770;
LABEL_79:
    unint64_t Symbol = llvm::MCContext::getOrCreateSymbol((llvm::MCContext *)a1, (const llvm::Twine *)__p);
    if (TempSymbol)
    {
      char v46 = 1;
      BYTE1(v79) = 1;
      if (*TempSymbol)
      {
        __p[0] = TempSymbol;
        char v46 = 3;
      }
      LOBYTE(v79) = v46;
      Tempunint64_t Symbol = (unsigned char *)llvm::MCContext::createTempSymbol((llvm::MCContext *)a1, (const llvm::Twine *)__p, 0);
    }
    unint64_t v47 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 952, 272, 3);
    uint64_t v48 = *(void *)Symbol;
    if (v13)
    {
      if ((v48 & 4) != 0)
      {
        long long v53 = *(void **)(Symbol - 8);
        unint64_t v54 = (unsigned __int8 *)*v53;
        uint64_t v49 = (unsigned __int8 *)(v53 + 2);
        unint64_t v50 = v54;
      }
      else
      {
        uint64_t v49 = 0;
        unint64_t v50 = 0;
      }
      UnqualifiedName = llvm::MCSymbolXCOFF::getUnqualifiedName(v49, v50);
      llvm::MCSection::MCSection(v47, 5, (uint64_t)UnqualifiedName, v56, a4, (uint64_t)TempSymbol);
      *(void *)unint64_t v47 = &unk_270DC2120;
      *(unsigned char *)(v47 + 224) = 0;
      *(unsigned char *)(v47 + 226) = 0;
      *(void *)(v47 + 232) = Symbol;
      *(void *)(v47 + 240) = v40;
      *(void *)(v47 + 248) = v41;
      *(_DWORD *)(v47 + 256) = v63;
      *(unsigned char *)(v47 + 260) = 1;
      *(unsigned char *)(v47 + 264) = a6;
      *(void *)(Symbol + 40) = v47;
      *(unsigned char *)(v47 + 24) = 5;
    }
    else
    {
      if ((v48 & 4) != 0)
      {
        long long v57 = *(void **)(Symbol - 8);
        unint64_t v58 = (unsigned __int8 *)*v57;
        uint64_t v51 = (unsigned __int8 *)(v57 + 2);
        std::string v52 = v58;
      }
      else
      {
        uint64_t v51 = 0;
        std::string v52 = 0;
      }
      uint64_t v59 = llvm::MCSymbolXCOFF::getUnqualifiedName(v51, v52);
      llvm::MCSection::MCSection(v47, 5, (uint64_t)v59, v60, a4, (uint64_t)TempSymbol);
      *(void *)unint64_t v47 = &unk_270DC2120;
      *(_WORD *)(v47 + 224) = a5;
      *(unsigned char *)(v47 + 226) = 1;
      *(void *)(v47 + 232) = Symbol;
      *(void *)(v47 + 240) = v40;
      *(void *)(v47 + 248) = v41;
      *(unsigned char *)(v47 + 256) = 0;
      *(unsigned char *)(v47 + 260) = 0;
      *(unsigned char *)(v47 + 264) = a6;
      *(void *)(Symbol + 40) = v47;
      *(_WORD *)(Symbol + 32) = 363;
      if ((a5 & 0xFF00) != 0)
      {
        if ((_BYTE)a5) {
          char v61 = 2;
        }
        else {
          char v61 = 5;
        }
        *(unsigned char *)(v47 + 24) = v61;
      }
    }
    v32[8] = v47;
    operator new();
  }
  operator delete((void *)__dst);
  if (!v13) {
    goto LABEL_58;
  }
LABEL_54:
  if (SHIBYTE(v74) < 0)
  {
    operator delete(v72);
    if (v38) {
      goto LABEL_70;
    }
    goto LABEL_62;
  }
  if ((v38 & 1) == 0)
  {
LABEL_62:
    int v39 = *((char *)v32 + 55);
    if (v39 >= 0) {
      std::string v40 = v32 + 4;
    }
    else {
      std::string v40 = (void *)v32[4];
    }
    if (v39 >= 0) {
      char v41 = (void *)*((unsigned __int8 *)v32 + 55);
    }
    else {
      char v41 = (void *)v32[5];
    }
    LOWORD(v79) = 261;
    __p[0] = v40;
    __p[1] = v41;
    goto LABEL_79;
  }
LABEL_70:
  if ((*(unsigned char *)(v32[8] + 264) != 0) != a6) {
    llvm::report_fatal_error((llvm *)"section's multiply symbols policy does not match", (const llvm::Twine *)1);
  }
  return v32[8];
}

void llvm::MCContext::getSPIRVSection(llvm::MCContext *this)
{
  unint64_t v1 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this + 760, 224, 3);
  llvm::MCSection::MCSection(v1, 6, (uint64_t)&str_24, 0, 2, 0);
  void *v2 = &unk_270DC1F18;
  operator new();
}

uint64_t llvm::MCContext::getDXContainerSection(uint64_t a1, uint64_t *a2, unint64_t a3, int a4)
{
  uint64_t v6 = llvm::StringMap<llvm::MCSectionMachO *,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(a1 + 1896), a2, a3);
  __int16 v7 = (uint64_t *)*v6;
  if (v8)
  {
    long long v9 = v6;
    uint64_t v10 = *v7;
    unint64_t v11 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 376, 224, 3);
    llvm::MCSection::MCSection(v11, 7, (uint64_t)(v7 + 2), v10, a4, 0);
    *uint64_t v12 = &unk_270DC2060;
    (*v9)[1] = (unint64_t)v12;
    operator new();
  }
  return v7[1];
}

void llvm::MCContext::getDwarfFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  v17[0] = a2;
  v17[1] = a3;
  v16[0] = a4;
  v16[1] = a5;
  *(void *)&long long v18 = &a10;
  size_t v15 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 1560), &a10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v18);
  long long v20 = *(_OWORD *)a7;
  char v21 = *(unsigned char *)(a7 + 16);
  long long v18 = *(_OWORD *)a8;
  uint64_t v19 = *(void *)(a8 + 16);
  llvm::MCDwarfLineTableHeader::tryGetFile((uint64_t)(v15 + 5), (uint64_t)v17, (uint64_t)v16, &v20, &v18, *(unsigned __int16 *)(a1 + 1712), a6, a9);
}

BOOL llvm::MCContext::isValidDwarfFileNumber(uint64_t **this, unsigned int a2, unsigned int a3)
{
  unsigned int v9 = a3;
  uint64_t v10 = &v9;
  uint64_t v5 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 195, &v9, (uint64_t)&std::piecewise_construct, &v10);
  if (!a2) {
    return *((unsigned __int16 *)this + 856) > 4u;
  }
  if (*((_DWORD *)v5 + 36) <= a2) {
    return 0;
  }
  uint64_t v6 = (uint64_t)&v5[17][9 * a2];
  if (*(char *)(v6 + 23) < 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  }
  return v7 != 0;
}

uint64_t llvm::MCContext::getCVContext(llvm::MCContext *this)
{
  uint64_t result = *((void *)this + 22);
  if (!result) {
    operator new();
  }
  return result;
}

uint64_t std::function<void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::operator()(uint64_t a1, uint64_t a2, char a3)
{
  char v6 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v3 + 48))(v3, a2, &v6);
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::MCContext::reportCommon(v5);
}

void llvm::MCContext::reportCommon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[21] = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  if (a2)
  {
    unsigned __int8 v4 = *(_OWORD **)(a1 + 72);
    if (v4)
    {
      char v5 = 0;
    }
    else
    {
      unsigned __int8 v4 = *(_OWORD **)(a1 + 80);
      char v5 = 1;
    }
  }
  else
  {
    char v5 = 0;
    unsigned __int8 v4 = v6;
  }
  int v11 = 0;
  *(_OWORD *)unsigned int v9 = 0uLL;
  long long v10 = 0uLL;
  long long v8 = 0uLL;
  long long v12 = 0uLL;
  long long v13 = 0uLL;
  long long v14 = 0uLL;
  long long __p = 0uLL;
  uint64_t v16 = 0;
  v17[0] = (char *)v18;
  v17[1] = (char *)0x400000000;
  std::function<void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::operator()(a3, (uint64_t)&v8, (uint64_t)v4);
  std::function<void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::operator()(a1 + 112, (uint64_t)&v8, v5);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v17);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(*((void **)&v13 + 1));
  }
  if (SBYTE7(v13) < 0) {
    operator delete((void *)v12);
  }
  if (SBYTE7(v10) < 0) {
    operator delete(v9[0]);
  }
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v6);
}

_DWORD *std::function<void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v7);
  }
  char v5 = (_DWORD *)std::__throw_bad_function_call[abi:nn180100]();
  return llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::init(v5, v6);
}

_DWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::init(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *(_OWORD *)uint64_t result = xmmword_261E8A6B0;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void std::__tree<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__map_value_compare<llvm::MCSymbol *,std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::less<llvm::MCSymbol *>,true>,std::allocator<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__map_value_compare<llvm::MCSymbol *,std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::less<llvm::MCSymbol *>,true>,std::allocator<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::destroy(*a1);
    std::__tree<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::__map_value_compare<llvm::MCSymbol *,std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>,std::less<llvm::MCSymbol *>,true>,std::allocator<std::__value_type<llvm::MCSymbol *,llvm::MCPseudoProbeInlineTree>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<llvm::MCSymbol * const,llvm::MCPseudoProbeInlineTree>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:nn180100]<std::pair<llvm::MCSymbol * const,llvm::MCPseudoProbeInlineTree>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(a1 + 8);
}

uint64_t std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::unique_ptr<llvm::MCPseudoProbeInlineTree>::reset[abi:nn180100](v2 + 4, 0);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *std::unique_ptr<llvm::MCPseudoProbeInlineTree>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    unint64_t v3 = *(void **)(v2 + 40);
    if (v3)
    {
      *(void *)(v2 + 48) = v3;
      operator delete(v3);
    }
    std::__hash_table<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::__unordered_map_hasher<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,std::equal_to<std::tuple<unsigned long long,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<unsigned long long,unsigned int>,std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>,std::equal_to<std::tuple<unsigned long long,unsigned int>>,llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::InlineSiteHash,true>,std::allocator<std::__hash_value_type<std::tuple<unsigned long long,unsigned int>,std::unique_ptr<llvm::MCPseudoProbeInlineTree>>>>::~__hash_table(v2);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

llvm::raw_ostream *llvm::MCSectionGOFF::printSwitchToSection(uint64_t a1, int a2, int a3, llvm::raw_ostream *this)
{
  uint64_t v6 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v6) > 0xA)
  {
    *(_DWORD *)(v6 + 7) = 571043439;
    *(void *)uint64_t v6 = *(void *)"\t.section\t\"";
    *((void *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, "\t.section\t\"", 0xBuLL);
  }
  uint64_t result = llvm::raw_ostream::operator<<(this, *(const void **)(a1 + 200), *(void *)(a1 + 208));
  long long v8 = (_WORD *)*((void *)result + 4);
  if (*((void *)result + 3) - (void)v8 > 1uLL)
  {
    _WORD *v8 = 2594;
    *((void *)result + 4) += 2;
  }
  else
  {
    return llvm::raw_ostream::write(result, "\"\n", 2uLL);
  }
  return result;
}

uint64_t llvm::MCSectionGOFF::useCodeAlign(llvm::MCSectionGOFF *this)
{
  return 0;
}

uint64_t llvm::MCSectionGOFF::isVirtualSection(llvm::MCSectionGOFF *this)
{
  return 0;
}

uint64_t llvm::MCSectionSPIRV::useCodeAlign(llvm::MCSectionSPIRV *this)
{
  return 0;
}

uint64_t llvm::MCSectionSPIRV::isVirtualSection(llvm::MCSectionSPIRV *this)
{
  return 0;
}

void std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::~__func()
{
}

void *std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270DC1F48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270DC1F48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &),std::allocator<void (*)(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>,void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a1 + 8))(a2, *a3, a4, a5);
}

void *std::__function::__value_func<void ()(llvm::SMDiagnostic const&,BOOL,llvm::SourceMgr const&,std::vector<llvm::MDNode const*> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::string const>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string const>,std::greater<void>,true>,std::allocator<std::__value_type<std::string,std::string const>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string const>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string const>,std::greater<void>,true>,std::allocator<std::__value_type<std::string,std::string const>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::string const>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string const>,std::greater<void>,true>,std::allocator<std::__value_type<std::string,std::string const>>>::destroy(*((void *)a1 + 1));
    if (a1[79] < 0) {
      operator delete(*((void **)a1 + 7));
    }
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::destroy(a1[1]);
    std::__destroy_at[abi:nn180100]<std::pair<unsigned int const,llvm::MCDwarfLineTable>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::__map_value_compare<llvm::MCContext::ELFSectionKey,std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>,std::less<llvm::MCContext::ELFSectionKey>,true>,std::allocator<std::__value_type<llvm::MCContext::ELFSectionKey,llvm::MCSectionELF *>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::clear(_DWORD *result)
{
  if (*((void *)result + 1))
  {
    uint64_t v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        uint64_t v2 = *(_OWORD **)result;
        uint64_t v3 = 16 * v1;
        do
        {
          *v2++ = xmmword_261E8A6B0;
          v3 -= 16;
        }
        while (v3);
      }
      *((void *)result + 1) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::shrink_and_clear(result);
    }
  }
  return result;
}

_DWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::shrink_and_clear(_DWORD *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      uint64_t v6 = *(_OWORD **)result;
      uint64_t v7 = 16 * v2;
      do
      {
        *v6++ = xmmword_261E8A6B0;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x263E500A0](*(void *)result, 8);
    return llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::init(v1, v5);
  }
  return result;
}

uint64_t *llvm::StringMap<llvm::MCSymbol *,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<>(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)a1, a2, a3);
  unint64_t i = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  unint64_t v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(void *)(a1 + 24), a3 + 17, 3);
  int v11 = (void *)v10;
  unint64_t v12 = v10 + 16;
  if (a3) {
    memcpy((void *)(v10 + 16), a2, a3);
  }
  *(unsigned char *)(v12 + a3) = 0;
  *int v11 = a3;
  v11[1] = 0;
  *unint64_t i = (uint64_t)v11;
  ++*(_DWORD *)(a1 + 12);
  for (unint64_t i = (uint64_t *)(*(void *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

uint64_t *llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  unint64_t i = (uint64_t *)(*(void *)a1 + 8 * v6);
  uint64_t v8 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      uint64_t v9 = i[1];
      ++i;
      uint64_t v8 = v9;
    }
    return i;
  }
  unint64_t v10 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  int v11 = v10;
  unint64_t v12 = v10 + 16;
  if (a3) {
    memcpy(v10 + 16, a2, a3);
  }
  v12[a3] = 0;
  *(void *)int v11 = a3;
  *((_DWORD *)v11 + 2) = 0;
  *unint64_t i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (unint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6)); !*i || *i == -8; ++i)
    ;
  return i;
}

unint64_t *llvm::StringMap<BOOL,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul> &>::try_emplace<BOOL>(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned char *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)a1, a2, a3);
  unint64_t i = (unint64_t *)(*(void *)a1 + 8 * v8);
  unint64_t v10 = *i;
  if (*i == -8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v10)
  {
    while (!v10 || v10 == -8)
    {
      unint64_t v11 = i[1];
      ++i;
      unint64_t v10 = v11;
    }
    return i;
  }
  unint64_t v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(void *)(a1 + 24), a3 + 17, 3);
  unint64_t v13 = v12;
  unint64_t v14 = v12 + 16;
  if (a3) {
    memcpy((void *)(v12 + 16), a2, a3);
  }
  *(unsigned char *)(v14 + a3) = 0;
  *(void *)unint64_t v13 = a3;
  *(unsigned char *)(v13 + 8) = *a4;
  *unint64_t i = v13;
  ++*(_DWORD *)(a1 + 12);
  for (unint64_t i = (unint64_t *)(*(void *)a1
                               + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
        !*i || *i == -8;
  return i;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  uint64_t v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    _DWORD *inserted = *a2;
    *((void *)inserted + 1) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>,unsigned int,llvm::MCLabel *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::MCLabel *>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::grow(a1, v7);
  uint64_t v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::FindAndConstruct(uint64_t *a1, int *a2)
{
  unsigned int v7 = 0;
  char v4 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(a1, a2, &v7);
  int v5 = v7;
  if ((v4 & 1) == 0)
  {
    int v5 = llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>((uint64_t)a1, (uint64_t)a2, a2, v7);
    _DWORD *v5 = *a2;
    v5[1] = a2[1];
    *((void *)v5 + 1) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>(uint64_t *a1, int *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = *a2;
    int v6 = a2[1];
    unint64_t v7 = ((37 * v6) | ((unint64_t)(37 * *a2) << 32))
       + ~((unint64_t)(37 * v6) << 32);
    unint64_t v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    unint64_t v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    int v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~(v9 << 27));
    int v11 = v3 - 1;
    unsigned int v12 = (v3 - 1) & v10;
    unint64_t v13 = (_DWORD *)(*a1 + 16 * v12);
    int v14 = *v13;
    int v15 = v13[1];
    if (*a2 == *v13 && v6 == v15)
    {
      uint64_t result = 1;
    }
    else
    {
      unsigned int v17 = 0;
      int v18 = 1;
      uint64_t result = 1;
      while (v14 != -1 || v15 != -1)
      {
        if (v17) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v15 == -2;
        }
        if (v20 && v14 == -2) {
          unsigned int v17 = v13;
        }
        unsigned int v22 = v12 + v18++;
        unsigned int v12 = v22 & v11;
        unint64_t v13 = (_DWORD *)(v4 + 16 * (v22 & v11));
        int v14 = *v13;
        int v15 = v13[1];
        if (v5 == *v13 && v6 == v15) {
          goto LABEL_9;
        }
      }
      uint64_t result = 0;
      if (v17) {
        unint64_t v13 = v17;
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
    uint64_t result = 0;
  }
LABEL_9:
  *a3 = v13;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::InsertIntoBucketImpl<std::pair<unsigned int,unsigned int>>(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::grow(a1, v7);
  int v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1 || a4[1] != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = v4;
      do
      {
        int v14 = *(_DWORD *)(v13 + 4);
        if ((*(_DWORD *)v13 != -1 || v14 != -1) && (*(_DWORD *)v13 != -2 || v14 != -2))
        {
          BOOL v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>,std::pair<unsigned int,unsigned int>,llvm::MCSymbol *,llvm::DenseMapInfo<std::pair<unsigned int,unsigned int>,void>,llvm::detail::DenseMapPair<std::pair<unsigned int,unsigned int>,llvm::MCSymbol *>>::LookupBucketFor<std::pair<unsigned int,unsigned int>>((uint64_t *)a1, (int *)v13, &v20);
          unsigned int v17 = v20;
          *BOOL v20 = *(_DWORD *)v13;
          v17[1] = *(_DWORD *)(v13 + 4);
          *((void *)v17 + 1) = *(void *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 16 * v18;
    do
    {
      *uint64_t result = -1;
      result += 2;
      v19 -= 16;
    }
    while (v19);
  }
  return result;
}

BOOL llvm::MCContext::ELFSectionKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3 = a1[23];
  if (v3 >= 0) {
    size_t v4 = a1[23];
  }
  else {
    size_t v4 = *((void *)a1 + 1);
  }
  char v5 = *((unsigned char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  if (v5 >= 0) {
    int v7 = (unsigned __int8 *)a2;
  }
  else {
    int v7 = *a2;
  }
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        unint64_t v9 = v7;
        uint64_t v10 = a1;
        uint64_t v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11) {
            goto LABEL_27;
          }
        }
        goto LABEL_18;
      }
LABEL_27:
      uint64_t v17 = *((void *)a1 + 3);
      uint64_t v16 = *((void *)a1 + 4);
      uint64_t v19 = a2[3];
      size_t v18 = (size_t)a2[4];
      if (v16 == v18 && (!v16 || !memcmp(*((const void **)a1 + 3), a2[3], *((void *)a1 + 4))))
      {
        unsigned int v20 = llvm::StringRef::compare((uint64_t)(a1 + 40), a2[5], (size_t)a2[6]);
        if (!v20) {
          return *((_DWORD *)a1 + 14) < *((_DWORD *)a2 + 14);
        }
      }
      else
      {
        v21[0] = v17;
        v21[1] = v16;
        unsigned int v20 = llvm::StringRef::compare((uint64_t)v21, v19, v18);
      }
      return v20 >> 31;
    }
    if (!memcmp(*(const void **)a1, v7, *((void *)a1 + 1))) {
      goto LABEL_27;
    }
  }
LABEL_18:
  if (v3 >= 0) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(const void **)a1;
  }
  if (v6 >= v4) {
    size_t v13 = v4;
  }
  else {
    size_t v13 = v6;
  }
  int v14 = memcmp(v12, v7, v13);
  if (v14) {
    return v14 < 0;
  }
  else {
    return v4 < v6;
  }
}

BOOL llvm::MCContext::ELFEntrySizeKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3 = a1[23];
  if (v3 >= 0) {
    size_t v4 = a1[23];
  }
  else {
    size_t v4 = *((void *)a1 + 1);
  }
  char v5 = *((unsigned char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  if (v5 >= 0) {
    int v7 = (unsigned __int8 *)a2;
  }
  else {
    int v7 = *a2;
  }
  if (v4 != v6) {
    goto LABEL_18;
  }
  if ((a1[23] & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, v7, *((void *)a1 + 1))) {
      goto LABEL_27;
    }
LABEL_18:
    if (v3 >= 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = *(const void **)a1;
    }
    if (v6 >= v4) {
      size_t v13 = v4;
    }
    else {
      size_t v13 = v6;
    }
    int v14 = memcmp(v12, v7, v13);
    if (v14) {
      return v14 < 0;
    }
    else {
      return v4 < v6;
    }
  }
  if (a1[23])
  {
    unint64_t v9 = v7;
    uint64_t v10 = a1;
    uint64_t v11 = a1[23];
    while (*v10 == *v9)
    {
      ++v10;
      ++v9;
      if (!--v11) {
        goto LABEL_27;
      }
    }
    goto LABEL_18;
  }
LABEL_27:
  unsigned int v16 = *((_DWORD *)a1 + 6);
  unsigned int v17 = *((_DWORD *)a2 + 6);
  BOOL v18 = v16 >= v17;
  if (v16 == v17) {
    BOOL v18 = *((_DWORD *)a1 + 7) >= *((_DWORD *)a2 + 7);
  }
  return !v18;
}

_OWORD *std::__tree<std::__value_type<std::string,llvm::MCSectionGOFF *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::MCSectionGOFF *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::MCSectionGOFF *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  size_t v6 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  int v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    int v7 = operator new(0x40uLL);
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

BOOL llvm::MCContext::COFFSectionKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3 = a1[23];
  if (v3 >= 0) {
    size_t v4 = a1[23];
  }
  else {
    size_t v4 = *((void *)a1 + 1);
  }
  char v5 = *((unsigned char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  if (v5 >= 0) {
    int v7 = (unsigned __int8 *)a2;
  }
  else {
    int v7 = *a2;
  }
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        unint64_t v9 = v7;
        uint64_t v10 = a1;
        uint64_t v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11) {
            goto LABEL_27;
          }
        }
        goto LABEL_18;
      }
LABEL_27:
      uint64_t v17 = *((void *)a1 + 3);
      uint64_t v16 = *((void *)a1 + 4);
      uint64_t v19 = a2[3];
      size_t v18 = (size_t)a2[4];
      if (v16 == v18 && (!v16 || !memcmp(*((const void **)a1 + 3), a2[3], *((void *)a1 + 4))))
      {
        int v20 = *((_DWORD *)a1 + 10);
        int v21 = *((_DWORD *)a2 + 10);
        if (v20 == v21) {
          return *((_DWORD *)a1 + 11) < *((_DWORD *)a2 + 11);
        }
        else {
          return v20 < v21;
        }
      }
      else
      {
        v22[0] = v17;
        v22[1] = v16;
        return llvm::StringRef::compare((uint64_t)v22, v19, v18) >> 31;
      }
    }
    if (!memcmp(*(const void **)a1, v7, *((void *)a1 + 1))) {
      goto LABEL_27;
    }
  }
LABEL_18:
  if (v3 >= 0) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(const void **)a1;
  }
  if (v6 >= v4) {
    size_t v13 = v4;
  }
  else {
    size_t v13 = v6;
  }
  int v14 = memcmp(v12, v7, v13);
  if (v14) {
    return v14 < 0;
  }
  else {
    return v4 < v6;
  }
}

BOOL llvm::MCContext::WasmSectionKey::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3 = a1[23];
  if (v3 >= 0) {
    size_t v4 = a1[23];
  }
  else {
    size_t v4 = *((void *)a1 + 1);
  }
  char v5 = *((unsigned char *)a2 + 23);
  if (v5 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  if (v5 >= 0) {
    int v7 = (unsigned __int8 *)a2;
  }
  else {
    int v7 = *a2;
  }
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        unint64_t v9 = v7;
        uint64_t v10 = a1;
        uint64_t v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11) {
            goto LABEL_27;
          }
        }
        goto LABEL_18;
      }
LABEL_27:
      uint64_t v17 = *((void *)a1 + 3);
      uint64_t v16 = *((void *)a1 + 4);
      uint64_t v19 = a2[3];
      size_t v18 = (size_t)a2[4];
      if (v16 == v18 && (!v16 || !memcmp(*((const void **)a1 + 3), a2[3], *((void *)a1 + 4)))) {
        return *((_DWORD *)a1 + 10) < *((_DWORD *)a2 + 10);
      }
      v20[0] = v17;
      v20[1] = v16;
      return llvm::StringRef::compare((uint64_t)v20, v19, v18) >> 31;
    }
    if (!memcmp(*(const void **)a1, v7, *((void *)a1 + 1))) {
      goto LABEL_27;
    }
  }
LABEL_18:
  if (v3 >= 0) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(const void **)a1;
  }
  if (v6 >= v4) {
    size_t v13 = v4;
  }
  else {
    size_t v13 = v6;
  }
  int v14 = memcmp(v12, v7, v13);
  if (v14) {
    return v14 < 0;
  }
  else {
    return v4 < v6;
  }
}

uint64_t llvm::MCContext::XCOFFSectionKey::operator<(const void **a1, const void **a2)
{
  int v4 = *((unsigned __int8 *)a1 + 28);
  int v5 = *((unsigned __int8 *)a2 + 28);
  if (*((unsigned char *)a1 + 28)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if (v4 != v5) {
      return v4 != 0;
    }
    int v7 = *((char *)a2 + 23);
    int v8 = *((char *)a1 + 23);
    if (v8 >= 0) {
      size_t v9 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v9 = (size_t)a1[1];
    }
    if (v8 >= 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = *a1;
    }
    if (v7 >= 0) {
      size_t v11 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v11 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *a2;
    }
    if (v11 >= v9) {
      size_t v13 = v9;
    }
    else {
      size_t v13 = v11;
    }
    int v14 = memcmp(v10, v12, v13);
    BOOL v15 = v9 < v11;
    if (v14) {
      BOOL v15 = v14 < 0;
    }
    if (v15) {
      return 1;
    }
    int v16 = memcmp(v12, v10, v13);
    BOOL v17 = v11 < v9;
    if (v16) {
      BOOL v17 = v16 < 0;
    }
    if (!v17) {
      return *((_DWORD *)a1 + 6) < *((_DWORD *)a2 + 6);
    }
    return 0;
  }
  int v19 = *((char *)a2 + 23);
  int v20 = *((char *)a1 + 23);
  if (v20 >= 0) {
    size_t v21 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v21 = (size_t)a1[1];
  }
  if (v20 >= 0) {
    unsigned int v22 = a1;
  }
  else {
    unsigned int v22 = *a1;
  }
  if (v19 >= 0) {
    size_t v23 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v23 = (size_t)a2[1];
  }
  if (v19 >= 0) {
    uint64_t v24 = a2;
  }
  else {
    uint64_t v24 = *a2;
  }
  if (v23 >= v21) {
    size_t v25 = v21;
  }
  else {
    size_t v25 = v23;
  }
  int v26 = memcmp(v22, v24, v25);
  BOOL v27 = v21 < v23;
  if (v26) {
    BOOL v27 = v26 < 0;
  }
  if (v27) {
    return 1;
  }
  int v28 = memcmp(v24, v22, v25);
  BOOL v29 = v23 < v21;
  if (v28) {
    BOOL v29 = v28 < 0;
  }
  if (v29) {
    return 0;
  }
  return *((unsigned __int8 *)a1 + 24) < *((unsigned __int8 *)a2 + 24);
}

void std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::~__func()
{
}

__n128 std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_270DC1F90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC1F90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0,std::allocator<llvm::MCContext::reportError(llvm::SMLoc,llvm::Twine const&)::$_0>,void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::operator()(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  v19[22] = *(char **)MEMORY[0x263EF8340];
  llvm::SourceMgr::GetMessage(*a3, **(char ***)(a1 + 8), 0, *(llvm::Twine **)(a1 + 16), 0, 0, 0, 0, (uint64_t)&v8);
  *(_OWORD *)a2 = v8;
  int v4 = (void **)(a2 + 16);
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)int v4 = v9;
  *(void *)(a2 + 32) = v10;
  HIBYTE(v10) = 0;
  LOBYTE(v9) = 0;
  *(void *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 48) = v12;
  int v5 = (void **)(a2 + 56);
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)int v5 = v13;
  *(void *)(a2 + 72) = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  BOOL v6 = (void **)(a2 + 80);
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)BOOL v6 = *(_OWORD *)v15;
  *(void *)(a2 + 96) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15[0]) = 0;
  int v7 = *(void **)(a2 + 104);
  if (v7)
  {
    *(void *)(a2 + 112) = v7;
    operator delete(v7);
  }
  *(_OWORD *)(a2 + 104) = *(_OWORD *)__p;
  *(void *)(a2 + 120) = v18;
  __p[1] = 0;
  uint64_t v18 = 0;
  __p[0] = 0;
  llvm::SmallVectorImpl<llvm::SMFixIt>::operator=(a2 + 128, (uint64_t)v19);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)v9);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::SMFixIt>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2 + 16;
  uint64_t v4 = *(void *)a2;
  if (*(void *)a2 == a2 + 16)
  {
    unint64_t v9 = *(unsigned int *)(a2 + 8);
    uint64_t v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      uint64_t v11 = *(void *)a1;
      if (v9)
      {
        uint64_t v12 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::SMFixIt *,llvm::SMFixIt *,llvm::SMFixIt *>(v4, v4 + 40 * v9, v11);
        uint64_t v11 = *(void *)a1;
        LODWORD(v10) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        uint64_t v12 = *(void *)a1;
      }
      for (uint64_t i = v11 + 40 * v10; i != v12; i -= 40)
      {
        if (*(char *)(i - 1) < 0) {
          operator delete(*(void **)(i - 24));
        }
      }
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if (v10)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::SMFixIt *,llvm::SMFixIt *,llvm::SMFixIt *>(v4, v4 + 40 * v10, *(void *)a1);
        goto LABEL_20;
      }
    }
    else
    {
      llvm::SmallVectorImpl<llvm::SMFixIt>::clear((uint64_t *)a1);
      llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::grow(a1, v9);
    }
    uint64_t v10 = 0;
LABEL_20:
    uint64_t v13 = *(unsigned int *)(a2 + 8);
    if (v10 != v13)
    {
      uint64_t v14 = *(void *)a2 + 40 * v13;
      uint64_t v15 = *(void *)a1 + 40 * v10;
      uint64_t v16 = *(void *)a2 + 40 * v10;
      do
      {
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
        long long v17 = *(_OWORD *)(v16 + 16);
        *(void *)(v15 + 32) = *(void *)(v16 + 32);
        *(_OWORD *)(v15 + 16) = v17;
        *(void *)(v16 + 24) = 0;
        *(void *)(v16 + 32) = 0;
        *(void *)(v16 + 16) = 0;
        v16 += 40;
        v15 += 40;
      }
      while (v16 != v14);
    }
LABEL_23:
    *(_DWORD *)(a1 + 8) = v9;
    llvm::SmallVectorImpl<llvm::SMFixIt>::clear((uint64_t *)a2);
    return a1;
  }
  BOOL v6 = *(char **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 40 * v7;
    do
    {
      if (v6[v8 - 1] < 0) {
        operator delete(*(void **)&v6[v8 - 24]);
      }
      v8 -= 40;
    }
    while (v8);
    BOOL v6 = *(char **)a1;
  }
  if (v6 != (char *)(a1 + 16)) {
    free(v6);
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = 0;
  return a1;
}

void llvm::SmallVectorImpl<llvm::SMFixIt>::clear(uint64_t *a1)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = 40 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 1) < 0) {
        operator delete(*(void **)(v3 + v4 - 24));
      }
      v4 -= 40;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::SMFixIt *,llvm::SMFixIt *,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      BOOL v6 = (void **)(a3 + 16);
      if (*(char *)(a3 + 39) < 0) {
        operator delete(*v6);
      }
      long long v7 = *(_OWORD *)(v5 + 16);
      *(void *)(a3 + 32) = *(void *)(v5 + 32);
      *(_OWORD *)BOOL v6 = v7;
      *(unsigned char *)(v5 + 39) = 0;
      *(unsigned char *)(v5 + 16) = 0;
      a3 += 40;
      v5 += 40;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::__function::__value_func<void ()(llvm::SMDiagnostic &,llvm::SourceMgr const*)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void llvm::MCDwarfLineTableHeader::tryGetFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, long long *a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  int v15 = *(char *)(a1 + 375);
  if (v15 >= 0) {
    uint64_t v16 = (const void *)(a1 + 352);
  }
  else {
    uint64_t v16 = *(const void **)(a1 + 352);
  }
  uint64_t v18 = *(const char **)a2;
  uint64_t v17 = *(void *)(a2 + 8);
  uint64_t v19 = *(unsigned __int8 *)(a1 + 375);
  if (v15 < 0) {
    uint64_t v19 = *(void *)(a1 + 360);
  }
  if (v17 == v19 && (!v17 || !memcmp(*(const void **)a2, v16, *(void *)(a2 + 8))))
  {
    uint64_t v17 = 0;
    uint64_t v18 = "";
    *(void *)a2 = "";
    *(void *)(a2 + 8) = 0;
  }
  if (!*(void *)(a3 + 8))
  {
    uint64_t v17 = 0;
    *(void *)a3 = "<stdin>";
    *(void *)(a3 + 8) = 7;
    uint64_t v18 = "";
    *(void *)a2 = "";
    *(void *)(a2 + 8) = 0;
  }
  unsigned int v20 = *(_DWORD *)(a1 + 104);
  if (!v20)
  {
    char v21 = *((unsigned char *)a4 + 16);
    *(unsigned char *)(a1 + 449) &= v21;
    *(unsigned char *)(a1 + 450) |= v21;
    *(unsigned char *)(a1 + 448) = *((unsigned char *)a5 + 16);
  }
  if (a6 >= 5)
  {
    long long v103 = *a4;
    char v104 = *((unsigned char *)a4 + 16);
    int v22 = *(char *)(a1 + 399);
    size_t v23 = v22 >= 0 ? *(unsigned __int8 *)(a1 + 399) : *(void *)(a1 + 384);
    if (v23 && v23 == *(void *)(a3 + 8))
    {
      uint64_t v24 = v22 >= 0 ? (const void *)(a1 + 376) : *(const void **)(a1 + 376);
      if (!memcmp(v24, *(const void **)a3, v23))
      {
        if (*(unsigned char *)(a1 + 420) && v104)
        {
          if (*(void *)(a1 + 404) != (void)v103 || *(void *)(a1 + 412) != *((void *)&v103 + 1)) {
            goto LABEL_24;
          }
        }
        else if ((*(unsigned char *)(a1 + 420) != 0) != (v104 != 0))
        {
          goto LABEL_24;
        }
        *(unsigned char *)(a8 + 8) &= ~1u;
        *(_DWORD *)a8 = 0;
        return;
      }
    }
  }
LABEL_24:
  if (a7)
  {
LABEL_33:
    unint64_t v91 = a4;
    unint64_t v33 = (char **)(a1 + 96);
    unsigned int v34 = a7;
    if (v20 <= a7)
    {
      uint64_t v35 = a7 + 1;
      if (v20 != v35)
      {
        uint64_t v36 = v20;
        if (v20 <= v35)
        {
          if (*(_DWORD *)(a1 + 108) >= v35)
          {
            char v41 = *v33;
          }
          else
          {
            *(void *)long long __dst = 0;
            std::string v40 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 96, (void *)(a1 + 112), a7 + 1, 72, (uint64_t *)__dst);
            char v41 = v40;
            int v42 = *(char **)(a1 + 96);
            int v43 = *(_DWORD *)(a1 + 104);
            if (v43)
            {
              uint64_t v44 = &v42[72 * v43];
              uint64_t v87 = v40;
              uint64_t v45 = v40;
              do
              {
                long long v46 = *(_OWORD *)v42;
                *((void *)v45 + 2) = *((void *)v42 + 2);
                *(_OWORD *)uint64_t v45 = v46;
                *((void *)v42 + 1) = 0;
                *((void *)v42 + 2) = 0;
                *(void *)int v42 = 0;
                long long v47 = *(_OWORD *)(v42 + 24);
                long long v48 = *(_OWORD *)(v42 + 40);
                *(_OWORD *)(v45 + 49) = *(_OWORD *)(v42 + 49);
                *(_OWORD *)(v45 + 40) = v48;
                *(_OWORD *)(v45 + 24) = v47;
                v42 += 72;
                v45 += 72;
              }
              while (v42 != v44);
              int v42 = *(char **)(a1 + 96);
              uint64_t v49 = *(unsigned int *)(a1 + 104);
              if (v49)
              {
                uint64_t v50 = 72 * v49;
                do
                {
                  if (v42[v50 - 49] < 0) {
                    operator delete(*(void **)&v42[v50 - 72]);
                  }
                  v50 -= 72;
                }
                while (v50);
                int v42 = *v33;
              }
              char v41 = v87;
            }
            int v51 = *(_DWORD *)__dst;
            if (v42 != (char *)(a1 + 112))
            {
              std::string v52 = v42;
              long long v53 = v41;
              free(v52);
              char v41 = v53;
            }
            *(void *)(a1 + 96) = v41;
            *(_DWORD *)(a1 + 108) = v51;
            uint64_t v36 = *(unsigned int *)(a1 + 104);
            unsigned int v34 = a7;
          }
          if (v35 != v36) {
            bzero(&v41[72 * v36], 72 * ((72 * (v35 - v36) - 72) / 0x48uLL) + 72);
          }
        }
        else
        {
          uint64_t v37 = 9 * v20;
          uint64_t v38 = (uint64_t)&(*v33)[72 * v20 - 72];
          uint64_t v39 = 72 * v35 - 8 * v37;
          do
          {
            if (*(char *)(v38 + 23) < 0) {
              operator delete(*(void **)v38);
            }
            v38 -= 72;
            v39 += 72;
          }
          while (v39);
        }
        *(_DWORD *)(a1 + 104) = v35;
      }
    }
    uint64_t v55 = *v33;
    uint64_t v56 = (uint64_t)&(*v33)[72 * v34];
    if (*(char *)(v56 + 23) < 0)
    {
      if (*(void *)(v56 + 8))
      {
LABEL_69:
        getErrorErrorCat();
        *(void *)long long __dst = 3;
        *(void *)&__dst[8] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
      }
    }
    else if (*(unsigned char *)(v56 + 23))
    {
      goto LABEL_69;
    }
    if (*(unsigned __int8 *)(a1 + 448) != *((unsigned __int8 *)a5 + 16))
    {
      getErrorErrorCat();
      *(void *)long long __dst = 3;
      *(void *)&__dst[8] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
    }
    unsigned int v90 = v34;
    if (*(void *)(a2 + 8))
    {
LABEL_83:
      uint64_t v65 = std::__find_impl[abi:nn180100]<std::string *,std::string *,llvm::StringRef,std::__identity>(*(void *)(a1 + 8), *(void *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16), a2);
      unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v65 - *(void *)(a1 + 8)) >> 3);
      if (*(unsigned int *)(a1 + 16) > (unint64_t)v66)
      {
LABEL_99:
        int v77 = v66 + 1;
        goto LABEL_100;
      }
      size_t v67 = *(void *)(a2 + 8);
      if (v67 > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_115;
      }
      uint64_t v68 = *(const char **)a2;
      unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v65 - *(void *)(a1 + 8)) >> 3);
      if (v67 >= 0x17)
      {
        uint64_t v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v67 | 7) != 0x17) {
          uint64_t v70 = v67 | 7;
        }
        uint64_t v71 = v70 + 1;
        uint64_t v72 = v68;
        size_t v73 = operator new(v70 + 1);
        uint64_t v68 = v72;
        unint64_t v69 = v73;
        *(void *)&__dst[8] = v67;
        *(void *)&__dst[16] = v71 | 0x8000000000000000;
        *(void *)long long __dst = v73;
      }
      else
      {
        __dst[23] = *(void *)(a2 + 8);
        unint64_t v69 = __dst;
        if (!v67) {
          goto LABEL_96;
        }
      }
      memmove(v69, v68, v67);
LABEL_96:
      v69[v67] = 0;
      unint64_t v74 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(a1 + 8, (unint64_t)__dst, 1);
      uint64_t v75 = *(void *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
      long long v76 = *(_OWORD *)v74;
      *(void *)(v75 + 16) = *(void *)(v74 + 16);
      *(_OWORD *)uint64_t v75 = v76;
      *(void *)(v74 + 8) = 0;
      *(void *)(v74 + 16) = 0;
      *(void *)unint64_t v74 = 0;
      ++*(_DWORD *)(a1 + 16);
      if ((__dst[23] & 0x80000000) != 0) {
        operator delete(*(void **)__dst);
      }
      LODWORD(v66) = v89;
      goto LABEL_99;
    }
    long long v57 = *(const void **)a3;
    uint64_t v58 = *(void *)(a3 + 8);
    *(void *)&__dst[16] = 0;
    v101[0] = 0;
    *(void *)long long __dst = v57;
    *(void *)&__dst[8] = v58;
    v101[1] = v58;
    int v102 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)__dst);
    uint64_t v59 = v101[0];
    if (v101[0])
    {
      uint64_t v88 = *(void *)&__dst[16];
      uint64_t v60 = *(const void **)a3;
      unint64_t v61 = *(void *)(a3 + 8);
      if (v61 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v62 == -1)
      {
        unint64_t v63 = 0;
        __int16 v64 = 0;
      }
      else
      {
        __int16 v64 = v60;
      }
      *(void *)a2 = v64;
      *(void *)(a2 + 8) = v63;
      if (!v63)
      {
        int v77 = 0;
        goto LABEL_100;
      }
      *(void *)a3 = v88;
      *(void *)(a3 + 8) = v59;
    }
    if (*(void *)(a2 + 8)) {
      goto LABEL_83;
    }
    int v77 = 0;
LABEL_100:
    size_t v78 = *(void *)(a3 + 8);
    if (v78 <= 0x7FFFFFFFFFFFFFF7)
    {
      uint64_t v79 = *(const void **)a3;
      if (v78 >= 0x17)
      {
        uint64_t v81 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v78 | 7) != 0x17) {
          uint64_t v81 = v78 | 7;
        }
        uint64_t v82 = v81 + 1;
        BOOL v80 = operator new(v81 + 1);
        *(void *)&__dst[8] = v78;
        *(void *)&__dst[16] = v82 | 0x8000000000000000;
        *(void *)long long __dst = v80;
      }
      else
      {
        __dst[23] = v78;
        BOOL v80 = __dst;
        if (!v78) {
          goto LABEL_108;
        }
      }
      memmove(v80, v79, v78);
LABEL_108:
      v80[v78] = 0;
      if (*(char *)(v56 + 23) < 0) {
        operator delete(*(void **)v56);
      }
      *(_OWORD *)uint64_t v56 = *(_OWORD *)__dst;
      *(void *)(v56 + 16) = *(void *)&__dst[16];
      int v83 = &v55[72 * v90];
      *((_DWORD *)v83 + 6) = v77;
      long long v84 = *v91;
      v83[44] = *((unsigned char *)v91 + 16);
      *(_OWORD *)(v83 + 28) = v84;
      char v85 = *((unsigned char *)v91 + 16);
      *(unsigned char *)(a1 + 449) &= v85;
      *(unsigned char *)(a1 + 450) |= v85;
      long long v86 = *a5;
      v83[64] = *((unsigned char *)a5 + 16);
      *((_OWORD *)v83 + 3) = v86;
      if (*((unsigned char *)a5 + 16)) {
        *(unsigned char *)(a1 + 448) = 1;
      }
      *(unsigned char *)(a8 + 8) &= ~1u;
      *(_DWORD *)a8 = a7;
      return;
    }
LABEL_115:
    abort();
  }
  *(void *)long long __dst = v101;
  if (v20 <= 1) {
    unsigned int v20 = 1;
  }
  *(_OWORD *)&__dst[8] = xmmword_261E8A780;
  v93[0] = v18;
  v93[1] = v17;
  v93[2] = 0;
  __int16 v94 = 1797;
  int v26 = *(const void **)a3;
  uint64_t v25 = *(void *)(a3 + 8);
  v95[0] = v93;
  v95[2] = v26;
  v95[3] = v25;
  __int16 v96 = 1282;
  long long v97 = (uint64_t *)llvm::Twine::toStringRef((uint64_t)v95, (uint64_t)__dst);
  unint64_t v98 = v27;
  unsigned int v28 = v20;
  unsigned int v99 = v20;
  BOOL v29 = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<unsigned int>((llvm::StringMapImpl *)(a1 + 328), v97, v27, &v99);
  uint64_t v31 = v30;
  if (!v30)
  {
    uint64_t v32 = *v29;
    *(unsigned char *)(a8 + 8) &= ~1u;
    *(_DWORD *)a8 = *(_DWORD *)(v32 + 8);
  }
  if (*(void **)__dst != v101) {
    free(*(void **)__dst);
  }
  if (v31)
  {
    unsigned int v20 = *(_DWORD *)(a1 + 104);
    a7 = v28;
    goto LABEL_33;
  }
}

void llvm::MCGenDwarfLabelEntry::Make(unsigned char *a1, uint64_t a2, uint64_t *a3, char **a4)
{
  if ((a1[8] & 1) == 0)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(unsigned int *)(a2 + 152);
    uint64_t v10 = v9 ? *(void *)(*(void *)(a2 + 144) + 32 * v9 - 32) : 0;
    uint64_t v22 = 0;
    *(void *)&long long v23 = v10;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v8 + 1608), &v23, &v22))
    {
      if ((*a1 & 4) != 0)
      {
        uint64_t v12 = (void *)*((void *)a1 - 1);
        uint64_t v11 = v12 + 2;
        uint64_t v13 = *v12;
        if (*v12)
        {
          uint64_t v14 = (char *)v12 + 17;
          if (*v11 == 95)
          {
            uint64_t v11 = v14;
            uint64_t v15 = v13 - 1;
          }
          else
          {
            uint64_t v15 = v13;
          }
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v15 = 0;
LABEL_13:
      int v16 = *(_DWORD *)(v8 + 1604);
      uint64_t v17 = *a4;
      int BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(a3, (unint64_t)v17);
      int LineAndColumn = llvm::SourceMgr::getLineAndColumn(a3, v17, BufferContainingLoc);
      *(void *)&long long v23 = "tmp";
      __int16 v27 = 259;
      Tempunint64_t Symbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)v8, (const llvm::Twine *)&v23, 1);
      (*(void (**)(uint64_t, unint64_t, void))(*(void *)a2 + 192))(a2, TempSymbol, 0);
      char v21 = *(void **)(a2 + 8);
      *(void *)&long long v23 = v11;
      *((void *)&v23 + 1) = v15;
      int v24 = v16;
      int v25 = LineAndColumn;
      unint64_t v26 = TempSymbol;
      llvm::MCContext::addMCGenDwarfLabelEntry(v21, &v23);
    }
  }
}

void llvm::MCContext::addMCGenDwarfLabelEntry(void *a1, _OWORD *a2)
{
  uint64_t v4 = (_OWORD *)a1[208];
  unint64_t v5 = a1[209];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v8 = a1[207];
    uint64_t v9 = ((uint64_t)v4 - v8) >> 5;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59) {
      abort();
    }
    uint64_t v11 = v5 - v8;
    if (v11 >> 4 > v10) {
      unint64_t v10 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a1 + 209), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[32 * v9];
    uint64_t v15 = &v13[32 * v12];
    long long v16 = a2[1];
    *(_OWORD *)uint64_t v14 = *a2;
    *((_OWORD *)v14 + 1) = v16;
    long long v7 = v14 + 32;
    uint64_t v17 = (char *)a1[208];
    uint64_t v18 = (char *)a1[207];
    if (v17 != v18)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)a1[207];
    }
    a1[207] = v14;
    a1[208] = v7;
    a1[209] = v15;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    long long v6 = a2[1];
    _OWORD *v4 = *a2;
    v4[1] = v6;
    long long v7 = v4 + 2;
  }
  a1[208] = v7;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCDwarfFrameInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(88 * a2);
}

void std::vector<llvm::MCCFIInstruction>::__init_with_size[abi:nn180100]<llvm::MCCFIInstruction*,llvm::MCCFIInstruction*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<llvm::MCCFIInstruction>::__vallocate[abi:nn180100](a1, a4);
    for (uint64_t i = a1[1]; a2 != a3; i += 80)
    {
      std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction&>((uint64_t)(a1 + 2), i, a2);
      a2 += 5;
    }
    a1[1] = i;
  }
}

char *std::vector<llvm::MCCFIInstruction>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    abort();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(80 * a2);
}

void std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction&>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(_OWORD *)(a2 + 12) = *(long long *)((char *)a3 + 12);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  long long v7 = (unsigned char *)*((void *)a3 + 4);
  long long v6 = (unsigned char *)*((void *)a3 + 5);
  size_t v8 = v6 - v7;
  if (v6 != v7)
  {
    std::vector<char>::__vallocate[abi:nn180100]((void *)(a2 + 32), v6 - v7);
    uint64_t v9 = *(char **)(a2 + 40);
    memmove(v9, v7, v8);
    *(void *)(a2 + 40) = &v9[v8];
  }
  unint64_t v10 = (std::string *)(a2 + 56);
  if (*((char *)a3 + 79) < 0)
  {
    unint64_t v12 = (const std::string::value_type *)*((void *)a3 + 7);
    std::string::size_type v13 = *((void *)a3 + 8);
    std::string::__init_copy_ctor_external(v10, v12, v13);
  }
  else
  {
    long long v11 = *(long long *)((char *)a3 + 56);
    *(void *)(a2 + 72) = *((void *)a3 + 9);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
}

char *std::vector<char>::__vallocate[abi:nn180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    abort();
  }
  __n128 result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<llvm::MCDwarfFrameInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 88;
        long long v7 = (void **)(v4 - 56);
        std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<llvm::MCCFIInstruction>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<llvm::MCCFIInstruction>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  uint64_t v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(void *)(a2 + 40) = v3;
    operator delete(v3);
  }
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<BOOL>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, unsigned char *a3, char *a4, char *a5)
{
  unint64_t v9 = a2;
  long long v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v9, a3, (unint64_t)a4, *a5);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v9, v7, a4);
}

void llvm::MCExpr::print(unsigned __int8 *a1, llvm::raw_ostream *a2, unsigned char *a3, char a4)
{
  int v6 = *a1;
  while (2)
  {
    long long v7 = a1;
    switch(v6)
    {
      case 1:
        uint64_t v31 = *((void *)a1 + 2);
        if (a3 && v31 < 0)
        {
          if (a3[280]) {
            BOOL v32 = (*(_DWORD *)(a1 + 1) & 0x100) == 0;
          }
          else {
            BOOL v32 = 0;
          }
          if (!v32)
          {
LABEL_124:
            switch(*(_DWORD *)(a1 + 1))
            {
              case 1u:
                int v42 = "0x%02llx";
                goto LABEL_154;
              case 2u:
                int v42 = "0x%04llx";
                goto LABEL_154;
              case 4u:
                int v42 = "0x%08llx";
                goto LABEL_154;
              case 8u:
                int v42 = "0x%016llx";
LABEL_154:
                v54[1] = v42;
                uint64_t v55 = v31;
                v54[0] = &unk_270DBD188;
                llvm::raw_ostream::operator<<(a2, (uint64_t)v54);
                break;
              default:
                int v51 = (_WORD *)*((void *)a2 + 4);
                if (*((void *)a2 + 3) - (void)v51 > 1uLL)
                {
                  *int v51 = 30768;
                  *((void *)a2 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(a2, "0x", 2uLL);
                }
                uint64_t v53 = v31;
                v54[0] = &v53;
                uint64_t v55 = 0;
                __int16 v56 = 270;
                llvm::Twine::print((llvm::Twine *)v54, a2);
                break;
            }
            return;
          }
        }
        else if ((*(_DWORD *)(a1 + 1) & 0x100) != 0)
        {
          goto LABEL_124;
        }
        unint64_t v33 = a2;
        unint64_t v21 = *((void *)v7 + 2);
LABEL_102:
        llvm::write_integer(v33, v21, 0, 0);
        return;
      case 2:
        unsigned int v34 = (unsigned char *)*((void *)a1 + 2);
        if (a3
          && !(a4 & 1 | (a3[439] == 0))
          && (*v34 & 4) != 0
          && (uint64_t v35 = *((void *)v34 - 1), *(void *)v35)
          && *(unsigned char *)(v35 + 16) == 36)
        {
          uint64_t v36 = (unsigned char *)*((void *)a2 + 4);
          if ((unint64_t)v36 >= *((void *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 40);
          }
          else
          {
            *((void *)a2 + 4) = v36 + 1;
            *uint64_t v36 = 40;
          }
          llvm::MCSymbol::print(v34, a2, a3);
          std::string v52 = (unsigned char *)*((void *)a2 + 4);
          if ((unint64_t)v52 >= *((void *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 41);
          }
          else
          {
            *((void *)a2 + 4) = v52 + 1;
            *std::string v52 = 41;
          }
        }
        else
        {
          llvm::MCSymbol::print(*((unsigned char **)a1 + 2), a2, a3);
        }
        int v40 = *(_DWORD *)(v7 + 1);
        if ((_WORD)v40)
        {
          if (a3 && a3[438])
          {
            char v41 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v41 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 40);
            }
            else
            {
              *((void *)a2 + 4) = v41 + 1;
              *char v41 = 40;
            }
            VariantKindName = llvm::MCSymbolRefExpr::getVariantKindName(v40);
            uint64_t v44 = llvm::raw_ostream::operator<<(a2, VariantKindName, v50);
            int v43 = (unsigned char *)*((void *)v44 + 4);
            if ((unint64_t)v43 >= *((void *)v44 + 3)) {
              goto LABEL_146;
            }
            *((void *)v44 + 4) = v43 + 1;
LABEL_145:
            *int v43 = 41;
          }
          else
          {
            uint64_t v45 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v45 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 64);
            }
            else
            {
              *((void *)a2 + 4) = v45 + 1;
              *uint64_t v45 = 64;
            }
            long long v48 = llvm::MCSymbolRefExpr::getVariantKindName(v40);
            llvm::raw_ostream::operator<<(a2, v48, v47);
          }
        }
        return;
      case 3:
        switch(*(_DWORD *)(a1 + 1) & 0xFFFFFF)
        {
          case 0:
            unint64_t v9 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v9 >= *((void *)a2 + 3))
            {
              uint64_t v18 = a2;
              char v19 = 33;
              goto LABEL_27;
            }
            *((void *)a2 + 4) = v9 + 1;
            unsigned char *v9 = 33;
            break;
          case 1:
            uint64_t v15 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v15 >= *((void *)a2 + 3))
            {
              uint64_t v18 = a2;
              char v19 = 45;
              goto LABEL_27;
            }
            *((void *)a2 + 4) = v15 + 1;
            *uint64_t v15 = 45;
            break;
          case 2:
            long long v16 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v16 >= *((void *)a2 + 3))
            {
              uint64_t v18 = a2;
              char v19 = 126;
              goto LABEL_27;
            }
            *((void *)a2 + 4) = v16 + 1;
            *long long v16 = 126;
            break;
          case 3:
            uint64_t v17 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v17 >= *((void *)a2 + 3))
            {
              uint64_t v18 = a2;
              char v19 = 43;
LABEL_27:
              llvm::raw_ostream::write(v18, v19);
            }
            else
            {
              *((void *)a2 + 4) = v17 + 1;
              unsigned char *v17 = 43;
            }
            break;
          default:
            break;
        }
        a4 = 0;
        a1 = (unsigned __int8 *)*((void *)v7 + 2);
        int v6 = *a1;
        if (*a1) {
          continue;
        }
        uint64_t v39 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v39)
        {
          llvm::raw_ostream::write(a2, "(", 1uLL);
        }
        else
        {
          *uint64_t v39 = 40;
          ++*((void *)a2 + 4);
        }
        llvm::MCExpr::print(*((void *)v7 + 2), a2, a3, 0);
        long long v46 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v46)
        {
          llvm::raw_ostream::write(a2, ")", 1uLL);
        }
        else
        {
          *long long v46 = 41;
          ++*((void *)a2 + 4);
        }
        return;
      case 4:
        uint64_t v37 = *(void (**)(unsigned __int8 *, llvm::raw_ostream *, unsigned char *))(*((void *)a1 - 1) + 24);
        uint64_t v38 = a1 - 8;
        v37(v38, a2, a3);
        return;
      default:
        size_t v8 = (unsigned __int8 *)*((void *)a1 + 2);
        if (*v8 - 1 > 1)
        {
          unint64_t v10 = (unsigned char *)*((void *)a2 + 4);
          if ((unint64_t)v10 >= *((void *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 40);
          }
          else
          {
            *((void *)a2 + 4) = v10 + 1;
            *unint64_t v10 = 40;
          }
          llvm::MCExpr::print(*((void *)v7 + 2), a2, a3, 0);
          long long v11 = (unsigned char *)*((void *)a2 + 4);
          if ((unint64_t)v11 >= *((void *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 41);
          }
          else
          {
            *((void *)a2 + 4) = v11 + 1;
            *long long v11 = 41;
          }
        }
        else
        {
          llvm::MCExpr::print(v8, a2, a3, 0);
        }
        switch(*(_DWORD *)(v7 + 1) & 0xFFFFFF)
        {
          case 0:
            uint64_t v20 = *((void *)v7 + 3);
            if (*(unsigned char *)v20 == 1)
            {
              unint64_t v21 = *(void *)(v20 + 16);
              if ((v21 & 0x8000000000000000) != 0)
              {
                unint64_t v33 = a2;
                goto LABEL_102;
              }
            }
            uint64_t v22 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v22 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v22 + 1;
              *uint64_t v22 = 43;
              goto LABEL_91;
            }
            unsigned int v28 = a2;
            char v29 = 43;
            goto LABEL_90;
          case 1:
            long long v23 = (char *)*((void *)a2 + 4);
            if ((unint64_t)v23 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v23 + 1;
              char v24 = 38;
              goto LABEL_69;
            }
            unsigned int v28 = a2;
            char v29 = 38;
            goto LABEL_90;
          case 2:
            long long v23 = (char *)*((void *)a2 + 4);
            if ((unint64_t)v23 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v23 + 1;
              char v24 = 47;
              goto LABEL_69;
            }
            unsigned int v28 = a2;
            char v29 = 47;
            goto LABEL_90;
          case 3:
            unint64_t v12 = (__int16 *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v12 <= 1uLL)
            {
              std::string::size_type v13 = a2;
              uint64_t v14 = "==";
              goto LABEL_64;
            }
            __int16 v27 = 15677;
            goto LABEL_86;
          case 4:
            long long v23 = (char *)*((void *)a2 + 4);
            if ((unint64_t)v23 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v23 + 1;
              char v24 = 62;
              goto LABEL_69;
            }
            unsigned int v28 = a2;
            char v29 = 62;
            goto LABEL_90;
          case 5:
            unint64_t v12 = (__int16 *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v12 <= 1uLL)
            {
              std::string::size_type v13 = a2;
              uint64_t v14 = ">=";
              goto LABEL_64;
            }
            __int16 v27 = 15678;
            goto LABEL_86;
          case 6:
            unint64_t v12 = (__int16 *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v12 <= 1uLL)
            {
              std::string::size_type v13 = a2;
              uint64_t v14 = "&&";
              goto LABEL_64;
            }
            __int16 v27 = 9766;
            goto LABEL_86;
          case 7:
            unint64_t v12 = (__int16 *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v12 <= 1uLL)
            {
              std::string::size_type v13 = a2;
              uint64_t v14 = "||";
              goto LABEL_64;
            }
            __int16 v27 = 31868;
            goto LABEL_86;
          case 8:
            long long v23 = (char *)*((void *)a2 + 4);
            if ((unint64_t)v23 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v23 + 1;
              char v24 = 60;
              goto LABEL_69;
            }
            unsigned int v28 = a2;
            char v29 = 60;
            goto LABEL_90;
          case 9:
            unint64_t v12 = (__int16 *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v12 <= 1uLL)
            {
              std::string::size_type v13 = a2;
              uint64_t v14 = "<=";
              goto LABEL_64;
            }
            __int16 v27 = 15676;
            goto LABEL_86;
          case 0xA:
            long long v23 = (char *)*((void *)a2 + 4);
            if ((unint64_t)v23 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v23 + 1;
              char v24 = 37;
              goto LABEL_69;
            }
            unsigned int v28 = a2;
            char v29 = 37;
            goto LABEL_90;
          case 0xB:
            long long v23 = (char *)*((void *)a2 + 4);
            if ((unint64_t)v23 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v23 + 1;
              char v24 = 42;
              goto LABEL_69;
            }
            unsigned int v28 = a2;
            char v29 = 42;
            goto LABEL_90;
          case 0xC:
            unint64_t v12 = (__int16 *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v12 <= 1uLL)
            {
              std::string::size_type v13 = a2;
              uint64_t v14 = "!=";
              goto LABEL_64;
            }
            __int16 v27 = 15649;
            goto LABEL_86;
          case 0xD:
            long long v23 = (char *)*((void *)a2 + 4);
            if ((unint64_t)v23 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v23 + 1;
              char v24 = 124;
              goto LABEL_69;
            }
            unsigned int v28 = a2;
            char v29 = 124;
            goto LABEL_90;
          case 0xE:
            int v25 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v25 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v25 + 1;
              *int v25 = 33;
              goto LABEL_91;
            }
            unsigned int v28 = a2;
            char v29 = 33;
            goto LABEL_90;
          case 0xF:
            unint64_t v12 = (__int16 *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v12 <= 1uLL)
            {
              std::string::size_type v13 = a2;
              uint64_t v14 = "<<";
              goto LABEL_64;
            }
            __int16 v27 = 15420;
            goto LABEL_86;
          case 0x10:
          case 0x11:
            unint64_t v12 = (__int16 *)*((void *)a2 + 4);
            if (*((void *)a2 + 3) - (void)v12 > 1uLL)
            {
              __int16 v27 = 15934;
LABEL_86:
              *unint64_t v12 = v27;
              *((void *)a2 + 4) += 2;
            }
            else
            {
              std::string::size_type v13 = a2;
              uint64_t v14 = ">>";
LABEL_64:
              llvm::raw_ostream::write(v13, v14, 2uLL);
            }
            goto LABEL_91;
          case 0x12:
            unint64_t v26 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v26 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v26 + 1;
              *unint64_t v26 = 45;
              goto LABEL_91;
            }
            unsigned int v28 = a2;
            char v29 = 45;
            goto LABEL_90;
          case 0x13:
            long long v23 = (char *)*((void *)a2 + 4);
            if ((unint64_t)v23 >= *((void *)a2 + 3))
            {
              unsigned int v28 = a2;
              char v29 = 94;
LABEL_90:
              llvm::raw_ostream::write(v28, v29);
            }
            else
            {
              *((void *)a2 + 4) = v23 + 1;
              char v24 = 94;
LABEL_69:
              *long long v23 = v24;
            }
LABEL_91:
            a4 = 0;
            a1 = (unsigned __int8 *)*((void *)v7 + 3);
            int v6 = *a1;
            if ((v6 - 1) < 2) {
              continue;
            }
            unsigned __int8 v30 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v30 >= *((void *)a2 + 3))
            {
              llvm::raw_ostream::write(a2, 40);
            }
            else
            {
              *((void *)a2 + 4) = v30 + 1;
              *unsigned __int8 v30 = 40;
            }
            llvm::MCExpr::print(*((void *)v7 + 3), a2, a3, 0);
            int v43 = (unsigned char *)*((void *)a2 + 4);
            if ((unint64_t)v43 < *((void *)a2 + 3))
            {
              *((void *)a2 + 4) = v43 + 1;
              goto LABEL_145;
            }
            uint64_t v44 = a2;
            break;
          default:
            goto LABEL_91;
        }
LABEL_146:
        llvm::raw_ostream::write(v44, 41);
        return;
    }
  }
}

char *llvm::MCSymbolRefExpr::getVariantKindName(__int16 a1)
{
  return off_2655961F8[(__int16)(a1 - 1)];
}

unint64_t llvm::MCSymbolRefExpr::create(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a3 + 184, 24, 3);
  int v9 = a2 | (*(unsigned __int8 *)(*(void *)(a3 + 144) + 18) << 16);
  *(unsigned char *)unint64_t result = 2;
  *(_DWORD *)(result + 1) = v9 | (*(unsigned __int8 *)(result + 4) << 24);
  *(void *)(result + 8) = a4;
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t llvm::MCSymbolRefExpr::getVariantKindForName(uint64_t a1, uint64_t a2)
{
  v139[0] = a1;
  v139[1] = a2;
  llvm::StringRef::lower((llvm::StringRef *)v139, v137);
  unint64_t v2 = (unint64_t)v137[1];
  if ((v138 & 0x80u) == 0) {
    uint64_t v3 = v137;
  }
  else {
    uint64_t v3 = (void **)v137[0];
  }
  if ((v138 & 0x80u) == 0) {
    unint64_t v2 = v138;
  }
  switch(v2)
  {
    case 1uLL:
      int v4 = *(unsigned __int8 *)v3;
      switch(v4)
      {
        case 'h':
          uint64_t v5 = 49;
          break;
        case 'l':
          uint64_t v5 = 48;
          break;
        case 'u':
          uint64_t v5 = 65;
          break;
        default:
          goto LABEL_486;
      }
      break;
    case 2uLL:
      switch(*(_WORD *)v3)
      {
        case 0x6168:
          uint64_t v5 = 50;
          break;
        case 0x6569:
          uint64_t v5 = 123;
          break;
        case 0x6968:
          uint64_t v5 = 137;
          break;
        case 0x6F6C:
          uint64_t v5 = 138;
          break;
        default:
          goto LABEL_486;
      }
      break;
    case 3uLL:
      if (*(_WORD *)v3 == 28519 && *((unsigned char *)v3 + 2) == 116)
      {
        uint64_t v5 = 2;
      }
      else if (*(_WORD *)v3 == 27760 && *((unsigned char *)v3 + 2) == 116)
      {
        uint64_t v5 = 12;
      }
      else if (*(_WORD *)v3 == 28532 && *((unsigned char *)v3 + 2) == 99)
      {
        uint64_t v5 = 61;
      }
      else if (*(_WORD *)v3 == 27764 && *((unsigned char *)v3 + 2) == 115)
      {
        uint64_t v5 = 94;
      }
      else if (*(_WORD *)v3 == 28524 && *((unsigned char *)v3 + 2) == 56)
      {
        uint64_t v5 = 41;
      }
      else
      {
        int v11 = *(unsigned __int16 *)v3;
        int v12 = *((unsigned __int8 *)v3 + 2);
        if (v11 != 26984 || v12 != 56) {
          goto LABEL_486;
        }
        uint64_t v5 = 42;
      }
      break;
    case 4uLL:
      switch(*(_DWORD *)v3)
      {
        case 0x70766C74:
          uint64_t v5 = 20;
          break;
        case 0x65676170:
          uint64_t v5 = 23;
          break;
        case 0x657A6973:
          uint64_t v5 = 28;
          break;
        case 0x38736261:
          uint64_t v5 = 30;
          break;
        case 0x68676968:
          uint64_t v5 = 51;
          break;
        case 0x656E6F6E:
          uint64_t v5 = 32;
          break;
        case 0x386F6C68:
          uint64_t v5 = 43;
          break;
        default:
          goto LABEL_486;
      }
      break;
    case 5uLL:
      if (*(_DWORD *)v3 == 1701995376 && *((unsigned char *)v3 + 4) == 108)
      {
        uint64_t v5 = 5;
      }
      else if (*(_DWORD *)v3 == 1735617652 && *((unsigned char *)v3 + 4) == 100)
      {
        uint64_t v5 = 13;
      }
      else if (*(_DWORD *)v3 == 1819503732 && *((unsigned char *)v3 + 4) == 100)
      {
        uint64_t v5 = 14;
      }
      else if (*(_DWORD *)v3 == 1718579316 && *((unsigned char *)v3 + 4) == 102)
      {
        uint64_t v5 = 16;
      }
      else if (*(_DWORD *)v3 == 1701998708 && *((unsigned char *)v3 + 4) == 108)
      {
        uint64_t v5 = 151;
      }
      else if (*(_DWORD *)v3 == 1751607656 && *((unsigned char *)v3 + 4) == 97)
      {
        uint64_t v5 = 52;
      }
      else if (*(_DWORD *)v3 == 1081372519 && *((unsigned char *)v3 + 4) == 108)
      {
        uint64_t v5 = 57;
      }
      else if (*(_DWORD *)v3 == 1081372519 && *((unsigned char *)v3 + 4) == 104)
      {
        uint64_t v5 = 58;
      }
      else if (*(_DWORD *)v3 == 1633906540 && *((unsigned char *)v3 + 4) == 108)
      {
        uint64_t v5 = 112;
      }
      else if (*(_DWORD *)v3 == 1080258420 && *((unsigned char *)v3 + 4) == 108)
      {
        uint64_t v5 = 62;
      }
      else if (*(_DWORD *)v3 == 1080258420 && *((unsigned char *)v3 + 4) == 104)
      {
        uint64_t v5 = 63;
      }
      else if (*(_DWORD *)v3 == 1869901678 && *((unsigned char *)v3 + 4) == 99)
      {
        uint64_t v5 = 113;
      }
      else if (*(_DWORD *)v3 == 1869046887 && *((unsigned char *)v3 + 4) == 116)
      {
        uint64_t v5 = 119;
      }
      else if (*(_DWORD *)v3 == 1819305063 && *((unsigned char *)v3 + 4) == 116)
      {
        uint64_t v5 = 121;
      }
      else if (*(_DWORD *)v3 == 1869047145 && *((unsigned char *)v3 + 4) == 116)
      {
        uint64_t v5 = 124;
      }
      else if (*(_DWORD *)v3 == 1869046892 && *((unsigned char *)v3 + 4) == 116)
      {
        uint64_t v5 = 120;
      }
      else if (*(_DWORD *)v3 == 1819305068 && *((unsigned char *)v3 + 4) == 116)
      {
        uint64_t v5 = 122;
      }
      else if (*(_DWORD *)v3 == 1701995123 && *((unsigned char *)v3 + 4) == 108)
      {
        uint64_t v5 = 37;
      }
      else if (*(_DWORD *)v3 == 1701995124 && *((unsigned char *)v3 + 4) == 108)
      {
        uint64_t v5 = 128;
      }
      else if (*(_DWORD *)v3 == 1701995117 && *((unsigned char *)v3 + 4) == 108)
      {
        uint64_t v5 = 127;
      }
      else if (*(_DWORD *)v3 == 913073522 && *((unsigned char *)v3 + 4) == 52)
      {
        uint64_t v5 = 134;
      }
      else if (*(_DWORD *)v3 == 1751081840 && *((unsigned char *)v3 + 4) == 105)
      {
        uint64_t v5 = 139;
      }
      else
      {
        int v36 = *(_DWORD *)v3;
        int v37 = *((unsigned __int8 *)v3 + 4);
        if (v36 != 1818190704 || v37 != 111) {
          goto LABEL_486;
        }
        uint64_t v5 = 140;
      }
      break;
    case 6uLL:
      if (*(_DWORD *)v3 == 1919972452 && *((_WORD *)v3 + 2) == 27749)
      {
        uint64_t v5 = 152;
      }
      else if (*(_DWORD *)v3 == 1869640804 && *((_WORD *)v3 + 2) == 26214)
      {
        uint64_t v5 = 17;
      }
      else if (*(_DWORD *)v3 == 1869901671 && *((_WORD *)v3 + 2) == 26214)
      {
        uint64_t v5 = 3;
      }
      else if (*(_DWORD *)v3 == 1920233319 && *((_WORD *)v3 + 2) == 27749)
      {
        uint64_t v5 = 4;
      }
      else if (*(_DWORD *)v3 == 1869640814 && *((_WORD *)v3 + 2) == 26214)
      {
        uint64_t v5 = 10;
      }
      else if (*(_DWORD *)v3 == 1819503732 && *((_WORD *)v3 + 2) == 28004)
      {
        uint64_t v5 = 15;
      }
      else if (*(_DWORD *)v3 == 1919380841 && *((_WORD *)v3 + 2) == 27749)
      {
        uint64_t v5 = 115;
      }
      else if (*(_DWORD *)v3 == 1869900912 && *((_WORD *)v3 + 2) == 26214)
      {
        uint64_t v5 = 31;
      }
      else if (*(_DWORD *)v3 == 1751607656 && *((_WORD *)v3 + 2) == 29285)
      {
        uint64_t v5 = 53;
      }
      else if (*(_DWORD *)v3 == 1081372519 && *((_WORD *)v3 + 2) == 24936)
      {
        uint64_t v5 = 59;
      }
      else if (*(_DWORD *)v3 == 1080258420 && *((_WORD *)v3 + 2) == 24936)
      {
        uint64_t v5 = 64;
      }
      else if (*(_DWORD *)v3 == 1836086372 && *((_WORD *)v3 + 2) == 25711)
      {
        uint64_t v5 = 67;
      }
      else if (*(_DWORD *)v3 == 1818587760 && *((_WORD *)v3 + 2) == 12595)
      {
        uint64_t v5 = 36;
      }
      else if (*(_DWORD *)v3 == 1819503732 && *((_WORD *)v3 + 2) == 28516)
      {
        uint64_t v5 = 38;
      }
      else if (*(_DWORD *)v3 == 1920167028 && *((_WORD *)v3 + 2) == 27749)
      {
        uint64_t v5 = 126;
      }
      else if (*(_DWORD *)v3 == 1601466215 && *((_WORD *)v3 + 2) == 26984)
      {
        uint64_t v5 = 141;
      }
      else if (*(_DWORD *)v3 == 1601466215 && *((_WORD *)v3 + 2) == 28524)
      {
        uint64_t v5 = 142;
      }
      else if (*(_DWORD *)v3 == 1601465456 && *((_WORD *)v3 + 2) == 26984)
      {
        uint64_t v5 = 145;
      }
      else
      {
        int v57 = *(_DWORD *)v3;
        int v58 = *((unsigned __int16 *)v3 + 2);
        if (v57 != 1601465456 || v58 != 28524) {
          goto LABEL_486;
        }
        uint64_t v5 = 146;
      }
      break;
    case 7uLL:
      if (*(_DWORD *)v3 == 1668508788 && *(_DWORD *)((char *)v3 + 3) == 1819042147)
      {
        uint64_t v5 = 18;
      }
      else if (*(_DWORD *)v3 == 1685286004 && *(_DWORD *)((char *)v3 + 3) == 1668506980)
      {
        uint64_t v5 = 19;
      }
      else if (*(_DWORD *)v3 == 1701273968 && *(_DWORD *)((char *)v3 + 3) == 1717989221)
      {
        uint64_t v5 = 24;
      }
      else if (*(_DWORD *)v3 == 1886678887 && *(_DWORD *)((char *)v3 + 3) == 1701273968)
      {
        uint64_t v5 = 25;
      }
      else if (*(_DWORD *)v3 == 1751607656 && *(_DWORD *)((char *)v3 + 3) == 1634887016)
      {
        uint64_t v5 = 54;
      }
      else if (*(_DWORD *)v3 == 1751607656 && *(_DWORD *)((char *)v3 + 3) == 1953719656)
      {
        uint64_t v5 = 55;
      }
      else if (*(_DWORD *)v3 == 1650683764 && *(_DWORD *)((char *)v3 + 3) == 1702060386)
      {
        uint64_t v5 = 60;
      }
      else if (*(_DWORD *)v3 == 1701998708 && *(_DWORD *)((char *)v3 + 3) == 1816161381)
      {
        uint64_t v5 = 68;
      }
      else if (*(_DWORD *)v3 == 1701998708 && *(_DWORD *)((char *)v3 + 3) == 1749052517)
      {
        uint64_t v5 = 69;
      }
      else if (*(_DWORD *)v3 == 1735549300 && *(_DWORD *)((char *)v3 + 3) == 829711719)
      {
        uint64_t v5 = 34;
      }
      else if (*(_DWORD *)v3 == 1735549300 && *(_DWORD *)((char *)v3 + 3) == 846488935)
      {
        uint64_t v5 = 35;
      }
      else
      {
        int v71 = *(_DWORD *)v3;
        int v72 = *(_DWORD *)((char *)v3 + 3);
        if (v71 != 1081372519 || v72 != 1936487488) {
          goto LABEL_486;
        }
        uint64_t v5 = 129;
      }
      break;
    case 8uLL:
      if (*v3 == (void *)0x6C65726370746F67)
      {
        uint64_t v5 = 6;
      }
      else if (*v3 == (void *)0x66666F7074746F67)
      {
        uint64_t v5 = 8;
      }
      else if (*v3 == (void *)0x6567617070766C74)
      {
        uint64_t v5 = 21;
      }
      else if (*v3 == (void *)0x32336C6572636573)
      {
        uint64_t v5 = 27;
      }
      else if (*v3 == (void *)0x6174736568676968)
      {
        uint64_t v5 = 56;
      }
      else if (*v3 == (void *)0x6168406C65727074)
      {
        uint64_t v5 = 70;
      }
      else if (*v3 == (void *)0x6C406C6572707464)
      {
        uint64_t v5 = 77;
      }
      else if (*v3 == (void *)0x68406C6572707464)
      {
        uint64_t v5 = 78;
      }
      else if (*v3 == (void *)0x6C6572705F746F67)
      {
        uint64_t v5 = 33;
      }
      else if (*v3 == (void *)0x6F6C4032336C6572)
      {
        uint64_t v5 = 132;
      }
      else if (*v3 == (void *)0x69684032336C6572)
      {
        uint64_t v5 = 133;
      }
      else if (*v3 == (void *)0x6F6C403233736261)
      {
        uint64_t v5 = 135;
      }
      else if (*v3 == (void *)0x6968403233736261)
      {
        uint64_t v5 = 136;
      }
      else if (*v3 == (void *)0x69685F66666F7074)
      {
        uint64_t v5 = 149;
      }
      else
      {
        if (*v3 != (void *)0x6F6C5F66666F7074) {
          goto LABEL_486;
        }
        uint64_t v5 = 150;
      }
      break;
    case 9uLL:
      if (*v3 == (void *)0x666F70746E646E69 && *((unsigned char *)v3 + 8) == 102)
      {
        uint64_t v5 = 9;
      }
      else if (*v3 == (void *)0x666F70746E746F67 && *((unsigned char *)v3 + 8) == 102)
      {
        uint64_t v5 = 11;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *((unsigned char *)v3 + 8) == 97)
      {
        uint64_t v5 = 79;
      }
      else if (*v3 == (void *)0x6572707440746F67 && *((unsigned char *)v3 + 8) == 108)
      {
        uint64_t v5 = 86;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *((unsigned char *)v3 + 8) == 100)
      {
        uint64_t v5 = 95;
      }
      else if (*v3 == (void *)0x6C736C7440746F67 && *((unsigned char *)v3 + 8) == 100)
      {
        uint64_t v5 = 102;
      }
      else if (*v3 == (void *)0x6572637040746F67 && *((unsigned char *)v3 + 8) == 108)
      {
        uint64_t v5 = 106;
      }
      else if (*v3 == (void *)0x6572637040736C74 && *((unsigned char *)v3 + 8) == 108)
      {
        uint64_t v5 = 110;
      }
      else if (*v3 == (void *)0x65646E6965707974 && *((unsigned char *)v3 + 8) == 120)
      {
        uint64_t v5 = 125;
      }
      else if (*v3 == (void *)0x685F66666F746F67 && *((unsigned char *)v3 + 8) == 105)
      {
        uint64_t v5 = 143;
      }
      else if (*v3 == (void *)0x6C5F66666F746F67 && *((unsigned char *)v3 + 8) == 111)
      {
        uint64_t v5 = 144;
      }
      else if (*v3 == (void *)0x685F64675F736C74 && *((unsigned char *)v3 + 8) == 105)
      {
        uint64_t v5 = 147;
      }
      else
      {
        long long v86 = *v3;
        int v87 = *((unsigned __int8 *)v3 + 8);
        if (v86 != (void *)0x6C5F64675F736C74 || v87 != 111) {
          goto LABEL_486;
        }
        uint64_t v5 = 148;
      }
      break;
    case 0xAuLL:
      if (*v3 == (void *)0x6F65676170746F67 && *((_WORD *)v3 + 4) == 26214)
      {
        uint64_t v5 = 26;
      }
      else if (*v3 == (void *)0x6968406C65727074 && *((_WORD *)v3 + 4) == 26727)
      {
        uint64_t v5 = 71;
      }
      else
      {
        unint64_t v91 = *v3;
        int v92 = *((unsigned __int16 *)v3 + 4);
        if (v91 != (void *)0x7270746440746F67 || v92 != 27749) {
          goto LABEL_486;
        }
        uint64_t v5 = 90;
      }
      break;
    case 0xBuLL:
      if (*v3 == (void *)0x6567617070766C74 && *(void **)((char *)v3 + 3) == (void *)0x66666F6567617070)
      {
        uint64_t v5 = 22;
      }
      else if (*v3 == (void *)0x6968406C65727074 && *(void **)((char *)v3 + 3) == (void *)0x6168676968406C65)
      {
        uint64_t v5 = 72;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *(void **)((char *)v3 + 3) == (void *)0x68676968406C6572)
      {
        uint64_t v5 = 80;
      }
      else if (*v3 == (void *)0x6572707440746F67 && *(void **)((char *)v3 + 3) == (void *)0x6C406C6572707440)
      {
        uint64_t v5 = 87;
      }
      else if (*v3 == (void *)0x6572707440746F67 && *(void **)((char *)v3 + 3) == (void *)0x68406C6572707440)
      {
        uint64_t v5 = 88;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *(void **)((char *)v3 + 3) == (void *)0x6C406467736C7440)
      {
        uint64_t v5 = 96;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *(void **)((char *)v3 + 3) == (void *)0x68406467736C7440)
      {
        uint64_t v5 = 97;
      }
      else if (*v3 == (void *)0x6C736C7440746F67 && *(void **)((char *)v3 + 3) == (void *)0x6C40646C736C7440)
      {
        uint64_t v5 = 103;
      }
      else
      {
        int v102 = *v3;
        uint64_t v103 = *(uint64_t *)((char *)v3 + 3);
        if (v102 != (void *)0x6C736C7440746F67 || v103 != 0x6840646C736C7440) {
          goto LABEL_486;
        }
        uint64_t v5 = 104;
      }
      break;
    case 0xCuLL:
      if (*v3 == (void *)0x6968406C65727074 && *((_DWORD *)v3 + 2) == 1919248487)
      {
        uint64_t v5 = 73;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *((_DWORD *)v3 + 2) == 1634232169)
      {
        uint64_t v5 = 81;
      }
      else if (*v3 == (void *)0x6572707440746F67 && *((_DWORD *)v3 + 2) == 1634222188)
      {
        uint64_t v5 = 89;
      }
      else if (*v3 == (void *)0x7270746440746F67 && *((_DWORD *)v3 + 2) == 1816161381)
      {
        uint64_t v5 = 91;
      }
      else if (*v3 == (void *)0x7270746440746F67 && *((_DWORD *)v3 + 2) == 1749052517)
      {
        uint64_t v5 = 92;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *((_DWORD *)v3 + 2) == 1634222180)
      {
        uint64_t v5 = 98;
      }
      else
      {
        uint64_t v111 = *v3;
        uint64_t v112 = *((unsigned int *)v3 + 2);
        if (v111 != (void *)0x6C736C7440746F67 || v112 != 1634222180) {
          goto LABEL_486;
        }
        uint64_t v5 = 105;
      }
      break;
    case 0xDuLL:
      if (*v3 == (void *)0x6968406C65727074 && *(void **)((char *)v3 + 5) == (void *)0x6172656867696840)
      {
        uint64_t v5 = 74;
      }
      else if (*v3 == (void *)0x6968406C65727074 && *(void **)((char *)v3 + 5) == (void *)0x7473656867696840)
      {
        uint64_t v5 = 75;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *(void **)((char *)v3 + 5) == (void *)0x726568676968406CLL)
      {
        uint64_t v5 = 82;
      }
      else if (*v3 == (void *)0x7270746440746F67 && *(void **)((char *)v3 + 5) == (void *)0x6168406C65727074)
      {
        uint64_t v5 = 93;
      }
      else if (*v3 == (void *)0x6C65726370746F67 && *(void **)((char *)v3 + 5) == (void *)0x6F6C4032336C6572)
      {
        uint64_t v5 = 130;
      }
      else
      {
        BOOL v119 = *v3;
        uint64_t v120 = *(uint64_t *)((char *)v3 + 5);
        if (v119 != (void *)0x6C65726370746F67 || v120 != 0x69684032336C6572) {
          goto LABEL_486;
        }
        uint64_t v5 = 131;
      }
      break;
    case 0xEuLL:
      if (*v3 == (void *)0x6968406C65727074 && *(void **)((char *)v3 + 6) == (void *)0x6174736568676968)
      {
        uint64_t v5 = 76;
      }
      else if (*v3 == (void *)0x68406C6572707464 && *(void **)((char *)v3 + 6) == (void *)0x6172656867696840)
      {
        uint64_t v5 = 83;
      }
      else
      {
        uint64_t v124 = *v3;
        uint64_t v125 = *(uint64_t *)((char *)v3 + 6);
        if (v124 != (void *)0x68406C6572707464 || v125 != 0x7473656867696840) {
          goto LABEL_486;
        }
        uint64_t v5 = 84;
      }
      break;
    case 0xFuLL:
      if (*v3 == (void *)0x68406C6572707464 && *(void **)((char *)v3 + 7) == (void *)0x6174736568676968)
      {
        uint64_t v5 = 85;
      }
      else if (*v3 == (void *)0x67736C7440746F67 && *(void **)((char *)v3 + 7) == (void *)0x6C65726370406467)
      {
        uint64_t v5 = 107;
      }
      else if (*v3 == (void *)0x6C736C7440746F67 && *(void **)((char *)v3 + 7) == (void *)0x6C6572637040646CLL)
      {
        uint64_t v5 = 108;
      }
      else
      {
        unint64_t v130 = *v3;
        uint64_t v131 = *(uint64_t *)((char *)v3 + 7);
        if (v130 != (void *)0x6572707440746F67 || v131 != 0x6C65726370406C65) {
          goto LABEL_486;
        }
        uint64_t v5 = 109;
      }
      break;
    case 0x10uLL:
      uint64_t v134 = *v3;
      v133 = v3[1];
      if (v134 != (void *)0x6C65726370746F67 || v133 != (void *)0x78616C65726F6E5FLL) {
        goto LABEL_486;
      }
      uint64_t v5 = 7;
      break;
    default:
LABEL_486:
      uint64_t v5 = 1;
      break;
  }
  if ((char)v138 < 0) {
    operator delete(v137[0]);
  }
  return v5;
}

BOOL llvm::MCExpr::evaluateAsAbsolute(uint64_t a1, void *a2, uint64_t *a3, llvm::MCAsmLayout *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  if (*(unsigned char *)a1 == 1)
  {
    *a2 = *(void *)(a1 + 16);
    return 1;
  }
  else
  {
    int v8 = llvm::MCExpr::evaluateAsRelocatableImpl(a1, (uint64_t)&v9, a3, a4, 0, a5, a6);
    BOOL result = 0;
    *a2 = v11;
    if (v8)
    {
      if (!v9) {
        return v10 == 0;
      }
    }
  }
  return result;
}

uint64_t llvm::MCExpr::evaluateAsRelocatableImpl(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::MCAsmLayout *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  switch(*(unsigned char *)a1)
  {
    case 1:
      uint64_t v17 = *(void *)(a1 + 16);
      goto LABEL_9;
    case 2:
      uint64_t v19 = *(void *)(a1 + 16);
      int v20 = *(_DWORD *)(v19 + 8);
      if ((v20 & 0x3800) != 0x1000) {
        goto LABEL_63;
      }
      int v21 = *(_DWORD *)(a1 + 1);
      BOOL v22 = (_WORD)v21 && a4 == 0;
      if (v22 || (v20 & 0x40) != 0) {
        goto LABEL_63;
      }
      int v24 = v20 | 4;
      *(_DWORD *)(v19 + 8) = v24;
      uint64_t v25 = *(void *)(v19 + 24);
      if (*(unsigned char *)v25 != 2)
      {
        if (a7) {
          goto LABEL_46;
        }
        goto LABEL_44;
      }
      int v26 = *(unsigned __int16 *)(v25 + 1);
      if (v26 != 29 && (a7 & 1) == 0)
      {
LABEL_44:
        if (llvm::MCSymbol::isInSection((llvm::MCSymbol *)v19)) {
          goto LABEL_63;
        }
        uint64_t v25 = *(void *)(v19 + 24);
        int v24 = *(_DWORD *)(v19 + 8) | 4;
        goto LABEL_46;
      }
      if (v26 == 29)
      {
LABEL_63:
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)a2 = a1;
LABEL_64:
        uint64_t result = 1;
        *(_DWORD *)(a2 + 24) = 0;
        return result;
      }
LABEL_46:
      int v38 = *(_DWORD *)(a1 + 1);
      *(_DWORD *)(v19 + 8) = v24;
      if (!llvm::MCExpr::evaluateAsRelocatableImpl(v25, a2, a3, a4, a5, a6, a7 | ((v38 & 0x10000u) >> 16)))goto LABEL_63; {
      if (!(_WORD)v21)
      }
      {
LABEL_53:
        if ((v38 & 0x10000) == 0 || *(_OWORD *)a2 == 0) {
          return 1;
        }
        BOOL v39 = !*(void *)a2 || *(void *)(a2 + 8) == 0;
        BOOL v40 = !v39;
        if (!*(void *)(a2 + 16) && !v40) {
          return 1;
        }
        goto LABEL_63;
      }
      if (*(void *)a2)
      {
        uint64_t result = 0;
        if (*(_DWORD *)(a2 + 24) || *(void *)(a2 + 8) || *(void *)(a2 + 16)) {
          return result;
        }
        *(void *)a2 = llvm::MCSymbolRefExpr::create(*(void *)(*(void *)a2 + 16), (unsigned __int16)v21, *a3, 0);
        goto LABEL_53;
      }
      if (*(void *)(a2 + 8)) {
        return 0;
      }
      *(void *)a2 = a1;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      uint64_t result = 1;
      *(_DWORD *)(a2 + 24) = 0;
      return result;
    case 3:
      memset(v51, 0, 28);
      int v27 = llvm::MCExpr::evaluateAsRelocatableImpl(*(void *)(a1 + 16), v51, a3, a4, a5, a6, a7);
      uint64_t result = 0;
      if (v27)
      {
        switch(*(_DWORD *)(a1 + 1) & 0xFFFFFF)
        {
          case 0:
            if (*(_OWORD *)v51 != 0) {
              return 0;
            }
            uint64_t v17 = v51[1].i64[0] == 0;
            goto LABEL_9;
          case 1:
            uint64_t v43 = v51[0].i64[0];
            if (v51[0].i64[0] && !v51[0].i64[1]) {
              return 0;
            }
            uint64_t v44 = -v51[1].i64[0];
            *(void *)a2 = v51[0].i64[1];
            *(void *)(a2 + 8) = v43;
            *(void *)(a2 + 16) = v44;
            goto LABEL_11;
          case 2:
            if (*(_OWORD *)v51 != 0) {
              return 0;
            }
            uint64_t v17 = ~v51[1].i64[0];
            goto LABEL_9;
          case 3:
            *(int64x2_t *)a2 = v51[0];
            *(int64x2_t *)(a2 + 12) = *(int64x2_t *)((char *)v51 + 12);
            return 1;
          default:
            return 1;
        }
      }
      return result;
    case 4:
      unsigned int v28 = *(uint64_t (**)(uint64_t, uint64_t, llvm::MCAsmLayout *, uint64_t))(*(void *)(a1 - 8) + 32);
      uint64_t v29 = a1 - 8;
      return v28(v29, a2, a4, a5);
    default:
      memset(v51, 0, 28);
      int64x2_t v48 = 0uLL;
      int v50 = 0;
      uint64_t v49 = 0;
      if (llvm::MCExpr::evaluateAsRelocatableImpl(*(void *)(a1 + 16), v51, a3, a4, a5, a6, a7)
        && (llvm::MCExpr::evaluateAsRelocatableImpl(*(void *)(a1 + 24), &v48, a3, a4, a5, a6, a7) & 1) != 0)
      {
        if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v51[0]), (int32x4_t)vceqzq_s64(v48))))))
        {
          if ((*(_DWORD *)(a1 + 1) & 0xFFFFFF) == 0)
          {
            uint64_t v14 = v49;
            uint64_t v16 = v48.i64[1];
            uint64_t v15 = v48.i64[0];
            return EvaluateSymbolicAdd((uint64_t)a3, a4, a6, a7, v51[0].i64, v15, v16, v14, a2);
          }
          if ((*(_DWORD *)(a1 + 1) & 0xFFFFFF) == 0x12)
          {
            uint64_t v14 = -v49;
            uint64_t v15 = v48.i64[1];
            uint64_t v16 = v48.i64[0];
            return EvaluateSymbolicAdd((uint64_t)a3, a4, a6, a7, v51[0].i64, v15, v16, v14, a2);
          }
          return 0;
        }
        unsigned int v45 = *(_DWORD *)(a1 + 1) & 0xFFFFFF;
        switch(v45)
        {
          case 0u:
            uint64_t v46 = v49 + v51[1].i64[0];
            goto LABEL_109;
          case 1u:
            uint64_t v46 = v49 & v51[1].i64[0];
            goto LABEL_109;
          case 2u:
          case 0xAu:
            if (!v49) {
              return 0;
            }
            if (v45 == 2)
            {
              uint64_t v46 = v51[1].i64[0] / v49;
LABEL_109:
              *(void *)a2 = 0;
              *(void *)(a2 + 8) = 0;
              *(void *)(a2 + 16) = v46;
              goto LABEL_64;
            }
            uint64_t v46 = v51[1].i64[0] % v49;
LABEL_111:
            if (v45 > 0xC || ((1 << *(unsigned char *)(a1 + 1)) & 0x1338) == 0) {
              goto LABEL_109;
            }
LABEL_113:
            if (v46) {
              uint64_t v17 = -1;
            }
            else {
              uint64_t v17 = 0;
            }
            break;
          case 3u:
            uint64_t v46 = v51[1].i64[0] == v49;
            goto LABEL_113;
          case 4u:
            uint64_t v46 = v51[1].i64[0] > v49;
            goto LABEL_113;
          case 5u:
            uint64_t v46 = v51[1].i64[0] >= v49;
            goto LABEL_113;
          case 6u:
            if (v51[1].i64[0]) {
              BOOL v47 = v49 == 0;
            }
            else {
              BOOL v47 = 1;
            }
            goto LABEL_95;
          case 7u:
            BOOL v47 = (v51[1].i64[0] | v49) == 0;
LABEL_95:
            uint64_t v46 = !v47;
            goto LABEL_109;
          case 8u:
            uint64_t v46 = v51[1].i64[0] < v49;
            goto LABEL_113;
          case 9u:
            uint64_t v46 = v51[1].i64[0] <= v49;
            goto LABEL_113;
          case 0xBu:
            uint64_t v46 = v49 * v51[1].i64[0];
            goto LABEL_109;
          case 0xCu:
            uint64_t v46 = v51[1].i64[0] != v49;
            goto LABEL_113;
          case 0xDu:
            uint64_t v46 = v49 | v51[1].i64[0];
            goto LABEL_109;
          case 0xEu:
            uint64_t v46 = v51[1].i64[0] | ~v49;
            goto LABEL_109;
          case 0xFu:
            uint64_t v46 = v51[1].i64[0] << v49;
            goto LABEL_109;
          case 0x10u:
            uint64_t v46 = v51[1].i64[0] >> v49;
            goto LABEL_109;
          case 0x11u:
            uint64_t v46 = (unint64_t)v51[1].i64[0] >> v49;
            goto LABEL_109;
          case 0x12u:
            uint64_t v46 = v51[1].i64[0] - v49;
            goto LABEL_109;
          case 0x13u:
            uint64_t v46 = v49 ^ v51[1].i64[0];
            goto LABEL_109;
          default:
            uint64_t v46 = 0;
            goto LABEL_111;
        }
      }
      else
      {
        unsigned __int8 v30 = *(unsigned __int8 **)(a1 + 16);
        int v32 = *v30;
        uint64_t v31 = v30 - 8;
        if (v32 != 4) {
          return 0;
        }
        uint64_t v33 = *(void *)(a1 + 24);
        uint64_t v34 = v33 - 8;
        if (!v33) {
          uint64_t v34 = 0;
        }
        int v35 = *(_DWORD *)(a1 + 1) & 0xFFFFFF;
        if (v35 == 12)
        {
          if (v33) {
            uint64_t v41 = v34 + 8;
          }
          else {
            uint64_t v41 = 0;
          }
          unsigned int v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v34 + 40))(v34, v41);
          *(void *)a2 = 0;
          *(void *)(a2 + 8) = 0;
          uint64_t v17 = v42 - 1;
          goto LABEL_10;
        }
        if (v35 != 3) {
          return 0;
        }
        uint64_t v36 = v34 + 8;
        if (v33) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v17 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)v31 + 40))(v31, v37) << 63 >> 63;
      }
LABEL_9:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
LABEL_10:
      *(void *)(a2 + 16) = v17;
LABEL_11:
      *(_DWORD *)(a2 + 24) = 0;
      return 1;
  }
}

uint64_t EvaluateSymbolicAdd(uint64_t a1, llvm::MCAsmLayout *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v20 = a7;
  uint64_t v21 = a6;
  uint64_t v9 = *a5;
  uint64_t v18 = a5[1];
  uint64_t v19 = v9;
  uint64_t v17 = a5[2] + a8;
  if (a1)
  {
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v19, &v18, &v17);
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v19, &v20, &v17);
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v21, &v18, &v17);
    AttemptToFoldSymbolOffsetDifference(a1, a2, a3, a4, &v21, &v20, &v17);
    uint64_t v9 = v19;
    a6 = v21;
  }
  if (v9 && a6) {
    return 0;
  }
  uint64_t v14 = v18;
  if (v18)
  {
    if (v20) {
      return 0;
    }
  }
  if (!v9) {
    uint64_t v9 = a6;
  }
  uint64_t v16 = v17;
  if (!v18) {
    uint64_t v14 = v20;
  }
  *(void *)a9 = v9;
  *(void *)(a9 + 8) = v14;
  *(void *)(a9 + 16) = v16;
  *(_DWORD *)(a9 + 24) = 0;
  return 1;
}

uint64_t llvm::MCExpr::findAssociatedFragment(llvm::MCExpr *this)
{
  while (*(unsigned char *)this == 3)
    this = (llvm::MCExpr *)*((void *)this + 2);
  switch(*(unsigned char *)this)
  {
    case 1:
      uint64_t result = llvm::MCSymbol::AbsolutePseudoFragment;
      break;
    case 2:
      uint64_t v5 = (llvm::MCSymbol *)*((void *)this + 2);
      if ((*((unsigned char *)v5 + 8) & 0x40) != 0)
      {
        uint64_t result = 0;
      }
      else
      {
        uint64_t result = llvm::MCSymbol::getFragment(v5, 1);
      }
      break;
    case 3:
      __break(1u);
      JUMPOUT(0x261DBA5E8);
    case 4:
      int v6 = *(uint64_t (**)(char *))(*((void *)this - 1) + 64);
      uint64_t result = v6((char *)this - 8);
      break;
    default:
      Associatedunint64_t Fragment = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)this + 2));
      uint64_t result = llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)this + 3));
      if (AssociatedFragment != llvm::MCSymbol::AbsolutePseudoFragment)
      {
        if (result == llvm::MCSymbol::AbsolutePseudoFragment)
        {
          uint64_t result = AssociatedFragment;
        }
        else
        {
          if (AssociatedFragment) {
            uint64_t v4 = AssociatedFragment;
          }
          else {
            uint64_t v4 = result;
          }
          if ((*(_DWORD *)((unsigned char *)this + 1) & 0xFFFFFF) == 0x12) {
            uint64_t result = llvm::MCSymbol::AbsolutePseudoFragment;
          }
          else {
            uint64_t result = v4;
          }
        }
      }
      break;
  }
  return result;
}

uint64_t AttemptToFoldSymbolOffsetDifference(uint64_t result, llvm::MCAsmLayout *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v32 = result;
  uint64_t v7 = *a6;
  if (*a5) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t v15 = result;
    uint64_t v16 = *(void *)(*a5 + 16);
    uint64_t v17 = *(void *)(v7 + 16);
    uint64_t result = llvm::MCSymbol::getFragment((llvm::MCSymbol *)v16, 1);
    if (result)
    {
      uint64_t result = llvm::MCSymbol::getFragment((llvm::MCSymbol *)v17, 1);
      if (result)
      {
        uint64_t result = llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(*(void *)(v15 + 24), v15, *a5, *a6, a4);
        if (result)
        {
          v31[0] = &v32;
          v31[1] = v16;
          v31[2] = a7;
          v31[3] = a5;
          v31[4] = a6;
          unint64_t Fragment = llvm::MCSymbol::getFragment((llvm::MCSymbol *)v16, 1);
          uint64_t result = llvm::MCSymbol::getFragment((llvm::MCSymbol *)v17, 1);
          uint64_t v19 = result;
          if (Fragment == result
            && (*(_DWORD *)(v16 + 8) & 0x2800 | 0x1000) != 0x1000
            && (*(_DWORD *)(v17 + 8) & 0x2800 | 0x1000) != 0x1000)
          {
            uint64_t v29 = *(void *)(v16 + 24) - *(void *)(v17 + 24);
LABEL_35:
            uint64_t v30 = *a7;
LABEL_36:
            *a7 = v29 + v30;
            return AttemptToFoldSymbolOffsetDifference(llvm::MCAssembler const*,llvm::MCAsmLayout const*,llvm::DenseMap<llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>> const*,BOOL,llvm::MCSymbolRefExpr const*&,llvm::MCSymbolRefExpr const*&,long long &)::$_0::operator()((uint64_t)v31);
          }
          uint64_t v20 = *(void *)(Fragment + 16);
          uint64_t v21 = *(void *)(result + 16);
          if (a3 || v20 == v21)
          {
            if (a2)
            {
              uint64_t v22 = *(void *)(Fragment + 16);
              uint64_t result = llvm::MCAsmLayout::canGetFragmentOffset(a2, (const llvm::MCFragment *)Fragment);
              if (result)
              {
                uint64_t result = llvm::MCAsmLayout::canGetFragmentOffset(a2, (const llvm::MCFragment *)v19);
                if (result)
                {
                  long long v23 = *(const llvm::MCSymbol **)(*a5 + 16);
                  unint64_t v33 = 0;
                  getSymbolOffsetImpl(a2, v23, 1, &v33);
                  unint64_t v24 = v33;
                  uint64_t v25 = *(const llvm::MCSymbol **)(*a6 + 16);
                  unint64_t v33 = 0;
                  getSymbolOffsetImpl(a2, v25, 1, &v33);
                  *a7 += v24 - v33;
                  if (v22 == v21 || !a3) {
                    return AttemptToFoldSymbolOffsetDifference(llvm::MCAssembler const*,llvm::MCAsmLayout const*,llvm::DenseMap<llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>> const*,BOOL,llvm::MCSymbolRefExpr const*&,llvm::MCSymbolRefExpr const*&,long long &)::$_0::operator()((uint64_t)v31);
                  }
                  unint64_t v33 = 0;
                  uint64_t v26 = 0;
                  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a3, *(_DWORD *)(a3 + 16), v22, &v33))uint64_t v26 = *(void *)(v33 + 8); {
                  unint64_t v33 = 0;
                  }
                  int v27 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)a3, *(_DWORD *)(a3 + 16), v21, &v33);
                  uint64_t v28 = 0;
                  if (v27) {
                    uint64_t v28 = *(void *)(v33 + 8);
                  }
                  uint64_t v29 = v26 - v28;
                  goto LABEL_35;
                }
              }
            }
            else if ((*(_DWORD *)(v16 + 8) & 0x2800 | 0x1000) != 0x1000 {
                   && (*(_DWORD *)(v17 + 8) & 0x2800 | 0x1000) != 0x1000
            }
                   && *(unsigned char *)(Fragment + 48) == 1
                   && *(unsigned char *)(result + 48) == 1
                   && *(_DWORD *)(Fragment + 44) == *(_DWORD *)(result + 44)
                   && result != v20 + 104)
            {
              uint64_t v30 = *(void *)(v16 + 24) - *(void *)(v17 + 24);
              while (v19 != Fragment)
              {
                if (*(unsigned char *)(v19 + 48) == 1)
                {
                  v30 += *(void *)(v19 + 72);
                  uint64_t v19 = *(void *)(v19 + 8);
                  if (v19 != v20 + 104) {
                    continue;
                  }
                }
                return result;
              }
              uint64_t v29 = *a7;
              goto LABEL_36;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t AttemptToFoldSymbolOffsetDifference(llvm::MCAssembler const*,llvm::MCAsmLayout const*,llvm::DenseMap<llvm::MCSection const*,unsigned long long,llvm::DenseMapInfo<llvm::MCSection const*,void>,llvm::detail::DenseMapPair<llvm::MCSection const*,unsigned long long>> const*,BOOL,llvm::MCSymbolRefExpr const*&,llvm::MCSymbolRefExpr const*&,long long &)::$_0::operator()(uint64_t a1)
{
  if (llvm::MCAssembler::isThumbFunc(**(llvm::MCAssembler ***)a1, *(const llvm::MCSymbol **)(a1 + 8))) {
    **(void **)(a1 + 16) |= 1uLL;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(**(void **)a1 + 8) + 224))(*(void *)(**(void **)a1 + 8), *(void *)(a1 + 8));
  if (result) {
    **(void **)(a1 + 16) |= 1uLL;
  }
  **(void **)(a1 + 32) = 0;
  **(void **)(a1 + 24) = 0;
  return result;
}

BOOL llvm::MCAsmLayout::isFragmentValid(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = 0;
  uint64_t v7 = v3;
  return (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(a1 + 152), &v7, &v6) & 1) != 0&& (uint64_t v4 = *(void *)(v6 + 8)) != 0&& *(_DWORD *)(a2 + 40) <= *(_DWORD *)(v4 + 40);
}

BOOL llvm::MCAsmLayout::canGetFragmentOffset(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 19, &v6)[1];
  if (!v3)
  {
    uint64_t v4 = v6 + 112;
    return *(unsigned __int8 *)(*(void *)v4 + 49) == 0;
  }
  if (*((_DWORD *)a2 + 10) > *(_DWORD *)(v3 + 40))
  {
    uint64_t v4 = v3 + 8;
    return *(unsigned __int8 *)(*(void *)v4 + 49) == 0;
  }
  return 1;
}

BOOL llvm::MCAsmLayout::ensureValid(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 19, &v8)[1];
  if (v4) {
    uint64_t v5 = (llvm::MCFragment **)(v4 + 8);
  }
  else {
    uint64_t v5 = (llvm::MCFragment **)(v8 + 112);
  }
  uint64_t v6 = *v5;
  for (BOOL result = llvm::MCAsmLayout::isFragmentValid((uint64_t)this, (uint64_t)a2);
        !result;
        BOOL result = llvm::MCAsmLayout::isFragmentValid((uint64_t)this, (uint64_t)a2))
  {
    llvm::MCAsmLayout::layoutFragment(this, v6);
    uint64_t v6 = (llvm::MCFragment *)*((void *)v6 + 1);
  }
  return result;
}

BOOL getSymbolOffsetImpl(const llvm::MCAsmLayout *a1, const llvm::MCSymbol *a2, BOOL a3, unint64_t *a4)
{
  int v8 = *((_DWORD *)a2 + 2);
  if ((v8 & 0x3800) != 0x1000)
  {
    if (llvm::MCSymbol::getFragment(a2, 1))
    {
      a3 = 1;
      unint64_t Fragment = (const llvm::MCFragment *)llvm::MCSymbol::getFragment(a2, 1);
      llvm::MCAsmLayout::ensureValid(a1, Fragment);
      *a4 = *((void *)a2 + 3) + *((void *)Fragment + 4);
      return a3;
    }
    if (!a3) {
      return a3;
    }
    uint64_t Name = llvm::MCSymbol::getName(a2);
    __int16 v22 = 1283;
    uint64_t v14 = "unable to evaluate offset to undefined symbol '";
LABEL_17:
    v21[0] = (uint64_t)v14;
    void v21[2] = Name;
    v21[3] = v13;
    uint64_t v19 = "'";
    __int16 v20 = 259;
    llvm::operator+(v21, (uint64_t *)&v19, (uint64_t)v23);
    llvm::report_fatal_error((llvm *)v23, (const llvm::Twine *)1);
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v18 = 0;
  unint64_t v17 = 0;
  *((_DWORD *)a2 + 2) = v8 | 4;
  if ((llvm::MCExpr::evaluateAsRelocatableImpl(*((void *)a2 + 3), &v15, *(void *)a1, a1, 0, 0, 1) & 1) == 0)
  {
    uint64_t Name = llvm::MCSymbol::getName(a2);
    __int16 v22 = 1283;
    uint64_t v14 = "unable to evaluate offset for variable '";
    goto LABEL_17;
  }
  unint64_t v9 = v17;
  if (v15)
  {
    v23[0] = 0;
    if (!getSymbolOffsetImpl(a1, *(const llvm::MCSymbol **)(v15 + 16), a3, v23)) {
      return 0;
    }
    v9 += v23[0];
  }
  if (v16)
  {
    v23[0] = 0;
    if (getSymbolOffsetImpl(a1, *(const llvm::MCSymbol **)(v16 + 16), a3, v23))
    {
      v9 -= v23[0];
      goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  *a4 = v9;
  return 1;
}

uint64_t llvm::MCSymbol::getName(llvm::MCSymbol *this)
{
  if ((*(unsigned char *)this & 4) != 0) {
    return *((void *)this - 1) + 16;
  }
  else {
    return 0;
  }
}

uint64_t llvm::MCFragment::destroy(uint64_t this)
{
  uint64_t v1 = (void *)this;
  switch(*(unsigned char *)(this + 48))
  {
    case 0:
    case 3:
    case 4:
    case 6:
    case 0xA:
    case 0xB:
    case 0xF:
      goto LABEL_28;
    case 1:
      uint64_t v3 = *(void **)(this + 120);
      if (v3 != v1 + 17) {
        free(v3);
      }
      goto LABEL_25;
    case 2:
    case 9:
      goto LABEL_25;
    case 5:
      uint64_t v4 = *(void **)(this + 152);
      if (v4 != v1 + 21) {
        free(v4);
      }
      uint64_t v5 = (void *)v1[12];
      if (v5 != v1 + 14) {
        free(v5);
      }
      goto LABEL_25;
    case 7:
      uint64_t v6 = *(void **)(this + 96);
      if (v6 != v1 + 14) {
        free(v6);
      }
      goto LABEL_25;
    case 8:
    case 0xE:
      unint64_t v2 = *(void **)(this + 96);
      if (v2 != v1 + 14) {
        free(v2);
      }
      goto LABEL_25;
    case 0xC:
      uint64_t v7 = *(void **)(this + 80);
      int v8 = v1 + 13;
      goto LABEL_26;
    case 0xD:
      unint64_t v9 = *(void **)(this + 280);
      if (v9 != v1 + 38) {
        free(v9);
      }
      uint64_t v10 = (void *)v1[29];
      if (v10 != v1 + 31) {
        free(v10);
      }
      uint64_t v11 = (void *)v1[15];
      if (v11 != v1 + 17) {
        free(v11);
      }
LABEL_25:
      uint64_t v7 = (void *)v1[8];
      int v8 = v1 + 11;
LABEL_26:
      if (v7 != v8) {
        free(v7);
      }
      goto LABEL_28;
    default:
      if (*(unsigned __int8 *)(this + 48) == 255)
      {
LABEL_28:
        JUMPOUT(0x263E500B0);
      }
      return this;
  }
}

unint64_t llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  *((unsigned char *)this + 8) = 0;
  *((void *)this + 57) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__eh_frame", 10, 1744830475, 0, 4, 0);
  unsigned int v4 = *((_DWORD *)a2 + 9);
  BOOL v5 = v4 > 0x21;
  uint64_t v6 = (1 << v4) & 0x3F0000888;
  if (!v5 && v6 != 0)
  {
    int v8 = *((_DWORD *)a2 + 6);
    if (v8 == 5 || v8 == 3) {
      *((unsigned char *)this + 9) = 1;
    }
  }
  unint64_t v9 = (llvm::MCContext *)*((void *)this + 108);
  uint64_t v10 = *((void *)v9 + 256);
  if (!v10 || (int v11 = *(_DWORD *)(v10 + 4), v11 == 2))
  {
    LOBYTE(v11) = *((_DWORD *)a2 + 7) == 24 || *((unsigned char *)this + 9) != 0;
    goto LABEL_16;
  }
  if (v11 == 1)
  {
LABEL_16:
    *((unsigned char *)this + 10) = v11;
    goto LABEL_17;
  }
  if (!v11) {
    *((unsigned char *)this + 10) = 0;
  }
LABEL_17:
  *((_DWORD *)this + 3) = 16;
  *((void *)this + 3) = llvm::MCContext::getMachOSection(v9, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__text", 6, 0x80000000, 0, 2, 0);
  *((void *)this + 4) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__data", 6, 0, 0, 19, 0);
  *((void *)this + 5) = 0;
  *((void *)this + 52) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_data", 13, 17, 0, 19, 0);
  *((void *)this + 53) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_bss", 12, 18, 0, 12, 0);
  *((void *)this + 67) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_vars", 13, 19, 0, 19, 0);
  *((void *)this + 68) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_init", 13, 21, 0, 19, 0);
  *((void *)this + 69) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 5, 0);
  *((void *)this + 70) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__ustring", 9, 0, 0, 6, 0);
  *((void *)this + 78) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal4", 10, 3, 0, 8, 0);
  *((void *)this + 79) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal8", 10, 4, 0, 9, 0);
  *((void *)this + 80) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal16", 11, 14, 0, 10, 0);
  *((void *)this + 6) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__const", 7, 0, 0, 4, 0);
  int v12 = *((_DWORD *)a2 + 6);
  unint64_t MachOSection = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__const", 7, 0, 0, 20, 0);
  *((void *)this + 73) = MachOSection;
  if ((v12 & 0xFFFFFFFD) == 0x15)
  {
    *((void *)this + 71) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__textcoal_nt", 13, -2147483637, 0, 2, 0);
    *((void *)this + 72) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__const_coal", 12, 11, 0, 4, 0);
    unint64_t MachOSection = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__datacoal_nt", 13, 11, 0, 19, 0);
    unint64_t v14 = MachOSection;
  }
  else
  {
    unint64_t v14 = *((void *)this + 4);
    *((void *)this + 71) = *((void *)this + 3);
    *((void *)this + 72) = *((void *)this + 6);
  }
  *((void *)this + 74) = v14;
  *((void *)this + 75) = MachOSection;
  *((void *)this + 76) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__common", 8, 1, 0, 15, 0);
  *((void *)this + 77) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__bss", 5, 1, 0, 15, 0);
  *((void *)this + 81) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__la_symbol_ptr", 15, 7, 0, 0, 0);
  *((void *)this + 82) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__nl_symbol_ptr", 15, 6, 0, 0, 0);
  *((void *)this + 83) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_ptr", 12, 20, 0, 0, 0);
  *((void *)this + 84) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DATA", 6uLL, (uint64_t)"__llvm_addrsig", 14, 0, 0, 19, 0);
  *((void *)this + 7) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__gcc_except_tab", 16, 0, 0, 20, 0);
  *((void *)this + 49) = 0;
  *((void *)this + 50) = 0;
  *((void *)this + 48) = 0;
  unsigned int v15 = *((_DWORD *)a2 + 9);
  if (v15 > 0x21 || ((1 << v15) & 0x3F0000888) == 0) {
    goto LABEL_34;
  }
  int v16 = *((_DWORD *)a2 + 6);
  if (v16 != 3 && v16 != 5 && *((_DWORD *)a2 + 7) != 24)
  {
    if ((v15 & 0xFFFFFFF7) != 3) {
      goto LABEL_28;
    }
    if (llvm::Triple::isMacOSXVersionLT(a2, 0xAu, 6, 0))
    {
      unsigned int v15 = *((_DWORD *)a2 + 9);
LABEL_28:
      if (v15 != 28 && v15 != 7 || (*((_DWORD *)a2 + 6) - 37) > 1) {
        goto LABEL_34;
      }
    }
  }
  *((void *)this + 8) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__LD", 4uLL, (uint64_t)"__compact_unwind", 16, 0x2000000, 0, 4, 0);
  int v17 = *((_DWORD *)a2 + 6);
  if ((v17 - 37) < 2)
  {
LABEL_32:
    int v18 = 0x4000000;
LABEL_33:
    *((_DWORD *)this + 4) = v18;
    goto LABEL_34;
  }
  int v18 = 50331648;
  if (v17 > 4)
  {
    if (v17 == 5) {
      goto LABEL_33;
    }
    if (v17 == 35) {
      goto LABEL_32;
    }
  }
  else
  {
    if (v17 == 1) {
      goto LABEL_32;
    }
    if (v17 == 3) {
      goto LABEL_33;
    }
  }
LABEL_34:
  *((void *)this + 23) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_names", 13, 0x2000000, 0, 0, "debug_names_begin");
  *((void *)this + 24) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_names", 13, 0x2000000, 0, 0, "names_begin");
  *((void *)this + 25) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_objc", 12, 0x2000000, 0, 0, "objc_begin");
  *((void *)this + 26) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_namespac", 16, 0x2000000, 0, 0, "namespac_begin");
  *((void *)this + 27) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_types", 13, 0x2000000, 0, 0, "types_begin");
  *((void *)this + 47) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__swift_ast", 11, 0x2000000, 0, 0, 0);
  *((void *)this + 9) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_abbrev", 14, 0x2000000, 0, 0, "section_abbrev");
  *((void *)this + 10) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_info", 12, 0x2000000, 0, 0, "section_info");
  *((void *)this + 11) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_line", 12, 0x2000000, 0, 0, "section_line");
  *((void *)this + 12) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_line_str", 16, 0x2000000, 0, 0, "section_line_str");
  *((void *)this + 13) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_frame", 13, 0x2000000, 0, 0, 0);
  *((void *)this + 22) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_pubnames", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 14) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_pubtypes", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 45) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_gnu_pubn", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 46) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_gnu_pubt", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 16) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_str", 11, 0x2000000, 0, 0, "info_string");
  *((void *)this + 37) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_str_offs", 16, 0x2000000, 0, 0, "section_str_off");
  *((void *)this + 38) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_addr", 12, 0x2000000, 0, 0, "section_info");
  *((void *)this + 17) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_loc", 11, 0x2000000, 0, 0, "section_debug_loc");
  *((void *)this + 40) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_loclists", 16, 0x2000000, 0, 0, "section_debug_loc");
  *((void *)this + 18) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_aranges", 15, 0x2000000, 0, 0, 0);
  *((void *)this + 19) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_ranges", 14, 0x2000000, 0, 0, "debug_range");
  *((void *)this + 39) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_rnglists", 16, 0x2000000, 0, 0, "debug_range");
  *((void *)this + 20) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_macinfo", 15, 0x2000000, 0, 0, "debug_macinfo");
  *((void *)this + 21) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_macro", 13, 0x2000000, 0, 0, "debug_macro");
  *((void *)this + 15) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_inlined", 15, 0x2000000, 0, 0, 0);
  *((void *)this + 43) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_cu_index", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 44) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_tu_index", 16, 0x2000000, 0, 0, 0);
  *((void *)this + 54) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__LLVM_STACKMAPS", 0x10uLL, (uint64_t)"__llvm_stackmaps", 16, 0, 0, 0, 0);
  *((void *)this + 55) = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__LLVM_FAULTMAPS", 0x10uLL, (uint64_t)"__llvm_faultmaps", 16, 0, 0, 0, 0);
  unint64_t result = llvm::MCContext::getMachOSection(*((llvm::MCContext **)this + 108), (uint64_t)"__LLVM", 6uLL, (uint64_t)"__remarks", 9, 0x2000000, 0, 0, 0);
  *((void *)this + 56) = result;
  __int16 v20 = (uint64_t *)*((void *)this + 108);
  if (v20[2])
  {
    uint64_t v21 = v20[1];
    if (v21) {
      size_t v22 = strlen((const char *)v20[1]);
    }
    else {
      size_t v22 = 0;
    }
    *((void *)this + 97) = llvm::MCContext::getMachOSection((llvm::MCContext *)v20, v21, v22, (uint64_t)"__swift5_fieldmd", 16, 0, 0, 0, 0);
    long long v23 = (const char **)*((void *)this + 108);
    uint64_t v24 = (uint64_t)v23[1];
    if (v24) {
      size_t v25 = strlen(v23[1]);
    }
    else {
      size_t v25 = 0;
    }
    *((void *)this + 98) = llvm::MCContext::getMachOSection((llvm::MCContext *)v23, v24, v25, (uint64_t)"__swift5_assocty", 16, 0, 0, 0, 0);
    uint64_t v26 = (const char **)*((void *)this + 108);
    uint64_t v27 = (uint64_t)v26[1];
    if (v27) {
      size_t v28 = strlen(v26[1]);
    }
    else {
      size_t v28 = 0;
    }
    *((void *)this + 99) = llvm::MCContext::getMachOSection((llvm::MCContext *)v26, v27, v28, (uint64_t)"__swift5_builtin", 16, 0, 0, 0, 0);
    uint64_t v29 = (const char **)*((void *)this + 108);
    uint64_t v30 = (uint64_t)v29[1];
    if (v30) {
      size_t v31 = strlen(v29[1]);
    }
    else {
      size_t v31 = 0;
    }
    *((void *)this + 100) = llvm::MCContext::getMachOSection((llvm::MCContext *)v29, v30, v31, (uint64_t)"__swift5_capture", 16, 0, 0, 0, 0);
    uint64_t v32 = (const char **)*((void *)this + 108);
    uint64_t v33 = (uint64_t)v32[1];
    if (v33) {
      size_t v34 = strlen(v32[1]);
    }
    else {
      size_t v34 = 0;
    }
    *((void *)this + 101) = llvm::MCContext::getMachOSection((llvm::MCContext *)v32, v33, v34, (uint64_t)"__swift5_typeref", 16, 0, 0, 0, 0);
    int v35 = (const char **)*((void *)this + 108);
    uint64_t v36 = (uint64_t)v35[1];
    if (v36) {
      size_t v37 = strlen(v35[1]);
    }
    else {
      size_t v37 = 0;
    }
    *((void *)this + 102) = llvm::MCContext::getMachOSection((llvm::MCContext *)v35, v36, v37, (uint64_t)"__swift5_reflstr", 16, 0, 0, 0, 0);
    int v38 = (const char **)*((void *)this + 108);
    uint64_t v39 = (uint64_t)v38[1];
    if (v39) {
      size_t v40 = strlen(v38[1]);
    }
    else {
      size_t v40 = 0;
    }
    *((void *)this + 103) = llvm::MCContext::getMachOSection((llvm::MCContext *)v38, v39, v40, (uint64_t)"__swift5_proto", 14, 0, 0, 0, 0);
    uint64_t v41 = (const char **)*((void *)this + 108);
    uint64_t v42 = (uint64_t)v41[1];
    if (v42) {
      size_t v43 = strlen(v41[1]);
    }
    else {
      size_t v43 = 0;
    }
    *((void *)this + 104) = llvm::MCContext::getMachOSection((llvm::MCContext *)v41, v42, v43, (uint64_t)"__swift5_protos", 15, 0, 0, 0, 0);
    uint64_t v44 = (const char **)*((void *)this + 108);
    uint64_t v45 = (uint64_t)v44[1];
    if (v45) {
      size_t v46 = strlen(v44[1]);
    }
    else {
      size_t v46 = 0;
    }
    *((void *)this + 105) = llvm::MCContext::getMachOSection((llvm::MCContext *)v44, v45, v46, (uint64_t)"__swift5_acfuncs", 16, 0, 0, 0, 0);
    BOOL v47 = (const char **)*((void *)this + 108);
    uint64_t v48 = (uint64_t)v47[1];
    if (v48) {
      size_t v49 = strlen(v47[1]);
    }
    else {
      size_t v49 = 0;
    }
    unint64_t result = llvm::MCContext::getMachOSection((llvm::MCContext *)v47, v48, v49, (uint64_t)"__swift5_mpenum", 15, 0, 0, 0, 0);
    *((void *)this + 106) = result;
  }
  *((void *)this + 51) = *((void *)this + 67);
  return result;
}

uint64_t llvm::MCObjectFileInfo::initELFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2, int a3)
{
  int v5 = *((_DWORD *)a2 + 6);
  int v6 = 12;
  switch(v5)
  {
    case 3:
    case 4:
    case 23:
    case 24:
      goto LABEL_2;
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
      goto LABEL_14;
    case 8:
    case 9:
      goto LABEL_16;
    case 12:
      int v6 = 16 * *((unsigned __int8 *)this + 856);
      goto LABEL_16;
    case 16:
    case 17:
    case 18:
    case 19:
      if (*((unsigned char *)this + 856)) {
        BOOL v8 = a3 == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        goto LABEL_14;
      }
      BOOL v7 = *(_DWORD *)(*(void *)(*((void *)this + 108) + 144) + 8) == 4;
      int v6 = 11;
      goto LABEL_8;
    default:
      if (v5 == 38)
      {
LABEL_2:
        BOOL v7 = a3 == 0;
        int v6 = 27;
LABEL_8:
        if (!v7) {
          ++v6;
        }
      }
      else if (v5 == 40)
      {
        int v6 = 11;
      }
      else
      {
LABEL_14:
        int v6 = 27;
      }
LABEL_16:
      *((_DWORD *)this + 3) = v6;
      int v9 = *((_DWORD *)a2 + 9);
      if (v5 == 38) {
        int v10 = 2;
      }
      else {
        int v10 = 3;
      }
      if (v5 == 38) {
        int v11 = 1879048193;
      }
      else {
        int v11 = 1;
      }
      int v12 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".bss";
      __int16 v72 = 259;
      __int16 v74 = 257;
      if (v9 == 14) {
        int v13 = v10;
      }
      else {
        int v13 = 2;
      }
      *((void *)this + 5) = llvm::MCContext::getELFSection(v12, (llvm::Twine *)v71, 8, 3, 0, (llvm::Twine *)v73, 0, -1, 0);
      unint64_t v14 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".text";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 3) = llvm::MCContext::getELFSection(v14, (llvm::Twine *)v71, 1, 6, 0, (llvm::Twine *)v73, 0, -1, 0);
      unsigned int v15 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".data";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 4) = llvm::MCContext::getELFSection(v15, (llvm::Twine *)v71, 1, 3, 0, (llvm::Twine *)v73, 0, -1, 0);
      int v16 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".rodata";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 6) = llvm::MCContext::getELFSection(v16, (llvm::Twine *)v71, 1, 2, 0, (llvm::Twine *)v73, 0, -1, 0);
      int v17 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".tdata";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 52) = llvm::MCContext::getELFSection(v17, (llvm::Twine *)v71, 1, 1027, 0, (llvm::Twine *)v73, 0, -1, 0);
      int v18 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".tbss";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 53) = llvm::MCContext::getELFSection(v18, (llvm::Twine *)v71, 8, 1027, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v19 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".data.rel.ro";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 62) = llvm::MCContext::getELFSection(v19, (llvm::Twine *)v71, 1, 3, 0, (llvm::Twine *)v73, 0, -1, 0);
      __int16 v20 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".rodata.cst4";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 63) = llvm::MCContext::getELFSection(v20, (llvm::Twine *)v71, 1, 18, 4, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v21 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".rodata.cst8";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 64) = llvm::MCContext::getELFSection(v21, (llvm::Twine *)v71, 1, 18, 8, (llvm::Twine *)v73, 0, -1, 0);
      size_t v22 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".rodata.cst16";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 65) = llvm::MCContext::getELFSection(v22, (llvm::Twine *)v71, 1, 18, 16, (llvm::Twine *)v73, 0, -1, 0);
      long long v23 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".rodata.cst32";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 66) = llvm::MCContext::getELFSection(v23, (llvm::Twine *)v71, 1, 18, 32, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v24 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".gcc_except_table";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 7) = llvm::MCContext::getELFSection(v24, (llvm::Twine *)v71, 1, 2, 0, (llvm::Twine *)v73, 0, -1, 0);
      *((void *)this + 48) = 0;
      *((void *)this + 49) = 0;
      if ((*((_DWORD *)a2 + 6) & 0xFFFFFFFC) == 0x10) {
        int v25 = 1879048222;
      }
      else {
        int v25 = 1;
      }
      uint64_t v26 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_abbrev";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 9) = llvm::MCContext::getELFSection(v26, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v27 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_info";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 10) = llvm::MCContext::getELFSection(v27, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      size_t v28 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_line";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 11) = llvm::MCContext::getELFSection(v28, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v29 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_line_str";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 12) = llvm::MCContext::getELFSection(v29, (llvm::Twine *)v71, v25, 48, 1, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v30 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_frame";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 13) = llvm::MCContext::getELFSection(v30, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      size_t v31 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_pubnames";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 22) = llvm::MCContext::getELFSection(v31, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v32 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_pubtypes";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 14) = llvm::MCContext::getELFSection(v32, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v33 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_gnu_pubnames";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 45) = llvm::MCContext::getELFSection(v33, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      size_t v34 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_gnu_pubtypes";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 46) = llvm::MCContext::getELFSection(v34, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      int v35 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_str";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 16) = llvm::MCContext::getELFSection(v35, (llvm::Twine *)v71, v25, 48, 1, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v36 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_loc";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 17) = llvm::MCContext::getELFSection(v36, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      size_t v37 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_aranges";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 18) = llvm::MCContext::getELFSection(v37, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      int v38 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_ranges";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 19) = llvm::MCContext::getELFSection(v38, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v39 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_macinfo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 20) = llvm::MCContext::getELFSection(v39, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      size_t v40 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_macro";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 21) = llvm::MCContext::getELFSection(v40, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v41 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_names";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 23) = llvm::MCContext::getELFSection(v41, (llvm::Twine *)v71, 1, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v42 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".apple_names";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 24) = llvm::MCContext::getELFSection(v42, (llvm::Twine *)v71, 1, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      size_t v43 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".apple_objc";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 25) = llvm::MCContext::getELFSection(v43, (llvm::Twine *)v71, 1, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v44 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".apple_namespaces";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 26) = llvm::MCContext::getELFSection(v44, (llvm::Twine *)v71, 1, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v45 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".apple_types";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 27) = llvm::MCContext::getELFSection(v45, (llvm::Twine *)v71, 1, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      size_t v46 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_str_offsets";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 37) = llvm::MCContext::getELFSection(v46, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      BOOL v47 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_addr";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 38) = llvm::MCContext::getELFSection(v47, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v48 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_rnglists";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 39) = llvm::MCContext::getELFSection(v48, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      size_t v49 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_loclists";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 40) = llvm::MCContext::getELFSection(v49, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      int v50 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_info.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 28) = llvm::MCContext::getELFSection(v50, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      int v51 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_types.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 29) = llvm::MCContext::getELFSection(v51, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      std::string v52 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_abbrev.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 30) = llvm::MCContext::getELFSection(v52, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v53 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_str.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 31) = llvm::MCContext::getELFSection(v53, (llvm::Twine *)v71, v25, -2147483600, 1, (llvm::Twine *)v73, 0, -1, 0);
      unint64_t v54 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_line.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 32) = llvm::MCContext::getELFSection(v54, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v55 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_loc.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 33) = llvm::MCContext::getELFSection(v55, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      __int16 v56 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_str_offsets.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 34) = llvm::MCContext::getELFSection(v56, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      int v57 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_rnglists.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 41) = llvm::MCContext::getELFSection(v57, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      int v58 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_macinfo.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 35) = llvm::MCContext::getELFSection(v58, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v59 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_macro.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 36) = llvm::MCContext::getELFSection(v59, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v60 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_loclists.dwo";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 42) = llvm::MCContext::getELFSection(v60, (llvm::Twine *)v71, v25, 0x80000000, 0, (llvm::Twine *)v73, 0, -1, 0);
      unint64_t v61 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_cu_index";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 43) = llvm::MCContext::getELFSection(v61, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      unint64_t v62 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".debug_tu_index";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 44) = llvm::MCContext::getELFSection(v62, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      unint64_t v63 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".llvm_stackmaps";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 54) = llvm::MCContext::getELFSection(v63, (llvm::Twine *)v71, 1, 2, 0, (llvm::Twine *)v73, 0, -1, 0);
      __int16 v64 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".llvm_faultmaps";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 55) = llvm::MCContext::getELFSection(v64, (llvm::Twine *)v71, 1, 2, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v65 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".eh_frame";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 57) = llvm::MCContext::getELFSection(v65, (llvm::Twine *)v71, v11, v13, 0, (llvm::Twine *)v73, 0, -1, 0);
      unint64_t v66 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".stack_sizes";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 58) = llvm::MCContext::getELFSection(v66, (llvm::Twine *)v71, 1, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      size_t v67 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".pseudo_probe";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 59) = llvm::MCContext::getELFSection(v67, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      uint64_t v68 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".pseudo_probe_desc";
      __int16 v72 = 259;
      __int16 v74 = 257;
      *((void *)this + 60) = llvm::MCContext::getELFSection(v68, (llvm::Twine *)v71, v25, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      unint64_t v69 = (llvm::MCContext *)*((void *)this + 108);
      v71[0] = ".llvm_stats";
      __int16 v72 = 259;
      __int16 v74 = 257;
      uint64_t result = llvm::MCContext::getELFSection(v69, (llvm::Twine *)v71, 1, 0, 0, (llvm::Twine *)v73, 0, -1, 0);
      *((void *)this + 61) = result;
      return result;
  }
}

void llvm::MCObjectFileInfo::initGOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  llvm::MCContext::getGOFFSection(*((void *)this + 108), ".text", 5uLL, 2, 0, 0);
  *((void *)this + 3) = v3;
  llvm::MCContext::getGOFFSection(*((void *)this + 108), ".bss", 4uLL, 15, 0, 0);
  *((void *)this + 5) = v4;
  uint64_t v5 = *((void *)this + 108);
  uint64_t v6 = *((void *)this + 3);
  unint64_t v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v5 + 184, 24, 3);
  *(unsigned char *)unint64_t v7 = 1;
  *(_DWORD *)(v7 + 1) = *(unsigned __int8 *)(v7 + 4) << 24;
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = 2;
  llvm::MCContext::getGOFFSection(v5, ".ppa1", 5uLL, 0, v6, v7);
  *((void *)this + 93) = v8;
}

unint64_t llvm::MCObjectFileInfo::initCOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  *((void *)this + 57) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".eh_frame", 9uLL, 1073741888, 19, (std::string::size_type)&str_24, 0, 0, -1, 0);
  int v4 = *((_DWORD *)a2 + 6);
  *((void *)this + 5) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".bss", 4uLL, -1073741696, 15, (std::string::size_type)&str_24, 0, 0, -1, 0);
  if (v4 == 35) {
    int v5 = 1610743840;
  }
  else {
    int v5 = 1610612768;
  }
  *((void *)this + 3) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".text", 5uLL, v5, 2, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 4) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".data", 5uLL, -1073741760, 19, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 6) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".rdata", 6uLL, 1073741888, 4, (std::string::size_type)&str_24, 0, 0, -1, 0);
  unsigned int v6 = *((_DWORD *)a2 + 6);
  if (v6 > 0x26 || (unint64_t COFFSection = 0, ((1 << v6) & 0x480000000ALL) == 0)) {
    unint64_t COFFSection = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".gcc_except_table", 0x11uLL, 1073741888, 4, (std::string::size_type)&str_24, 0, 0, -1, 0);
  }
  *((void *)this + 7) = COFFSection;
  *((void *)this + 48) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug$S", 8uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 49) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug$T", 8uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 50) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug$H", 8uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 9) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_abbrev", 0xDuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_abbrev");
  *((void *)this + 10) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_info", 0xBuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_info");
  *((void *)this + 11) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_line", 0xBuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_line");
  *((void *)this + 12) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_line_str", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_line_str");
  *((void *)this + 13) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_frame", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 22) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_pubnames", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 14) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_pubtypes", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 45) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_gnu_pubnames", 0x13uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 46) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_gnu_pubtypes", 0x13uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 16) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_str", 0xAuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "info_string");
  *((void *)this + 37) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_str_offsets", 0x12uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_str_off");
  *((void *)this + 17) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_loc", 0xAuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_debug_loc");
  *((void *)this + 40) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_loclists", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_debug_loclists");
  *((void *)this + 18) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_aranges", 0xEuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 19) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_ranges", 0xDuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "debug_range");
  *((void *)this + 39) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_rnglists", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "debug_rnglists");
  *((void *)this + 20) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_macinfo", 0xEuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "debug_macinfo");
  *((void *)this + 21) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_macro", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "debug_macro");
  *((void *)this + 35) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_macinfo.dwo", 0x12uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "debug_macinfo.dwo");
  *((void *)this + 36) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_macro.dwo", 0x10uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "debug_macro.dwo");
  *((void *)this + 28) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_info.dwo", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_info_dwo");
  *((void *)this + 29) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_types.dwo", 0x10uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_types_dwo");
  *((void *)this + 30) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_abbrev.dwo", 0x11uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_abbrev_dwo");
  *((void *)this + 31) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_str.dwo", 0xEuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "skel_string");
  *((void *)this + 32) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_line.dwo", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 33) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_loc.dwo", 0xEuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "skel_loc");
  *((void *)this + 34) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_str_offsets.dwo", 0x16uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "section_str_off_dwo");
  *((void *)this + 38) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_addr", 0xBuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "addr_sec");
  *((void *)this + 43) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_cu_index", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 44) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_tu_index", 0xFuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 23) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".debug_names", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "debug_names_begin");
  *((void *)this + 24) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".apple_names", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "names_begin");
  *((void *)this + 26) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".apple_namespaces", 0x11uLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "namespac_begin");
  *((void *)this + 27) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".apple_types", 0xCuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "types_begin");
  *((void *)this + 25) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".apple_objc", 0xBuLL, 1107296320, 0, (std::string::size_type)&str_24, 0, 0, -1, "objc_begin");
  *((void *)this + 85) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".drectve", 8uLL, 2560, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 86) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".pdata", 6uLL, 1073741888, 19, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 87) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".xdata", 6uLL, 1073741888, 19, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 88) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".sxdata", 7uLL, 512, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 89) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".gehcont$y", 0xAuLL, 1073741888, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 90) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".gfids$y", 8uLL, 1073741888, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 91) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".giats$y", 8uLL, 1073741888, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 92) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".gljmp$y", 8uLL, 1073741888, 0, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 52) = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".tls$", 5uLL, -1073741760, 19, (std::string::size_type)&str_24, 0, 0, -1, 0);
  unint64_t result = llvm::MCContext::getCOFFSection(*((llvm::MCContext **)this + 108), ".llvm_stackmaps", 0xFuLL, 1073741888, 4, (std::string::size_type)&str_24, 0, 0, -1, 0);
  *((void *)this + 54) = result;
  return result;
}

uint64_t llvm::MCObjectFileInfo::initWasmMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  uint64_t v3 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".text";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 3) = llvm::MCContext::getWasmSection(v3, (llvm::Twine *)v42, 2, 0, (llvm::Twine *)v44, -1);
  int v4 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".data";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 4) = llvm::MCContext::getWasmSection(v4, (llvm::Twine *)v42, 19, 0, (llvm::Twine *)v44, -1);
  int v5 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_line";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 11) = llvm::MCContext::getWasmSection(v5, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  unsigned int v6 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_line_str";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 12) = llvm::MCContext::getWasmSection(v6, (llvm::Twine *)v42, 0, 1, (llvm::Twine *)v44, -1);
  unint64_t v7 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_str";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 16) = llvm::MCContext::getWasmSection(v7, (llvm::Twine *)v42, 0, 1, (llvm::Twine *)v44, -1);
  uint64_t v8 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_loc";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 17) = llvm::MCContext::getWasmSection(v8, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v9 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_abbrev";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 9) = llvm::MCContext::getWasmSection(v9, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v10 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_aranges";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 18) = llvm::MCContext::getWasmSection(v10, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v11 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_ranges";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 19) = llvm::MCContext::getWasmSection(v11, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v12 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_macinfo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 20) = llvm::MCContext::getWasmSection(v12, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v13 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_macro";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 21) = llvm::MCContext::getWasmSection(v13, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  unint64_t v14 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_cu_index";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 43) = llvm::MCContext::getWasmSection(v14, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  unsigned int v15 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_tu_index";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 44) = llvm::MCContext::getWasmSection(v15, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v16 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_info";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 10) = llvm::MCContext::getWasmSection(v16, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v17 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_frame";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 13) = llvm::MCContext::getWasmSection(v17, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v18 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_pubnames";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 22) = llvm::MCContext::getWasmSection(v18, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v19 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_pubtypes";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 14) = llvm::MCContext::getWasmSection(v19, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  __int16 v20 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_gnu_pubnames";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 45) = llvm::MCContext::getWasmSection(v20, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v21 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_gnu_pubtypes";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 46) = llvm::MCContext::getWasmSection(v21, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  size_t v22 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_names";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 23) = llvm::MCContext::getWasmSection(v22, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  long long v23 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_str_offsets";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 37) = llvm::MCContext::getWasmSection(v23, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v24 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_addr";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 38) = llvm::MCContext::getWasmSection(v24, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v25 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_rnglists";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 39) = llvm::MCContext::getWasmSection(v25, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v26 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_loclists";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 40) = llvm::MCContext::getWasmSection(v26, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v27 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_info.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 28) = llvm::MCContext::getWasmSection(v27, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  size_t v28 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_types.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 29) = llvm::MCContext::getWasmSection(v28, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v29 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_abbrev.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 30) = llvm::MCContext::getWasmSection(v29, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v30 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_str.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 31) = llvm::MCContext::getWasmSection(v30, (llvm::Twine *)v42, 0, 1, (llvm::Twine *)v44, -1);
  size_t v31 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_line.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 32) = llvm::MCContext::getWasmSection(v31, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v32 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_loc.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 33) = llvm::MCContext::getWasmSection(v32, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v33 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_str_offsets.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 34) = llvm::MCContext::getWasmSection(v33, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  size_t v34 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_rnglists.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 41) = llvm::MCContext::getWasmSection(v34, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v35 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_macinfo.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 35) = llvm::MCContext::getWasmSection(v35, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v36 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_macro.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 36) = llvm::MCContext::getWasmSection(v36, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  size_t v37 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_loclists.dwo";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 42) = llvm::MCContext::getWasmSection(v37, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  int v38 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_cu_index";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 43) = llvm::MCContext::getWasmSection(v38, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  uint64_t v39 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".debug_tu_index";
  __int16 v43 = 259;
  __int16 v45 = 257;
  *((void *)this + 44) = llvm::MCContext::getWasmSection(v39, (llvm::Twine *)v42, 0, 0, (llvm::Twine *)v44, -1);
  size_t v40 = (llvm::MCContext *)*((void *)this + 108);
  v42[0] = ".rodata.gcc_except_table";
  __int16 v43 = 259;
  __int16 v45 = 257;
  uint64_t result = llvm::MCContext::getWasmSection(v40, (llvm::Twine *)v42, 20, 0, (llvm::Twine *)v44, -1);
  *((void *)this + 7) = result;
  return result;
}

uint64_t llvm::MCObjectFileInfo::initXCOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  *((void *)this + 3) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".text", 5uLL, 2, 256, 1, 0, 0);
  *((void *)this + 4) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".data", 5uLL, 19, 261, 1, 0, 0);
  Xunint64_t COFFSection = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".rodata", 7uLL, 4, 257, 1, 0, 0);
  *((void *)this + 6) = XCOFFSection;
  *(unsigned char *)(XCOFFSection + 24) = 2;
  uint64_t v4 = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".rodata.8", 9uLL, 4, 257, 1, 0, 0);
  *((void *)this + 95) = v4;
  *(unsigned char *)(v4 + 24) = 3;
  uint64_t v5 = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".rodata.16", 0xAuLL, 4, 257, 1, 0, 0);
  *((void *)this + 96) = v5;
  *(unsigned char *)(v5 + 24) = 4;
  *((void *)this + 52) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".tdata", 6uLL, 13, 276, 1, 0, 0);
  uint64_t v6 = llvm::MCContext::getXCOFFSection(*((void *)this + 108), "TOC", 3uLL, 19, 271, 0, 0, 0);
  *((void *)this + 94) = v6;
  *(unsigned char *)(v6 + 24) = 2;
  *((void *)this + 7) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".gcc_except_table", 0x11uLL, 4, 257, 0, 0, 0);
  *((void *)this + 8) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".eh_info_table", 0xEuLL, 19, 261, 0, 0, 0);
  *((void *)this + 9) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwabrev", 8uLL, 0, 0, 1, ".dwabrev", 0x100060000);
  *((void *)this + 10) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwinfo", 7uLL, 0, 0, 1, ".dwinfo", 0x100010000);
  *((void *)this + 11) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwline", 7uLL, 0, 0, 1, ".dwline", 0x100020000);
  *((void *)this + 13) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwframe", 8uLL, 0, 0, 1, ".dwframe", 0x1000A0000);
  *((void *)this + 22) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwpbnms", 8uLL, 0, 0, 1, ".dwpbnms", 0x100030000);
  *((void *)this + 14) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwpbtyp", 8uLL, 0, 0, 1, ".dwpbtyp", 0x100040000);
  *((void *)this + 16) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwstr", 6uLL, 0, 0, 1, ".dwstr", 0x100070000);
  *((void *)this + 17) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwloc", 6uLL, 0, 0, 1, ".dwloc", 0x100090000);
  *((void *)this + 18) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwarnge", 8uLL, 0, 0, 1, ".dwarnge", 0x100050000);
  *((void *)this + 19) = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwrnges", 8uLL, 0, 0, 1, ".dwrnges", 0x100080000);
  uint64_t result = llvm::MCContext::getXCOFFSection(*((void *)this + 108), ".dwmac", 6uLL, 0, 0, 1, ".dwmac", 0x1000B0000);
  *((void *)this + 20) = result;
  return result;
}

void llvm::MCObjectFileInfo::~MCObjectFileInfo(void **this)
{
  *this = &unk_270DC1FD8;
  if (*((unsigned char *)this + 936))
  {
    if (*((char *)this + 911) < 0) {
      operator delete(this[111]);
    }
  }
}

{
  uint64_t vars8;

  llvm::MCObjectFileInfo::~MCObjectFileInfo(this);
  JUMPOUT(0x263E500B0);
}

void llvm::MCObjectFileInfo::initMCObjectFileInfo(llvm::MCObjectFileInfo *this, llvm::MCContext *a2, char a3, int a4)
{
  *((unsigned char *)this + 856) = a3;
  *((void *)this + 108) = a2;
  *((_WORD *)this + 4) = 1;
  *((unsigned char *)this + 10) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 57) = 0;
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
    unint64_t v7 = (llvm::MCContext *)*((void *)this + 108);
  }
  else
  {
    std::string __p = *(std::string *)((unsigned char *)a2 + 1);
    unint64_t v7 = a2;
  }
  long long v9 = *((_OWORD *)a2 + 3);
  uint64_t v10 = *((void *)a2 + 8);
  switch(*(_DWORD *)v7)
  {
    case 0:
      llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(this, (const llvm::Triple *)&__p);
      break;
    case 1:
      llvm::MCObjectFileInfo::initELFMCObjectFileInfo(this, (const llvm::Triple *)&__p, a4);
      break;
    case 2:
      llvm::MCObjectFileInfo::initGOFFMCObjectFileInfo(this, a2);
      break;
    case 3:
      llvm::MCObjectFileInfo::initCOFFMCObjectFileInfo(this, (const llvm::Triple *)&__p);
      break;
    case 4:
      llvm::MCContext::getSPIRVSection(v7);
    case 5:
      llvm::MCObjectFileInfo::initWasmMCObjectFileInfo(this, a2);
      break;
    case 6:
      llvm::MCObjectFileInfo::initXCOFFMCObjectFileInfo(this, a2);
      break;
    case 7:
      *((void *)this + 3) = llvm::MCContext::getDXContainerSection((uint64_t)v7, (uint64_t *)"DXBC", 4uLL, 2);
      break;
    default:
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::MCObjectFileInfo::getTextSectionAlignment(llvm::MCObjectFileInfo *this)
{
  return 4;
}

uint64_t llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(_WORD *)(a3 + 1)) {
    return 0;
  }
  if (*(_WORD *)(a4 + 1)) {
    return 0;
  }
  long long v9 = *(llvm::MCSymbol **)(a3 + 16);
  uint64_t v10 = *(llvm::MCSymbol **)(a4 + 16);
  if (!llvm::MCSymbol::getFragment(v9, 1)
    || !llvm::MCSymbol::getFragment(v10, 1)
    || !llvm::MCSymbol::getFragment(v9, 1)
    || !llvm::MCSymbol::getFragment(v10, 1))
  {
    return 0;
  }
  int v11 = *(uint64_t (**)(uint64_t, uint64_t, llvm::MCSymbol *, llvm::MCSymbol *, uint64_t))(*(void *)a1 + 40);
  return v11(a1, a2, v9, v10, a5);
}

void llvm::MCPseudoProbeInlineTree::addPseudoProbe()
{
}

void llvm::MCPseudoProbeInlineTreeBase<llvm::MCPseudoProbe,llvm::MCPseudoProbeInlineTree>::getOrAddNode()
{
}

uint64_t llvm::MCRegisterInfo::getDwarfRegNum(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = 128;
  if (a3) {
    uint64_t v3 = 136;
  }
  uint64_t v4 = *(_DWORD **)(a1 + v3);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = 112;
  if (a3) {
    uint64_t v5 = 116;
  }
  unint64_t v6 = *(unsigned int *)(a1 + v5);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v7 = &v4[2 * v6];
  do
  {
    unint64_t v8 = v6 >> 1;
    long long v9 = &v4[2 * (v6 >> 1)];
    unsigned int v11 = *v9;
    uint64_t v10 = v9 + 2;
    v6 += ~(v6 >> 1);
    if (v11 < a2) {
      uint64_t v4 = v10;
    }
    else {
      unint64_t v6 = v8;
    }
  }
  while (v6);
  if (v4 != v7 && *v4 == a2) {
    return v4[1];
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>,unsigned int,unsigned int,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,unsigned int>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a2, &v4))return v4; {
  else
  }
    return *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
}

double llvm::MCSection::MCSection(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(void *)a1 = &unk_270DC2000;
  *(void *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 44) &= 0xF8u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = -1;
  *(void *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 15;
  *(unsigned char *)(a1 + 98) = 0;
  *(void *)(a1 + 104) = a1 + 104;
  *(void *)(a1 + 112) = a1 + 104;
  *(void *)(a1 + 120) = a1 + 136;
  *(void *)(a1 + 128) = 0x100000000;
  *(void *)(a1 + 152) = a1 + 168;
  *(void *)&double result = 0x200000000;
  *(void *)(a1 + 160) = 0x200000000;
  *(void *)(a1 + 200) = a3;
  *(void *)(a1 + 208) = a4;
  *(_DWORD *)(a1 + 216) = a2;
  *(_DWORD *)(a1 + 220) = a5;
  return result;
}

void llvm::MCSection::~MCSection(llvm::MCSection *this)
{
  *(void *)this = &unk_270DC2000;
  unint64_t v2 = (char *)*((void *)this + 19);
  if (v2 != (char *)this + 168) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 15);
  if (v3 != (char *)this + 136) {
    free(v3);
  }
  llvm::iplist_impl<llvm::simple_ilist<llvm::MCFragment>,llvm::ilist_traits<llvm::MCFragment>>::clear((uint64_t *)this + 13);
}

const char *llvm::MCSection::getVirtualSectionKind(llvm::MCSection *this)
{
  return "virtual";
}

uint64_t *llvm::iplist_impl<llvm::simple_ilist<llvm::MCFragment>,llvm::ilist_traits<llvm::MCFragment>>::clear(uint64_t *a1)
{
  double result = (uint64_t *)a1[1];
  if (result != a1)
  {
    do
    {
      uint64_t v3 = *result;
      uint64_t v4 = (uint64_t *)result[1];
      uint64_t *v4 = *result;
      *(void *)(v3 + 8) = v4;
      *double result = 0;
      result[1] = 0;
      llvm::MCFragment::destroy((uint64_t)result);
      double result = v4;
    }
    while (v4 != a1);
  }
  return result;
}

llvm::raw_ostream *llvm::MCSectionCOFF::printSwitchToSection(uint64_t a1, unsigned char *a2, int a3, llvm::raw_ostream *this)
{
  if (*(void *)(a1 + 232)) {
    goto LABEL_2;
  }
  unsigned int v11 = *(int **)(a1 + 200);
  uint64_t v12 = *(void *)(a1 + 208);
  if (v12 == 4)
  {
    if (*v11 != 1936941614) {
      goto LABEL_2;
    }
  }
  else if (v12 != 5 {
         || (*v11 == 2019914798 ? (BOOL v13 = *((unsigned char *)v11 + 4) == 116) : (BOOL v13 = 0),
  }
             !v13
          && ((v14 = *v11, int v15 = *((unsigned __int8 *)v11 + 4), v14 == 1952539694) ? (v16 = v15 == 97) : (v16 = 0), !v16)))
  {
LABEL_2:
    uint64_t v7 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v7) > 9)
    {
      *(_WORD *)(v7 + 8) = 2414;
      *(void *)uint64_t v7 = *(void *)"\t.section\t";
      *((void *)this + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(this, "\t.section\t", 0xAuLL);
    }
    double result = llvm::raw_ostream::operator<<(this, *(const void **)(a1 + 200), *(void *)(a1 + 208));
    long long v9 = (_WORD *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v9 > 1uLL)
    {
      _WORD *v9 = 8748;
      *((void *)result + 4) += 2;
    }
    else
    {
      double result = llvm::raw_ostream::write(result, ",\"", 2uLL);
    }
    if ((*(unsigned char *)(a1 + 224) & 0x40) != 0)
    {
      uint64_t v10 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v10 >= *((void *)this + 3))
      {
        double result = llvm::raw_ostream::write(this, 100);
      }
      else
      {
        *((void *)this + 4) = v10 + 1;
        *uint64_t v10 = 100;
      }
    }
    if ((*(unsigned char *)(a1 + 224) & 0x80) != 0)
    {
      int v17 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v17 >= *((void *)this + 3))
      {
        double result = llvm::raw_ostream::write(this, 98);
      }
      else
      {
        *((void *)this + 4) = v17 + 1;
        unsigned char *v17 = 98;
      }
    }
    int v18 = *(_DWORD *)(a1 + 224);
    if ((v18 & 0x20000000) != 0)
    {
      uint64_t v19 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v19 >= *((void *)this + 3))
      {
        double result = llvm::raw_ostream::write(this, 120);
      }
      else
      {
        *((void *)this + 4) = v19 + 1;
        *uint64_t v19 = 120;
      }
      int v18 = *(_DWORD *)(a1 + 224);
    }
    if (v18 < 0)
    {
      __int16 v20 = (char *)*((void *)this + 4);
      if ((unint64_t)v20 < *((void *)this + 3))
      {
        *((void *)this + 4) = v20 + 1;
        char v22 = 119;
        goto LABEL_41;
      }
      long long v23 = this;
      char v24 = 119;
    }
    else
    {
      unint64_t v21 = *((void *)this + 3);
      __int16 v20 = (char *)*((void *)this + 4);
      if ((v18 & 0x40000000) != 0)
      {
        if ((unint64_t)v20 < v21)
        {
          *((void *)this + 4) = v20 + 1;
          char v22 = 114;
          goto LABEL_41;
        }
        long long v23 = this;
        char v24 = 114;
      }
      else
      {
        if ((unint64_t)v20 < v21)
        {
          *((void *)this + 4) = v20 + 1;
          char v22 = 121;
LABEL_41:
          *__int16 v20 = v22;
LABEL_46:
          if ((*(unsigned char *)(a1 + 225) & 8) != 0)
          {
            int v25 = (unsigned char *)*((void *)this + 4);
            if ((unint64_t)v25 >= *((void *)this + 3))
            {
              double result = llvm::raw_ostream::write(this, 110);
            }
            else
            {
              *((void *)this + 4) = v25 + 1;
              *int v25 = 110;
            }
          }
          if ((*(unsigned char *)(a1 + 227) & 0x10) != 0)
          {
            uint64_t v26 = (unsigned char *)*((void *)this + 4);
            if ((unint64_t)v26 >= *((void *)this + 3))
            {
              double result = llvm::raw_ostream::write(this, 115);
            }
            else
            {
              *((void *)this + 4) = v26 + 1;
              *uint64_t v26 = 115;
            }
          }
          if ((*(unsigned char *)(a1 + 227) & 2) != 0)
          {
            if (*(void *)(a1 + 208) < 6uLL
              || ((v27 = *(int **)(a1 + 200), int v28 = *v27, v29 = *((unsigned __int16 *)v27 + 2), v28 == 1650811950)
                ? (BOOL v30 = v29 == 26485)
                : (BOOL v30 = 0),
                  !v30))
            {
              size_t v31 = (unsigned char *)*((void *)this + 4);
              if ((unint64_t)v31 >= *((void *)this + 3))
              {
                double result = llvm::raw_ostream::write(this, 68);
              }
              else
              {
                *((void *)this + 4) = v31 + 1;
                *size_t v31 = 68;
              }
            }
          }
          if ((*(unsigned char *)(a1 + 225) & 2) != 0)
          {
            uint64_t v32 = (unsigned char *)*((void *)this + 4);
            if ((unint64_t)v32 >= *((void *)this + 3))
            {
              double result = llvm::raw_ostream::write(this, 105);
            }
            else
            {
              *((void *)this + 4) = v32 + 1;
              unsigned char *v32 = 105;
            }
          }
          uint64_t v33 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v33 >= *((void *)this + 3))
          {
            double result = llvm::raw_ostream::write(this, 34);
          }
          else
          {
            *((void *)this + 4) = v33 + 1;
            *uint64_t v33 = 34;
          }
          if ((*(unsigned char *)(a1 + 225) & 0x10) != 0)
          {
            uint64_t v34 = *(void *)(a1 + 232);
            if (v34) {
              int v35 = ",";
            }
            else {
              int v35 = "\n\t.linkonce\t";
            }
            if (v34) {
              size_t v36 = 1;
            }
            else {
              size_t v36 = 12;
            }
            double result = llvm::raw_ostream::operator<<(this, v35, v36);
            size_t v37 = "one_only";
            size_t v38 = 8;
            switch(*(_DWORD *)(a1 + 240))
            {
              case 1:
                goto LABEL_91;
              case 2:
                size_t v37 = "discard";
                goto LABEL_86;
              case 3:
                size_t v37 = "same_size";
                size_t v38 = 9;
                goto LABEL_91;
              case 4:
                size_t v37 = "same_contents";
                size_t v38 = 13;
                goto LABEL_91;
              case 5:
                size_t v37 = "associative";
                size_t v38 = 11;
                goto LABEL_91;
              case 6:
                size_t v37 = "largest";
LABEL_86:
                size_t v38 = 7;
                goto LABEL_91;
              case 7:
                size_t v37 = "newest";
                size_t v38 = 6;
LABEL_91:
                double result = llvm::raw_ostream::operator<<(this, v37, v38);
                break;
              default:
                break;
            }
            if (*(void *)(a1 + 232))
            {
              uint64_t v41 = (unsigned char *)*((void *)this + 4);
              if (*((unsigned char **)this + 3) == v41)
              {
                llvm::raw_ostream::write(this, ",", 1uLL);
              }
              else
              {
                *uint64_t v41 = 44;
                ++*((void *)this + 4);
              }
              double result = llvm::MCSymbol::print(*(unsigned char **)(a1 + 232), this, a2);
            }
          }
          size_t v40 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v40 < *((void *)this + 3))
          {
            *((void *)this + 4) = v40 + 1;
            goto LABEL_99;
          }
          double result = this;
          goto LABEL_101;
        }
        long long v23 = this;
        char v24 = 121;
      }
    }
    double result = llvm::raw_ostream::write(v23, v24);
    goto LABEL_46;
  }
  uint64_t v39 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v39 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 9);
  }
  else
  {
    *((void *)this + 4) = v39 + 1;
    *uint64_t v39 = 9;
  }
  double result = llvm::raw_ostream::operator<<(this, *(const void **)(a1 + 200), *(void *)(a1 + 208));
  size_t v40 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v40 < *((void *)result + 3))
  {
    *((void *)result + 4) = v40 + 1;
LABEL_99:
    *size_t v40 = 10;
    return result;
  }
LABEL_101:
  return llvm::raw_ostream::write(result, 10);
}

BOOL llvm::MCSectionCOFF::useCodeAlign(llvm::MCSectionCOFF *this)
{
  return (*((_DWORD *)this + 55) & 0xFE) == 2;
}

uint64_t llvm::MCSectionCOFF::isVirtualSection(llvm::MCSectionCOFF *this)
{
  return *((unsigned __int8 *)this + 224) >> 7;
}

const char *llvm::MCSectionCOFF::getVirtualSectionKind(llvm::MCSectionCOFF *this)
{
  return "IMAGE_SCN_CNT_UNINITIALIZED_DATA";
}

uint64_t llvm::MCSectionDXContainer::useCodeAlign(llvm::MCSectionDXContainer *this)
{
  return 0;
}

uint64_t llvm::MCSectionDXContainer::isVirtualSection(llvm::MCSectionDXContainer *this)
{
  return 0;
}

void llvm::MCSectionELF::printSwitchToSection(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *this, unsigned __int8 *a5)
{
  if (*(_DWORD *)(a1 + 232) == -1
    && (*(unsigned int (**)(uint64_t, void, void))(*(void *)a2 + 64))(a2, *(void *)(a1 + 200), *(void *)(a1 + 208)))
  {
    uint64_t v10 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v10 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 9);
    }
    else
    {
      *((void *)this + 4) = v10 + 1;
      *uint64_t v10 = 9;
    }
    llvm::raw_ostream::operator<<(this, *(const void **)(a1 + 200), *(void *)(a1 + 208));
    if (!a5) {
      goto LABEL_189;
    }
    uint64_t v27 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v27 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 9);
    }
    else
    {
      *((void *)this + 4) = v27 + 1;
      *uint64_t v27 = 9;
    }
LABEL_188:
    llvm::MCExpr::print(a5, this, (unsigned char *)a2, 0);
LABEL_189:
    unint64_t v13 = *((void *)this + 4);
    goto LABEL_190;
  }
  uint64_t v11 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v11) > 9)
  {
    *(_WORD *)(v11 + 8) = 2414;
    *(void *)uint64_t v11 = *(void *)"\t.section\t";
    *((void *)this + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(this, "\t.section\t", 0xAuLL);
  }
  printName(this, *(unsigned __int8 **)(a1 + 200), *(void *)(a1 + 208));
  if (!*(unsigned char *)(a2 + 336) || (int v12 = *(_DWORD *)(a1 + 228), (v12 & 0x10) != 0))
  {
    int v14 = (_WORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v14 > 1uLL)
    {
      *int v14 = 8748;
      *((void *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, ",\"", 2uLL);
    }
    int v15 = *(_DWORD *)(a1 + 228);
    if ((v15 & 2) != 0)
    {
      BOOL v16 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v16 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 97);
      }
      else
      {
        *((void *)this + 4) = v16 + 1;
        *BOOL v16 = 97;
      }
      int v15 = *(_DWORD *)(a1 + 228);
    }
    if (v15 < 0)
    {
      int v17 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v17 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 101);
      }
      else
      {
        *((void *)this + 4) = v17 + 1;
        unsigned char *v17 = 101;
      }
    }
    if ((*(unsigned char *)(a1 + 228) & 4) != 0)
    {
      int v18 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v18 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 120);
      }
      else
      {
        *((void *)this + 4) = v18 + 1;
        *int v18 = 120;
      }
    }
    if ((*(unsigned char *)(a1 + 229) & 2) != 0)
    {
      uint64_t v19 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v19 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 71);
      }
      else
      {
        *((void *)this + 4) = v19 + 1;
        *uint64_t v19 = 71;
      }
    }
    if (*(unsigned char *)(a1 + 228))
    {
      __int16 v20 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v20 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 119);
      }
      else
      {
        *((void *)this + 4) = v20 + 1;
        *__int16 v20 = 119;
      }
    }
    if ((*(unsigned char *)(a1 + 228) & 0x10) != 0)
    {
      unint64_t v21 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v21 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 77);
      }
      else
      {
        *((void *)this + 4) = v21 + 1;
        *unint64_t v21 = 77;
      }
    }
    if ((*(unsigned char *)(a1 + 228) & 0x20) != 0)
    {
      char v22 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v22 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 83);
      }
      else
      {
        *((void *)this + 4) = v22 + 1;
        *char v22 = 83;
      }
    }
    if ((*(unsigned char *)(a1 + 229) & 4) != 0)
    {
      long long v23 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v23 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 84);
      }
      else
      {
        *((void *)this + 4) = v23 + 1;
        *long long v23 = 84;
      }
    }
    if ((*(unsigned char *)(a1 + 228) & 0x80) != 0)
    {
      char v24 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v24 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 111);
      }
      else
      {
        *((void *)this + 4) = v24 + 1;
        *char v24 = 111;
      }
    }
    if ((*(unsigned char *)(a1 + 230) & 0x20) != 0)
    {
      int v25 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v25 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 82);
      }
      else
      {
        *((void *)this + 4) = v25 + 1;
        *int v25 = 82;
      }
    }
    if (*(_DWORD *)(a3 + 36) == 14 && (*(unsigned char *)(a1 + 230) & 0x10) != 0)
    {
      uint64_t v26 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v26 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 82);
      }
      else
      {
        *((void *)this + 4) = v26 + 1;
        *uint64_t v26 = 82;
      }
    }
    uint64_t v28 = *(unsigned int *)(a3 + 24);
    if (v28 <= 0x27)
    {
      if (((1 << v28) & 0x1800000006) != 0)
      {
        if ((*(unsigned char *)(a1 + 231) & 0x20) == 0) {
          goto LABEL_107;
        }
        int v29 = (char *)*((void *)this + 4);
        if ((unint64_t)v29 < *((void *)this + 3))
        {
          *((void *)this + 4) = v29 + 1;
          char v30 = 121;
LABEL_76:
          char *v29 = v30;
          goto LABEL_107;
        }
        uint64_t v32 = this;
        char v33 = 121;
        goto LABEL_83;
      }
      if (v28 == 12)
      {
        if ((*(unsigned char *)(a1 + 231) & 0x10) != 0)
        {
          int v29 = (char *)*((void *)this + 4);
          if ((unint64_t)v29 < *((void *)this + 3))
          {
            *((void *)this + 4) = v29 + 1;
            char v30 = 115;
            goto LABEL_76;
          }
          uint64_t v32 = this;
          char v33 = 115;
          goto LABEL_83;
        }
      }
      else if (v28 == 39)
      {
        if ((*(unsigned char *)(a1 + 231) & 0x20) != 0)
        {
          size_t v31 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v31 >= *((void *)this + 3))
          {
            llvm::raw_ostream::write(this, 99);
          }
          else
          {
            *((void *)this + 4) = v31 + 1;
            *size_t v31 = 99;
          }
        }
        if ((*(unsigned char *)(a1 + 231) & 0x10) != 0)
        {
          int v29 = (char *)*((void *)this + 4);
          if ((unint64_t)v29 < *((void *)this + 3))
          {
            *((void *)this + 4) = v29 + 1;
            char v30 = 100;
            goto LABEL_76;
          }
          uint64_t v32 = this;
          char v33 = 100;
LABEL_83:
          llvm::raw_ostream::write(v32, v33);
        }
      }
    }
LABEL_107:
    uint64_t v34 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v34 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 34);
    }
    else
    {
      *((void *)this + 4) = v34 + 1;
      *uint64_t v34 = 34;
    }
    int v35 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v35 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 44);
    }
    else
    {
      *((void *)this + 4) = v35 + 1;
      *int v35 = 44;
    }
    unint64_t v37 = *((void *)this + 3);
    size_t v36 = (char *)*((void *)this + 4);
    if (**(unsigned char **)(a2 + 48) == 64)
    {
      if ((unint64_t)v36 < v37)
      {
        *((void *)this + 4) = v36 + 1;
        char v38 = 37;
LABEL_118:
        *size_t v36 = v38;
LABEL_122:
        uint64_t v41 = *(unsigned int *)(a1 + 224);
        if ((int)v41 <= 1879002111)
        {
          uint64_t v42 = "init_array";
          size_t v43 = 10;
          switch((int)v41)
          {
            case 7:
              uint64_t v42 = "note";
              size_t v43 = 4;
              break;
            case 8:
              uint64_t v42 = "nobits";
              goto LABEL_147;
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
              goto LABEL_198;
            case 14:
              break;
            case 15:
              uint64_t v42 = "fini_array";
              goto LABEL_144;
            case 16:
              uint64_t v42 = "preinit_array";
              size_t v43 = 13;
              break;
            default:
              if (v41 != 1) {
                goto LABEL_198;
              }
              uint64_t v42 = "progbits";
              size_t v43 = 8;
              break;
          }
        }
        else
        {
          switch((int)v41)
          {
            case 1879002112:
              uint64_t v42 = "llvm_odrtab";
              size_t v43 = 11;
              break;
            case 1879002113:
              uint64_t v42 = "llvm_linker_options";
              goto LABEL_138;
            case 1879002114:
            case 1879002115:
            case 1879002118:
            case 1879002119:
              goto LABEL_198;
            case 1879002116:
              uint64_t v42 = "llvm_dependent_libraries";
              size_t v43 = 24;
              break;
            case 1879002117:
              uint64_t v42 = "llvm_sympart";
              size_t v43 = 12;
              break;
            case 1879002120:
              uint64_t v42 = "llvm_bb_addr_map_v0";
LABEL_138:
              size_t v43 = 19;
              break;
            case 1879002121:
              uint64_t v42 = "llvm_call_graph_profile";
              size_t v43 = 23;
              break;
            case 1879002122:
              uint64_t v42 = "llvm_bb_addr_map";
              size_t v43 = 16;
              break;
            case 1879002123:
              uint64_t v42 = "llvm_offloading";
              size_t v43 = 15;
              break;
            default:
              if (v41 == 1879048193)
              {
                uint64_t v42 = "unwind";
LABEL_147:
                size_t v43 = 6;
              }
              else
              {
                if (v41 != 1879048222)
                {
LABEL_198:
                  uint64_t v70 = "unsupported type 0x";
                  __int16 v71 = 259;
                  uint64_t v67 = v41;
                  v68[0] = (uint64_t)&v67;
                  v68[2] = 0;
                  __int16 v69 = 270;
                  llvm::operator+((uint64_t *)&v70, v68, (uint64_t)v72);
                  uint64_t v65 = " for section ";
                  __int16 v66 = 259;
                  llvm::operator+(v72, (uint64_t *)&v65, (uint64_t)v73);
                  uint64_t v61 = *(void *)(a1 + 200);
                  uint64_t v62 = *(void *)(a1 + 208);
                  __int16 v64 = 261;
                  v63[0] = v61;
                  v63[1] = v62;
                  llvm::operator+(v73, v63, (uint64_t)v74);
                  llvm::report_fatal_error((llvm *)v74, (const llvm::Twine *)1);
                }
                uint64_t v42 = "0x7000001e";
LABEL_144:
                size_t v43 = 10;
              }
              break;
          }
        }
        llvm::raw_ostream::operator<<(this, v42, v43);
        if (*(_DWORD *)(a1 + 236))
        {
          uint64_t v44 = (unsigned char *)*((void *)this + 4);
          if (*((unsigned char **)this + 3) == v44)
          {
            llvm::raw_ostream::write(this, ",", 1uLL);
          }
          else
          {
            unsigned char *v44 = 44;
            ++*((void *)this + 4);
          }
          write_unsigned<unsigned long>(this, *(unsigned int *)(a1 + 236), 0, 0, 0);
        }
        if ((*(unsigned char *)(a1 + 229) & 2) != 0)
        {
          __int16 v45 = (unsigned char *)*((void *)this + 4);
          if (*((unsigned char **)this + 3) == v45)
          {
            llvm::raw_ostream::write(this, ",", 1uLL);
          }
          else
          {
            *__int16 v45 = 44;
            ++*((void *)this + 4);
          }
          size_t v46 = (unsigned char *)(*(void *)(a1 + 240) & 0xFFFFFFFFFFFFFFF8);
          if ((*v46 & 4) != 0)
          {
            size_t v49 = (void *)*((void *)v46 - 1);
            int64_t v50 = *v49;
            BOOL v47 = (unsigned __int8 *)(v49 + 2);
            int64_t v48 = v50;
          }
          else
          {
            BOOL v47 = 0;
            int64_t v48 = 0;
          }
          printName(this, v47, v48);
          if ((*(unsigned char *)(a1 + 240) & 4) != 0)
          {
            int v51 = (_DWORD *)*((void *)this + 4);
            if (*((void *)this + 3) - (void)v51 > 6uLL)
            {
              *(_DWORD *)((char *)v51 + 3) = 1952539757;
              *int v51 = 1836016428;
              *((void *)this + 4) += 7;
            }
            else
            {
              llvm::raw_ostream::write(this, ",comdat", 7uLL);
            }
          }
        }
        if ((*(unsigned char *)(a1 + 228) & 0x80) != 0)
        {
          std::string v52 = (unsigned char *)*((void *)this + 4);
          if (*((unsigned char **)this + 3) == v52)
          {
            llvm::raw_ostream::write(this, ",", 1uLL);
          }
          else
          {
            *std::string v52 = 44;
            ++*((void *)this + 4);
          }
          uint64_t v53 = *(unsigned char **)(a1 + 248);
          if (v53)
          {
            if ((*v53 & 4) != 0)
            {
              int v57 = (void *)*((void *)v53 - 1);
              int64_t v58 = *v57;
              unint64_t v54 = (unsigned __int8 *)(v57 + 2);
              int64_t v55 = v58;
            }
            else
            {
              unint64_t v54 = 0;
              int64_t v55 = 0;
            }
            printName(this, v54, v55);
          }
          else
          {
            __int16 v56 = (unsigned char *)*((void *)this + 4);
            if ((unint64_t)v56 >= *((void *)this + 3))
            {
              llvm::raw_ostream::write(this, 48);
            }
            else
            {
              *((void *)this + 4) = v56 + 1;
              *__int16 v56 = 48;
            }
          }
        }
        uint64_t v59 = (void *)*((void *)this + 4);
        if (*(_DWORD *)(a1 + 232) != -1)
        {
          if (*((void *)this + 3) - (void)v59 > 7uLL)
          {
            *uint64_t v59 = 0x2C657571696E752CLL;
            *((void *)this + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(this, ",unique,", 8uLL);
          }
          write_unsigned<unsigned long>(this, *(unsigned int *)(a1 + 232), 0, 0, 0);
          uint64_t v59 = (void *)*((void *)this + 4);
        }
        if ((unint64_t)v59 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 10);
          if (!a5) {
            return;
          }
        }
        else
        {
          *((void *)this + 4) = (char *)v59 + 1;
          *(unsigned char *)uint64_t v59 = 10;
          if (!a5) {
            return;
          }
        }
        uint64_t v60 = (void *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v60 > 0xCuLL)
        {
          qmemcpy(v60, "\t.subsection\t", 13);
          *((void *)this + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(this, "\t.subsection\t", 0xDuLL);
        }
        goto LABEL_188;
      }
      uint64_t v39 = this;
      char v40 = 37;
    }
    else
    {
      if ((unint64_t)v36 < v37)
      {
        *((void *)this + 4) = v36 + 1;
        char v38 = 64;
        goto LABEL_118;
      }
      uint64_t v39 = this;
      char v40 = 64;
    }
    llvm::raw_ostream::write(v39, v40);
    goto LABEL_122;
  }
  unint64_t v13 = *((void *)this + 4);
  if ((v12 & 2) != 0)
  {
    if (*((void *)this + 3) - v13 > 6)
    {
      *(_DWORD *)(v13 + 3) = 1668246636;
      *(_DWORD *)unint64_t v13 = 1818305324;
      unint64_t v13 = *((void *)this + 4) + 7;
      *((void *)this + 4) = v13;
    }
    else
    {
      llvm::raw_ostream::write(this, ",#alloc", 7uLL);
      unint64_t v13 = *((void *)this + 4);
    }
    int v12 = *(_DWORD *)(a1 + 228);
    if ((v12 & 4) == 0)
    {
LABEL_12:
      if ((v12 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_93;
    }
  }
  else if ((v12 & 4) == 0)
  {
    goto LABEL_12;
  }
  if (*((void *)this + 3) - v13 > 0xA)
  {
    *(_DWORD *)(v13 + 7) = 1920234350;
    *(void *)unint64_t v13 = *(void *)",#execinstr";
    unint64_t v13 = *((void *)this + 4) + 11;
    *((void *)this + 4) = v13;
  }
  else
  {
    llvm::raw_ostream::write(this, ",#execinstr", 0xBuLL);
    unint64_t v13 = *((void *)this + 4);
  }
  int v12 = *(_DWORD *)(a1 + 228);
  if ((v12 & 1) == 0)
  {
LABEL_13:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_97:
    if (*((void *)this + 3) - v13 > 8)
    {
      *(unsigned char *)(v13 + 8) = 101;
      *(void *)unint64_t v13 = *(void *)",#exclude";
      unint64_t v13 = *((void *)this + 4) + 9;
      *((void *)this + 4) = v13;
    }
    else
    {
      llvm::raw_ostream::write(this, ",#exclude", 9uLL);
      unint64_t v13 = *((void *)this + 4);
    }
    if ((*(_DWORD *)(a1 + 228) & 0x400) == 0) {
      goto LABEL_190;
    }
    goto LABEL_102;
  }
LABEL_93:
  if (*((void *)this + 3) - v13 > 6)
  {
    *(_DWORD *)(v13 + 3) = 1702127986;
    *(_DWORD *)unint64_t v13 = 1920410412;
    unint64_t v13 = *((void *)this + 4) + 7;
    *((void *)this + 4) = v13;
  }
  else
  {
    llvm::raw_ostream::write(this, ",#write", 7uLL);
    unint64_t v13 = *((void *)this + 4);
  }
  int v12 = *(_DWORD *)(a1 + 228);
  if (v12 < 0) {
    goto LABEL_97;
  }
LABEL_14:
  if ((v12 & 0x400) != 0)
  {
LABEL_102:
    if (*((void *)this + 3) - v13 > 4)
    {
      *(unsigned char *)(v13 + 4) = 115;
      *(_DWORD *)unint64_t v13 = 1819550508;
      unint64_t v13 = *((void *)this + 4) + 5;
      *((void *)this + 4) = v13;
      goto LABEL_190;
    }
    llvm::raw_ostream::write(this, ",#tls", 5uLL);
    goto LABEL_189;
  }
LABEL_190:
  if (v13 >= *((void *)this + 3))
  {
    llvm::raw_ostream::write(this, 10);
  }
  else
  {
    *((void *)this + 4) = v13 + 1;
    *(unsigned char *)unint64_t v13 = 10;
  }
}

llvm::raw_ostream *printName(llvm::raw_ostream *a1, unsigned __int8 *a2, int64_t a3)
{
  uint64_t v4 = a2;
  v19[0] = a2;
  v19[1] = a3;
  double result = (llvm::raw_ostream *)llvm::StringRef::find_first_not_of(v19, "0123456789_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 64, 0);
  if (result == (llvm::raw_ostream *)-1)
  {
    return llvm::raw_ostream::operator<<(a1, v4, a3);
  }
  else
  {
    uint64_t v7 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v7 >= *((void *)a1 + 3))
    {
      double result = llvm::raw_ostream::write(a1, 34);
    }
    else
    {
      *((void *)a1 + 4) = v7 + 1;
      unsigned char *v7 = 34;
    }
    if (a3 >= 1)
    {
      unint64_t v8 = &v4[a3];
      do
      {
        int v9 = *v4;
        if (v9 == 92)
        {
          if (v4 + 1 != v8)
          {
            unint64_t v13 = (unsigned char *)*((void *)a1 + 4);
            if ((unint64_t)v13 >= *((void *)a1 + 3))
            {
              double result = llvm::raw_ostream::write(a1, 92);
            }
            else
            {
              *((void *)a1 + 4) = v13 + 1;
              *unint64_t v13 = 92;
            }
            char v16 = v4[1];
            int v17 = (char *)*((void *)a1 + 4);
            if ((unint64_t)v17 >= *((void *)a1 + 3))
            {
              double result = llvm::raw_ostream::write(a1, v16);
            }
            else
            {
              *((void *)a1 + 4) = v17 + 1;
              char *v17 = v16;
            }
            ++v4;
            goto LABEL_31;
          }
          int v15 = (_WORD *)*((void *)a1 + 4);
          if (*((void *)a1 + 3) - (void)v15 > 1uLL)
          {
            *int v15 = 23644;
            goto LABEL_30;
          }
          uint64_t v11 = a1;
          int v12 = "\\\\"";
        }
        else
        {
          if (v9 != 34)
          {
            int v14 = (unsigned char *)*((void *)a1 + 4);
            if ((unint64_t)v14 >= *((void *)a1 + 3))
            {
              double result = llvm::raw_ostream::write(a1, v9);
            }
            else
            {
              *((void *)a1 + 4) = v14 + 1;
              *int v14 = v9;
            }
            goto LABEL_31;
          }
          uint64_t v10 = (_WORD *)*((void *)a1 + 4);
          if (*((void *)a1 + 3) - (void)v10 > 1uLL)
          {
            *uint64_t v10 = 8796;
LABEL_30:
            *((void *)a1 + 4) += 2;
            goto LABEL_31;
          }
          uint64_t v11 = a1;
          int v12 = "\\\"";
        }
        double result = llvm::raw_ostream::write(v11, v12, 2uLL);
LABEL_31:
        ++v4;
      }
      while (v4 < v8);
    }
    int v18 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v18 >= *((void *)a1 + 3))
    {
      return llvm::raw_ostream::write(a1, 34);
    }
    else
    {
      *((void *)a1 + 4) = v18 + 1;
      *int v18 = 34;
    }
  }
  return result;
}

uint64_t llvm::MCSectionELF::useCodeAlign(llvm::MCSectionELF *this)
{
  return (*((unsigned __int8 *)this + 228) >> 2) & 1;
}

BOOL llvm::MCSectionELF::isVirtualSection(llvm::MCSectionELF *this)
{
  return *((_DWORD *)this + 56) == 8;
}

const char *llvm::MCSectionELF::getVirtualSectionKind(llvm::MCSectionELF *this)
{
  return "SHT_NOBITS";
}

void llvm::MCSectionMachO::MCSectionMachO(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9)
{
  llvm::MCSection::MCSection(a1, 3, a4, a5, a8, a9);
  unint64_t v14 = 0;
  *(void *)uint64_t v13 = &unk_270DC20C0;
  *(_DWORD *)(v13 + 240) = a6;
  *(_DWORD *)(v13 + 244) = a7;
  do
  {
    if (a3 <= v14) {
      char v15 = 0;
    }
    else {
      char v15 = *(unsigned char *)(a2 + v14);
    }
    *(unsigned char *)(v13 + v14++ + 224) = v15;
  }
  while (v14 != 16);
}

llvm::raw_ostream *llvm::MCSectionMachO::printSwitchToSection(uint64_t a1, int a2, int a3, llvm::raw_ostream *this)
{
  uint64_t v6 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v6) > 9)
  {
    *(_WORD *)(v6 + 8) = 2414;
    *(void *)uint64_t v6 = *(void *)"\t.section\t";
    *((void *)this + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(this, "\t.section\t", 0xAuLL);
  }
  if (*(unsigned char *)(a1 + 239)) {
    size_t v7 = 16;
  }
  else {
    size_t v7 = strlen((const char *)(a1 + 224));
  }
  unint64_t v8 = llvm::raw_ostream::operator<<(this, (const void *)(a1 + 224), v7);
  int v9 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v9 >= *((void *)v8 + 3))
  {
    unint64_t v8 = llvm::raw_ostream::write(v8, 44);
  }
  else
  {
    *((void *)v8 + 4) = v9 + 1;
    unsigned char *v9 = 44;
  }
  double result = llvm::raw_ostream::operator<<(v8, *(const void **)(a1 + 200), *(void *)(a1 + 208));
  int v11 = *(_DWORD *)(a1 + 240);
  if (!v11) {
    goto LABEL_41;
  }
  int v12 = &(&SectionTypeDescriptors)[4 * *(_DWORD *)(a1 + 240)];
  size_t v13 = (size_t)v12[1];
  unint64_t v15 = *((void *)this + 3);
  unint64_t v14 = (unsigned char *)*((void *)this + 4);
  BOOL v16 = (unint64_t)v14 >= v15;
  if (!v13) {
    goto LABEL_42;
  }
  if ((unint64_t)v14 >= v15)
  {
    llvm::raw_ostream::write(this, 44);
  }
  else
  {
    *((void *)this + 4) = v14 + 1;
    *unint64_t v14 = 44;
  }
  double result = llvm::raw_ostream::operator<<(this, *v12, v13);
  unsigned int v17 = v11 & 0xFFFFFF00;
  if ((v11 & 0xFFFFFF00) != 0)
  {
    uint64_t v18 = 0;
    char v19 = 44;
    do
    {
      if (v18 == 100) {
        break;
      }
      int v20 = SectionAttrDescriptors[v18];
      if ((v20 & v17) != 0)
      {
        unint64_t v21 = (char *)*((void *)this + 4);
        if ((unint64_t)v21 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, v19);
        }
        else
        {
          *((void *)this + 4) = v21 + 1;
          *unint64_t v21 = v19;
        }
        v17 &= ~v20;
        size_t v22 = *(void *)&SectionAttrDescriptors[v18 + 4];
        if (v22)
        {
          double result = llvm::raw_ostream::operator<<(this, *(const void **)&SectionAttrDescriptors[v18 + 2], v22);
        }
        else
        {
          long long v23 = (_WORD *)*((void *)this + 4);
          if (*((void *)this + 3) - (void)v23 > 1uLL)
          {
            *long long v23 = 15420;
            *((void *)this + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(this, "<<", 2uLL);
          }
          double result = llvm::raw_ostream::operator<<(this, *(const void **)&SectionAttrDescriptors[v18 + 6], *(void *)&SectionAttrDescriptors[v18 + 8]);
          char v24 = (_WORD *)*((void *)result + 4);
          if (*((void *)result + 3) - (void)v24 > 1uLL)
          {
            *char v24 = 15934;
            *((void *)result + 4) += 2;
          }
          else
          {
            double result = llvm::raw_ostream::write(result, ">>", 2uLL);
          }
        }
        char v19 = 43;
      }
      v18 += 10;
    }
    while (v17);
    if (!*(_DWORD *)(a1 + 244)) {
      goto LABEL_41;
    }
    int v25 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v25 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 44);
    }
    else
    {
      *((void *)this + 4) = v25 + 1;
      *int v25 = 44;
    }
    goto LABEL_40;
  }
  if (*(_DWORD *)(a1 + 244))
  {
    uint64_t v26 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v26) > 5)
    {
      *(_WORD *)(v26 + 4) = 11365;
      *(_DWORD *)uint64_t v26 = 1852796460;
      *((void *)this + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(this, ",none,", 6uLL);
    }
LABEL_40:
    double result = write_unsigned<unsigned long>(this, *(unsigned int *)(a1 + 244), 0, 0, 0);
  }
LABEL_41:
  unint64_t v14 = (unsigned char *)*((void *)this + 4);
  BOOL v16 = (unint64_t)v14 >= *((void *)this + 3);
LABEL_42:
  if (v16)
  {
    return llvm::raw_ostream::write(this, 10);
  }
  else
  {
    *((void *)this + 4) = v14 + 1;
    *unint64_t v14 = 10;
  }
  return result;
}

uint64_t llvm::MCSectionMachO::useCodeAlign(llvm::MCSectionMachO *this)
{
  return *((_DWORD *)this + 60) >> 31;
}

uint64_t llvm::MCSectionMachO::isVirtualSection(llvm::MCSectionMachO *this)
{
  return (*((unsigned __int8 *)this + 240) < 0x13u) & (0x41002u >> *((unsigned char *)this + 240));
}

void llvm::MCSectionMachO::ParseSectionSpecifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int *a5@<X4>, unsigned char *a6@<X5>, _DWORD *a7@<X6>, void *a8@<X8>)
{
  v55[10] = *MEMORY[0x263EF8340];
  v47[0] = a1;
  v47[1] = a2;
  *a6 = 0;
  uint64_t v53 = v55;
  uint64_t v54 = 0x500000000;
  llvm::StringRef::split((unsigned int *)v47, (unsigned int *)&v53, 44, -1, 1);
  if (!v54)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_8;
  }
  uint64_t v14 = llvm::StringRef::trim((uint64_t *)v53, " \t\n\v\f\r", 6);
  unsigned int v15 = v54;
  *a3 = v14;
  a3[1] = v16;
  if (v15 <= 1)
  {
LABEL_8:
    a4[1] = 0;
    int v20 = a4 + 1;
    *a4 = 0;
    goto LABEL_9;
  }
  uint64_t v17 = llvm::StringRef::trim((uint64_t *)v53 + 2, " \t\n\v\f\r", 6);
  unsigned int v18 = v54;
  *a4 = v17;
  a4[1] = v19;
  int v20 = a4 + 1;
  if (v18 <= 2)
  {
LABEL_9:
    unint64_t v21 = 0;
    long long v23 = 0;
    goto LABEL_10;
  }
  unint64_t v21 = (const void *)llvm::StringRef::trim((uint64_t *)v53 + 4, " \t\n\v\f\r", 6);
  long long v23 = v22;
  if (v54 <= 3)
  {
LABEL_10:
    uint64_t v26 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    goto LABEL_11;
  }
  uint64_t v24 = llvm::StringRef::trim((uint64_t *)v53 + 6, " \t\n\v\f\r", 6);
  uint64_t v26 = v25;
  uint64_t v45 = v24;
  uint64_t v46 = v25;
  if (v54 < 5)
  {
    uint64_t v29 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = llvm::StringRef::trim((uint64_t *)v53 + 8, " \t\n\v\f\r", 6);
    uint64_t v29 = v28;
  }
LABEL_11:
  *(void *)&long long v44 = v27;
  *((void *)&v44 + 1) = v29;
  if (!*v20)
  {
    getErrorErrorCat();
    int64_t v50 = (void *)3;
    uint64_t v51 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    char v30 = "mach-o section specifier requires a segment and section separated by a comma";
    goto LABEL_15;
  }
  if (*v20 >= 0x11uLL)
  {
    getErrorErrorCat();
    int64_t v50 = (void *)3;
    uint64_t v51 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    char v30 = "mach-o section specifier requires a section whose length is between 1 and 16 characters";
LABEL_15:
    uint64_t v48 = (uint64_t)v30;
    goto LABEL_16;
  }
  *a5 = 0;
  *a7 = 0;
  if (!v23)
  {
    *a8 = 0;
    goto LABEL_17;
  }
  size_t v43 = a7;
  uint64_t v31 = 0;
  int v32 = 0;
  while (v23 != (&SectionTypeDescriptors)[v31 + 1] || memcmp(v21, (&SectionTypeDescriptors)[v31], (size_t)v23))
  {
    --v32;
    v31 += 4;
    if (v31 == 92)
    {
      getErrorErrorCat();
      int64_t v50 = (void *)3;
      uint64_t v51 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      char v33 = "mach-o section specifier uses an unknown section type";
      goto LABEL_26;
    }
  }
  *a5 = -v32;
  *a6 = 1;
  if (v26)
  {
    int64_t v50 = v52;
    uint64_t v51 = 0x100000000;
    llvm::StringRef::split((unsigned int *)&v45, (unsigned int *)&v50, 43, -1, 0);
    if (v51)
    {
      int v35 = (uint64_t *)v50;
      size_t v36 = (uint64_t *)((char *)v50 + 16 * v51);
      do
      {
        uint64_t v37 = 0;
        while (1)
        {
          char v38 = (const void *)llvm::StringRef::trim(v35, " \t\n\v\f\r", 6);
          size_t v39 = *(void *)&SectionAttrDescriptors[v37 + 4];
          if (v40 == v39 && (!v39 || !memcmp(v38, *(const void **)&SectionAttrDescriptors[v37 + 2], v39))) {
            break;
          }
          v37 += 10;
          if (v37 == 110)
          {
            getErrorErrorCat();
            uint64_t v48 = 3;
            size_t v49 = &getErrorErrorCat(void)::ErrorErrorCat;
            uint64_t v42 = "mach-o section specifier has invalid attribute";
            goto LABEL_40;
          }
        }
        int v41 = *a5 | SectionAttrDescriptors[v37];
        *a5 = v41;
        v35 += 2;
      }
      while (v35 != v36);
    }
    else
    {
      int v41 = *a5;
    }
    if (v29)
    {
      if (v41 == 8)
      {
        if (llvm::StringRef::getAsInteger<unsigned int>(&v44, 0, v43, v34))
        {
          getErrorErrorCat();
          uint64_t v48 = 3;
          size_t v49 = &getErrorErrorCat(void)::ErrorErrorCat;
          uint64_t v42 = "mach-o section specifier has a malformed stub size";
          goto LABEL_40;
        }
        goto LABEL_53;
      }
      getErrorErrorCat();
      uint64_t v48 = 3;
      size_t v49 = &getErrorErrorCat(void)::ErrorErrorCat;
      uint64_t v42 = "mach-o section specifier cannot have a stub size specified because it does not have type 'symbol_stubs'";
    }
    else
    {
      if (v41 != 8)
      {
LABEL_53:
        *a8 = 0;
        if (v50 != v52) {
          free(v50);
        }
        goto LABEL_17;
      }
      getErrorErrorCat();
      uint64_t v48 = 3;
      size_t v49 = &getErrorErrorCat(void)::ErrorErrorCat;
      uint64_t v42 = "mach-o section specifier of type 'symbol_stubs' requires a size specifier";
    }
LABEL_40:
    unint64_t v47[2] = v42;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  if (v32 == -8)
  {
    getErrorErrorCat();
    int64_t v50 = (void *)3;
    uint64_t v51 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    char v33 = "mach-o section specifier of type 'symbol_stubs' requires a size specifier";
LABEL_26:
    uint64_t v48 = (uint64_t)v33;
LABEL_16:
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  *a8 = 0;
LABEL_17:
  if (v53 != v55) {
    free(v53);
  }
}

uint64_t llvm::StringRef::getAsInteger<unsigned int>(long long *a1, llvm::StringRef *a2, _DWORD *a3, unint64_t *a4)
{
  unint64_t v7 = 0;
  long long v8 = *a1;
  char v5 = llvm::consumeUnsignedInteger((llvm *)&v8, a2, &v7, a4);
  uint64_t result = 1;
  if ((v5 & 1) == 0 && !*((void *)&v8 + 1) && !HIDWORD(v7))
  {
    uint64_t result = 0;
    *a3 = v7;
  }
  return result;
}

void llvm::MCSectionWasm::printSwitchToSection(uint64_t a1, unsigned char **a2, uint64_t a3, llvm::raw_ostream *a4, unsigned __int8 *a5)
{
  if (!(*((unsigned int (**)(unsigned char **, void, void))*a2 + 8))(a2, *(void *)(a1 + 200), *(void *)(a1 + 208)))
  {
    uint64_t v10 = *((void *)a4 + 4);
    if ((unint64_t)(*((void *)a4 + 3) - v10) > 9)
    {
      *(_WORD *)(v10 + 8) = 2414;
      *(void *)uint64_t v10 = *(void *)"\t.section\t";
      *((void *)a4 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a4, "\t.section\t", 0xAuLL);
    }
    printName(a4, *(unsigned __int8 **)(a1 + 200), *(void *)(a1 + 208));
    int v12 = (_WORD *)*((void *)a4 + 4);
    if (*((void *)a4 + 3) - (void)v12 > 1uLL)
    {
      *int v12 = 8748;
      *((void *)a4 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a4, ",\"", 2uLL);
    }
    if (*(unsigned char *)(a1 + 252))
    {
      size_t v13 = (unsigned char *)*((void *)a4 + 4);
      if ((unint64_t)v13 >= *((void *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 112);
      }
      else
      {
        *((void *)a4 + 4) = v13 + 1;
        *size_t v13 = 112;
      }
    }
    if (*(void *)(a1 + 232))
    {
      uint64_t v14 = (unsigned char *)*((void *)a4 + 4);
      if ((unint64_t)v14 >= *((void *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 71);
      }
      else
      {
        *((void *)a4 + 4) = v14 + 1;
        *uint64_t v14 = 71;
      }
    }
    if (*(unsigned char *)(a1 + 256))
    {
      unsigned int v15 = (unsigned char *)*((void *)a4 + 4);
      if ((unint64_t)v15 >= *((void *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 83);
      }
      else
      {
        *((void *)a4 + 4) = v15 + 1;
        *unsigned int v15 = 83;
      }
    }
    if ((*(unsigned char *)(a1 + 256) & 2) != 0)
    {
      uint64_t v16 = (unsigned char *)*((void *)a4 + 4);
      if ((unint64_t)v16 >= *((void *)a4 + 3))
      {
        llvm::raw_ostream::write(a4, 84);
      }
      else
      {
        *((void *)a4 + 4) = v16 + 1;
        *uint64_t v16 = 84;
      }
    }
    uint64_t v17 = (unsigned char *)*((void *)a4 + 4);
    if ((unint64_t)v17 >= *((void *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 34);
    }
    else
    {
      *((void *)a4 + 4) = v17 + 1;
      unsigned char *v17 = 34;
    }
    unsigned int v18 = (unsigned char *)*((void *)a4 + 4);
    if ((unint64_t)v18 >= *((void *)a4 + 3))
    {
      llvm::raw_ostream::write(a4, 44);
    }
    else
    {
      *((void *)a4 + 4) = v18 + 1;
      *unsigned int v18 = 44;
    }
    unint64_t v20 = *((void *)a4 + 3);
    uint64_t v19 = (char *)*((void *)a4 + 4);
    if (*a2[6] == 64)
    {
      if ((unint64_t)v19 < v20)
      {
        *((void *)a4 + 4) = v19 + 1;
        char v21 = 37;
LABEL_42:
        *uint64_t v19 = v21;
LABEL_46:
        uint64_t v24 = (unsigned char *)*((void *)a4 + 4);
        if (*(void *)(a1 + 232))
        {
          if (*((unsigned char **)a4 + 3) == v24)
          {
            llvm::raw_ostream::write(a4, ",", 1uLL);
          }
          else
          {
            *uint64_t v24 = 44;
            ++*((void *)a4 + 4);
          }
          uint64_t v25 = *(unsigned char **)(a1 + 232);
          if ((*v25 & 4) != 0)
          {
            uint64_t v28 = (void *)*((void *)v25 - 1);
            int64_t v29 = *v28;
            uint64_t v26 = (unsigned __int8 *)(v28 + 2);
            int64_t v27 = v29;
          }
          else
          {
            uint64_t v26 = 0;
            int64_t v27 = 0;
          }
          printName(a4, v26, v27);
          char v30 = (_DWORD *)*((void *)a4 + 4);
          if (*((void *)a4 + 3) - (void)v30 > 6uLL)
          {
            *(_DWORD *)((char *)v30 + 3) = 1952539757;
            *char v30 = 1836016428;
            uint64_t v24 = (unsigned char *)(*((void *)a4 + 4) + 7);
            *((void *)a4 + 4) = v24;
          }
          else
          {
            llvm::raw_ostream::write(a4, ",comdat", 7uLL);
            uint64_t v24 = (unsigned char *)*((void *)a4 + 4);
          }
        }
        if (*(_DWORD *)(a1 + 224) != -1)
        {
          if (*((void *)a4 + 3) - (void)v24 > 7uLL)
          {
            *(void *)uint64_t v24 = 0x2C657571696E752CLL;
            *((void *)a4 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(a4, ",unique,", 8uLL);
          }
          write_unsigned<unsigned long>(a4, *(unsigned int *)(a1 + 224), 0, 0, 0);
          uint64_t v24 = (unsigned char *)*((void *)a4 + 4);
        }
        if ((unint64_t)v24 >= *((void *)a4 + 3))
        {
          llvm::raw_ostream::write(a4, 10);
          if (!a5) {
            return;
          }
        }
        else
        {
          *((void *)a4 + 4) = v24 + 1;
          *uint64_t v24 = 10;
          if (!a5) {
            return;
          }
        }
        uint64_t v31 = (void *)*((void *)a4 + 4);
        if (*((void *)a4 + 3) - (void)v31 > 0xCuLL)
        {
          qmemcpy(v31, "\t.subsection\t", 13);
          *((void *)a4 + 4) += 13;
        }
        else
        {
          llvm::raw_ostream::write(a4, "\t.subsection\t", 0xDuLL);
        }
        goto LABEL_68;
      }
      size_t v22 = a4;
      char v23 = 37;
    }
    else
    {
      if ((unint64_t)v19 < v20)
      {
        *((void *)a4 + 4) = v19 + 1;
        char v21 = 64;
        goto LABEL_42;
      }
      size_t v22 = a4;
      char v23 = 64;
    }
    llvm::raw_ostream::write(v22, v23);
    goto LABEL_46;
  }
  int v9 = (unsigned char *)*((void *)a4 + 4);
  if ((unint64_t)v9 >= *((void *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 9);
  }
  else
  {
    *((void *)a4 + 4) = v9 + 1;
    unsigned char *v9 = 9;
  }
  llvm::raw_ostream::operator<<(a4, *(const void **)(a1 + 200), *(void *)(a1 + 208));
  if (!a5) {
    goto LABEL_69;
  }
  int v11 = (unsigned char *)*((void *)a4 + 4);
  if ((unint64_t)v11 >= *((void *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 9);
  }
  else
  {
    *((void *)a4 + 4) = v11 + 1;
    *int v11 = 9;
  }
LABEL_68:
  llvm::MCExpr::print(a5, a4, a2, 0);
LABEL_69:
  int v32 = (unsigned char *)*((void *)a4 + 4);
  if ((unint64_t)v32 >= *((void *)a4 + 3))
  {
    llvm::raw_ostream::write(a4, 10);
  }
  else
  {
    *((void *)a4 + 4) = v32 + 1;
    unsigned char *v32 = 10;
  }
}

uint64_t llvm::MCSectionWasm::useCodeAlign(llvm::MCSectionWasm *this)
{
  return 0;
}

uint64_t llvm::MCSectionWasm::isVirtualSection(llvm::MCSectionWasm *this)
{
  return 0;
}

llvm::raw_ostream *llvm::MCSectionXCOFF::printCsectDirective(llvm::MCSectionXCOFF *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 7uLL)
  {
    void *v4 = 0x2074636573632E09;
    *((void *)a2 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(a2, "\t.csect ", 8uLL);
  }
  char v5 = (unsigned char *)*((void *)this + 29);
  if ((*v5 & 4) != 0)
  {
    long long v8 = (size_t *)*((void *)v5 - 1);
    size_t v9 = *v8;
    uint64_t v6 = v8 + 2;
    size_t v7 = v9;
  }
  else
  {
    uint64_t v6 = 0;
    size_t v7 = 0;
  }
  uint64_t v10 = llvm::raw_ostream::operator<<(a2, v6, v7);
  int v11 = v10;
  int v12 = (unsigned char *)*((void *)v10 + 4);
  if (*((unsigned char **)v10 + 3) == v12)
  {
    llvm::raw_ostream::write(v10, ",", 1uLL);
  }
  else
  {
    *int v12 = 44;
    ++*((void *)v10 + 4);
  }
  uint64_t result = write_unsigned<unsigned long>(v11, *((unsigned __int8 *)this + 24), 0, 0, 0);
  uint64_t v14 = (unsigned char *)*((void *)v11 + 4);
  if ((unint64_t)v14 >= *((void *)v11 + 3))
  {
    return llvm::raw_ostream::write(v11, 10);
  }
  else
  {
    *((void *)v11 + 4) = v14 + 1;
    *uint64_t v14 = 10;
  }
  return result;
}

llvm::raw_ostream *llvm::MCSectionXCOFF::printSwitchToSection(llvm::raw_ostream *this, uint64_t a2, int a3, llvm::raw_ostream *a4)
{
  char v5 = this;
  int v6 = *((unsigned __int8 *)this + 220);
  if ((v6 & 0xFE) == 2)
  {
    if (*((unsigned char *)this + 224))
    {
      size_t v7 = "Unhandled storage-mapping class for .text csect";
      goto LABEL_44;
    }
    goto LABEL_14;
  }
  if ((v6 & 0xFC) == 8 || (v6 & 0xFC) == 4)
  {
    int v9 = *((unsigned __int8 *)this + 224);
    if (v9 != 1 && v9 != 16)
    {
      size_t v7 = "Unhandled storage-mapping class for .rodata csect.";
      goto LABEL_44;
    }
    goto LABEL_14;
  }
  if (v6 != 19)
  {
    if (v6 == 13)
    {
      if (*((unsigned char *)this + 224) != 20)
      {
        size_t v7 = "Unhandled storage-mapping class for .tdata csect.";
        goto LABEL_44;
      }
LABEL_14:
      return llvm::MCSectionXCOFF::printCsectDirective(this, a4);
    }
    if (*((unsigned char *)this + 226))
    {
      if (*((unsigned char *)this + 224) == 16) {
        goto LABEL_14;
      }
      if (*((unsigned char *)this + 225) == 3) {
        return this;
      }
    }
    if ((v6 & 0xFFFFFFFD) == 0xC) {
      goto LABEL_14;
    }
    if (!*((unsigned char *)this + 220) && *((unsigned char *)this + 260))
    {
      size_t v13 = llvm::raw_ostream::operator<<(a4, "\n\t.dwsect ", 0xAuLL);
      uint64_t v14 = *((void *)v5 + 32);
      v20[0] = &unk_270DC2150;
      v20[1] = "0x%x";
      int v21 = v14;
      unsigned int v15 = llvm::raw_ostream::operator<<(v13, (uint64_t)v20);
      uint64_t v16 = (unsigned char *)*((void *)v15 + 4);
      if ((unint64_t)v16 >= *((void *)v15 + 3))
      {
        llvm::raw_ostream::write(v15, 10);
      }
      else
      {
        *((void *)v15 + 4) = v16 + 1;
        *uint64_t v16 = 10;
      }
      uint64_t v17 = llvm::raw_ostream::operator<<(a4, *(const void **)(a2 + 104), *(void *)(a2 + 112));
      this = llvm::raw_ostream::operator<<(v17, *((const void **)v5 + 25), *((void *)v5 + 26));
      unsigned int v18 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v18 >= *((void *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 58);
      }
      else
      {
        *((void *)this + 4) = v18 + 1;
        *unsigned int v18 = 58;
      }
      uint64_t v19 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v19 >= *((void *)this + 3)) {
        return llvm::raw_ostream::write(this, 10);
      }
      *((void *)this + 4) = v19 + 1;
      *uint64_t v19 = 10;
      return this;
    }
    size_t v7 = "Printing for this SectionKind is unimplemented.";
LABEL_44:
    llvm::report_fatal_error((llvm *)v7, (const llvm::Twine *)1);
  }
  unsigned int v11 = *((unsigned __int8 *)this + 224);
  if (v11 > 0x16) {
    goto LABEL_46;
  }
  if (((1 << v11) & 0x10420) != 0) {
    goto LABEL_14;
  }
  if (((1 << v11) & 0x400008) != 0) {
    return this;
  }
  if (v11 != 15)
  {
LABEL_46:
    size_t v7 = "Unhandled storage-mapping class for .data csect.";
    goto LABEL_44;
  }
  return llvm::raw_ostream::operator<<(a4, "\t.toc\n", 6uLL);
}

BOOL llvm::MCSectionXCOFF::useCodeAlign(llvm::MCSectionXCOFF *this)
{
  return (*((_DWORD *)this + 55) & 0xFE) == 2;
}

BOOL llvm::MCSectionXCOFF::isVirtualSection(llvm::MCSectionXCOFF *this)
{
  return !*((unsigned char *)this + 260) && *((unsigned char *)this + 225) == 3;
}

uint64_t llvm::format_object<llvm::XCOFF::DwarfSectionSubtypeFlags>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

llvm::MCStreamer *llvm::MCStreamer::MCStreamer(llvm::MCStreamer *this, llvm::MCContext *a2)
{
  *(void *)this = &unk_270DC2170;
  *((void *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 6) = (char *)this + 64;
  *((void *)this + 7) = 0x100000000;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 124) = 0u;
  *((void *)this + 18) = (char *)this + 160;
  uint64_t v3 = (void *)((char *)this + 144);
  *((void *)this + 19) = 0x400000000;
  *((void *)this + 36) = 0;
  *(void *)((char *)this + 294) = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v4 = (_OWORD *)llvm::SmallVectorTemplateCommon<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,true>>((uint64_t)this + 144, (unint64_t)v8, 1);
  char v5 = (_OWORD *)(*v3 + 32 * *((unsigned int *)this + 38));
  long long v6 = v4[1];
  _OWORD *v5 = *v4;
  v5[1] = v6;
  ++*((_DWORD *)this + 38);
  return this;
}

void llvm::MCStreamer::~MCStreamer(llvm::MCStreamer *this)
{
  *(void *)this = &unk_270DC2170;
  unint64_t v2 = (char *)*((void *)this + 18);
  if (v2 != (char *)this + 160) {
    free(v2);
  }
  MEMORY[0x263E500A0](*((void *)this + 15), 8);
  char v5 = (void **)((char *)this + 80);
  std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__destroy_vector::operator()[abi:nn180100](&v5);
  uint64_t v3 = (char *)*((void *)this + 6);
  if (v3 != (char *)this + 64) {
    free(v3);
  }
  char v5 = (void **)((char *)this + 24);
  std::vector<llvm::MCDwarfFrameInfo>::__destroy_vector::operator()[abi:nn180100](&v5);
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

__n128 llvm::MCStreamer::reset(llvm::MCStreamer *this)
{
  uint64_t v3 = *((void *)this + 3);
  uint64_t v2 = *((void *)this + 4);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 88;
      *(void *)&v24[0] = v2 - 56;
      std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100]((void ***)v24);
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  char v5 = (uint64_t *)*((void *)this + 10);
  *((void *)this + 4) = v3;
  *((void *)this + 13) = 0;
  std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__base_destruct_at_end[abi:nn180100]((uint64_t)this + 80, v5);
  long long v6 = (void *)((char *)this + 120);
  int v7 = *((_DWORD *)this + 32);
  if (v7)
  {
    unsigned int v8 = *((_DWORD *)this + 34);
    if (v8 > 4 * v7 && v8 >= 0x41)
    {
      int v9 = 1 << (33 - __clz(v7 - 1));
      if (v9 <= 64) {
        int v10 = 64;
      }
      else {
        int v10 = v9;
      }
LABEL_12:
      if (v10 == v8)
      {
        *((void *)this + 16) = 0;
        uint64_t v11 = 16 * v8;
        int v12 = (void *)*((void *)this + 15);
        do
        {
          *int v12 = -4096;
          v12 += 2;
          v11 -= 16;
        }
        while (v11);
      }
      else
      {
        MEMORY[0x263E500A0](*v6, 8);
        if (v10)
        {
          unint64_t v19 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
          unint64_t v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
          LODWORD(v20) = (((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8)) + 1;
          *((_DWORD *)this + 34) = v20;
          int v21 = operator new(16 * v20, (std::align_val_t)8uLL);
          *((void *)this + 15) = v21;
          *((void *)this + 16) = 0;
          uint64_t v22 = *((unsigned int *)this + 34);
          if (v22)
          {
            uint64_t v23 = 16 * v22;
            do
            {
              *int v21 = -4096;
              v21 += 2;
              v23 -= 16;
            }
            while (v23);
          }
        }
        else
        {
          void *v6 = 0;
          *((void *)this + 16) = 0;
          *((_DWORD *)this + 34) = 0;
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 33)) {
      goto LABEL_20;
    }
    unsigned int v8 = *((_DWORD *)this + 34);
    if (v8 > 0x40)
    {
      int v10 = 0;
      goto LABEL_12;
    }
  }
  if (v8)
  {
    size_t v13 = (void *)*v6;
    uint64_t v14 = 16 * v8;
    do
    {
      *size_t v13 = -4096;
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  *((void *)this + 16) = 0;
LABEL_20:
  *((_DWORD *)this + 38) = 0;
  memset(v24, 0, sizeof(v24));
  unint64_t v15 = llvm::SmallVectorTemplateCommon<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<std::pair<llvm::MCSection *,llvm::MCExpr const*>,std::pair<llvm::MCSection *,llvm::MCExpr const*>>,true>>((uint64_t)this + 144, (unint64_t)v24, 1);
  uint64_t v16 = (_OWORD *)(*((void *)this + 18) + 32 * *((unsigned int *)this + 38));
  __n128 result = *(__n128 *)v15;
  long long v18 = *(_OWORD *)(v15 + 16);
  *uint64_t v16 = *(_OWORD *)v15;
  v16[1] = v18;
  ++*((_DWORD *)this + 38);
  return result;
}

uint64_t llvm::MCStreamer::emitIntValue(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 488))();
}

void llvm::MCStreamer::emitIntValue(void *a1, uint64_t a2)
{
  void v14[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (((v4 + 63) & 0x1FFFFFFC0) == 0x40)
  {
    LimitedValue = llvm::APInt::getLimitedValue((uint64_t ***)a2, 0xFFFFFFFFFFFFFFFFLL);
    long long v6 = *(void (**)(void *, uint64_t *, uint64_t))(*a1 + 512);
    uint64_t v7 = *(_DWORD *)(a2 + 8) >> 3;
    v6(a1, LimitedValue, v7);
  }
  else
  {
    if (*(unsigned char *)(*(void *)(a1[1] + 144) + 16))
    {
      unsigned int v11 = *(_DWORD *)(a2 + 8);
      if (v4 > 0x40) {
        operator new[]();
      }
      int v10 = *(uint64_t ***)a2;
    }
    else
    {
      llvm::APInt::byteSwap((llvm::APInt *)a2, (llvm::APInt *)&v10);
    }
    unint64_t v8 = (unint64_t)*(unsigned int *)(a2 + 8) >> 3;
    long long __dst = v14;
    long long v13 = xmmword_261E8AB70;
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&__dst, v8);
    if (v11 >= 0x41) {
      int v9 = (uint64_t ***)v10;
    }
    else {
      int v9 = &v10;
    }
    memcpy(__dst, v9, v8);
    (*(void (**)(void *, void *, void))(*a1 + 488))(a1, __dst, v13);
    if (__dst != v14) {
      free(__dst);
    }
    if (v11 >= 0x41 && v10) {
      MEMORY[0x263E50080](v10, 0x1000C8000313F17);
    }
  }
}

void llvm::MCStreamer::emitDTPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
}

void llvm::MCStreamer::emitDTPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
}

void llvm::MCStreamer::emitTPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
}

void llvm::MCStreamer::emitTPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
}

void llvm::MCStreamer::emitGPRel64Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
}

void llvm::MCStreamer::emitGPRel32Value(llvm::MCStreamer *this, const llvm::MCExpr *a2)
{
}

uint64_t llvm::MCStreamer::emitFill(llvm::MCStreamer *this, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((void *)this + 1) + 184, 24, 3);
  *(unsigned char *)unint64_t v6 = 1;
  *(_DWORD *)(v6 + 1) = *(unsigned __int8 *)(v6 + 4) << 24;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = a2;
  uint64_t v7 = *(uint64_t (**)(llvm::MCStreamer *, unint64_t, void, void))(*(void *)this + 608);
  return v7(this, v6, a3, 0);
}

void llvm::MCStreamer::tryEmitDwarfFileDirective(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, long long *a7@<X6>, long long *a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a1 + 8);
  long long v13 = *a7;
  char v14 = *((unsigned char *)a7 + 16);
  long long v11 = *a8;
  uint64_t v12 = *((void *)a8 + 2);
  llvm::MCContext::getDwarfFile(v10, a3, a4, a5, a6, a2, (uint64_t)&v13, (uint64_t)&v11, a9, a10);
}

double llvm::MCStreamer::emitDwarfFile0Directive(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, long long *a6, __n128 *a7, unsigned int a8)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 8);
  long long v12 = *a6;
  char v13 = *((unsigned char *)a6 + 16);
  __n128 v10 = *a7;
  unint64_t v11 = a7[1].n128_u64[0];
  return llvm::MCContext::setMCLineTableRootFile(v8, a8, a2, a3, a4, a5, (uint64_t)&v12, &v10);
}

uint64_t llvm::MCStreamer::emitCFIBKeyFrame(llvm::MCStreamer *this)
{
  uint64_t result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result) {
    *(unsigned char *)(result + 80) = 1;
  }
  return result;
}

uint64_t llvm::MCStreamer::getCurrentDwarfFrameInfo(llvm::MCStreamer *this)
{
  uint64_t v2 = *((unsigned int *)this + 14);
  if (v2) {
    return *((void *)this + 3) + 88 * *(void *)(*((void *)this + 6) + 16 * v2 - 16);
  }
  uint64_t v4 = *((void *)this + 1);
  char v5 = (uint64_t *)*((void *)this + 36);
  if (v5) {
    uint64_t v6 = *v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
  __int16 v8 = 259;
  llvm::MCContext::reportError(v4, v6, (uint64_t)&v7);
  return 0;
}

uint64_t llvm::MCStreamer::emitCFIMTETaggedFrame(llvm::MCStreamer *this)
{
  uint64_t result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result) {
    *(unsigned char *)(result + 81) = 1;
  }
  return result;
}

uint64_t llvm::MCStreamer::emitDwarfLocDirective(uint64_t result, int a2, int a3, __int16 a4, char a5, char a6, int a7)
{
  uint64_t v7 = *(void *)(result + 8);
  *(_DWORD *)(v7 + 1584) = a2;
  *(_DWORD *)(v7 + 1588) = a3;
  *(_WORD *)(v7 + 1592) = a4;
  *(unsigned char *)(v7 + 1594) = a5;
  *(unsigned char *)(v7 + 1595) = a6;
  *(_DWORD *)(v7 + 1596) = a7;
  *(unsigned char *)(v7 + 1600) = 1;
  return result;
}

unint64_t llvm::MCStreamer::getDwarfLineTableSymbol(llvm::MCStreamer *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 1);
  LODWORD(v11[0]) = a2;
  v13[0] = v11;
  char v5 = std::__tree<std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::MCDwarfLineTable>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::MCDwarfLineTable>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v4 + 1560), (unsigned int *)v11, (uint64_t)&std::piecewise_construct, v13);
  unint64_t result = (unint64_t)v5[5];
  if (!result)
  {
    uint64_t v7 = (llvm::MCContext *)*((void *)this + 1);
    uint64_t v8 = *((void *)v7 + 18);
    uint64_t v10 = *(void *)(v8 + 88);
    uint64_t v9 = *(void *)(v8 + 96);
    __int16 v12 = 773;
    v11[0] = v10;
    v11[1] = v9;
    _OWORD v11[2] = "line_table_start";
    v13[0] = v11;
    v13[2] = (_DWORD *)a2;
    __int16 v14 = 2050;
    unint64_t result = llvm::MCContext::getOrCreateSymbol(v7, (const llvm::Twine *)v13);
    void v5[5] = (uint64_t *)result;
  }
  return result;
}

BOOL llvm::MCStreamer::emitCVFileDirective(uint64_t a1, unsigned int a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t CVContext = llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  return llvm::CodeViewContext::addFile(CVContext, a1, a2, a3, a4, a5, a6, a7);
}

BOOL llvm::MCStreamer::emitCVFuncIdDirective(llvm::MCContext **this, unsigned int a2)
{
  uint64_t CVContext = (llvm::CodeViewContext *)llvm::MCContext::getCVContext(this[1]);
  return llvm::CodeViewContext::recordFunctionId(CVContext, a2);
}

BOOL llvm::MCStreamer::emitCVInlineSiteIdDirective(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t CVContext = llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  uint64_t v15 = *(void *)(CVContext + 232);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(CVContext + 240) - v15) >> 4) > a3 && *(_DWORD *)(v15 + 48 * a3))
  {
    uint64_t v16 = (llvm::CodeViewContext *)llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
    return llvm::CodeViewContext::recordInlinedCallSiteId(v16, a2, a3, a4, a5, a6);
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 8);
    unint64_t v19 = "parent function id not introduced by .cv_func_id or .cv_inline_site_id";
    __int16 v20 = 259;
    llvm::MCContext::reportError(v18, a7, (uint64_t)&v19);
    return 1;
  }
}

void llvm::MCStreamer::emitCVDefRangeDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v10[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = v10;
  long long v9 = xmmword_261E91840;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v8, 0xAuLL);
  *(_WORD *)uint64_t v8 = 4421;
  *(void *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void))(*(void *)a1 + 768))(a1, a2, a3, v8, v9);
  if (v8 != v10) {
    free(v8);
  }
}

{
  void *v8;
  long long v9;
  void v10[4];

  void v10[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = v10;
  long long v9 = xmmword_261E91840;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v8, 0xAuLL);
  *(_WORD *)uint64_t v8 = 4419;
  *(void *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void))(*(void *)a1 + 768))(a1, a2, a3, v8, v9);
  if (v8 != v10) {
    free(v8);
  }
}

void llvm::MCStreamer::emitCVDefRangeDirective(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void v10[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = v10;
  long long v9 = xmmword_261E91840;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v8, 6uLL);
  *(_WORD *)uint64_t v8 = 4417;
  *(_DWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void))(*(void *)a1 + 768))(a1, a2, a3, v8, v9);
  if (v8 != v10) {
    free(v8);
  }
}

{
  void *v8;
  long long v9;
  void v10[4];

  void v10[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = v10;
  long long v9 = xmmword_261E91840;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v8, 6uLL);
  *(_WORD *)uint64_t v8 = 4418;
  *(_DWORD *)((char *)v8 + 2) = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *, void))(*(void *)a1 + 768))(a1, a2, a3, v8, v9);
  if (v8 != v10) {
    free(v8);
  }
}

uint64_t llvm::MCStreamer::initSections(void *a1)
{
  return (*(uint64_t (**)(void *, void, void))(*a1 + 168))(a1, *(void *)(*(void *)(a1[1] + 160) + 24), 0);
}

void *llvm::MCStreamer::emitLabel(uint64_t a1, llvm::MCSymbol *this, uint64_t a3)
{
  int v6 = *((_DWORD *)this + 2);
  if ((v6 & 2) != 0)
  {
    if ((*((_DWORD *)this + 2) & 0x3800) == 0x1000)
    {
      *((void *)this + 3) = 0;
      v6 &= 0xFFFFC7FF;
    }
    *(void *)this &= 7uLL;
    *((_DWORD *)this + 2) = v6 & 0xFFFFFFFD;
  }
  if (llvm::MCSymbol::getFragment(this, 1) || (*((_DWORD *)this + 2) & 0x3800) == 0x1000)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if ((*(unsigned char *)this & 4) != 0)
    {
      uint64_t v10 = (uint64_t *)*((void *)this - 1);
      uint64_t v11 = *v10;
      uint64_t v8 = v10 + 2;
      uint64_t v9 = v11;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
    v16[0] = "symbol '";
    void v16[2] = v8;
    v16[3] = v9;
    __int16 v17 = 1283;
    v18[0] = v16;
    v18[2] = "' is already defined";
    __int16 v19 = 770;
    return llvm::MCContext::reportError(v7, a3, (uint64_t)v18);
  }
  else
  {
    uint64_t v13 = *(unsigned int *)(a1 + 152);
    if (v13) {
      uint64_t v14 = *(void *)(*(void *)(a1 + 144) + 32 * v13 - 32);
    }
    else {
      uint64_t v14 = 0;
    }
    *(void *)this = *(void *)this & 7 | (v14 + 48);
    unint64_t result = *(void **)(a1 + 16);
    if (result)
    {
      uint64_t v15 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v15();
    }
  }
  return result;
}

void llvm::MCStreamer::emitCFIStartProc(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = (unsigned int *)(a1 + 48);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 152);
    uint64_t v7 = v6 ? *(void *)(*(void *)(a1 + 144) + 32 * v6 - 32) : 0;
    if (v7 == *(void *)(*(void *)v4 + 16 * v5 - 8))
    {
      uint64_t v28 = *(void *)(a1 + 8);
      *(void *)&long long v42 = "starting new .cfi frame before finishing the previous one";
      *(_WORD *)long long v44 = 259;
      llvm::MCContext::reportError(v28, a3, (uint64_t)&v42);
      return;
    }
  }
  memset(v44, 0, 42);
  long long v42 = 0u;
  long long v43 = 0u;
  *(_DWORD *)&v44[44] = 0x7FFFFFFF;
  *(_WORD *)&v44[48] = 0;
  v44[41] = a2;
  (**(void (***)(uint64_t, long long *))a1)(a1, &v42);
  uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 144);
  if (v8)
  {
    uint64_t v9 = *(_DWORD **)(v8 + 448);
    for (uint64_t i = *(_DWORD **)(v8 + 456); v9 != i; v9 += 20)
    {
      if (*v9 <= 7u && ((1 << *v9) & 0xB0) != 0) {
        *(_DWORD *)&v44[24] = v9[4];
      }
    }
  }
  unint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(unsigned int *)(a1 + 152);
  if (v13) {
    uint64_t v14 = *(void *)(*(void *)(a1 + 144) + 32 * v13 - 32);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - *(void *)(a1 + 24)) >> 3);
  uint64_t v16 = *(unsigned int *)(a1 + 56);
  if (v16 >= *(_DWORD *)(a1 + 60))
  {
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(v4, v15, v14);
    unint64_t v12 = *(void *)(a1 + 32);
  }
  else
  {
    __int16 v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v16);
    uint64_t *v17 = v15;
    v17[1] = v14;
    *(_DWORD *)(a1 + 56) = v16 + 1;
  }
  unint64_t v18 = *(void *)(a1 + 40);
  if (v12 >= v18)
  {
    uint64_t v22 = *(void *)(a1 + 24);
    uint64_t v23 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - v22) >> 3);
    if ((unint64_t)(v23 + 1) > 0x2E8BA2E8BA2E8BALL) {
      abort();
    }
    unint64_t v24 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v18 - v22) >> 3);
    uint64_t v25 = 2 * v24;
    if (2 * v24 <= v23 + 1) {
      uint64_t v25 = v23 + 1;
    }
    if (v24 >= 0x1745D1745D1745DLL) {
      unint64_t v26 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26) {
      int64_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCDwarfFrameInfo>>(a1 + 40, v26);
    }
    else {
      int64_t v27 = 0;
    }
    int64_t v29 = &v27[88 * v23];
    char v30 = &v27[88 * v26];
    long long v31 = v43;
    *(_OWORD *)int64_t v29 = v42;
    *((_OWORD *)v29 + 1) = v31;
    *((void *)v29 + 5) = 0;
    *((void *)v29 + 6) = 0;
    *((void *)v29 + 4) = 0;
    std::vector<llvm::MCCFIInstruction>::__init_with_size[abi:nn180100]<llvm::MCCFIInstruction*,llvm::MCCFIInstruction*>((void *)v29 + 4, *(long long **)v44, *(long long **)&v44[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v44[8] - *(void *)v44) >> 4));
    long long v32 = *(_OWORD *)&v44[24];
    *(_OWORD *)(v29 + 66) = *(_OWORD *)&v44[34];
    *(_OWORD *)(v29 + 56) = v32;
    int v21 = v29 + 88;
    char v33 = *(char **)(a1 + 24);
    uint64_t v34 = *(char **)(a1 + 32);
    if (v34 == v33)
    {
      *(void *)(a1 + 24) = v29;
      *(void *)(a1 + 32) = v21;
      *(void *)(a1 + 40) = v30;
      if (!v34) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v35 = 0;
      do
      {
        size_t v36 = &v29[v35];
        uint64_t v37 = &v34[v35];
        long long v38 = *(_OWORD *)&v34[v35 - 88];
        *(_OWORD *)(v36 - 72) = *(_OWORD *)&v34[v35 - 72];
        *(_OWORD *)(v36 - 88) = v38;
        *((void *)v36 - 6) = 0;
        *((void *)v36 - 5) = 0;
        *((void *)v36 - 7) = 0;
        *(_OWORD *)(v36 - 56) = *(_OWORD *)&v34[v35 - 56];
        *((void *)v36 - 5) = *(void *)&v34[v35 - 40];
        *((void *)v37 - 7) = 0;
        *((void *)v37 - 6) = 0;
        *((void *)v37 - 5) = 0;
        long long v39 = *(_OWORD *)&v34[v35 - 32];
        *(_OWORD *)(v36 - 22) = *(_OWORD *)&v34[v35 - 22];
        *((_OWORD *)v36 - 2) = v39;
        v35 -= 88;
      }
      while (&v34[v35] != v33);
      uint64_t v34 = *(char **)(a1 + 24);
      uint64_t v40 = *(char **)(a1 + 32);
      *(void *)(a1 + 24) = &v29[v35];
      *(void *)(a1 + 32) = v21;
      *(void *)(a1 + 40) = v30;
      if (v40 != v34)
      {
        do
        {
          int v41 = v40 - 88;
          uint64_t v45 = (void **)(v40 - 56);
          std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100](&v45);
          uint64_t v40 = v41;
        }
        while (v41 != v34);
      }
      if (!v34) {
        goto LABEL_38;
      }
    }
    operator delete(v34);
  }
  else
  {
    long long v19 = v43;
    *(_OWORD *)unint64_t v12 = v42;
    *(_OWORD *)(v12 + 16) = v19;
    *(void *)(v12 + 40) = 0;
    *(void *)(v12 + 48) = 0;
    *(void *)(v12 + 32) = 0;
    std::vector<llvm::MCCFIInstruction>::__init_with_size[abi:nn180100]<llvm::MCCFIInstruction*,llvm::MCCFIInstruction*>((void *)(v12 + 32), *(long long **)v44, *(long long **)&v44[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v44[8] - *(void *)v44) >> 4));
    long long v20 = *(_OWORD *)&v44[24];
    *(_OWORD *)(v12 + 66) = *(_OWORD *)&v44[34];
    *(_OWORD *)(v12 + 56) = v20;
    int v21 = (char *)(v12 + 88);
  }
LABEL_38:
  *(void *)(a1 + 32) = v21;
  uint64_t v45 = (void **)v44;
  std::vector<llvm::MCCFIInstruction>::__destroy_vector::operator()[abi:nn180100](&v45);
}

uint64_t llvm::MCStreamer::emitCFIEndProc(llvm::MCStreamer *this)
{
  uint64_t result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(void *)this + 8))(this, result);
    --*((_DWORD *)this + 14);
  }
  return result;
}

void llvm::MCStreamer::emitCFIEndProcImpl(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 1;
}

uint64_t llvm::MCStreamer::emitCFILabel(llvm::MCStreamer *this)
{
  return 1;
}

void llvm::MCStreamer::emitCFIDefCfa(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v9) = 7;
  *((void *)&v9 + 1) = v6;
  int v10 = a2;
  int v11 = a3;
  char v16 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  char v15 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v8 = CurrentDwarfFrameInfo;
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v9);
    *(_DWORD *)(v8 + 56) = a2;
  }
}

void std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100](uint64_t *a1, long long *a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 4);
    if (v8 + 1 > 0x333333333333333) {
      abort();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *a1) >> 4);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MCCFIInstruction>>((uint64_t)(a1 + 2), v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (uint64_t)&v12[80 * v8];
    uint64_t v14 = &v12[80 * v11];
    std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction const&>(v13, a2);
    uint64_t v7 = v13 + 80;
    char v15 = (char *)*a1;
    char v16 = (char *)a1[1];
    if (v16 == (char *)*a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = (uint64_t)v14;
    }
    else
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = v13 + v17;
        long long v19 = &v16[v17];
        long long v20 = *(_OWORD *)&v16[v17 - 80];
        *(_OWORD *)(v18 - 68) = *(_OWORD *)&v16[v17 - 68];
        *(_OWORD *)(v18 - 80) = v20;
        *(void *)(v18 - 40) = 0;
        *(void *)(v18 - 32) = 0;
        *(void *)(v18 - 48) = 0;
        *(_OWORD *)(v18 - 48) = *(_OWORD *)&v16[v17 - 48];
        *(void *)(v18 - 32) = *(void *)&v16[v17 - 32];
        *((void *)v19 - 6) = 0;
        *((void *)v19 - 5) = 0;
        *((void *)v19 - 4) = 0;
        long long v21 = *(_OWORD *)&v16[v17 - 24];
        *(void *)(v18 - 8) = *(void *)&v16[v17 - 8];
        *(_OWORD *)(v18 - 24) = v21;
        *((void *)v19 - 2) = 0;
        *((void *)v19 - 1) = 0;
        *((void *)v19 - 3) = 0;
        v17 -= 80;
      }
      while (&v16[v17] != v15);
      char v16 = (char *)*a1;
      uint64_t v22 = a1[1];
      *a1 = v13 + v17;
      a1[1] = v7;
      a1[2] = (uint64_t)v14;
      while ((char *)v22 != v16)
      {
        v22 -= 80;
        std::allocator<llvm::MCCFIInstruction>::destroy[abi:nn180100](v5, v22);
      }
    }
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction const&>(a1[1], a2);
    uint64_t v7 = v6 + 80;
  }
  a1[1] = v7;
}

void llvm::MCStreamer::emitCFIDefCfaOffset(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v6) = 6;
  *((void *)&v6 + 1) = v4;
  int v7 = 0;
  int v8 = a2;
  char v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  char v12 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
  }
}

void llvm::MCStreamer::emitCFIAdjustCfaOffset(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v6) = 9;
  *((void *)&v6 + 1) = v4;
  int v7 = 0;
  int v8 = a2;
  char v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  char v12 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
  }
}

void llvm::MCStreamer::emitCFIDefCfaRegister(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v7) = 5;
  *((void *)&v7 + 1) = v4;
  int v8 = a2;
  int v9 = 0;
  char v14 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  char v13 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v6 = CurrentDwarfFrameInfo;
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v7);
    *(_DWORD *)(v6 + 56) = a2;
  }
}

void llvm::MCStreamer::emitCFILLVMDefAspaceCfa(llvm::MCStreamer *this, int a2, int a3, int a4)
{
  uint64_t v8 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v11) = 4;
  *((void *)&v11 + 1) = v8;
  int v12 = a2;
  int v13 = a3;
  int v14 = a4;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    uint64_t v10 = CurrentDwarfFrameInfo;
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v11);
    *(_DWORD *)(v10 + 56) = a2;
  }
}

void llvm::MCStreamer::emitCFIOffset(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v8) = 3;
  *((void *)&v8 + 1) = v6;
  int v9 = a2;
  int v10 = a3;
  char v15 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  char v14 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v8);
  }
}

void llvm::MCStreamer::emitCFIRelOffset(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v8) = 8;
  *((void *)&v8 + 1) = v6;
  int v9 = a2;
  int v10 = a3;
  char v15 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  char v14 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v8);
  }
}

uint64_t llvm::MCStreamer::emitCFIPersonality(llvm::MCStreamer *this, const llvm::MCSymbol *a2, int a3)
{
  uint64_t result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
  {
    *(void *)(result + 16) = a2;
    *(_DWORD *)(result + 60) = a3;
  }
  return result;
}

uint64_t llvm::MCStreamer::emitCFILsda(llvm::MCStreamer *this, const llvm::MCSymbol *a2, int a3)
{
  uint64_t result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
  {
    *(void *)(result + 24) = a2;
    *(_DWORD *)(result + 64) = a3;
  }
  return result;
}

void llvm::MCStreamer::emitCFIRememberState(llvm::MCStreamer *this)
{
  uint64_t v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v4) = 1;
  *((void *)&v4 + 1) = v2;
  uint64_t v5 = 0;
  char v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  char v9 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v4);
  }
}

void llvm::MCStreamer::emitCFIRestoreState(llvm::MCStreamer *this)
{
  uint64_t v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v4) = 2;
  *((void *)&v4 + 1) = v2;
  uint64_t v5 = 0;
  char v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  char v9 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v4);
  }
}

void llvm::MCStreamer::emitCFISameValue(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v6) = 0;
  *((void *)&v6 + 1) = v4;
  int v7 = a2;
  int v8 = 0;
  char v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  char v12 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
  }
}

void llvm::MCStreamer::emitCFIRestore(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v6) = 11;
  *((void *)&v6 + 1) = v4;
  int v7 = a2;
  int v8 = 0;
  char v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  char v12 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
  }
}

void llvm::MCStreamer::emitCFIEscape(llvm::MCStreamer *a1, const void *a2, size_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)a1 + 80))(a1);
  LODWORD(v9) = 10;
  *((void *)&v9 + 1) = v6;
  uint64_t v10 = 0;
  char v12 = 0;
  char v13 = 0;
  uint64_t v11 = 0;
  if (a3)
  {
    if ((a3 & 0x8000000000000000) != 0) {
      abort();
    }
    int v7 = (char *)operator new(a3);
    uint64_t v11 = v7;
    char v13 = &v7[a3];
    memmove(v7, a2, a3);
    char v12 = &v7[a3];
  }
  else
  {
    int v7 = 0;
  }
  char v15 = 0;
  char v14 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v9);
  }
  if (v7)
  {
    operator delete(v7);
  }
}

void llvm::MCStreamer::emitCFIGnuArgsSize(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v6) = 16;
  *((void *)&v6 + 1) = v4;
  int v7 = 0;
  int v8 = a2;
  char v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  char v12 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
  }
}

uint64_t llvm::MCStreamer::emitCFISignalFrame(llvm::MCStreamer *this)
{
  uint64_t result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result) {
    *(unsigned char *)(result + 72) = 1;
  }
  return result;
}

void llvm::MCStreamer::emitCFIUndefined(llvm::MCStreamer *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v6) = 12;
  *((void *)&v6 + 1) = v4;
  int v7 = a2;
  int v8 = 0;
  char v13 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  char v12 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v6);
  }
}

void llvm::MCStreamer::emitCFIRegister(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v8) = 13;
  *((void *)&v8 + 1) = v6;
  int v9 = a2;
  int v10 = a3;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v8);
  }
}

void llvm::MCStreamer::emitCFIWindowSave(llvm::MCStreamer *this)
{
  uint64_t v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v4) = 14;
  *((void *)&v4 + 1) = v2;
  uint64_t v5 = 0;
  char v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  char v9 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v4);
  }
}

void llvm::MCStreamer::emitCFINegateRAState(llvm::MCStreamer *this)
{
  uint64_t v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(void *)this + 80))(this);
  LODWORD(v4) = 15;
  *((void *)&v4 + 1) = v2;
  uint64_t v5 = 0;
  char v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  char v9 = 0;
  uint64_t CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo) {
    std::vector<llvm::MCCFIInstruction>::push_back[abi:nn180100]((uint64_t *)(CurrentDwarfFrameInfo + 32), &v4);
  }
}

uint64_t llvm::MCStreamer::emitCFIReturnColumn(llvm::MCStreamer *this, int a2)
{
  uint64_t result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result) {
    *(_DWORD *)(result + 76) = a2;
  }
  return result;
}

uint64_t llvm::MCStreamer::EnsureValidWinFrameInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 144);
  if (*(_DWORD *)(v4 + 420) != 4 || ((v5 = *(_DWORD *)(v4 + 428), v5 != 6) ? (BOOL v6 = v5 == 0) : (BOOL v6 = 1), v6))
  {
    uint64_t v7 = ".seh_* directives are not supported on this target";
LABEL_8:
    char v10 = v7;
    __int16 v11 = 259;
    llvm::MCContext::reportError(v3, a2, (uint64_t)&v10);
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 104);
  if (!v8 || *(void *)(v8 + 8))
  {
    uint64_t v7 = ".seh_ directive must appear within an active frame";
    goto LABEL_8;
  }
  return v8;
}

void *llvm::MCStreamer::emitWinCFIStartProc(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)(v4 + 144);
  if (*(_DWORD *)(v5 + 420) == 4)
  {
    int v6 = *(_DWORD *)(v5 + 428);
    if (v6 != 6 && v6 != 0)
    {
      uint64_t v9 = a1[13];
      if (v9)
      {
        if (!*(void *)(v9 + 8))
        {
          v10[0] = "Starting a function before ending the previous one!";
          LOWORD(v11) = 259;
          llvm::MCContext::reportError(v4, a3, (uint64_t)v10);
        }
      }
      (*(void (**)(void *))(*a1 + 80))(a1);
      a1[14] = (uint64_t)(a1[11] - a1[10]) >> 3;
      operator new();
    }
  }
  v10[0] = ".seh_* directives are not supported on this target";
  LOWORD(v11) = 259;
  return llvm::MCContext::reportError(v4, a3, (uint64_t)v10);
}

uint64_t llvm::MCStreamer::emitWinCFIEndProc(void *a1, uint64_t a2)
{
  uint64_t result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (result)
  {
    uint64_t v5 = (void *)result;
    if (*(void *)(result + 80))
    {
      uint64_t v6 = a1[1];
      uint64_t v11 = "Not all chained regions terminated!";
      __int16 v12 = 259;
      llvm::MCContext::reportError(v6, a2, (uint64_t)&v11);
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
    v5[1] = v7;
    if (!v5[2]) {
      v5[2] = v7;
    }
    uint64_t v8 = a1[14];
    uint64_t v9 = a1[11] - a1[10];
    if (v8 != v9 >> 3)
    {
      uint64_t v10 = v9 >> 3;
      do
        (*(void (**)(void *, void))(*a1 + 16))(a1, *(void *)(a1[10] + 8 * v8++));
      while (v10 != v8);
    }
    return (*(uint64_t (**)(void *, void, void))(*a1 + 168))(a1, v5[7], 0);
  }
  return result;
}

uint64_t llvm::MCStreamer::emitWinCFIFuncletOrFuncEnd(void *a1, uint64_t a2)
{
  uint64_t result = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 80))
    {
      uint64_t v6 = a1[1];
      uint64_t v7 = "Not all chained regions terminated!";
      __int16 v8 = 259;
      llvm::MCContext::reportError(v6, a2, (uint64_t)&v7);
    }
    uint64_t result = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
    *(void *)(v5 + 16) = result;
  }
  return result;
}

uint64_t llvm::MCStreamer::emitWinCFIStartChained(uint64_t a1, uint64_t a2)
{
  uint64_t result = llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a2);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
    operator new();
  }
  return result;
}

void *llvm::MCStreamer::emitWinCFIEndChained(void *a1, uint64_t a2)
{
  uint64_t result = (void *)llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (result)
  {
    uint64_t v5 = result;
    if (result[10])
    {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*a1 + 80))(a1);
      v5[1] = result;
      a1[13] = v5[10];
    }
    else
    {
      uint64_t v6 = a1[1];
      uint64_t v7 = "End of a chained region outside a chained region!";
      __int16 v8 = 259;
      return llvm::MCContext::reportError(v6, a2, (uint64_t)&v7);
    }
  }
  return result;
}

void *llvm::MCStreamer::emitWinEHHandler(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (void *)llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a5);
  if (result)
  {
    uint64_t v11 = result;
    if (result[10])
    {
      uint64_t v12 = *(void *)(a1 + 8);
      v14[0] = "Chained unwind areas can't have handlers!";
      __int16 v15 = 259;
      return llvm::MCContext::reportError(v12, a5, (uint64_t)v14);
    }
    else
    {
      result[3] = a2;
      if ((a3 & 1) == 0 && (a4 & 1) == 0)
      {
        uint64_t v13 = *(void *)(a1 + 8);
        v14[0] = "Don't know what kind of handler this is!";
        __int16 v15 = 259;
        uint64_t result = llvm::MCContext::reportError(v13, a5, (uint64_t)v14);
      }
      if (a3) {
        *((unsigned char *)v11 + 72) = 1;
      }
      if (a4) {
        *((unsigned char *)v11 + 73) = 1;
      }
    }
  }
  return result;
}

void *llvm::MCStreamer::emitWinEHHandlerData(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a2);
  if (result)
  {
    if (result[10])
    {
      uint64_t v5 = *(void *)(a1 + 8);
      uint64_t v6 = "Chained unwind areas can't have handlers!";
      __int16 v7 = 259;
      return llvm::MCContext::reportError(v5, a2, (uint64_t)&v6);
    }
  }
  return result;
}

void llvm::MCStreamer::emitWinCFIPushReg(void *a1, int a2, uint64_t a3)
{
  uint64_t valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a3);
  if (valid)
  {
    uint64_t v6 = (void *)valid;
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
    uint64_t v8 = *(void *)(a1[1] + 152);
    int v26 = a2;
    uint64_t v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(v8 + 160, &v26);
    if (*(void *)(v8 + 160) + 8 * *(unsigned int *)(v8 + 176) == v9) {
      uint64_t v10 = &v26;
    }
    else {
      uint64_t v10 = (int *)(v9 + 4);
    }
    int v11 = *v10;
    unint64_t v12 = v6[12];
    unint64_t v13 = v6[13];
    if (v12 >= v13)
    {
      uint64_t v15 = v6[11];
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v15) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v15) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v19);
      }
      else {
        uint64_t v20 = 0;
      }
      unint64_t v21 = v19 + 24 * v16;
      unint64_t v22 = v19 + 24 * v20;
      *(void *)unint64_t v21 = v7;
      *(_DWORD *)(v21 + 8) = -1;
      *(_DWORD *)(v21 + 12) = v11;
      *(_DWORD *)(v21 + 16) = 0;
      unint64_t v14 = v21 + 24;
      unint64_t v24 = (char *)v6[11];
      uint64_t v23 = (char *)v6[12];
      if (v23 != v24)
      {
        do
        {
          long long v25 = *(_OWORD *)(v23 - 24);
          *(_DWORD *)(v21 - 8) = *((_DWORD *)v23 - 2);
          *(_OWORD *)(v21 - 24) = v25;
          v21 -= 24;
          v23 -= 24;
        }
        while (v23 != v24);
        uint64_t v23 = (char *)v6[11];
      }
      v6[11] = v21;
      v6[12] = v14;
      v6[13] = v22;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *(void *)unint64_t v12 = v7;
      *(_DWORD *)(v12 + 8) = -1;
      *(_DWORD *)(v12 + 12) = v11;
      *(_DWORD *)(v12 + 16) = 0;
      unint64_t v14 = v12 + 24;
    }
    v6[12] = v14;
  }
}

void llvm::MCStreamer::emitWinCFISetFrame(void *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a4);
  if (valid)
  {
    uint64_t v9 = valid;
    if ((*(_DWORD *)(valid + 76) & 0x80000000) == 0)
    {
      uint64_t v10 = a1[1];
      int v11 = "frame register and offset can be set at most once";
LABEL_8:
      v31[0] = v11;
      __int16 v32 = 259;
      llvm::MCContext::reportError(v10, a4, (uint64_t)v31);
      return;
    }
    if ((a3 & 0xF) != 0)
    {
      uint64_t v10 = a1[1];
      int v11 = "offset is not a multiple of 16";
      goto LABEL_8;
    }
    if (a3 >= 0xF1)
    {
      uint64_t v10 = a1[1];
      int v11 = "frame offset must be less than or equal to 240";
      goto LABEL_8;
    }
    uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
    uint64_t v13 = *(void *)(a1[1] + 152);
    LODWORD(v31[0]) = a2;
    uint64_t v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(v13 + 160, v31);
    if (*(void *)(v13 + 160) + 8 * *(unsigned int *)(v13 + 176) == v14) {
      uint64_t v15 = (int *)v31;
    }
    else {
      uint64_t v15 = (int *)(v14 + 4);
    }
    int v16 = *v15;
    uint64_t v18 = *(void *)(v9 + 88);
    unint64_t v17 = *(void *)(v9 + 96);
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v18) >> 3);
    *(_DWORD *)(v9 + 76) = v19;
    unint64_t v20 = *(void *)(v9 + 104);
    if (v17 >= v20)
    {
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v18) >> 3);
      uint64_t v23 = 2 * v22;
      if (2 * v22 <= v19 + 1) {
        uint64_t v23 = v19 + 1;
      }
      if (v22 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24) {
        unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v24);
      }
      else {
        uint64_t v25 = 0;
      }
      unint64_t v26 = v24 + 24 * v19;
      unint64_t v27 = v24 + 24 * v25;
      *(void *)unint64_t v26 = v12;
      *(_DWORD *)(v26 + 8) = a3;
      *(_DWORD *)(v26 + 12) = v16;
      *(_DWORD *)(v26 + 16) = 3;
      unint64_t v21 = v26 + 24;
      int64_t v29 = *(char **)(v9 + 88);
      uint64_t v28 = *(char **)(v9 + 96);
      if (v28 != v29)
      {
        do
        {
          long long v30 = *(_OWORD *)(v28 - 24);
          *(_DWORD *)(v26 - 8) = *((_DWORD *)v28 - 2);
          *(_OWORD *)(v26 - 24) = v30;
          v26 -= 24;
          v28 -= 24;
        }
        while (v28 != v29);
        uint64_t v28 = *(char **)(v9 + 88);
      }
      *(void *)(v9 + 88) = v26;
      *(void *)(v9 + 96) = v21;
      *(void *)(v9 + 104) = v27;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *(void *)unint64_t v17 = v12;
      *(_DWORD *)(v17 + 8) = a3;
      *(_DWORD *)(v17 + 12) = v16;
      *(_DWORD *)(v17 + 16) = 3;
      unint64_t v21 = v17 + 24;
    }
    *(void *)(v9 + 96) = v21;
  }
}

void llvm::MCStreamer::emitWinCFIAllocStack(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a3);
  if (valid)
  {
    if (!a2)
    {
      uint64_t v7 = a1[1];
      uint64_t v8 = "stack allocation size must be non-zero";
      goto LABEL_6;
    }
    if ((a2 & 7) != 0)
    {
      uint64_t v7 = a1[1];
      uint64_t v8 = "stack allocation size is not a multiple of 8";
LABEL_6:
      unint64_t v27 = v8;
      __int16 v28 = 259;
      llvm::MCContext::reportError(v7, a3, (uint64_t)&v27);
      return;
    }
    uint64_t v9 = (void *)valid;
    uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
    uint64_t v11 = v10;
    if (a2 > 0x80) {
      int v12 = 1;
    }
    else {
      int v12 = 2;
    }
    unint64_t v14 = v9[12];
    unint64_t v13 = v9[13];
    if (v14 >= v13)
    {
      uint64_t v16 = v9[11];
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
      unint64_t v18 = v17 + 1;
      if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x555555555555555) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v20);
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v22 = v20 + 24 * v17;
      unint64_t v23 = v20 + 24 * v21;
      *(void *)unint64_t v22 = v11;
      *(_DWORD *)(v22 + 8) = a2;
      *(_DWORD *)(v22 + 12) = -1;
      *(_DWORD *)(v22 + 16) = v12;
      unint64_t v15 = v22 + 24;
      uint64_t v25 = (char *)v9[11];
      unint64_t v24 = (char *)v9[12];
      if (v24 != v25)
      {
        do
        {
          long long v26 = *(_OWORD *)(v24 - 24);
          *(_DWORD *)(v22 - 8) = *((_DWORD *)v24 - 2);
          *(_OWORD *)(v22 - 24) = v26;
          v22 -= 24;
          v24 -= 24;
        }
        while (v24 != v25);
        unint64_t v24 = (char *)v9[11];
      }
      v9[11] = v22;
      v9[12] = v15;
      v9[13] = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *(void *)unint64_t v14 = v10;
      *(_DWORD *)(v14 + 8) = a2;
      *(_DWORD *)(v14 + 12) = -1;
      *(_DWORD *)(v14 + 16) = v12;
      unint64_t v15 = v14 + 24;
    }
    v9[12] = v15;
  }
}

void llvm::MCStreamer::emitWinCFISaveReg(void *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a4);
  if (valid)
  {
    if ((a3 & 7) != 0)
    {
      uint64_t v9 = a1[1];
      v31[0] = "register save offset is not 8 byte aligned";
      __int16 v32 = 259;
      llvm::MCContext::reportError(v9, a4, (uint64_t)v31);
    }
    else
    {
      uint64_t v10 = (void *)valid;
      uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
      uint64_t v12 = *(void *)(a1[1] + 152);
      LODWORD(v31[0]) = a2;
      uint64_t v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(v12 + 160, v31);
      if (*(void *)(v12 + 160) + 8 * *(unsigned int *)(v12 + 176) == v13) {
        unint64_t v14 = (int *)v31;
      }
      else {
        unint64_t v14 = (int *)(v13 + 4);
      }
      int v15 = *v14;
      if (a3 <= 0x7FFF8) {
        int v16 = 4;
      }
      else {
        int v16 = 5;
      }
      unint64_t v18 = v10[12];
      unint64_t v17 = v10[13];
      if (v18 >= v17)
      {
        uint64_t v20 = v10[11];
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x555555555555555) {
          unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        unint64_t v26 = v24 + 24 * v21;
        unint64_t v27 = v24 + 24 * v25;
        *(void *)unint64_t v26 = v11;
        *(_DWORD *)(v26 + 8) = a3;
        *(_DWORD *)(v26 + 12) = v15;
        *(_DWORD *)(v26 + 16) = v16;
        unint64_t v19 = v26 + 24;
        int64_t v29 = (char *)v10[11];
        __int16 v28 = (char *)v10[12];
        if (v28 != v29)
        {
          do
          {
            long long v30 = *(_OWORD *)(v28 - 24);
            *(_DWORD *)(v26 - 8) = *((_DWORD *)v28 - 2);
            *(_OWORD *)(v26 - 24) = v30;
            v26 -= 24;
            v28 -= 24;
          }
          while (v28 != v29);
          __int16 v28 = (char *)v10[11];
        }
        v10[11] = v26;
        v10[12] = v19;
        v10[13] = v27;
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(void *)unint64_t v18 = v11;
        *(_DWORD *)(v18 + 8) = a3;
        *(_DWORD *)(v18 + 12) = v15;
        unint64_t v19 = v18 + 24;
        *(_DWORD *)(v18 + 16) = v16;
      }
      v10[12] = v19;
    }
  }
}

void llvm::MCStreamer::emitWinCFISaveXMM(void *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a4);
  if (valid)
  {
    if ((a3 & 0xF) != 0)
    {
      uint64_t v9 = a1[1];
      v31[0] = "offset is not a multiple of 16";
      __int16 v32 = 259;
      llvm::MCContext::reportError(v9, a4, (uint64_t)v31);
    }
    else
    {
      uint64_t v10 = (void *)valid;
      uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
      uint64_t v12 = *(void *)(a1[1] + 152);
      LODWORD(v31[0]) = a2;
      uint64_t v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>,llvm::MCRegister,int,llvm::DenseMapInfo<llvm::MCRegister,void>,llvm::detail::DenseMapPair<llvm::MCRegister,int>>::find(v12 + 160, v31);
      if (*(void *)(v12 + 160) + 8 * *(unsigned int *)(v12 + 176) == v13) {
        unint64_t v14 = (int *)v31;
      }
      else {
        unint64_t v14 = (int *)(v13 + 4);
      }
      int v15 = *v14;
      if (a3 <= 0x7FFF8) {
        int v16 = 8;
      }
      else {
        int v16 = 9;
      }
      unint64_t v18 = v10[12];
      unint64_t v17 = v10[13];
      if (v18 >= v17)
      {
        uint64_t v20 = v10[11];
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x555555555555555) {
          unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        unint64_t v26 = v24 + 24 * v21;
        unint64_t v27 = v24 + 24 * v25;
        *(void *)unint64_t v26 = v11;
        *(_DWORD *)(v26 + 8) = a3;
        *(_DWORD *)(v26 + 12) = v15;
        *(_DWORD *)(v26 + 16) = v16;
        unint64_t v19 = v26 + 24;
        int64_t v29 = (char *)v10[11];
        __int16 v28 = (char *)v10[12];
        if (v28 != v29)
        {
          do
          {
            long long v30 = *(_OWORD *)(v28 - 24);
            *(_DWORD *)(v26 - 8) = *((_DWORD *)v28 - 2);
            *(_OWORD *)(v26 - 24) = v30;
            v26 -= 24;
            v28 -= 24;
          }
          while (v28 != v29);
          __int16 v28 = (char *)v10[11];
        }
        v10[11] = v26;
        v10[12] = v19;
        v10[13] = v27;
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(void *)unint64_t v18 = v11;
        *(_DWORD *)(v18 + 8) = a3;
        *(_DWORD *)(v18 + 12) = v15;
        unint64_t v19 = v18 + 24;
        *(_DWORD *)(v18 + 16) = v16;
      }
      v10[12] = v19;
    }
  }
}

void llvm::MCStreamer::emitWinCFIPushFrame(void *a1, int a2, uint64_t a3)
{
  uint64_t valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a3);
  if (valid)
  {
    uint64_t v7 = (void *)valid;
    if (*(void *)(valid + 88) == *(void *)(valid + 96))
    {
      uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 80))(a1);
      uint64_t v10 = v9;
      unint64_t v12 = v7[12];
      unint64_t v11 = v7[13];
      if (v12 >= v11)
      {
        uint64_t v14 = v7[11];
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          abort();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v18);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = v18 + 24 * v15;
        unint64_t v21 = v18 + 24 * v19;
        *(void *)unint64_t v20 = v10;
        *(_DWORD *)(v20 + 8) = a2;
        *(void *)(v20 + 12) = 0xAFFFFFFFFLL;
        unint64_t v13 = v20 + 24;
        unint64_t v23 = (char *)v7[11];
        unint64_t v22 = (char *)v7[12];
        if (v22 != v23)
        {
          do
          {
            long long v24 = *(_OWORD *)(v22 - 24);
            *(_DWORD *)(v20 - 8) = *((_DWORD *)v22 - 2);
            *(_OWORD *)(v20 - 24) = v24;
            v20 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          unint64_t v22 = (char *)v7[11];
        }
        v7[11] = v20;
        v7[12] = v13;
        v7[13] = v21;
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(void *)unint64_t v12 = v9;
        *(_DWORD *)(v12 + 8) = a2;
        *(void *)(v12 + 12) = 0xAFFFFFFFFLL;
        unint64_t v13 = v12 + 24;
      }
      v7[12] = v13;
    }
    else
    {
      uint64_t v8 = a1[1];
      uint64_t v25 = "If present, PushMachFrame must be the first UOP";
      __int16 v26 = 259;
      llvm::MCContext::reportError(v8, a3, (uint64_t)&v25);
    }
  }
}

uint64_t llvm::MCStreamer::emitWinCFIEndProlog(uint64_t a1, uint64_t a2)
{
  uint64_t result = llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
    *(void *)(v4 + 40) = result;
  }
  return result;
}

void llvm::MCStreamer::emitRawTextImpl()
{
}

void *llvm::MCStreamer::finish(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[4];
  if ((a1[3] == v3 || *(void *)(v3 - 80)) && ((uint64_t v4 = a1[11], a1[10] == v4) || *(void *)(*(void *)(v4 - 8) + 8)))
  {
    uint64_t v5 = a1[2];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
    }
    uint64_t v6 = *(uint64_t (**)(void *))(*a1 + 1232);
    return (void *)v6(a1);
  }
  else
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = "Unfinished frame!";
    __int16 v10 = 259;
    return llvm::MCContext::reportError(v8, a2, (uint64_t)&v9);
  }
}

void *llvm::MCStreamer::maybeEmitDwarf64Mark(void *this)
{
  if (*(unsigned char *)(this[1] + 1714) == 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = "DWARF64 Mark";
    __int16 v3 = 259;
    (*(void (**)(void *, const char **, uint64_t))(*this + 112))(this, &v2, 1);
    return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*v1 + 512))(v1, 0xFFFFFFFFLL, 4);
  }
  return this;
}

uint64_t llvm::MCStreamer::emitDwarfUnitLength(llvm::MCStreamer *this, uint64_t a2, const llvm::Twine *a3)
{
  llvm::MCStreamer::maybeEmitDwarf64Mark(this);
  (*(void (**)(llvm::MCStreamer *, const llvm::Twine *, uint64_t))(*(void *)this + 112))(this, a3, 1);
  if (*(unsigned char *)(*((void *)this + 1) + 1714)) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = 4;
  }
  uint64_t v7 = *(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(void *)this + 512);
  return v7(this, a2, v6);
}

unint64_t llvm::MCStreamer::emitDwarfUnitLength(llvm::MCStreamer *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  llvm::MCStreamer::maybeEmitDwarf64Mark(this);
  (*(void (**)(llvm::MCStreamer *, const llvm::Twine *, uint64_t))(*(void *)this + 112))(this, a3, 1);
  uint64_t v6 = (llvm::MCContext *)*((void *)this + 1);
  int v7 = *((unsigned __int8 *)a2 + 32);
  if (v7 == 1)
  {
    unint64_t v20 = "_start";
    __int16 v8 = 259;
    goto LABEL_5;
  }
  if (!*((unsigned char *)a2 + 32))
  {
    __int16 v8 = 256;
LABEL_5:
    __int16 v23 = v8;
    goto LABEL_10;
  }
  uint64_t v9 = *((void *)a2 + 1);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    __int16 v10 = *(const llvm::Twine **)a2;
  }
  else
  {
    LOBYTE(v7) = 2;
    __int16 v10 = a2;
  }
  unint64_t v20 = (const char *)v10;
  uint64_t v21 = v9;
  unint64_t v22 = "_start";
  LOBYTE(v23) = v7;
  HIBYTE(v23) = 3;
LABEL_10:
  Tempunint64_t Symbol = llvm::MCContext::createTempSymbol(v6, (const llvm::Twine *)&v20, 1);
  unint64_t v12 = (llvm::MCContext *)*((void *)this + 1);
  int v13 = *((unsigned __int8 *)a2 + 32);
  if (v13 == 1)
  {
    unint64_t v20 = "_end";
    __int16 v14 = 259;
    goto LABEL_14;
  }
  if (!*((unsigned char *)a2 + 32))
  {
    __int16 v14 = 256;
LABEL_14:
    __int16 v23 = v14;
    goto LABEL_19;
  }
  uint64_t v15 = *((void *)a2 + 1);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    unint64_t v16 = *(const llvm::Twine **)a2;
  }
  else
  {
    LOBYTE(v13) = 2;
    unint64_t v16 = a2;
  }
  unint64_t v20 = (const char *)v16;
  uint64_t v21 = v15;
  unint64_t v22 = "_end";
  LOBYTE(v23) = v13;
  HIBYTE(v23) = 3;
LABEL_19:
  unint64_t v17 = llvm::MCContext::createTempSymbol(v12, (const llvm::Twine *)&v20, 1);
  if (*(unsigned char *)(*((void *)this + 1) + 1714)) {
    uint64_t v18 = 8;
  }
  else {
    uint64_t v18 = 4;
  }
  (*(void (**)(llvm::MCStreamer *, unint64_t, unint64_t, uint64_t))(*(void *)this + 840))(this, v17, TempSymbol, v18);
  (*(void (**)(llvm::MCStreamer *, unint64_t, void))(*(void *)this + 192))(this, TempSymbol, 0);
  return v17;
}

uint64_t llvm::MCStreamer::emitDwarfLineStartLabel(llvm::MCStreamer *this, llvm::MCSymbol *a2)
{
  return (*(uint64_t (**)(llvm::MCStreamer *, llvm::MCSymbol *, void))(*(void *)this + 192))(this, a2, 0);
}

uint64_t llvm::MCStreamer::emitAssignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MCStreamer::visitUsedExpr(a1, a3);
  *(void *)(a2 + 24) = a3;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFC7FF | 0x1000;
  *(void *)a2 &= 7uLL;
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    int v7 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v7();
  }
  return result;
}

uint64_t llvm::MCStreamer::visitUsedExpr(uint64_t result, uint64_t a2)
{
  __int16 v3 = (llvm::MCStreamer *)result;
  while (2)
  {
    switch(*(unsigned char *)a2)
    {
      case 0:
        uint64_t result = llvm::MCStreamer::visitUsedExpr(v3, *(const llvm::MCExpr **)(a2 + 16));
        uint64_t v4 = (uint64_t *)(a2 + 24);
        goto LABEL_5;
      case 2:
        uint64_t v5 = *(llvm::MCStreamer **)(a2 + 16);
        uint64_t v6 = *(uint64_t (**)(llvm::MCStreamer *, llvm::MCStreamer *))(*(void *)v3 + 56);
        int v7 = v3;
        goto LABEL_11;
      case 3:
        uint64_t v4 = (uint64_t *)(a2 + 16);
LABEL_5:
        a2 = *v4;
        continue;
      case 4:
        uint64_t v6 = *(uint64_t (**)(llvm::MCStreamer *, llvm::MCStreamer *))(*(void *)(a2 - 8) + 56);
        int v7 = (llvm::MCStreamer *)(a2 - 8);
        uint64_t v5 = v3;
LABEL_11:
        uint64_t result = v6(v7, v5);
        break;
      default:
        return result;
    }
    return result;
  }
}

uint64_t llvm::MCStreamer::emitInstruction(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 24);
  if (v2)
  {
    uint64_t v4 = result;
    unsigned int v5 = v2 - 1;
    do
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a2 + 16);
      if (*(unsigned char *)(v7 + 16 * v5) == 5) {
        uint64_t result = llvm::MCStreamer::visitUsedExpr(v4, *(void *)(v7 + 16 * v5 + 8));
      }
      --v5;
    }
    while (v6);
  }
  return result;
}

void llvm::MCStreamer::emitPseudoProbe(void *a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, unint64_t a7)
{
  uint64_t v13 = a1[1];
  v22[0] = "tmp";
  __int16 v26 = 259;
  Tempunint64_t Symbol = llvm::MCContext::createTempSymbol((llvm::MCContext *)v13, (const llvm::Twine *)v22, 1);
  (*(void (**)(void *, unint64_t, void))(*a1 + 192))(a1, TempSymbol, 0);
  v22[0] = a2;
  v22[1] = a3;
  char v23 = a5;
  char v24 = a4;
  unint64_t v25 = TempSymbol;
  uint64_t v15 = *(uint64_t **)(v13 + 1736);
  if (v15)
  {
    do
    {
      while (1)
      {
        unint64_t v16 = (uint64_t **)v15;
        unint64_t v17 = v15[4];
        if (v17 <= a7) {
          break;
        }
        uint64_t v15 = *v16;
        uint64_t v18 = v16;
        if (!*v16) {
          goto LABEL_9;
        }
      }
      if (v17 >= a7) {
        goto LABEL_12;
      }
      uint64_t v15 = v16[1];
    }
    while (v15);
    uint64_t v18 = v16 + 1;
  }
  else
  {
    uint64_t v18 = (uint64_t **)(v13 + 1736);
    unint64_t v16 = (uint64_t **)(v13 + 1736);
  }
LABEL_9:
  uint64_t v19 = (char *)operator new(0x78uLL);
  *((void *)v19 + 4) = a7;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 104) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *((_DWORD *)v19 + 18) = 1065353216;
  *((_OWORD *)v19 + 5) = 0u;
  *((_OWORD *)v19 + 6) = 0u;
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = v16;
  *uint64_t v18 = (uint64_t *)v19;
  uint64_t v20 = **(void **)(v13 + 1728);
  uint64_t v21 = (uint64_t *)v19;
  if (v20)
  {
    *(void *)(v13 + 1728) = v20;
    uint64_t v21 = *v18;
  }
  std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v13 + 1736), v21);
  ++*(void *)(v13 + 1744);
LABEL_12:
  llvm::MCPseudoProbeInlineTree::addPseudoProbe();
}

uint64_t llvm::MCStreamer::emitAbsoluteSymbolDiff(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3, uint64_t a4)
{
  uint64_t v8 = *((void *)this + 1);
  unint64_t v9 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v8 + 184, 24, 3);
  int v10 = *(unsigned __int8 *)(*(void *)(v8 + 144) + 18) << 16;
  *(unsigned char *)unint64_t v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = a2;
  uint64_t v11 = *((void *)this + 1);
  unint64_t v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v11 + 184, 24, 3);
  int v13 = *(unsigned __int8 *)(*(void *)(v11 + 144) + 18) << 16;
  *(unsigned char *)unint64_t v12 = 2;
  *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
  *(void *)(v12 + 8) = 0;
  *(void *)(v12 + 16) = a3;
  unint64_t v14 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((void *)this + 1) + 184, 32, 3);
  *(unsigned char *)unint64_t v14 = 0;
  *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = v9;
  *(void *)(v14 + 24) = v12;
  uint64_t v15 = (llvm::MCContext *)*((void *)this + 1);
  if (*(unsigned char *)(*((void *)v15 + 18) + 352))
  {
    unint64_t v22 = "set";
    __int16 v23 = 259;
    Tempunint64_t Symbol = llvm::MCContext::createTempSymbol(v15, (const llvm::Twine *)&v22, 1);
    (*(void (**)(llvm::MCStreamer *, unint64_t, unint64_t))(*(void *)this + 272))(this, TempSymbol, v14);
    uint64_t v17 = *((void *)this + 1);
    unint64_t v18 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v17 + 184, 24, 3);
    int v19 = *(unsigned __int8 *)(*(void *)(v17 + 144) + 18) << 16;
    *(unsigned char *)unint64_t v18 = 2;
    *(_DWORD *)(v18 + 1) = v19 | (*(unsigned __int8 *)(v18 + 4) << 24);
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = TempSymbol;
    return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, void))(*(void *)this + 504))(this, v18, a4, 0);
  }
  else
  {
    uint64_t v21 = *(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, void))(*(void *)this + 504);
    return v21(this, v14, a4, 0);
  }
}

uint64_t llvm::MCStreamer::emitAbsoluteSymbolDiffAsULEB128(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  uint64_t v6 = *((void *)this + 1);
  unint64_t v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v6 + 184, 24, 3);
  int v8 = *(unsigned __int8 *)(*(void *)(v6 + 144) + 18) << 16;
  *(unsigned char *)unint64_t v7 = 2;
  *(_DWORD *)(v7 + 1) = v8 | (*(unsigned __int8 *)(v7 + 4) << 24);
  *(void *)(v7 + 8) = 0;
  *(void *)(v7 + 16) = a2;
  uint64_t v9 = *((void *)this + 1);
  unint64_t v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v9 + 184, 24, 3);
  int v11 = *(unsigned __int8 *)(*(void *)(v9 + 144) + 18) << 16;
  *(unsigned char *)unint64_t v10 = 2;
  *(_DWORD *)(v10 + 1) = v11 | (*(unsigned __int8 *)(v10 + 4) << 24);
  *(void *)(v10 + 8) = 0;
  *(void *)(v10 + 16) = a3;
  unint64_t v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*((void *)this + 1) + 184, 32, 3);
  *(unsigned char *)unint64_t v12 = 0;
  *(_DWORD *)(v12 + 1) = (*(unsigned __int8 *)(v12 + 4) << 24) | 0x12;
  *(void *)(v12 + 8) = 0;
  *(void *)(v12 + 16) = v7;
  *(void *)(v12 + 24) = v10;
  int v13 = *(uint64_t (**)(llvm::MCStreamer *, unint64_t))(*(void *)this + 544);
  return v13(this, v12);
}

void llvm::MCStreamer::emitXCOFFExceptDirective(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
}

uint64_t llvm::MCStreamer::emitBinaryData(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 488))();
}

unint64_t llvm::MCStreamer::switchSection(unint64_t this, llvm::MCSection *a2, const llvm::MCExpr *a3)
{
  uint64_t v3 = *(void *)(this + 144) + 32 * *(unsigned int *)(this + 152);
  uint64_t v4 = *(llvm::MCSection **)(v3 - 32);
  unsigned int v5 = *(const llvm::MCExpr **)(v3 - 24);
  *(void *)(v3 - 16) = v4;
  *(void *)(v3 - 8) = v5;
  if (v4 != a2 || v5 != a3)
  {
    unint64_t v9 = this;
    this = (*(uint64_t (**)(unint64_t))(*(void *)this + 160))(this);
    uint64_t v10 = *(void *)(v9 + 144) + 32 * *(unsigned int *)(v9 + 152);
    *(void *)(v10 - 32) = a2;
    *(void *)(v10 - 24) = a3;
    int v11 = (llvm::MCSymbol *)*((void *)a2 + 1);
    if (v11)
    {
      this = llvm::MCSymbol::isInSection(v11);
      if ((this & 1) == 0)
      {
        unint64_t v12 = *(uint64_t (**)(unint64_t, llvm::MCSymbol *, void))(*(void *)v9 + 192);
        return v12(v9, v11, 0);
      }
    }
  }
  return this;
}

void std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v2 = (uint64_t **)*a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::unique_ptr<llvm::WinEH::FrameInfo>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    unsigned int v5 = v4 - 1;
    do
    {
      uint64_t v6 = *v5;
      uint64_t *v5 = 0;
      if (v6) {
        std::default_delete<llvm::WinEH::FrameInfo>::operator()[abi:nn180100]((uint64_t)v5, v6);
      }
    }
    while (v5-- != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::allocator<llvm::MCCFIInstruction>::construct[abi:nn180100]<llvm::MCCFIInstruction,llvm::MCCFIInstruction const&>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 12) = *(long long *)((char *)a2 + 12);
  *(void *)(a1 + 32) = 0;
  unsigned int v5 = (void *)(a1 + 32);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  unint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v6 = (unsigned char *)*((void *)a2 + 5);
  size_t v8 = v6 - v7;
  if (v6 != v7)
  {
    std::vector<char>::__vallocate[abi:nn180100](v5, v6 - v7);
    unint64_t v9 = *(char **)(a1 + 40);
    memmove(v9, v7, v8);
    *(void *)(a1 + 40) = &v9[v8];
  }
  uint64_t v10 = (std::string *)(a1 + 56);
  if (*((char *)a2 + 79) < 0)
  {
    unint64_t v12 = (const std::string::value_type *)*((void *)a2 + 7);
    std::string::size_type v13 = *((void *)a2 + 8);
    std::string::__init_copy_ctor_external(v10, v12, v13);
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
}

void std::default_delete<llvm::WinEH::FrameInfo>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v4 = (void **)(a2 + 160);
    std::vector<llvm::WinEH::FrameInfo::Segment>::__destroy_vector::operator()[abi:nn180100](&v4);
    long long v4 = (void **)(a2 + 136);
    std::vector<std::pair<llvm::MCSymbol *,llvm::WinEH::FrameInfo::Epilog>>::__destroy_vector::operator()[abi:nn180100](&v4);
    MEMORY[0x263E500A0](*(void *)(a2 + 112), 8);
    uint64_t v3 = *(void **)(a2 + 88);
    if (v3)
    {
      *(void *)(a2 + 96) = v3;
      operator delete(v3);
    }
    MEMORY[0x263E500B0](a2, 0x1060C40CDDC3B8FLL);
  }
}

void std::vector<llvm::WinEH::FrameInfo::Segment>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<llvm::WinEH::FrameInfo::Segment>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<llvm::WinEH::FrameInfo::Segment>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a2 + 56);
  if (v2)
  {
    *(void *)(a2 + 64) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x263E500A0);
}

void std::vector<std::pair<llvm::MCSymbol *,llvm::WinEH::FrameInfo::Epilog>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<llvm::MCSymbol *,llvm::WinEH::FrameInfo::Epilog>>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<llvm::MCSymbol *,llvm::WinEH::FrameInfo::Epilog>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    uint64_t v4 = *(void **)(i - 40);
    if (v4)
    {
      *(void *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::WinEH::FrameInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<llvm::WinEH::FrameInfo>::operator()[abi:nn180100](i - 8, v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

llvm::raw_ostream *llvm::MCSymbol::print(unsigned char *a1, llvm::raw_ostream *this, unsigned char *a3)
{
  if ((*a1 & 4) != 0)
  {
    unint64_t v7 = (void *)*((void *)a1 - 1);
    size_t v8 = *v7;
    unsigned int v5 = (unsigned __int8 *)(v7 + 2);
    size_t v6 = v8;
    if (!a3)
    {
LABEL_6:
      return llvm::raw_ostream::operator<<(this, v5, v6);
    }
  }
  else
  {
    unsigned int v5 = 0;
    size_t v6 = 0;
    if (!a3) {
      goto LABEL_6;
    }
  }
  uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(unsigned char *, unsigned __int8 *, size_t))(*(void *)a3 + 56))(a3, v5, v6);
  if (result) {
    goto LABEL_6;
  }
  if (!a3[185]) {
    llvm::report_fatal_error((llvm *)"Symbol name with unsupported characters", (const llvm::Twine *)1);
  }
  uint64_t v10 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v10 < *((void *)this + 3))
  {
    *((void *)this + 4) = v10 + 1;
    *uint64_t v10 = 34;
    if (v6) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
  for (uint64_t result = llvm::raw_ostream::write(this, 34); v6; --v6)
  {
LABEL_14:
    int v11 = *v5;
    if (v11 == 34)
    {
      uint64_t v15 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 > 1uLL)
      {
        *uint64_t v15 = 8796;
        goto LABEL_25;
      }
      std::string::size_type v13 = this;
      unint64_t v14 = "\\\"";
    }
    else
    {
      if (v11 != 10)
      {
        unint64_t v16 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v16 >= *((void *)this + 3))
        {
          uint64_t result = llvm::raw_ostream::write(this, v11);
        }
        else
        {
          *((void *)this + 4) = v16 + 1;
          *unint64_t v16 = v11;
        }
        goto LABEL_27;
      }
      unint64_t v12 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 > 1uLL)
      {
        *unint64_t v12 = 28252;
LABEL_25:
        *((void *)this + 4) += 2;
        goto LABEL_27;
      }
      std::string::size_type v13 = this;
      unint64_t v14 = "\\n";
    }
    uint64_t result = llvm::raw_ostream::write(v13, v14, 2uLL);
LABEL_27:
    ++v5;
  }
LABEL_28:
  uint64_t v17 = (unsigned char *)*((void *)this + 4);
  if ((unint64_t)v17 >= *((void *)this + 3))
  {
    return llvm::raw_ostream::write(this, 34);
  }
  else
  {
    *((void *)this + 4) = v17 + 1;
    unsigned char *v17 = 34;
  }
  return result;
}

void llvm::SubtargetFeatures::Split(char **a1, uint64_t a2, uint64_t a3)
{
  v33[6] = *MEMORY[0x263EF8340];
  v29[0] = a2;
  v29[1] = a3;
  long long v31 = v33;
  std::vector<std::string>::size_type __n = 0x300000000;
  llvm::StringRef::split((unsigned int *)v29, (unsigned int *)&v31, 44, -1, 0);
  std::vector<std::string>::reserve((std::vector<std::string> *)a1, __n);
  uint64_t v4 = (const void **)v31;
  if (!__n) {
    goto LABEL_31;
  }
  unsigned int v5 = (const void **)((char *)v31 + 16 * __n);
  do
  {
    size_t v6 = (size_t)v4[1];
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_34:
    }
      abort();
    unint64_t v7 = *v4;
    if (v6 >= 0x17)
    {
      uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v9 = v6 | 7;
      }
      uint64_t v10 = v9 + 1;
      p_dst = (long long *)operator new(v9 + 1);
      *((void *)&__dst + 1) = v6;
      unint64_t v28 = v10 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
LABEL_10:
      memmove(p_dst, v7, v6);
      goto LABEL_11;
    }
    HIBYTE(v28) = v4[1];
    p_dst = &__dst;
    if (v6) {
      goto LABEL_10;
    }
LABEL_11:
    *((unsigned char *)p_dst + v6) = 0;
    unint64_t v12 = (unint64_t)a1[1];
    unint64_t v11 = (unint64_t)a1[2];
    if (v12 >= v11)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)*a1) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_34;
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)*a1) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      v30.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
      if (v16) {
        uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      unint64_t v18 = &v17[24 * v13];
      *((void *)v18 + 2) = v28;
      *(_OWORD *)unint64_t v18 = __dst;
      unint64_t v28 = 0;
      long long __dst = 0uLL;
      uint64_t v20 = *a1;
      unint64_t v19 = (unint64_t)a1[1];
      if ((char *)v19 == *a1)
      {
        char v24 = 0;
        int64x2_t v23 = vdupq_n_s64(v19);
        uint64_t v21 = v18;
      }
      else
      {
        uint64_t v21 = &v17[24 * v13];
        do
        {
          long long v22 = *(_OWORD *)(v19 - 24);
          *((void *)v21 - 1) = *(void *)(v19 - 8);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          *(void *)(v19 - 16) = 0;
          *(void *)(v19 - 8) = 0;
          *(void *)(v19 - 24) = 0;
          v19 -= 24;
        }
        while ((char *)v19 != v20);
        int64x2_t v23 = *(int64x2_t *)a1;
        char v24 = HIBYTE(v28);
      }
      unint64_t v25 = v18 + 24;
      *a1 = v21;
      a1[1] = v18 + 24;
      *(int64x2_t *)&v30.__begin_ = v23;
      __int16 v26 = (std::string *)a1[2];
      a1[2] = &v17[24 * v16];
      v30.__end_cap_.__value_ = v26;
      v30.__first_ = (std::__split_buffer<std::string>::pointer)v23.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v30);
      a1[1] = v25;
      if (v24 < 0) {
        operator delete((void *)__dst);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v12 = __dst;
      *(void *)(v12 + 16) = v28;
      a1[1] = (char *)(v12 + 24);
    }
    v4 += 2;
  }
  while (v4 != v5);
  uint64_t v4 = (const void **)v31;
LABEL_31:
  if (v4 != v33) {
    free(v4);
  }
}

void llvm::SubtargetFeatures::AddFeature(char **a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  v30[0] = a2;
  v30[1] = a3;
  if (a3)
  {
    int v5 = *a2;
    if (v5 == 45 || v5 == 43)
    {
      llvm::StringRef::lower((llvm::StringRef *)v30, __p);
    }
    else
    {
      if (a4) {
        size_t v6 = "+";
      }
      else {
        size_t v6 = "-";
      }
      llvm::StringRef::lower((llvm::StringRef *)v30, &v27);
      unint64_t v7 = std::string::insert(&v27, 0, v6);
      std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
    }
    unint64_t v9 = (unint64_t)a1[2];
    unint64_t v10 = (unint64_t)a1[1];
    if (v10 >= v9)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)*a1) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      if (2 * v14 > v13) {
        unint64_t v13 = 2 * v14;
      }
      if (v14 >= 0x555555555555555) {
        unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v15 = v13;
      }
      v31.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
      if (v15) {
        unint64_t v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), v15);
      }
      else {
        unint64_t v16 = 0;
      }
      uint64_t v17 = &v16[24 * v12];
      long long v18 = *(_OWORD *)__p;
      *((void *)v17 + 2) = v29;
      *(_OWORD *)uint64_t v17 = v18;
      __p[1] = 0;
      std::string::size_type v29 = 0;
      __p[0] = 0;
      uint64_t v20 = *a1;
      unint64_t v19 = (unint64_t)a1[1];
      if ((char *)v19 == *a1)
      {
        int64x2_t v23 = vdupq_n_s64(v19);
        uint64_t v21 = &v16[24 * v12];
      }
      else
      {
        uint64_t v21 = &v16[24 * v12];
        do
        {
          long long v22 = *(_OWORD *)(v19 - 24);
          *((void *)v21 - 1) = *(void *)(v19 - 8);
          *(_OWORD *)(v21 - 24) = v22;
          v21 -= 24;
          *(void *)(v19 - 16) = 0;
          *(void *)(v19 - 8) = 0;
          *(void *)(v19 - 24) = 0;
          v19 -= 24;
        }
        while ((char *)v19 != v20);
        int64x2_t v23 = *(int64x2_t *)a1;
      }
      char v24 = v17 + 24;
      *a1 = v21;
      a1[1] = v17 + 24;
      *(int64x2_t *)&v31.__begin_ = v23;
      unint64_t v25 = (std::string *)a1[2];
      a1[2] = &v16[24 * v15];
      v31.__end_cap_.__value_ = v25;
      v31.__first_ = (std::__split_buffer<std::string>::pointer)v23.i64[0];
      std::__split_buffer<std::string>::~__split_buffer(&v31);
      int v26 = SHIBYTE(v29);
      a1[1] = v24;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)__p;
      *(void *)(v10 + 16) = v29;
      *(_OWORD *)unint64_t v10 = v11;
      __p[1] = 0;
      std::string::size_type v29 = 0;
      __p[0] = 0;
      a1[1] = (char *)(v10 + 24);
    }
    if (v5 != 43 && v5 != 45 && SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:nn180100]<std::string const*,std::string const*>(std::string **a1, uint64_t a2, std::string *__str, std::string *a4, uint64_t a5)
{
  int v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 24;
  unint64_t v7 = &(*a1)[v6];
  if (a5 < 1) {
    return v7;
  }
  unint64_t v9 = __str;
  unint64_t v13 = a1[2];
  long long v11 = (std::allocator<std::string> *)(a1 + 2);
  unint64_t v12 = v13;
  unint64_t v14 = *((void *)v11 - 1);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v13 - v14) >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v7) >> 3)) >= a5)
    {
      uint64_t v21 = &__str[a5];
      long long v22 = (std::string *)*((void *)v11 - 1);
    }
    else
    {
      uint64_t v21 = (std::string *)((char *)__str + 8 * ((uint64_t)(v14 - (void)v7) >> 3));
      long long v22 = (std::string *)*((void *)v11 - 1);
      if (v21 != a4)
      {
        int64x2_t v23 = &__str->__r_.__value_.__s.__data_[8 * ((uint64_t)(v14 - (void)v7) >> 3)];
        char v24 = (std::string *)*((void *)v11 - 1);
        do
        {
          if (v23[23] < 0)
          {
            std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v23, *((void *)v23 + 1));
          }
          else
          {
            long long v25 = *(_OWORD *)v23;
            v24->__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          }
          v23 += 24;
          ++v24;
          ++v22;
        }
        while (v23 != (char *)a4);
      }
      a1[1] = v22;
      if ((uint64_t)(v14 - (void)v7) < 1) {
        return v7;
      }
    }
    int v26 = &v7[a5];
    std::string v27 = &v22[-a5];
    unint64_t v28 = v22;
    if ((unint64_t)v27 < v14)
    {
      unint64_t v28 = v22;
      do
      {
        long long v29 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v28->__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
        ++v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        ++v27;
      }
      while ((unint64_t)v27 < v14);
    }
    a1[1] = v28;
    if (v22 != v26)
    {
      std::__split_buffer<std::string> v30 = v22 - 1;
      uint64_t v31 = 8 * (((char *)v22 - (char *)v26) >> 3);
      do
      {
        if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30->__r_.__value_.__l.__data_);
        }
        __int16 v32 = (long long *)((char *)&v7[-1] + v31);
        long long v33 = *v32;
        v30->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[(unint64_t)v31 / 8 - 1];
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v33;
        --v30;
        v7->__r_.__value_.__s.__data_[v31 - 1] = 0;
        *(unsigned char *)__int16 v32 = 0;
        v31 -= 24;
      }
      while (v31);
    }
    if (v21 != v9)
    {
      uint64_t v34 = v7;
      do
        std::string::operator=(v34++, v9++);
      while (v9 != v21);
    }
    return v7;
  }
  unint64_t v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (void)v5) >> 3);
  if (v15 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v5) >> 3);
  uint64_t v17 = 2 * v16;
  if (2 * v16 <= v15) {
    uint64_t v17 = v15;
  }
  if (v16 >= 0x555555555555555) {
    unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v18 = v17;
  }
  v51.__end_cap_.__value_ = v11;
  if (v18) {
    unint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v11, v18);
  }
  else {
    unint64_t v19 = 0;
  }
  uint64_t v35 = (std::string *)&v19[24 * v6];
  size_t v36 = &v19[24 * v18];
  uint64_t v37 = &v35[a5];
  uint64_t v38 = 24 * a5;
  long long v39 = v35;
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v39, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v40 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v39->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
    }
    ++v39;
    ++v9;
    v38 -= 24;
  }
  while (v38);
  int v41 = *a1;
  long long v42 = v35;
  if (*a1 != v7)
  {
    long long v43 = v7;
    long long v44 = v35;
    do
    {
      long long v42 = v44 - 1;
      long long v45 = *(_OWORD *)&v43[-1].__r_.__value_.__l.__data_;
      v44[-1].__r_.__value_.__r.__words[2] = v43[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44[-1].__r_.__value_.__l.__data_ = v45;
      v43[-1].__r_.__value_.__l.__size_ = 0;
      v43[-1].__r_.__value_.__r.__words[2] = 0;
      v43[-1].__r_.__value_.__r.__words[0] = 0;
      --v43;
      --v44;
    }
    while (v43 != v41);
  }
  uint64_t v46 = a1[1];
  if (v46 != v7)
  {
    do
    {
      long long v47 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v37->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v47;
      ++v37;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      ++v7;
    }
    while (v7 != v46);
    unint64_t v7 = a1[1];
  }
  uint64_t v48 = *a1;
  *a1 = v42;
  a1[1] = v37;
  size_t v49 = a1[2];
  a1[2] = (std::string *)v36;
  v51.__end_ = v7;
  v51.__end_cap_.__value_ = v49;
  v51.__first_ = v48;
  v51.__begin_ = v48;
  std::__split_buffer<std::string>::~__split_buffer(&v51);
  return v35;
}

uint64_t llvm::TargetRegistry::lookupTarget(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t llvm::MachO::getArchitectureFromName(uint64_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 4:
      if (*(_DWORD *)a1 != 909652841) {
        goto LABEL_67;
      }
      uint64_t result = 0;
      break;
    case 5:
      if (*(_DWORD *)a1 == 1986884193 && *(unsigned char *)(a1 + 4) == 54)
      {
        uint64_t result = 4;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(unsigned char *)(a1 + 4) == 53)
      {
        uint64_t result = 5;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(unsigned char *)(a1 + 4) == 55)
      {
        uint64_t result = 6;
      }
      else
      {
        if (*(_DWORD *)a1 != 913142369 || *(unsigned char *)(a1 + 4) != 52) {
          goto LABEL_67;
        }
        uint64_t result = 12;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 == 1597388920 && *(_WORD *)(a1 + 4) == 13366)
      {
        uint64_t result = 1;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 29748)
      {
        uint64_t result = 3;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 29495)
      {
        uint64_t result = 7;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27447)
      {
        uint64_t result = 8;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27958)
      {
        uint64_t result = 9;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27959)
      {
        uint64_t result = 10;
      }
      else
      {
        if (*(_DWORD *)a1 != 913142369 || *(_WORD *)(a1 + 4) != 25908) {
          goto LABEL_67;
        }
        uint64_t result = 13;
      }
      break;
    case 7:
      if (*(_DWORD *)a1 == 1597388920 && *(_DWORD *)(a1 + 3) == 1748252255)
      {
        uint64_t result = 2;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_DWORD *)(a1 + 3) == 1835349878)
      {
        uint64_t result = 11;
      }
      else
      {
        if (*(_DWORD *)a1 != 913142369 || *(_DWORD *)(a1 + 3) != 947270710) {
          goto LABEL_67;
        }
        uint64_t result = 15;
      }
      break;
    case 8:
      if (*(void *)a1 != 0x32335F34366D7261) {
        goto LABEL_67;
      }
      uint64_t result = 14;
      break;
    default:
LABEL_67:
      uint64_t result = 16;
      break;
  }
  return result;
}

const char *llvm::MachO::getArchitectureName(unsigned int a1)
{
  if (a1 > 0x10) {
    return "unknown";
  }
  else {
    return (&off_265596B50)[(char)a1];
  }
}

void llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>(unsigned int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = *a1;
  if (v4)
  {
    unsigned int v8 = 0;
    unsigned int v6 = 0;
LABEL_8:
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    unsigned int v11 = v6;
    while (v11 != 16)
    {
      unint64_t v12 = a2[2];
      if ((unint64_t)v9 < v12)
      {
        *v9++ = v11;
        a2[1] = v9;
        break;
      }
      unint64_t v19 = &v9[-v10];
      uint64_t v20 = (uint64_t)&v9[-v10 + 1];
      if (v20 < 0) {
        abort();
      }
      unint64_t v21 = v12 - v10;
      if (2 * v21 > v20) {
        uint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v22 = v20;
      }
      if (v22) {
        int64x2_t v23 = (char *)operator new(v22);
      }
      else {
        int64x2_t v23 = 0;
      }
      unint64_t v13 = &v19[(void)v23];
      char v24 = &v19[(void)v23];
      *char v24 = v11;
      unint64_t v14 = v24 + 1;
      if (v9 != (unsigned char *)v10)
      {
        long long v25 = &v9[~v10];
        do
        {
          char v26 = *--v9;
          (v25--)[(void)v23] = v26;
        }
        while (v9 != (unsigned char *)v10);
        unint64_t v13 = v23;
      }
      *a2 = v13;
      a2[1] = v14;
      a2[2] = &v23[v22];
      if (v10) {
        operator delete((void *)v10);
      }
      a2[1] = v14;
      if (v8 != -1) {
        goto LABEL_13;
      }
LABEL_19:
      unint64_t v9 = v14;
      unsigned int v8 = v11;
      unint64_t v10 = (unint64_t)v13;
      if (v11 == -1) {
        return;
      }
    }
    unint64_t v13 = (char *)v10;
    unint64_t v14 = v9;
LABEL_13:
    uint64_t v15 = v11;
    if ((v11 & 0xFFFFFFE0) != 0) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = 31;
    }
    while (v16 != v15)
    {
      unsigned int v17 = v15 + 1;
      unint64_t v18 = (unint64_t)*a1 >> v15++;
      if ((v18 & 2) != 0)
      {
        unsigned int v11 = v17;
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
    while (v5 != 31)
    {
      unsigned int v6 = v5 + 1;
      unint64_t v7 = v4 >> v5++;
      if ((v7 & 2) != 0)
      {
        if (v6 == -1) {
          return;
        }
        unsigned int v8 = v6;
        goto LABEL_8;
      }
    }
  }
}

uint64_t llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v4 = (unsigned __int8 *)_ZNSt3__113__lower_boundB8nn180100INS_17_ClassicAlgPolicyEPN4llvm5MachO6TargetES5_S4_NS_10__identityEZNS3_8addEntryINS2_11SmallVectorIS4_Lj5EEEEENT_8iteratorERSA_RKS4_EUlSE_SE_E_EET0_SG_T1_RKT2_RT4_RT3_(*(void *)a1, *(void *)a1 + 24 * *(unsigned int *)(a1 + 8), a2);
  uint64_t v5 = v4;
  if (v4 == (unsigned __int8 *)(*(void *)a1 + 24 * *(unsigned int *)(a1 + 8))) {
    return llvm::SmallVectorImpl<llvm::MachO::Target>::insert_one_impl<llvm::MachO::Target const&>(a1, (uint64_t)v4, (unint64_t)a2);
  }
  unsigned int v6 = *a2;
  unsigned int v7 = *v4;
  if (v6 < v7 || v7 >= v6 && *((_DWORD *)a2 + 1) < *((_DWORD *)v4 + 1)) {
    return llvm::SmallVectorImpl<llvm::MachO::Target>::insert_one_impl<llvm::MachO::Target const&>(a1, (uint64_t)v4, (unint64_t)a2);
  }
  return (uint64_t)v5;
}

uint64_t llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>(uint64_t **a1, const void *a2, size_t a3)
{
  v11[0] = a2;
  v11[1] = a3;
  unsigned int v6 = std::partition_point[abi:nn180100]<std::__wrap_iter<llvm::MachO::InterfaceFileRef *>,std::vector<llvm::MachO::InterfaceFileRef>::iterator llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>(std::vector<llvm::MachO::InterfaceFileRef>::iterator&,llvm::StringRef)::{lambda(llvm::MachO::InterfaceFileRef const&)#1}>(*a1, a1[1], a2, a3);
  unsigned int v7 = v6;
  if (a1[1] == v6) {
    return std::vector<llvm::MachO::InterfaceFileRef>::emplace<llvm::StringRef &>((char **)a1, (char *)v7, (uint64_t)v11);
  }
  LODWORD(v8) = *((char *)v6 + 23);
  BOOL v9 = (int)v8 < 0;
  if ((int)v8 < 0) {
    unsigned int v6 = (uint64_t *)*v6;
  }
  uint64_t v8 = v8;
  if (v9) {
    uint64_t v8 = v7[1];
  }
  if (v8 != a3 || a3 && memcmp(v6, a2, a3)) {
    return std::vector<llvm::MachO::InterfaceFileRef>::emplace<llvm::StringRef &>((char **)a1, (char *)v7, (uint64_t)v11);
  }
  return (uint64_t)v7;
}

double llvm::MachO::InterfaceFile::addParentUmbrella(uint64_t a1, unsigned __int8 *a2, void *__src, size_t __len)
{
  if (!__len) {
    return result;
  }
  uint64_t v8 = *(unsigned __int8 **)(a1 + 304);
  unsigned int v7 = *(unsigned __int8 **)(a1 + 312);
  if (v7 != v8)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 4);
    unsigned int v10 = *a2;
    do
    {
      unint64_t v11 = v9 >> 1;
      unint64_t v12 = &v8[48 * (v9 >> 1)];
      unsigned int v13 = *v12;
      if (v13 < v10 || v10 >= v13 && *((_DWORD *)v12 + 1) < *((_DWORD *)a2 + 1))
      {
        uint64_t v8 = v12 + 48;
        unint64_t v11 = v9 + ~v11;
      }
      unint64_t v9 = v11;
    }
    while (v11);
  }
  if (v8 == v7 || (v14 = *a2, unsigned int v15 = *v8, v14 < v15) || v15 >= v14 && *((_DWORD *)a2 + 1) < *((_DWORD *)v8 + 1))
  {
    if (__len <= 0x7FFFFFFFFFFFFFF7)
    {
      uint64_t v16 = (uint64_t *)(a1 + 304);
      if (__len >= 0x17)
      {
        size_t v18 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17) {
          size_t v18 = __len | 7;
        }
        size_t v19 = v18 + 1;
        p_dst = (long long *)operator new(v18 + 1);
        *((void *)&__dst + 1) = __len;
        unint64_t v26 = v19 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v26) = __len;
        p_dst = &__dst;
      }
      memmove(p_dst, __src, __len);
      *((unsigned char *)p_dst + __len) = 0;
      std::vector<std::pair<llvm::MachO::Target,std::string>>::emplace<llvm::MachO::Target const&,std::string>(v16, (uint64_t)v8, (long long *)a2, &__dst);
      if (SHIBYTE(v26) < 0) {
        operator delete((void *)__dst);
      }
      return result;
    }
LABEL_31:
    abort();
  }
  if (__len > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_31;
  }
  if (__len >= 0x17)
  {
    size_t v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v22 = __len | 7;
    }
    size_t v23 = v22 + 1;
    unint64_t v21 = (long long *)operator new(v22 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v26 = v23 | 0x8000000000000000;
    *(void *)&long long __dst = v21;
  }
  else
  {
    HIBYTE(v26) = __len;
    unint64_t v21 = &__dst;
  }
  memmove(v21, __src, __len);
  *((unsigned char *)v21 + __len) = 0;
  char v24 = (void **)(v8 + 24);
  if ((char)v8[47] < 0) {
    operator delete(*v24);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)char v24 = __dst;
  *((void *)v8 + 5) = v26;
  return result;
}

void std::vector<std::pair<llvm::MachO::Target,std::string>>::emplace<llvm::MachO::Target const&,std::string>(uint64_t *a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a2 - *a1;
  uint64_t v9 = v8 / 48;
  uint64_t v10 = *a1 + 48 * (v8 / 48);
  unint64_t v12 = a1 + 2;
  unint64_t v11 = a1[2];
  if (v6 >= v11)
  {
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v31 > 0x555555555555555) {
      abort();
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v7) >> 4);
    if (2 * v33 > v31) {
      unint64_t v31 = 2 * v33;
    }
    if (v33 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v34 = 0x555555555555555;
    }
    else {
      unint64_t v34 = v31;
    }
    uint64_t v70 = a1 + 2;
    if (v34)
    {
      uint64_t v35 = a3;
      size_t v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>((uint64_t)(a1 + 2), v34);
      a3 = v35;
      uint64_t v37 = v36;
    }
    else
    {
      uint64_t v37 = 0;
    }
    int v41 = &v37[48 * v9];
    __int16 v69 = &v37[48 * v34];
    if (v9 == v34)
    {
      if (v8 < 1)
      {
        uint64_t v62 = &v37[48 * v34];
        if (v7 == a2) {
          unint64_t v43 = 1;
        }
        else {
          unint64_t v43 = 2 * v9;
        }
        __int16 v66 = v12;
        uint64_t v44 = (uint64_t)v12;
        long long v45 = a3;
        uint64_t v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>(v44, v43);
        long long v47 = &v46[48 * (v43 >> 2)];
        *(void *)&long long v67 = v46;
        *((void *)&v67 + 1) = v47;
        *(void *)&long long v63 = v37;
        *((void *)&v63 + 1) = &v37[48 * v9];
        __int16 v69 = &v46[48 * v48];
        uint64_t v64 = *((void *)&v63 + 1);
        uint64_t v65 = v62;
        std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::~__split_buffer((uint64_t)&v63);
        a3 = v45;
        int v41 = v47;
      }
      else
      {
        uint64_t v42 = v9 + 2;
        if (v9 >= -1) {
          uint64_t v42 = v9 + 1;
        }
        v41 -= 48 * (v42 >> 1);
      }
    }
    long long v49 = *a3;
    *((void *)v41 + 2) = *((void *)a3 + 2);
    *(_OWORD *)int v41 = v49;
    long long v50 = *a4;
    *((void *)v41 + 5) = *((void *)a4 + 2);
    *(_OWORD *)(v41 + 24) = v50;
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    uint64_t v51 = (uint64_t)(v41 + 48);
    uint64_t v68 = (uint64_t)(v41 + 48);
    uint64_t v52 = *a1;
    if (*a1 != v10)
    {
      uint64_t v53 = v10;
      do
      {
        long long v54 = *(_OWORD *)(v53 - 48);
        *((void *)v41 - 4) = *(void *)(v53 - 32);
        *((_OWORD *)v41 - 3) = v54;
        long long v55 = *(_OWORD *)(v53 - 24);
        *((void *)v41 - 1) = *(void *)(v53 - 8);
        *(_OWORD *)(v41 - 24) = v55;
        v41 -= 48;
        *(void *)(v53 - 16) = 0;
        *(void *)(v53 - 8) = 0;
        *(void *)(v53 - 24) = 0;
        v53 -= 48;
      }
      while (v53 != v52);
      uint64_t v51 = v68;
    }
    *((void *)&v67 + 1) = v41;
    uint64_t v56 = a1[1];
    if (v56 != v10)
    {
      do
      {
        long long v57 = *(_OWORD *)v10;
        *(void *)(v51 + 16) = *(void *)(v10 + 16);
        *(_OWORD *)uint64_t v51 = v57;
        long long v58 = *(_OWORD *)(v10 + 24);
        *(void *)(v51 + 40) = *(void *)(v10 + 40);
        *(_OWORD *)(v51 + 24) = v58;
        *(void *)(v10 + 32) = 0;
        *(void *)(v10 + 40) = 0;
        *(void *)(v10 + 24) = 0;
        v51 += 48;
        v10 += 48;
      }
      while (v10 != v56);
      int v41 = (char *)*((void *)&v67 + 1);
      uint64_t v10 = a1[1];
    }
    uint64_t v59 = *a1;
    *a1 = (uint64_t)v41;
    a1[1] = v51;
    uint64_t v60 = (char *)a1[2];
    a1[2] = (uint64_t)v69;
    uint64_t v68 = v10;
    __int16 v69 = v60;
    *(void *)&long long v67 = v59;
    *((void *)&v67 + 1) = v59;
    std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::~__split_buffer((uint64_t)&v67);
  }
  else if (v10 == v6)
  {
    long long v38 = *a3;
    *(void *)(v10 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v10 = v38;
    uint64_t v39 = v7 + 48 * v9;
    long long v40 = *a4;
    *(void *)(v39 + 40) = *((void *)a4 + 2);
    *(_OWORD *)(v39 + 24) = v40;
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    a1[1] = v10 + 48;
  }
  else
  {
    long long v63 = *a3;
    uint64_t v64 = *((void *)a3 + 2);
    unsigned int v13 = *(void **)a4;
    *(void *)&long long v67 = *((void *)a4 + 1);
    *(void *)((char *)&v67 + 7) = *(void *)((char *)a4 + 15);
    char v14 = *((unsigned char *)a4 + 23);
    *((void *)a4 + 1) = 0;
    *((void *)a4 + 2) = 0;
    *(void *)a4 = 0;
    unint64_t v15 = a1[1];
    uint64_t v16 = v10 + 48;
    unint64_t v17 = v15 - 48;
    char v61 = v14;
    unint64_t v18 = v15;
    if (v15 >= 0x30)
    {
      do
      {
        long long v19 = *(_OWORD *)v17;
        *(void *)(v18 + 16) = *(void *)(v17 + 16);
        *(_OWORD *)unint64_t v18 = v19;
        long long v20 = *(_OWORD *)(v17 + 24);
        *(void *)(v18 + 40) = *(void *)(v17 + 40);
        *(_OWORD *)(v18 + 24) = v20;
        *(void *)(v17 + 32) = 0;
        *(void *)(v17 + 40) = 0;
        *(void *)(v17 + 24) = 0;
        v18 += 48;
        v17 += 48;
      }
      while (v17 < v15);
    }
    a1[1] = v18;
    if (v15 != v16)
    {
      uint64_t v21 = 0;
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v16) >> 4);
      uint64_t v23 = v7 + 48 * v22 + 48 * v9;
      uint64_t v24 = -48 * v22;
      do
      {
        uint64_t v25 = v23 + v21;
        uint64_t v26 = v15 + v21;
        long long v27 = *(_OWORD *)(v23 + v21 - 48);
        *(void *)(v26 - 32) = *(void *)(v23 + v21 - 32);
        *(_OWORD *)(v26 - 48) = v27;
        uint64_t v28 = v15 + v21 - 24;
        if (*(char *)(v15 + v21 - 1) < 0) {
          operator delete(*(void **)v28);
        }
        v21 -= 48;
        long long v29 = *(_OWORD *)(v25 - 24);
        *(void *)(v28 + 16) = *(void *)(v25 - 8);
        *(_OWORD *)uint64_t v28 = v29;
        *(unsigned char *)(v25 - 1) = 0;
        *(unsigned char *)(v25 - 24) = 0;
      }
      while (v24 != v21);
    }
    *(_OWORD *)uint64_t v10 = v63;
    *(void *)(v10 + 16) = v64;
    std::__split_buffer<std::string> v30 = (void **)(v7 + 48 * v9 + 24);
    if (*(char *)(v10 + 47) < 0) {
      operator delete(*v30);
    }
    *std::__split_buffer<std::string> v30 = v13;
    *(void *)(v7 + 48 * v9 + 32) = v67;
    *(void *)(v7 + 48 * v9 + 39) = *(void *)((char *)&v67 + 7);
    *(unsigned char *)(v7 + 48 * v9 + 47) = v61;
  }
}

void llvm::MachO::InterfaceFile::addRPath(uint64_t a1, unsigned __int8 *a2, void *__src, size_t __len)
{
  uint64_t v9 = *(unsigned __int8 **)(a1 + 400);
  uint64_t v8 = *(unsigned __int8 **)(a1 + 408);
  if (v8 != v9)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 4);
    unsigned int v11 = *a2;
    do
    {
      unint64_t v12 = v10 >> 1;
      unsigned int v13 = &v9[48 * (v10 >> 1)];
      unsigned int v14 = *v13;
      if (v14 < v11 || v11 >= v14 && *((_DWORD *)v13 + 1) < *((_DWORD *)a2 + 1))
      {
        uint64_t v9 = v13 + 48;
        unint64_t v12 = v10 + ~v12;
      }
      unint64_t v10 = v12;
    }
    while (v12);
  }
  if (v9 == v8) {
    goto LABEL_22;
  }
  if (*a2 != *v9 || *((_DWORD *)a2 + 1) != *((_DWORD *)v9 + 1)) {
    goto LABEL_22;
  }
  int v16 = (char)v9[47];
  if (v16 >= 0) {
    unint64_t v17 = v9 + 24;
  }
  else {
    unint64_t v17 = (const void *)*((void *)v9 + 3);
  }
  uint64_t v18 = *((void *)v9 + 4);
  if (v16 >= 0) {
    uint64_t v18 = v9[47];
  }
  if (__len != v18 || __len && memcmp(__src, v17, __len))
  {
LABEL_22:
    if (__len >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    long long v19 = (uint64_t *)(a1 + 400);
    if (__len >= 0x17)
    {
      size_t v21 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v21 = __len | 7;
      }
      size_t v22 = v21 + 1;
      p_dst = (long long *)operator new(v21 + 1);
      *((void *)&__dst + 1) = __len;
      unint64_t v24 = v22 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
    }
    else
    {
      HIBYTE(v24) = __len;
      p_dst = &__dst;
      if (!__len)
      {
LABEL_30:
        *((unsigned char *)p_dst + __len) = 0;
        std::vector<std::pair<llvm::MachO::Target,std::string>>::emplace<llvm::MachO::Target const&,std::string>(v19, (uint64_t)v9, (long long *)a2, &__dst);
        if (SHIBYTE(v24) < 0) {
          operator delete((void *)__dst);
        }
        return;
      }
    }
    memmove(p_dst, __src, __len);
    goto LABEL_30;
  }
}

uint64_t llvm::MachO::InterfaceFile::addDocument(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = (char **)(a1 + 376);
  unint64_t v6 = *(char **)(a1 + 376);
  uint64_t v5 = *(char **)(a1 + 384);
  uint64_t v7 = *a2;
  if (v5 != v6)
  {
    uint64_t v25 = v4;
    uint64_t v26 = a2;
    unint64_t v8 = (v5 - v6) >> 4;
    int v9 = *(char *)(v7 + 287);
    if (v9 >= 0) {
      size_t v10 = *(unsigned __int8 *)(v7 + 287);
    }
    else {
      size_t v10 = *(void *)(v7 + 272);
    }
    if (v9 >= 0) {
      unsigned int v11 = (const void *)(v7 + 264);
    }
    else {
      unsigned int v11 = *(const void **)(v7 + 264);
    }
    do
    {
      unint64_t v12 = &v6[16 * (v8 >> 1)];
      uint64_t v14 = *(void *)v12;
      unsigned int v13 = v12 + 16;
      unint64_t v15 = (const void *)(v14 + 264);
      size_t v16 = *(unsigned __int8 *)(v14 + 287);
      unint64_t v17 = *(const void **)(v14 + 264);
      size_t v18 = *(void *)(v14 + 272);
      if ((v16 & 0x80u) == 0) {
        size_t v19 = v16;
      }
      else {
        size_t v19 = v18;
      }
      if ((v16 & 0x80u) == 0) {
        long long v20 = v15;
      }
      else {
        long long v20 = v17;
      }
      if (v10 >= v19) {
        size_t v21 = v19;
      }
      else {
        size_t v21 = v10;
      }
      int v22 = memcmp(v20, v11, v21);
      BOOL v23 = v19 < v10;
      if (v22) {
        BOOL v23 = v22 < 0;
      }
      if (v23) {
        v8 += ~(v8 >> 1);
      }
      else {
        v8 >>= 1;
      }
      if (v23) {
        unint64_t v6 = v13;
      }
    }
    while (v8);
    uint64_t v5 = v6;
    unint64_t v4 = v25;
    a2 = v26;
  }
  *(void *)(v7 + 456) = a1;
  std::vector<std::shared_ptr<llvm::MachO::InterfaceFile>>::insert(v4, v5, a2);
  return *a2;
}

char *std::vector<std::shared_ptr<llvm::MachO::InterfaceFile>>::insert(char **a1, char *a2, uint64_t *a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 4;
  unint64_t v9 = (unint64_t)&(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unsigned int v11 = a1 + 2;
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    unint64_t v15 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
    if (v15 >> 60) {
      abort();
    }
    uint64_t v17 = v10 - (void)v6;
    if (v17 >> 3 > v15) {
      unint64_t v15 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v52 = v11;
    if (v18)
    {
      long long v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v18);
    }
    else
    {
      long long v20 = 0;
      uint64_t v19 = 0;
    }
    __int16 v32 = &v20[16 * v8];
    unint64_t v33 = &v20[16 * v19];
    uint64_t v51 = v33;
    if (v8 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v35 = 1;
        }
        else {
          unint64_t v35 = v7 >> 3;
        }
        long long v57 = v11;
        uint64_t v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v35);
        long long v49 = &v48[16 * (v35 >> 2)];
        uint64_t v53 = v20;
        long long v54 = &v20[16 * v8];
        long long v50 = v49;
        uint64_t v51 = &v48[16 * v36];
        long long v55 = v54;
        uint64_t v56 = v33;
        std::__split_buffer<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::~__split_buffer((uint64_t)&v53);
        __int16 v32 = v49;
      }
      else
      {
        unint64_t v34 = v8 + 2;
        if (v8 >= -1) {
          unint64_t v34 = v8 + 1;
        }
        v32 -= 16 * (v34 >> 1);
        long long v50 = v32;
      }
    }
    *(void *)__int16 v32 = *a3;
    uint64_t v37 = a3[1];
    *((void *)v32 + 1) = v37;
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    }
    long long v38 = v32 + 16;
    uint64_t v39 = *a1;
    long long v40 = v32;
    if (*a1 != (char *)v9)
    {
      int v41 = (char *)v9;
      long long v40 = v32;
      do
      {
        long long v42 = *((_OWORD *)v41 - 1);
        v41 -= 16;
        *((_OWORD *)v40 - 1) = v42;
        v40 -= 16;
        *(void *)int v41 = 0;
        *((void *)v41 + 1) = 0;
      }
      while (v41 != v39);
    }
    long long v49 = v40;
    unint64_t v43 = a1[1];
    if (v43 != (char *)v9)
    {
      do
      {
        *(_OWORD *)long long v38 = *(_OWORD *)v9;
        v38 += 16;
        *(void *)unint64_t v9 = 0;
        *(void *)(v9 + 8) = 0;
        v9 += 16;
      }
      while ((char *)v9 != v43);
      long long v40 = v49;
      unint64_t v9 = (unint64_t)a1[1];
    }
    uint64_t v44 = *a1;
    *a1 = v40;
    a1[1] = v38;
    long long v45 = a1[2];
    a1[2] = v51;
    long long v50 = (void *)v9;
    uint64_t v51 = v45;
    uint64_t v48 = v44;
    long long v49 = v44;
    std::__split_buffer<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::~__split_buffer((uint64_t)&v48);
    return v32;
  }
  else if (v9 == v5)
  {
    long long v31 = *(_OWORD *)a3;
    *(_OWORD *)unint64_t v9 = *(_OWORD *)a3;
    if (*((void *)&v31 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = (char *)(v9 + 16);
  }
  else
  {
    unint64_t v12 = v9 + 16;
    unint64_t v13 = v5 - 16;
    uint64_t v14 = a1[1];
    while (v13 < v5)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
      v14 += 16;
      *(void *)unint64_t v13 = 0;
      *(void *)(v13 + 8) = 0;
      v13 += 16;
    }
    a1[1] = v14;
    if (v5 != v12)
    {
      size_t v21 = (std::__shared_weak_count **)(v5 - 8);
      uint64_t v22 = (uint64_t)&v6[16 * v8 - 16];
      uint64_t v23 = 16 * ((uint64_t)(v5 - v12) >> 4);
      do
      {
        unint64_t v24 = (void *)(v22 + v23);
        long long v25 = *(_OWORD *)(v22 + v23);
        *unint64_t v24 = 0;
        v24[1] = 0;
        uint64_t v26 = *v21;
        *(_OWORD *)(v21 - 1) = v25;
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:nn180100](v26);
        }
        v21 -= 2;
        v23 -= 16;
      }
      while (v23);
    }
    if (v9 <= (unint64_t)v3) {
      v3 += 2 * (a1[1] > (char *)v3);
    }
    uint64_t v28 = *v3;
    uint64_t v27 = v3[1];
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)unint64_t v9 = v28;
    long long v29 = &v6[16 * v8];
    std::__split_buffer<std::string> v30 = (std::__shared_weak_count *)*((void *)v29 + 1);
    *((void *)v29 + 1) = v27;
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v30);
    }
  }
  return (char *)v9;
}

double llvm::MachO::InterfaceFile::setPath(uint64_t a1, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v12 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  unint64_t v9 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*v9);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)unint64_t v9 = __dst;
  *(void *)(a1 + 248) = v12;
  return result;
}

double llvm::MachO::InterfaceFile::setInstallName(uint64_t a1, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = __len;
    unint64_t v12 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len) {
LABEL_8:
  }
    memmove(p_dst, __src, __len);
  *((unsigned char *)p_dst + __len) = 0;
  unint64_t v9 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*v9);
  }
  double result = *(double *)&__dst;
  *(_OWORD *)unint64_t v9 = __dst;
  *(void *)(a1 + 280) = v12;
  return result;
}

void llvm::MachO::InterfaceFile::InterfaceFile(llvm::MachO::InterfaceFile *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = (char *)this + 32;
  *((void *)this + 10) = 0;
  *((void *)this + 3) = 0x400000000;
  *((void *)this + 8) = (char *)this + 80;
  *((void *)this + 9) = 0;
  *((void *)this + 11) = 1;
  *((void *)this + 12) = (char *)this + 112;
  *((void *)this + 13) = 0x500000000;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 64) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_DWORD *)((char *)this + 295) = 0;
  *((_DWORD *)this + 111) = 0;
  *(_OWORD *)((char *)this + 412) = 0u;
  *(_OWORD *)((char *)this + 428) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *(_OWORD *)((char *)this + 316) = 0u;
  *(_OWORD *)((char *)this + 332) = 0u;
  *(_OWORD *)((char *)this + 300) = 0u;
  operator new();
}

void *llvm::MachO::SymbolSet::exports@<X0>(llvm::MachO::SymbolSet *this@<X0>, uint64_t a2@<X8>)
{
  void v12[4] = *MEMORY[0x263EF8340];
  v12[0] = &unk_270DC2690;
  v12[3] = v12;
  uint64_t v3 = *((void *)this + 12);
  uint64_t v4 = *((unsigned int *)this + 28);
  if (*((_DWORD *)this + 26))
  {
    v8.i64[0] = *((void *)this + 12);
    v8.i64[1] = v3 + 32 * v4;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v8);
    int64x2_t v6 = v8;
    uint64_t v3 = *((void *)this + 12);
    uint64_t v4 = *((unsigned int *)this + 28);
  }
  else
  {
    int64x2_t v6 = vdupq_n_s64(v3 + 32 * v4);
  }
  int64x2_t v8 = v6;
  uint64_t v9 = v3 + 32 * v4;
  uint64_t v10 = v9;
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v11, (uint64_t)v12);
  llvm::make_filter_range<llvm::iterator_range<llvm::MachO::SymbolSet::const_symbol_iterator>,std::function<BOOL ()(llvm::MachO::Symbol const*)>>(v8.i64, (uint64_t)v11, a2);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v11);
  return std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v12);
}

void *llvm::make_filter_range<llvm::iterator_range<llvm::MachO::SymbolSet::const_symbol_iterator>,std::function<BOOL ()(llvm::MachO::Symbol const*)>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v18[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v16, a2);
  llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::filter_iterator_impl(v17, v6, v7, v8, v9, (uint64_t)v16);
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v13, a2);
  llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::filter_iterator_impl(v14, v11, v10, v11, v10, (uint64_t)v13);
  llvm::make_range<llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>>(v17, v14, a3);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v15);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v13);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v18);
  return std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v16);
}

void std::__function::__func<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::~__func()
{
}

void *std::__function::__func<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_270DC2690;
  return result;
}

void std::__function::__func<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC2690;
}

BOOL std::__function::__func<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::exports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(*(void *)a2 + 153) & 0x18) == 0;
}

void *llvm::make_range<llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>>@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v5 = a1[1];
  long long v12 = *a1;
  long long v13 = v5;
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v14, (uint64_t)(a1 + 2));
  long long v8 = *a2;
  long long v9 = a2[1];
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v10, (uint64_t)(a2 + 2));
  long long v6 = v13;
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v6;
  if (v15)
  {
    if (v15 == v14)
    {
      *(void *)(a3 + 56) = a3 + 32;
      (*(void (**)(void *))(v14[0] + 24))(v14);
    }
    else
    {
      *(void *)(a3 + 56) = v15;
      unint64_t v15 = 0;
    }
  }
  else
  {
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 64) = v8;
  *(_OWORD *)(a3 + 80) = v9;
  if (v11)
  {
    if (v11 == v10)
    {
      *(void *)(a3 + 120) = a3 + 96;
      (*(void (**)(void *))(v10[0] + 24))(v10);
    }
    else
    {
      *(void *)(a3 + 120) = v11;
      uint64_t v11 = 0;
    }
  }
  else
  {
    *(void *)(a3 + 120) = 0;
  }
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v10);
  return std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v14);
}

uint64_t std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::filter_iterator_impl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v12[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v12, a6);
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)(a1 + 4), (uint64_t)v12);
  llvm::filter_iterator_base<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::findNextValid((uint64_t)a1);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v12);
  return a1;
}

uint64_t llvm::filter_iterator_base<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::findNextValid(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(void *)result != *(void *)(result + 16))
  {
    uint64_t v2 = (uint64_t *)result;
    uint64_t v3 = result + 32;
    do
    {
      double result = std::function<BOOL ()(llvm::MachO::Symbol const*)>::operator()(v3, *(void *)(v1 + 24));
      if (result) {
        break;
      }
      *v2 += 32;
      double result = llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)v2);
      uint64_t v1 = *v2;
    }
    while (*v2 != v2[2]);
  }
  return result;
}

uint64_t std::function<BOOL ()(llvm::MachO::Symbol const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v6);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100](v4, v5);
}

void *std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::LookupBucketFor<llvm::SymbolsMapKey>(uint64_t *a1, llvm::hashing::detail::hash_state **a2, unsigned __int8 **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    char v17 = 0;
    v18[0] = 0;
    v18[1] = 0;
    char v15 = 3;
    v16[0] = 0;
    v16[1] = 0;
    unsigned int v7 = v4 - 1;
    uint64_t v8 = llvm::DenseMapInfo<llvm::SymbolsMapKey,void>::getHashValue(a2) & (v4 - 1);
    long long v9 = (unsigned __int8 *)(v6 + 32 * v8);
    size_t v21 = (unsigned __int8 *)a2;
    uint64_t v22 = a2 + 1;
    uint64_t v10 = v9 + 8;
    uint64_t v19 = (char *)v9;
    long long v20 = v9 + 8;
    if (std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v23, &v21, (unsigned __int8 **)&v19))
    {
      uint64_t result = 1;
    }
    else
    {
      long long v12 = 0;
      int v14 = 1;
      while (1)
      {
        size_t v21 = v9;
        uint64_t v22 = (llvm::hashing::detail::hash_state **)v10;
        uint64_t v19 = &v17;
        long long v20 = v18;
        if (std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v23, &v21, (unsigned __int8 **)&v19))
        {
          break;
        }
        size_t v21 = v9;
        uint64_t v22 = (llvm::hashing::detail::hash_state **)v10;
        uint64_t v19 = &v15;
        long long v20 = v16;
        if (std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v23, &v21, (unsigned __int8 **)&v19)&& v12 == 0)
        {
          long long v12 = v9;
        }
        uint64_t v8 = (v8 + v14) & v7;
        long long v9 = (unsigned __int8 *)(v6 + 32 * v8);
        size_t v21 = (unsigned __int8 *)a2;
        uint64_t v22 = a2 + 1;
        uint64_t v10 = v9 + 8;
        uint64_t v19 = (char *)v9;
        long long v20 = v9 + 8;
        BOOL v13 = std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v23, &v21, (unsigned __int8 **)&v19);
        uint64_t result = 1;
        ++v14;
        if (v13) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v12) {
        long long v9 = v12;
      }
    }
LABEL_4:
    *a3 = v9;
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

unint64_t llvm::DenseMapInfo<llvm::SymbolsMapKey,void>::getHashValue(llvm::hashing::detail::hash_state **a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v6 = llvm::hash_value<llvm::MachO::SymbolKind>(*(unsigned __int8 *)a1);
  unint64_t v5 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(a1[1], (uint64_t)a1[2] + (void)a1[1], v2, v3);
  llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v7);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v7, 0, v7, v8, (uint64_t *)&v6, (uint64_t *)&v5);
}

unint64_t llvm::hash_value<llvm::MachO::SymbolKind>(unsigned int a1)
{
  unint64_t v1 = 0x26A955000uLL;
  {
    unsigned int v8 = a1;
    unint64_t v1 = 0x26A955000uLL;
    int v6 = v5;
    a1 = v8;
    if (v6)
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      unint64_t v1 = 0x26A955000;
      a1 = v8;
    }
  }
  uint64_t v2 = *(void *)(v1 + 1016) + 8 * a1;
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v2) ^ ((0x9DDFEA08EB382D69 * v2) >> 47));
  return 0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47));
}

uint64_t _ZNSt3__113__lower_boundB8nn180100INS_17_ClassicAlgPolicyEPN4llvm5MachO6TargetES5_S4_NS_10__identityEZNS3_8addEntryINS2_11SmallVectorIS4_Lj5EEEEENT_8iteratorERSA_RKS4_EUlSE_SE_E_EET0_SG_T1_RKT2_RT4_RT3_(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (a2 != a1)
  {
    unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
    unsigned int v4 = *a3;
    a2 = a1;
    do
    {
      unint64_t v5 = v3 >> 1;
      int v6 = (unsigned __int8 *)(a2 + 24 * (v3 >> 1));
      unsigned int v9 = *v6;
      unint64_t v7 = v6 + 4;
      unsigned int v8 = v9;
      if (v9 < v4 || v4 >= v8 && *v7 < *((_DWORD *)a3 + 1))
      {
        a2 += 24 * (v3 >> 1) + 24;
        unint64_t v5 = v3 + ~v5;
      }
      unint64_t v3 = v5;
    }
    while (v5);
  }
  return a2;
}

uint64_t llvm::SmallVectorImpl<llvm::MachO::Target>::insert_one_impl<llvm::MachO::Target const&>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)a1 + 24 * *(unsigned int *)(a1 + 8) == a2)
  {
    unint64_t v17 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(a1, a3, 1);
    uint64_t v18 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
    long long v19 = *(_OWORD *)v17;
    *(void *)(v18 + 16) = *(void *)(v17 + 16);
    *(_OWORD *)uint64_t v18 = v19;
    LODWORD(v18) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v18;
    return *(void *)a1 + 24 * v18 - 24;
  }
  else
  {
    uint64_t v4 = a2 - *(void *)a1;
    unint64_t v5 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(a1, a3, 1);
    int v6 = (void *)(*(void *)a1 + v4);
    uint64_t v7 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 8);
    *(void *)(v7 + 16) = *(void *)(v7 - 8);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(v7 - 24);
    uint64_t v8 = *(void *)a1;
    unsigned int v9 = *(_DWORD *)(a1 + 8);
    uint64_t v10 = *(void *)a1 + 24 * v9 - 24;
    if ((void *)v10 != v6)
    {
      memmove(v6 + 3, v6, v10 - (void)v6);
      unsigned int v9 = *(_DWORD *)(a1 + 8);
      uint64_t v8 = *(void *)a1;
    }
    unsigned int v11 = v9 + 1;
    *(_DWORD *)(a1 + 8) = v11;
    unint64_t v12 = v8 + 24 * v11;
    BOOL v14 = v5 >= (unint64_t)v6 && v5 < v12;
    unint64_t v15 = v5 + 24 * v14;
    long long v16 = *(_OWORD *)v15;
    v6[2] = *(void *)(v15 + 16);
    *(_OWORD *)int v6 = v16;
  }
  return (uint64_t)v6;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    unint64_t v7 = *(void *)a1 + 24 * v4;
    if (*(void *)a1 <= a2 && v7 > a2)
    {
      unint64_t v9 = a2 - *(void *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 24);
      return *(void *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 24);
    }
  }
  return v3;
}

uint64_t std::vector<llvm::MachO::InterfaceFileRef>::emplace<llvm::StringRef &>(char **a1, char *a2, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = (uint64_t)&(*a1)[160 * (v7 / 160)];
  uint64_t v10 = a1 + 2;
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)v6) >> 5) + 1;
    if (v24 > 0x199999999999999) {
      abort();
    }
    unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v6) >> 5);
    if (2 * v26 > v24) {
      unint64_t v24 = 2 * v26;
    }
    if (v26 >= 0xCCCCCCCCCCCCCCLL) {
      unint64_t v27 = 0x199999999999999;
    }
    else {
      unint64_t v27 = v24;
    }
    long long v57 = v10;
    if (v27)
    {
      long long v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MachO::InterfaceFileRef>>(v27);
    }
    else
    {
      long long v29 = 0;
      uint64_t v28 = 0;
    }
    uint64_t v30 = v7 / 160;
    long long v31 = &v29[160 * (v7 / 160)];
    uint64_t v53 = v29;
    long long v54 = v31;
    __int16 v32 = &v29[160 * v28];
    long long v55 = v31;
    uint64_t v56 = v32;
    if (v7 / 160 == v28)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v34 = 1;
        }
        else {
          unint64_t v34 = 2 * v30;
        }
        v60[1] = v10;
        uint64_t v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MachO::InterfaceFileRef>>(v34);
        long long v54 = &v53[160 * (v34 >> 2)];
        *(void *)&long long __dst = v29;
        *((void *)&__dst + 1) = &v29[160 * (v7 / 160)];
        long long v55 = v54;
        uint64_t v56 = &v53[160 * v35];
        uint64_t v59 = *((void *)&__dst + 1);
        v60[0] = v32;
        std::__split_buffer<llvm::MachO::InterfaceFileRef>::~__split_buffer((uint64_t)&__dst);
        long long v31 = v54;
      }
      else
      {
        uint64_t v33 = v30 + 2;
        if (v30 >= -1) {
          uint64_t v33 = v30 + 1;
        }
        v31 -= 160 * (v33 >> 1);
        long long v54 = v31;
        long long v55 = v31;
      }
    }
    llvm::MachO::InterfaceFileRef::InterfaceFileRef(v31, *(void **)a3, *(void *)(a3 + 8));
    uint64_t v36 = v54;
    uint64_t v37 = v55 + 160;
    v55 += 160;
    long long v38 = *a1;
    if (*a1 == (char *)v8)
    {
      unint64_t v43 = v54;
    }
    else
    {
      uint64_t v39 = 0;
      do
      {
        long long v40 = &v36[v39];
        uint64_t v41 = v8 + v39;
        long long v42 = *(_OWORD *)(v8 + v39 - 160);
        *((void *)v40 - 18) = *(void *)(v8 + v39 - 144);
        *((_OWORD *)v40 - 10) = v42;
        *(void *)(v41 - 152) = 0;
        *(void *)(v41 - 144) = 0;
        *(void *)(v41 - 160) = 0;
        *((void *)v40 - 17) = &v36[v39 - 120];
        *(void *)&v36[v39 - 128] = 0x500000000;
        if (*(_DWORD *)(v8 + v39 - 128)) {
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v36[v39 - 136], v41 - 136);
        }
        v39 -= 160;
      }
      while ((char *)(v8 + v39) != v38);
      uint64_t v37 = v55;
      unint64_t v43 = &v36[v39];
    }
    long long v54 = v43;
    uint64_t v44 = a1[1];
    if (v44 != (char *)v8)
    {
      uint64_t v45 = 0;
      do
      {
        uint64_t v46 = (void *)(v8 + v45);
        long long v47 = &v37[v45];
        long long v48 = *(_OWORD *)(v8 + v45);
        *((void *)v47 + 2) = *(void *)(v8 + v45 + 16);
        *(_OWORD *)long long v47 = v48;
        v46[1] = 0;
        void v46[2] = 0;
        *uint64_t v46 = 0;
        *((void *)v47 + 3) = &v37[v45 + 40];
        *(void *)&v37[v45 + 32] = 0x500000000;
        if (*(_DWORD *)(v8 + v45 + 32)) {
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v37[v45 + 24], (uint64_t)(v46 + 3));
        }
        v45 += 160;
      }
      while (v46 + 20 != (void *)v44);
      unint64_t v43 = v54;
      uint64_t v8 = (uint64_t)a1[1];
      v37 += v45;
    }
    long long v49 = *a1;
    *a1 = v43;
    a1[1] = v37;
    long long v50 = a1[2];
    a1[2] = v56;
    long long v55 = (char *)v8;
    uint64_t v56 = v50;
    uint64_t v53 = v49;
    long long v54 = v49;
    std::__split_buffer<llvm::MachO::InterfaceFileRef>::~__split_buffer((uint64_t)&v53);
    return (uint64_t)v36;
  }
  else if (v8 == v5)
  {
    llvm::MachO::InterfaceFileRef::InterfaceFileRef(&(*a1)[160 * (v7 / 160)], *(void **)a3, *(void *)(a3 + 8));
    a1[1] = (char *)(v8 + 160);
  }
  else
  {
    uint64_t v52 = v7 / 160;
    char v61 = a1 + 2;
    llvm::MachO::InterfaceFileRef::InterfaceFileRef(&__dst, *(void **)a3, *(void *)(a3 + 8));
    unint64_t v11 = (unint64_t)a1[1];
    unint64_t v12 = v11 - 160;
    unint64_t v13 = v11;
    if (v11 >= 0xA0)
    {
      unint64_t v14 = 0;
      unint64_t v15 = &v6[160 * v52 + 32 * ((uint64_t)(v11 - (v8 + 160)) >> 5)];
      do
      {
        long long v16 = &v15[v14];
        unint64_t v17 = v11 + v14;
        long long v18 = *(_OWORD *)&v15[v14];
        *(void *)(v17 + 16) = *(void *)&v15[v14 + 16];
        *(_OWORD *)unint64_t v17 = v18;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = 0;
        *(void *)long long v16 = 0;
        *(void *)(v17 + 24) = v11 + v14 + 40;
        *(void *)(v11 + v14 + 32) = 0x500000000;
        if (*(_DWORD *)&v15[v14 + 32]) {
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=(v11 + v14 + 24, v12 + v14 + 24);
        }
        v14 += 160;
      }
      while ((unint64_t)(v16 + 160) < v11);
      unint64_t v13 = v11 + v14;
    }
    a1[1] = (char *)v13;
    if (v11 != v8 + 160)
    {
      uint64_t v19 = 0;
      do
      {
        long long v20 = (void **)(v11 + v19 - 160);
        if (*(char *)(v11 + v19 - 137) < 0) {
          operator delete(*v20);
        }
        size_t v21 = (long long *)(v12 + v19 - 160);
        long long v22 = *v21;
        *(void *)(v11 + v19 - 144) = *(void *)(v12 + v19 - 144);
        *(_OWORD *)long long v20 = v22;
        *(unsigned char *)(v12 + v19 - 137) = 0;
        *(unsigned char *)size_t v21 = 0;
        llvm::SmallVectorImpl<llvm::MachO::Target>::operator=(v11 + v19 - 136, v12 + v19 - 136);
        v19 -= 160;
      }
      while (-32 * ((uint64_t)(v11 - (v8 + 160)) >> 5) != v19);
    }
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    long long v23 = __dst;
    *(void *)(v8 + 16) = v59;
    *(_OWORD *)uint64_t v8 = v23;
    HIBYTE(v59) = 0;
    LOBYTE(__dst) = 0;
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v6[160 * v52 + 24], (uint64_t)v60);
    std::allocator<llvm::MachO::InterfaceFileRef>::destroy[abi:nn180100]((uint64_t)v61, (uint64_t)&__dst);
  }
  return v8;
}

uint64_t *std::partition_point[abi:nn180100]<std::__wrap_iter<llvm::MachO::InterfaceFileRef *>,std::vector<llvm::MachO::InterfaceFileRef>::iterator llvm::MachO::addEntry<std::vector<llvm::MachO::InterfaceFileRef>>(std::vector<llvm::MachO::InterfaceFileRef>::iterator&,llvm::StringRef)::{lambda(llvm::MachO::InterfaceFileRef const&)#1}>(uint64_t *a1, uint64_t *a2, const void *a3, size_t a4)
{
  if (a2 != a1)
  {
    v17[10] = v4;
    v17[11] = v5;
    uint64_t v8 = a1;
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 5);
    do
    {
      uint64_t v10 = &v8[20 * (v9 >> 1)];
      int v11 = *((char *)v10 + 23);
      BOOL v12 = v11 < 0;
      unint64_t v13 = (uint64_t *)*v10;
      if (v11 >= 0) {
        unint64_t v13 = &v8[20 * (v9 >> 1)];
      }
      uint64_t v14 = *((unsigned __int8 *)v10 + 23);
      if (v12) {
        uint64_t v14 = v10[1];
      }
      v17[0] = v13;
      v17[1] = v14;
      int v15 = llvm::StringRef::compare((uint64_t)v17, a3, a4);
      if (v15 >= 0) {
        v9 >>= 1;
      }
      else {
        v9 += ~(v9 >> 1);
      }
      if (v15 < 0) {
        uint64_t v8 = v10 + 20;
      }
    }
    while (v9);
    return v8;
  }
  return a2;
}

void *llvm::MachO::InterfaceFileRef::InterfaceFileRef(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    int v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  __dst[3] = __dst + 5;
  __dst[4] = 0x500000000;
  return __dst;
}

uint64_t llvm::SmallVectorImpl<llvm::MachO::Target>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    uint64_t v4 = *(const void **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::orc::JITDylib *>::assignRemote(a1, a2);
      return a1;
    }
    unint64_t v6 = *(unsigned int *)(a2 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      if (v6) {
        memmove(*(void **)a1, v4, 24 * v6);
      }
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if (v7)
      {
        memmove(*(void **)a1, v4, 24 * v7);
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6, 24);
    }
    uint64_t v7 = 0;
LABEL_12:
    uint64_t v8 = *(unsigned int *)(a2 + 8);
    if (v7 != v8) {
      memcpy((void *)(*(void *)a1 + 24 * v7), (const void *)(*(void *)a2 + 24 * v7), *(void *)a2 + 24 * v8 - (*(void *)a2 + 24 * v7));
    }
LABEL_14:
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 24 * v4);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 24 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 24);
    }
    uint64_t v5 = 0;
LABEL_10:
    unint64_t v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6) {
      memcpy((void *)(*(void *)a1 + 24 * v5), (const void *)(*(void *)a2 + 24 * v5), *(void *)a2 + 24 * v6 - (*(void *)a2 + 24 * v5));
    }
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::MachO::InterfaceFileRef>>(unint64_t a1)
{
  if (a1 >= 0x19999999999999ALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(160 * a1);
}

uint64_t std::__split_buffer<llvm::MachO::InterfaceFileRef>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 160;
    std::allocator<llvm::MachO::InterfaceFileRef>::destroy[abi:nn180100](v4, i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t *std::shared_ptr<llvm::MachO::InterfaceFile>::shared_ptr[abi:nn180100]<llvm::MachO::InterfaceFile,std::default_delete<llvm::MachO::InterfaceFile>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<llvm::MachO::InterfaceFile  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

llvm::MachO::InterfaceFile *std::__shared_ptr_pointer<llvm::MachO::InterfaceFile  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(llvm::MachO::InterfaceFile **)(a1 + 24);
  if (result)
  {
    llvm::MachO::InterfaceFile::~InterfaceFile(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

BOOL llvm::SmallVectorImpl<llvm::MachO::Target>::operator==(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  if (v2 != *((_DWORD *)a2 + 2)) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t)&(*a1)[24 * v2];
  uint64_t v5 = *a2;
  do
  {
    BOOL result = *v3 == *v5 && *((_DWORD *)v3 + 1) == *((_DWORD *)v5 + 1);
    v3 += 24;
    v5 += 24;
  }
  while (result && v3 != (unsigned __int8 *)v4);
  return result;
}

uint64_t collectFromArray(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unint64_t v6 = (uint64_t *)&Keys[a2];
  uint64_t result = llvm::json::Object::getArray(a3, *v6, v6[1]);
  if (result)
  {
    uint64_t v8 = *(unsigned __int16 **)result;
    unint64_t v9 = *(unsigned __int16 **)(result + 8);
    while (v8 != v9)
    {
      int v10 = *v8;
      if (v10 == 6)
      {
        int v11 = (void *)*((void *)v8 + 1);
        int v12 = *((char *)v8 + 31);
        if (v12 >= 0) {
          int v11 = v8 + 4;
        }
        uint64_t v13 = *((void *)v8 + 2);
        if (v12 >= 0) {
          uint64_t v13 = *((unsigned __int8 *)v8 + 31);
        }
      }
      else
      {
        if (v10 != 5)
        {
          v18[0] = "invalid ";
          v18[1] = 8;
          long long v19 = *(_OWORD *)v6;
          long long v20 = " section";
          uint64_t v21 = 8;
          int v15 = &v17;
          long long v16 = xmmword_261E8A720;
          llvm::SmallString<128u>::append(&v15, (uint64_t)v18, 3);
          llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
        }
        int v11 = (void *)*((void *)v8 + 1);
        uint64_t v13 = *((void *)v8 + 2);
      }
      uint64_t v14 = *(void *)(a4 + 24);
      int v15 = v11;
      *(void *)&long long v16 = v13;
      if (!v14) {
        std::__throw_bad_function_call[abi:nn180100]();
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)v14 + 48))(v14, &v15);
      v8 += 16;
    }
  }
  *a1 = 0;
  return result;
}

void llvm::make_error<JSONStubError,llvm::SmallString<128u>>()
{
}

void StubParser::getTargets(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t Array = llvm::json::Object::getArray(a2, (uint64_t)"targets", 7);
  if (!Array)
  {
    long long v18 = "invalid ";
    uint64_t v19 = 8;
    long long v20 = xmmword_265596C18;
    uint64_t v21 = " section";
    uint64_t v22 = 8;
    long long v23 = v25;
    long long v24 = xmmword_261E8A720;
    llvm::SmallString<128u>::append(&v23, (uint64_t)&v18, 3);
    llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
  }
  long long v18 = &v20;
  uint64_t v19 = 0x500000000;
  uint64_t v4 = *(unsigned __int16 **)Array;
  uint64_t v5 = *(unsigned __int16 **)(Array + 8);
  if (*(unsigned __int16 **)Array == v5)
  {
    *(unsigned char *)(a1 + 136) &= ~1u;
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = 0x500000000;
  }
  else
  {
    while (1)
    {
      int v6 = *v4;
      if (v6 == 6)
      {
        int v7 = *((char *)v4 + 31);
        uint64_t v8 = v7 >= 0 ? (uint64_t)(v4 + 4) : *((void *)v4 + 1);
        uint64_t v9 = v7 >= 0 ? *((unsigned __int8 *)v4 + 31) : *((void *)v4 + 2);
      }
      else
      {
        if (v6 != 5)
        {
          unint64_t v26 = "invalid ";
          uint64_t v27 = 8;
          long long v28 = xmmword_265596C28;
          long long v29 = " section";
          uint64_t v30 = 8;
          long long v23 = v25;
          long long v24 = xmmword_261E8A720;
          llvm::SmallString<128u>::append(&v23, (uint64_t)&v26, 3);
          llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
        }
        uint64_t v8 = *((void *)v4 + 1);
        uint64_t v9 = *((void *)v4 + 2);
      }
      llvm::MachO::Target::create(v8, v9, (uint64_t)v16);
      char v10 = v17;
      if (v17)
      {
        unint64_t v26 = "invalid ";
        uint64_t v27 = 8;
        long long v28 = xmmword_265596C28;
        long long v29 = " section";
        uint64_t v30 = 8;
        long long v23 = v25;
        long long v24 = xmmword_261E8A720;
        llvm::SmallString<128u>::append(&v23, (uint64_t)&v26, 3);
        llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
      }
      unint64_t v11 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>((uint64_t)&v18, (unint64_t)v16, 1);
      int v12 = (char *)v18 + 24 * v19;
      long long v13 = *(_OWORD *)v11;
      *((void *)v12 + 2) = *(void *)(v11 + 16);
      *(_OWORD *)int v12 = v13;
      LODWORD(v19) = v19 + 1;
      if (v17)
      {
        uint64_t v14 = v16[0];
        v16[0] = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
      if (v10) {
        break;
      }
      v4 += 16;
      if (v4 == v5)
      {
        int v15 = v19;
        *(unsigned char *)(a1 + 136) &= ~1u;
        *(void *)a1 = a1 + 16;
        *(void *)(a1 + 8) = 0x500000000;
        if (v15) {
          llvm::SmallVectorImpl<llvm::MachO::Target>::operator=(a1, (uint64_t)&v18);
        }
        break;
      }
    }
  }
  if (v18 != &v20) {
    free(v18);
  }
}

double getRequiredValue<llvm::StringRef,llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  int v7 = (uint64_t *)&Keys[a2];
  std::function<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::operator()((uint64_t)&v12, a4, a3, *v7, v7[1]);
  if (!v13)
  {
    long long v16 = "invalid ";
    uint64_t v17 = 8;
    long long v18 = *(_OWORD *)v7;
    uint64_t v19 = " section";
    uint64_t v20 = 8;
    *(void *)uint64_t v14 = v15;
    *(_OWORD *)&v14[8] = xmmword_261E8A720;
    llvm::SmallString<128u>::append(v14, (uint64_t)&v16, 3);
    llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
  }
  uint64_t v8 = *(void *)(a5 + 24);
  if (v8)
  {
    *(_OWORD *)uint64_t v14 = v12;
    (*(void (**)(long long *__return_ptr))(*(void *)v8 + 48))(&v10);
    if (!v11)
    {
      long long v16 = "invalid ";
      uint64_t v17 = 8;
      long long v18 = *(_OWORD *)v7;
      uint64_t v19 = " section";
      uint64_t v20 = 8;
      *(void *)uint64_t v14 = v15;
      *(_OWORD *)&v14[8] = xmmword_261E8A720;
      llvm::SmallString<128u>::append(v14, (uint64_t)&v16, 3);
      llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
    }
    *(unsigned char *)(a1 + 16) &= ~1u;
    double result = *(double *)&v10;
    *(_OWORD *)a1 = v10;
  }
  else
  {
    double result = *(double *)&v12;
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(a1 + 16) &= ~1u;
  }
  return result;
}

void *StubParser::collectSymbolsFromSegment(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  void v18[4] = *MEMORY[0x263EF8340];
  unsigned __int8 v12 = a4;
  v18[0] = &unk_270DC28C8;
  v18[1] = a3;
  void v18[2] = &v12;
  v18[3] = v18;
  collectFromArray(&v11, 29, a2, (uint64_t)v18);
  double result = std::__function::__value_func<void ()(llvm::StringRef)>::~__value_func[abi:nn180100](v18);
  uint64_t v8 = v11;
  if (!v11)
  {
    v17[0] = &unk_270DC2910;
    v17[1] = a3;
    long long v17[2] = &v12;
    v17[3] = v17;
    collectFromArray(&v10, 30, a2, (uint64_t)v17);
    uint64_t v8 = v10;
    double result = std::__function::__value_func<void ()(llvm::StringRef)>::~__value_func[abi:nn180100](v17);
    if (!v8)
    {
      v16[0] = &unk_270DC2958;
      v16[1] = a3;
      void v16[2] = &v12;
      void v16[3] = v16;
      collectFromArray(&v10, 31, a2, (uint64_t)v16);
      uint64_t v8 = v10;
      double result = std::__function::__value_func<void ()(llvm::StringRef)>::~__value_func[abi:nn180100](v16);
      if (!v8)
      {
        v15[0] = &unk_270DC29A0;
        v15[1] = a3;
        v15[2] = &v12;
        v15[3] = v15;
        collectFromArray(&v10, 32, a2, (uint64_t)v15);
        uint64_t v8 = v10;
        double result = std::__function::__value_func<void ()(llvm::StringRef)>::~__value_func[abi:nn180100](v15);
        if (!v8)
        {
          if ((v12 & 8) != 0) {
            int v9 = 4;
          }
          else {
            int v9 = 2;
          }
          v14[0] = &unk_270DC29E8;
          v14[1] = a3;
          long long v14[2] = v9 | v12;
          void v14[3] = v14;
          collectFromArray(&v10, 27, a2, (uint64_t)v14);
          uint64_t v8 = v10;
          double result = std::__function::__value_func<void ()(llvm::StringRef)>::~__value_func[abi:nn180100](v14);
          if (!v8)
          {
            v13[0] = &unk_270DC2A30;
            v13[1] = a3;
            v13[2] = v12;
            v13[3] = v13;
            collectFromArray(&v10, 28, a2, (uint64_t)v13);
            uint64_t v8 = v10;
            double result = std::__function::__value_func<void ()(llvm::StringRef)>::~__value_func[abi:nn180100](v13);
          }
        }
      }
    }
  }
  *a1 = v8;
  return result;
}

uint64_t StubParser::getSymbolSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  int v6 = (uint64_t *)&Keys[a3];
  uint64_t Array = llvm::json::Object::getArray(a2, *v6, v6[1]);
  if (Array)
  {
    uint64_t v36 = v38;
    uint64_t v37 = 0x100000000;
    uint64_t v33 = v35;
    uint64_t v34 = 0x500000000;
    int v9 = *(const llvm::json::Value **)Array;
    uint64_t v8 = *(const llvm::json::Value **)(Array + 8);
    if (*(const llvm::json::Value **)Array == v8)
    {
      *(unsigned char *)(a1 + 176) &= ~1u;
      *(void *)a1 = a1 + 16;
      *(void *)(a1 + 8) = 0x100000000;
    }
    else
    {
      char v10 = 8 * (a3 == 24);
      if (a3 == 23) {
        char v10 = 16;
      }
      unsigned __int8 v20 = v10 | 0x40;
      unsigned __int8 v21 = v10 | 0x20;
      do
      {
        llvm::json::Value::copyFrom((llvm::json::Value *)&v31, v9);
        if (v31 == 7)
        {
          StubParser::getTargets((uint64_t)v29, (uint64_t)v32);
          if (v30)
          {
            llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v33, a4);
            if (v30)
            {
              uint64_t v11 = (void *)v29[0];
              v29[0] = 0;
            }
            else
            {
              uint64_t v11 = 0;
            }
            long long v24 = v11;
            llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v24);
            if (v24) {
              (*(void (**)(void *))(*(void *)v24 + 8))(v24);
            }
          }
          else
          {
            llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v33, (uint64_t)v29);
          }
          *(void *)&long long v40 = 0;
          long long v12 = 0uLL;
          long long v39 = 0u;
          long long v24 = (char *)&v25 + 8;
          *(void *)&long long v25 = 0x500000000;
          if (v34)
          {
            llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v24, (uint64_t)&v33);
            long long v12 = v39;
            uint64_t v13 = v40;
          }
          else
          {
            uint64_t v13 = 0;
          }
          long long v27 = v12;
          uint64_t v28 = v13;
          *(void *)&long long v40 = 0;
          long long v39 = 0uLL;
          if (v37 >= HIDWORD(v37))
          {
            llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::growAndEmplaceBack<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>((uint64_t)&v36, (uint64_t)&v24);
          }
          else
          {
            std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](&v36[160 * v37], (uint64_t)&v24);
            LODWORD(v37) = v37 + 1;
          }
          long long v23 = (void **)&v27;
          std::vector<JSONSymbol>::__destroy_vector::operator()[abi:nn180100](&v23);
          if (v24 != (char *)&v25 + 8) {
            free(v24);
          }
          long long v23 = (void **)&v39;
          std::vector<JSONSymbol>::__destroy_vector::operator()[abi:nn180100](&v23);
          uint64_t Object = llvm::json::Object::getObject((uint64_t)v32, (uint64_t)"data", 4);
          uint64_t v15 = llvm::json::Object::getObject((uint64_t)v32, (uint64_t)"text", 4);
          if (!(Object | v15))
          {
            *(void *)&long long v39 = "invalid ";
            *((void *)&v39 + 1) = 8;
            long long v40 = *(_OWORD *)v6;
            uint64_t v41 = " section";
            uint64_t v42 = 8;
            long long v24 = &v26;
            long long v25 = xmmword_261E8A720;
            llvm::SmallString<128u>::append(&v24, (uint64_t)&v39, 3);
            llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
          }
          uint64_t v16 = v15;
          if (Object && (StubParser::collectSymbolsFromSegment(&v24, Object, (uint64_t)&v36, v21), (uint64_t v17 = v24) != 0)
            || v16 && (StubParser::collectSymbolsFromSegment(&v24, v16, (uint64_t)&v36, v20), (uint64_t v17 = v24) != 0))
          {
            *(unsigned char *)(a1 + 176) |= 1u;
            *(void *)a1 = v17;
            llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)v29);
            llvm::json::Value::destroy((llvm::json::Value *)&v31);
            goto LABEL_36;
          }
          llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)v29);
        }
        llvm::json::Value::destroy((llvm::json::Value *)&v31);
        int v9 = (const llvm::json::Value *)((char *)v9 + 32);
      }
      while (v9 != v8);
      int v18 = v37;
      *(unsigned char *)(a1 + 176) &= ~1u;
      *(void *)a1 = a1 + 16;
      *(void *)(a1 + 8) = 0x100000000;
      if (v18) {
        llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=(a1, (uint64_t)&v36);
      }
    }
LABEL_36:
    if (v33 != v35) {
      free(v33);
    }
  }
  else
  {
    uint64_t v36 = v38;
    uint64_t v37 = 0x100000000;
    *(unsigned char *)(a1 + 176) &= ~1u;
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = 0x100000000;
  }
  return llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector((uint64_t)&v36);
}

void StubParser::getLibSection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v27[15] = *MEMORY[0x263EF8340];
  uint64_t Array = llvm::json::Object::getArray(a2, *(void *)&Keys[a3], *((void *)&Keys[a3] + 1));
  if (Array)
  {
    int v18 = 0;
    uint64_t v19 = 0;
    uint64_t v17 = &v18;
    v26[0] = v27;
    v26[1] = (void *)0x500000000;
    int v9 = *(const llvm::json::Value **)Array;
    char v10 = *(const llvm::json::Value **)(Array + 8);
    if (*(const llvm::json::Value **)Array != v10)
    {
      while (1)
      {
        llvm::json::Value::copyFrom((llvm::json::Value *)&v24, v9);
        if (v24 == 7)
        {
          StubParser::getTargets((uint64_t)v22, (uint64_t)v25);
          if (v23)
          {
            llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v26, a5);
            if (v23)
            {
              uint64_t v11 = v22[0];
              v22[0] = 0;
            }
            else
            {
              uint64_t v11 = 0;
            }
            uint64_t v20 = v11;
            llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v20);
            if (v20) {
              (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
            }
          }
          else
          {
            llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v26, (uint64_t)v22);
          }
          v21[0] = &unk_270DC2A78;
          v21[1] = &v17;
          void v21[2] = v26;
          v21[3] = v21;
          collectFromArray(&v20, a4, (uint64_t)v25, (uint64_t)v21);
          std::__function::__value_func<void ()(llvm::StringRef)>::~__value_func[abi:nn180100](v21);
          uint64_t v12 = v20;
          if (v20)
          {
            *(unsigned char *)(a1 + 24) |= 1u;
            *(void *)a1 = v12;
            llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)v22);
            llvm::json::Value::destroy((llvm::json::Value *)&v24);
            goto LABEL_21;
          }
          llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)v22);
        }
        llvm::json::Value::destroy((llvm::json::Value *)&v24);
        int v9 = (const llvm::json::Value *)((char *)v9 + 32);
        if (v9 == v10)
        {
          uint64_t v14 = v17;
          uint64_t v13 = v18;
          uint64_t v15 = v19;
          goto LABEL_17;
        }
      }
    }
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = &v18;
LABEL_17:
    *(unsigned char *)(a1 + 24) &= ~1u;
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v13;
    uint64_t v16 = a1 + 8;
    *(void *)(a1 + 16) = v15;
    if (v15)
    {
      v13[2] = v16;
      uint64_t v17 = &v18;
      int v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      *(void *)a1 = v16;
    }
LABEL_21:
    if (v26[0] != v27) {
      free(v26[0]);
    }
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v17, v18);
  }
  else
  {
    *(unsigned char *)(a1 + 24) &= ~1u;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = a1 + 8;
  }
}

void *StubParser::getPackedVersion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = (uint64_t *)&Keys[a3];
  double result = (void *)llvm::json::Object::getArray(a2, *v4, v4[1]);
  if (!result || (int v6 = (_WORD *)*result, *result == result[1]))
  {
    *(unsigned char *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = 0x10000;
    return result;
  }
  if (*v6 != 7)
  {
    uint64_t v16 = "invalid ";
    uint64_t v17 = 8;
    long long v18 = *(_OWORD *)v4;
    uint64_t v19 = " section";
    uint64_t v20 = 8;
    *(void *)uint64_t v14 = v15;
    *(_OWORD *)&v14[8] = xmmword_261E8A720;
    llvm::SmallString<128u>::append(v14, (uint64_t)&v16, 3);
    llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
  }
  v13[0] = &unk_270DC2880;
  v13[1] = llvm::json::Object::getString;
  v13[2] = 0;
  v13[3] = v13;
  v11[0] = &unk_270DC2AC0;
  uint64_t v12 = v11;
  std::function<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::operator()((uint64_t)&v9, (uint64_t)v13, (uint64_t)(v6 + 4), (uint64_t)"version", 7);
  if (v10)
  {
    *(_OWORD *)uint64_t v14 = v9;
    if (!v12)
    {
      uint64_t v8 = std::__throw_bad_function_call[abi:nn180100]();
      return (void *)StubParser::parseToInterfaceFile(v8);
    }
    uint64_t v7 = (*(uint64_t (**)(void *, unsigned char *))(*v12 + 48))(v12, v14);
    if ((v7 & 0xFF00000000) == 0)
    {
      uint64_t v16 = "invalid ";
      uint64_t v17 = 8;
      long long v18 = xmmword_265596C98;
      uint64_t v19 = " section";
      uint64_t v20 = 8;
      *(void *)uint64_t v14 = v15;
      *(_OWORD *)&v14[8] = xmmword_261E8A720;
      llvm::SmallString<128u>::append(v14, (uint64_t)&v16, 3);
      llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
    }
    *(unsigned char *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = v7;
  }
  else
  {
    *(unsigned char *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = 0x10000;
  }
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](v13);
}

uint64_t StubParser::parseToInterfaceFile(uint64_t a1, uint64_t a2)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  uint64_t Array = llvm::json::Object::getArray(a2, (uint64_t)"target_info", 11);
  if (!Array)
  {
    long long v67 = "invalid ";
    uint64_t v68 = 8;
    long long v69 = xmmword_265596C18;
    uint64_t v70 = " section";
    uint64_t v71 = 8;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
    llvm::SmallString<128u>::append(&__p, (uint64_t)&v67, 3);
    llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
  }
  uint64_t v43 = a1;
  long long v67 = &v69;
  uint64_t v68 = 0x500000000;
  int v6 = *(_WORD **)Array;
  uint64_t v7 = *(_WORD **)(Array + 8);
  if (*(_WORD **)Array == v7)
  {
    char v104 = 0;
    uint64_t v101 = v103;
    uint64_t v102 = 0x500000000;
  }
  else
  {
    do
    {
      if (*v6 != 7)
      {
        __src = "invalid ";
        size_t __len = 8;
        long long v59 = xmmword_265596C28;
        uint64_t v60 = " section";
        uint64_t v61 = 8;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
        llvm::SmallString<128u>::append(&__p, (uint64_t)&__src, 3);
        llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
      }
      size_t v73 = &unk_270DC2880;
      uint64_t v74 = (uint64_t)llvm::json::Object::getString;
      v75[0] = 0;
      v75[1] = &v73;
      __int16 v66 = 0;
      getRequiredValue<llvm::StringRef,llvm::StringRef>((uint64_t)&v90, 5, (uint64_t)(v6 + 4), (uint64_t)&v73, (uint64_t)&v63);
      std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::StringRef)>::~__value_func[abi:nn180100](&v63);
      std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](&v73);
      if (BYTE8(v91))
      {
        __src = "invalid ";
        size_t __len = 8;
        long long v59 = xmmword_265596C28;
        uint64_t v60 = " section";
        uint64_t v61 = 8;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
        llvm::SmallString<128u>::append(&__p, (uint64_t)&__src, 3);
        llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
      }
      uint64_t v53 = (uint64_t *)&unk_270DC2880;
      uint64_t v54 = (uint64_t)llvm::json::Object::getString;
      uint64_t v55 = 0;
      uint64_t v56 = &v53;
      v100[1] = 0;
      getRequiredValue<llvm::StringRef,llvm::StringRef>((uint64_t)&__dst, 6, (uint64_t)(v6 + 4), (uint64_t)&v53, (uint64_t)v99);
      std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::StringRef)>::~__value_func[abi:nn180100](v99);
      std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](&v53);
      if (v88)
      {
        __src = "invalid ";
        size_t __len = 8;
        long long v59 = xmmword_265596C38;
        uint64_t v60 = " section";
        uint64_t v61 = 8;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
        llvm::SmallString<128u>::append(&__p, (uint64_t)&__src, 3);
        llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
      }
      long long v97 = 0uLL;
      if (llvm::VersionTuple::tryParse((unint64_t *)&v97, (unsigned __int8 *)__dst, (unint64_t)v87))
      {
        __src = "invalid ";
        size_t __len = 8;
        long long v59 = xmmword_265596C38;
        uint64_t v60 = " section";
        uint64_t v61 = 8;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
        llvm::SmallString<128u>::append(&__p, (uint64_t)&__src, 3);
        llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
      }
      llvm::MachO::Target::create((uint64_t)v90, v91, (uint64_t)&v105);
      if (v107)
      {
        __src = "invalid ";
        size_t __len = 8;
        long long v59 = xmmword_265596C28;
        uint64_t v60 = " section";
        uint64_t v61 = 8;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
        llvm::SmallString<128u>::append(&__p, (uint64_t)&__src, 3);
        llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
      }
      long long v106 = v97;
      llvm::MachO::getTargetTripleName((unsigned __int8 *)&v105, &v80);
      LOWORD(v60) = 260;
      __src = &v80;
      llvm::Triple::Triple(&__p, (const llvm::Twine *)&__src);
      Archuint64_t Name = llvm::Triple::getArchName((llvm::Triple *)&__p);
      LOBYTE(p_dst) = llvm::MachO::getArchitectureFromName(ArchName, v9);
      HIDWORD(p_dst) = llvm::MachO::mapToPlatformType((uint64_t)&__p);
      int v83 = (void *)llvm::MachO::mapToSupportedOSVersion((llvm::MachO *)&__p, v10);
      long long v84 = v11;
      unint64_t v12 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>((uint64_t)&v67, (unint64_t)&p_dst, 1);
      uint64_t v13 = (char *)v67 + 24 * v68;
      long long v14 = *(_OWORD *)v12;
      *((void *)v13 + 2) = *(void *)(v12 + 16);
      *(_OWORD *)uint64_t v13 = v14;
      LODWORD(v68) = v68 + 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      if (v107)
      {
        uint64_t v15 = v105;
        uint64_t v105 = 0;
        if (v15) {
          (*((void (**)(const void **))*v15 + 1))(v15);
        }
      }
      if ((BYTE8(v91) & 1) != 0 && v90) {
        (*((void (**)(const void **))*v90 + 1))(v90);
      }
      v6 += 16;
    }
    while (v6 != v7);
    char v104 = v2 & 0xFE;
    uint64_t v101 = v103;
    uint64_t v102 = 0x500000000;
    if (v68) {
      llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v101, (uint64_t)&v67);
    }
  }
  if (v67 != &v69) {
    free(v67);
  }
  if (v104)
  {
    long long v18 = v101;
    uint64_t v101 = 0;
    *(unsigned char *)(v43 + 8) |= 1u;
    *(void *)uint64_t v43 = v18;
    return llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)&v101);
  }
  v99[0] = v100;
  v99[1] = (void *)0x500000000;
  if (v102) {
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v99, (uint64_t)&v101);
  }
  uint64_t v16 = (void *)llvm::json::Object::getArray(a2, (uint64_t)"install_names", 13);
  if (!v16 || (uint64_t v17 = (_WORD *)*v16, *(_WORD *)*v16 != 7))
  {
    long long v67 = "invalid ";
    uint64_t v68 = 8;
    long long v69 = xmmword_265596C68;
    uint64_t v70 = " section";
    uint64_t v71 = 8;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
    llvm::SmallString<128u>::append(&__p, (uint64_t)&v67, 3);
    llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270DC2880;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)llvm::json::Object::getString;
  __p.__r_.__value_.__r.__words[2] = 0;
  v77[0] = &__p;
  *((void *)&v69 + 1) = 0;
  getRequiredValue<llvm::StringRef,llvm::StringRef>((uint64_t)&v97, 21, (uint64_t)(v17 + 4), (uint64_t)&__p, (uint64_t)&v67);
  std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::StringRef)>::~__value_func[abi:nn180100](&v67);
  std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](&__p);
  if (v98)
  {
    uint64_t v22 = v97;
  }
  else
  {
    StubParser::getPackedVersion((uint64_t)&v95, a2, 10);
    if (v96)
    {
      uint64_t v22 = v95;
    }
    else
    {
      StubParser::getPackedVersion((uint64_t)&v93, a2, 11);
      if ((v94 & 1) == 0)
      {
        uint64_t v19 = llvm::json::Object::getArray(a2, (uint64_t)"swift_abi", 9);
        if (v19)
        {
          uint64_t v20 = *(_WORD **)v19;
          if (*(void *)v19 != *(void *)(v19 + 8))
          {
            if (*v20 != 7)
            {
              long long v67 = "invalid ";
              uint64_t v68 = 8;
              long long v69 = xmmword_265596CA8;
              uint64_t v70 = " section";
              uint64_t v71 = 8;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
              llvm::SmallString<128u>::append(&__p, (uint64_t)&v67, 3);
              llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
            }
            __src = &unk_270DC27F0;
            size_t __len = (size_t)llvm::json::Object::getInteger;
            *(void *)&long long v59 = 0;
            *((void *)&v59 + 1) = &__src;
            llvm::json::Object::getInteger((uint64_t)(v20 + 4), (uint64_t)"abi", 3);
            if (!v21)
            {
              long long v67 = "invalid ";
              uint64_t v68 = 8;
              long long v69 = xmmword_265596CB8;
              uint64_t v70 = " section";
              uint64_t v71 = 8;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
              *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
              llvm::SmallString<128u>::append(&__p, (uint64_t)&v67, 3);
              llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
            }
            std::__function::__value_func<std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](&__src);
          }
        }
        LODWORD(v63) = 0;
        uint64_t v24 = llvm::json::Object::getArray(a2, (uint64_t)"flags", 5);
        if (!v24) {
          goto LABEL_59;
        }
        long long v25 = *(_WORD **)v24;
        if (*(void *)v24 == *(void *)(v24 + 8)) {
          goto LABEL_59;
        }
        if (*v25 != 7)
        {
          long long v67 = "invalid ";
          uint64_t v68 = 8;
          long long v69 = xmmword_265596C48;
          uint64_t v70 = " section";
          uint64_t v71 = 8;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
          *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
          llvm::SmallString<128u>::append(&__p, (uint64_t)&v67, 3);
          llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
        }
        __src = &unk_270DC2B08;
        size_t __len = (size_t)&v63;
        *((void *)&v59 + 1) = &__src;
        collectFromArray(&__p, 8, (uint64_t)(v25 + 4), (uint64_t)&__src);
        std::__function::__value_func<void ()(llvm::StringRef)>::~__value_func[abi:nn180100](&__src);
        std::string::size_type v26 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
          *(unsigned char *)(v43 + 8) |= 1u;
          *(void *)uint64_t v43 = v26;
        }
        else
        {
LABEL_59:
          uint64_t v27 = llvm::json::Object::getArray(a2, (uint64_t)"parent_umbrellas", 16);
          if (v27)
          {
            long long v91 = 0uLL;
            unsigned int v90 = (const void **)&v91;
            long long v67 = &v69;
            uint64_t v68 = 0x500000000;
            uint64_t v28 = *(const llvm::json::Value **)v27;
            long long v29 = *(const llvm::json::Value **)(v27 + 8);
            if (*(const llvm::json::Value **)v27 == v29)
            {
              v107 &= ~1u;
              long long v106 = 0uLL;
LABEL_85:
              uint64_t v105 = (const void **)&v106;
            }
            else
            {
              char v30 = v107;
              while (1)
              {
                llvm::json::Value::copyFrom((llvm::json::Value *)&v73, v28);
                if ((unsigned __int16)v73 != 7)
                {
                  __src = "invalid ";
                  size_t __len = 8;
                  long long v59 = xmmword_265596CC8;
                  uint64_t v60 = " section";
                  uint64_t v61 = 8;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
                  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_261E8A720;
                  llvm::SmallString<128u>::append(&__p, (uint64_t)&__src, 3);
                  llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
                }
                StubParser::getTargets((uint64_t)&__p, (uint64_t)&v74);
                if (v78)
                {
                  llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v67, (uint64_t)v99);
                  if (v78)
                  {
                    __int16 v31 = (void *)__p.__r_.__value_.__r.__words[0];
                    __p.__r_.__value_.__r.__words[0] = 0;
                  }
                  else
                  {
                    __int16 v31 = 0;
                  }
                  __src = v31;
                  llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&__src);
                  if (__src) {
                    (*(void (**)(void *))(*(void *)__src + 8))(__src);
                  }
                }
                else
                {
                  llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)&v67, (uint64_t)&__p);
                }
                long long v63 = (uint64_t *)&unk_270DC2880;
                uint64_t v64 = (uint64_t)llvm::json::Object::getString;
                uint64_t v65 = 0;
                __int16 v66 = &v63;
                uint64_t v56 = 0;
                getRequiredValue<llvm::StringRef,llvm::StringRef>((uint64_t)&__src, 16, (uint64_t)&v74, (uint64_t)&v63, (uint64_t)&v53);
                std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::StringRef)>::~__value_func[abi:nn180100](&v53);
                std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](&v63);
                char v32 = v59;
                if (v59)
                {
                  v30 |= 1u;
                  char v107 = v30;
                  uint64_t v105 = (const void **)__src;
                }
                else
                {
                  if (__src)
                  {
                    std::string::basic_string[abi:nn180100](&__dst, __src, __len);
                  }
                  else
                  {
                    int v87 = 0;
                    long long __dst = 0;
                    uint64_t v88 = 0;
                  }
                  p_dst = &__dst;
                  uint64_t v33 = std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v90, (const void **)&__dst, (_OWORD **)&p_dst);
                  llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v33 + 56, (uint64_t)v99);
                  if (SHIBYTE(v88) < 0) {
                    operator delete(__dst);
                  }
                }
                llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)&__p);
                llvm::json::Value::destroy((llvm::json::Value *)&v73);
                if (v32) {
                  break;
                }
                uint64_t v28 = (const llvm::json::Value *)((char *)v28 + 32);
                if (v28 == v29)
                {
                  char v107 = v30 & 0xFE;
                  uint64_t v105 = v90;
                  long long v106 = v91;
                  if (!*((void *)&v91 + 1)) {
                    goto LABEL_85;
                  }
                  *(void *)(v91 + 16) = &v106;
                  unsigned int v90 = (const void **)&v91;
                  long long v91 = 0uLL;
                  break;
                }
              }
            }
            if (v67 != &v69) {
              free(v67);
            }
            std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v90, (void *)v91);
            char v34 = v107;
          }
          else
          {
            char v34 = v107 & 0xFE;
            v107 &= ~1u;
            long long v106 = 0uLL;
            uint64_t v105 = (const void **)&v106;
          }
          if (v34)
          {
            uint64_t v35 = v105;
            uint64_t v105 = 0;
            *(unsigned char *)(v43 + 8) |= 1u;
            *(void *)uint64_t v43 = v35;
          }
          else
          {
            v52[0] = 0;
            v52[1] = 0;
            uint64_t v51 = v52;
            std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *> *,long>>>((uint64_t)&v51, v105, (const void ***)&v106);
            StubParser::getLibSection((uint64_t)&v90, a2, 17, 18, (uint64_t)v99);
            if (v92)
            {
              uint64_t v36 = (uint64_t *)v90;
              unsigned int v90 = 0;
              *(unsigned char *)(v43 + 8) |= 1u;
              *(void *)uint64_t v43 = v36;
            }
            else
            {
              v50[0] = 0;
              v50[1] = 0;
              long long v49 = v50;
              std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *> *,long>>>((uint64_t)&v49, v90, (const void ***)&v91);
              StubParser::getLibSection((uint64_t)&__dst, a2, 19, 20, (uint64_t)v99);
              if (v89)
              {
                uint64_t v37 = __dst;
                long long __dst = 0;
                *(unsigned char *)(v43 + 8) |= 1u;
                *(void *)uint64_t v43 = v37;
              }
              else
              {
                long long v47 = (void **)__dst;
                v48[0] = v87;
                v48[1] = v88;
                if (v88)
                {
                  v87[2] = v48;
                  long long __dst = &v87;
                  int v87 = 0;
                  uint64_t v88 = 0;
                }
                else
                {
                  long long v47 = v48;
                }
                StubParser::getLibSection((uint64_t)&p_dst, a2, 33, 34, (uint64_t)v99);
                if (v85)
                {
                  long long v38 = p_dst;
                  p_dst = 0;
                  *(unsigned char *)(v43 + 8) |= 1u;
                  *(void *)uint64_t v43 = v38;
                }
                else
                {
                  uint64_t v45 = p_dst;
                  v46[0] = v83;
                  v46[1] = v84;
                  if (v84)
                  {
                    v83[2] = v46;
                    p_dst = (void **)&v83;
                    int v83 = 0;
                    long long v84 = 0;
                  }
                  else
                  {
                    uint64_t v45 = (void **)v46;
                  }
                  StubParser::getLibSection((uint64_t)&v80, a2, 35, 20, (uint64_t)v99);
                  if (v81)
                  {
                    std::string::size_type v39 = v80.__r_.__value_.__r.__words[0];
                    v80.__r_.__value_.__r.__words[0] = 0;
                    *(unsigned char *)(v43 + 8) |= 1u;
                    *(void *)uint64_t v43 = v39;
                  }
                  else
                  {
                    std::string v44 = v80;
                    if (v80.__r_.__value_.__r.__words[2])
                    {
                      *(void *)(v80.__r_.__value_.__l.__size_ + 16) = &v44.__r_.__value_.__l.__size_;
                      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80.__r_.__value_.__l.__size_;
                      *(_OWORD *)&v80.__r_.__value_.__r.__words[1] = 0uLL;
                    }
                    else
                    {
                      v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44.__r_.__value_.__l.__size_;
                    }
                    StubParser::getSymbolSection((uint64_t)&__p, a2, 22, (uint64_t)v99);
                    if (v79)
                    {
                      std::string::size_type v40 = __p.__r_.__value_.__r.__words[0];
                      __p.__r_.__value_.__r.__words[0] = 0;
                      *(unsigned char *)(v43 + 8) |= 1u;
                      *(void *)uint64_t v43 = v40;
                    }
                    else
                    {
                      size_t v73 = v75;
                      uint64_t v74 = 0x100000000;
                      if (LODWORD(__p.__r_.__value_.__r.__words[1])) {
                        llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=((uint64_t)&v73, (uint64_t)&__p);
                      }
                      StubParser::getSymbolSection((uint64_t)&v67, a2, 23, (uint64_t)v99);
                      if (v72)
                      {
                        uint64_t v41 = v67;
                        long long v67 = 0;
                        *(unsigned char *)(v43 + 8) |= 1u;
                        *(void *)uint64_t v43 = v41;
                      }
                      else
                      {
                        long long v63 = &v65;
                        uint64_t v64 = 0x100000000;
                        if (v68) {
                          llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=((uint64_t)&v63, (uint64_t)&v67);
                        }
                        StubParser::getSymbolSection((uint64_t)&__src, a2, 24, (uint64_t)v99);
                        if ((v62 & 1) == 0)
                        {
                          uint64_t v53 = &v55;
                          uint64_t v54 = 0x100000000;
                          if (__len) {
                            llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=((uint64_t)&v53, (uint64_t)&__src);
                          }
                          operator new();
                        }
                        uint64_t v42 = __src;
                        __src = 0;
                        *(unsigned char *)(v43 + 8) |= 1u;
                        *(void *)uint64_t v43 = v42;
                        llvm::Expected<llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>>::~Expected((uint64_t)&__src);
                        llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector((uint64_t)&v63);
                      }
                      llvm::Expected<llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>>::~Expected((uint64_t)&v67);
                      llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector((uint64_t)&v73);
                    }
                    llvm::Expected<llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>>::~Expected((uint64_t)&__p);
                    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v44, (void *)v44.__r_.__value_.__l.__size_);
                  }
                  llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&v80);
                  std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v45, v46[0]);
                }
                llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&p_dst);
                std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v47, v48[0]);
              }
              llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&__dst);
              std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v49, v50[0]);
            }
            llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&v90);
            std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v51, v52[0]);
          }
          llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected((uint64_t)&v105);
        }
        goto LABEL_52;
      }
      uint64_t v22 = v93;
    }
  }
  *(unsigned char *)(v43 + 8) |= 1u;
  *(void *)uint64_t v43 = v22;
LABEL_52:
  if (v99[0] != v100) {
    free(v99[0]);
  }
  return llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected((uint64_t)&v101);
}

void llvm::MachO::TextAPIReader::getAsJSON(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  llvm::json::parse(*(llvm **)a1, *(void *)(a1 + 8), (uint64_t)&v39);
  if (v41)
  {
    uint64_t v8 = v39;
    uint64_t v39 = 0;
    *(unsigned char *)(a2 + 8) |= 1u;
    *(void *)a2 = v8;
    goto LABEL_67;
  }
  if ((unsigned __int16)v39 == 7) {
    uint64_t v3 = &v40;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v45 = (char *)&unk_270DC27F0;
  uint64_t v46 = llvm::json::Object::getInteger;
  long long v47 = 0;
  long long v48 = (void **)&v45;
  uint64_t v42 = (void (**)(void **))&unk_270DC2838;
  std::string v44 = (void **)&v42;
  Integer = (void *)llvm::json::Object::getInteger((uint64_t)v3, (uint64_t)"tapi_tbd_version", 16);
  if (!v5)
  {
    uint64_t v52 = "invalid ";
    uint64_t v53 = 8;
    long long v54 = Keys[0];
    uint64_t v55 = " section";
    uint64_t v56 = 8;
    long long v49 = v51;
    long long v50 = xmmword_261E8A720;
    llvm::SmallString<128u>::append(&v49, (uint64_t)&v52, 3);
    llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
  }
  if (v44)
  {
    long long v49 = Integer;
    uint64_t v6 = (*((uint64_t (**)(void **, void **))*v44 + 6))(v44, &v49);
    if ((v6 & 0xFF00000000) == 0)
    {
      uint64_t v52 = "invalid ";
      uint64_t v53 = 8;
      long long v54 = Keys[0];
      uint64_t v55 = " section";
      uint64_t v56 = 8;
      long long v49 = v51;
      long long v50 = xmmword_261E8A720;
      llvm::SmallString<128u>::append(&v49, (uint64_t)&v52, 3);
      llvm::make_error<JSONStubError,llvm::SmallString<128u>>();
    }
    int v7 = v6;
    if (v44 == (void **)&v42)
    {
      v42[4]((void **)&v42);
    }
    else if (v44)
    {
      (*((void (**)(void))*v44 + 5))();
    }
    std::__function::__value_func<std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](&v45);
  }
  else
  {
    int v7 = (int)Integer;
    std::__function::__value_func<std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](&v45);
  }
  uint64_t Object = llvm::json::Object::getObject((uint64_t)v3, (uint64_t)"main_library", 12);
  StubParser::parseToInterfaceFile((uint64_t)&v37, Object);
  char v10 = v37;
  if (v38)
  {
    uint64_t v37 = 0;
    *(unsigned char *)(a2 + 8) |= 1u;
    *(void *)a2 = v10;
    goto LABEL_66;
  }
  *((_DWORD *)v37 + 64) = v7;
  uint64_t v37 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  long long v47 = 0;
  uint64_t Array = llvm::json::Object::getArray((uint64_t)v3, (uint64_t)"libraries", 9);
  if (!Array)
  {
    uint64_t v3 = 0;
    LOBYTE(v13) = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    BYTE8(v54) = 0;
    *(void *)&long long v54 = 0;
LABEL_57:
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    long long v47 = 0;
    goto LABEL_58;
  }
  unint64_t v12 = *(const llvm::json::Value **)Array;
  uint64_t v36 = *(const llvm::json::Value **)(Array + 8);
  if (*(const llvm::json::Value **)Array == v36)
  {
    LOBYTE(v13) = 0;
    __int16 v31 = 0;
    long long v14 = 0;
    uint64_t v3 = 0;
LABEL_56:
    LOBYTE(v13) = v13 & 0xFE;
    BYTE8(v54) = v13;
    uint64_t v52 = (const char *)v3;
    uint64_t v53 = (uint64_t)v14;
    *(void *)&long long v54 = v31;
    goto LABEL_57;
  }
  uint64_t v34 = a2;
  int v35 = v7;
  uint64_t v13 = 0;
  long long v14 = 0;
  uint64_t v15 = *(const llvm::json::Value **)(Array + 8);
  while (1)
  {
    llvm::json::Value::copyFrom((llvm::json::Value *)&v49, v12);
    if ((unsigned __int16)v49 == 7) {
      uint64_t v16 = &v50;
    }
    else {
      uint64_t v16 = 0;
    }
    StubParser::parseToInterfaceFile((uint64_t)&v42, (uint64_t)v16);
    char v17 = v43;
    long long v18 = (uint64_t *)v42;
    uint64_t v42 = 0;
    if (v43)
    {
      uint64_t v13 = v13 | 1;
      uint64_t v3 = v18;
      goto LABEL_47;
    }
    if (v14 >= v47)
    {
      uint64_t v20 = v45;
      uint64_t v21 = (v14 - v45) >> 3;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61) {
        abort();
      }
      uint64_t v23 = v13;
      uint64_t v24 = v47 - v45;
      if ((v47 - v45) >> 2 > v22) {
        unint64_t v22 = v24 >> 2;
      }
      unint64_t v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v22;
      if (v25)
      {
        if (v25 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        std::string::size_type v26 = (char *)operator new(8 * v25);
      }
      else
      {
        std::string::size_type v26 = 0;
      }
      uint64_t v27 = (uint64_t **)&v26[8 * v21];
      uint64_t v28 = &v26[8 * v25];
      *uint64_t v27 = v18;
      uint64_t v19 = (unint64_t (*)(uint64_t, uint64_t, uint64_t))(v27 + 1);
      if (v14 == v20)
      {
        uint64_t v45 = (char *)v27;
        uint64_t v46 = (unint64_t (*)(uint64_t, uint64_t, uint64_t))(v27 + 1);
        long long v47 = &v26[8 * v25];
        uint64_t v13 = v23;
        uint64_t v15 = v36;
        if (!v14) {
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v13 = v23;
        do
        {
          long long v29 = (uint64_t *)*((void *)v14 - 1);
          v14 -= 8;
          *(void *)long long v14 = 0;
          *--uint64_t v27 = v29;
        }
        while (v14 != v20);
        long long v14 = v45;
        char v30 = (llvm::MachO::InterfaceFile **)v46;
        uint64_t v45 = (char *)v27;
        uint64_t v46 = v19;
        long long v47 = v28;
        uint64_t v15 = v36;
        while (v30 != (llvm::MachO::InterfaceFile **)v14)
          std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100](--v30, 0);
        if (!v14) {
          goto LABEL_46;
        }
      }
      operator delete(v14);
    }
    else
    {
      *(void *)long long v14 = v18;
      uint64_t v19 = (unint64_t (*)(uint64_t, uint64_t, uint64_t))(v14 + 8);
    }
LABEL_46:
    uint64_t v46 = v19;
    long long v14 = (char *)v19;
LABEL_47:
    llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected((uint64_t)&v42);
    llvm::json::Value::destroy((llvm::json::Value *)&v49);
    if (v17) {
      break;
    }
    unint64_t v12 = (const llvm::json::Value *)((char *)v12 + 32);
    if (v12 == v15)
    {
      uint64_t v3 = (uint64_t *)v45;
      __int16 v31 = v47;
      a2 = v34;
      int v7 = v35;
      goto LABEL_56;
    }
  }
  BYTE8(v54) = v13;
  uint64_t v52 = (const char *)v3;
  a2 = v34;
  int v7 = v35;
LABEL_58:
  long long v49 = &v45;
  std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v49);
  if (v13)
  {
    uint64_t v52 = 0;
    *(unsigned char *)(a2 + 8) |= 1u;
    *(void *)a2 = v3;
    llvm::Expected<std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>>::~Expected((uint64_t)&v52);
    llvm::MachO::InterfaceFile::~InterfaceFile(v10);
    MEMORY[0x263E500B0]();
  }
  else
  {
    char v32 = (uint64_t *)v53;
    while (v3 != v32)
    {
      *(_DWORD *)(*v3 + 256) = v7;
      std::shared_ptr<llvm::MachO::InterfaceFile>::shared_ptr[abi:nn180100]<llvm::MachO::InterfaceFile,std::default_delete<llvm::MachO::InterfaceFile>,void>((uint64_t *)&v49, v3);
      llvm::MachO::InterfaceFile::addDocument((uint64_t)v10, (uint64_t *)&v49);
      if ((void)v50) {
        std::__shared_weak_count::__release_shared[abi:nn180100]((std::__shared_weak_count *)v50);
      }
      ++v3;
    }
    *(unsigned char *)(a2 + 8) &= ~1u;
    *(void *)a2 = v10;
    llvm::Expected<std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>>::~Expected((uint64_t)&v52);
  }
LABEL_66:
  llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected((uint64_t)&v37);
LABEL_67:
  if (v41)
  {
    uint64_t v33 = v39;
    uint64_t v39 = 0;
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    }
  }
  else
  {
    llvm::json::Value::destroy((llvm::json::Value *)&v39);
  }
}

void *llvm::SmallString<128u>::append(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    int v7 = (uint64_t *)(a2 + 8);
    uint64_t v8 = 16 * a3;
    unint64_t v9 = a1[1];
    do
    {
      uint64_t v10 = *v7;
      v7 += 2;
      v9 += v10;
      v8 -= 16;
    }
    while (v8);
    double result = llvm::SmallVectorImpl<char>::resizeImpl<true>(a1, v9);
    unint64_t v12 = (size_t *)(a2 + 8);
    do
    {
      if (*v12)
      {
        double result = memmove((void *)(*a1 + v4), (const void *)*(v12 - 1), *v12);
        size_t v13 = *v12;
      }
      else
      {
        size_t v13 = 0;
      }
      v4 += v13;
      v12 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  else
  {
    unint64_t v14 = a1[1];
    return llvm::SmallVectorImpl<char>::resizeImpl<true>(a1, v14);
  }
  return result;
}

unsigned int *llvm::SmallVectorImpl<llvm::MachO::Target>::append<llvm::MachO::Target const*,void>(unsigned int *result, unsigned char *__src, unsigned char *a3)
{
  char v5 = result;
  size_t v6 = a3 - __src;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a3 - __src) >> 3);
  uint64_t v8 = result[2];
  if (v7 + v8 > result[3])
  {
    double result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v7 + v8, 24);
    LODWORD(v8) = v5[2];
  }
  if (__src != a3)
  {
    double result = (unsigned int *)memcpy((void *)(*(void *)v5 + 24 * v8), __src, v6);
    LODWORD(v8) = v5[2];
  }
  v5[2] = v8 + v7;
  return result;
}

void *llvm::MachO::SymbolSet::reexports@<X0>(llvm::MachO::SymbolSet *this@<X0>, uint64_t a2@<X8>)
{
  void v12[4] = *MEMORY[0x263EF8340];
  v12[0] = &unk_270DC2710;
  v12[3] = v12;
  uint64_t v3 = *((void *)this + 12);
  uint64_t v4 = *((unsigned int *)this + 28);
  if (*((_DWORD *)this + 26))
  {
    v8.i64[0] = *((void *)this + 12);
    v8.i64[1] = v3 + 32 * v4;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v8);
    int64x2_t v6 = v8;
    uint64_t v3 = *((void *)this + 12);
    uint64_t v4 = *((unsigned int *)this + 28);
  }
  else
  {
    int64x2_t v6 = vdupq_n_s64(v3 + 32 * v4);
  }
  int64x2_t v8 = v6;
  uint64_t v9 = v3 + 32 * v4;
  uint64_t v10 = v9;
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v11, (uint64_t)v12);
  llvm::make_filter_range<llvm::iterator_range<llvm::MachO::SymbolSet::const_symbol_iterator>,std::function<BOOL ()(llvm::MachO::Symbol const*)>>(v8.i64, (uint64_t)v11, a2);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v11);
  return std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v12);
}

void std::__function::__func<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::~__func()
{
}

void *std::__function::__func<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_270DC2710;
  return result;
}

void std::__function::__func<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC2710;
}

uint64_t std::__function::__func<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::reexports(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)a2 + 153) >> 4) & 1;
}

void *llvm::MachO::SymbolSet::undefineds@<X0>(llvm::MachO::SymbolSet *this@<X0>, uint64_t a2@<X8>)
{
  void v12[4] = *MEMORY[0x263EF8340];
  v12[0] = &unk_270DC2758;
  v12[3] = v12;
  uint64_t v3 = *((void *)this + 12);
  uint64_t v4 = *((unsigned int *)this + 28);
  if (*((_DWORD *)this + 26))
  {
    v8.i64[0] = *((void *)this + 12);
    v8.i64[1] = v3 + 32 * v4;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v8);
    int64x2_t v6 = v8;
    uint64_t v3 = *((void *)this + 12);
    uint64_t v4 = *((unsigned int *)this + 28);
  }
  else
  {
    int64x2_t v6 = vdupq_n_s64(v3 + 32 * v4);
  }
  int64x2_t v8 = v6;
  uint64_t v9 = v3 + 32 * v4;
  uint64_t v10 = v9;
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v11, (uint64_t)v12);
  llvm::make_filter_range<llvm::iterator_range<llvm::MachO::SymbolSet::const_symbol_iterator>,std::function<BOOL ()(llvm::MachO::Symbol const*)>>(v8.i64, (uint64_t)v11, a2);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v11);
  return std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v12);
}

void std::__function::__func<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::~__func()
{
}

void *std::__function::__func<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_270DC2758;
  return result;
}

void std::__function::__func<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC2758;
}

uint64_t std::__function::__func<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1},std::allocator<llvm::MachO::SymbolSet::undefineds(void)::{lambda(llvm::MachO::Symbol const*)#1}>,BOOL ()(llvm::MachO::Symbol const*)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)a2 + 153) >> 3) & 1;
}

void JSONStubError::~JSONStubError(void **this)
{
  *this = &unk_270DC27A0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_270DC27A0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x263E500B0);
}

llvm::raw_ostream *JSONStubError::log(JSONStubError *this, llvm::raw_ostream *a2)
{
  char v5 = (const char *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 8;
  uint64_t v4 = v5;
  int v6 = v3[23];
  if (v6 >= 0) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v6 >= 0) {
    size_t v8 = v3[23];
  }
  else {
    size_t v8 = *((void *)v3 + 1);
  }
  double result = llvm::raw_ostream::write(a2, v7, v8);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v10)
  {
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *uint64_t v10 = 10;
    ++*((void *)a2 + 4);
  }
  return result;
}

uint64_t JSONStubError::convertToErrorCode(JSONStubError *this)
{
  return 3;
}

void std::__function::__func<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::~__func()
{
}

__n128 std::__function::__func<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_270DC27F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC27F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<long long> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(void *, void, void))(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  char v5 = (void *)(*a2 + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, void, void))(*v5 + v3);
  }
  return v3(v5, *a3, a3[1]);
}

void *std::__function::__value_func<std::optional<long long> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<StubParser::getVersion(llvm::json::Object const*)::$_0,std::allocator<StubParser::getVersion(llvm::json::Object const*)::$_0>,std::optional<llvm::MachO::FileType> ()(long long)>::~__func()
{
}

void *std::__function::__func<StubParser::getVersion(llvm::json::Object const*)::$_0,std::allocator<StubParser::getVersion(llvm::json::Object const*)::$_0>,std::optional<llvm::MachO::FileType> ()(long long)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_270DC2838;
  return result;
}

void std::__function::__func<StubParser::getVersion(llvm::json::Object const*)::$_0,std::allocator<StubParser::getVersion(llvm::json::Object const*)::$_0>,std::optional<llvm::MachO::FileType> ()(long long)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC2838;
}

uint64_t std::__function::__func<StubParser::getVersion(llvm::json::Object const*)::$_0,std::allocator<StubParser::getVersion(llvm::json::Object const*)::$_0>,std::optional<llvm::MachO::FileType> ()(long long)>::operator()(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 5) {
    return 0x100000080;
  }
  else {
    return 0;
  }
}

uint64_t std::function<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v7[0] = a4;
  v7[1] = a5;
  uint64_t v6 = a3;
  if (!a2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x261DCD11CLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a2 + 48))(a2, &v6, v7);
}

void std::__function::__func<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::~__func()
{
}

__n128 std::__function::__func<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_270DC2880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC2880;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const,std::allocator<std::optional<llvm::StringRef> (llvm::json::Object::*)(llvm::StringRef)const>,std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::operator()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(uint64_t (**)(void *, void, void))(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  char v5 = (void *)(*a2 + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *, void, void))(*v5 + v3);
  }
  return v3(v5, *a3, a3[1]);
}

void *std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::json::Object const*,llvm::StringRef)>::~__value_func[abi:nn180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::optional<llvm::StringRef> ()(llvm::StringRef)>::~__value_func[abi:nn180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0>,void ()(llvm::StringRef)>::~__func()
{
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_270DC28C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC28C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_0>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  size_t v5 = *(void *)(a2 + 8);
  v7[0] = 0;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v9 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  char v10 = **(unsigned char **)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(*(void *)v6 + 160 * *(unsigned int *)(v6 + 8) - 24), (uint64_t)v7);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void std::vector<JSONSymbol>::emplace_back<JSONSymbol&>(void **a1, uint64_t a2)
{
  size_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v5 >= v4)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (v7 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x333333333333333) {
      unint64_t v10 = 0x666666666666666;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      if (v10 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v11 = (char *)operator new(40 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v12 = &v11[40 * v7];
    size_t v13 = &v11[40 * v10];
    std::allocator<JSONSymbol>::construct[abi:nn180100]<JSONSymbol,JSONSymbol&>(v12, a2);
    uint64_t v6 = v12 + 40;
    unint64_t v14 = (char *)*a1;
    uint64_t v15 = (void **)a1[1];
    if (v15 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        char v17 = &v12[v16 * 8];
        long long v18 = (char *)&v15[v16];
        *(v17 - 40) = (char)v15[v16 - 5];
        long long v19 = *(_OWORD *)&v15[v16 - 4];
        *((void *)v17 - 2) = v15[v16 - 2];
        *((_OWORD *)v17 - 2) = v19;
        *((void *)v18 - 3) = 0;
        *((void *)v18 - 2) = 0;
        *((void *)v18 - 4) = 0;
        *(v17 - 8) = (char)v15[v16 - 1];
        v16 -= 5;
      }
      while (&v15[v16] != (void **)v14);
      uint64_t v15 = (void **)*a1;
      uint64_t v20 = (void **)a1[1];
      *a1 = &v12[v16 * 8];
      a1[1] = v6;
      a1[2] = v13;
      while (v20 != v15)
      {
        if (*((char *)v20 - 9) < 0) {
          operator delete(*(v20 - 4));
        }
        v20 -= 5;
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    std::allocator<JSONSymbol>::construct[abi:nn180100]<JSONSymbol,JSONSymbol&>(a1[1], a2);
    uint64_t v6 = v5 + 40;
  }
  a1[1] = v6;
}

void std::allocator<JSONSymbol>::construct[abi:nn180100]<JSONSymbol,JSONSymbol&>(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)a2;
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[32] = *(unsigned char *)(a2 + 32);
}

void *std::__function::__value_func<void ()(llvm::StringRef)>::~__value_func[abi:nn180100](void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1>,void ()(llvm::StringRef)>::~__func()
{
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_270DC2910;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC2910;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_1>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  size_t v5 = *(void *)(a2 + 8);
  v7[0] = 1;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v9 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  char v10 = **(unsigned char **)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(*(void *)v6 + 160 * *(unsigned int *)(v6 + 8) - 24), (uint64_t)v7);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2>,void ()(llvm::StringRef)>::~__func()
{
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_270DC2958;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC2958;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_2>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  size_t v5 = *(void *)(a2 + 8);
  v7[0] = 2;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v9 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  char v10 = **(unsigned char **)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(*(void *)v6 + 160 * *(unsigned int *)(v6 + 8) - 24), (uint64_t)v7);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3>,void ()(llvm::StringRef)>::~__func()
{
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_270DC29A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC29A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_3>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  size_t v5 = *(void *)(a2 + 8);
  v7[0] = 3;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v9 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  char v10 = **(unsigned char **)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(*(void *)v6 + 160 * *(unsigned int *)(v6 + 8) - 24), (uint64_t)v7);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4>,void ()(llvm::StringRef)>::~__func()
{
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_270DC29E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC29E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_4>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  size_t v5 = *(void *)(a2 + 8);
  v6[0] = 0;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v8 = 0;
  }
  char v9 = *(unsigned char *)(a1 + 16);
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(**(void **)(a1 + 8) + 160 * *(unsigned int *)(*(void *)(a1 + 8) + 8) - 24), (uint64_t)v6);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5>,void ()(llvm::StringRef)>::~__func()
{
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x18uLL);
  *(void *)char v2 = &unk_270DC2A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC2A30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5,std::allocator<StubParser::collectSymbolsFromSegment(llvm::json::Object const*,llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u> &,llvm::MachO::SymbolFlags)::$_5>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  size_t v5 = *(void *)(a2 + 8);
  v6[0] = 0;
  if (v4)
  {
    std::string::basic_string[abi:nn180100](__p, v4, v5);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v8 = 0;
  }
  char v9 = *(unsigned char *)(a1 + 16) | 1;
  std::vector<JSONSymbol>::emplace_back<JSONSymbol&>((void **)(**(void **)(a1 + 8) + 160 * *(unsigned int *)(*(void *)(a1 + 8) + 8) - 24), (uint64_t)v6);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

uint64_t llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector(uint64_t a1)
{
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    v8[3] = v2;
    void v8[4] = v3;
    uint64_t v4 = a2;
    do
    {
      v8[0] = (void **)(v4 - 24);
      std::vector<JSONSymbol>::__destroy_vector::operator()[abi:nn180100](v8);
      unint64_t v7 = *(void **)(v4 - 160);
      v4 -= 160;
      uint64_t v6 = v7;
      if ((void *)(v4 + 16) != v7) {
        free(v6);
      }
    }
    while (v4 != a1);
  }
}

uint64_t llvm::Expected<llvm::SmallVector<llvm::MachO::Target,5u>>::~Expected(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 136);
  uint64_t v3 = *(void **)a1;
  if (v2)
  {
    *(void *)a1 = 0;
    if (v3) {
      (*(void (**)(void *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (v3 != (void *)(a1 + 16))
  {
    free(v3);
  }
  return a1;
}

void std::vector<JSONSymbol>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  char v2 = *a1;
  if (*v2)
  {
    std::vector<JSONSymbol>::__clear[abi:nn180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<JSONSymbol>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  a1[1] = v2;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::growAndEmplaceBack<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v4 = a1 + 16;
  size_t v5 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 160, &v7);
  std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](&v5[20 * *(unsigned int *)(a1 + 8)], a2);
  llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::moveElementsForGrow(a1, v5);
  int v6 = v7;
  if (*(void *)a1 != v4) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v6;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::moveElementsForGrow(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3)
  {
    uint64_t v6 = 160 * v3;
    do
    {
      std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](a2, v2);
      a2 += 20;
      v2 += 160;
      v6 -= 160;
    }
    while (v6);
    uint64_t v2 = *(void *)a1;
    unsigned int v7 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    unsigned int v7 = 0;
  }
  llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(v2, v2 + 160 * v7);
}

void *std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](void *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  if (*(_DWORD *)(a2 + 8)) {
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)a1, a2);
  }
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 136);
  a1[19] = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  return a1;
}

void std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:nn180100]<std::pair<std::string const,llvm::SmallVector<llvm::MachO::Target,5u>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,llvm::SmallVector<llvm::MachO::Target,5u>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  size_t v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0xC0uLL);
    v11[1] = a1 + 1;
    uint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    v8[1] = 0;
    _OWORD v8[2] = 0;
    void *v8 = 0;
    *((void *)v6 + 7) = (char *)v6 + 72;
    *((void *)v6 + 8) = 0x500000000;
    char v12 = 1;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>>>>::reset[abi:nn180100]((uint64_t)v11, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>>>>::reset[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,llvm::SmallVector<llvm::MachO::Target,5u>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__function::__func<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0,std::allocator<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0>,void ()(llvm::StringRef)>::~__func()
{
}

__n128 std::__function::__func<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0,std::allocator<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_270DC2A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0,std::allocator<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_270DC2A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0,std::allocator<StubParser::getLibSection(llvm::json::Object const*,TBDKey,TBDKey,llvm::SmallVector<llvm::MachO::Target,5u> const&)::$_0>,void ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  size_t v5 = *(uint64_t ***)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v3)
  {
    std::string::basic_string[abi:nn180100](__p, v3, *(void *)(a2 + 8));
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = __p;
  uint64_t v6 = std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (const void **)__p, (_OWORD **)&v9);
  llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)v6 + 56, v4);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void std::__function::__func<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0,std::allocator<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0>,std::optional<llvm::MachO::PackedVersion> ()(llvm::StringRef)>::~__func()
{
}

void *std::__function::__func<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0,std::allocator<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0>,std::optional<llvm::MachO::PackedVersion> ()(llvm::StringRef)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_270DC2AC0;
  return result;
}

void std::__function::__func<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0,std::allocator<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0>,std::optional<llvm::MachO::PackedVersion> ()(llvm::StringRef)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_270DC2AC0;
}

uint64_t std::__function::__func<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0,std::allocator<StubParser::getPackedVersion(llvm::json::Object const*,TBDKey)::$_0>,std::optional<llvm::MachO::PackedVersion> ()(llvm::StringRef)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v2 = a2[1];
  unsigned int v7 = 0;
  unsigned __int16 v4 = llvm::MachO::PackedVersion::parse64((int *)&v7, v3, v2);
  if ((_BYTE)v4) {
    BOOL v5 = v4 >= 0x100u;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return v7 | 0x100000000;
  }
}

void std::__function::__func<StubParser::getFlags(llvm::json::Object const*)::$_0,std::allocator<StubParser::getFlags(llvm::json::Object const*)::$_0>,void ()(llvm::StringRef)>::~__func()
{
}

void *std::__function::__func<StubParser::getFlags(llvm::json::Object const*)::$_0,std::allocator<StubParser::getFlags(llvm::json::Object const*)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_270DC2B08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<StubParser::getFlags(llvm::json::Object const*)::$_0,std::allocator<StubParser::getFlags(llvm::json::Object const*)::$_0>,void ()(llvm::StringRef)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270DC2B08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<StubParser::getFlags(llvm::json::Object const*)::$_0,std::allocator<StubParser::getFlags(llvm::json::Object const*)::$_0>,void ()(llvm::StringRef)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == 22)
  {
    uint64_t v8 = *v2;
    uint64_t v9 = v2[1];
    uint64_t v10 = *(uint64_t *)((char *)v2 + 14);
    if (v8 == 0x5F7070615F746F6ELL && v9 == 0x6F69736E65747865 && v10 == 0x656661735F6E6F69)
    {
      int v7 = 2;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v3 != 14
    || ((v4 = *v2, uint64_t v5 = *(uint64_t *)((char *)v2 + 6), v4 == 0x6D616E5F74616C66)
      ? (BOOL v6 = v5 == 0x6563617073656D61)
      : (BOOL v6 = 0),
        !v6))
  {
LABEL_16:
    int v7 = 0;
    goto LABEL_17;
  }
  int v7 = 1;
LABEL_17:
  **(_DWORD **)(result + 8) |= v7;
  return result;
}

uint64_t llvm::Expected<std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy(a1, *(void **)(a1 + 8));
  }
  return a1;
}

void std::map<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *> *,long>>>(uint64_t a1, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    v24[1] = v6;
    _OWORD v24[2] = v5;
    v24[13] = v3;
    v24[14] = v4;
    uint64_t v8 = a2;
    uint64_t v10 = (uint64_t **)(a1 + 8);
    uint64_t v11 = a1 + 16;
    while (1)
    {
      uint64_t v12 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v10) {
        break;
      }
      uint64_t v13 = v10;
      if (v12)
      {
        do
        {
          uint64_t v14 = v12;
          uint64_t v12 = *(void *)(v12 + 8);
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v14 = (uint64_t)v13[2];
          BOOL v15 = *(void *)v14 == (void)v13;
          uint64_t v13 = (uint64_t **)v14;
        }
        while (v15);
      }
      if (std::less<std::string>::operator()[abi:nn180100](v11, (const void **)(v14 + 32), v8 + 4))
      {
        if (!*v10) {
          goto LABEL_10;
        }
LABEL_12:
        v24[0] = v14;
        uint64_t v16 = (uint64_t **)(v14 + 8);
        goto LABEL_14;
      }
      uint64_t v16 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, v24, v8 + 4);
LABEL_14:
      if (!*v16) {
        goto LABEL_15;
      }
LABEL_21:
      uint64_t v20 = (const void **)v8[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = (const void ***)v20;
          uint64_t v20 = (const void **)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (const void ***)v8[2];
          BOOL v15 = *v21 == v8;
          uint64_t v8 = (const void **)v21;
        }
        while (!v15);
      }
      uint64_t v8 = (const void **)v21;
      if (v21 == a3) {
        return;
      }
    }
    uint64_t v14 = (uint64_t)v10;
    if (!v12)
    {
LABEL_10:
      v24[0] = (uint64_t)v10;
      uint64_t v16 = v10;
LABEL_15:
      char v17 = (uint64_t *)operator new(0xC0uLL);
      v22[1] = v10;
      long long v18 = (std::string *)(v17 + 4);
      if (*((char *)v8 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v18, (const std::string::value_type *)v8[4], (std::string::size_type)v8[5]);
      }
      else
      {
        long long v19 = *((_OWORD *)v8 + 2);
        v17[6] = (uint64_t)v8[6];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      }
      v17[7] = (uint64_t)(v17 + 9);
      v17[8] = 0x500000000;
      if (*((_DWORD *)v8 + 16)) {
        llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v17 + 7), (uint64_t)(v8 + 7));
      }
      char v23 = 1;
      std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at((uint64_t **)a1, v24[0], v16, v17);
      v22[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>>>>::reset[abi:nn180100]((uint64_t)v22, 0);
      goto LABEL_21;
    }
    goto LABEL_12;
  }
}

uint64_t llvm::Expected<llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    uint64_t v2 = *(void *)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    llvm::SmallVector<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,1u>::~SmallVector(a1);
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = a2 + 16;
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = (_DWORD *)(a2 + 8);
      unint64_t v7 = *(unsigned int *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a1 + 8);
      if (v8 >= v7)
      {
        uint64_t v11 = *(void *)a1;
        if (v7)
        {
          uint64_t v12 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *>(v4, v4 + 160 * v7, v11);
          uint64_t v11 = *(void *)a1;
          LODWORD(v8) = *(_DWORD *)(a1 + 8);
        }
        else
        {
          uint64_t v12 = *(uint64_t **)a1;
        }
        llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range((uint64_t)v12, v11 + 160 * v8);
        *(_DWORD *)(a1 + 8) = v7;
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)a2 + 160 * *(unsigned int *)(a2 + 8);
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v7)
        {
          if (v8) {
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *>(v4, v4 + 160 * v8, *(void *)a1);
          }
          else {
            uint64_t v8 = 0;
          }
        }
        else
        {
          llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(*(void *)a1, *(void *)a1 + 160 * v8);
          *(_DWORD *)(a1 + 8) = 0;
          uint64_t v21 = 0;
          uint64_t v9 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v7, 160, &v21);
          llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::moveElementsForGrow(a1, v9);
          int v10 = v21;
          if (*(void *)a1 != a1 + 16) {
            free(*(void **)a1);
          }
          uint64_t v8 = 0;
          *(void *)a1 = v9;
          *(_DWORD *)(a1 + 12) = v10;
        }
        uint64_t v15 = *(void *)a2;
        uint64_t v16 = *(unsigned int *)(a2 + 8);
        if (v8 != v16)
        {
          char v17 = (void *)(*(void *)a1 + 160 * v8);
          uint64_t v18 = v15 + 160 * v8;
          uint64_t v19 = 160 * v16 - 160 * v8;
          do
          {
            char v17 = std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>::pair[abi:nn180100](v17, v18)+ 20;
            v18 += 160;
            v19 -= 160;
          }
          while (v19);
          uint64_t v15 = *(void *)a2;
        }
        *(_DWORD *)(a1 + 8) = v7;
        uint64_t v14 = v15 + 160 * *v6;
        uint64_t v13 = v15;
      }
      llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(v13, v14);
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>>,false>::destroy_range(*(void *)a1, *(void *)a1 + 160 * *(unsigned int *)(a1 + 8));
      if (*(void *)a1 != a1 + 16) {
        free(*(void **)a1);
      }
      *(void *)a1 = *(void *)a2;
      uint64_t v6 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    _DWORD *v6 = 0;
  }
  return a1;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *,std::pair<llvm::SmallVector<llvm::MachO::Target,5u>,std::vector<JSONSymbol>> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = (uint64_t *)(a3 + 136);
    do
    {
      llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v5 - 17), v4);
      if (*v5)
      {
        std::vector<JSONSymbol>::__clear[abi:nn180100](v5);
        operator delete((void *)*v5);
        uint64_t *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      *(_OWORD *)uint64_t v5 = *(_OWORD *)(v4 + 136);
      v5[2] = *(void *)(v4 + 152);
      *(void *)(v4 + 136) = 0;
      *(void *)(v4 + 144) = 0;
      *(void *)(v4 + 152) = 0;
      v5 += 20;
      v4 += 160;
    }
    while (v4 != a2);
    return v5 - 17;
  }
  return (uint64_t *)a3;
}

uint64_t llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(uint64_t a1, int a2, const void *a3, size_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t result = llvm::MachO::SymbolSet::addGlobalImpl(a1, a2, a3, a4, a5);
  uint64_t v13 = *((unsigned int *)a6 + 2);
  if (v13)
  {
    uint64_t v14 = (long long *)*a6;
    uint64_t v15 = result + 16;
    uint64_t v16 = 24 * v13;
    do
    {
      long long v17 = *v14;
      uint64_t v19 = *((void *)v14 + 2);
      long long v18 = v17;
      uint64_t result = llvm::MachO::addEntry<llvm::SmallVector<llvm::MachO::Target,5u>>(v15, (unsigned __int8 *)&v18);
      uint64_t v14 = (long long *)((char *)v14 + 24);
      v16 -= 24;
    }
    while (v16);
  }
  if (a2 == 2) {
    return llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(a1, 1, a3, a4, a5, a6);
  }
  return result;
}

void std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (llvm::MachO::InterfaceFile **)**a1;
  if (v2)
  {
    uint64_t v4 = (llvm::MachO::InterfaceFile **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<llvm::MachO::InterfaceFile>::reset[abi:nn180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::Expected<std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>>::~Expected(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void **)a1;
    *(void *)a1 = 0;
    if (v2) {
      (*(void (**)(void *))(*(void *)v2 + 8))(v2);
    }
  }
  else
  {
    uint64_t v4 = (void **)a1;
    std::vector<std::unique_ptr<llvm::MachO::InterfaceFile>>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

uint64_t llvm::MachO::PackedVersion::parse32(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  v18[6] = *MEMORY[0x263EF8340];
  *a1 = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v16 = v18;
  uint64_t v17 = 0x300000000;
  llvm::SplitString(a2, a3, (unsigned int *)&v16, ".", 1);
  uint64_t v5 = v17;
  uint64_t v6 = (long long *)v16;
  if ((v17 - 4) < 0xFFFFFFFD)
  {
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  unint64_t v14 = 0;
  long long v15 = *(_OWORD *)v16;
  uint64_t v7 = 0;
  if ((llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v14, v4) & 1) == 0 && !*((void *)&v15 + 1))
  {
    if (!(v14 >> 16))
    {
      int v10 = v14 << 16;
      *a1 = v14 << 16;
      if (v5 < 2)
      {
LABEL_17:
        uint64_t v7 = 1;
      }
      else
      {
        uint64_t v11 = v6 + 1;
        uint64_t v12 = 8 * v5;
        uint64_t v13 = 8;
        while (1)
        {
          long long v15 = *v11;
          uint64_t v7 = 0;
          if ((llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v14, v9) & 1) != 0
            || *((void *)&v15 + 1))
          {
            break;
          }
          if (v14 > 0xFF) {
            goto LABEL_3;
          }
          v10 |= v14 << v13;
          *a1 = v10;
          ++v11;
          v13 -= 8;
          if (v12 + v13 == 16) {
            goto LABEL_17;
          }
        }
      }
      goto LABEL_4;
    }
    goto LABEL_3;
  }
LABEL_4:
  if (v6 != (long long *)v18) {
    free(v6);
  }
  return v7;
}

uint64_t llvm::MachO::PackedVersion::parse64(int *a1, uint64_t a2, unint64_t a3)
{
  v21[10] = *MEMORY[0x263EF8340];
  *a1 = 0;
  if (!a3) {
    return 0;
  }
  uint64_t v19 = v21;
  uint64_t v20 = 0x500000000;
  llvm::SplitString(a2, a3, (unsigned int *)&v19, ".", 1);
  unsigned int v5 = v20;
  uint64_t v6 = (long long *)v19;
  if ((v20 - 6) < 0xFFFFFFFB)
  {
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  unint64_t v17 = 0;
  long long v18 = *(_OWORD *)v19;
  uint64_t v7 = 0;
  if ((llvm::consumeUnsignedInteger((llvm *)&v18, (llvm::StringRef *)0xA, &v17, v4) & 1) == 0 && !*((void *)&v18 + 1))
  {
    int v10 = v17;
    if (!(v17 >> 24))
    {
      if (v17 < 0x10000)
      {
        int v11 = 0;
      }
      else
      {
        int v10 = 0xFFFF;
        unint64_t v17 = 0xFFFFLL;
        int v11 = 1;
      }
      int v12 = v10 << 16;
      *a1 = v10 << 16;
      if (v5 > 1)
      {
        if (v5 == 2) {
          uint64_t v13 = 16;
        }
        else {
          uint64_t v13 = 24;
        }
        unint64_t v14 = v6 + 1;
        uint64_t v15 = 8;
        do
        {
          long long v18 = *v14;
          if ((llvm::consumeUnsignedInteger((llvm *)&v18, (llvm::StringRef *)0xA, &v17, v9) & 1) != 0
            || *((void *)&v18 + 1)
            || (unint64_t v16 = v17, v17 >= 0x400))
          {
            uint64_t v7 = (v11 << 8);
            goto LABEL_4;
          }
          if (v17 >= 0x100)
          {
            unint64_t v17 = 255;
            int v11 = 1;
            unint64_t v16 = 255;
          }
          v12 |= v16 << v15;
          *a1 = v12;
          v15 -= 8;
          ++v14;
        }
        while (v13 + v15 != 16);
        if (v5 <= 3) {
          uint64_t v7 = (v11 << 8) | 1u;
        }
        else {
          uint64_t v7 = 257;
        }
      }
      else
      {
        uint64_t v7 = (v11 << 8) | 1u;
      }
      goto LABEL_4;
    }
    goto LABEL_3;
  }
LABEL_4:
  if (v6 != (long long *)v21) {
    free(v6);
  }
  return v7;
}

llvm::raw_ostream *llvm::MachO::PackedVersion::print(llvm::MachO::PackedVersion *this, llvm::raw_ostream *a2)
{
  int v4 = *((unsigned __int16 *)this + 1);
  uint64_t v7 = &unk_270DBD548;
  uint64_t v8 = "%d";
  int v9 = v4;
  uint64_t result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v7);
  int v6 = *(_DWORD *)this;
  if ((unsigned __int16)*(_DWORD *)this)
  {
    uint64_t v7 = &unk_270DBD548;
    uint64_t v8 = ".%d";
    int v9 = BYTE1(v6);
    uint64_t result = llvm::raw_ostream::operator<<(a2, (uint64_t)&v7);
    LOBYTE(v6) = *(unsigned char *)this;
  }
  if ((_BYTE)v6)
  {
    uint64_t v7 = &unk_270DBD548;
    uint64_t v8 = ".%d";
    int v9 = v6;
    return llvm::raw_ostream::operator<<(a2, (uint64_t)&v7);
  }
  return result;
}

uint64_t llvm::MachO::mapToPlatformType(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36);
  switch(v1)
  {
    case 28:
      BOOL v2 = *(_DWORD *)(a1 + 40) == 23;
      unsigned int v3 = 3;
      unsigned int v4 = 8;
      goto LABEL_6;
    case 29:
      BOOL v2 = *(_DWORD *)(a1 + 40) == 23;
      unsigned int v3 = 4;
      unsigned int v4 = 9;
LABEL_6:
      if (v2) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = v3;
      }
      break;
    case 30:
      uint64_t result = 5;
      break;
    case 31:
      uint64_t result = 10;
      break;
    case 32:
      if (*(_DWORD *)(a1 + 40) == 23) {
        uint64_t result = 12;
      }
      else {
        uint64_t result = 11;
      }
      break;
    case 33:
      uint64_t result = 14;
      break;
    default:
      if (v1 == 7)
      {
        int v6 = *(_DWORD *)(a1 + 40);
        if (v6 == 24) {
          unsigned int v7 = 6;
        }
        else {
          unsigned int v7 = 2;
        }
        if (v6 == 23) {
          uint64_t result = 7;
        }
        else {
          uint64_t result = v7;
        }
      }
      else
      {
        uint64_t result = v1 == 11;
      }
      break;
  }
  return result;
}

uint64_t **llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::insert@<X0>(uint64_t **result@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = result;
  if (result[6])
  {
    uint64_t result = std::__tree<llvm::MachO::PlatformType>::__emplace_unique_key_args<llvm::MachO::PlatformType,llvm::MachO::PlatformType const&>(result + 4, a2, a2);
    *(unsigned char *)(a3 + 8) = 0;
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 16) = v6;
  }
  else
  {
    uint64_t v7 = *((unsigned int *)result + 2);
    int v8 = *a2;
    if (!v7) {
      goto LABEL_11;
    }
    int v9 = *result;
    uint64_t v10 = 4 * v7;
    int v11 = *result;
    while (*(_DWORD *)v11 != v8)
    {
      int v11 = (uint64_t *)((char *)v11 + 4);
      int v9 = (uint64_t *)((char *)v9 + 4);
      v10 -= 4;
      if (!v10) {
        goto LABEL_10;
      }
    }
    if (v10)
    {
      *(unsigned char *)(a3 + 8) = 1;
      *(void *)a3 = v9;
      *(unsigned char *)(a3 + 16) = 0;
      return result;
    }
LABEL_10:
    if (v7 > 2)
    {
      do
      {
        uint64_t v13 = (int *)*v4 + v7 - 1;
        std::__tree<llvm::MachO::PlatformType>::__emplace_unique_key_args<llvm::MachO::PlatformType,llvm::MachO::PlatformType const&>(v4 + 4, v13, v13);
        LODWORD(v7) = *((_DWORD *)v4 + 2) - 1;
        *((_DWORD *)v4 + 2) = v7;
      }
      while (v7);
      uint64_t result = std::__tree<llvm::MachO::PlatformType>::__emplace_unique_key_args<llvm::MachO::PlatformType,llvm::MachO::PlatformType const&>(v4 + 4, a2, a2);
      *(unsigned char *)(a3 + 8) = 0;
      *(void *)a3 = result;
      *(unsigned char *)(a3 + 16) = 1;
    }
    else
    {
LABEL_11:
      uint64_t result = (uint64_t **)llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)result, v8);
      uint64_t v12 = (uint64_t)*v4 + 4 * *((unsigned int *)v4 + 2) - 4;
      *(unsigned char *)(a3 + 8) = 1;
      *(void *)a3 = v12;
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
  return result;
}

void llvm::MachO::getOSAndEnvironmentName(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 6:
      std::operator+<char>();
      unsigned int v3 = "-macabi";
      goto LABEL_4;
    case 7:
    case 8:
    case 9:
    case 12:
      std::operator+<char>();
      unsigned int v3 = "-simulator";
LABEL_4:
      unsigned int v4 = std::string::append(&v6, v3);
      std::string::size_type v5 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
      break;
    case 13:
      __break(1u);
      JUMPOUT(0x261DCF330);
    default:
      std::operator+<char>();
      break;
  }
}

unint64_t llvm::MachO::mapToSupportedOSVersion(llvm::MachO *this, const llvm::Triple *a2)
{
  v7[0] = llvm::Triple::getMinimumSupportedOSVersion(this);
  v7[1] = v3;
  v6[0] = llvm::Triple::getOSVersion(this);
  v6[1] = v4;
  if (llvm::operator<(v6, v7)) {
    return v7[0];
  }
  else {
    return llvm::Triple::getOSVersion(this);
  }
}

uint64_t **std::__tree<llvm::MachO::PlatformType>::__emplace_unique_key_args<llvm::MachO::PlatformType,llvm::MachO::PlatformType const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  std::string v6 = a1 + 1;
  std::string::size_type v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        std::string::size_type v5 = *v8;
        std::string v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      std::string::size_type v5 = v8[1];
      if (!v5)
      {
        std::string v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

unint64_t llvm::MachO::SymbolSet::addGlobalImpl(uint64_t a1, char a2, const void *a3, size_t a4, char a5)
{
  if (a4)
  {
    uint64_t v10 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, a4, 0);
    memcpy(v10, a3, a4);
  }
  else
  {
    uint64_t v10 = 0;
  }
  v12[0] = a2;
  uint64_t v13 = v10;
  size_t v14 = a4;
  llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::try_emplace<decltype(nullptr)>(a1 + 96, (uint64_t)v12, (uint64_t)&v15);
  if (!v16) {
    return *(void *)(v15 + 24);
  }
  unint64_t result = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 160, 3);
  *(void *)unint64_t result = v10;
  *(void *)(result + 8) = a4;
  *(void *)(result + 16) = result + 32;
  *(void *)(result + 24) = 0x500000000;
  *(unsigned char *)(result + 152) = a2;
  *(unsigned char *)(result + 153) = a5;
  *(void *)(v15 + 24) = result;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::try_emplace<decltype(nullptr)>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v11 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::LookupBucketFor<llvm::SymbolsMapKey>((uint64_t *)a1, (llvm::hashing::detail::hash_state **)a2, &v11);
  int v7 = v11;
  if (result)
  {
    char v8 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::InsertIntoBucketImpl<llvm::SymbolsMapKey>(a1, a2, (llvm::hashing::detail::hash_state **)a2, v11);
    int v7 = (unsigned __int8 *)result;
    uint64_t v9 = *(void *)(a2 + 16);
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(void *)(result + 16) = v9;
    *(void *)(result + 24) = 0;
    char v8 = 1;
  }
  uint64_t v10 = *(void *)a1 + 32 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v8;
  return result;
}

unsigned __int8 *llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::InsertIntoBucketImpl<llvm::SymbolsMapKey>(uint64_t a1, uint64_t a2, llvm::hashing::detail::hash_state **a3, unsigned __int8 *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::grow(a1, v7);
  uint64_t v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::LookupBucketFor<llvm::SymbolsMapKey>((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  LOBYTE(v10) = 0;
  v11[0] = 0;
  v11[1] = 0;
  v13[0] = a4;
  v13[1] = a4 + 8;
  v12[0] = (unsigned __int8 *)&v10;
  v12[1] = (unsigned __int8 *)v11;
  if (!std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v14, v13, v12))--*(_DWORD *)(a1 + 12); {
  return a4;
  }
}

char *llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    *(_OWORD *)&v26[7] = 0uLL;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      int v11 = &result[32 * v10];
      do
      {
        *uint64_t result = 0;
        *(_OWORD *)(result + 1) = *(_OWORD *)v26;
        *((void *)result + 2) = *(void *)&v26[15];
        result += 32;
      }
      while (result != v11);
    }
    v26[0] = 0;
    *(void *)&v26[8] = 0;
    *(void *)&v26[16] = 0;
    char v19 = 3;
    v20[0] = 0;
    v20[1] = 0;
    if (v3)
    {
      uint64_t v12 = 32 * v3;
      uint64_t v13 = (unsigned __int8 *)v4;
      uint64_t v14 = v4;
      do
      {
        char v23 = v13;
        uint64_t v24 = v13 + 8;
        uint64_t v21 = v26;
        unint64_t v22 = &v26[8];
        if (!std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v25, &v23, (unsigned __int8 **)&v21))
        {
          char v23 = v13;
          uint64_t v24 = v13 + 8;
          uint64_t v21 = &v19;
          unint64_t v22 = v20;
          if (!std::__tuple_equal<2ul>::operator()[abi:nn180100]<std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>,std::tuple<llvm::MachO::SymbolKind const&,llvm::StringRef const&>>((uint64_t)&v25, &v23, (unsigned __int8 **)&v21))
          {
            char v23 = 0;
            llvm::DenseMapBase<llvm::DenseMap<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>,llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>>::LookupBucketFor<llvm::SymbolsMapKey>((uint64_t *)a1, (llvm::hashing::detail::hash_state **)v14, &v23);
            uint64_t v15 = v23;
            long long v16 = *(_OWORD *)v14;
            *((void *)v23 + 2) = *(void *)(v14 + 16);
            *(_OWORD *)uint64_t v15 = v16;
            *((void *)v15 + 3) = *(void *)(v14 + 24);
            ++*(_DWORD *)(a1 + 8);
          }
        }
        v14 += 32;
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)&v26[15] = 0;
  *(void *)&v26[7] = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  if (v17)
  {
    long long v18 = &result[32 * v17];
    do
    {
      *uint64_t result = 0;
      *(_OWORD *)(result + 1) = *(_OWORD *)v26;
      *((void *)result + 2) = *(void *)&v26[15];
      result += 32;
    }
    while (result != v18);
  }
  return result;
}

uint64_t llvm::MachO::Target::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v24[0] = a1;
  v24[1] = a2;
  LOBYTE(v26) = 45;
  llvm::StringRef::split(v24, (char *)&v26, 1uLL, (uint64_t)v21);
  uint64_t result = llvm::MachO::getArchitectureFromName(v21[0], v21[1]);
  char v6 = result;
  int v7 = 0;
  switch(v23)
  {
    case 0:
      break;
    case 3:
      if (*(_WORD *)v22 != 28521 || *(unsigned char *)(v22 + 2) != 115) {
        goto LABEL_64;
      }
      int v7 = 2;
      break;
    case 4:
      if (*(_DWORD *)v22 == 1936683640)
      {
        int v7 = 11;
      }
      else
      {
        if (*(_DWORD *)v22 != 1936684660) {
          goto LABEL_64;
        }
        int v7 = 3;
      }
      break;
    case 5:
      if (*(_DWORD *)v22 == 1868783981 && *(unsigned char *)(v22 + 4) == 115)
      {
        int v7 = 1;
      }
      else
      {
        if (*(_DWORD *)v22 != 1869636979 || *(unsigned char *)(v22 + 4) != 115) {
          goto LABEL_64;
        }
        int v7 = 14;
      }
      break;
    case 7:
      if (*(_DWORD *)v22 != 1668571511 || *(_DWORD *)(v22 + 3) != 1936681059) {
        goto LABEL_64;
      }
      int v7 = 4;
      break;
    case 8:
      if (*(void *)v22 != 0x736F656764697262) {
        goto LABEL_64;
      }
      int v7 = 5;
      break;
    case 9:
      if (*(void *)v22 != 0x696B726576697264 || *(unsigned char *)(v22 + 8) != 116) {
        goto LABEL_64;
      }
      int v7 = 10;
      break;
    case 11:
      if (*(void *)v22 != 0x6C6174616363616DLL || *(void *)(v22 + 3) != 0x7473796C61746163) {
        goto LABEL_64;
      }
      int v7 = 6;
      break;
    case 13:
      if (*(void *)v22 != 0x756D69732D736F69 || *(void *)(v22 + 5) != 0x726F74616C756D69) {
        goto LABEL_64;
      }
      int v7 = 7;
      break;
    case 14:
      if (*(void *)v22 == 0x6D69732D736F7278 && *(void *)(v22 + 6) == 0x726F74616C756D69)
      {
        int v7 = 12;
      }
      else
      {
        if (*(void *)v22 != 0x6D69732D736F7674 || *(void *)(v22 + 6) != 0x726F74616C756D69) {
          goto LABEL_64;
        }
        int v7 = 8;
      }
      break;
    case 17:
      if (*(void *)v22 != 0x2D736F6863746177
        || *(void *)(v22 + 8) != 0x6F74616C756D6973
        || *(unsigned char *)(v22 + 16) != 114)
      {
        goto LABEL_64;
      }
      int v7 = 9;
      break;
    default:
LABEL_64:
      if (*(unsigned char *)v22 == 60 && *(unsigned char *)(v22 + v23 - 1) == 62)
      {
        uint64_t v19 = v23 - 2;
        unint64_t v25 = 0;
        uint64_t v26 = v22 + 1;
        if (v23 - 1 < (unint64_t)(v23 - 2)) {
          uint64_t v19 = v23 - 1;
        }
        uint64_t v27 = v19;
        uint64_t result = llvm::consumeUnsignedInteger((llvm *)&v26, (llvm::StringRef *)0xA, &v25, v5);
        if (v27) {
          int v20 = 1;
        }
        else {
          int v20 = result;
        }
        if (v20) {
          int v7 = 0;
        }
        else {
          int v7 = v25;
        }
      }
      else
      {
        int v7 = 0;
      }
      break;
  }
  *(unsigned char *)(a3 + 24) &= ~1u;
  *(unsigned char *)a3 = v6;
  *(_DWORD *)(a3 + 4) = v7;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return result;
}

uint64_t **llvm::MachO::mapToPlatformSet@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x300000000;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 32) = a3 + 40;
  if (a2)
  {
    uint64_t v4 = 24 * a2;
    unint64_t v5 = (int *)result + 1;
    do
    {
      uint64_t result = llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::insert((uint64_t **)a3, v5, (uint64_t)v6);
      v5 += 6;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

void llvm::MachO::getTargetTripleName(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v4 = (llvm::VersionTuple *)(a1 + 8);
  if (v5 & 0x7FFFFFFFFFFFFFFFLL | v6 & 0x7FFFFFFF7FFFFFFFLL) {
    llvm::VersionTuple::getAsString(v4, &v17);
  }
  else {
    std::string::basic_string[abi:nn180100]<0>(&v17, (char *)&str_15_7);
  }
  Architectureuint64_t Name = llvm::MachO::getArchitectureName(*a1);
  __int16 v14 = 773;
  v13[0] = ArchitectureName;
  v13[1] = v8;
  v13[2] = "-apple-";
  int v9 = *((_DWORD *)a1 + 1);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v10, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
  }
  else {
    std::string v10 = v17;
  }
  llvm::MachO::getOSAndEnvironmentName(v9, (uint64_t)__p);
  v15[0] = v13;
  v15[2] = __p;
  __int16 v16 = 1026;
  llvm::Twine::str((llvm::Twine *)v15, a2);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void llvm::MachO::TextAPIReader::get(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)unint64_t v25 = 0u;
  size_t v3 = a1[3];
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  uint64_t v5 = (const void *)a1[2];
  if (v3 >= 0x17)
  {
    uint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v7 = v3 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = v3;
    char v30 = (void *)(v8 | 0x8000000000000000);
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v30) = a1[3];
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v5, v3);
  *((unsigned char *)p_dst + v3) = 0;
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  *(_OWORD *)&__p[1] = __dst;
  __p[3] = v30;
  long long __dst = *(_OWORD *)a1;
  uint64_t v9 = llvm::StringRef::trim((uint64_t *)&__dst, " \t\n\v\f\r", 6);
  if (!v10)
  {
LABEL_21:
    __int16 v14 = std::generic_category();
    *(void *)&long long __dst = 45;
    *((void *)&__dst + 1) = v14;
    uint64_t v28 = "unsupported file type";
    llvm::make_error<llvm::StringError,char const*&,std::error_code>();
  }
  if (*(unsigned char *)v9 != 123 || *(unsigned char *)(v9 + v10 - 1) != 125)
  {
    if (v10 < 3) {
      goto LABEL_21;
    }
    if (*(_WORD *)(v9 + v10 - 3) != 11822 || *(unsigned char *)(v9 + v10 - 1) != 46) {
      goto LABEL_21;
    }
    if (v10 < 0xE)
    {
      if (v10 < 0xA) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
    if (*(void *)v9 == 0x70617421202D2D2DLL && *(void *)(v9 + 6) == 0xA6462742D697061)
    {
      int v17 = 64;
      goto LABEL_68;
    }
    if (v10 < 0x11) {
      goto LABEL_37;
    }
    if (*(void *)v9 == 0x70617421202D2D2DLL
      && *(void *)(v9 + 8) == 0x33762D6462742D69
      && *(unsigned char *)(v9 + 16) == 10)
    {
      int v17 = 32;
    }
    else
    {
      if (*(void *)v9 != 0x70617421202D2D2DLL
        || *(void *)(v9 + 8) != 0x32762D6462742D69
        || *(unsigned char *)(v9 + 16) != 10)
      {
        if (*(void *)v9 == 0x70617421202D2D2DLL
          && *(void *)(v9 + 8) == 0x31762D6462742D69
          && *(unsigned char *)(v9 + 16) == 10)
        {
LABEL_65:
          int v17 = 8;
          goto LABEL_68;
        }
LABEL_37:
        if (*(void *)v9 != 0x686372610A2D2D2DLL || *(_WORD *)(v9 + 8) != 14963) {
          goto LABEL_21;
        }
        goto LABEL_65;
      }
      int v17 = 16;
    }
LABEL_68:
    int v27 = v17;
    llvm::yaml::Input::Input((uint64_t)&__dst, *a1, a1[1], (uint64_t)v25);
  }
  int v27 = 128;
  long long v11 = *((_OWORD *)a1 + 1);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v11;
  llvm::MachO::TextAPIReader::getAsJSON((uint64_t)v24, (uint64_t)&__dst);
  if (BYTE8(__dst))
  {
    uint64_t v12 = __dst;
    *(unsigned char *)(a2 + 8) |= 1u;
  }
  else
  {
    *(unsigned char *)(a2 + 8) &= ~1u;
    uint64_t v12 = __dst;
  }
  *(void *)&long long __dst = 0;
  *(void *)a2 = v12;
  llvm::Expected<std::unique_ptr<llvm::MachO::InterfaceFile>>::~Expected((uint64_t)&__dst);
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v25[0]);
  }
}

void DiagHandler(const llvm::SMDiagnostic *a1, void *a2)
{
  v38[128] = *MEMORY[0x263EF8340];
  uint64_t v36 = v38;
  long long v37 = xmmword_261E918E0;
  int v18 = 0;
  char v22 = 0;
  uint64_t v23 = 0;
  int v24 = 1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  int v17 = (char *)&unk_270DBD758;
  unint64_t v25 = &v36;
  llvm::raw_ostream::SetUnbuffered(&v17);
  int v4 = *((char *)a2 + 47);
  if (v4 >= 0) {
    uint64_t v5 = (char *)(a2 + 3);
  }
  else {
    uint64_t v5 = (char *)a2[3];
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 47);
  }
  else {
    size_t v6 = a2[4];
  }
  int v7 = *((char *)a1 + 79);
  uint64_t v8 = (char *)a1 + 56;
  BOOL v9 = v7 < 0;
  if (v7 < 0) {
    uint64_t v8 = (char *)*((void *)a1 + 7);
  }
  size_t v10 = *((unsigned __int8 *)a1 + 79);
  if (v9) {
    size_t v10 = *((void *)a1 + 8);
  }
  long long v11 = (char *)a1 + 80;
  int v12 = *((char *)a1 + 103);
  if (v12 < 0) {
    long long v11 = (char *)*((void *)a1 + 10);
  }
  size_t v13 = *((void *)a1 + 11);
  if (v12 >= 0) {
    size_t v13 = *((unsigned __int8 *)a1 + 103);
  }
  llvm::SMDiagnostic::SMDiagnostic((uint64_t)v26, *(void *)a1, *((void *)a1 + 1), v5, v6, *((_DWORD *)a1 + 10), *((_DWORD *)a1 + 11), *((_DWORD *)a1 + 12), v8, v10, v11, v13, *((const void **)a1 + 13), (uint64_t)(*((void *)a1 + 14) - *((void *)a1 + 13)) >> 3, *((void *)a1 + 16), *((unsigned int *)a1 + 34));
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v26, 0, &v17, 1, 1);
  __int16 v15 = 1283;
  v14[0] = "malformed file\n";
  long long v14[2] = v36;
  void v14[3] = v37;
  llvm::Twine::str((llvm::Twine *)v14, &v16);
  if (*((char *)a2 + 23) < 0) {
    operator delete((void *)*a2);
  }
  *(std::string *)a2 = v16;
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(&v35);
  if (__p)
  {
    uint64_t v34 = __p;
    operator delete(__p);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v17);
  if (v36 != v38) {
    free(v36);
  }
}

void **llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::mapKeysToValuesV4(uint64_t *a1, uint64_t *a2)
{
  v128[5] = *MEMORY[0x263EF8340];
  uint64_t v115 = a1;
  uint64_t v116 = 0;
  int v117 = a2;
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    char v98 = v100;
    uint64_t v99 = 0x500000000;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v101 = 0;
    char v104 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    int v108 = 0;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    int64x2_t v109 = 0u;
    long long v110 = 0u;
    int v4 = *(unsigned char **)(*a2 + 96);
    uint64_t v5 = &v4[24 * *(unsigned int *)(*a2 + 104)];
    int v94 = *(_DWORD *)(a1[1] + 48) >> 4;
    llvm::SmallVectorImpl<llvm::MachO::Target>::insert<llvm::MachO::Target const*,void>((unsigned int *)&v98, (uint64_t)v100, v4, v5);
    char v89 = a2;
    uint64_t v6 = *a2;
    uint64_t v7 = *a2 + 264;
    int v8 = *(char *)(*a2 + 287);
    BOOL v9 = v8 < 0;
    if (v8 < 0) {
      uint64_t v7 = *(void *)(*a2 + 264);
    }
    uint64_t v10 = *(unsigned __int8 *)(*a2 + 287);
    if (v9) {
      uint64_t v10 = *(void *)(*a2 + 272);
    }
    uint64_t v101 = v7;
    uint64_t v102 = v10;
    uint64_t v103 = *(void *)(v6 + 288);
    char v104 = *(unsigned char *)(v6 + 296);
    int v11 = 2 * (*(unsigned char *)(v6 + 298) == 0);
    int v108 = v11;
    if (!*(unsigned char *)(v6 + 297)) {
      int v108 = v11 | 1;
    }
    *((void *)&v118 + 1) = 0;
    uint64_t v119 = 0;
    *(void *)&long long v118 = (char *)&v118 + 8;
    uint64_t v12 = *(void *)(v6 + 304);
    uint64_t v13 = *(void *)(v6 + 312);
    if (v12 != v13)
    {
      __int16 v14 = (long long *)(v12 + 24);
      do
      {
        __int16 v15 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v118, &v122, (const void **)v14);
        std::string v16 = (char *)*v15;
        if (!*v15)
        {
          int v17 = v15;
          std::string v16 = (char *)operator new(0xC0uLL);
          v127[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v118 + 8;
          int v18 = (std::string *)(v16 + 32);
          if (*((char *)v14 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v14, *((void *)v14 + 1));
          }
          else
          {
            long long v19 = *v14;
            *((void *)v16 + 6) = *((void *)v14 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          }
          *((void *)v16 + 7) = v16 + 72;
          *((void *)v16 + 8) = 0x500000000;
          v127[0].__r_.__value_.__s.__data_[16] = 1;
          uint64_t v20 = v122;
          *(void *)std::string v16 = 0;
          *((void *)v16 + 1) = 0;
          *((void *)v16 + 2) = v20;
          char *v17 = v16;
          uint64_t v21 = (uint64_t *)v16;
          if (*(void *)v118)
          {
            *(void *)&long long v118 = *(void *)v118;
            uint64_t v21 = (uint64_t *)*v17;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v118 + 1), v21);
          ++v119;
          v127[0].__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,void *>>>>::reset[abi:nn180100]((uint64_t)v127, 0);
        }
        char v22 = (long long *)((char *)v14 - 24);
        unsigned int v23 = *((_DWORD *)v16 + 16);
        if (v23 >= *((_DWORD *)v16 + 17))
        {
          long long v27 = *v22;
          v127[0].__r_.__value_.__r.__words[2] = *((void *)v14 - 1);
          *(_OWORD *)&v127[0].__r_.__value_.__l.__data_ = v27;
          unint64_t v28 = llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>((uint64_t)(v16 + 56), (unint64_t)v127, 1);
          uint64_t v29 = *((void *)v16 + 7) + 24 * *((unsigned int *)v16 + 16);
          long long v30 = *(_OWORD *)v28;
          *(void *)(v29 + 16) = *(void *)(v28 + 16);
          *(_OWORD *)uint64_t v29 = v30;
        }
        else
        {
          uint64_t v24 = *((void *)v16 + 7) + 24 * v23;
          long long v25 = *v22;
          *(void *)(v24 + 16) = *((void *)v14 - 1);
          *(_OWORD *)uint64_t v24 = v25;
        }
        ++*((_DWORD *)v16 + 16);
        uint64_t v26 = (uint64_t)v14 + 24;
        v14 += 3;
      }
      while (v26 != v13);
      uint64_t v31 = (long long *)v118;
      if ((long long *)v118 != (long long *)((char *)&v118 + 8))
      {
        do
        {
          memset(v127, 0, 48);
          std::vector<llvm::MachO::Target>::__insert_with_size[abi:nn180100]<llvm::MachO::Target const*,llvm::MachO::Target const*>((uint64_t)v127, *((char **)v31 + 7), (char *)(*((void *)v31 + 7) + 24 * *((unsigned int *)v31 + 16)), *((unsigned int *)v31 + 16));
          std::string::operator=(&v127[1], (const std::string *)(v31 + 2));
          uint64_t v32 = v109.i64[1];
          if (v109.i64[1] >= (unint64_t)v110)
          {
            uint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v109.i64[1] - v109.i64[0]) >> 4);
            unint64_t v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) > 0x555555555555555) {
              abort();
            }
            if (0x5555555555555556 * ((uint64_t)(v110 - v109.i64[0]) >> 4) > v35) {
              unint64_t v35 = 0x5555555555555556 * ((uint64_t)(v110 - v109.i64[0]) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - v109.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v36 = 0x555555555555555;
            }
            else {
              unint64_t v36 = v35;
            }
            uint64_t v37 = v123.i64[1];
            *(void *)v123.i64[1] = 0;
            *(void *)(v37 + 8) = 0;
            *(void *)(v37 + 16) = 0;
            *(std::string *)uint64_t v37 = v127[0];
            memset(v127, 0, 24);
            std::string::size_type v38 = v127[1].__r_.__value_.__r.__words[2];
            *(_OWORD *)(v37 + 24) = *(_OWORD *)&v127[1].__r_.__value_.__l.__data_;
            *(void *)(v37 + 40) = v38;
            memset(&v127[1], 0, sizeof(std::string));
            uint64_t v39 = v123.i64[1] + 48;
            v123.i64[1] += 48;
            uint64_t v40 = v109.i64[1];
            uint64_t v41 = v109.i64[0];
            uint64_t v42 = v123.i64[0];
            if (v109.i64[1] == v109.i64[0])
            {
              int64x2_t v45 = vdupq_n_s64(v109.u64[1]);
            }
            else
            {
              do
              {
                *(void *)(v42 - 48) = 0;
                *(void *)(v42 - 40) = 0;
                v42 -= 48;
                *(void *)(v42 + 16) = 0;
                long long v43 = *(_OWORD *)(v40 - 48);
                v40 -= 48;
                *(_OWORD *)uint64_t v42 = v43;
                *(void *)(v42 + 16) = *(void *)(v40 + 16);
                *(void *)uint64_t v40 = 0;
                *(void *)(v40 + 8) = 0;
                *(void *)(v40 + 16) = 0;
                long long v44 = *(_OWORD *)(v40 + 24);
                *(void *)(v42 + 40) = *(void *)(v40 + 40);
                *(_OWORD *)(v42 + 24) = v44;
                *(void *)(v40 + 32) = 0;
                *(void *)(v40 + 40) = 0;
                *(void *)(v40 + 24) = 0;
              }
              while (v40 != v41);
              int64x2_t v45 = v109;
              uint64_t v39 = v123.i64[1];
            }
            v109.i64[0] = v42;
            v109.i64[1] = v39;
            int64x2_t v123 = v45;
            uint64_t v46 = v110;
            *(void *)&long long v110 = v124;
            uint64_t v124 = v46;
            int v122 = (char *)v45.i64[0];
            v109.i64[1] = v39;
            if (SHIBYTE(v127[1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v127[1].__r_.__value_.__l.__data_);
            }
          }
          else
          {
            *(void *)v109.i64[1] = 0;
            *(void *)(v32 + 8) = 0;
            *(void *)(v32 + 16) = 0;
            *(std::string *)uint64_t v32 = v127[0];
            memset(v127, 0, 24);
            std::string::size_type v33 = v127[1].__r_.__value_.__r.__words[2];
            *(_OWORD *)(v32 + 24) = *(_OWORD *)&v127[1].__r_.__value_.__l.__data_;
            *(void *)(v32 + 40) = v33;
            memset(&v127[1], 0, sizeof(std::string));
            v109.i64[1] = v32 + 48;
          }
          if (v127[0].__r_.__value_.__r.__words[0])
          {
            v127[0].__r_.__value_.__l.__size_ = v127[0].__r_.__value_.__r.__words[0];
            operator delete(v127[0].__r_.__value_.__l.__data_);
          }
          long long v47 = (long long *)*((void *)v31 + 1);
          if (v47)
          {
            do
            {
              long long v48 = v47;
              long long v47 = *(long long **)v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              long long v48 = (long long *)*((void *)v31 + 2);
              BOOL v49 = *(void *)v48 == (void)v31;
              uint64_t v31 = v48;
            }
            while (!v49);
          }
          uint64_t v31 = v48;
        }
        while (v48 != (long long *)((char *)&v118 + 8));
      }
    }
    std::__tree<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::SmallVector<llvm::MachO::Target,5u>>>>::destroy((uint64_t)&v118, *((void **)&v118 + 1));
    llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::assignTargetsToLibrary(*(void *)(*v89 + 328), *(void *)(*v89 + 336), (uint64_t *)&v105);
    llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::assignTargetsToLibrary(*(void *)(*v89 + 352), *(void *)(*v89 + 360), (uint64_t *)&v106 + 1);
    llvm::MachO::SymbolSet::exports(*(llvm::MachO::SymbolSet **)(*v89 + 448), (uint64_t)v127);
    std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v128);
    std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](&v127[1].__r_.__value_.__l.__size_);
    llvm::MachO::SymbolSet::reexports(*(llvm::MachO::SymbolSet **)(*v89 + 448), (uint64_t)&v122);
    std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v126);
    std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v125);
    llvm::MachO::SymbolSet::undefineds(*(llvm::MachO::SymbolSet **)(*v89 + 448), (uint64_t)&v118);
    std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v121);
    std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v120);
  }
  else
  {
    uint64_t v95 = 0;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
    char v98 = v100;
    uint64_t v99 = 0x500000000;
    uint64_t v102 = 0;
    uint64_t v103 = 0;
    uint64_t v101 = 0;
    char v104 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    int v108 = 0;
    int64x2_t v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
  }
  uint64_t v116 = (unint64_t *)&v94;
  int v122 = 0;
  int64x2_t v123 = 0uLL;
  (*(void (**)(uint64_t *, const char *, uint64_t, uint64_t))(*a1 + 96))(a1, "!tapi-tbd", 9, 1);
  llvm::yaml::IO::processKey<unsigned int,llvm::yaml::EmptyContext>(a1, (uint64_t)"tbd-version", v116, 1);
  llvm::yaml::IO::processKey<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)(v116 + 4));
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 56))(a1) & 1) == 0)
  {
    uint64_t v92 = 0;
    char v91 = 0;
    if ((*(unsigned int (**)(uint64_t *, const char *, void, void, char *, uint64_t *))(*a1 + 120))(a1, "uuids", 0, 0, &v91, &v92))
    {
      LODWORD(v50) = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
      if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0 && v50)
      {
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        uint64_t v50 = v50;
        uint64_t v87 = v50;
        while (1)
        {
          *(void *)&long long v118 = 0;
          if ((*(unsigned int (**)(uint64_t *, unint64_t, long long *))(*a1 + 32))(a1, v53, &v118)) {
            break;
          }
LABEL_77:
          if (++v53 == v50) {
            goto LABEL_78;
          }
        }
        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v52 - (char *)v51) >> 4);
        if (v54 > v53)
        {
          uint64_t v55 = v52;
LABEL_74:
          uint64_t v51 = (void **)v122;
          (*(void (**)(uint64_t *))(*a1 + 104))(a1);
          v127[0].__r_.__value_.__r.__words[0] = 0;
          char v93 = 0;
          if ((*(unsigned int (**)(uint64_t *, const char *, uint64_t, void, char *, std::string *))(*a1 + 120))(a1, "target", 1, 0, &v93, v127))
          {
            llvm::yaml::yamlize<llvm::MachO::Target>((uint64_t)a1, (unsigned __int8 *)&v51[6 * v53]);
            (*(void (**)(uint64_t *, std::string::size_type))(*a1 + 128))(a1, v127[0].__r_.__value_.__r.__words[0]);
          }
          llvm::yaml::IO::processKey<std::string,llvm::yaml::EmptyContext>(a1, (uint64_t)"value", (uint64_t)&v51[6 * v53 + 3], 1);
          (*(void (**)(uint64_t *))(*a1 + 112))(a1);
          (*(void (**)(uint64_t *, void))(*a1 + 40))(a1, v118);
          uint64_t v52 = v55;
          goto LABEL_77;
        }
        unint64_t v56 = v53 + 1;
        unint64_t v57 = v53 + 1 - v54;
        if (0xAAAAAAAAAAAAAAABLL * ((v123.i64[1] - (uint64_t)v52) >> 4) >= v57)
        {
          bzero(v52, 48 * ((48 * v57 - 48) / 0x30) + 48);
          uint64_t v55 = &v52[48 * ((48 * v57 - 48) / 0x30) + 48];
          v123.i64[0] = (uint64_t)v55;
          goto LABEL_74;
        }
        if (0x5555555555555556 * ((v123.i64[1] - (uint64_t)v51) >> 4) > v56) {
          unint64_t v56 = 0x5555555555555556 * ((v123.i64[1] - (uint64_t)v51) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v123.i64[1] - (uint64_t)v51) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v56 = 0x555555555555555;
        }
        if (v56 > 0x555555555555555) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v58 = 3 * v56;
        long long v59 = (char *)operator new(48 * v56);
        uint64_t v60 = &v59[16 * ((v52 - (char *)v51) >> 4)];
        uint64_t v61 = &v59[16 * v58];
        size_t v62 = 48 * ((48 * v57 - 48) / 0x30) + 48;
        bzero(v60, v62);
        uint64_t v55 = &v60[v62];
        if (v52 == (char *)v51)
        {
          int v122 = v60;
          v123.i64[0] = (uint64_t)v55;
          v123.i64[1] = (uint64_t)v61;
        }
        else
        {
          do
          {
            long long v63 = *((_OWORD *)v52 - 3);
            *((void *)v60 - 4) = *((void *)v52 - 4);
            *((_OWORD *)v60 - 3) = v63;
            long long v64 = *(_OWORD *)(v52 - 24);
            *((void *)v60 - 1) = *((void *)v52 - 1);
            *(_OWORD *)(v60 - 24) = v64;
            v60 -= 48;
            *((void *)v52 - 2) = 0;
            *((void *)v52 - 1) = 0;
            *((void *)v52 - 3) = 0;
            v52 -= 48;
          }
          while (v52 != (char *)v51);
          uint64_t v51 = (void **)v122;
          uint64_t v65 = (void **)v123.i64[0];
          int v122 = v60;
          v123.i64[0] = (uint64_t)v55;
          v123.i64[1] = (uint64_t)v61;
          if (v65 != v51)
          {
            uint64_t v50 = v87;
            do
            {
              if (*((char *)v65 - 1) < 0) {
                operator delete(*(v65 - 3));
              }
              v65 -= 6;
            }
            while (v65 != v51);
            if (!v51) {
              goto LABEL_74;
            }
            goto LABEL_73;
          }
        }
        uint64_t v50 = v87;
        if (!v51) {
          goto LABEL_74;
        }
LABEL_73:
        operator delete(v51);
        goto LABEL_74;
      }
LABEL_78:
      (*(void (**)(uint64_t *))(*a1 + 48))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v92);
    }
  }
  LODWORD(v127[0].__r_.__value_.__l.__data_) = 0;
  llvm::yaml::IO::processKeyWithDefault<TBDFlags,llvm::yaml::EmptyContext>((uint64_t)a1, (_DWORD *)v116 + 62, v127);
  llvm::yaml::IO::processKey<llvm::StringRef,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"install-name", (uint64_t)(v116 + 21), 1);
  LODWORD(v127[0].__r_.__value_.__l.__data_) = 0x10000;
  llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"current-version", (llvm::MachO::PackedVersion *)(v116 + 23), v127);
  LODWORD(v127[0].__r_.__value_.__l.__data_) = 0x10000;
  llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"compatibility-version", (llvm::MachO::PackedVersion *)((char *)v116 + 188), v127);
  v127[0].__r_.__value_.__s.__data_[0] = 0;
  llvm::yaml::IO::processKeyWithDefault<SwiftVersion,llvm::yaml::EmptyContext>(a1, (uint64_t)"swift-abi-version", (llvm::raw_ostream *)(v116 + 24), v127);
  __int16 v66 = v116;
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 56))(a1) || v66[32] != v66[33])
  {
    uint64_t v92 = 0;
    char v93 = 0;
    if ((*(unsigned int (**)(uint64_t *, const char *, void, void, char *, uint64_t *))(*a1 + 120))(a1, "parent-umbrella", 0, 0, &v93, &v92))
    {
      int v67 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1)) {
        int v67 = -1431655765 * ((v66[33] - v66[32]) >> 4);
      }
      if (v67)
      {
        uint64_t v68 = 0;
        unint64_t v69 = 0;
        uint64_t v88 = v66 + 34;
        unsigned int v90 = (uint64_t *)(v66 + 32);
        uint64_t v70 = 24;
        do
        {
          *(void *)&long long v118 = 0;
          if ((*(unsigned int (**)(uint64_t *, unint64_t, long long *))(*a1 + 32))(a1, v69, &v118))
          {
            unint64_t v71 = v66[32];
            unint64_t v72 = v66[33];
            unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v71) >> 4);
            if (v73 <= v69)
            {
              unint64_t v74 = v69 + 1;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v88 - v72) >> 4) >= v69 + 1 - v73)
              {
                size_t v79 = 48 * ((v68 - 16 * ((uint64_t)(v72 - v71) >> 4)) / 0x30uLL) + 48;
                bzero((void *)v66[33], v79);
                v66[33] = v72 + v79;
              }
              else
              {
                unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v88 - v71) >> 4);
                if (2 * v75 > v74) {
                  unint64_t v74 = 2 * v75;
                }
                if (v75 >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v76 = 0x555555555555555;
                }
                else {
                  unint64_t v76 = v74;
                }
                std::string::size_type v77 = v127[0].__r_.__value_.__r.__words[2];
                size_t v78 = 48 * ((v68 - 48 * v73) / 0x30) + 48;
                bzero((void *)v127[0].__r_.__value_.__r.__words[2], v78);
                v127[0].__r_.__value_.__r.__words[2] = v77 + v78;
              }
            }
            uint64_t v80 = *v90 + v70;
            (*(void (**)(uint64_t *))(*a1 + 104))(a1);
            llvm::yaml::IO::processKey<std::vector<llvm::MachO::Target>,llvm::yaml::EmptyContext>((uint64_t)a1, (char **)(v80 - 24));
            llvm::yaml::IO::processKey<std::string,llvm::yaml::EmptyContext>(a1, (uint64_t)"umbrella", v80, 1);
            (*(void (**)(uint64_t *))(*a1 + 112))(a1);
            (*(void (**)(uint64_t *, void))(*a1 + 40))(a1, v118);
          }
          ++v69;
          v70 += 48;
          v68 += 48;
        }
        while (v67 != v69);
      }
      (*(void (**)(uint64_t *))(*a1 + 48))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v92);
    }
  }
  LODWORD(v127[0].__r_.__value_.__l.__data_) = 0;
  LODWORD(v127[0].__r_.__value_.__l.__data_) = 1;
  if (((*(uint64_t (**)(uint64_t *))(*v115 + 16))(v115) & 1) == 0) {
    operator new();
  }
  char v81 = v116;
  unint64_t v82 = v81[32];
  if (v82)
  {
    uint64_t v83 = v81[33];
    long long v84 = (void *)v81[32];
    if (v83 != v82)
    {
      do
      {
        v83 -= 48;
      }
      while (v83 != v82);
      long long v84 = (void *)v81[32];
    }
    v81[33] = v82;
    operator delete(v84);
  }
  char v85 = (unint64_t *)v81[4];
  if (v85 != v81 + 6) {
    free(v85);
  }
}

uint64_t llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::mapKeysToValues(int a1, uint64_t *a2, void *a3)
{
  size_t v3 = a3;
  uint64_t v519 = *MEMORY[0x263EF8340];
  v495 = a2;
  v496 = 0;
  v497 = a3;
  int v6 = (*(uint64_t (**)(uint64_t *))(*a2 + 16))(a2);
  v475[0] = 0;
  v475[1] = 0;
  v475[2] = v476;
  v475[3] = 0x400000000;
  v476[4] = v477;
  v476[5] = 0;
  v477[0] = 0;
  v477[1] = 1;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v479 = 0;
  long long __dst = v482;
  uint64_t v481 = 0x300000000;
  v484 = 0;
  v485 = 0;
  v483 = &v484;
  v463 = a2;
  if (!v6)
  {
    int v491 = 0;
    int v490 = 0;
    uint64_t v487 = 0;
    uint64_t v488 = 0;
    uint64_t v486 = 0;
    char v489 = 0;
    long long v492 = 0u;
    int64x2_t v493 = 0u;
    memset(v494, 0, sizeof(v494));
    goto LABEL_642;
  }
  int v491 = 0;
  int v490 = 0;
  uint64_t v487 = 0;
  uint64_t v488 = 0;
  uint64_t v486 = 0;
  char v489 = 0;
  long long v492 = 0u;
  int64x2_t v493 = 0u;
  memset(v494, 0, sizeof(v494));
  uint64_t v465 = a2[1];
  uint64_t v7 = *(unsigned int *)(*v3 + 104);
  int v461 = a1;
  int v8 = 0;
  if (v7)
  {
    BOOL v9 = *(unsigned __int8 **)(*v3 + 96);
    uint64_t v10 = 24 * v7;
    do
    {
      int v11 = *v9;
      v9 += 24;
      int v12 = 1 << v11;
      if (v11 == 16) {
        int v13 = 0;
      }
      else {
        int v13 = v12;
      }
      v8 |= v13;
      v10 -= 24;
    }
    while (v10);
  }
  *(_DWORD *)v513 = v8;
  llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>((unsigned int *)v513, __src);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(int64x2_t *)std::string __p = __src[0];
  uint64_t v479 = __src[1].i64[0];
  llvm::MachO::mapToPlatformSet(*(uint64_t ***)(*v3 + 96), *(unsigned int *)(*v3 + 104), (uint64_t)__src);
  __int16 v14 = (void *)__src[0].i64[0];
  if ((int64x2_t *)__src[0].i64[0] != &__src[1])
  {
    if (__dst != v482)
    {
      free(__dst);
      __int16 v14 = (void *)__src[0].i64[0];
    }
    long long __dst = v14;
    uint64_t v481 = __src[0].i64[1];
    __src[0].i64[0] = (uint64_t)__src[1].i64;
    __src[0].i32[3] = 0;
    goto LABEL_26;
  }
  __int32 v15 = __src[0].i32[2];
  uint64_t v16 = v481;
  if (v481 >= __src[0].i32[2])
  {
    if (__src[0].i32[2]) {
      memmove(__dst, (const void *)__src[0].i64[0], 4 * __src[0].u32[2]);
    }
    goto LABEL_25;
  }
  if (HIDWORD(v481) >= __src[0].i32[2])
  {
    if (v481)
    {
      memmove(__dst, (const void *)__src[0].i64[0], 4 * v481);
      goto LABEL_23;
    }
  }
  else
  {
    LODWORD(v481) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v482, __src[0].u32[2], 4);
  }
  uint64_t v16 = 0;
LABEL_23:
  if (v16 != __src[0].u32[2]) {
    memcpy((char *)__dst + 4 * v16, (const void *)(__src[0].i64[0] + 4 * v16), 4 * __src[0].u32[2] - 4 * v16);
  }
LABEL_25:
  LODWORD(v481) = v15;
LABEL_26:
  __src[0].i32[2] = 0;
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v483, v484);
  int v17 = v501[1];
  v483 = (void **)v501[0];
  v484 = v501[1];
  v485 = v502[0];
  if (v502[0])
  {
    *((void *)v501[1] + 2) = &v484;
    v501[0] = &v501[1];
    v501[1] = 0;
    v502[0] = 0;
    int v17 = 0;
  }
  else
  {
    v483 = &v484;
  }
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)v501, v17);
  if ((int64x2_t *)__src[0].i64[0] != &__src[1]) {
    free((void *)__src[0].i64[0]);
  }
  uint64_t v18 = *v3;
  uint64_t v19 = *v3 + 264;
  int v20 = *(char *)(*v3 + 287);
  BOOL v21 = v20 < 0;
  if (v20 < 0) {
    uint64_t v19 = *(void *)(*v3 + 264);
  }
  uint64_t v22 = *(unsigned __int8 *)(*v3 + 287);
  if (v21) {
    uint64_t v22 = *(void *)(*v3 + 272);
  }
  uint64_t v486 = v19;
  uint64_t v487 = v22;
  uint64_t v488 = *(void *)(v18 + 288);
  char v489 = *(unsigned char *)(v18 + 296);
  int v23 = 2 * (*(unsigned char *)(v18 + 298) == 0);
  int v490 = *(_DWORD *)(v18 + 300);
  int v491 = v23;
  if (!*(unsigned char *)(v18 + 297)) {
    int v491 = v23 | 1;
  }
  uint64_t v24 = *(void *)(v18 + 304);
  if (v24 != *(void *)(v18 + 312))
  {
    uint64_t v27 = *(void *)(v24 + 24);
    uint64_t v25 = v24 + 24;
    uint64_t v26 = v27;
    int v28 = *(char *)(v25 + 23);
    if (v28 >= 0) {
      uint64_t v26 = v25;
    }
    uint64_t v29 = *(void *)(v25 + 8);
    if (v28 >= 0) {
      uint64_t v29 = v28;
    }
    *(void *)&long long v492 = v26;
    *((void *)&v492 + 1) = v29;
  }
  v471 = 0;
  uint64_t v472 = 0;
  v470 = &v471;
  uint64_t v30 = *(void *)(v18 + 328);
  uint64_t v31 = *(void *)(v18 + 336);
  if (v30 != v31)
  {
    do
    {
      uint64_t v32 = *(unsigned int *)(v30 + 32);
      if (v32)
      {
        unsigned int v33 = 0;
        uint64_t v34 = *(unsigned __int8 **)(v30 + 24);
        uint64_t v35 = 24 * v32;
        do
        {
          int v36 = *v34;
          v34 += 24;
          int v37 = 1 << v36;
          if (v36 == 16) {
            int v38 = 0;
          }
          else {
            int v38 = v37;
          }
          v33 |= v38;
          v35 -= 24;
        }
        while (v35);
      }
      else
      {
        unsigned int v33 = 0;
      }
      std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>((uint64_t *)&v470, v33, v33);
      v30 += 160;
    }
    while (v30 != v31);
    uint64_t v18 = *v3;
  }
  uint64_t v39 = *(void *)(v18 + 352);
  uint64_t v40 = *(void *)(v18 + 360);
  if (v39 != v40)
  {
    do
    {
      uint64_t v41 = *(unsigned int *)(v39 + 32);
      if (v41)
      {
        unsigned int v42 = 0;
        long long v43 = *(unsigned __int8 **)(v39 + 24);
        uint64_t v44 = 24 * v41;
        do
        {
          int v45 = *v43;
          v43 += 24;
          int v46 = 1 << v45;
          if (v45 == 16) {
            int v47 = 0;
          }
          else {
            int v47 = v46;
          }
          v42 |= v47;
          v44 -= 24;
        }
        while (v44);
      }
      else
      {
        unsigned int v42 = 0;
      }
      std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>((uint64_t *)&v470, v42, v42);
      v39 += 160;
    }
    while (v39 != v40);
    uint64_t v18 = *v3;
  }
  v468 = 0;
  uint64_t v469 = 0;
  v467 = (uint64_t *)&v468;
  llvm::MachO::SymbolSet::symbols(*(void *)(v18 + 448), __src);
  *(int64x2_t *)v513 = __src[0];
  uint64_t v48 = __src[1].i64[0];
  uint64_t v49 = __src[0].i64[0];
  if (__src[0].i64[0] != __src[1].i64[0])
  {
    do
    {
      unint64_t v50 = *(void *)(v49 + 24);
      *(void *)v498 = v50;
      uint64_t v51 = *(unsigned int *)(v50 + 24);
      if (v51)
      {
        unsigned int v52 = 0;
        unint64_t v53 = *(unsigned __int8 **)(v50 + 16);
        uint64_t v54 = 24 * v51;
        do
        {
          int v55 = *v53;
          v53 += 24;
          int v56 = 1 << v55;
          if (v55 == 16) {
            int v57 = 0;
          }
          else {
            int v57 = v56;
          }
          v52 |= v57;
          v54 -= 24;
        }
        while (v54);
      }
      else
      {
        unsigned int v52 = 0;
      }
      *((_DWORD *)std::__tree<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::__map_value_compare<llvm::MachO::Symbol const*,std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::less<llvm::MachO::Symbol const*>,true>,std::allocator<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>>>::__emplace_unique_key_args<llvm::MachO::Symbol const*,std::piecewise_construct_t const&,std::tuple<llvm::MachO::Symbol const* const&>,std::tuple<>>(&v467, v50, (uint64_t **)v498)+ 10) = v52;
      std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>((uint64_t *)&v470, v52, v52);
      *(void *)v513 += 32;
      llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)v513);
      uint64_t v49 = *(void *)v513;
    }
    while (*(void *)v513 != v48);
  }
  uint64_t v58 = (uint64_t)v470;
  if (v470 != &v471)
  {
    v464 = v3;
    do
    {
      LODWORD(v474) = *(_DWORD *)(v58 + 28);
      v512 = 0;
      *(_OWORD *)v510 = 0u;
      *(_OWORD *)v511 = 0u;
      *(_OWORD *)v508 = 0u;
      long long v509 = 0u;
      *(_OWORD *)v506 = 0u;
      *(_OWORD *)v507 = 0u;
      *(_OWORD *)v504 = 0u;
      *(_OWORD *)v505 = 0u;
      *(_OWORD *)v502 = 0u;
      *(_OWORD *)v503 = 0u;
      *(_OWORD *)v501 = 0u;
      memset(__src, 0, sizeof(__src));
      llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>((unsigned int *)&v474, v513);
      if (__src[0].i64[0])
      {
        __src[0].i64[1] = __src[0].i64[0];
        operator delete((void *)__src[0].i64[0]);
      }
      __src[0] = *(int64x2_t *)v513;
      __src[1].i64[0] = *(void *)&v513[16];
      uint64_t v59 = *v3;
      uint64_t v60 = *(uint64_t **)(*v3 + 328);
      uint64_t v61 = *(uint64_t **)(*v3 + 336);
      if (v60 != v61)
      {
        do
        {
          uint64_t v62 = *((unsigned int *)v60 + 8);
          if (v62)
          {
            int v63 = 0;
            long long v64 = (unsigned __int8 *)v60[3];
            uint64_t v65 = 24 * v62;
            do
            {
              int v66 = *v64;
              v64 += 24;
              int v67 = 1 << v66;
              if (v66 == 16) {
                int v68 = 0;
              }
              else {
                int v68 = v67;
              }
              v63 |= v68;
              v65 -= 24;
            }
            while (v65);
          }
          else
          {
            int v63 = 0;
          }
          if (v63 == v474)
          {
            int v69 = *((char *)v60 + 23);
            if (v69 >= 0) {
              uint64_t v70 = v60;
            }
            else {
              uint64_t v70 = (uint64_t *)*v60;
            }
            if (v69 >= 0) {
              uint64_t v71 = *((unsigned __int8 *)v60 + 23);
            }
            else {
              uint64_t v71 = v60[1];
            }
            unint64_t v72 = v501[0];
            if (v501[0] >= v501[1])
            {
              uint64_t v74 = ((uint64_t)v501[0] - __src[1].i64[1]) >> 4;
              unint64_t v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 60) {
                goto LABEL_735;
              }
              uint64_t v76 = (uint64_t)v501[1] - __src[1].i64[1];
              if (((uint64_t)v501[1] - __src[1].i64[1]) >> 3 > v75) {
                unint64_t v75 = v76 >> 3;
              }
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v77 = v75;
              }
              if (v77) {
                unint64_t v77 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v77);
              }
              else {
                uint64_t v78 = 0;
              }
              size_t v79 = (void *)(v77 + 16 * v74);
              *size_t v79 = v70;
              v79[1] = v71;
              uint64_t v80 = (char *)v501[0];
              uint64_t v81 = __src[1].i64[1];
              uint64_t v82 = (uint64_t)v79;
              if (v501[0] != (void *)__src[1].i64[1])
              {
                do
                {
                  *(_OWORD *)(v82 - 16) = *((_OWORD *)v80 - 1);
                  v82 -= 16;
                  v80 -= 16;
                }
                while (v80 != (char *)v81);
                uint64_t v80 = (char *)__src[1].i64[1];
              }
              unint64_t v73 = v79 + 2;
              __src[1].i64[1] = v82;
              v501[0] = v79 + 2;
              v501[1] = (void *)(v77 + 16 * v78);
              if (v80) {
                operator delete(v80);
              }
            }
            else
            {
              *(void *)v501[0] = v70;
              v72[1] = v71;
              unint64_t v73 = v72 + 2;
            }
            v501[0] = v73;
          }
          v60 += 20;
        }
        while (v60 != v61);
        uint64_t v59 = *v464;
      }
      uint64_t v83 = *(uint64_t **)(v59 + 352);
      long long v84 = *(uint64_t **)(v59 + 360);
      while (v83 != v84)
      {
        uint64_t v85 = *((unsigned int *)v83 + 8);
        if (v85)
        {
          int v86 = 0;
          uint64_t v87 = (unsigned __int8 *)v83[3];
          uint64_t v88 = 24 * v85;
          do
          {
            int v89 = *v87;
            v87 += 24;
            int v90 = 1 << v89;
            if (v89 == 16) {
              int v91 = 0;
            }
            else {
              int v91 = v90;
            }
            v86 |= v91;
            v88 -= 24;
          }
          while (v88);
        }
        else
        {
          int v86 = 0;
        }
        if (v86 == v474)
        {
          int v92 = *((char *)v83 + 23);
          if (v92 >= 0) {
            char v93 = v83;
          }
          else {
            char v93 = (uint64_t *)*v83;
          }
          if (v92 >= 0) {
            uint64_t v94 = *((unsigned __int8 *)v83 + 23);
          }
          else {
            uint64_t v94 = v83[1];
          }
          uint64_t v95 = v502[1];
          if (v502[1] >= v503[0])
          {
            int64_t v97 = ((char *)v502[1] - (char *)v502[0]) >> 4;
            unint64_t v98 = v97 + 1;
            if ((unint64_t)(v97 + 1) >> 60) {
              goto LABEL_735;
            }
            int64_t v99 = (char *)v503[0] - (char *)v502[0];
            if (((char *)v503[0] - (char *)v502[0]) >> 3 > v98) {
              unint64_t v98 = v99 >> 3;
            }
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v100 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v100 = v98;
            }
            if (v100) {
              unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v100);
            }
            else {
              uint64_t v101 = 0;
            }
            uint64_t v102 = (char *)(v100 + 16 * v97);
            *(void *)uint64_t v102 = v93;
            *((void *)v102 + 1) = v94;
            uint64_t v103 = (char *)v502[1];
            char v104 = (char *)v502[0];
            long long v105 = v102;
            if (v502[1] != v502[0])
            {
              do
              {
                *((_OWORD *)v105 - 1) = *((_OWORD *)v103 - 1);
                v105 -= 16;
                v103 -= 16;
              }
              while (v103 != v104);
              uint64_t v103 = (char *)v502[0];
            }
            uint64_t v96 = v102 + 16;
            v502[0] = v105;
            v502[1] = v102 + 16;
            v503[0] = (void *)(v100 + 16 * v101);
            if (v103) {
              operator delete(v103);
            }
          }
          else
          {
            *(void *)v502[1] = v93;
            v95[1] = v94;
            uint64_t v96 = v95 + 2;
          }
          v502[1] = v96;
        }
        v83 += 20;
      }
      long long v106 = v467;
      if (v467 != (uint64_t *)&v468)
      {
        do
        {
          if (*((_DWORD *)v106 + 10) == v474)
          {
            uint64_t v107 = v106[4];
            switch(*(unsigned char *)(v107 + 152))
            {
              case 0:
                if ((*(unsigned char *)(v107 + 153) & 2) != 0)
                {
                  uint64_t v125 = *(void **)v107;
                  uint64_t v124 = *(void *)(v107 + 8);
                  char v126 = v510[0];
                  if (v510[0] >= v510[1])
                  {
                    uint64_t v145 = ((uint64_t)v510[0] - *((void *)&v509 + 1)) >> 4;
                    unint64_t v146 = v145 + 1;
                    if ((unint64_t)(v145 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    uint64_t v147 = (uint64_t)v510[1] - *((void *)&v509 + 1);
                    if (((uint64_t)v510[1] - *((void *)&v509 + 1)) >> 3 > v146) {
                      unint64_t v146 = v147 >> 3;
                    }
                    if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v148 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v148 = v146;
                    }
                    if (v148) {
                      unint64_t v148 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v148);
                    }
                    else {
                      uint64_t v149 = 0;
                    }
                    v205 = (void *)(v148 + 16 * v145);
                    void *v205 = v125;
                    v205[1] = v124;
                    v206 = (char *)v510[0];
                    v207 = (char *)*((void *)&v509 + 1);
                    v208 = v205;
                    if (v510[0] != *((void **)&v509 + 1))
                    {
                      do
                      {
                        *((_OWORD *)v208 - 1) = *((_OWORD *)v206 - 1);
                        v208 -= 2;
                        v206 -= 16;
                      }
                      while (v206 != v207);
                      v206 = (char *)*((void *)&v509 + 1);
                    }
                    v127 = v205 + 2;
                    *((void *)&v509 + 1) = v208;
                    v510[0] = v205 + 2;
                    v510[1] = (void *)(v148 + 16 * v149);
                    if (v206) {
                      operator delete(v206);
                    }
                  }
                  else
                  {
                    *(void *)v510[0] = v125;
                    v126[1] = v124;
                    v127 = v126 + 2;
                  }
                  v510[0] = v127;
                }
                else
                {
                  int64x2_t v109 = *(void **)v107;
                  uint64_t v108 = *(void *)(v107 + 8);
                  if (*(unsigned char *)(v107 + 153))
                  {
                    uint64_t v128 = v511[1];
                    if (v511[1] >= v512)
                    {
                      int64_t v188 = ((char *)v511[1] - (char *)v511[0]) >> 4;
                      unint64_t v189 = v188 + 1;
                      if ((unint64_t)(v188 + 1) >> 60) {
                        goto LABEL_735;
                      }
                      uint64_t v190 = v512 - (char *)v511[0];
                      if ((v512 - (char *)v511[0]) >> 3 > v189) {
                        unint64_t v189 = v190 >> 3;
                      }
                      if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v191 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v191 = v189;
                      }
                      if (v191) {
                        unint64_t v191 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v191);
                      }
                      else {
                        uint64_t v192 = 0;
                      }
                      v225 = (char *)(v191 + 16 * v188);
                      *(void *)v225 = v109;
                      *((void *)v225 + 1) = v108;
                      v226 = (char *)v511[1];
                      v227 = (char *)v511[0];
                      v228 = v225;
                      if (v511[1] != v511[0])
                      {
                        do
                        {
                          *((_OWORD *)v228 - 1) = *((_OWORD *)v226 - 1);
                          v228 -= 16;
                          v226 -= 16;
                        }
                        while (v226 != v227);
                        v226 = (char *)v511[0];
                      }
                      uint64_t v129 = v225 + 16;
                      v511[0] = v228;
                      v511[1] = v225 + 16;
                      v512 = (unsigned char *)(v191 + 16 * v192);
                      if (v226) {
                        operator delete(v226);
                      }
                    }
                    else
                    {
                      *(void *)v511[1] = v109;
                      v128[1] = v108;
                      uint64_t v129 = v128 + 2;
                    }
                    v511[1] = v129;
                  }
                  else
                  {
                    long long v110 = v504[0];
                    if (v504[0] >= v504[1])
                    {
                      int64_t v183 = ((char *)v504[0] - (char *)v503[1]) >> 4;
                      unint64_t v184 = v183 + 1;
                      if ((unint64_t)(v183 + 1) >> 60) {
                        goto LABEL_735;
                      }
                      int64_t v185 = (char *)v504[1] - (char *)v503[1];
                      if (((char *)v504[1] - (char *)v503[1]) >> 3 > v184) {
                        unint64_t v184 = v185 >> 3;
                      }
                      if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v186 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v186 = v184;
                      }
                      if (v186) {
                        unint64_t v186 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v186);
                      }
                      else {
                        uint64_t v187 = 0;
                      }
                      v221 = (char *)(v186 + 16 * v183);
                      *(void *)v221 = v109;
                      *((void *)v221 + 1) = v108;
                      v222 = (char *)v504[0];
                      v223 = (char *)v503[1];
                      v224 = v221;
                      if (v504[0] != v503[1])
                      {
                        do
                        {
                          *((_OWORD *)v224 - 1) = *((_OWORD *)v222 - 1);
                          v224 -= 16;
                          v222 -= 16;
                        }
                        while (v222 != v223);
                        v222 = (char *)v503[1];
                      }
                      long long v111 = v221 + 16;
                      v503[1] = v224;
                      v504[0] = v221 + 16;
                      v504[1] = (void *)(v186 + 16 * v187);
                      if (v222) {
                        operator delete(v222);
                      }
                    }
                    else
                    {
                      *(void *)v504[0] = v109;
                      v110[1] = v108;
                      long long v111 = v110 + 2;
                    }
                    v504[0] = v111;
                  }
                }
                break;
              case 1:
                if (*(_DWORD *)(v465 + 48) == 32)
                {
                  long long v113 = *(void **)v107;
                  uint64_t v112 = *(void *)(v107 + 8);
                  long long v114 = v505[1];
                  if (v505[1] >= v506[0])
                  {
                    int64_t v130 = ((char *)v505[1] - (char *)v505[0]) >> 4;
                    unint64_t v131 = v130 + 1;
                    if ((unint64_t)(v130 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    int64_t v132 = (char *)v506[0] - (char *)v505[0];
                    if (((char *)v506[0] - (char *)v505[0]) >> 3 > v131) {
                      unint64_t v131 = v132 >> 3;
                    }
                    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v133 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v133 = v131;
                    }
                    if (v133) {
                      unint64_t v133 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v133);
                    }
                    else {
                      uint64_t v134 = 0;
                    }
                    v193 = (char *)(v133 + 16 * v130);
                    *(void *)v193 = v113;
                    *((void *)v193 + 1) = v112;
                    v194 = (char *)v505[1];
                    v195 = (char *)v505[0];
                    v196 = v193;
                    if (v505[1] != v505[0])
                    {
                      do
                      {
                        *((_OWORD *)v196 - 1) = *((_OWORD *)v194 - 1);
                        v196 -= 16;
                        v194 -= 16;
                      }
                      while (v194 != v195);
                      v194 = (char *)v505[0];
                    }
                    uint64_t v115 = v193 + 16;
                    v505[0] = v196;
                    v505[1] = v193 + 16;
                    v506[0] = (void *)(v133 + 16 * v134);
                    if (v194) {
                      operator delete(v194);
                    }
                  }
                  else
                  {
                    *(void *)v505[1] = v113;
                    v114[1] = v112;
                    uint64_t v115 = v114 + 2;
                  }
                  v505[1] = v115;
                  break;
                }
                if (*(void *)v107) {
                  std::string::basic_string[abi:nn180100](v498, *(void **)v107, *(void *)(v107 + 8));
                }
                else {
                  memset(v498, 0, 24);
                }
                unint64_t v150 = std::string::insert((std::string *)v498, 0, "_");
                *(std::string *)v513 = *v150;
                v150->__r_.__value_.__l.__size_ = 0;
                v150->__r_.__value_.__r.__words[2] = 0;
                v150->__r_.__value_.__r.__words[0] = 0;
                if (v513[23] >= 0) {
                  size_t v151 = v513[23];
                }
                else {
                  size_t v151 = *(void *)&v513[8];
                }
                if (v151)
                {
                  if (v513[23] >= 0) {
                    uint64_t v152 = v513;
                  }
                  else {
                    uint64_t v152 = *(unsigned char **)v513;
                  }
                  uint64_t v153 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v475, v151, 0);
                  memcpy(v153, v152, v151);
                }
                else
                {
                  uint64_t v153 = 0;
                }
                __int16 v162 = v505[1];
                if (v505[1] >= v506[0])
                {
                  int64_t v164 = ((char *)v505[1] - (char *)v505[0]) >> 4;
                  unint64_t v165 = v164 + 1;
                  if ((unint64_t)(v164 + 1) >> 60) {
                    goto LABEL_735;
                  }
                  int64_t v166 = (char *)v506[0] - (char *)v505[0];
                  if (((char *)v506[0] - (char *)v505[0]) >> 3 > v165) {
                    unint64_t v165 = v166 >> 3;
                  }
                  if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v167 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v167 = v165;
                  }
                  if (v167) {
                    unint64_t v167 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v167);
                  }
                  else {
                    uint64_t v168 = 0;
                  }
                  v209 = (char *)(v167 + 16 * v164);
                  *(void *)v209 = v153;
                  *((void *)v209 + 1) = v151;
                  v210 = (char *)v505[1];
                  v211 = (char *)v505[0];
                  v212 = v209;
                  if (v505[1] != v505[0])
                  {
                    do
                    {
                      *((_OWORD *)v212 - 1) = *((_OWORD *)v210 - 1);
                      v212 -= 16;
                      v210 -= 16;
                    }
                    while (v210 != v211);
                    v210 = (char *)v505[0];
                  }
                  int v163 = v209 + 16;
                  v505[0] = v212;
                  v505[1] = v209 + 16;
                  v506[0] = (void *)(v167 + 16 * v168);
                  if (v210) {
                    operator delete(v210);
                  }
                }
                else
                {
                  *(void *)v505[1] = v153;
                  v162[1] = v151;
                  int v163 = v162 + 2;
                }
                v505[1] = v163;
                goto LABEL_332;
              case 2:
                if (*(_DWORD *)(v465 + 48) == 32)
                {
                  int v117 = *(void **)v107;
                  uint64_t v116 = *(void *)(v107 + 8);
                  long long v118 = v507[0];
                  if (v507[0] >= v507[1])
                  {
                    int64_t v135 = ((char *)v507[0] - (char *)v506[1]) >> 4;
                    unint64_t v136 = v135 + 1;
                    if ((unint64_t)(v135 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    int64_t v137 = (char *)v507[1] - (char *)v506[1];
                    if (((char *)v507[1] - (char *)v506[1]) >> 3 > v136) {
                      unint64_t v136 = v137 >> 3;
                    }
                    if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v138 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v138 = v136;
                    }
                    if (v138) {
                      unint64_t v138 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v138);
                    }
                    else {
                      uint64_t v139 = 0;
                    }
                    v197 = (char *)(v138 + 16 * v135);
                    *(void *)v197 = v117;
                    *((void *)v197 + 1) = v116;
                    v198 = (char *)v507[0];
                    v199 = (char *)v506[1];
                    v200 = v197;
                    if (v507[0] != v506[1])
                    {
                      do
                      {
                        *((_OWORD *)v200 - 1) = *((_OWORD *)v198 - 1);
                        v200 -= 16;
                        v198 -= 16;
                      }
                      while (v198 != v199);
                      v198 = (char *)v506[1];
                    }
                    uint64_t v119 = v197 + 16;
                    v506[1] = v200;
                    v507[0] = v197 + 16;
                    v507[1] = (void *)(v138 + 16 * v139);
                    if (v198) {
                      operator delete(v198);
                    }
                  }
                  else
                  {
                    *(void *)v507[0] = v117;
                    v118[1] = v116;
                    uint64_t v119 = v118 + 2;
                  }
                  v507[0] = v119;
                  break;
                }
                if (*(void *)v107) {
                  std::string::basic_string[abi:nn180100](v498, *(void **)v107, *(void *)(v107 + 8));
                }
                else {
                  memset(v498, 0, 24);
                }
                uint64_t v154 = std::string::insert((std::string *)v498, 0, "_OBJC_EHTYPE_$_");
                *(std::string *)v513 = *v154;
                v154->__r_.__value_.__l.__size_ = 0;
                v154->__r_.__value_.__r.__words[2] = 0;
                v154->__r_.__value_.__r.__words[0] = 0;
                if (v513[23] >= 0) {
                  size_t v155 = v513[23];
                }
                else {
                  size_t v155 = *(void *)&v513[8];
                }
                if (v155)
                {
                  if (v513[23] >= 0) {
                    unint64_t v156 = v513;
                  }
                  else {
                    unint64_t v156 = *(unsigned char **)v513;
                  }
                  uint64_t v157 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v475, v155, 0);
                  memcpy(v157, v156, v155);
                }
                else
                {
                  uint64_t v157 = 0;
                }
                uint64_t v169 = v504[0];
                if (v504[0] >= v504[1])
                {
                  int64_t v171 = ((char *)v504[0] - (char *)v503[1]) >> 4;
                  unint64_t v172 = v171 + 1;
                  if ((unint64_t)(v171 + 1) >> 60) {
                    goto LABEL_735;
                  }
                  int64_t v173 = (char *)v504[1] - (char *)v503[1];
                  if (((char *)v504[1] - (char *)v503[1]) >> 3 > v172) {
                    unint64_t v172 = v173 >> 3;
                  }
                  if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v174 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v174 = v172;
                  }
                  if (v174) {
                    unint64_t v174 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v174);
                  }
                  else {
                    uint64_t v175 = 0;
                  }
                  v213 = (char *)(v174 + 16 * v171);
                  *(void *)v213 = v157;
                  *((void *)v213 + 1) = v155;
                  v214 = (char *)v504[0];
                  v215 = (char *)v503[1];
                  v216 = v213;
                  if (v504[0] != v503[1])
                  {
                    do
                    {
                      *((_OWORD *)v216 - 1) = *((_OWORD *)v214 - 1);
                      v216 -= 16;
                      v214 -= 16;
                    }
                    while (v214 != v215);
                    v214 = (char *)v503[1];
                  }
                  v170 = v213 + 16;
                  v503[1] = v216;
                  v504[0] = v213 + 16;
                  v504[1] = (void *)(v174 + 16 * v175);
                  if (v214) {
                    operator delete(v214);
                  }
                }
                else
                {
                  *(void *)v504[0] = v157;
                  v169[1] = v155;
                  v170 = v169 + 2;
                }
                v504[0] = v170;
                goto LABEL_332;
              case 3:
                if (*(_DWORD *)(v465 + 48) == 32)
                {
                  uint64_t v121 = *(void **)v107;
                  uint64_t v120 = *(void *)(v107 + 8);
                  int v122 = v508[1];
                  if (v508[1] >= (void *)v509)
                  {
                    int64_t v140 = ((char *)v508[1] - (char *)v508[0]) >> 4;
                    unint64_t v141 = v140 + 1;
                    if ((unint64_t)(v140 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    uint64_t v142 = v509 - (unint64_t)v508[0];
                    if ((uint64_t)(v509 - (unint64_t)v508[0]) >> 3 > v141) {
                      unint64_t v141 = v142 >> 3;
                    }
                    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v143 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v143 = v141;
                    }
                    if (v143) {
                      unint64_t v143 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v143);
                    }
                    else {
                      uint64_t v144 = 0;
                    }
                    v201 = (char *)(v143 + 16 * v140);
                    *(void *)v201 = v121;
                    *((void *)v201 + 1) = v120;
                    v202 = (char *)v508[1];
                    v203 = (char *)v508[0];
                    v204 = v201;
                    if (v508[1] != v508[0])
                    {
                      do
                      {
                        *((_OWORD *)v204 - 1) = *((_OWORD *)v202 - 1);
                        v204 -= 16;
                        v202 -= 16;
                      }
                      while (v202 != v203);
                      v202 = (char *)v508[0];
                    }
                    int64x2_t v123 = v201 + 16;
                    v508[0] = v204;
                    v508[1] = v201 + 16;
                    *(void *)&long long v509 = v143 + 16 * v144;
                    if (v202) {
                      operator delete(v202);
                    }
                  }
                  else
                  {
                    *(void *)v508[1] = v121;
                    v122[1] = v120;
                    int64x2_t v123 = v122 + 2;
                  }
                  v508[1] = v123;
                }
                else
                {
                  if (*(void *)v107) {
                    std::string::basic_string[abi:nn180100](v498, *(void **)v107, *(void *)(v107 + 8));
                  }
                  else {
                    memset(v498, 0, 24);
                  }
                  uint64_t v158 = std::string::insert((std::string *)v498, 0, "_");
                  *(std::string *)v513 = *v158;
                  v158->__r_.__value_.__l.__size_ = 0;
                  v158->__r_.__value_.__r.__words[2] = 0;
                  v158->__r_.__value_.__r.__words[0] = 0;
                  if (v513[23] >= 0) {
                    size_t v159 = v513[23];
                  }
                  else {
                    size_t v159 = *(void *)&v513[8];
                  }
                  if (v159)
                  {
                    if (v513[23] >= 0) {
                      long long v160 = v513;
                    }
                    else {
                      long long v160 = *(unsigned char **)v513;
                    }
                    long long v161 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v475, v159, 0);
                    memcpy(v161, v160, v159);
                  }
                  else
                  {
                    long long v161 = 0;
                  }
                  v176 = v508[1];
                  if (v508[1] >= (void *)v509)
                  {
                    int64_t v178 = ((char *)v508[1] - (char *)v508[0]) >> 4;
                    unint64_t v179 = v178 + 1;
                    if ((unint64_t)(v178 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    uint64_t v180 = v509 - (unint64_t)v508[0];
                    if ((uint64_t)(v509 - (unint64_t)v508[0]) >> 3 > v179) {
                      unint64_t v179 = v180 >> 3;
                    }
                    if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v181 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v181 = v179;
                    }
                    if (v181) {
                      unint64_t v181 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v181);
                    }
                    else {
                      uint64_t v182 = 0;
                    }
                    v217 = (char *)(v181 + 16 * v178);
                    *(void *)v217 = v161;
                    *((void *)v217 + 1) = v159;
                    v218 = (char *)v508[1];
                    v219 = (char *)v508[0];
                    v220 = v217;
                    if (v508[1] != v508[0])
                    {
                      do
                      {
                        *((_OWORD *)v220 - 1) = *((_OWORD *)v218 - 1);
                        v220 -= 16;
                        v218 -= 16;
                      }
                      while (v218 != v219);
                      v218 = (char *)v508[0];
                    }
                    v177 = v217 + 16;
                    v508[0] = v220;
                    v508[1] = v217 + 16;
                    *(void *)&long long v509 = v181 + 16 * v182;
                    if (v218) {
                      operator delete(v218);
                    }
                  }
                  else
                  {
                    *(void *)v508[1] = v161;
                    v176[1] = v159;
                    v177 = v176 + 2;
                  }
                  v508[1] = v177;
LABEL_332:
                  if ((v513[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v513);
                  }
                  if ((v498[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v498);
                  }
                }
                break;
              default:
                break;
            }
          }
          v229 = (uint64_t *)v106[1];
          if (v229)
          {
            do
            {
              v230 = v229;
              v229 = (uint64_t *)*v229;
            }
            while (v229);
          }
          else
          {
            do
            {
              v230 = (uint64_t *)v106[2];
              BOOL v231 = *v230 == (void)v106;
              long long v106 = v230;
            }
            while (!v231);
          }
          long long v106 = v230;
        }
        while (v230 != (uint64_t *)&v468);
      }
      unint64_t v232 = 126 - 2 * __clz(((char *)v504[0] - (char *)v503[1]) >> 4);
      if (v504[0] == v503[1]) {
        uint64_t v233 = 0;
      }
      else {
        uint64_t v233 = v232;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((unint64_t)v503[1], (_OWORD *)v504[0], v233, 1);
      unint64_t v234 = 126 - 2 * __clz(((char *)v505[1] - (char *)v505[0]) >> 4);
      if (v505[1] == v505[0]) {
        uint64_t v235 = 0;
      }
      else {
        uint64_t v235 = v234;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((unint64_t)v505[0], (_OWORD *)v505[1], v235, 1);
      unint64_t v236 = 126 - 2 * __clz(((char *)v507[0] - (char *)v506[1]) >> 4);
      if (v507[0] == v506[1]) {
        uint64_t v237 = 0;
      }
      else {
        uint64_t v237 = v236;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((unint64_t)v506[1], (_OWORD *)v507[0], v237, 1);
      unint64_t v238 = 126 - 2 * __clz(((char *)v508[1] - (char *)v508[0]) >> 4);
      if (v508[1] == v508[0]) {
        uint64_t v239 = 0;
      }
      else {
        uint64_t v239 = v238;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((unint64_t)v508[0], (_OWORD *)v508[1], v239, 1);
      unint64_t v240 = 126 - 2 * __clz(((uint64_t)v510[0] - *((void *)&v509 + 1)) >> 4);
      if (v510[0] == *((void **)&v509 + 1)) {
        uint64_t v241 = 0;
      }
      else {
        uint64_t v241 = v240;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((unint64_t *)&v509 + 1), (_OWORD *)v510[0], v241, 1);
      unint64_t v242 = 126 - 2 * __clz(((char *)v511[1] - (char *)v511[0]) >> 4);
      if (v511[1] == v511[0]) {
        uint64_t v243 = 0;
      }
      else {
        uint64_t v243 = v242;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((unint64_t)v511[0], (_OWORD *)v511[1], v243, 1);
      uint64_t v244 = v493.i64[1];
      if (v493.i64[1] >= v494[0])
      {
        uint64_t v246 = 0x84BDA12F684BDA13 * ((v493.i64[1] - v493.i64[0]) >> 3);
        unint64_t v247 = v246 + 1;
        if ((unint64_t)(v246 + 1) > 0x12F684BDA12F684) {
LABEL_735:
        }
          abort();
        if (0x97B425ED097B426 * ((v494[0] - v493.i64[0]) >> 3) > v247) {
          unint64_t v247 = 0x97B425ED097B426 * ((v494[0] - v493.i64[0]) >> 3);
        }
        if (0x84BDA12F684BDA13 * ((v494[0] - v493.i64[0]) >> 3) >= 0x97B425ED097B42) {
          unint64_t v248 = 0x12F684BDA12F684;
        }
        else {
          unint64_t v248 = v247;
        }
        v249 = *(void **)&v513[8];
        uint64_t v245 = *(void *)&v513[16] + 216;
        *(void *)&v513[16] += 216;
        uint64_t v250 = v493.i64[1];
        uint64_t v251 = v493.i64[0];
        if (v493.i64[1] == v493.i64[0])
        {
          int64x2_t v252 = vdupq_n_s64(v493.u64[1]);
        }
        else
        {
          do
          {
            v249 -= 27;
            v250 -= 216;
          }
          while (v250 != v251);
          int64x2_t v252 = v493;
          uint64_t v245 = *(void *)&v513[16];
        }
        v493.i64[0] = (uint64_t)v249;
        v493.i64[1] = v245;
        *(int64x2_t *)&v513[8] = v252;
        uint64_t v253 = v494[0];
        v494[0] = *(void *)&v513[24];
        *(void *)&v513[24] = v253;
        *(void *)v513 = v252.i64[0];
      }
      else
      {
        uint64_t v245 = v244 + 216;
      }
      v493.i64[1] = v245;
      v254 = *(void **)(v58 + 8);
      size_t v3 = v464;
      if (v254)
      {
        do
        {
          v255 = (void **)v254;
          v254 = (void *)*v254;
        }
        while (v254);
      }
      else
      {
        do
        {
          v255 = *(void ***)(v58 + 16);
          BOOL v231 = *v255 == (void *)v58;
          uint64_t v58 = (uint64_t)v255;
        }
        while (!v231);
      }
      uint64_t v58 = (uint64_t)v255;
    }
    while (v255 != &v471);
  }
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v471);
  v471 = 0;
  uint64_t v472 = 0;
  v470 = &v471;
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v468);
  v468 = 0;
  uint64_t v469 = 0;
  v467 = (uint64_t *)&v468;
  llvm::MachO::SymbolSet::undefineds(*(llvm::MachO::SymbolSet **)(*v3 + 448), (uint64_t)__src);
  *(int64x2_t *)v513 = __src[0];
  *(int64x2_t *)&v513[16] = __src[1];
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)&v514, (uint64_t)v501);
  *(_OWORD *)v498 = *(_OWORD *)v503;
  *(_OWORD *)&v498[16] = *(_OWORD *)v504;
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v499, (uint64_t)v505);
  for (uint64_t i = *(void *)v513; *(void *)v513 != *(void *)v498; uint64_t i = *(void *)v513)
  {
    unint64_t v257 = *(void *)(i + 24);
    v474 = (uint64_t *)v257;
    uint64_t v258 = *(unsigned int *)(v257 + 24);
    if (v258)
    {
      unsigned int v259 = 0;
      v260 = *(unsigned __int8 **)(v257 + 16);
      uint64_t v261 = 24 * v258;
      do
      {
        int v262 = *v260;
        v260 += 24;
        int v263 = 1 << v262;
        if (v262 == 16) {
          int v264 = 0;
        }
        else {
          int v264 = v263;
        }
        v259 |= v264;
        v261 -= 24;
      }
      while (v261);
    }
    else
    {
      unsigned int v259 = 0;
    }
    *((_DWORD *)std::__tree<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::__map_value_compare<llvm::MachO::Symbol const*,std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::less<llvm::MachO::Symbol const*>,true>,std::allocator<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>>>::__emplace_unique_key_args<llvm::MachO::Symbol const*,std::piecewise_construct_t const&,std::tuple<llvm::MachO::Symbol const* const&>,std::tuple<>>(&v467, v257, &v474)+ 10) = v259;
    std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>((uint64_t *)&v470, v259, v259);
    *(void *)v513 += 32;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)v513);
    llvm::filter_iterator_base<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::findNextValid((uint64_t)v513);
  }
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v499);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](&v514);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v505);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v501);
  uint64_t v265 = (uint64_t)v470;
  if (v470 != &v471)
  {
    do
    {
      LODWORD(v474) = *(_DWORD *)(v265 + 28);
      *(_OWORD *)v506 = 0u;
      *(_OWORD *)v507 = 0u;
      *(_OWORD *)v504 = 0u;
      *(_OWORD *)v505 = 0u;
      *(_OWORD *)v502 = 0u;
      *(_OWORD *)v503 = 0u;
      *(_OWORD *)v501 = 0u;
      memset(__src, 0, sizeof(__src));
      llvm::MachO::ArchitectureSet::operator std::vector<llvm::MachO::Architecture>((unsigned int *)&v474, v513);
      if (__src[0].i64[0])
      {
        __src[0].i64[1] = __src[0].i64[0];
        operator delete((void *)__src[0].i64[0]);
      }
      __src[0] = *(int64x2_t *)v513;
      __src[1].i64[0] = *(void *)&v513[16];
      v266 = v467;
      if (v467 != (uint64_t *)&v468)
      {
        do
        {
          if (*((_DWORD *)v266 + 10) == v474)
          {
            uint64_t v267 = v266[4];
            switch(*(unsigned char *)(v267 + 152))
            {
              case 0:
                v269 = *(void **)v267;
                uint64_t v268 = *(void *)(v267 + 8);
                if ((*(unsigned char *)(v267 + 153) & 4) != 0)
                {
                  v284 = v507[0];
                  if (v507[0] >= v507[1])
                  {
                    int64_t v306 = ((char *)v507[0] - (char *)v506[1]) >> 4;
                    unint64_t v307 = v306 + 1;
                    if ((unint64_t)(v306 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    int64_t v308 = (char *)v507[1] - (char *)v506[1];
                    if (((char *)v507[1] - (char *)v506[1]) >> 3 > v307) {
                      unint64_t v307 = v308 >> 3;
                    }
                    if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v309 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v309 = v307;
                    }
                    if (v309) {
                      unint64_t v309 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v309);
                    }
                    else {
                      uint64_t v310 = 0;
                    }
                    v360 = (char *)(v309 + 16 * v306);
                    *(void *)v360 = v269;
                    *((void *)v360 + 1) = v268;
                    v361 = (char *)v507[0];
                    v362 = (char *)v506[1];
                    v363 = v360;
                    if (v507[0] != v506[1])
                    {
                      do
                      {
                        *((_OWORD *)v363 - 1) = *((_OWORD *)v361 - 1);
                        v363 -= 16;
                        v361 -= 16;
                      }
                      while (v361 != v362);
                      v361 = (char *)v506[1];
                    }
                    v285 = v360 + 16;
                    v506[1] = v363;
                    v507[0] = v360 + 16;
                    v507[1] = (void *)(v309 + 16 * v310);
                    if (v361) {
                      operator delete(v361);
                    }
                  }
                  else
                  {
                    *(void *)v507[0] = v269;
                    v284[1] = v268;
                    v285 = v284 + 2;
                  }
                  v507[0] = v285;
                }
                else
                {
                  v270 = v501[0];
                  if (v501[0] >= v501[1])
                  {
                    uint64_t v286 = ((uint64_t)v501[0] - __src[1].i64[1]) >> 4;
                    unint64_t v287 = v286 + 1;
                    if ((unint64_t)(v286 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    uint64_t v288 = (uint64_t)v501[1] - __src[1].i64[1];
                    if (((uint64_t)v501[1] - __src[1].i64[1]) >> 3 > v287) {
                      unint64_t v287 = v288 >> 3;
                    }
                    if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v289 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v289 = v287;
                    }
                    if (v289) {
                      unint64_t v289 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v289);
                    }
                    else {
                      uint64_t v290 = 0;
                    }
                    v344 = (void *)(v289 + 16 * v286);
                    void *v344 = v269;
                    v344[1] = v268;
                    v345 = (char *)v501[0];
                    uint64_t v346 = __src[1].i64[1];
                    uint64_t v347 = (uint64_t)v344;
                    if (v501[0] != (void *)__src[1].i64[1])
                    {
                      do
                      {
                        *(_OWORD *)(v347 - 16) = *((_OWORD *)v345 - 1);
                        v347 -= 16;
                        v345 -= 16;
                      }
                      while (v345 != (char *)v346);
                      v345 = (char *)__src[1].i64[1];
                    }
                    v271 = v344 + 2;
                    __src[1].i64[1] = v347;
                    v501[0] = v344 + 2;
                    v501[1] = (void *)(v289 + 16 * v290);
                    if (v345) {
                      operator delete(v345);
                    }
                  }
                  else
                  {
                    *(void *)v501[0] = v269;
                    v270[1] = v268;
                    v271 = v270 + 2;
                  }
                  v501[0] = v271;
                }
                break;
              case 1:
                if (*(_DWORD *)(v465 + 48) == 32)
                {
                  v273 = *(void **)v267;
                  uint64_t v272 = *(void *)(v267 + 8);
                  v274 = v502[1];
                  if (v502[1] >= v503[0])
                  {
                    int64_t v291 = ((char *)v502[1] - (char *)v502[0]) >> 4;
                    unint64_t v292 = v291 + 1;
                    if ((unint64_t)(v291 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    int64_t v293 = (char *)v503[0] - (char *)v502[0];
                    if (((char *)v503[0] - (char *)v502[0]) >> 3 > v292) {
                      unint64_t v292 = v293 >> 3;
                    }
                    if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v294 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v294 = v292;
                    }
                    if (v294) {
                      unint64_t v294 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v294);
                    }
                    else {
                      uint64_t v295 = 0;
                    }
                    v348 = (char *)(v294 + 16 * v291);
                    *(void *)v348 = v273;
                    *((void *)v348 + 1) = v272;
                    v349 = (char *)v502[1];
                    v350 = (char *)v502[0];
                    v351 = v348;
                    if (v502[1] != v502[0])
                    {
                      do
                      {
                        *((_OWORD *)v351 - 1) = *((_OWORD *)v349 - 1);
                        v351 -= 16;
                        v349 -= 16;
                      }
                      while (v349 != v350);
                      v349 = (char *)v502[0];
                    }
                    v275 = v348 + 16;
                    v502[0] = v351;
                    v502[1] = v348 + 16;
                    v503[0] = (void *)(v294 + 16 * v295);
                    if (v349) {
                      operator delete(v349);
                    }
                  }
                  else
                  {
                    *(void *)v502[1] = v273;
                    v274[1] = v272;
                    v275 = v274 + 2;
                  }
                  v502[1] = v275;
                  break;
                }
                if (*(void *)v267) {
                  std::string::basic_string[abi:nn180100](v498, *(void **)v267, *(void *)(v267 + 8));
                }
                else {
                  memset(v498, 0, 24);
                }
                v311 = std::string::insert((std::string *)v498, 0, "_");
                *(std::string *)v513 = *v311;
                v311->__r_.__value_.__l.__size_ = 0;
                v311->__r_.__value_.__r.__words[2] = 0;
                v311->__r_.__value_.__r.__words[0] = 0;
                if (v513[23] >= 0) {
                  size_t v312 = v513[23];
                }
                else {
                  size_t v312 = *(void *)&v513[8];
                }
                if (v312)
                {
                  if (v513[23] >= 0) {
                    v313 = v513;
                  }
                  else {
                    v313 = *(unsigned char **)v513;
                  }
                  v314 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v475, v312, 0);
                  memcpy(v314, v313, v312);
                }
                else
                {
                  v314 = 0;
                }
                v323 = v502[1];
                if (v502[1] >= v503[0])
                {
                  int64_t v325 = ((char *)v502[1] - (char *)v502[0]) >> 4;
                  unint64_t v326 = v325 + 1;
                  if ((unint64_t)(v325 + 1) >> 60) {
                    goto LABEL_735;
                  }
                  int64_t v327 = (char *)v503[0] - (char *)v502[0];
                  if (((char *)v503[0] - (char *)v502[0]) >> 3 > v326) {
                    unint64_t v326 = v327 >> 3;
                  }
                  if ((unint64_t)v327 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v328 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v328 = v326;
                  }
                  if (v328) {
                    unint64_t v328 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v328);
                  }
                  else {
                    uint64_t v329 = 0;
                  }
                  v364 = (char *)(v328 + 16 * v325);
                  *(void *)v364 = v314;
                  *((void *)v364 + 1) = v312;
                  v365 = (char *)v502[1];
                  v366 = (char *)v502[0];
                  v367 = v364;
                  if (v502[1] != v502[0])
                  {
                    do
                    {
                      *((_OWORD *)v367 - 1) = *((_OWORD *)v365 - 1);
                      v367 -= 16;
                      v365 -= 16;
                    }
                    while (v365 != v366);
                    v365 = (char *)v502[0];
                  }
                  v324 = v364 + 16;
                  v502[0] = v367;
                  v502[1] = v364 + 16;
                  v503[0] = (void *)(v328 + 16 * v329);
                  if (v365) {
                    operator delete(v365);
                  }
                }
                else
                {
                  *(void *)v502[1] = v314;
                  v323[1] = v312;
                  v324 = v323 + 2;
                }
                v502[1] = v324;
                goto LABEL_585;
              case 2:
                if (*(_DWORD *)(v465 + 48) == 32)
                {
                  v277 = *(void **)v267;
                  uint64_t v276 = *(void *)(v267 + 8);
                  v278 = v504[0];
                  if (v504[0] >= v504[1])
                  {
                    int64_t v296 = ((char *)v504[0] - (char *)v503[1]) >> 4;
                    unint64_t v297 = v296 + 1;
                    if ((unint64_t)(v296 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    int64_t v298 = (char *)v504[1] - (char *)v503[1];
                    if (((char *)v504[1] - (char *)v503[1]) >> 3 > v297) {
                      unint64_t v297 = v298 >> 3;
                    }
                    if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v299 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v299 = v297;
                    }
                    if (v299) {
                      unint64_t v299 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v299);
                    }
                    else {
                      uint64_t v300 = 0;
                    }
                    v352 = (char *)(v299 + 16 * v296);
                    *(void *)v352 = v277;
                    *((void *)v352 + 1) = v276;
                    v353 = (char *)v504[0];
                    v354 = (char *)v503[1];
                    v355 = v352;
                    if (v504[0] != v503[1])
                    {
                      do
                      {
                        *((_OWORD *)v355 - 1) = *((_OWORD *)v353 - 1);
                        v355 -= 16;
                        v353 -= 16;
                      }
                      while (v353 != v354);
                      v353 = (char *)v503[1];
                    }
                    v279 = v352 + 16;
                    v503[1] = v355;
                    v504[0] = v352 + 16;
                    v504[1] = (void *)(v299 + 16 * v300);
                    if (v353) {
                      operator delete(v353);
                    }
                  }
                  else
                  {
                    *(void *)v504[0] = v277;
                    v278[1] = v276;
                    v279 = v278 + 2;
                  }
                  v504[0] = v279;
                  break;
                }
                if (*(void *)v267) {
                  std::string::basic_string[abi:nn180100](v498, *(void **)v267, *(void *)(v267 + 8));
                }
                else {
                  memset(v498, 0, 24);
                }
                v315 = std::string::insert((std::string *)v498, 0, "_OBJC_EHTYPE_$_");
                *(std::string *)v513 = *v315;
                v315->__r_.__value_.__l.__size_ = 0;
                v315->__r_.__value_.__r.__words[2] = 0;
                v315->__r_.__value_.__r.__words[0] = 0;
                if (v513[23] >= 0) {
                  size_t v316 = v513[23];
                }
                else {
                  size_t v316 = *(void *)&v513[8];
                }
                if (v316)
                {
                  if (v513[23] >= 0) {
                    v317 = v513;
                  }
                  else {
                    v317 = *(unsigned char **)v513;
                  }
                  v318 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v475, v316, 0);
                  memcpy(v318, v317, v316);
                }
                else
                {
                  v318 = 0;
                }
                v330 = v501[0];
                if (v501[0] >= v501[1])
                {
                  uint64_t v332 = ((uint64_t)v501[0] - __src[1].i64[1]) >> 4;
                  unint64_t v333 = v332 + 1;
                  if ((unint64_t)(v332 + 1) >> 60) {
                    goto LABEL_735;
                  }
                  uint64_t v334 = (uint64_t)v501[1] - __src[1].i64[1];
                  if (((uint64_t)v501[1] - __src[1].i64[1]) >> 3 > v333) {
                    unint64_t v333 = v334 >> 3;
                  }
                  if ((unint64_t)v334 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v335 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v335 = v333;
                  }
                  if (v335) {
                    unint64_t v335 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v335);
                  }
                  else {
                    uint64_t v336 = 0;
                  }
                  v368 = (void *)(v335 + 16 * v332);
                  void *v368 = v318;
                  v368[1] = v316;
                  v369 = (char *)v501[0];
                  uint64_t v370 = __src[1].i64[1];
                  uint64_t v371 = (uint64_t)v368;
                  if (v501[0] != (void *)__src[1].i64[1])
                  {
                    do
                    {
                      *(_OWORD *)(v371 - 16) = *((_OWORD *)v369 - 1);
                      v371 -= 16;
                      v369 -= 16;
                    }
                    while (v369 != (char *)v370);
                    v369 = (char *)__src[1].i64[1];
                  }
                  v331 = v368 + 2;
                  __src[1].i64[1] = v371;
                  v501[0] = v368 + 2;
                  v501[1] = (void *)(v335 + 16 * v336);
                  if (v369) {
                    operator delete(v369);
                  }
                }
                else
                {
                  *(void *)v501[0] = v318;
                  v330[1] = v316;
                  v331 = v330 + 2;
                }
                v501[0] = v331;
                goto LABEL_585;
              case 3:
                if (*(_DWORD *)(v465 + 48) == 32)
                {
                  v281 = *(void **)v267;
                  uint64_t v280 = *(void *)(v267 + 8);
                  v282 = v505[1];
                  if (v505[1] >= v506[0])
                  {
                    int64_t v301 = ((char *)v505[1] - (char *)v505[0]) >> 4;
                    unint64_t v302 = v301 + 1;
                    if ((unint64_t)(v301 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    int64_t v303 = (char *)v506[0] - (char *)v505[0];
                    if (((char *)v506[0] - (char *)v505[0]) >> 3 > v302) {
                      unint64_t v302 = v303 >> 3;
                    }
                    if ((unint64_t)v303 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v304 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v304 = v302;
                    }
                    if (v304) {
                      unint64_t v304 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v304);
                    }
                    else {
                      uint64_t v305 = 0;
                    }
                    v356 = (char *)(v304 + 16 * v301);
                    *(void *)v356 = v281;
                    *((void *)v356 + 1) = v280;
                    v357 = (char *)v505[1];
                    v358 = (char *)v505[0];
                    v359 = v356;
                    if (v505[1] != v505[0])
                    {
                      do
                      {
                        *((_OWORD *)v359 - 1) = *((_OWORD *)v357 - 1);
                        v359 -= 16;
                        v357 -= 16;
                      }
                      while (v357 != v358);
                      v357 = (char *)v505[0];
                    }
                    v283 = v356 + 16;
                    v505[0] = v359;
                    v505[1] = v356 + 16;
                    v506[0] = (void *)(v304 + 16 * v305);
                    if (v357) {
                      operator delete(v357);
                    }
                  }
                  else
                  {
                    *(void *)v505[1] = v281;
                    v282[1] = v280;
                    v283 = v282 + 2;
                  }
                  v505[1] = v283;
                }
                else
                {
                  if (*(void *)v267) {
                    std::string::basic_string[abi:nn180100](v498, *(void **)v267, *(void *)(v267 + 8));
                  }
                  else {
                    memset(v498, 0, 24);
                  }
                  v319 = std::string::insert((std::string *)v498, 0, "_");
                  *(std::string *)v513 = *v319;
                  v319->__r_.__value_.__l.__size_ = 0;
                  v319->__r_.__value_.__r.__words[2] = 0;
                  v319->__r_.__value_.__r.__words[0] = 0;
                  if (v513[23] >= 0) {
                    size_t v320 = v513[23];
                  }
                  else {
                    size_t v320 = *(void *)&v513[8];
                  }
                  if (v320)
                  {
                    if (v513[23] >= 0) {
                      v321 = v513;
                    }
                    else {
                      v321 = *(unsigned char **)v513;
                    }
                    v322 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v475, v320, 0);
                    memcpy(v322, v321, v320);
                  }
                  else
                  {
                    v322 = 0;
                  }
                  v337 = v505[1];
                  if (v505[1] >= v506[0])
                  {
                    int64_t v339 = ((char *)v505[1] - (char *)v505[0]) >> 4;
                    unint64_t v340 = v339 + 1;
                    if ((unint64_t)(v339 + 1) >> 60) {
                      goto LABEL_735;
                    }
                    int64_t v341 = (char *)v506[0] - (char *)v505[0];
                    if (((char *)v506[0] - (char *)v505[0]) >> 3 > v340) {
                      unint64_t v340 = v341 >> 3;
                    }
                    if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v342 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v342 = v340;
                    }
                    if (v342) {
                      unint64_t v342 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v342);
                    }
                    else {
                      uint64_t v343 = 0;
                    }
                    v372 = (char *)(v342 + 16 * v339);
                    *(void *)v372 = v322;
                    *((void *)v372 + 1) = v320;
                    v373 = (char *)v505[1];
                    v374 = (char *)v505[0];
                    v375 = v372;
                    if (v505[1] != v505[0])
                    {
                      do
                      {
                        *((_OWORD *)v375 - 1) = *((_OWORD *)v373 - 1);
                        v375 -= 16;
                        v373 -= 16;
                      }
                      while (v373 != v374);
                      v373 = (char *)v505[0];
                    }
                    v338 = v372 + 16;
                    v505[0] = v375;
                    v505[1] = v372 + 16;
                    v506[0] = (void *)(v342 + 16 * v343);
                    if (v373) {
                      operator delete(v373);
                    }
                  }
                  else
                  {
                    *(void *)v505[1] = v322;
                    v337[1] = v320;
                    v338 = v337 + 2;
                  }
                  v505[1] = v338;
LABEL_585:
                  if ((v513[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v513);
                  }
                  if ((v498[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v498);
                  }
                }
                break;
              default:
                break;
            }
          }
          v376 = (uint64_t *)v266[1];
          if (v376)
          {
            do
            {
              v377 = v376;
              v376 = (uint64_t *)*v376;
            }
            while (v376);
          }
          else
          {
            do
            {
              v377 = (uint64_t *)v266[2];
              BOOL v231 = *v377 == (void)v266;
              v266 = v377;
            }
            while (!v231);
          }
          v266 = v377;
        }
        while (v377 != (uint64_t *)&v468);
      }
      unint64_t v378 = 126 - 2 * __clz(((uint64_t)v501[0] - __src[1].i64[1]) >> 4);
      if (v501[0] == (void *)__src[1].i64[1]) {
        uint64_t v379 = 0;
      }
      else {
        uint64_t v379 = v378;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(__src[1].u64[1], (_OWORD *)v501[0], v379, 1);
      unint64_t v380 = 126 - 2 * __clz(((char *)v502[1] - (char *)v502[0]) >> 4);
      if (v502[1] == v502[0]) {
        uint64_t v381 = 0;
      }
      else {
        uint64_t v381 = v380;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((unint64_t)v502[0], (_OWORD *)v502[1], v381, 1);
      unint64_t v382 = 126 - 2 * __clz(((char *)v504[0] - (char *)v503[1]) >> 4);
      if (v504[0] == v503[1]) {
        uint64_t v383 = 0;
      }
      else {
        uint64_t v383 = v382;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((unint64_t)v503[1], (_OWORD *)v504[0], v383, 1);
      unint64_t v384 = 126 - 2 * __clz(((char *)v505[1] - (char *)v505[0]) >> 4);
      if (v505[1] == v505[0]) {
        uint64_t v385 = 0;
      }
      else {
        uint64_t v385 = v384;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((unint64_t)v505[0], (_OWORD *)v505[1], v385, 1);
      unint64_t v386 = 126 - 2 * __clz(((char *)v507[0] - (char *)v506[1]) >> 4);
      if (v507[0] == v506[1]) {
        uint64_t v387 = 0;
      }
      else {
        uint64_t v387 = v386;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>((unint64_t)v506[1], (_OWORD *)v507[0], v387, 1);
      uint64_t v388 = v494[2];
      if (v494[2] >= v494[3])
      {
        uint64_t v390 = 0x8E38E38E38E38E39 * ((uint64_t)(v494[2] - v494[1]) >> 4);
        unint64_t v391 = v390 + 1;
        if ((unint64_t)(v390 + 1) > 0x1C71C71C71C71C7) {
          goto LABEL_735;
        }
        if (0x1C71C71C71C71C72 * ((uint64_t)(v494[3] - v494[1]) >> 4) > v391) {
          unint64_t v391 = 0x1C71C71C71C71C72 * ((uint64_t)(v494[3] - v494[1]) >> 4);
        }
        if (0x8E38E38E38E38E39 * ((uint64_t)(v494[3] - v494[1]) >> 4) >= 0xE38E38E38E38E3) {
          unint64_t v392 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v392 = v391;
        }
        v393 = *(void **)&v513[8];
        uint64_t v389 = *(void *)&v513[16] + 144;
        *(void *)&v513[16] += 144;
        uint64_t v394 = v494[2];
        uint64_t v395 = v494[1];
        if (v494[2] == v494[1])
        {
          int64x2_t v396 = vdupq_n_s64(v494[2]);
        }
        else
        {
          do
          {
            v393 -= 18;
            v394 -= 144;
          }
          while (v394 != v395);
          int64x2_t v396 = *(int64x2_t *)&v494[1];
          uint64_t v389 = *(void *)&v513[16];
        }
        v494[1] = v393;
        v494[2] = v389;
        *(int64x2_t *)&v513[8] = v396;
        uint64_t v397 = v494[3];
        v494[3] = *(void *)&v513[24];
        *(void *)&v513[24] = v397;
        *(void *)v513 = v396.i64[0];
      }
      else
      {
        uint64_t v389 = v388 + 144;
      }
      v494[2] = v389;
      if (v506[1])
      {
        v507[0] = v506[1];
        operator delete(v506[1]);
      }
      if (v505[0])
      {
        v505[1] = v505[0];
        operator delete(v505[0]);
      }
      if (v503[1])
      {
        v504[0] = v503[1];
        operator delete(v503[1]);
      }
      if (v502[0])
      {
        v502[1] = v502[0];
        operator delete(v502[0]);
      }
      if (__src[1].i64[1])
      {
        v501[0] = (void *)__src[1].i64[1];
        operator delete((void *)__src[1].i64[1]);
      }
      if (__src[0].i64[0])
      {
        __src[0].i64[1] = __src[0].i64[0];
        operator delete((void *)__src[0].i64[0]);
      }
      v398 = *(void **)(v265 + 8);
      if (v398)
      {
        do
        {
          v399 = (void **)v398;
          v398 = (void *)*v398;
        }
        while (v398);
      }
      else
      {
        do
        {
          v399 = *(void ***)(v265 + 16);
          BOOL v231 = *v399 == (void *)v265;
          uint64_t v265 = (uint64_t)v399;
        }
        while (!v231);
      }
      uint64_t v265 = (uint64_t)v399;
    }
    while (v399 != &v471);
  }
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v468);
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v471);
  a1 = v461;
LABEL_642:
  v496 = (uint64_t **)v475;
  v400 = v463;
  llvm::yaml::IO::processKey<std::vector<llvm::MachO::Architecture>,llvm::yaml::EmptyContext>((uint64_t)v463, (char **)__p);
  memset(v498, 0, 24);
  if (a1 == 8)
  {
    llvm::yaml::IO::processKey<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,llvm::yaml::EmptyContext>(v463, v496 + 15);
  }
  else
  {
    if (!(*(unsigned int (**)(uint64_t *))(*v463 + 56))(v463) || *(void *)v498 != *(void *)&v498[8])
    {
      v474 = 0;
      char v473 = 0;
      if ((*(unsigned int (**)(uint64_t *, const char *, void, void, char *, uint64_t **))(*v463 + 120))(v463, "uuids", 0, 0, &v473, &v474))
      {
        unsigned int v401 = (*(uint64_t (**)(uint64_t *))(*v463 + 64))(v463);
        int v462 = a1;
        if ((*(unsigned int (**)(uint64_t *))(*v463 + 16))(v463)) {
          unsigned int v401 = -1431655765 * ((*(void *)&v498[8] - *(void *)v498) >> 4);
        }
        if (v401)
        {
          unint64_t v402 = 0;
          uint64_t v403 = v401;
          do
          {
            v467 = 0;
            if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t **))(*v463 + 72))(v463, v402, &v467))
            {
              uint64_t v404 = *(void *)&v498[8];
              uint64_t v405 = *(void *)v498;
              unint64_t v406 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v498[8] - *(void *)v498) >> 4);
              if (v406 <= v402)
              {
                unint64_t v407 = v402 + 1;
                unint64_t v408 = v402 + 1 - v406;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v498[16] - *(void *)&v498[8]) >> 4) >= v408)
                {
                  bzero(*(void **)&v498[8], 48 * ((48 * v408 - 48) / 0x30) + 48);
                  *(void *)&v498[8] = v404 + 48 * ((48 * v408 - 48) / 0x30) + 48;
                }
                else
                {
                  if (0x5555555555555556 * ((uint64_t)(*(void *)&v498[16] - *(void *)v498) >> 4) > v407) {
                    unint64_t v407 = 0x5555555555555556 * ((uint64_t)(*(void *)&v498[16] - *(void *)v498) >> 4);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v498[16] - *(void *)v498) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                    unint64_t v409 = 0x555555555555555;
                  }
                  else {
                    unint64_t v409 = v407;
                  }
                  v501[0] = &v498[16];
                  v410 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>((uint64_t)&v498[16], v409);
                  uint64_t v412 = v411;
                  v413 = &v410[48 * v406];
                  size_t v414 = 48 * ((48 * v408 - 48) / 0x30) + 48;
                  bzero(v413, v414);
                  uint64_t v415 = *(void *)&v498[8];
                  uint64_t v416 = *(void *)v498;
                  if (*(void *)&v498[8] == *(void *)v498)
                  {
                    int64x2_t v420 = vdupq_n_s64(*(unint64_t *)&v498[8]);
                    v417 = v413;
                  }
                  else
                  {
                    v417 = v413;
                    do
                    {
                      long long v418 = *(_OWORD *)(v415 - 48);
                      *((void *)v417 - 4) = *(void *)(v415 - 32);
                      *((_OWORD *)v417 - 3) = v418;
                      long long v419 = *(_OWORD *)(v415 - 24);
                      *((void *)v417 - 1) = *(void *)(v415 - 8);
                      *(_OWORD *)(v417 - 24) = v419;
                      v417 -= 48;
                      *(void *)(v415 - 16) = 0;
                      *(void *)(v415 - 8) = 0;
                      *(void *)(v415 - 24) = 0;
                      v415 -= 48;
                    }
                    while (v415 != v416);
                    int64x2_t v420 = *(int64x2_t *)v498;
                  }
                  *(void *)v498 = v417;
                  *(void *)&v498[8] = &v413[v414];
                  *(int64x2_t *)((char *)__src + 8) = v420;
                  uint64_t v421 = *(void *)&v498[16];
                  *(void *)&v498[16] = &v410[48 * v412];
                  __src[1].i64[1] = v421;
                  __src[0].i64[0] = v420.i64[0];
                  std::__split_buffer<std::pair<llvm::MachO::Target,std::string>>::~__split_buffer((uint64_t)__src);
                }
                uint64_t v405 = *(void *)v498;
              }
              v422 = v463;
              if ((*(unsigned int (**)(uint64_t *))(*v463 + 16))(v463))
              {
                __src[0].i64[0] = (uint64_t)&__src[1].i64[1];
                *(int64x2_t *)((char *)__src + 8) = (int64x2_t)xmmword_261E8A720;
                *(_DWORD *)&v513[8] = 0;
                char v515 = 0;
                uint64_t v516 = 0;
                int v517 = 1;
                uint64_t v514 = 0;
                *(_OWORD *)&v513[16] = 0uLL;
                *(void *)v513 = &unk_270DBD758;
                v518 = __src;
                llvm::raw_ostream::SetUnbuffered(v513);
                v423 = (void *)v518->i64[1];
                v470 = (void **)v518->i64[0];
                v471 = v423;
                (*(void (**)(uint64_t *, void ***, uint64_t))(*v463 + 216))(v463, &v470, 1);
                llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)v513);
                if ((unint64_t *)__src[0].i64[0] != &__src[1].u64[1]) {
                  free((void *)__src[0].i64[0]);
                }
              }
              else
              {
                uint64_t v424 = v405 + 48 * v402;
                __src[0] = 0uLL;
                (*(void (**)(uint64_t *, int64x2_t *, uint64_t))(*v463 + 216))(v463, __src, 1);
                *(void *)uint64_t v424 = 0;
                *(void *)(v424 + 8) = 0;
                *(void *)(v424 + 16) = 0;
                v425 = (void **)(v424 + 24);
                if (*(char *)(v424 + 47) < 0) {
                  operator delete(*v425);
                }
                *v425 = 0;
                *(void *)(v424 + 32) = 0;
                *(void *)(v424 + 40) = 0;
                v422 = v463;
              }
              (*(void (**)(uint64_t *, uint64_t *))(*v422 + 80))(v422, v467);
            }
            ++v402;
          }
          while (v402 != v403);
        }
        v400 = v463;
        (*(void (**)(uint64_t *))(*v463 + 88))(v463);
        (*(void (**)(uint64_t *, uint64_t *))(*v400 + 128))(v400, v474);
        a1 = v462;
      }
    }
    llvm::yaml::IO::processKey<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,llvm::yaml::EmptyContext>(v400, v496 + 15);
    __src[0].i32[0] = 0;
    llvm::yaml::IO::processKeyWithDefault<TBDFlags,llvm::yaml::EmptyContext>((uint64_t)v400, (_DWORD *)v496 + 52, __src);
  }
  llvm::yaml::IO::processKey<llvm::StringRef,llvm::yaml::EmptyContext>((uint64_t)v400, (uint64_t)"install-name", (uint64_t)(v496 + 22), 1);
  __src[0].i32[0] = 0x10000;
  llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>((uint64_t)v400, (uint64_t)"current-version", (llvm::MachO::PackedVersion *)(v496 + 24), __src);
  __src[0].i32[0] = 0x10000;
  llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>((uint64_t)v400, (uint64_t)"compatibility-version", (llvm::MachO::PackedVersion *)((char *)v496 + 196), __src);
  __src[0].i8[0] = 0;
  if (a1 == 32) {
    v426 = "swift-abi-version";
  }
  else {
    v426 = "swift-version";
  }
  llvm::yaml::IO::processKeyWithDefault<SwiftVersion,llvm::yaml::EmptyContext>(v400, (uint64_t)v426, (llvm::raw_ostream *)(v496 + 25), __src);
  v427 = v496;
  __src[0].i64[0] = 0;
  v513[0] = 0;
  unsigned int v428 = (*(uint64_t (**)(uint64_t *))(*v400 + 16))(v400);
  int v430 = *((_DWORD *)v427 + 51);
  v429 = (_DWORD *)v427 + 51;
  int v431 = a1 != 8;
  if (v430 == v431) {
    uint64_t v432 = v428;
  }
  else {
    uint64_t v432 = 0;
  }
  if ((*(unsigned int (**)(uint64_t *, const char *, void, uint64_t, unsigned char *, int64x2_t *))(*v400 + 120))(v400, "objc-constraint", 0, v432, v513, __src))
  {
    (*(void (**)(uint64_t *))(*v400 + 160))(v400);
    llvm::yaml::ScalarEnumerationTraits<llvm::MachO::ObjCConstraintType,void>::enumeration((uint64_t)v400, v429);
    (*(void (**)(uint64_t *))(*v400 + 184))(v400);
    (*(void (**)(uint64_t *, uint64_t))(*v400 + 128))(v400, __src[0].i64[0]);
  }
  else if (v513[0])
  {
    _DWORD *v429 = v431;
  }
  v433 = v496;
  if (a1 == 8)
  {
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *))(*v400 + 16))(v400)) {
      BOOL v434 = v433[28] == 0;
    }
    else {
      BOOL v434 = 0;
    }
    __src[0].i64[0] = 0;
    v513[0] = 0;
    if ((*(unsigned int (**)(uint64_t *, const char *, void, BOOL, unsigned char *, int64x2_t *))(*v400 + 120))(v400, "parent-umbrella", 0, v434, v513, __src))
    {
      double v435 = llvm::yaml::yamlize<llvm::StringRef>((uint64_t)v400, (uint64_t)(v433 + 27));
      (*(void (**)(uint64_t *, uint64_t, double))(*v400 + 128))(v400, __src[0].i64[0], v435);
    }
    else if (v513[0])
    {
      v433[27] = 0;
      v433[28] = 0;
    }
    v436 = v496;
    if (!(*(unsigned int (**)(uint64_t *))(*v400 + 56))(v400) || v436[32] != v436[33])
    {
      v470 = 0;
      LOBYTE(v467) = 0;
      if ((*(unsigned int (**)(uint64_t *, const char *, void, void, uint64_t **, void ***))(*v400 + 120))(v400, "undefineds", 0, 0, &v467, &v470))
      {
        unsigned int v437 = (*(uint64_t (**)(uint64_t *))(*v400 + 24))(v400);
        if ((*(unsigned int (**)(uint64_t *))(*v400 + 16))(v400)) {
          unsigned int v437 = 954437177 * ((unint64_t)((char *)v436[33] - (char *)v436[32]) >> 4);
        }
        if (v437)
        {
          unint64_t v438 = 0;
          v466 = v436 + 34;
          uint64_t v439 = 144 * v437;
          unint64_t v440 = 1;
          do
          {
            *(void *)v513 = 0;
            if ((*(unsigned int (**)(uint64_t *, unint64_t, unsigned char *))(*v463 + 32))(v463, v440 - 1, v513))
            {
              v441 = v436[32];
              v442 = v436[33];
              int64_t v443 = (char *)v442 - (char *)v441;
              unint64_t v444 = 0x8E38E38E38E38E39 * (((char *)v442 - (char *)v441) >> 4);
              if (v444 <= v440 - 1)
              {
                if (0x8E38E38E38E38E39 * ((uint64_t)(*v466 - (void)v442) >> 4) >= v440 - v444)
                {
                  bzero(v436[33], 144 * ((v438 - v443) / 0x90) + 144);
                  v436[33] = &v442[18 * ((v438 - v443) / 0x90) + 18];
                }
                else
                {
                  unint64_t v445 = 0x8E38E38E38E38E39 * ((uint64_t)(*v466 - (void)v441) >> 4);
                  uint64_t v446 = 2 * v445;
                  if (2 * v445 <= v440) {
                    uint64_t v446 = v440;
                  }
                  if (v445 >= 0xE38E38E38E38E3) {
                    unint64_t v447 = 0x1C71C71C71C71C7;
                  }
                  else {
                    unint64_t v447 = v446;
                  }
                  uint64_t v448 = __src[1].i64[0];
                  bzero((void *)__src[1].i64[0], 144 * ((v438 - v443) / 0x90) + 144);
                  __src[1].i64[0] = v448 + 144 * ((v438 - v443) / 0x90) + 144;
                }
              }
              v449 = (char **)&v436[32][v438 / 8];
              (*(void (**)(uint64_t *))(*v463 + 104))(v463);
              uint64_t v450 = v463[1];
              llvm::yaml::IO::processKey<std::vector<llvm::MachO::Architecture>,llvm::yaml::EmptyContext>((uint64_t)v463, v449);
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v463, (uint64_t)"symbols", (uint64_t)(v449 + 3));
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v463, (uint64_t)"objc-classes", (uint64_t)(v449 + 6));
              if (*(_DWORD *)(v450 + 48) == 32) {
                llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v463, (uint64_t)"objc-eh-types", (uint64_t)(v449 + 9));
              }
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v463, (uint64_t)"objc-ivars", (uint64_t)(v449 + 12));
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)v463, (uint64_t)"weak-ref-symbols", (uint64_t)(v449 + 15));
              (*(void (**)(uint64_t *))(*v463 + 112))(v463);
              (*(void (**)(uint64_t *, void))(*v463 + 40))(v463, *(void *)v513);
            }
            ++v440;
            v438 += 144;
          }
          while (v439 != v438);
        }
        (*(void (**)(uint64_t *))(*v463 + 48))(v463);
        (*(void (**)(uint64_t *, void **))(*v463 + 128))(v463, v470);
      }
    }
  }
  __src[0].i64[0] = (uint64_t)v498;
  std::vector<std::pair<llvm::MachO::Target,std::string>>::__destroy_vector::operator()[abi:nn180100]((void ***)__src);
  if (((*(uint64_t (**)(uint64_t *))(*v495 + 16))(v495) & 1) == 0) {
    operator new();
  }
  uint64_t v451 = (uint64_t)v496;
  v452 = v496[32];
  if (v452)
  {
    uint64_t v453 = (uint64_t)v496[33];
    v454 = v496[32];
    if ((uint64_t *)v453 != v452)
    {
      do
      {
        v453 -= 144;
      }
      while ((uint64_t *)v453 != v452);
      v454 = *(uint64_t **)(v451 + 256);
    }
    *(void *)(v451 + 264) = v452;
    operator delete(v454);
  }
  uint64_t v455 = *(void *)(v451 + 232);
  if (v455)
  {
    uint64_t v456 = *(void *)(v451 + 240);
    v457 = *(void **)(v451 + 232);
    if (v456 != v455)
    {
      do
      while (v456 != v455);
      v457 = *(void **)(v451 + 232);
    }
    *(void *)(v451 + 240) = v455;
    operator delete(v457);
  }
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(v451 + 152, *(void **)(v451 + 160));
  v458 = *(void **)(v451 + 120);
  if (v458 != (void *)(v451 + 136)) {
    free(v458);
  }
  v459 = *(void **)(v451 + 96);
  if (v459)
  {
    *(void *)(v451 + 104) = v459;
    operator delete(v459);
  }
  return llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v451);
}

uint64_t llvm::yaml::IO::mapOptionalWithContext<std::vector<anonymous namespace'::MetadataSection>,anonymous namespace'::MetadataSection::Option>(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (!result || *(void *)a3 != *(void *)(a3 + 8))
  {
    uint64_t v25 = 0;
    char v24 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, 0, 0, &v24, &v25);
    if (result)
    {
      unsigned int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
        unsigned int v9 = -1431655765 * ((*(void *)(a3 + 8) - *(void *)a3) >> 4);
      }
      if (v9)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        int v23 = (void *)(a3 + 16);
        uint64_t v12 = v9;
        uint64_t v13 = 24;
        do
        {
          uint64_t v26 = 0;
          if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, v11, &v26))
          {
            uint64_t v14 = *(void *)(a3 + 8);
            unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *(void *)a3) >> 4);
            if (v15 <= v11)
            {
              unint64_t v16 = v11 + 1;
              if (0xAAAAAAAAAAAAAAABLL * ((*v23 - v14) >> 4) >= v11 + 1 - v15)
              {
                size_t v20 = 48 * ((v10 - 16 * ((v14 - *(void *)a3) >> 4)) / 0x30uLL) + 48;
                bzero(*(void **)(a3 + 8), v20);
                *(void *)(a3 + 8) = v14 + v20;
              }
              else
              {
                if (0x5555555555555556 * ((uint64_t)(*v23 - *(void *)a3) >> 4) > v16) {
                  unint64_t v16 = 0x5555555555555556 * ((uint64_t)(*v23 - *(void *)a3) >> 4);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v23 - *(void *)a3) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
                  unint64_t v17 = 0x555555555555555;
                }
                else {
                  unint64_t v17 = v16;
                }
                uint64_t v18 = (char *)v28;
                size_t v19 = 48 * ((v10 - 48 * v15) / 0x30) + 48;
                bzero(v28, v19);
                int v28 = &v18[v19];
              }
            }
            BOOL v21 = (char **)(*(void *)a3 + v13);
            (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
            llvm::yaml::IO::processKey<std::vector<llvm::MachO::Target>,llvm::yaml::EmptyContext>(a1, v21 - 3);
            if (*a4) {
              uint64_t v22 = "libraries";
            }
            else {
              uint64_t v22 = "clients";
            }
            llvm::yaml::IO::processKey<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)v22, v21, 1);
            (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v26);
          }
          ++v11;
          v13 += 48;
          v10 += 48;
        }
        while (v12 != v11);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v25);
    }
  }
  return result;
}

uint64_t llvm::yaml::IO::mapOptional<std::vector<anonymous namespace'::SymbolSection>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (!result || *a3 != a3[1])
  {
    uint64_t v28 = 0;
    char v27 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, 0, 0, &v27, &v28);
    if (result)
    {
      unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
        unsigned int v7 = -1963413621 * ((unint64_t)(a3[1] - *a3) >> 3);
      }
      if (v7)
      {
        unint64_t v8 = 0;
        uint64_t v26 = a3 + 2;
        uint64_t v9 = v7;
        uint64_t v10 = "symbols";
        unint64_t v11 = "objc-classes";
        uint64_t v12 = 280;
        do
        {
          uint64_t v29 = 0;
          if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, v8, &v29))
          {
            uint64_t v13 = a3[1];
            unint64_t v14 = 0xAF8AF8AF8AF8AF8BLL * ((v13 - *a3) >> 3);
            if (v14 <= v8)
            {
              unint64_t v15 = v11;
              unint64_t v16 = v10;
              unint64_t v17 = v8 + 1 - v14;
              if (0xAF8AF8AF8AF8AF8BLL * ((*v26 - v13) >> 3) >= v17)
              {
                uint64_t v23 = v13 + 280 * v17;
                uint64_t v24 = v12 - 8 * ((v13 - *a3) >> 3);
                do
                {
                  *(void *)(v13 + 128) = 0;
                  *(_OWORD *)(v13 + 96) = 0uLL;
                  *(_OWORD *)(v13 + 112) = 0uLL;
                  *(_OWORD *)(v13 + 64) = 0uLL;
                  *(_OWORD *)(v13 + 80) = 0uLL;
                  *(_OWORD *)(v13 + 32) = 0uLL;
                  *(_OWORD *)(v13 + 48) = 0uLL;
                  *(_OWORD *)(v13 + 16) = 0uLL;
                  *(void *)uint64_t v13 = v13 + 16;
                  *(void *)(v13 + 8) = 0x500000000;
                  *(_OWORD *)(v13 + 152) = 0uLL;
                  *(_OWORD *)(v13 + 168) = 0uLL;
                  *(_OWORD *)(v13 + 184) = 0uLL;
                  *(_OWORD *)(v13 + 200) = 0uLL;
                  *(_OWORD *)(v13 + 216) = 0uLL;
                  *(_OWORD *)(v13 + 232) = 0uLL;
                  *(_OWORD *)(v13 + 248) = 0uLL;
                  *(_OWORD *)(v13 + 136) = 0uLL;
                  *(_OWORD *)(v13 + 264) = 0uLL;
                  v13 += 280;
                  v24 -= 280;
                }
                while (v24);
                a3[1] = v23;
              }
              else
              {
                unint64_t v18 = 0x5F15F15F15F15F16 * ((*v26 - *a3) >> 3);
                if (v18 <= v8 + 1) {
                  unint64_t v18 = v8 + 1;
                }
                if (0xAF8AF8AF8AF8AF8BLL * ((*v26 - *a3) >> 3) >= 0x75075075075075) {
                  unint64_t v19 = 0xEA0EA0EA0EA0EALL;
                }
                else {
                  unint64_t v19 = v18;
                }
                uint64_t v20 = v31;
                uint64_t v21 = v31 + 280 * v17;
                uint64_t v22 = 280 * v14;
                do
                {
                  *(void *)(v20 + 128) = 0;
                  *(_OWORD *)(v20 + 96) = 0uLL;
                  *(_OWORD *)(v20 + 112) = 0uLL;
                  *(_OWORD *)(v20 + 64) = 0uLL;
                  *(_OWORD *)(v20 + 80) = 0uLL;
                  *(_OWORD *)(v20 + 32) = 0uLL;
                  *(_OWORD *)(v20 + 48) = 0uLL;
                  *(_OWORD *)(v20 + 16) = 0uLL;
                  *(void *)uint64_t v20 = v20 + 16;
                  *(void *)(v20 + 8) = 0x500000000;
                  *(_OWORD *)(v20 + 152) = 0uLL;
                  *(_OWORD *)(v20 + 168) = 0uLL;
                  *(_OWORD *)(v20 + 184) = 0uLL;
                  *(_OWORD *)(v20 + 200) = 0uLL;
                  *(_OWORD *)(v20 + 216) = 0uLL;
                  *(_OWORD *)(v20 + 232) = 0uLL;
                  *(_OWORD *)(v20 + 248) = 0uLL;
                  v22 += 280;
                  *(_OWORD *)(v20 + 136) = 0uLL;
                  *(_OWORD *)(v20 + 264) = 0uLL;
                  v20 += 280;
                }
                while (v12 != v22);
                uint64_t v31 = v21;
              }
              uint64_t v10 = v16;
              unint64_t v11 = v15;
            }
            uint64_t v25 = *a3 + 280 * v8;
            (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
            llvm::yaml::IO::processKey<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::yaml::EmptyContext>(a1, v25);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)v10, v25 + 136);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)v11, v25 + 160);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)"objc-eh-types", v25 + 184);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)"objc-ivars", v25 + 208);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)"weak-symbols", v25 + 232);
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, (uint64_t)"thread-local-symbols", v25 + 256);
            (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 40))(a1, v29);
          }
          ++v8;
          v12 += 280;
        }
        while (v8 != v9);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 48))(a1);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v28);
    }
  }
  return result;
}

void **std::vector<anonymous namespace'::UUIDv4>::~vector[abi:nn180100](void **a1)
{
  BOOL v2 = (void **)*a1;
  if (*a1)
  {
    size_t v3 = (void **)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 6;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

unsigned int *llvm::SmallVectorImpl<llvm::MachO::Target>::insert<llvm::MachO::Target const*,void>(unsigned int *result, uint64_t a2, unsigned char *__src, unsigned char *a4)
{
  uint64_t v5 = __src;
  int v6 = result;
  uint64_t v7 = *(void *)result;
  uint64_t v8 = result[2];
  if (*(void *)result + 24 * v8 == a2)
  {
    return llvm::SmallVectorImpl<llvm::MachO::Target>::append<llvm::MachO::Target const*,void>(result, __src, a4);
  }
  else
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v7) >> 3);
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a4 - __src) >> 3);
    if (v10 + v8 > result[3])
    {
      uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v10 + v8, 24);
      uint64_t v7 = *(void *)v6;
      uint64_t v8 = v6[2];
    }
    unint64_t v11 = (void *)(v7 + 24 * v9);
    uint64_t v12 = (unsigned char *)(v7 + 24 * v8);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)v11) >> 3);
    if (v13 >= v10)
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((8 * ((a4 - (unsigned char *)v5) >> 3)) >> 3) + v8;
      if (v15 <= v6[3])
      {
        unsigned int v16 = v8;
      }
      else
      {
        uint64_t result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, v6 + 4, v15, 24);
        unsigned int v16 = v6[2];
        LODWORD(v8) = v16;
      }
      if (a4 != (unsigned char *)v5)
      {
        uint64_t v17 = *(void *)v6 + 24 * v16;
        uint64_t v18 = -8 * ((a4 - (unsigned char *)v5) >> 3);
        do
        {
          long long v19 = *(_OWORD *)&v12[v18];
          *(void *)(v17 + 16) = *(void *)&v12[v18 + 16];
          *(_OWORD *)uint64_t v17 = v19;
          v17 += 24;
          v18 += 24;
        }
        while (v18);
        LODWORD(v8) = v6[2];
      }
      void v6[2] = v8 - 1431655765 * ((8 * ((a4 - (unsigned char *)v5) >> 3)) >> 3);
      if (&v12[-8 * ((a4 - (unsigned char *)v5) >> 3)] != (unsigned char *)v11) {
        uint64_t result = (unsigned int *)memmove(&v11[(a4 - (unsigned char *)v5) >> 3], v11, &v12[-8 * ((a4 - (unsigned char *)v5) >> 3)] - (unsigned char *)v11);
      }
      if (a4 != (unsigned char *)v5)
      {
        return (unsigned int *)memmove(v11, v5, a4 - (unsigned char *)v5);
      }
    }
    else
    {
      void v6[2] = v8 + v10;
      if (v9 != v8)
      {
        uint64_t result = (unsigned int *)memcpy((void *)(v7 + 24 * (v8 + v10) - 8 * ((v12 - (unsigned char *)v11) >> 3)), (const void *)(v7 + 24 * v9), v12 - (unsigned char *)v11);
        do
        {
          long long v14 = *(_OWORD *)v5;
          void v11[2] = v5[2];
          *(_OWORD *)unint64_t v11 = v14;
          v11 += 3;
          v5 += 3;
          --v13;
        }
        while (v13);
      }
      if (v5 != (void *)a4)
      {
        return (unsigned int *)memcpy(v12, v5, a4 - (unsigned char *)v5);
      }
    }
  }
  return result;
}

void llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::assignTargetsToLibrary(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  v52[0] = 0;
  v52[1] = 0;
  uint64_t v50 = 0;
  uint64_t v51 = (uint64_t *)v52;
  uint64_t v48 = &v49;
  uint64_t v49 = 0;
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    do
    {
      int v6 = *(unsigned char **)(v5 + 24);
      uint64_t v7 = &v6[24 * *(unsigned int *)(v5 + 32)];
      v55[0] = &v56;
      v55[1] = (void *)0x500000000;
      llvm::SmallVectorImpl<llvm::MachO::Target>::append<llvm::MachO::Target const*,void>((unsigned int *)v55, v6, v7);
      uint64_t v8 = v49;
      unint64_t v9 = &v49;
      unint64_t v10 = &v49;
      if (v49)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v10 = (uint64_t **)v8;
            unint64_t v11 = v8[4];
            if (v11 <= v5) {
              break;
            }
            uint64_t v8 = *v10;
            unint64_t v9 = v10;
            if (!*v10) {
              goto LABEL_10;
            }
          }
          if (v11 >= v5) {
            break;
          }
          uint64_t v8 = v10[1];
          if (!v8)
          {
            unint64_t v9 = v10 + 1;
            goto LABEL_10;
          }
        }
      }
      else
      {
LABEL_10:
        uint64_t v12 = (uint64_t *)v10;
        unint64_t v10 = (uint64_t **)operator new(0xB0uLL);
        void v10[4] = (uint64_t *)v5;
        v10[5] = (uint64_t *)(v10 + 7);
        v10[6] = (uint64_t *)0x500000000;
        *unint64_t v10 = 0;
        v10[1] = 0;
        void v10[2] = v12;
        unsigned __int8 *v9 = (uint64_t *)v10;
        unint64_t v13 = (uint64_t *)v10;
        if (*v48)
        {
          uint64_t v48 = (uint64_t **)*v48;
          unint64_t v13 = *v9;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v49, v13);
        ++v50;
      }
      llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v10 + 5), (uint64_t)v55);
      std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::__emplace_unique_key_args<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::SmallVector<llvm::MachO::Target,5u>>(&v51, (unsigned __int8 *)v55[0], v55[1], (uint64_t)v55);
      if (v55[0] != &v56) {
        free(v55[0]);
      }
      v5 += 160;
    }
    while (v5 != a2);
    long long v14 = v51;
    if (v51 != (uint64_t *)v52)
    {
      do
      {
        long long v56 = 0u;
        long long v57 = 0u;
        unint64_t v15 = (char *)v14[4];
        *(_OWORD *)int v55 = 0u;
        std::vector<llvm::MachO::Target>::__insert_with_size[abi:nn180100]<llvm::MachO::Target const*,llvm::MachO::Target const*>((uint64_t)v55, v15, &v15[24 * *((unsigned int *)v14 + 10)], *((unsigned int *)v14 + 10));
        unsigned int v16 = v48;
        if (v48 != &v49)
        {
          do
          {
            if (llvm::SmallVectorImpl<llvm::MachO::Target>::operator==((unsigned __int8 **)v16 + 5, (unsigned __int8 **)v14 + 4))
            {
              uint64_t v17 = v16[4];
              int v18 = *((char *)v17 + 23);
              if (v18 >= 0) {
                long long v19 = v16[4];
              }
              else {
                long long v19 = (uint64_t *)*v17;
              }
              if (v18 >= 0) {
                uint64_t v20 = *((unsigned __int8 *)v17 + 23);
              }
              else {
                uint64_t v20 = v17[1];
              }
              uint64_t v21 = (void *)v57;
              if ((unint64_t)v57 >= *((void *)&v57 + 1))
              {
                uint64_t v23 = (void *)*((void *)&v56 + 1);
                uint64_t v24 = (uint64_t)(v57 - *((void *)&v56 + 1)) >> 4;
                unint64_t v25 = v24 + 1;
                if ((unint64_t)(v24 + 1) >> 60) {
                  goto LABEL_67;
                }
                uint64_t v26 = *((void *)&v57 + 1) - *((void *)&v56 + 1);
                if ((uint64_t)(*((void *)&v57 + 1) - *((void *)&v56 + 1)) >> 3 > v25) {
                  unint64_t v25 = v26 >> 3;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v27 = v25;
                }
                if (v27) {
                  unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v27);
                }
                else {
                  uint64_t v28 = 0;
                }
                uint64_t v29 = (uint64_t **)(v27 + 16 * v24);
                void *v29 = v19;
                v29[1] = (uint64_t *)v20;
                uint64_t v30 = v29;
                if (v21 != v23)
                {
                  do
                  {
                    *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
                    v30 -= 2;
                    v21 -= 2;
                  }
                  while (v21 != v23);
                  uint64_t v21 = (void *)*((void *)&v56 + 1);
                }
                uint64_t v22 = v29 + 2;
                *((void *)&v56 + 1) = v30;
                *((void *)&v57 + 1) = v27 + 16 * v28;
                if (v21) {
                  operator delete(v21);
                }
              }
              else
              {
                *(void *)long long v57 = v19;
                v21[1] = v20;
                uint64_t v22 = v21 + 2;
              }
              *(void *)&long long v57 = v22;
            }
            uint64_t v31 = v16[1];
            if (v31)
            {
              do
              {
                uint64_t v32 = (uint64_t **)v31;
                uint64_t v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                uint64_t v32 = (uint64_t **)v16[2];
                BOOL v33 = *v32 == (uint64_t *)v16;
                unsigned int v16 = v32;
              }
              while (!v33);
            }
            unsigned int v16 = v32;
          }
          while (v32 != &v49);
        }
        uint64_t v35 = *((void *)&v56 + 1);
        uint64_t v34 = v57;
        unint64_t v36 = 126 - 2 * __clz((uint64_t)(v57 - *((void *)&v56 + 1)) >> 4);
        if ((void)v57 == *((void *)&v56 + 1)) {
          uint64_t v37 = 0;
        }
        else {
          uint64_t v37 = v36;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((unint64_t *)&v56 + 1), (_OWORD *)v57, v37, 1);
        unint64_t v38 = a3[1];
        unint64_t v39 = a3[2];
        if (v38 >= v39)
        {
          uint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *a3) >> 4);
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) > 0x555555555555555) {
LABEL_67:
          }
            abort();
          unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - *a3) >> 4);
          if (2 * v43 > v42) {
            unint64_t v42 = 2 * v43;
          }
          if (v43 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v44 = 0x555555555555555;
          }
          else {
            unint64_t v44 = v42;
          }
          int v45 = v54;
          *uint64_t v54 = *(_OWORD *)v55;
          v45[2] = v56;
          v45[3] = v35;
          v55[1] = 0;
          *(void *)&long long v56 = 0;
          v55[0] = 0;
          v45[4] = v34;
          v45[5] = *((void *)&v57 + 1);
          v54 += 3;
          uint64_t v40 = a3[1];
        }
        else
        {
          *(_OWORD *)unint64_t v38 = *(_OWORD *)v55;
          *(void *)(v38 + 16) = v56;
          *(void *)(v38 + 24) = v35;
          v55[1] = 0;
          *(void *)&long long v56 = 0;
          v55[0] = 0;
          *(void *)(v38 + 32) = v34;
          *(void *)(v38 + 40) = *((void *)&v57 + 1);
          uint64_t v40 = v38 + 48;
        }
        a3[1] = v40;
        int v46 = (uint64_t *)v14[1];
        if (v46)
        {
          do
          {
            int v47 = v46;
            int v46 = (uint64_t *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            int v47 = (uint64_t *)v14[2];
            BOOL v33 = *v47 == (void)v14;
            long long v14 = v47;
          }
          while (!v33);
        }
        long long v14 = v47;
      }
      while (v47 != (uint64_t *)v52);
    }
  }
  std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(v49);
  std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(v52[0]);
}

void llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::NormalizedTBD_V4(llvm::yaml::IO &,llvm::MachO::InterfaceFile const*&)::{lambda(std::vector<anonymous namespace'::SymbolSection> &,llvm::iterator_range<llvm::filter_iterator_impl<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>>)#1}::operator()(uint64_t *a1, long long *a2)
{
  v142[5] = *MEMORY[0x263EF8340];
  v124[0] = 0;
  v124[1] = 0;
  uint64_t v122 = 0;
  int64x2_t v123 = (uint64_t *)v124;
  uint64_t v120 = &v121;
  uint64_t v121 = 0;
  long long v4 = a2[1];
  long long v140 = *a2;
  long long v141 = v4;
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v142, (uint64_t)(a2 + 2));
  long long v5 = a2[5];
  long long v137 = a2[4];
  long long v138 = v5;
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::__value_func[abi:nn180100]((uint64_t)v139, (uint64_t)(a2 + 6));
  for (uint64_t i = v140; (void)v140 != (void)v137; uint64_t i = v140)
  {
    unint64_t v7 = *(void *)(i + 24);
    uint64_t v8 = *(unsigned char **)(v7 + 16);
    unint64_t v9 = &v8[24 * *(unsigned int *)(v7 + 24)];
    uint64_t v125 = v127;
    uint64_t v126 = 0x500000000;
    llvm::SmallVectorImpl<llvm::MachO::Target>::append<llvm::MachO::Target const*,void>((unsigned int *)&v125, v8, v9);
    unint64_t v10 = v121;
    unint64_t v11 = &v121;
    uint64_t v12 = &v121;
    if (v121)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = (uint64_t **)v10;
          unint64_t v13 = v10[4];
          if (v13 <= v7) {
            break;
          }
          unint64_t v10 = *v12;
          unint64_t v11 = v12;
          if (!*v12) {
            goto LABEL_9;
          }
        }
        if (v13 >= v7) {
          break;
        }
        unint64_t v10 = v12[1];
        if (!v10)
        {
          unint64_t v11 = v12 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      long long v14 = (uint64_t *)v12;
      uint64_t v12 = (uint64_t **)operator new(0xB0uLL);
      void v12[4] = (uint64_t *)v7;
      void v12[5] = (uint64_t *)(v12 + 7);
      v12[6] = (uint64_t *)0x500000000;
      *uint64_t v12 = 0;
      v12[1] = 0;
      v12[2] = v14;
      *unint64_t v11 = (uint64_t *)v12;
      unint64_t v15 = (uint64_t *)v12;
      if (*v120)
      {
        uint64_t v120 = (uint64_t **)*v120;
        unint64_t v15 = *v11;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v121, v15);
      ++v122;
    }
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v12 + 5), (uint64_t)&v125);
    std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::__emplace_unique_key_args<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::SmallVector<llvm::MachO::Target,5u>>(&v123, (unsigned __int8 *)v125, v126, (uint64_t)&v125);
    if (v125 != v127) {
      free(v125);
    }
    *(void *)&long long v140 = v140 + 32;
    llvm::DenseMapIterator<llvm::SymbolsMapKey,llvm::MachO::Symbol *,llvm::DenseMapInfo<llvm::SymbolsMapKey,void>,llvm::detail::DenseMapPair<llvm::SymbolsMapKey,llvm::MachO::Symbol *>,true>::AdvancePastEmptyBuckets((uint64_t)&v140);
    llvm::filter_iterator_base<llvm::MachO::SymbolSet::const_symbol_iterator,std::function<BOOL ()(llvm::MachO::Symbol const*)>,std::forward_iterator_tag>::findNextValid((uint64_t)&v140);
  }
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v139);
  std::__function::__value_func<BOOL ()(llvm::MachO::Symbol const*)>::~__value_func[abi:nn180100](v142);
  unsigned int v16 = v123;
  if (v123 != (uint64_t *)v124)
  {
    do
    {
      long long v128 = 0u;
      long long v129 = 0u;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      long long v133 = 0u;
      long long v134 = 0u;
      long long v135 = 0u;
      long long v136 = 0u;
      uint64_t v17 = (unsigned char *)v16[4];
      uint64_t v125 = v127;
      uint64_t v126 = 0x500000000;
      llvm::SmallVectorImpl<llvm::MachO::Target>::insert<llvm::MachO::Target const*,void>((unsigned int *)&v125, (uint64_t)v127, v17, &v17[24 * *((unsigned int *)v16 + 10)]);
      int v18 = v120;
      if (v120 != &v121)
      {
        do
        {
          if (llvm::SmallVectorImpl<llvm::MachO::Target>::operator==((unsigned __int8 **)v18 + 5, (unsigned __int8 **)v16 + 4))
          {
            long long v19 = v18[4];
            switch(*((unsigned char *)v19 + 152))
            {
              case 0:
                if ((*((unsigned char *)v19 + 153) & 2) != 0)
                {
                  uint64_t v37 = *v19;
                  uint64_t v36 = v19[1];
                  uint64_t v38 = *((void *)&v134 + 1);
                  if (*((void *)&v134 + 1) >= (unint64_t)v135)
                  {
                    uint64_t v57 = (uint64_t)(*((void *)&v134 + 1) - v134) >> 4;
                    unint64_t v58 = v57 + 1;
                    if ((unint64_t)(v57 + 1) >> 60) {
                      goto LABEL_177;
                    }
                    uint64_t v59 = v135 - v134;
                    if ((uint64_t)(v135 - v134) >> 3 > v58) {
                      unint64_t v58 = v59 >> 3;
                    }
                    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v60 = v58;
                    }
                    if (v60) {
                      unint64_t v60 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v60);
                    }
                    else {
                      uint64_t v61 = 0;
                    }
                    long long v84 = (uint64_t *)(v60 + 16 * v57);
                    *long long v84 = v37;
                    v84[1] = v36;
                    uint64_t v85 = (char *)*((void *)&v134 + 1);
                    int v86 = (char *)v134;
                    uint64_t v87 = v84;
                    if (*((void *)&v134 + 1) != (void)v134)
                    {
                      do
                      {
                        *((_OWORD *)v87 - 1) = *((_OWORD *)v85 - 1);
                        v87 -= 2;
                        v85 -= 16;
                      }
                      while (v85 != v86);
                      uint64_t v85 = (char *)v134;
                    }
                    unint64_t v39 = v84 + 2;
                    *(void *)&long long v134 = v87;
                    *((void *)&v134 + 1) = v84 + 2;
                    *(void *)&long long v135 = v60 + 16 * v61;
                    if (v85) {
                      operator delete(v85);
                    }
                  }
                  else
                  {
                    **((void **)&v134 + 1) = v37;
                    *(void *)(v38 + 8) = v36;
                    unint64_t v39 = (void *)(v38 + 16);
                  }
                  *((void *)&v134 + 1) = v39;
                }
                else
                {
                  uint64_t v20 = *v19;
                  uint64_t v21 = v19[1];
                  if (*((unsigned char *)v19 + 153))
                  {
                    uint64_t v55 = v136;
                    if ((unint64_t)v136 >= *((void *)&v136 + 1))
                    {
                      uint64_t v79 = (uint64_t)(v136 - *((void *)&v135 + 1)) >> 4;
                      unint64_t v80 = v79 + 1;
                      if ((unint64_t)(v79 + 1) >> 60) {
                        goto LABEL_177;
                      }
                      uint64_t v81 = *((void *)&v136 + 1) - *((void *)&v135 + 1);
                      if ((uint64_t)(*((void *)&v136 + 1) - *((void *)&v135 + 1)) >> 3 > v80) {
                        unint64_t v80 = v81 >> 3;
                      }
                      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v82 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v82 = v80;
                      }
                      if (v82) {
                        unint64_t v82 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v82);
                      }
                      else {
                        uint64_t v83 = 0;
                      }
                      int v92 = (uint64_t *)(v82 + 16 * v79);
                      *int v92 = v20;
                      v92[1] = v21;
                      uint64_t v94 = (char *)*((void *)&v135 + 1);
                      char v93 = (char *)v136;
                      uint64_t v95 = v92;
                      if ((void)v136 != *((void *)&v135 + 1))
                      {
                        do
                        {
                          *((_OWORD *)v95 - 1) = *((_OWORD *)v93 - 1);
                          v95 -= 2;
                          v93 -= 16;
                        }
                        while (v93 != v94);
                        char v93 = (char *)*((void *)&v135 + 1);
                      }
                      long long v56 = v92 + 2;
                      *((void *)&v135 + 1) = v95;
                      *(void *)&long long v136 = v92 + 2;
                      *((void *)&v136 + 1) = v82 + 16 * v83;
                      if (v93) {
                        operator delete(v93);
                      }
                    }
                    else
                    {
                      *(void *)long long v136 = v20;
                      *(void *)(v55 + 8) = v21;
                      long long v56 = (void *)(v55 + 16);
                    }
                    *(void *)&long long v136 = v56;
                  }
                  else
                  {
                    uint64_t v22 = *((void *)&v128 + 1);
                    if (*((void *)&v128 + 1) >= (unint64_t)v129)
                    {
                      uint64_t v74 = (uint64_t)(*((void *)&v128 + 1) - v128) >> 4;
                      unint64_t v75 = v74 + 1;
                      if ((unint64_t)(v74 + 1) >> 60) {
                        goto LABEL_177;
                      }
                      uint64_t v76 = v129 - v128;
                      if ((uint64_t)(v129 - v128) >> 3 > v75) {
                        unint64_t v75 = v76 >> 3;
                      }
                      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v77 = v75;
                      }
                      if (v77) {
                        unint64_t v77 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v77);
                      }
                      else {
                        uint64_t v78 = 0;
                      }
                      uint64_t v88 = (uint64_t *)(v77 + 16 * v74);
                      *uint64_t v88 = v20;
                      v88[1] = v21;
                      int v89 = (char *)*((void *)&v128 + 1);
                      int v90 = (char *)v128;
                      int v91 = v88;
                      if (*((void *)&v128 + 1) != (void)v128)
                      {
                        do
                        {
                          *((_OWORD *)v91 - 1) = *((_OWORD *)v89 - 1);
                          v91 -= 2;
                          v89 -= 16;
                        }
                        while (v89 != v90);
                        int v89 = (char *)v128;
                      }
                      uint64_t v23 = v88 + 2;
                      *(void *)&long long v128 = v91;
                      *((void *)&v128 + 1) = v88 + 2;
                      *(void *)&long long v129 = v77 + 16 * v78;
                      if (v89) {
                        operator delete(v89);
                      }
                    }
                    else
                    {
                      **((void **)&v128 + 1) = v20;
                      *(void *)(v22 + 8) = v21;
                      uint64_t v23 = (void *)(v22 + 16);
                    }
                    *((void *)&v128 + 1) = v23;
                  }
                }
                break;
              case 1:
                uint64_t v25 = *v19;
                uint64_t v24 = v19[1];
                uint64_t v26 = v130;
                if ((unint64_t)v130 >= *((void *)&v130 + 1))
                {
                  uint64_t v40 = (uint64_t)(v130 - *((void *)&v129 + 1)) >> 4;
                  unint64_t v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 60) {
                    goto LABEL_177;
                  }
                  uint64_t v42 = *((void *)&v130 + 1) - *((void *)&v129 + 1);
                  if ((uint64_t)(*((void *)&v130 + 1) - *((void *)&v129 + 1)) >> 3 > v41) {
                    unint64_t v41 = v42 >> 3;
                  }
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v43 = v41;
                  }
                  if (v43) {
                    unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v43);
                  }
                  else {
                    uint64_t v44 = 0;
                  }
                  uint64_t v62 = (uint64_t *)(v43 + 16 * v40);
                  *uint64_t v62 = v25;
                  v62[1] = v24;
                  long long v64 = (char *)*((void *)&v129 + 1);
                  int v63 = (char *)v130;
                  uint64_t v65 = v62;
                  if ((void)v130 != *((void *)&v129 + 1))
                  {
                    do
                    {
                      *((_OWORD *)v65 - 1) = *((_OWORD *)v63 - 1);
                      v65 -= 2;
                      v63 -= 16;
                    }
                    while (v63 != v64);
                    int v63 = (char *)*((void *)&v129 + 1);
                  }
                  unint64_t v27 = v62 + 2;
                  *((void *)&v129 + 1) = v65;
                  *(void *)&long long v130 = v62 + 2;
                  *((void *)&v130 + 1) = v43 + 16 * v44;
                  if (v63) {
                    operator delete(v63);
                  }
                }
                else
                {
                  *(void *)long long v130 = v25;
                  *(void *)(v26 + 8) = v24;
                  unint64_t v27 = (void *)(v26 + 16);
                }
                *(void *)&long long v130 = v27;
                break;
              case 2:
                uint64_t v29 = *v19;
                uint64_t v28 = v19[1];
                uint64_t v30 = *((void *)&v131 + 1);
                if (*((void *)&v131 + 1) >= (unint64_t)v132)
                {
                  uint64_t v45 = (uint64_t)(*((void *)&v131 + 1) - v131) >> 4;
                  unint64_t v46 = v45 + 1;
                  if ((unint64_t)(v45 + 1) >> 60) {
                    goto LABEL_177;
                  }
                  uint64_t v47 = v132 - v131;
                  if ((uint64_t)(v132 - v131) >> 3 > v46) {
                    unint64_t v46 = v47 >> 3;
                  }
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v48 = v46;
                  }
                  if (v48) {
                    unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v48);
                  }
                  else {
                    uint64_t v49 = 0;
                  }
                  int v66 = (uint64_t *)(v48 + 16 * v45);
                  uint64_t *v66 = v29;
                  v66[1] = v28;
                  int v67 = (char *)*((void *)&v131 + 1);
                  int v68 = (char *)v131;
                  int v69 = v66;
                  if (*((void *)&v131 + 1) != (void)v131)
                  {
                    do
                    {
                      *((_OWORD *)v69 - 1) = *((_OWORD *)v67 - 1);
                      v69 -= 2;
                      v67 -= 16;
                    }
                    while (v67 != v68);
                    int v67 = (char *)v131;
                  }
                  uint64_t v31 = v66 + 2;
                  *(void *)&long long v131 = v69;
                  *((void *)&v131 + 1) = v66 + 2;
                  *(void *)&long long v132 = v48 + 16 * v49;
                  if (v67) {
                    operator delete(v67);
                  }
                }
                else
                {
                  **((void **)&v131 + 1) = v29;
                  *(void *)(v30 + 8) = v28;
                  uint64_t v31 = (void *)(v30 + 16);
                }
                *((void *)&v131 + 1) = v31;
                break;
              case 3:
                uint64_t v33 = *v19;
                uint64_t v32 = v19[1];
                uint64_t v34 = v133;
                if ((unint64_t)v133 >= *((void *)&v133 + 1))
                {
                  uint64_t v50 = (uint64_t)(v133 - *((void *)&v132 + 1)) >> 4;
                  unint64_t v51 = v50 + 1;
                  if ((unint64_t)(v50 + 1) >> 60) {
                    goto LABEL_177;
                  }
                  uint64_t v52 = *((void *)&v133 + 1) - *((void *)&v132 + 1);
                  if ((uint64_t)(*((void *)&v133 + 1) - *((void *)&v132 + 1)) >> 3 > v51) {
                    unint64_t v51 = v52 >> 3;
                  }
                  if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v53 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v53 = v51;
                  }
                  if (v53) {
                    unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v53);
                  }
                  else {
                    uint64_t v54 = 0;
                  }
                  uint64_t v70 = (uint64_t *)(v53 + 16 * v50);
                  *uint64_t v70 = v33;
                  v70[1] = v32;
                  unint64_t v72 = (char *)*((void *)&v132 + 1);
                  uint64_t v71 = (char *)v133;
                  unint64_t v73 = v70;
                  if ((void)v133 != *((void *)&v132 + 1))
                  {
                    do
                    {
                      *((_OWORD *)v73 - 1) = *((_OWORD *)v71 - 1);
                      v73 -= 2;
                      v71 -= 16;
                    }
                    while (v71 != v72);
                    uint64_t v71 = (char *)*((void *)&v132 + 1);
                  }
                  uint64_t v35 = v70 + 2;
                  *((void *)&v132 + 1) = v73;
                  *(void *)&long long v133 = v70 + 2;
                  *((void *)&v133 + 1) = v53 + 16 * v54;
                  if (v71) {
                    operator delete(v71);
                  }
                }
                else
                {
                  *(void *)long long v133 = v33;
                  *(void *)(v34 + 8) = v32;
                  uint64_t v35 = (void *)(v34 + 16);
                }
                *(void *)&long long v133 = v35;
                break;
              default:
                break;
            }
          }
          uint64_t v96 = v18[1];
          if (v96)
          {
            do
            {
              int64_t v97 = (uint64_t **)v96;
              uint64_t v96 = (uint64_t *)*v96;
            }
            while (v96);
          }
          else
          {
            do
            {
              int64_t v97 = (uint64_t **)v18[2];
              BOOL v98 = *v97 == (uint64_t *)v18;
              int v18 = v97;
            }
            while (!v98);
          }
          int v18 = v97;
        }
        while (v97 != &v121);
      }
      unint64_t v99 = 126 - 2 * __clz((uint64_t)(*((void *)&v128 + 1) - v128) >> 4);
      if (*((void *)&v128 + 1) == (void)v128) {
        uint64_t v100 = 0;
      }
      else {
        uint64_t v100 = v99;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(v128, *((_OWORD **)&v128 + 1), v100, 1);
      unint64_t v101 = 126 - 2 * __clz((uint64_t)(v130 - *((void *)&v129 + 1)) >> 4);
      if ((void)v130 == *((void *)&v129 + 1)) {
        uint64_t v102 = 0;
      }
      else {
        uint64_t v102 = v101;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((unint64_t *)&v129 + 1), (_OWORD *)v130, v102, 1);
      unint64_t v103 = 126 - 2 * __clz((uint64_t)(*((void *)&v131 + 1) - v131) >> 4);
      if (*((void *)&v131 + 1) == (void)v131) {
        uint64_t v104 = 0;
      }
      else {
        uint64_t v104 = v103;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(v131, *((_OWORD **)&v131 + 1), v104, 1);
      unint64_t v105 = 126 - 2 * __clz((uint64_t)(v133 - *((void *)&v132 + 1)) >> 4);
      if ((void)v133 == *((void *)&v132 + 1)) {
        uint64_t v106 = 0;
      }
      else {
        uint64_t v106 = v105;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((unint64_t *)&v132 + 1), (_OWORD *)v133, v106, 1);
      unint64_t v107 = 126 - 2 * __clz((uint64_t)(*((void *)&v134 + 1) - v134) >> 4);
      if (*((void *)&v134 + 1) == (void)v134) {
        uint64_t v108 = 0;
      }
      else {
        uint64_t v108 = v107;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(v134, *((_OWORD **)&v134 + 1), v108, 1);
      unint64_t v109 = 126 - 2 * __clz((uint64_t)(v136 - *((void *)&v135 + 1)) >> 4);
      if ((void)v136 == *((void *)&v135 + 1)) {
        uint64_t v110 = 0;
      }
      else {
        uint64_t v110 = v109;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(*((unint64_t *)&v135 + 1), (_OWORD *)v136, v110, 1);
      unint64_t v112 = a1[1];
      unint64_t v111 = a1[2];
      if (v112 >= v111)
      {
        uint64_t v114 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v112 - *a1) >> 3);
        unint64_t v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) > 0xEA0EA0EA0EA0EALL) {
LABEL_177:
        }
          abort();
        unint64_t v116 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v111 - *a1) >> 3);
        if (2 * v116 > v115) {
          unint64_t v115 = 2 * v116;
        }
        if (v116 >= 0x75075075075075) {
          unint64_t v117 = 0xEA0EA0EA0EA0EALL;
        }
        else {
          unint64_t v117 = v115;
        }
        *(void *)&long long v141 = v141 + 280;
        uint64_t v113 = a1[1];
      }
      else
      {
        uint64_t v113 = v112 + 280;
      }
      a1[1] = v113;
      if (*((void *)&v135 + 1))
      {
        *(void *)&long long v136 = *((void *)&v135 + 1);
        operator delete(*((void **)&v135 + 1));
      }
      if ((void)v134)
      {
        *((void *)&v134 + 1) = v134;
        operator delete((void *)v134);
      }
      if (*((void *)&v132 + 1))
      {
        *(void *)&long long v133 = *((void *)&v132 + 1);
        operator delete(*((void **)&v132 + 1));
      }
      if ((void)v131)
      {
        *((void *)&v131 + 1) = v131;
        operator delete((void *)v131);
      }
      if (*((void *)&v129 + 1))
      {
        *(void *)&long long v130 = *((void *)&v129 + 1);
        operator delete(*((void **)&v129 + 1));
      }
      if ((void)v128)
      {
        *((void *)&v128 + 1) = v128;
        operator delete((void *)v128);
      }
      if (v125 != v127) {
        free(v125);
      }
      long long v118 = (uint64_t *)v16[1];
      if (v118)
      {
        do
        {
          uint64_t v119 = v118;
          long long v118 = (uint64_t *)*v118;
        }
        while (v118);
      }
      else
      {
        do
        {
          uint64_t v119 = (uint64_t *)v16[2];
          BOOL v98 = *v119 == (void)v16;
          unsigned int v16 = v119;
        }
        while (!v98);
      }
      unsigned int v16 = v119;
    }
    while (v119 != (uint64_t *)v124);
  }
  std::__tree<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::__map_value_compare<llvm::CmpInst::Predicate,std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>,std::less<llvm::CmpInst::Predicate>,true>,std::allocator<std::__value_type<llvm::CmpInst::Predicate,llvm::SmallVector<llvm::BranchProbability,12u>>>>::destroy(v121);
  std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(v124[0]);
}

void std::vector<llvm::MachO::Target>::__insert_with_size[abi:nn180100]<llvm::MachO::Target const*,llvm::MachO::Target const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  if (a4 < 1) {
    return;
  }
  long long v5 = __src;
  unint64_t v7 = *(char **)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = -*(void *)a1 / 24;
  unint64_t v10 = (char *)(*(void *)a1 + 24 * v9);
  uint64_t v11 = *(void *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v8) >> 3)) < a4)
  {
    unint64_t v12 = a4 - 0x5555555555555555 * ((uint64_t)(v8 - (void)v7) >> 3);
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v7) >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v12) {
      uint64_t v14 = v12;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15) {
      unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v24 = v15 + 24 * v9;
    uint64_t v25 = 3 * a4;
    uint64_t v26 = (char *)(v24 + 24 * a4);
    uint64_t v27 = 8 * v25;
    unint64_t v28 = v24;
    do
    {
      long long v29 = *(_OWORD *)v5;
      *(void *)(v28 + 16) = *((void *)v5 + 2);
      *(_OWORD *)unint64_t v28 = v29;
      v28 += 24;
      v5 += 24;
      v27 -= 24;
    }
    while (v27);
    uint64_t v30 = *(char **)a1;
    if (*(char **)a1 == v10)
    {
      unint64_t v33 = v15 + 24 * v9;
    }
    else
    {
      uint64_t v31 = v10;
      do
      {
        long long v32 = *(_OWORD *)(v31 - 24);
        unint64_t v33 = v24 - 24;
        *(void *)(v24 - 8) = *((void *)v31 - 1);
        *(_OWORD *)(v24 - 24) = v32;
        v31 -= 24;
        v24 -= 24;
      }
      while (v31 != v30);
    }
    unint64_t v34 = v15 + 24 * v16;
    uint64_t v35 = *(unsigned char **)(a1 + 8);
    uint64_t v36 = v35 - v10;
    if (v35 != v10) {
      memmove(v26, v10, v35 - v10);
    }
    uint64_t v37 = *(char **)a1;
    *(void *)a1 = v33;
    *(void *)(a1 + 8) = &v26[v36];
    *(void *)(a1 + 16) = v34;
    if (v37)
    {
      operator delete(v37);
    }
    return;
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v10) >> 3)) >= a4)
  {
    uint64_t v17 = &__src[24 * a4];
    long long v19 = *(char **)(a1 + 8);
LABEL_17:
    uint64_t v20 = &v10[24 * a4];
    uint64_t v21 = &v19[-24 * a4];
    uint64_t v22 = v19;
    if ((unint64_t)v21 < v8)
    {
      uint64_t v22 = v19;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *((void *)v22 + 2) = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        v22 += 24;
        v21 += 24;
      }
      while ((unint64_t)v21 < v8);
    }
    *(void *)(a1 + 8) = v22;
    if (v19 != v20) {
      memmove(&v10[24 * a4], v10, v19 - v20);
    }
    if (v17 != v5)
    {
      memmove(v10, v5, v17 - v5);
    }
    return;
  }
  uint64_t v17 = &__src[8 * ((uint64_t)(v8 - (void)v10) >> 3)];
  int64_t v18 = a3 - v17;
  if (a3 != v17) {
    memmove(*(void **)(a1 + 8), &__src[8 * ((uint64_t)(v8 - (void)v10) >> 3)], a3 - v17);
  }
  long long v19 = (char *)(v8 + v18);
  *(void *)(a1 + 8) = v8 + v18;
  if ((uint64_t)(v8 - (void)v10) >= 1) {
    goto LABEL_17;
  }
}

void *std::__split_buffer<anonymous namespace'::UmbrellaSection>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x555555555555556) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v7 = (char *)operator new(48 * a2);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[48 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[48 * a2];
  return a1;
}

uint64_t *std::vector<anonymous namespace'::UmbrellaSection>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 48) = 0;
    *(void *)(v4 - 40) = 0;
    v4 -= 48;
    *(void *)(v4 + 16) = 0;
    long long v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = *(void *)(v2 + 16);
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    long long v6 = *(_OWORD *)(v2 + 24);
    *(void *)(v4 + 40) = *(void *)(v2 + 40);
    *(_OWORD *)(v4 + 24) = v6;
    *(void *)(v2 + 32) = 0;
    *(void *)(v2 + 40) = 0;
    *(void *)(v2 + 24) = 0;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<anonymous namespace'::UmbrellaSection>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator_traits<std::allocator<anonymous namespace'::UmbrellaSection>>::destroy[abi:nn180100]<anonymous namespace'::UmbrellaSection,void>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::__emplace_unique_key_args<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::SmallVector<llvm::MachO::Target,5u>>(uint64_t **a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v10 = (uint64_t **)v6;
        uint64_t v11 = (unsigned __int8 *)v6[4];
        unsigned int v12 = *((_DWORD *)v6 + 10);
        if (!llvm::SmallVectorImpl<llvm::MachO::Target>::operator<(a2, a3, v11, v12)) {
          break;
        }
        long long v6 = *v10;
        uint64_t v7 = v10;
        if (!*v10) {
          goto LABEL_9;
        }
      }
      uint64_t result = llvm::SmallVectorImpl<llvm::MachO::Target>::operator<(v11, v12, a2, a3);
      if (!result) {
        break;
      }
      long long v6 = v10[1];
      if (!v6)
      {
        uint64_t v7 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v10 = a1 + 1;
LABEL_9:
    uint64_t v14 = (uint64_t *)operator new(0xA8uLL);
    void v14[4] = (uint64_t)(v14 + 6);
    v14[5] = 0x500000000;
    if (*(_DWORD *)(a4 + 8)) {
      llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)(v14 + 4), a4);
    }
    *uint64_t v14 = 0;
    v14[1] = 0;
    long long v14[2] = (uint64_t)v10;
    char *v7 = v14;
    unint64_t v15 = (uint64_t *)**a1;
    if (v15)
    {
      *a1 = v15;
      uint64_t v14 = *v7;
    }
    uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::MachO::Target>::operator<(unsigned __int8 *a1, unsigned int a2, unsigned __int8 *a3, int a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = &a3[24 * a4];
  uint64_t v5 = 24 * a2;
  while (v5)
  {
    unsigned int v6 = *a1;
    unsigned int v7 = *a3;
    if (v6 < v7) {
      break;
    }
    if (v7 < v6) {
      return 0;
    }
    int v8 = *((_DWORD *)a1 + 1);
    int v9 = *((_DWORD *)a3 + 1);
    if (v8 < v9) {
      break;
    }
    uint64_t v10 = 0;
    if (v9 >= v8)
    {
      a1 += 24;
      a3 += 24;
      v5 -= 24;
      if (a3 != v4) {
        continue;
      }
    }
    return v10;
  }
  return 1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(unint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v114 = a2 - 2;
    unint64_t v116 = a2 - 1;
    uint64_t v113 = a2 - 3;
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                long long v47 = *(a2 - 1);
                unint64_t v46 = a2 - 1;
                unint64_t v48 = *(const void **)a1;
                size_t v49 = *(void *)(a1 + 8);
                long long v118 = v47;
                if ((llvm::StringRef::compare((uint64_t)&v118, v48, v49) & 0x80000000) != 0)
                {
                  long long v118 = *(_OWORD *)a1;
                  *(_OWORD *)a1 = *v46;
                  *unint64_t v46 = v118;
                }
                break;
              case 3:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((long long *)a1, (long long *)(a1 + 16), v116);
                break;
              case 4:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(a1, a1 + 16, (const void **)(a1 + 32), v116);
                break;
              case 5:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((const void **)a1, (const void **)(a1 + 16), (long long *)(a1 + 32), (long long *)(a1 + 48), v116);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            if (a4)
            {
              if ((_OWORD *)a1 != a2)
              {
                uint64_t v50 = (void *)(a1 + 16);
                if ((_OWORD *)(a1 + 16) != a2)
                {
                  uint64_t v51 = 0;
                  uint64_t v52 = (void *)a1;
                  do
                  {
                    unint64_t v53 = v50;
                    uint64_t v54 = (const void *)*v52;
                    size_t v55 = v52[1];
                    long long v118 = *((_OWORD *)v52 + 1);
                    if ((llvm::StringRef::compare((uint64_t)&v118, v54, v55) & 0x80000000) != 0)
                    {
                      uint64_t v56 = *v53;
                      uint64_t v57 = v52[3];
                      uint64_t v58 = v51;
                      while (1)
                      {
                        uint64_t v59 = a1 + v58;
                        *(_OWORD *)(a1 + v58 + 16) = *(_OWORD *)(a1 + v58);
                        if (!v58) {
                          break;
                        }
                        unint64_t v60 = *(const void **)(v59 - 16);
                        size_t v61 = *(void *)(v59 - 8);
                        *(void *)&long long v118 = v56;
                        *((void *)&v118 + 1) = v57;
                        v58 -= 16;
                        if ((llvm::StringRef::compare((uint64_t)&v118, v60, v61) & 0x80000000) == 0)
                        {
                          uint64_t v62 = (void *)(a1 + v58 + 16);
                          goto LABEL_67;
                        }
                      }
                      uint64_t v62 = (void *)a1;
LABEL_67:
                      *uint64_t v62 = v56;
                      v62[1] = v57;
                    }
                    uint64_t v50 = v53 + 2;
                    v51 += 16;
                    uint64_t v52 = v53;
                  }
                  while (v53 + 2 != (void *)a2);
                }
              }
            }
            else if ((_OWORD *)a1 != a2)
            {
              unint64_t v101 = (void *)(a1 + 16);
              while (v101 != (void *)a2)
              {
                uint64_t v102 = v101;
                unint64_t v103 = *(const void **)a1;
                size_t v104 = *(void *)(a1 + 8);
                long long v118 = *(_OWORD *)(a1 + 16);
                if ((llvm::StringRef::compare((uint64_t)&v118, v103, v104) & 0x80000000) != 0)
                {
                  uint64_t v105 = *v102;
                  uint64_t v106 = *(void *)(a1 + 24);
                  unint64_t v107 = v102;
                  do
                  {
                    uint64_t v108 = v107 - 1;
                    _OWORD *v107 = *(v107 - 1);
                    unint64_t v109 = (const void *)*((void *)v107 - 4);
                    size_t v110 = *((void *)v107 - 3);
                    *(void *)&long long v118 = v105;
                    *((void *)&v118 + 1) = v106;
                    int v111 = llvm::StringRef::compare((uint64_t)&v118, v109, v110);
                    unint64_t v107 = v108;
                  }
                  while (v111 < 0);
                  *uint64_t v108 = v105;
                  v108[1] = v106;
                }
                unint64_t v101 = v102 + 2;
                a1 = (unint64_t)v102;
              }
            }
            return;
          }
          if (!a3)
          {
            if ((_OWORD *)a1 != a2)
            {
              int64_t v63 = (unint64_t)(v12 - 2) >> 1;
              int64_t v64 = v63;
              unint64_t v112 = a2;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  unint64_t v67 = a1 + 16 * v66;
                  if (2 * v64 + 2 < v12)
                  {
                    int v68 = *(const void **)(v67 + 16);
                    size_t v69 = *(void *)(v67 + 24);
                    long long v118 = *(_OWORD *)v67;
                    int v70 = llvm::StringRef::compare((uint64_t)&v118, v68, v69);
                    if (v70 < 0) {
                      v67 += 16;
                    }
                    int64_t v63 = (unint64_t)(v12 - 2) >> 1;
                    if (v70 < 0) {
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  unint64_t v71 = a1 + 16 * v65;
                  unint64_t v72 = *(const void **)v71;
                  size_t v73 = *(void *)(v71 + 8);
                  long long v118 = *(_OWORD *)v67;
                  if ((llvm::StringRef::compare((uint64_t)&v118, v72, v73) & 0x80000000) == 0)
                  {
                    int64_t v115 = v65;
                    uint64_t v74 = *(const void **)v71;
                    size_t v75 = *(void *)(v71 + 8);
                    do
                    {
                      uint64_t v76 = (_OWORD *)v71;
                      unint64_t v71 = v67;
                      *uint64_t v76 = *(_OWORD *)v67;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v77 = (2 * v66) | 1;
                      unint64_t v67 = a1 + 16 * v77;
                      uint64_t v78 = 2 * v66 + 2;
                      if (v78 < v12)
                      {
                        uint64_t v79 = *(const void **)(v67 + 16);
                        size_t v80 = *(void *)(v67 + 24);
                        long long v118 = *(_OWORD *)v67;
                        int v81 = llvm::StringRef::compare((uint64_t)&v118, v79, v80);
                        if (v81 < 0) {
                          v67 += 16;
                        }
                        int64_t v63 = (unint64_t)(v12 - 2) >> 1;
                        if (v81 < 0) {
                          uint64_t v77 = v78;
                        }
                      }
                      long long v118 = *(_OWORD *)v67;
                      uint64_t v66 = v77;
                    }
                    while ((llvm::StringRef::compare((uint64_t)&v118, v74, v75) & 0x80000000) == 0);
                    *(void *)unint64_t v71 = v74;
                    *(void *)(v71 + 8) = v75;
                    a2 = v112;
                    int64_t v65 = v115;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              uint64_t v82 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v83 = 0;
                long long v117 = *(_OWORD *)a1;
                uint64_t v84 = v82 - 2;
                if (v82 < 2) {
                  uint64_t v84 = v82 - 1;
                }
                uint64_t v85 = v84 >> 1;
                int v86 = (_OWORD *)a1;
                do
                {
                  uint64_t v87 = (uint64_t)&v86[v83 + 1];
                  uint64_t v88 = (2 * v83) | 1;
                  uint64_t v89 = 2 * v83 + 2;
                  if (v89 < v82)
                  {
                    int v90 = *(const void **)&v86[v83 + 2];
                    size_t v91 = *((void *)&v86[v83 + 2] + 1);
                    long long v118 = *(_OWORD *)v87;
                    if ((int)llvm::StringRef::compare((uint64_t)&v118, v90, v91) < 0)
                    {
                      v87 += 16;
                      uint64_t v88 = v89;
                    }
                  }
                  *int v86 = *(_OWORD *)v87;
                  int v86 = (_OWORD *)v87;
                  uint64_t v83 = v88;
                }
                while (v88 <= v85);
                if ((_OWORD *)v87 == --a2)
                {
                  *(_OWORD *)uint64_t v87 = v117;
                }
                else
                {
                  *(_OWORD *)uint64_t v87 = *a2;
                  *a2 = v117;
                  uint64_t v92 = v87 - a1 + 16;
                  if (v92 >= 17)
                  {
                    unint64_t v93 = (((unint64_t)v92 >> 4) - 2) >> 1;
                    uint64_t v94 = (long long *)(a1 + 16 * v93);
                    uint64_t v95 = *(const void **)v87;
                    size_t v96 = *(void *)(v87 + 8);
                    long long v118 = *v94;
                    if ((llvm::StringRef::compare((uint64_t)&v118, v95, v96) & 0x80000000) != 0)
                    {
                      int64_t v97 = *(const void **)v87;
                      size_t v98 = *(void *)(v87 + 8);
                      do
                      {
                        unint64_t v99 = (_OWORD *)v87;
                        uint64_t v87 = (uint64_t)v94;
                        *unint64_t v99 = *v94;
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                        uint64_t v94 = (long long *)(a1 + 16 * v93);
                        long long v118 = *v94;
                      }
                      while ((llvm::StringRef::compare((uint64_t)&v118, v97, v98) & 0x80000000) != 0);
                      *(void *)uint64_t v87 = v97;
                      *(void *)(v87 + 8) = v98;
                    }
                  }
                }
              }
              while (v82-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = (long long *)(a1 + 16 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(v14, (long long *)a1, v116);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((long long *)a1, v14, v116);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((long long *)(a1 + 16), v14 - 1, v114);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((long long *)(a1 + 32), (long long *)(a1 + 16 + 16 * v13), v113);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(v14 - 1, v14, (void *)(a1 + 16 + 16 * v13));
            long long v118 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v14;
            *uint64_t v14 = v118;
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v15 = *(const void **)a1;
          size_t v16 = *(void *)(a1 + 8);
          long long v118 = *(_OWORD *)(a1 - 16);
          if ((llvm::StringRef::compare((uint64_t)&v118, v15, v16) & 0x80000000) != 0) {
            break;
          }
          uint64_t v29 = *(void *)a1;
          uint64_t v30 = *(void *)(a1 + 8);
          uint64_t v31 = (const void *)*((void *)a2 - 2);
          size_t v32 = *((void *)a2 - 1);
          *(void *)&long long v118 = *(void *)a1;
          *((void *)&v118 + 1) = v30;
          if ((llvm::StringRef::compare((uint64_t)&v118, v31, v32) & 0x80000000) != 0)
          {
            unint64_t v10 = a1;
            do
            {
              uint64_t v37 = *(const void **)(v10 + 16);
              size_t v38 = *(void *)(v10 + 24);
              v10 += 16;
              *(void *)&long long v118 = v29;
              *((void *)&v118 + 1) = v30;
            }
            while ((llvm::StringRef::compare((uint64_t)&v118, v37, v38) & 0x80000000) == 0);
          }
          else
          {
            unint64_t v33 = a1 + 16;
            do
            {
              unint64_t v10 = v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              unint64_t v34 = *(const void **)v33;
              size_t v35 = *(void *)(v33 + 8);
              *(void *)&long long v118 = v29;
              *((void *)&v118 + 1) = v30;
              int v36 = llvm::StringRef::compare((uint64_t)&v118, v34, v35);
              unint64_t v33 = v10 + 16;
            }
            while ((v36 & 0x80000000) == 0);
          }
          unint64_t v39 = a2;
          if (v10 < (unint64_t)a2)
          {
            unint64_t v39 = a2;
            do
            {
              uint64_t v40 = (const void *)*((void *)v39 - 2);
              size_t v41 = *((void *)v39-- - 1);
              *(void *)&long long v118 = v29;
              *((void *)&v118 + 1) = v30;
            }
            while ((llvm::StringRef::compare((uint64_t)&v118, v40, v41) & 0x80000000) != 0);
          }
          while (v10 < (unint64_t)v39)
          {
            long long v118 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v39;
            *unint64_t v39 = v118;
            do
            {
              uint64_t v42 = *(const void **)(v10 + 16);
              size_t v43 = *(void *)(v10 + 24);
              v10 += 16;
              *(void *)&long long v118 = v29;
              *((void *)&v118 + 1) = v30;
            }
            while ((llvm::StringRef::compare((uint64_t)&v118, v42, v43) & 0x80000000) == 0);
            do
            {
              uint64_t v44 = (const void *)*((void *)v39 - 2);
              size_t v45 = *((void *)v39-- - 1);
              *(void *)&long long v118 = v29;
              *((void *)&v118 + 1) = v30;
            }
            while ((llvm::StringRef::compare((uint64_t)&v118, v44, v45) & 0x80000000) != 0);
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v29;
          *(void *)(v10 - 8) = v30;
        }
        uint64_t v17 = (uint64_t)a2;
        uint64_t v18 = 0;
        long long v19 = *(const void **)a1;
        size_t v20 = *(void *)(a1 + 8);
        do
        {
          long long v118 = *(_OWORD *)(a1 + v18 + 16);
          v18 += 16;
        }
        while ((llvm::StringRef::compare((uint64_t)&v118, v19, v20) & 0x80000000) != 0);
        unint64_t v21 = a1 + v18;
        uint64_t v22 = (long long *)v17;
        if (v18 == 16)
        {
          uint64_t v22 = (long long *)v17;
          do
          {
            if (v21 >= (unint64_t)v22) {
              break;
            }
            long long v24 = *--v22;
            long long v118 = v24;
          }
          while ((llvm::StringRef::compare((uint64_t)&v118, v19, v20) & 0x80000000) == 0);
        }
        else
        {
          do
          {
            long long v23 = *--v22;
            long long v118 = v23;
          }
          while ((llvm::StringRef::compare((uint64_t)&v118, v19, v20) & 0x80000000) == 0);
        }
        unint64_t v10 = a1 + v18;
        if (v21 < (unint64_t)v22)
        {
          uint64_t v25 = v22;
          do
          {
            long long v118 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *v25;
            *uint64_t v25 = v118;
            do
            {
              long long v26 = *(_OWORD *)(v10 + 16);
              v10 += 16;
              long long v118 = v26;
            }
            while ((llvm::StringRef::compare((uint64_t)&v118, v19, v20) & 0x80000000) != 0);
            do
            {
              long long v27 = *--v25;
              long long v118 = v27;
            }
            while ((llvm::StringRef::compare((uint64_t)&v118, v19, v20) & 0x80000000) == 0);
          }
          while (v10 < (unint64_t)v25);
        }
        if (v10 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v19;
        *(void *)(v10 - 8) = v20;
        a2 = (_OWORD *)v17;
        if (v21 >= (unint64_t)v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *,false>(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(a1, v10 - 16);
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(v10, v17))
      {
        break;
      }
      if (!v28) {
        goto LABEL_30;
      }
    }
    a2 = (_OWORD *)(v10 - 16);
    if (!v28) {
      continue;
    }
    break;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(long long *a1, long long *a2, void *a3)
{
  unsigned int v6 = *(const void **)a1;
  size_t v7 = *((void *)a1 + 1);
  v21[0] = *a2;
  int v8 = llvm::StringRef::compare((uint64_t)v21, v6, v7);
  uint64_t v9 = a3[1];
  unint64_t v10 = *(const void **)a2;
  size_t v11 = *((void *)a2 + 1);
  if (v8 < 0)
  {
    *(void *)&v21[0] = *a3;
    *((void *)&v21[0] + 1) = v9;
    uint64_t result = llvm::StringRef::compare((uint64_t)v21, v10, v11);
    if ((result & 0x80000000) != 0)
    {
      long long v20 = *a1;
      *a1 = *(_OWORD *)a3;
    }
    else
    {
      long long v17 = *a1;
      *a1 = *a2;
      *a2 = v17;
      uint64_t v18 = *(const void **)a2;
      size_t v19 = *((void *)a2 + 1);
      v21[0] = *(_OWORD *)a3;
      uint64_t result = llvm::StringRef::compare((uint64_t)v21, v18, v19);
      if ((result & 0x80000000) == 0) {
        return result;
      }
      long long v20 = *a2;
      *a2 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v20;
  }
  else
  {
    *(void *)&v21[0] = *a3;
    *((void *)&v21[0] + 1) = v9;
    uint64_t result = llvm::StringRef::compare((uint64_t)v21, v10, v11);
    if ((result & 0x80000000) != 0)
    {
      long long v13 = *a2;
      *a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v13;
      uint64_t v14 = *(const void **)a1;
      size_t v15 = *((void *)a1 + 1);
      v21[0] = *a2;
      uint64_t result = llvm::StringRef::compare((uint64_t)v21, v14, v15);
      if ((result & 0x80000000) != 0)
      {
        long long v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(const void **)a1;
      size_t v7 = *(void *)(a1 + 8);
      long long v9 = *(_OWORD *)(a2 - 16);
      int v8 = (_OWORD *)(a2 - 16);
      long long v24 = v9;
      if ((llvm::StringRef::compare((uint64_t)&v24, v6, v7) & 0x80000000) != 0)
      {
        long long v10 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v8;
        _OWORD *v8 = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((long long *)a1, (long long *)(a1 + 16), (void *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(a1, a1 + 16, (const void **)(a1 + 32), (_OWORD *)(a2 - 16));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((const void **)a1, (const void **)(a1 + 16), (long long *)(a1 + 32), (long long *)(a1 + 48), (_OWORD *)(a2 - 16));
      return 1;
    default:
      uint64_t v11 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((long long *)a1, (long long *)(a1 + 16), (void *)(a1 + 32));
      uint64_t v12 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    size_t v15 = *(const void **)v11;
    size_t v16 = *(void *)(v11 + 8);
    long long v24 = *(_OWORD *)v12;
    if ((llvm::StringRef::compare((uint64_t)&v24, v15, v16) & 0x80000000) != 0)
    {
      uint64_t v17 = *(void *)v12;
      uint64_t v18 = *(void *)(v12 + 8);
      uint64_t v19 = v13;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(_OWORD *)(a1 + v19 + 48) = *(_OWORD *)(a1 + v19 + 32);
        if (v19 == -32) {
          break;
        }
        unint64_t v21 = *(const void **)(v20 + 16);
        size_t v22 = *(void *)(v20 + 24);
        *(void *)&long long v24 = v17;
        *((void *)&v24 + 1) = v18;
        v19 -= 16;
        if ((llvm::StringRef::compare((uint64_t)&v24, v21, v22) & 0x80000000) == 0)
        {
          long long v23 = (void *)(a1 + v19 + 48);
          goto LABEL_12;
        }
      }
      long long v23 = (void *)a1;
LABEL_12:
      *long long v23 = v17;
      v23[1] = v18;
      if (++v14 == 8) {
        return v12 + 16 == a2;
      }
    }
    uint64_t v11 = v12;
    v13 += 16;
    v12 += 16;
    if (v12 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(uint64_t a1, uint64_t a2, const void **a3, _OWORD *a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((long long *)a1, (long long *)a2, a3);
  int v8 = *a3;
  size_t v9 = (size_t)a3[1];
  v17[0] = *a4;
  if ((llvm::StringRef::compare((uint64_t)v17, v8, v9) & 0x80000000) != 0)
  {
    long long v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = v11;
    uint64_t v12 = *(const void **)a2;
    size_t v13 = *(void *)(a2 + 8);
    v17[0] = *(_OWORD *)a3;
    if ((llvm::StringRef::compare((uint64_t)v17, v12, v13) & 0x80000000) != 0)
    {
      long long v14 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v14;
      size_t v15 = *(const void **)a1;
      size_t v16 = *(void *)(a1 + 8);
      v17[0] = *(_OWORD *)a2;
      if ((llvm::StringRef::compare((uint64_t)v17, v15, v16) & 0x80000000) != 0)
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>(const void **a1, const void **a2, long long *a3, long long *a4, _OWORD *a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,FlowStringRef *>((uint64_t)a1, (uint64_t)a2, (const void **)a3, a4);
  long long v10 = *(const void **)a4;
  size_t v11 = *((void *)a4 + 1);
  v22[0] = *a5;
  if ((llvm::StringRef::compare((uint64_t)v22, v10, v11) & 0x80000000) != 0)
  {
    long long v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    long long v14 = *(const void **)a3;
    size_t v15 = *((void *)a3 + 1);
    v22[0] = *a4;
    if ((llvm::StringRef::compare((uint64_t)v22, v14, v15) & 0x80000000) != 0)
    {
      long long v16 = *a3;
      *a3 = *a4;
      *a4 = v16;
      uint64_t v17 = *a2;
      size_t v18 = (size_t)a2[1];
      v22[0] = *a3;
      if ((llvm::StringRef::compare((uint64_t)v22, v17, v18) & 0x80000000) != 0)
      {
        long long v19 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *a3;
        *a3 = v19;
        uint64_t v20 = *a1;
        size_t v21 = (size_t)a1[1];
        v22[0] = *(_OWORD *)a2;
        if ((llvm::StringRef::compare((uint64_t)v22, v20, v21) & 0x80000000) != 0)
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::vector<anonymous namespace'::MetadataSection>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 48) = 0;
      *(void *)(v6 - 40) = 0;
      *(void *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 48) = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 48;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *__n128 result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<anonymous namespace'::MetadataSection>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator_traits<std::allocator<anonymous namespace'::MetadataSection>>::destroy[abi:nn180100]<anonymous namespace'::MetadataSection,void>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(*a1);
    std::__tree<llvm::SmallVector<llvm::MachO::Target,5u>>::destroy(a1[1]);
    uint64_t v2 = (void *)a1[4];
    if (v2 != a1 + 6) {
      free(v2);
    }
    operator delete(a1);
  }
}

void anonymous namespace'::SymbolSection::~SymbolSection(_anonymous_namespace_::SymbolSection *this)
{
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    *((void *)this + 33) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 29);
  if (v3)
  {
    *((void *)this + 30) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 26);
  if (v4)
  {
    *((void *)this + 27) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 23);
  if (v5)
  {
    *((void *)this + 24) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 20);
  if (v6)
  {
    *((void *)this + 21) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 17);
  if (v7)
  {
    *((void *)this + 18) = v7;
    operator delete(v7);
  }
  if (*(_anonymous_namespace_::SymbolSection **)this != (_anonymous_namespace_::SymbolSection *)((char *)this + 16)) {
    free(*(void **)this);
  }
}

__n128 std::allocator_traits<std::allocator<anonymous namespace'::SymbolSection>>::construct[abi:nn180100]<anonymous namespace'::SymbolSection,anonymous namespace'::SymbolSection,void>(void *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x500000000;
  if (*(_DWORD *)(a2 + 8)) {
    llvm::SmallVectorImpl<llvm::MachO::Target>::operator=((uint64_t)a1, a2);
  }
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 136);
  a1[19] = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[22] = 0;
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  a1[22] = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  a1[23] = 0;
  a1[24] = 0;
  a1[25] = 0;
  *(_OWORD *)(a1 + 23) = *(_OWORD *)(a2 + 184);
  a1[25] = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[28] = 0;
  *((_OWORD *)a1 + 13) = *(_OWORD *)(a2 + 208);
  a1[28] = *(void *)(a2 + 224);
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  a1[29] = 0;
  a1[30] = 0;
  a1[31] = 0;
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 232);
  a1[31] = *(void *)(a2 + 248);
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[34] = 0;
  __n128 result = *(__n128 *)(a2 + 256);
  *((__n128 *)a1 + 16) = result;
  a1[34] = *(void *)(a2 + 272);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  return result;
}

void *std::__split_buffer<anonymous namespace'::SymbolSection>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0xEA0EA0EA0EA0EBLL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v7 = (char *)operator new(280 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[280 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[280 * a2];
  return a1;
}

void std::vector<anonymous namespace'::SymbolSection>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (void *)a2[1];
  while (v4 != v5)
  {
    v6 -= 35;
    v4 -= 280;
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<anonymous namespace'::SymbolSection>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 280;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::yaml::IO::processKey<unsigned int,llvm::yaml::EmptyContext>(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if (result)
  {
    llvm::yaml::yamlize<unsigned int>(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

void llvm::yaml::yamlize<unsigned int>(uint64_t *a1, unint64_t *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    long long v16 = &v17;
    uint64_t v17 = v19;
    long long v18 = xmmword_261E8A720;
    LODWORD(v9) = 0;
    char v13 = 0;
    uint64_t v14 = 0;
    int v15 = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = &unk_270DBD758;
    llvm::raw_ostream::SetUnbuffered(&v8);
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v8, *(unsigned int *)a2, 0, 0, 0);
    uint64_t v4 = v16[1];
    v7[0] = *v16;
    v7[1] = v4;
    (*(void (**)(uint64_t *, void *, void))(*a1 + 216))(a1, v7, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
    if (v17 != v19) {
      free(v17);
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    (*(void (**)(uint64_t *, void **, void))(*a1 + 216))(a1, &v8, 0);
    uint64_t v5 = (char *)llvm::yaml::ScalarTraits<unsigned int,void>::input((uint64_t)v8, v9, a1[1], a2);
    if (v6)
    {
      uint64_t v19[4] = 261;
      uint64_t v17 = v5;
      *(void *)&long long v18 = v6;
      (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &v17);
    }
  }
}

uint64_t llvm::yaml::IO::processKey<llvm::SmallVector<llvm::MachO::Target,5u>,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  char v11 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, "targets", 1, 0, &v11, &v12);
  if (result)
  {
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
      uint64_t v6 = *(unsigned int *)(a2 + 8);
    }
    else {
      uint64_t v6 = v5;
    }
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      uint64_t v9 = 24;
      do
      {
        uint64_t v13 = 0;
        if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 72))(a1, v8, &v13))
        {
          unint64_t v10 = *(unsigned int *)(a2 + 8);
          if (v8 >= v10)
          {
            if (v8 >= *(unsigned int *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v8 + 1, 24);
              unint64_t v10 = *(unsigned int *)(a2 + 8);
            }
            if (v8 + 1 != v10) {
              bzero((void *)(*(void *)a2 + 24 * v10), 24 - -24 * ((v7 - 24 * v10) / 0x18));
            }
            *(_DWORD *)(a2 + 8) = v8 + 1;
          }
          llvm::yaml::yamlize<llvm::MachO::Target>(a1, (unsigned __int8 *)(*(void *)a2 + v9 - 24));
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v13);
        }
        ++v8;
        v9 += 24;
        v7 += 24;
      }
      while (v6 != v8);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v12);
  }
  return result;
}

void llvm::yaml::yamlize<llvm::MachO::Target>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 216))(a1, &v14, 0);
    llvm::MachO::Target::create((uint64_t)v14, v15, (uint64_t)v23);
    if (v24)
    {
      uint64_t v8 = *(void *)v23;
      *(void *)long long v23 = 0;
      v13[0] = v8;
      llvm::handleAllErrors<llvm::consumeError(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(v13);
      if (v13[0]) {
        (*(void (**)(uint64_t))(*(void *)v13[0] + 8))(v13[0]);
      }
      if (v24)
      {
        uint64_t v9 = *(void *)v23;
        *(void *)long long v23 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      uint64_t v6 = "unparsable target";
      uint64_t v7 = 17;
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)v23;
      *((void *)a2 + 2) = *(void *)&v23[16];
      if (*a2 == 16)
      {
        uint64_t v6 = "unknown architecture";
        uint64_t v7 = 20;
      }
      else
      {
        if (*((_DWORD *)a2 + 1)) {
          return;
        }
        uint64_t v6 = "unknown platform";
        uint64_t v7 = 16;
      }
    }
    __int16 v25 = 261;
    *(void *)long long v23 = v6;
    *(void *)&v23[8] = v7;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 248))(a1, v23);
    return;
  }
  *(void *)long long v23 = &v24;
  *(_OWORD *)&v23[8] = xmmword_261E8A720;
  LODWORD(v15) = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  int v21 = 1;
  uint64_t v17 = 0;
  long long v18 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = &unk_270DBD758;
  size_t v22 = (uint64_t *)v23;
  llvm::raw_ostream::SetUnbuffered(&v14);
  Architectureuint64_t Name = llvm::MachO::getArchitectureName(*a2);
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, ArchitectureName, v5);
  if (v17 == v18) {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v14, "-", 1uLL);
  }
  else {
    *v18++ = 45;
  }
  unint64_t v10 = "unknown";
  size_t v11 = 7;
  switch(*((_DWORD *)a2 + 1))
  {
    case 1:
      unint64_t v10 = "macos";
      goto LABEL_33;
    case 2:
      unint64_t v10 = "ios";
      size_t v11 = 3;
      break;
    case 3:
      unint64_t v10 = "tvos";
      goto LABEL_29;
    case 4:
      unint64_t v10 = "watchos";
      size_t v11 = 7;
      break;
    case 5:
      unint64_t v10 = "bridgeos";
      size_t v11 = 8;
      break;
    case 6:
      unint64_t v10 = "maccatalyst";
      size_t v11 = 11;
      break;
    case 7:
      unint64_t v10 = "ios-simulator";
      size_t v11 = 13;
      break;
    case 8:
      unint64_t v10 = "tvos-simulator";
      goto LABEL_31;
    case 9:
      unint64_t v10 = "watchos-simulator";
      size_t v11 = 17;
      break;
    case 0xA:
      unint64_t v10 = "driverkit";
      size_t v11 = 9;
      break;
    case 0xB:
      unint64_t v10 = "xros";
LABEL_29:
      size_t v11 = 4;
      break;
    case 0xC:
      unint64_t v10 = "xros-simulator";
LABEL_31:
      size_t v11 = 14;
      break;
    case 0xE:
      unint64_t v10 = "sepos";
LABEL_33:
      size_t v11 = 5;
      break;
    default:
      break;
  }
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v14, v10, v11);
  uint64_t v12 = v22[1];
  v13[0] = *v22;
  v13[1] = v12;
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a1 + 216))(a1, v13, 0);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
  if (*(char **)v23 != &v24) {
    free(*(void **)v23);
  }
}

uint64_t llvm::yaml::IO::processKey<std::string,llvm::yaml::EmptyContext>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  char v7 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if (result)
  {
    llvm::yaml::yamlize<std::string>(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

void llvm::yaml::yamlize<std::string>(uint64_t *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    uint64_t v20 = &v21;
    int v21 = v23;
    long long v22 = xmmword_261E8A720;
    LODWORD(v13) = 0;
    char v17 = 0;
    uint64_t v18 = 0;
    int v19 = 1;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = 0;
    uint64_t v12 = &unk_270DBD758;
    llvm::raw_ostream::SetUnbuffered(&v12);
    int v4 = *(char *)(a2 + 23);
    if (v4 >= 0) {
      size_t v5 = (const char *)a2;
    }
    else {
      size_t v5 = *(const char **)a2;
    }
    if (v4 >= 0) {
      size_t v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v6 = *(void *)(a2 + 8);
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)&v12, v5, v6);
    char v7 = (unsigned __int8 *)v20[1];
    v11[0] = (unsigned __int8 *)*v20;
    v11[1] = v7;
    uint64_t v8 = llvm::yaml::needsQuotes(v11[0], (unint64_t)v7);
    (*(void (**)(uint64_t *, unsigned __int8 **, uint64_t))(*a1 + 216))(a1, v11, v8);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v12);
    if (v21 != v23) {
      free(v21);
    }
  }
  else
  {
    uint64_t v12 = 0;
    size_t v13 = 0;
    (*(void (**)(uint64_t *, void **, uint64_t))(*a1 + 216))(a1, &v12, 1);
    uint64_t v9 = (void *)llvm::yaml::ScalarTraits<std::string,void>::input(v12, v13, a1[1], a2);
    if (v10)
    {
      uint64_t v23[4] = 261;
      int v21 = v9;
      *(void *)&long long v22 = v10;
      (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &v21);
    }
  }
}

uint64_t llvm::yaml::needsQuotes(unsigned __int8 *a1, unint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1;
    int v4 = *a1;
    BOOL v5 = 1;
    if ((v4 - 9) >= 5 && v4 != 32)
    {
      int v13 = a1[a2 - 1];
      if ((v13 - 9) >= 5) {
        BOOL v5 = v13 == 32;
      }
    }
    switch(a2)
    {
      case 1uLL:
        if (v4 == 126) {
          BOOL v5 = 1;
        }
        goto LABEL_41;
      case 5uLL:
        if ((*(_DWORD *)a1 != 1936482662 || a1[4] != 101) && (*(_DWORD *)a1 != 1936482630 || a1[4] != 101))
        {
          unsigned int v16 = bswap32(*(_DWORD *)a1);
          if (v16 == 1178684499) {
            int v17 = a1[4] - 69;
          }
          else {
            int v17 = v16 < 0x46414C53 ? -1 : 1;
          }
          if (v17) {
            goto LABEL_41;
          }
        }
        break;
      case 4uLL:
        if (*(_DWORD *)a1 == 1819047278
          || *(_DWORD *)a1 == 1819047246
          || ((unsigned int v6 = bswap32(*(_DWORD *)a1), v23 = v6 >= 0x4E554C4C, v7 = v6 > 0x4E554C4C, v23) ? (v8 = 0) : (v8 = 1),
              v7 == v8))
        {
          BOOL v5 = 1;
        }
        if (*(_DWORD *)a1 != 1702195828 && *(_DWORD *)a1 != 1702195796)
        {
          unsigned int v9 = bswap32(*(_DWORD *)a1);
          BOOL v23 = v9 >= 0x54525545;
          int v10 = v9 > 0x54525545;
          int v11 = !v23;
          if (v10 != v11) {
            goto LABEL_41;
          }
        }
        break;
      default:
        goto LABEL_41;
    }
    BOOL v5 = 1;
LABEL_41:
    BOOL isNumeric = llvm::yaml::isNumeric(a1, a2);
    unsigned int v20 = isNumeric || v5;
    if (v19) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v20;
    }
    while (1)
    {
      unsigned int v22 = *v3;
      BOOL v23 = v22 - 48 >= 0xA && (v22 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (!v23) {
        goto LABEL_59;
      }
      uint64_t result = 2;
      if (v22 <= 0x2E)
      {
        if (((1 << v22) & 0x700100000200) != 0) {
          goto LABEL_59;
        }
        if (((1 << v22) & 0x2400) != 0) {
          return result;
        }
      }
      if (v22 - 94 >= 2)
      {
        if (v22 == 127 || (char)v22 < 32) {
          return result;
        }
        uint64_t v21 = 1;
      }
LABEL_59:
      ++v3;
      uint64_t result = v21;
      if (!--v2) {
        return result;
      }
    }
  }
  return 1;
}

BOOL llvm::yaml::isNumeric(_DWORD *a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 == 4)
  {
    if (*a1 == 1851878958 || *a1 == 1314999854 || *a1 == 1312902702) {
      return 1;
    }
    goto LABEL_11;
  }
  if (a2 != 1)
  {
LABEL_11:
    int v3 = *(unsigned __int8 *)a1;
    goto LABEL_12;
  }
  uint64_t v2 = 0;
  int v3 = *(unsigned __int8 *)a1;
  if (v3 == 43 || v3 == 45) {
    return v2;
  }
LABEL_12:
  if (v3 == 45 || v3 == 43)
  {
    int v4 = (unsigned __int8 *)a1 + 1;
    unint64_t v5 = a2 - 1;
  }
  else
  {
    int v4 = (unsigned __int8 *)a1;
    unint64_t v5 = a2;
  }
  if (v5 == 4 && (*(_DWORD *)v4 == 1718511918 || *(_DWORD *)v4 == 1718503726 || *(_DWORD *)v4 == 1179535662)) {
    return 1;
  }
  if (a2 < 2) {
    goto LABEL_23;
  }
  if (*(_WORD *)a1 == 28464)
  {
    if (a2 < 3) {
      return 0;
    }
    unsigned int v22 = (unsigned __int8 *)a1 + 2;
    unint64_t v23 = a2 - 2;
    unsigned int v20 = "01234567";
    uint64_t v21 = 8;
    return llvm::StringRef::find_first_not_of(&v22, (unsigned __int8 *)v20, v21, 0) == -1;
  }
  if (*(_WORD *)a1 == 30768)
  {
    if (a2 < 3) {
      return 0;
    }
    unsigned int v22 = (unsigned __int8 *)a1 + 2;
    unint64_t v23 = a2 - 2;
    unsigned int v20 = "0123456789abcdefABCDEF";
    uint64_t v21 = 22;
    return llvm::StringRef::find_first_not_of(&v22, (unsigned __int8 *)v20, v21, 0) == -1;
  }
LABEL_23:
  if (!v5) {
    goto LABEL_29;
  }
  uint64_t v2 = 0;
  int v6 = *v4;
  if (v6 != 101 && v6 != 69)
  {
    if (v6 == 46 && (v5 == 1 || !memchr("0123456789", (char)v4[1], 0xBuLL))) {
      return 0;
    }
LABEL_29:
    unsigned int v22 = v4;
    unint64_t v23 = v5;
    unint64_t first_not_of = llvm::StringRef::find_first_not_of(&v22, "0123456789", 10, 0);
    if (first_not_of >= v5) {
      unint64_t v8 = v5;
    }
    else {
      unint64_t v8 = first_not_of;
    }
    unint64_t v9 = v5 - v8;
    if (v5 != v8)
    {
      int v10 = &v4[v8];
      int v11 = *v10;
      if (v11 == 101 || v11 == 69)
      {
LABEL_41:
        unint64_t v16 = v9 - 1;
        if (v9 != 1)
        {
          int v17 = v10 + 1;
          int v18 = v10[1];
          if (v18 != 45 && v18 != 43) {
            goto LABEL_46;
          }
          unint64_t v16 = v9 - 2;
          if (v9 != 2)
          {
            int v17 = v10 + 2;
LABEL_46:
            unsigned int v22 = v17;
            unint64_t v23 = v16;
            return v16 <= llvm::StringRef::find_first_not_of(&v22, "0123456789", 10, 0);
          }
        }
        return 0;
      }
      if (v11 != 46) {
        return 0;
      }
      uint64_t v12 = v10 + 1;
      unint64_t v13 = v9 - 1;
      unsigned int v22 = v10 + 1;
      unint64_t v23 = v9 - 1;
      unint64_t v14 = llvm::StringRef::find_first_not_of(&v22, "0123456789", 10, 0);
      if (v14 >= v13) {
        unint64_t v15 = v13;
      }
      else {
        unint64_t v15 = v14;
      }
      unint64_t v9 = v13 - v15;
      if (v13 != v15)
      {
        int v10 = &v12[v15];
        if ((*v10 | 0x20) != 0x65) {
          return 0;
        }
        goto LABEL_41;
      }
    }
    return 1;
  }
  return v2;
}

uint64_t llvm::yaml::IO::processKeyWithDefault<TBDFlags,llvm::yaml::EmptyContext>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v10 = 0;
  char v9 = 0;
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*a2 == *a3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, const char *, void, uint64_t, char *, uint64_t *))(*(void *)a1 + 120))(a1, "flags", 0, v7, &v9, &v10);
  if (result)
  {
    char v11 = 0;
    if ((*(unsigned int (**)(uint64_t, char *))(*(void *)a1 + 192))(a1, &v11))
    {
      if (v11) {
        *a2 = 0;
      }
      llvm::yaml::IO::bitSetCase<TBDFlags>(a1, a2, (uint64_t)"flat_namespace", 1);
      llvm::yaml::IO::bitSetCase<TBDFlags>(a1, a2, (uint64_t)"not_app_extension_safe", 2);
      llvm::yaml::IO::bitSetCase<TBDFlags>(a1, a2, (uint64_t)"installapi", 4);
      (*(void (**)(uint64_t))(*(void *)a1 + 208))(a1);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v10);
  }
  else if (v9)
  {
    *a2 = *a3;
  }
  return result;
}

uint64_t llvm::yaml::IO::bitSetCase<TBDFlags>(uint64_t a1, _DWORD *a2, uint64_t a3, int a4)
{
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((a4 & ~*a2) != 0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a3, v9);
  if (result) {
    *a2 |= a4;
  }
  return result;
}

uint64_t llvm::yaml::IO::processKey<llvm::StringRef,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = 0;
  char v8 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, a4, 0, &v8, &v9);
  if (result)
  {
    double v7 = llvm::yaml::yamlize<llvm::StringRef>(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)a1 + 128))(a1, v9, v7);
  }
  return result;
}

double llvm::yaml::yamlize<llvm::StringRef>(uint64_t a1, uint64_t a2)
{
  v18[16] = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
  {
    unint64_t v16 = v17;
    *(void *)int v17 = v18;
    *(_OWORD *)&v17[8] = xmmword_261E8A720;
    int v9 = 0;
    char v13 = 0;
    uint64_t v14 = 0;
    int v15 = 1;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v10 = 0;
    char v8 = &unk_270DBD758;
    llvm::raw_ostream::SetUnbuffered(&v8);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v8, *(const void **)a2, *(void *)(a2 + 8));
    int v4 = (unsigned __int8 *)*((void *)v16 + 1);
    v7[0] = *(unsigned __int8 **)v16;
    v7[1] = v4;
    uint64_t v5 = llvm::yaml::needsQuotes(v7[0], (unint64_t)v4);
    (*(void (**)(uint64_t, unsigned __int8 **, uint64_t))(*(void *)a1 + 216))(a1, v7, v5);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
    if (*(void **)v17 != v18) {
      free(*(void **)v17);
    }
  }
  else
  {
    *(void *)int v17 = 0;
    *(void *)&v17[8] = 0;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 216))(a1, v17, 1);
    double result = *(double *)v17;
    *(_OWORD *)a2 = *(_OWORD *)v17;
  }
  return result;
}

uint64_t llvm::yaml::IO::processKeyWithDefault<llvm::MachO::PackedVersion,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2, llvm::MachO::PackedVersion *a3, _DWORD *a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v13 = 0;
  char v12 = 0;
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*(_DWORD *)a3 == *a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, 0, v9, &v12, &v13);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
    {
      unint64_t v23 = &v24;
      uint64_t v24 = v26;
      long long v25 = xmmword_261E8A720;
      LODWORD(v16) = 0;
      char v20 = 0;
      uint64_t v21 = 0;
      int v22 = 1;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = 0;
      int v15 = &unk_270DBD758;
      llvm::raw_ostream::SetUnbuffered(&v15);
      llvm::MachO::PackedVersion::print(a3, (llvm::raw_ostream *)&v15);
      uint64_t v11 = v23[1];
      v14[0] = *v23;
      v14[1] = v11;
      (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 216))(a1, v14, 0);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v15);
      if (v24 != v26) {
        free(v24);
      }
    }
    else
    {
      int v15 = 0;
      unint64_t v16 = 0;
      (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 216))(a1, &v15, 0);
      if ((llvm::MachO::PackedVersion::parse32(a3, (uint64_t)v15, v16) & 1) == 0)
      {
        void v26[4] = 261;
        uint64_t v24 = "invalid packed version string.";
        *(void *)&long long v25 = 30;
        (*(void (**)(uint64_t, void **))(*(void *)a1 + 248))(a1, &v24);
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v13);
  }
  else if (v12)
  {
    *(_DWORD *)a3 = *a4;
  }
  return result;
}

uint64_t llvm::yaml::IO::processKeyWithDefault<SwiftVersion,llvm::yaml::EmptyContext>(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3, unsigned char *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  char v14 = 0;
  unsigned int v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
  if (*(unsigned __int8 *)a3 == *a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, void, uint64_t, char *, uint64_t *))(*a1 + 120))(a1, a2, 0, v9, &v14, &v15);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
    {
      long long v25 = &v26;
      uint64_t v26 = v28;
      long long v27 = xmmword_261E8A720;
      LODWORD(v18) = 0;
      char v22 = 0;
      uint64_t v23 = 0;
      int v24 = 1;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      uint64_t v17 = &unk_270DBD758;
      llvm::raw_ostream::SetUnbuffered(&v17);
      llvm::yaml::ScalarTraits<SwiftVersion,void>::output(a3, a1[1], (llvm::raw_ostream *)&v17);
      uint64_t v11 = v25[1];
      v16[0] = *v25;
      v16[1] = v11;
      (*(void (**)(uint64_t *, void *, void))(*a1 + 216))(a1, v16, 0);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v17);
      if (v26 != v28) {
        free(v26);
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      (*(void (**)(uint64_t *, void **, void))(*a1 + 216))(a1, &v17, 0);
      char v12 = (char *)llvm::yaml::ScalarTraits<SwiftVersion,void>::input((uint64_t)v17, v18, a1[1], (unint64_t *)a3);
      if (v13)
      {
        v28[4] = 261;
        uint64_t v26 = v12;
        *(void *)&long long v27 = v13;
        (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &v26);
      }
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v15);
  }
  else if (v14)
  {
    *(unsigned char *)a3 = *a4;
  }
  return result;
}

uint64_t llvm::yaml::IO::processKey<std::vector<llvm::MachO::Target>,llvm::yaml::EmptyContext>(uint64_t a1, char **a2)
{
  uint64_t v26 = 0;
  char v25 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, "targets", 1, 0, &v25, &v26);
  if (result)
  {
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
      unsigned int v5 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
    }
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = v5;
      do
      {
        uint64_t v27 = 0;
        if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 72))(a1, v6, &v27))
        {
          unsigned int v8 = *a2;
          uint64_t v9 = a2[1];
          unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a2) >> 3);
          if (v10 <= v6)
          {
            unint64_t v11 = v6 + 1;
            unint64_t v12 = v6 + 1 - v10;
            uint64_t v13 = a2[2];
            if (0xAAAAAAAAAAAAAAABLL * ((v13 - v9) >> 3) >= v12)
            {
              bzero(a2[1], 24 * ((24 * v12 - 24) / 0x18) + 24);
              a2[1] = &v9[24 * ((24 * v12 - 24) / 0x18) + 24];
            }
            else
            {
              unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v8) >> 3);
              if (2 * v14 > v11) {
                unint64_t v11 = 2 * v14;
              }
              if (v14 >= 0x555555555555555) {
                unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v15 = v11;
              }
              unint64_t v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v15);
              uint64_t v18 = v17;
              uint64_t v19 = &v16[24 * v10];
              size_t v20 = 24 * ((24 * v12 - 24) / 0x18) + 24;
              bzero(v19, v20);
              char v22 = *a2;
              uint64_t v21 = a2[1];
              uint64_t v23 = v19;
              if (v21 != *a2)
              {
                do
                {
                  long long v24 = *(_OWORD *)(v21 - 24);
                  *((void *)v23 - 1) = *((void *)v21 - 1);
                  *(_OWORD *)(v23 - 24) = v24;
                  v23 -= 24;
                  v21 -= 24;
                }
                while (v21 != v22);
                uint64_t v21 = *a2;
              }
              *a2 = v23;
              a2[1] = &v19[v20];
              a2[2] = &v16[24 * v18];
              if (v21) {
                operator delete(v21);
              }
            }
            unsigned int v8 = *a2;
          }
          llvm::yaml::yamlize<llvm::MachO::Target>(a1, (unsigned __int8 *)&v8[24 * v6]);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v27);
        }
        ++v6;
      }
      while (v6 != v7);
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v26);
  }
  return result;
}

uint64_t llvm::yaml::IO::processKey<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2, char **a3, uint64_t a4)
{
  v42[17] = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  char v28 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, a4, 0, &v28, &v29);
  if (result)
  {
    unsigned int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
      uint64_t v8 = ((unint64_t)(a3[1] - *a3) >> 4);
    }
    else {
      uint64_t v8 = v7;
    }
    if (v8)
    {
      for (unint64_t i = 0; i != v8; ++i)
      {
        uint64_t v30 = 0;
        if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 72))(a1, i, &v30))
        {
          unint64_t v10 = *a3;
          unint64_t v11 = a3[1];
          unint64_t v12 = (v11 - *a3) >> 4;
          if (v12 <= i)
          {
            unint64_t v13 = i + 1;
            unint64_t v14 = i + 1 - v12;
            unint64_t v15 = a3[2];
            if (v14 <= (v15 - v11) >> 4)
            {
              bzero(a3[1], 16 * v14);
              a3[1] = &v11[16 * v14];
            }
            else
            {
              uint64_t v16 = v15 - v10;
              if (v16 >> 3 > v13) {
                unint64_t v13 = v16 >> 3;
              }
              if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v17 = v13;
              }
              uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v17);
              uint64_t v20 = v19;
              uint64_t v21 = &v18[16 * v12];
              bzero(v21, 16 * v14);
              uint64_t v23 = *a3;
              char v22 = a3[1];
              long long v24 = v21;
              if (v22 != *a3)
              {
                do
                {
                  *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
                  v24 -= 16;
                  v22 -= 16;
                }
                while (v22 != v23);
                char v22 = *a3;
              }
              *a3 = v24;
              a3[1] = &v21[16 * v14];
              a3[2] = &v18[16 * v20];
              if (v22) {
                operator delete(v22);
              }
            }
            unint64_t v10 = *a3;
          }
          char v25 = &v10[16 * i];
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
          {
            uint64_t v40 = v41;
            *(void *)size_t v41 = v42;
            *(_OWORD *)&v41[8] = xmmword_261E8A720;
            int v33 = 0;
            char v37 = 0;
            uint64_t v38 = 0;
            int v39 = 1;
            uint64_t v35 = 0;
            uint64_t v36 = 0;
            uint64_t v34 = 0;
            size_t v32 = &unk_270DBD758;
            llvm::raw_ostream::SetUnbuffered(&v32);
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v32, *(const void **)v25, *((void *)v25 + 1));
            uint64_t v26 = (unsigned __int8 *)*((void *)v40 + 1);
            v31[0] = *(unsigned __int8 **)v40;
            v31[1] = v26;
            uint64_t v27 = llvm::yaml::needsQuotes(v31[0], (unint64_t)v26);
            (*(void (**)(uint64_t, unsigned __int8 **, uint64_t))(*(void *)a1 + 216))(a1, v31, v27);
            llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v32);
            if (*(void **)v41 != v42) {
              free(*(void **)v41);
            }
          }
          else
          {
            *(void *)size_t v41 = 0;
            *(void *)&v41[8] = 0;
            (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 216))(a1, v41, 1);
            *(_OWORD *)char v25 = *(_OWORD *)v41;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v30);
        }
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v29);
  }
  return result;
}

uint64_t llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (!result || *(void *)a3 != *(void *)(a3 + 8))
  {
    return llvm::yaml::IO::processKey<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>(a1, a2, (char **)a3, 0);
  }
  return result;
}

uint64_t llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD_V4::denormalize(llvm::yaml::IO &)::{lambda(std::vector<anonymous namespace'::SymbolSection> const&,llvm::MachO::SymbolFlags)#1}::operator()(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    uint64_t v7 = result;
    if (a4 == 8) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    uint64_t v9 = v8 | a4;
    uint64_t v10 = a4 | 1;
    do
    {
      uint64_t v11 = v6[17];
      uint64_t v12 = v6[18];
      while (v11 != v12)
      {
        unint64_t v13 = *(const void **)v11;
        size_t v14 = *(void *)(v11 + 8);
        v11 += 16;
        uint64_t result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(void *)(*(void *)v7 + 448), 0, v13, v14, a4, v6);
      }
      uint64_t v15 = v6[20];
      uint64_t v16 = v6[21];
      while (v15 != v16)
      {
        unint64_t v17 = *(const void **)v15;
        size_t v18 = *(void *)(v15 + 8);
        v15 += 16;
        uint64_t result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(void *)(*(void *)v7 + 448), 1, v17, v18, a4, v6);
      }
      uint64_t v19 = v6[23];
      uint64_t v20 = v6[24];
      while (v19 != v20)
      {
        uint64_t v21 = *(const void **)v19;
        size_t v22 = *(void *)(v19 + 8);
        v19 += 16;
        uint64_t result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(void *)(*(void *)v7 + 448), 2, v21, v22, a4, v6);
      }
      uint64_t v23 = v6[26];
      uint64_t v24 = v6[27];
      while (v23 != v24)
      {
        char v25 = *(const void **)v23;
        size_t v26 = *(void *)(v23 + 8);
        v23 += 16;
        uint64_t result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(void *)(*(void *)v7 + 448), 3, v25, v26, a4, v6);
      }
      uint64_t v27 = v6[29];
      uint64_t v28 = v6[30];
      while (v27 != v28)
      {
        uint64_t v29 = *(const void **)v27;
        size_t v30 = *(void *)(v27 + 8);
        v27 += 16;
        uint64_t result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(void *)(*(void *)v7 + 448), 0, v29, v30, v9, v6);
      }
      uint64_t v31 = v6[32];
      uint64_t v32 = v6[33];
      while (v31 != v32)
      {
        int v33 = *(const void **)v31;
        size_t v34 = *(void *)(v31 + 8);
        v31 += 16;
        uint64_t result = llvm::MachO::SymbolSet::addGlobal<llvm::SmallVector<llvm::MachO::Target,5u> &,llvm::MachO::Target>(*(void *)(*(void *)v7 + 448), 0, v33, v34, v10, v6);
      }
      v6 += 35;
    }
    while (v6 != a3);
  }
  return result;
}

void **std::vector<anonymous namespace'::SymbolSection>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    int v4 = v2;
    if (v3 != v2)
    {
      do
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<anonymous namespace'::MetadataSection>::~vector[abi:nn180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 48;
      }
      while ((void *)v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t llvm::yaml::IO::mapOptional<std::vector<anonymous namespace'::ExportSection>>(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  if (!result || *(void *)a2 != *(void *)(a2 + 8))
  {
    uint64_t v19 = 0;
    char v18 = 0;
    uint64_t result = (*(uint64_t (**)(void *, const char *, void, void, char *, uint64_t *))(*a1 + 120))(a1, "exports", 0, 0, &v18, &v19);
    if (result)
    {
      unsigned int v5 = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
      if ((*(unsigned int (**)(void *))(*a1 + 16))(a1)) {
        unsigned int v5 = 1749801491 * ((*(void *)(a2 + 8) - *(void *)a2) >> 3);
      }
      if (v5)
      {
        uint64_t v6 = 0;
        uint64_t v7 = (void *)(a2 + 16);
        uint64_t v8 = 216 * v5;
        unint64_t v9 = 1;
        do
        {
          uint64_t v20 = 0;
          if ((*(unsigned int (**)(void *, unint64_t, uint64_t *))(*a1 + 32))(a1, v9 - 1, &v20))
          {
            uint64_t v10 = *(void *)(a2 + 8);
            unint64_t v11 = 0x84BDA12F684BDA13 * ((v10 - *(void *)a2) >> 3);
            if (v11 <= v9 - 1)
            {
              if (0x84BDA12F684BDA13 * ((*v7 - v10) >> 3) >= v9 - v11)
              {
                bzero(*(void **)(a2 + 8), v6 - 8 * ((v10 - *(void *)a2) >> 3) - (v6 - 8 * ((v10 - *(void *)a2) >> 3)) % 0xD8uLL + 216);
                *(void *)(a2 + 8) = v10 + v6 - 216 * v11 - (v6 - 216 * v11) % 0xD8 + 216;
              }
              else
              {
                unint64_t v12 = 0x97B425ED097B426 * ((uint64_t)(*v7 - *(void *)a2) >> 3);
                if (v12 <= v9) {
                  unint64_t v12 = v9;
                }
                if (0x84BDA12F684BDA13 * ((uint64_t)(*v7 - *(void *)a2) >> 3) >= 0x97B425ED097B42) {
                  unint64_t v13 = 0x12F684BDA12F684;
                }
                else {
                  unint64_t v13 = v12;
                }
                size_t v14 = (char *)v22;
                bzero(v22, v6 - 216 * v11 - (v6 - 216 * v11) % 0xD8 + 216);
                size_t v22 = &v14[v6 - 216 * v11 - (v6 - 216 * v11) % 0xD8 + 216];
              }
            }
            uint64_t v15 = (char **)(*(void *)a2 + v6);
            (*(void (**)(void *))(*a1 + 104))(a1);
            uint64_t v16 = a1[1];
            llvm::yaml::IO::processKey<std::vector<llvm::MachO::Architecture>,llvm::yaml::EmptyContext>((uint64_t)a1, v15);
            if (*(_DWORD *)(v16 + 48) == 8) {
              unint64_t v17 = "allowed-clients";
            }
            else {
              unint64_t v17 = "allowable-clients";
            }
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)v17, (uint64_t)(v15 + 3));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"re-exports", (uint64_t)(v15 + 6));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"symbols", (uint64_t)(v15 + 9));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"objc-classes", (uint64_t)(v15 + 12));
            if (*(_DWORD *)(v16 + 48) == 32) {
              llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"objc-eh-types", (uint64_t)(v15 + 15));
            }
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"objc-ivars", (uint64_t)(v15 + 18));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"weak-def-symbols", (uint64_t)(v15 + 21));
            llvm::yaml::IO::mapOptionalWithContext<std::vector<FlowStringRef>,llvm::yaml::EmptyContext>((uint64_t)a1, (uint64_t)"thread-local-symbols", (uint64_t)(v15 + 24));
            (*(void (**)(void *))(*a1 + 112))(a1);
            (*(void (**)(void *, uint64_t))(*a1 + 40))(a1, v20);
          }
          ++v9;
          v6 += 216;
        }
        while (v8 != v6);
      }
      (*(void (**)(void *))(*a1 + 48))(a1);
      return (*(uint64_t (**)(void *, uint64_t))(*a1 + 128))(a1, v19);
    }
  }
  return result;
}

void anonymous namespace'::ExportSection::~ExportSection(_anonymous_namespace_::ExportSection *this)
{
  uint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  unsigned int v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    *((void *)this + 16) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 12);
  if (v6)
  {
    *((void *)this + 13) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 9);
  if (v7)
  {
    *((void *)this + 10) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    *((void *)this + 7) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 3);
  if (v9)
  {
    *((void *)this + 4) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v10;
    operator delete(v10);
  }
}

uint64_t *std::__tree<llvm::MachO::ArchitectureSet>::__emplace_unique_key_args<llvm::MachO::ArchitectureSet,llvm::MachO::ArchitectureSet>(uint64_t *result, unsigned int a2, int a3)
{
  int v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  unsigned int v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    unint64_t v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::__map_value_compare<llvm::MachO::Symbol const*,std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>,std::less<llvm::MachO::Symbol const*>,true>,std::allocator<std::__value_type<llvm::MachO::Symbol const*,llvm::MachO::ArchitectureSet>>>::__emplace_unique_key_args<llvm::MachO::Symbol const*,std::piecewise_construct_t const&,std::tuple<llvm::MachO::Symbol const* const&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  unsigned int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    void v7[4] = *a3;
    *((_DWORD *)v7 + 10) = 0;
    void *v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    void *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    unint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

__n128 std::allocator_traits<std::allocator<anonymous namespace'::ExportSection>>::construct[abi:nn180100]<anonymous namespace'::ExportSection,anonymous namespace'::ExportSection,void>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  a1[20] = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 168);
  a1[23] = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  __n128 result = *(__n128 *)(a2 + 192);
  *((__n128 *)a1 + 12) = result;
  a1[26] = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  return result;
}

void *std::__split_buffer<anonymous namespace'::ExportSection>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x12F684BDA12F685) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v7 = (char *)operator new(216 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[216 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[216 * a2];
  return a1;
}

void std::vector<anonymous namespace'::ExportSection>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (void *)a2[1];
  while (v4 != v5)
  {
    v6 -= 27;
    v4 -= 216;
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<anonymous namespace'::ExportSection>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::allocator_traits<std::allocator<anonymous namespace'::UndefinedSection>>::construct[abi:nn180100]<anonymous namespace'::UndefinedSection,anonymous namespace'::UndefinedSection,void>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 15) = result;
  a1[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  return result;
}

void *std::__split_buffer<anonymous namespace'::UndefinedSection>::__split_buffer(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0x1C71C71C71C71C8) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v7 = (char *)operator new(144 * a2);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[144 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[144 * a2];
  return a1;
}

void std::vector<anonymous namespace'::UndefinedSection>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (void *)a2[1];
  while (v4 != v5)
  {
    v6 -= 18;
    v4 -= 144;
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<anonymous namespace'::UndefinedSection>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator_traits<std::allocator<anonymous namespace'::UndefinedSection>>::destroy[abi:nn180100]<anonymous namespace'::UndefinedSection,void>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
}

uint64_t llvm::yaml::IO::processKey<std::vector<llvm::MachO::Architecture>,llvm::yaml::EmptyContext>(uint64_t a1, char **a2)
{
  v40[16] = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  char v25 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, void, char *, uint64_t *))(*(void *)a1 + 120))(a1, "archs", 1, 0, &v25, &v26);
  if (result)
  {
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
      uint64_t v6 = (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    }
    else {
      uint64_t v6 = v5;
    }
    if (v6)
    {
      unint64_t v7 = 0;
      uint64_t v24 = v6;
      while (1)
      {
        uint64_t v27 = 0;
        if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(void *)a1 + 72))(a1, v7, &v27)) {
          break;
        }
LABEL_28:
        if (++v7 == v6) {
          goto LABEL_29;
        }
      }
      unint64_t v8 = (unint64_t)*a2;
      uint64_t v9 = a2[1];
      uint64_t v10 = (char *)(v9 - *a2);
      if ((unint64_t)v10 <= v7)
      {
        unint64_t v11 = v7 + 1;
        size_t v12 = v7 + 1 - (void)v10;
        unint64_t v13 = (unsigned __int8 *)a2[2];
        if (v13 - (unsigned __int8 *)v9 < v12)
        {
          unint64_t v14 = (unint64_t)&v13[-v8];
          uint64_t v15 = 2 * v14;
          if (2 * v14 <= v11) {
            uint64_t v15 = v7 + 1;
          }
          if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v16 = v15;
          }
          unint64_t v17 = (unsigned __int8 *)operator new(v16);
          char v18 = &v10[(void)v17];
          bzero(v18, v12);
          if (v9 != (char *)v8)
          {
            uint64_t v19 = &v9[~v8];
            do
            {
              char v20 = *--v9;
              (v19--)[(void)v17] = v20;
            }
            while (v9 != (char *)v8);
            char v18 = (char *)v17;
          }
          *a2 = v18;
          a2[1] = (char *)&v17[v11];
          a2[2] = (char *)&v17[v16];
          uint64_t v6 = v24;
          if (v8)
          {
            operator delete((void *)v8);
            char v18 = *a2;
          }
          goto LABEL_23;
        }
        bzero(a2[1], v7 + 1 - (void)v10);
        a2[1] = &v9[v12];
      }
      char v18 = (char *)v8;
LABEL_23:
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1))
      {
        char v37 = &v38;
        uint64_t v38 = v40;
        long long v39 = xmmword_261E8A720;
        int v30 = 0;
        char v34 = 0;
        uint64_t v35 = 0;
        int v36 = 1;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v31 = 0;
        uint64_t v29 = &unk_270DBD758;
        llvm::raw_ostream::SetUnbuffered(&v29);
        Architectureuint64_t Name = llvm::MachO::getArchitectureName(v18[v7]);
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v29, ArchitectureName, v22);
        uint64_t v23 = v37[1];
        v28[0] = *v37;
        v28[1] = v23;
        (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 216))(a1, v28, 0);
        llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v29);
        if (v38 != v40) {
          free(v38);
        }
      }
      else
      {
        uint64_t v38 = 0;
        *(void *)&long long v39 = 0;
        (*(void (**)(uint64_t, void **, void))(*(void *)a1 + 216))(a1, &v38, 0);
        v18[v7] = llvm::MachO::getArchitectureFromName((uint64_t)v38, v39);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v27);
      goto LABEL_28;
    }
LABEL_29:
    (*(void (**)(uint64_t))(*(void *)a1 + 88))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v26);
  }
  return result;
}

uint64_t llvm::yaml::IO::processKey<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,llvm::yaml::EmptyContext>(uint64_t *a1, uint64_t **a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  char v8 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t *, const char *, uint64_t, void, char *, uint64_t *))(*a1 + 120))(a1, "platform", 1, 0, &v8, &v9);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
    {
      uint64_t v19 = &v20;
      char v20 = v22;
      long long v21 = xmmword_261E8A720;
      LODWORD(v12) = 0;
      char v16 = 0;
      uint64_t v17 = 0;
      int v18 = 1;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = 0;
      unint64_t v11 = (unsigned __int16 *)&unk_270DBD758;
      llvm::raw_ostream::SetUnbuffered(&v11);
      llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::output(a2, a1[1], (llvm::raw_ostream *)&v11);
      unsigned int v5 = v19[1];
      v10[0] = *v19;
      v10[1] = v5;
      (*(void (**)(uint64_t *, void *, void))(*a1 + 216))(a1, v10, 0);
      llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v11);
      if (v20 != v22) {
        free(v20);
      }
    }
    else
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      (*(void (**)(uint64_t *, unsigned __int16 **, void))(*a1 + 216))(a1, &v11, 0);
      uint64_t v6 = (char *)llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::input(v11, v12, a1[1], a2);
      if (v7)
      {
        void v22[4] = 261;
        char v20 = v6;
        *(void *)&long long v21 = v7;
        (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &v20);
      }
    }
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v9);
  }
  return result;
}

void *llvm::yaml::MappingTraits<llvm::MachO::InterfaceFile const*>::NormalizedTBD::synthesizeTargets(void *result, unsigned int a2, uint64_t a3)
{
  *uint64_t result = result + 2;
  result[1] = 0x500000000;
  uint64_t v3 = *(void *)(a3 + 48);
  if (v3) {
    uint64_t v4 = *(void **)(a3 + 32);
  }
  else {
    uint64_t v4 = *(void **)a3;
  }
  if (v3) {
    uint64_t v5 = a3 + 40;
  }
  else {
    uint64_t v5 = *(void *)a3 + 4 * *(unsigned int *)(a3 + 8);
  }
  if (v4 != (void *)v5)
  {
    char v6 = a2;
    uint64_t v7 = (uint64_t)result;
    unsigned int v8 = 0;
    unint64_t v9 = a2;
    if ((a2 & 7) != 0) {
      int v10 = 9;
    }
    else {
      int v10 = 4;
    }
    if ((a2 & 7) != 0) {
      int v11 = 8;
    }
    else {
      int v11 = 3;
    }
    if ((a2 & 7) != 0) {
      int v12 = 7;
    }
    else {
      int v12 = 2;
    }
    uint64_t v13 = &v34;
    do
    {
      uint64_t v14 = (int *)v4 + 7;
      if (!v3) {
        uint64_t v14 = (int *)v4;
      }
      int v15 = *v14;
      if (v15 == 4)
      {
        int v16 = v10;
        if ((v6 & 1) == 0) {
          goto LABEL_26;
        }
      }
      else
      {
        int v16 = v11;
        if (v15 != 3)
        {
          if (v15 == 2) {
            int v16 = v12;
          }
          else {
            int v16 = v15;
          }
        }
        if ((v6 & 1) == 0)
        {
LABEL_26:
          uint64_t v17 = 0;
          while (v17 != 31)
          {
            uint64_t v18 = v17 + 1;
            unint64_t v19 = v9 >> v17++;
            if ((v19 & 2) != 0)
            {
              if (v18 != 0xFFFFFFFFLL) {
                goto LABEL_42;
              }
              goto LABEL_30;
            }
          }
          goto LABEL_30;
        }
      }
      LODWORD(v18) = 0;
LABEL_42:
      if ((_BYTE)v18 || v16 != 6)
      {
        if (v8 >= *(_DWORD *)(v7 + 12))
        {
          v32[0] = v18;
          int v33 = v16;
          *uint64_t v13 = 0;
          v13[1] = 0;
          int v30 = v12;
          int v31 = v10;
          uint64_t v29 = v13;
          uint64_t result = (void *)llvm::SmallVectorTemplateCommon<llvm::MachO::Target,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::MachO::Target,true>>(v7, (unint64_t)v32, 1);
          uint64_t v13 = v29;
          int v12 = v30;
          int v10 = v31;
          uint64_t v27 = *(void *)v7 + 24 * *(unsigned int *)(v7 + 8);
          long long v28 = *(_OWORD *)result;
          *(void *)(v27 + 16) = result[2];
          *(_OWORD *)uint64_t v27 = v28;
        }
        else
        {
          uint64_t v23 = *(void *)v7 + 24 * v8;
          *(unsigned char *)uint64_t v23 = v18;
          *(_DWORD *)(v23 + 4) = v16;
          *(void *)(v23 + 8) = 0;
          *(void *)(v23 + 16) = 0;
        }
        unsigned int v8 = *(_DWORD *)(v7 + 8) + 1;
        *(_DWORD *)(v7 + 8) = v8;
      }
      uint64_t v24 = v18;
      if (v18 <= 0x1FuLL) {
        uint64_t v25 = 31;
      }
      else {
        uint64_t v25 = v18;
      }
      while (v25 != v24)
      {
        LODWORD(v18) = v24 + 1;
        unint64_t v26 = v9 >> v24++;
        if ((v26 & 2) != 0)
        {
          if (v18 != -1) {
            goto LABEL_42;
          }
          break;
        }
      }
LABEL_30:
      if (v3)
      {
        char v20 = (void *)v4[1];
        if (v20)
        {
          do
          {
            long long v21 = v20;
            char v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            long long v21 = (void *)v4[2];
            BOOL v22 = *v21 == (void)v4;
            uint64_t v4 = v21;
          }
          while (!v22);
        }
      }
      else
      {
        long long v21 = (void *)((char *)v4 + 4);
      }
      uint64_t v4 = v21;
    }
    while (v21 != (void *)v5);
  }
  return result;
}

void std::__shared_ptr_pointer<llvm::MachO::InterfaceFile *,std::shared_ptr<llvm::MachO::InterfaceFile>::__shared_ptr_default_delete<llvm::MachO::InterfaceFile,llvm::MachO::InterfaceFile>,std::allocator<llvm::MachO::InterfaceFile>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x263E500B0);
}

llvm::MachO::InterfaceFile *std::__shared_ptr_pointer<llvm::MachO::InterfaceFile *,std::shared_ptr<llvm::MachO::InterfaceFile>::__shared_ptr_default_delete<llvm::MachO::InterfaceFile,llvm::MachO::InterfaceFile>,std::allocator<llvm::MachO::InterfaceFile>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(llvm::MachO::InterfaceFile **)(a1 + 24);
  if (result)
  {
    llvm::MachO::InterfaceFile::~InterfaceFile(result);
    JUMPOUT(0x263E500B0);
  }
  return result;
}

uint64_t llvm::yaml::ScalarEnumerationTraits<llvm::MachO::ObjCConstraintType,void>::enumeration(uint64_t a1, _DWORD *a2)
{
  llvm::yaml::IO::enumCase<llvm::MachO::ObjCConstraintType>(a1, a2, (uint64_t)"none", 0);
  llvm::yaml::IO::enumCase<llvm::MachO::ObjCConstraintType>(a1, a2, (uint64_t)"retain_release", 1);
  llvm::yaml::IO::enumCase<llvm::MachO::ObjCConstraintType>(a1, a2, (uint64_t)"retain_release_for_simulator", 2);
  llvm::yaml::IO::enumCase<llvm::MachO::ObjCConstraintType>(a1, a2, (uint64_t)"retain_release_or_gc", 3);
  return llvm::yaml::IO::enumCase<llvm::MachO::ObjCConstraintType>(a1, a2, (uint64_t)"gc", 4);
}

uint64_t llvm::yaml::IO::enumCase<llvm::MachO::ObjCConstraintType>(uint64_t a1, _DWORD *a2, uint64_t a3, int a4)
{
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (*a2 == a4) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 168))(a1, a3, v9);
  if (result) {
    *a2 = a4;
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::output(void *a1, uint64_t a2, llvm::raw_ostream *this)
{
  if (a2
    && *(_DWORD *)(a2 + 48) == 32
    && (int v13 = 1,
        llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::count((uint64_t)a1, &v13))
    && (int v12 = 6,
        llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::count((uint64_t)a1, &v12)))
  {
    uint64_t v5 = "zippered";
LABEL_16:
    size_t v10 = 8;
  }
  else
  {
    uint64_t v6 = a1[6];
    BOOL v7 = v6 == 0;
    if (v6) {
      unsigned int v8 = (_DWORD *)a1[4];
    }
    else {
      unsigned int v8 = (_DWORD *)*a1;
    }
    uint64_t v9 = v8 + 7;
    if (v7) {
      uint64_t v9 = (_DWORD *)*a1;
    }
    uint64_t v5 = "macosx";
    size_t v10 = 6;
    switch(*v9)
    {
      case 2:
      case 7:
        uint64_t v5 = "ios";
        size_t v10 = 3;
        break;
      case 3:
      case 8:
        uint64_t v5 = "tvos";
        size_t v10 = 4;
        break;
      case 4:
      case 9:
        uint64_t v5 = "watchos";
        size_t v10 = 7;
        break;
      case 5:
        uint64_t v5 = "bridgeos";
        goto LABEL_16;
      case 6:
        uint64_t v5 = "maccatalyst";
        size_t v10 = 11;
        break;
      case 0xA:
        uint64_t v5 = "driverkit";
        size_t v10 = 9;
        break;
      default:
        return llvm::raw_ostream::operator<<(this, v5, v10);
    }
  }
  return llvm::raw_ostream::operator<<(this, v5, v10);
}

const char *llvm::yaml::ScalarTraits<llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>,void>::input(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  if (a2 == 8)
  {
    if (*(void *)a1 != 0x646572657070697ALL)
    {
      if (*(void *)a1 != 0x736F656764697262) {
        return "unknown platform";
      }
      int v10 = 5;
LABEL_16:
      int v27 = v10;
LABEL_17:
      int v11 = &v25;
      goto LABEL_18;
    }
    if (a3 && *(_DWORD *)(a3 + 48) == 32)
    {
      int v27 = 1;
      llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::insert(a4, &v27, (uint64_t)v28);
      int v27 = 6;
      int v11 = (uint64_t *)&v26;
LABEL_18:
      llvm::SmallSet<llvm::MachO::PlatformType,3u,std::less<llvm::MachO::PlatformType>>::insert(a4, &v27, (uint64_t)v11);
      return 0;
    }
    return "invalid platform";
  }
  else
  {
    uint64_t result = "unknown platform";
    switch(a2)
    {
      case 3:
        int v7 = *a1;
        int v8 = *((unsigned __int8 *)a1 + 2);
        if (v7 == 28521 && v8 == 115)
        {
          int v10 = 2;
          goto LABEL_16;
        }
        break;
      case 4:
        if (*(_DWORD *)a1 == 1936684660)
        {
          int v10 = 3;
          goto LABEL_16;
        }
        break;
      case 6:
        if (*(_DWORD *)a1 == 1868783981 && a1[2] == 30835)
        {
          int v10 = 1;
          goto LABEL_16;
        }
        int v13 = *(_DWORD *)a1;
        int v14 = a1[2];
        if (v13 == 1836281705 && v14 == 25441) {
          goto LABEL_48;
        }
        break;
      case 7:
        int v16 = *(_DWORD *)a1;
        int v17 = *(_DWORD *)((char *)a1 + 3);
        if (v16 == 1668571511 && v17 == 1936681059)
        {
          int v10 = 4;
          goto LABEL_16;
        }
        break;
      case 9:
        uint64_t v19 = *(void *)a1;
        int v20 = *((unsigned __int8 *)a1 + 8);
        if (v19 == 0x696B726576697264 && v20 == 116)
        {
          int v10 = 10;
          goto LABEL_16;
        }
        break;
      case 11:
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void *)((char *)a1 + 3);
        if (v22 == 0x6C6174616363616DLL && v23 == 0x7473796C61746163)
        {
LABEL_48:
          int v27 = 6;
          if (!a3 || *(_DWORD *)(a3 + 48) == 32) {
            goto LABEL_17;
          }
          return "invalid platform";
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<SwiftVersion,void>::output(llvm::raw_ostream *result, int a2, llvm::raw_ostream *this)
{
  switch(*(unsigned char *)result)
  {
    case 1:
      uint64_t v3 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v3) <= 2)
      {
        uint64_t v4 = "1.0";
        return llvm::raw_ostream::write(this, v4, 3uLL);
      }
      char v5 = 48;
      goto LABEL_16;
    case 2:
      uint64_t v3 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v3) <= 2)
      {
        uint64_t v4 = "1.1";
        return llvm::raw_ostream::write(this, v4, 3uLL);
      }
      char v5 = 49;
LABEL_16:
      *(unsigned char *)(v3 + 2) = v5;
      __int16 v6 = 11825;
      goto LABEL_17;
    case 3:
      uint64_t v3 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v3) <= 2)
      {
        uint64_t v4 = "2.0";
        return llvm::raw_ostream::write(this, v4, 3uLL);
      }
      *(unsigned char *)(v3 + 2) = 48;
      __int16 v6 = 11826;
      goto LABEL_17;
    case 4:
      uint64_t v3 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v3) > 2)
      {
        *(unsigned char *)(v3 + 2) = 48;
        __int16 v6 = 11827;
LABEL_17:
        *(_WORD *)uint64_t v3 = v6;
        *((void *)this + 4) += 3;
      }
      else
      {
        uint64_t v4 = "3.0";
        return llvm::raw_ostream::write(this, v4, 3uLL);
      }
      return result;
    default:
      return write_unsigned<unsigned long>(this, *(unsigned __int8 *)result, 0, 0, 0);
  }
}

const char *llvm::yaml::ScalarTraits<SwiftVersion,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*(_DWORD *)(a3 + 48) != 64)
  {
    if (a2 == 3)
    {
      if (*(_WORD *)a1 == 11825 && *(unsigned char *)(a1 + 2) == 48)
      {
        char v10 = 1;
      }
      else if (*(_WORD *)a1 == 11825 && *(unsigned char *)(a1 + 2) == 49)
      {
        char v10 = 2;
      }
      else if (*(_WORD *)a1 == 11826 && *(unsigned char *)(a1 + 2) == 48)
      {
        char v10 = 3;
      }
      else
      {
        if (*(_WORD *)a1 != 11827 || *(unsigned char *)(a1 + 2) != 48) {
          goto LABEL_19;
        }
        char v10 = 4;
      }
      uint64_t result = 0;
      *(unsigned char *)a4 = v10;
      return result;
    }
LABEL_19:
    *(unsigned char *)a4 = 0;
  }
  unint64_t v11 = 0;
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  if ((llvm::consumeUnsignedInteger((llvm *)&v12, (llvm::StringRef *)0xA, &v11, a4) & 1) != 0 || v13 || v11 >= 0x100) {
    return "invalid Swift ABI version.";
  }
  uint64_t result = 0;
  *(unsigned char *)a4 = v11;
  return result;
}

uint64_t _GLOBAL__sub_I_InstrProf_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&_MergedGlobals_31, 0, 0);
  byte_26B41C650 = 0;
  qword_26B41C658 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41C660 = 0;
  _MergedGlobals_31 = (uint64_t)&unk_270DBC910;
  qword_26B41C668 = (uint64_t)&unk_270DBC658;
  qword_26B41C670 = (uint64_t)&unk_270DBC998;
  qword_26B41C688 = (uint64_t)&qword_26B41C670;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"static-func-full-module-prefix", 0x1EuLL);
  byte_26B41C650 = 1;
  word_26B41C660 = 257;
  word_26B41C5DA = word_26B41C5DA & 0xFF9F | 0x20;
  qword_26B41C5F0 = (uint64_t)"Use full module build paths in the profile counter names for static functions.";
  unk_26B41C5F8 = 78;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&_MergedGlobals_31);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &_MergedGlobals_31, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&qword_26B41C690, 0, 0);
  dword_26B41C710 = 0;
  qword_26B41C718 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41C720 = 0;
  qword_26B41C690 = (uint64_t)&unk_270DBC7D8;
  qword_26B41C728 = (uint64_t)&unk_270DBC6E8;
  qword_26B41C730 = (uint64_t)&unk_270DBFE18;
  qword_26B41C748 = (uint64_t)&qword_26B41C730;
  llvm::cl::Option::setArgStr((uint64_t)&qword_26B41C690, (uint64_t *)"static-func-strip-dirname-prefix", 0x20uLL);
  dword_26B41C710 = 0;
  byte_26B41C724 = 1;
  dword_26B41C720 = 0;
  word_26B41C69A = word_26B41C69A & 0xFF9F | 0x20;
  qword_26B41C6B0 = (uint64_t)"Strip specified level of directory name from source path in the profile counter name for static functions.";
  unk_26B41C6B8 = 106;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41C690);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &qword_26B41C690, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)qword_26B41C750, 0, 0);
  byte_26B41C7D0 = 0;
  qword_26B41C7E0 = 0;
  qword_26B41C7D8 = (uint64_t)&unk_270DBC978;
  qword_26B41C750[0] = (uint64_t)&unk_270DBC910;
  qword_26B41C7E8 = (uint64_t)&unk_270DBC658;
  qword_26B41C7F0 = (uint64_t)&unk_270DBC998;
  qword_26B41C808 = (uint64_t)&qword_26B41C7F0;
  llvm::cl::Option::setArgStr((uint64_t)qword_26B41C750, (uint64_t *)"enable-name-compression", 0x17uLL);
  qword_26B41C770 = (uint64_t)"Enable name/filename string compression";
  unk_26B41C778 = 39;
  byte_26B41C7D0 = 1;
  LOWORD(qword_26B41C7E0) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_26B41C750);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, qword_26B41C750, &dword_261C2B000);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned int,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6)
{
  unint64_t v12 = a2;
  uint64_t v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  unint64_t v13 = v12;
  char v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

uint64_t _GLOBAL__sub_I_ProfileSummaryBuilder_cpp()
{
  int v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Merge context profiles before calculating thresholds.";
  v3.n128_u64[1] = 53;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::OptionHidden,llvm::cl::desc>((llvm::cl::Option *)&llvm::UseContextLessSummary, "profile-summary-contextless", &v4, &v3);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &llvm::UseContextLessSummary, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryCutoffHot, 0, 0);
  dword_26B41F968 = 0;
  qword_26B41F970 = (uint64_t)&unk_270DBCA20;
  *(void *)&dword_26B41F978 = 0;
  llvm::ProfileSummaryCutoffHot = (uint64_t)&unk_270DBC840;
  qword_26B41F980 = (uint64_t)&unk_270DBC6B8;
  qword_26B41F988 = (uint64_t)&unk_270DBFE60;
  qword_26B41F9A0 = (uint64_t)&qword_26B41F988;
  llvm::cl::Option::setArgStr((uint64_t)&llvm::ProfileSummaryCutoffHot, (uint64_t *)"profile-summary-cutoff-hot", 0x1AuLL);
  word_26B41F8F2 = word_26B41F8F2 & 0xFF9F | 0x20;
  dword_26B41F968 = 990000;
  byte_26B41F97C = 1;
  dword_26B41F978 = 990000;
  qword_26B41F908 = (uint64_t)"A count is hot if it exceeds the minimum count to reach this percentile of total counts.";
  unk_26B41F910 = 88;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryCutoffHot);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &llvm::ProfileSummaryCutoffHot, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryCutoffCold, 0, 0);
  dword_26B41FA28 = 0;
  qword_26B41FA30 = (uint64_t)&unk_270DBCA20;
  *(void *)&dword_26B41FA38 = 0;
  llvm::ProfileSummaryCutoffCold = (uint64_t)&unk_270DBC840;
  qword_26B41FA40 = (uint64_t)&unk_270DBC6B8;
  qword_26B41FA48 = (uint64_t)&unk_270DBFE60;
  qword_26B41FA60 = (uint64_t)&qword_26B41FA48;
  llvm::cl::Option::setArgStr((uint64_t)&llvm::ProfileSummaryCutoffCold, (uint64_t *)"profile-summary-cutoff-cold", 0x1BuLL);
  word_26B41F9B2 = word_26B41F9B2 & 0xFF9F | 0x20;
  dword_26B41FA28 = 999999;
  byte_26B41FA3C = 1;
  dword_26B41FA38 = 999999;
  qword_26B41F9C8 = (uint64_t)"A count is cold if it is below the minimum count to reach this percentile of total counts.";
  unk_26B41F9D0 = 90;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryCutoffCold);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt, &llvm::ProfileSummaryCutoffCold, &dword_261C2B000);
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryHugeWorkingSetSizeThreshold, 0, 0);
  dword_26B41FF48 = 0;
  qword_26B41FF50 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B41FF58 = 0;
  llvm::ProfileSummaryHugeWorkingSetSizeThreshold = (uint64_t)&unk_270DBC7D8;
  qword_26B41FF60 = (uint64_t)&unk_270DBC6E8;
  qword_26B41FF68 = (uint64_t)&unk_270DBFE18;
  qword_26B41FF80 = (uint64_t)&qword_26B41FF68;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"profile-summary-huge-working-set-size-threshold", 0x2FuLL);
  word_26B41FED2 = word_26B41FED2 & 0xFF9F | 0x20;
  dword_26B41FF48 = 15000;
  byte_26B41FF5C = 1;
  dword_26B41FF58 = 15000;
  qword_26B41FEE8 = (uint64_t)"The code working set size is considered huge if the number of blocks required to reach the "
                             "-profile-summary-cutoff-hot percentile exceeds this count.";
  unk_26B41FEF0 = 149;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryHugeWorkingSetSizeThreshold);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::ProfileSummaryHugeWorkingSetSizeThreshold, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryLargeWorkingSetSizeThreshold, 0, 0);
  dword_26B420008 = 0;
  qword_26B420010 = (uint64_t)&unk_270DBCA00;
  *(void *)&dword_26B420018 = 0;
  llvm::ProfileSummaryLargeWorkingSetSizeThreshold = (uint64_t)&unk_270DBC7D8;
  qword_26B420020 = (uint64_t)&unk_270DBC6E8;
  qword_26B420028 = (uint64_t)&unk_270DBFE18;
  qword_26B420040 = (uint64_t)&qword_26B420028;
  llvm::cl::Option::setArgStr((uint64_t)&llvm::ProfileSummaryLargeWorkingSetSizeThreshold, (uint64_t *)"profile-summary-large-working-set-size-threshold", 0x30uLL);
  word_26B41FF92 = word_26B41FF92 & 0xFF9F | 0x20;
  dword_26B420008 = 12500;
  byte_26B42001C = 1;
  dword_26B420018 = 12500;
  qword_26B41FFA8 = (uint64_t)"The code working set size is considered large if the number of blocks required to reach the"
                             " -profile-summary-cutoff-hot percentile exceeds this count.";
  unk_26B41FFB0 = 150;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryLargeWorkingSetSizeThreshold);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt, &llvm::ProfileSummaryLargeWorkingSetSizeThreshold, &dword_261C2B000);
  uint64_t v1 = llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryHotCount, 0, 0);
  xmmword_26B41F718 = 0u;
  unk_26B41F728 = 0u;
  *((void *)&xmmword_26B41F718 + 1) = &unk_270DBCFB8;
  llvm::ProfileSummaryHotCount = (uint64_t)&unk_270DBCF50;
  qword_26B41F738 = (uint64_t)&unk_270DBC718;
  qword_26B41F740 = (uint64_t)&unk_270DBCFD8;
  qword_26B41F758 = (uint64_t)&qword_26B41F740;
  llvm::cl::Option::setArgStr(v1, (uint64_t *)"profile-summary-hot-count", 0x19uLL);
  word_26B41F6A2 = word_26B41F6A2 & 0xFF9F | 0x40;
  qword_26B41F6B8 = (uint64_t)"A fixed hot count that overrides the count derived from profile-summary-cutoff-hot";
  unk_26B41F6C0 = 82;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryHotCount);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt, &llvm::ProfileSummaryHotCount, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)&llvm::ProfileSummaryColdCount, 0, 0);
  xmmword_26B41F8A0 = 0u;
  unk_26B41F8B0 = 0u;
  *((void *)&xmmword_26B41F8A0 + 1) = &unk_270DBCFB8;
  llvm::ProfileSummaryColdCount = (uint64_t)&unk_270DBCF50;
  qword_26B41F8C0 = (uint64_t)&unk_270DBC718;
  qword_26B41F8C8 = (uint64_t)&unk_270DBCFD8;
  qword_26B41F8E0 = (uint64_t)&qword_26B41F8C8;
  llvm::cl::Option::setArgStr((uint64_t)&llvm::ProfileSummaryColdCount, (uint64_t *)"profile-summary-cold-count", 0x1AuLL);
  word_26B41F82A = word_26B41F82A & 0xFF9F | 0x40;
  qword_26B41F840 = (uint64_t)"A fixed cold count that overrides the count derived from profile-summary-cutoff-cold";
  unk_26B41F848 = 84;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ProfileSummaryColdCount);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt, &llvm::ProfileSummaryColdCount, &dword_261C2B000);
}

uint64_t _GLOBAL__sub_I_SampleProf_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&qword_26B41C8D0, 0, 0);
  xmmword_26B41C950 = 0u;
  *(_OWORD *)&qword_26B41C960 = 0u;
  *((void *)&xmmword_26B41C950 + 1) = &unk_270DBCFB8;
  qword_26B41C8D0 = (uint64_t)&unk_270DBCF50;
  qword_26B41C970 = (uint64_t)&unk_270DBC718;
  qword_26B41C978 = (uint64_t)&unk_270DBCFD8;
  qword_26B41C990 = (uint64_t)&qword_26B41C978;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"profile-symbol-list-cutoff", 0x1AuLL);
  word_26B41C8DA = word_26B41C8DA & 0xFF9F | 0x20;
  *(void *)&xmmword_26B41C950 = -1;
  byte_26B41C968 = 1;
  qword_26B41C960 = -1;
  qword_26B41C8F0 = (uint64_t)"Cutoff value about how many symbols in profile symbol list will be used. This is very usefu"
                             "l for performance debugging";
  unk_26B41C8F8 = 118;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_26B41C8D0);
  __cxa_atexit((void (*)(void *))llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt, &qword_26B41C8D0, &dword_261C2B000);
  llvm::cl::Option::Option((uint64_t)_MergedGlobals_32, 0, 0);
  byte_26B41C890 = 0;
  qword_26B41C898 = (uint64_t)&unk_270DBC978;
  unk_26B41C8A0 = 0;
  _MergedGlobals_32[0] = (uint64_t)&unk_270DBC910;
  qword_26B41C8A8 = (uint64_t)&unk_270DBC658;
  qword_26B41C8B0 = (uint64_t)&unk_270DBC998;
  qword_26B41C8C8 = (uint64_t)&qword_26B41C8B0;
  llvm::cl::Option::setArgStr((uint64_t)_MergedGlobals_32, (uint64_t *)"generate-merged-base-profiles", 0x1DuLL);
  qword_26B41C830 = (uint64_t)"When generating nested context-sensitive profiles, always generate extra base profile for f"
                             "unction with all its context profiles merged into it.";
  unk_26B41C838 = 144;
  llvm::cl::Option::addArgument((llvm::cl::Option *)_MergedGlobals_32);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, _MergedGlobals_32, &dword_261C2B000);
}

uint64_t _GLOBAL__sub_I_SampleProfReader_cpp()
{
  uint64_t v0 = llvm::cl::Option::Option((uint64_t)&ProfileIsFSDisciminator, 0, 0);
  byte_26B41E510 = 0;
  qword_26B41E518 = (uint64_t)&unk_270DBC978;
  *(void *)&word_26B41E520 = 0;
  ProfileIsFSDisciminator = (uint64_t)&unk_270DBC910;
  qword_26B41E528 = (uint64_t)&unk_270DBC658;
  qword_26B41E530 = (uint64_t)&unk_270DBC998;
  qword_26B41E548 = (uint64_t)&qword_26B41E530;
  llvm::cl::Option::setArgStr(v0, (uint64_t *)"profile-isfs", 0xCuLL);
  word_26B41E49A = word_26B41E49A & 0xFF9F | 0x20;
  byte_26B41E510 = 0;
  word_26B41E520 = 256;
  qword_26B41E4B0 = (uint64_t)"Profile uses flow sensitive discriminators";
  unk_26B41E4B8 = 42;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&ProfileIsFSDisciminator);
  return __cxa_atexit((void (*)(void *))llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt, &ProfileIsFSDisciminator, &dword_261C2B000);
}

llvm::CallBase **llvm::AbstractCallSite::AbstractCallSite(llvm::CallBase **a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 < 0x1C)
  {
    *a1 = 0;
    a1[1] = (llvm::CallBase *)(a1 + 3);
    char v10 = (unsigned int *)(a1 + 1);
    a1[2] = 0;
    if (v4 != 5) {
      return a1;
    }
    uint64_t v9 = *(void *)(v3 + 8);
    if (!v9) {
      return a1;
    }
    if (*(void *)(v9 + 8)) {
      return a1;
    }
    if (*(unsigned __int16 *)(v3 + 18) - 38 > 0xC) {
      return a1;
    }
    uint64_t v3 = *(void *)(v9 + 24);
    unsigned int v13 = *(unsigned __int8 *)(v3 + 16);
    if (v13 < 0x1C) {
      return a1;
    }
    unsigned int v14 = v13 - 33;
    BOOL v6 = v14 > 0x33;
    uint64_t v15 = (1 << v14) & 0x8000000000041;
    if (v6 || v15 == 0) {
      return a1;
    }
    *a1 = (llvm::CallBase *)v3;
  }
  else
  {
    unsigned int v5 = v4 - 33;
    BOOL v6 = v5 > 0x33;
    uint64_t v7 = (1 << v5) & 0x8000000000041;
    if (v6 || v7 == 0)
    {
      *a1 = 0;
      a1[1] = (llvm::CallBase *)(a1 + 3);
      a1[2] = 0;
      return a1;
    }
    uint64_t v9 = a2;
    *a1 = (llvm::CallBase *)v3;
    a1[1] = (llvm::CallBase *)(a1 + 3);
    char v10 = (unsigned int *)(a1 + 1);
    a1[2] = 0;
  }
  unint64_t v11 = (uint64_t *)(v3 - 32);
  if (v3 - 32 != v9)
  {
    uint64_t v12 = *v11;
    if (*v11
      && !*(unsigned char *)(v12 + 16)
      && *(void *)(v12 + 24) == *(void *)(v3 + 72)
      && (uint64_t Metadata = llvm::Value::getMetadata((llvm::Value *)v12, 26)) != 0
      && ((unint64_t v19 = *(void *)(Metadata - 16), (v19 & 2) != 0)
        ? (int v20 = *(uint64_t **)(Metadata - 32), v21 = *(unsigned int *)(Metadata - 24))
        : (int v20 = (uint64_t *)(Metadata - 16 - 8 * ((v19 >> 2) & 0xF)), v21 = (v19 >> 6) & 0xF),
          v21))
    {
      uint64_t v22 = *a1;
      uint64_t v23 = 8 * v21;
      while (1)
      {
        uint64_t v24 = *v20;
        uint64_t v25 = (unint64_t *)(*v20 - 16);
        if ((*v25 & 2) != 0) {
          char v26 = *(unint64_t **)(v24 - 32);
        }
        else {
          char v26 = &v25[-((*v25 >> 2) & 0xF)];
        }
        uint64_t v27 = *(void *)(*v26 + 128);
        long long v28 = (void *)(v27 + 24);
        if (*(_DWORD *)(v27 + 32) >= 0x41u) {
          long long v28 = (void *)*v28;
        }
        if (*v28 == ((v9 - (void)*a1 + 32 * (unint64_t)(*((_DWORD *)*a1 + 5) & 0x7FFFFFF)) >> 5)) {
          break;
        }
        ++v20;
        v23 -= 8;
        if (!v23) {
          goto LABEL_11;
        }
      }
      uint64_t v29 = llvm::CallBase::arg_end(*a1);
      if ((*v25 & 2) != 0) {
        unsigned int v30 = *(_DWORD *)(v24 - 24);
      }
      else {
        unsigned int v30 = (*v25 >> 6) & 0xF;
      }
      int v31 = *((_DWORD *)v22 + 5);
      unsigned int v32 = v30 - 1;
      if (v32)
      {
        unint64_t v33 = 0;
        uint64_t v34 = 8 * v32;
        do
        {
          if ((*v25 & 2) != 0) {
            uint64_t v35 = *(unint64_t **)(v24 - 32);
          }
          else {
            uint64_t v35 = &v25[-((*v25 >> 2) & 0xF)];
          }
          uint64_t v36 = *(void *)(v35[v33 / 8] + 128);
          unsigned int v37 = *(_DWORD *)(v36 + 32);
          if (v37 > 0x40) {
            uint64_t v38 = **(void **)(v36 + 24);
          }
          else {
            uint64_t v38 = (uint64_t)(*(void *)(v36 + 24) << -(char)v37) >> -(char)v37;
          }
          llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v10, v38);
          v33 += 8;
        }
        while (v34 != v33);
      }
      if (*(_DWORD *)(*(void *)(v12 + 24) + 8) > 0xFFu)
      {
        unint64_t v39 = *v25;
        if ((*v25 & 2) != 0)
        {
          unsigned int v40 = *(_DWORD *)(v24 - 24);
          size_t v41 = *(unint64_t **)(v24 - 32);
        }
        else
        {
          unsigned int v40 = (v39 >> 6) & 0xF;
          size_t v41 = &v25[-((v39 >> 2) & 0xF)];
        }
        if ((llvm::Constant::isNullValue(*(llvm::Constant **)(v41[v40 - 1] + 128)) & 1) == 0)
        {
          unint64_t v42 = (unint64_t)(v29 - ((void)v22 - 32 * (v31 & 0x7FFFFFF))) >> 5;
          unsigned int v43 = *(_DWORD *)(v12 + 96);
          if (v43 < v42)
          {
            do
              llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v10, v43++);
            while (v42 != v43);
          }
        }
      }
    }
    else
    {
LABEL_11:
      *a1 = 0;
    }
  }
  return a1;
}

llvm::raw_ostream *llvm::printLLVMNameWithoutPrefix(llvm::raw_ostream *a1, llvm::raw_ostream *a2, size_t a3)
{
  size_t v3 = a3;
  unsigned int v4 = a2;
  uint64_t v6 = MEMORY[0x263EF8318];
  if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *(unsigned __int8 *)a2 + 60) & 0x400) != 0) {
    goto LABEL_18;
  }
  if (!a3) {
    goto LABEL_20;
  }
  char v7 = 0;
  size_t v8 = a3;
  while (1)
  {
    int v9 = *(char *)v4;
    uint64_t v10 = *(unsigned __int8 *)v4;
    if (v9 < 0) {
      break;
    }
    if ((*(_DWORD *)(v6 + 4 * v10 + 60) & 0x500) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    unsigned int v4 = (llvm::raw_ostream *)((char *)v4 + 1);
    if (!--v8) {
      goto LABEL_17;
    }
  }
  if (__maskrune(*(unsigned __int8 *)v4, 0x500uLL)) {
    goto LABEL_16;
  }
LABEL_8:
  if (v9 - 45 > 0x32 || ((1 << (v9 - 45)) & 0x4000000000003) == 0) {
    char v7 = 1;
  }
  if ((v10 - 45) <= 0x32 && ((1 << (v10 - 45)) & 0x4000000000003) != 0) {
    goto LABEL_16;
  }
LABEL_17:
  unsigned int v4 = a2;
  size_t v3 = a3;
  if (v7)
  {
LABEL_18:
    uint64_t v12 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v12 >= *((void *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, 34);
    }
    else
    {
      *((void *)a1 + 4) = v12 + 1;
      *uint64_t v12 = 34;
    }
    uint64_t result = llvm::printEscapedString(v4, v3, a1);
    unsigned int v14 = (unsigned char *)*((void *)a1 + 4);
    if ((unint64_t)v14 >= *((void *)a1 + 3))
    {
      return llvm::raw_ostream::write(a1, 34);
    }
    else
    {
      *((void *)a1 + 4) = v14 + 1;
      *unsigned int v14 = 34;
    }
    return result;
  }
LABEL_20:
  return llvm::raw_ostream::operator<<(a1, v4, v3);
}

void llvm::ModuleSlotTracker::~ModuleSlotTracker(llvm::ModuleSlotTracker *this)
{
  *(void *)this = &unk_270DC2B88;
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Function const*,BOOL)>::~__value_func[abi:nn180100]((void *)this + 10);
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Module const*,BOOL)>::~__value_func[abi:nn180100]((void *)this + 6);
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t vars8;

  llvm::ModuleSlotTracker::~ModuleSlotTracker(this);
  JUMPOUT(0x263E500B0);
}

uint64_t llvm::ModuleSlotTracker::getMachine(llvm::ModuleSlotTracker *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 16))
  {
    *((unsigned char *)this + 16) = 0;
    operator new();
  }
  return *((void *)this + 5);
}

_DWORD *llvm::ModuleSlotTracker::incorporateFunction(const llvm::Function **this, const llvm::Function *a2)
{
  uint64_t result = (_DWORD *)llvm::ModuleSlotTracker::getMachine((llvm::ModuleSlotTracker *)this);
  if (result)
  {
    unsigned int v5 = this[4];
    if (v5 != a2)
    {
      if (v5)
      {
        uint64_t v6 = this[5];
        uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::clear((_DWORD *)v6 + 34);
        *((void *)v6 + 2) = 0;
        *((unsigned char *)v6 + 24) = 0;
      }
      char v7 = this[5];
      *((void *)v7 + 2) = a2;
      *((unsigned char *)v7 + 24) = 0;
      this[4] = a2;
    }
  }
  return result;
}

uint64_t llvm::SlotTracker::getLocalSlot(llvm::SlotTracker *this, const llvm::Value *a2)
{
  if (*((void *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((void *)this + 1) = 0;
  }
  if (*((void *)this + 2) && !*((unsigned char *)this + 24)) {
    llvm::SlotTracker::processFunction(this);
  }
  uint64_t v6 = a2;
  uint64_t v7 = 0;
  int v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)this + 17, &v6, &v7);
  uint64_t result = 0xFFFFFFFFLL;
  if (v4)
  {
    if (v7 != *((void *)this + 17) + 16 * *((unsigned int *)this + 38)) {
      return *(unsigned int *)(v7 + 8);
    }
  }
  return result;
}

void *std::function<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Module const*,BOOL)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Module const*,BOOL)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Module const*,BOOL)>::swap[abi:nn180100](v4, a1);
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Module const*,BOOL)>::~__value_func[abi:nn180100](v4);
  return a1;
}

void *std::function<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Function const*,BOOL)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Function const*,BOOL)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Function const*,BOOL)>::swap[abi:nn180100](v4, a1);
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Function const*,BOOL)>::~__value_func[abi:nn180100](v4);
  return a1;
}

double llvm::SlotTracker::SlotTracker(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = &unk_270DC2BA8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 25) = a3;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)&double result = 16;
  *(void *)(a1 + 252) = 16;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(void *)(a1 + 316) = 16;
  return result;
}

double llvm::SlotTracker::SlotTracker(llvm::SlotTracker *this, const Function *a2, char a3)
{
  *(void *)this = &unk_270DC2BA8;
  if (a2) {
    uint64_t v3 = *((void *)a2 + 5);
  }
  else {
    uint64_t v3 = 0;
  }
  *((void *)this + 1) = v3;
  *((void *)this + 2) = a2;
  *((unsigned char *)this + 24) = 0;
  *((unsigned char *)this + 25) = a3;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 32) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 40) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 48) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  *((_DWORD *)this + 56) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(void *)&double result = 16;
  *(void *)((char *)this + 252) = 16;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_DWORD *)this + 72) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((_DWORD *)this + 78) = 0;
  *(void *)((char *)this + 316) = 16;
  return result;
}

uint64_t llvm::SlotTracker::processModule(llvm::SlotTracker *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = v2 + 1;
  int v4 = (void *)v2[2];
  if (v4 != v2 + 1)
  {
    do
    {
      if (v4) {
        unsigned int v5 = (llvm::SlotTracker *)(v4 - 7);
      }
      else {
        unsigned int v5 = 0;
      }
      if ((*((unsigned char *)v5 + 23) & 0x10) == 0)
      {
        int v6 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v6 + 1;
        int v31 = v5;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 13, &v31)+ 2) = v6;
      }
      llvm::SlotTracker::processGlobalObjectMetadata((uint64_t)this, (uint64_t ***)v5);
      uint64_t v7 = *((void *)v5 + 9);
      if (v7) {
        llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v7);
      }
      int v4 = (void *)v4[1];
    }
    while (v4 != v3);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  size_t v8 = v2 + 5;
  int v9 = (void *)v2[6];
  if (v9 != v2 + 5)
  {
    do
    {
      uint64_t v10 = (llvm::SlotTracker *)(v9 - 6);
      if (!v9) {
        uint64_t v10 = 0;
      }
      if ((*((unsigned char *)v10 + 23) & 0x10) == 0)
      {
        int v11 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v11 + 1;
        int v31 = v10;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 13, &v31)+ 2) = v11;
      }
      int v9 = (void *)v9[1];
    }
    while (v9 != v8);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  uint64_t v12 = v2 + 7;
  unsigned int v13 = (void *)v2[8];
  if (v13 != v2 + 7)
  {
    do
    {
      unsigned int v14 = (llvm::SlotTracker *)(v13 - 7);
      if (!v13) {
        unsigned int v14 = 0;
      }
      if ((*((unsigned char *)v14 + 23) & 0x10) == 0)
      {
        int v15 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v15 + 1;
        int v31 = v14;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 13, &v31)+ 2) = v15;
      }
      unsigned int v13 = (void *)v13[1];
    }
    while (v13 != v12);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  int v16 = v2 + 9;
  int v17 = (void *)v2[10];
  if (v17 != v2 + 9)
  {
    do
    {
      uint64_t v18 = *(unsigned int *)(v17[6] + 8);
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = 8 * v18;
        do
        {
          llvm::SlotTracker::CreateMetadataSlot((uint64_t)this, *(unsigned __int8 **)(*(void *)v17[6] + v19));
          v19 += 8;
        }
        while (v20 != v19);
      }
      int v17 = (void *)v17[1];
    }
    while (v17 != v16);
    uint64_t v2 = (void *)*((void *)this + 1);
  }
  uint64_t v21 = v2 + 3;
  uint64_t v22 = (void *)v2[4];
  if (v22 != v2 + 3)
  {
    do
    {
      if (v22) {
        uint64_t v23 = (llvm::SlotTracker *)(v22 - 7);
      }
      else {
        uint64_t v23 = 0;
      }
      if ((*((unsigned char *)v23 + 23) & 0x10) == 0)
      {
        int v24 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v24 + 1;
        int v31 = v23;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 13, &v31)+ 2) = v24;
      }
      if (*((unsigned char *)this + 25)) {
        llvm::SlotTracker::processFunctionMetadata(this, (uint64_t ***)v23);
      }
      uint64_t v25 = *((void *)v23 + 14);
      if (v25)
      {
        if (*(_DWORD *)(v25 + 8))
        {
          uint64_t v26 = *(void *)(v25 + 40);
          if (v26) {
            llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v26);
          }
        }
      }
      uint64_t v22 = (void *)v22[1];
    }
    while (v22 != v21);
  }
  uint64_t result = *((void *)this + 7);
  if (result)
  {
    char v28 = *((unsigned char *)this + 25);
    uint64_t v30 = *((void *)this + 1);
    int v31 = this;
    char v29 = v28;
    return (*(uint64_t (**)(uint64_t, llvm::SlotTracker **, uint64_t *, char *))(*(void *)result + 48))(result, &v31, &v30, &v29);
  }
  return result;
}

void llvm::SlotTracker::processGlobalObjectMetadata(uint64_t a1, uint64_t ***a2)
{
  v9[8] = *MEMORY[0x263EF8340];
  uint64_t v7 = v9;
  uint64_t v8 = 0x400000000;
  llvm::Value::getAllMetadata(a2, (unsigned int *)&v7);
  uint64_t v3 = v7;
  if (v8)
  {
    uint64_t v4 = 16 * v8;
    unsigned int v5 = (unsigned __int8 **)((char *)v7 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      llvm::SlotTracker::CreateMetadataSlot(a1, v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v7;
  }
  if (v3 != v9) {
    free(v3);
  }
}

uint64_t llvm::SlotTracker::CreateAttributeSetSlot(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 200;
  uint64_t v4 = *(void *)(a1 + 200);
  uint64_t v14 = 0;
  int v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(v4, *(_DWORD *)(v5 + 16), a2, &v14);
  uint64_t result = *(void *)v5;
  uint64_t v8 = *(unsigned int *)(v5 + 16);
  if (v6) {
    BOOL v9 = v14 == *(void *)v5 + 16 * v8;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    int v10 = *(_DWORD *)(a1 + 224);
    *(_DWORD *)(a1 + 224) = v10 + 1;
    uint64_t v14 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(result, v8, a2, &v14);
    uint64_t v11 = v14;
    if (result)
    {
LABEL_12:
      *(_DWORD *)(v11 + 8) = v10;
      return result;
    }
    int v12 = *(_DWORD *)(a1 + 208);
    unsigned int v13 = *(_DWORD *)(a1 + 216);
    if (4 * v12 + 4 >= 3 * v13)
    {
      v13 *= 2;
    }
    else if (v13 + ~v12 - *(_DWORD *)(a1 + 212) > v13 >> 3)
    {
LABEL_9:
      ++*(_DWORD *)(a1 + 208);
      if (*(void *)v11 != -4) {
        --*(_DWORD *)(a1 + 212);
      }
      *(void *)uint64_t v11 = a2;
      *(_DWORD *)(v11 + 8) = 0;
      goto LABEL_12;
    }
    llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::grow(v5, v13);
    uint64_t v14 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(*(void *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, &v14);
    uint64_t v11 = v14;
    goto LABEL_9;
  }
  return result;
}

uint64_t llvm::SlotTracker::CreateMetadataSlot(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *a2;
  if (v2 == 6) {
    return result;
  }
  if (v2 == 33) {
    return result;
  }
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 192);
  uint64_t v7 = result + 168;
  uint64_t v6 = *(void *)(result + 168);
  uint64_t v18 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v6, *(_DWORD *)(v7 + 16), (uint64_t)a2, &v18);
  if (result) {
    return result;
  }
  int v8 = *(_DWORD *)(v4 + 176);
  unsigned int v9 = *(_DWORD *)(v4 + 184);
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
    goto LABEL_22;
  }
  if (v9 + ~v8 - *(_DWORD *)(v4 + 180) <= v9 >> 3)
  {
LABEL_22:
    llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow(v7, v9);
    uint64_t v18 = 0;
    uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(void *)(v4 + 168), *(_DWORD *)(v4 + 184), (uint64_t)a2, &v18);
  }
  uint64_t v10 = v18;
  ++*(_DWORD *)(v4 + 176);
  if (*(void *)v10 != -4096) {
    --*(_DWORD *)(v4 + 180);
  }
  *(void *)uint64_t v10 = a2;
  *(_DWORD *)(v10 + 8) = v5;
  ++*(_DWORD *)(v4 + 192);
  int v12 = a2 - 16;
  uint64_t v11 = *((void *)a2 - 2);
  if ((v11 & 2) != 0)
  {
    unsigned int v13 = *((_DWORD *)a2 - 6);
    if (!v13) {
      return result;
    }
  }
  else
  {
    unsigned int v13 = (v11 >> 6) & 0xF;
    if (!v13) {
      return result;
    }
  }
  uint64_t v14 = 0;
  uint64_t v15 = 8 * v13;
  do
  {
    if ((*(void *)v12 & 2) != 0) {
      int v16 = (unsigned __int8 *)*((void *)a2 - 4);
    }
    else {
      int v16 = &v12[-8 * ((*(void *)v12 >> 2) & 0xFLL)];
    }
    int v17 = *(const llvm::MDNode **)&v16[v14];
    if (v17)
    {
      uint64_t result = llvm::MDNode::classof(*(unsigned char **)&v16[v14]);
      if (result) {
        uint64_t result = llvm::SlotTracker::CreateMetadataSlot((llvm::SlotTracker *)v4, v17);
      }
    }
    v14 += 8;
  }
  while (v15 != v14);
  return result;
}

void llvm::SlotTracker::processFunctionMetadata(llvm::SlotTracker *this, uint64_t ***a2)
{
  unsigned int v25[8] = *MEMORY[0x263EF8340];
  llvm::SlotTracker::processGlobalObjectMetadata((uint64_t)this, a2);
  uint64_t v4 = a2 + 9;
  int v5 = (uint64_t ***)a2[10];
  if (v5 != a2 + 9)
  {
    do
    {
      uint64_t v6 = v5 - 3;
      if (!v5) {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t **)(v6 + 5);
      for (uint64_t i = v6[6]; i != v7; uint64_t i = (uint64_t **)i[1])
      {
        if (i) {
          uint64_t v9 = (uint64_t)(i - 3);
        }
        else {
          uint64_t v9 = 0;
        }
        if (*(unsigned char *)(v9 + 16) == 84)
        {
          uint64_t v10 = *(void *)(v9 - 32);
          if (v10)
          {
            if (!*(unsigned char *)(v10 + 16)
              && *(void *)(v10 + 24) == *(void *)(v9 + 72)
              && (*(unsigned char *)(v10 + 33) & 0x20) != 0)
            {
              int v11 = *(_DWORD *)(v9 + 20);
              if ((v11 & 0x40000000) != 0)
              {
                unsigned int v13 = *(uint64_t **)(v9 - 8);
                uint64_t v12 = v11 & 0x7FFFFFF;
                if (!v12) {
                  goto LABEL_27;
                }
              }
              else
              {
                uint64_t v12 = v11 & 0x7FFFFFF;
                unsigned int v13 = (uint64_t *)(v9 - 32 * v12);
                if (!v12) {
                  goto LABEL_27;
                }
              }
              uint64_t v14 = 32 * v12;
              do
              {
                uint64_t v15 = *v13;
                if (*v13 && *(unsigned char *)(v15 + 16) == 23)
                {
                  int v16 = *(unsigned __int8 **)(v15 + 24);
                  int v17 = llvm::MDNode::classof(v16);
                  if (v16 && v17 != 0) {
                    llvm::SlotTracker::CreateMetadataSlot((uint64_t)this, v16);
                  }
                }
                v13 += 4;
                v14 -= 32;
              }
              while (v14);
            }
          }
        }
LABEL_27:
        uint64_t v23 = v25;
        uint64_t v24 = 0x400000000;
        if (*(void *)(v9 + 48) || (*(unsigned char *)(v9 + 23) & 0x20) != 0)
        {
          llvm::Instruction::getAllMetadataImpl(v9, (unsigned int *)&v23);
          uint64_t v19 = v23;
          if (v24)
          {
            uint64_t v20 = 16 * v24;
            uint64_t v21 = (unsigned __int8 **)((char *)v23 + 8);
            do
            {
              uint64_t v22 = *v21;
              v21 += 2;
              llvm::SlotTracker::CreateMetadataSlot((uint64_t)this, v22);
              v20 -= 16;
            }
            while (v20);
            uint64_t v19 = v23;
          }
          if (v19 != v25) {
            free(v19);
          }
        }
      }
      int v5 = (uint64_t ***)v5[1];
    }
    while (v5 != v4);
  }
}

uint64_t llvm::SlotTracker::processFunction(llvm::SlotTracker *this)
{
  *((_DWORD *)this + 40) = 0;
  if (!*((unsigned char *)this + 25)) {
    llvm::SlotTracker::processFunctionMetadata(this, *((uint64_t ****)this + 2));
  }
  uint64_t v2 = *((void *)this + 2);
  if (*(_WORD *)(v2 + 18))
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 2));
    uint64_t v4 = *((void *)this + 2);
    uint64_t v3 = *(llvm::SlotTracker **)(v2 + 88);
    if (*(_WORD *)(v4 + 18)) {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 2));
    }
    uint64_t v2 = v4;
  }
  else
  {
    uint64_t v3 = *(llvm::SlotTracker **)(v2 + 88);
  }
  for (uint64_t i = *(void *)(v2 + 88) + 40 * *(void *)(v2 + 96);
        v3 != (llvm::SlotTracker *)i;
        uint64_t v3 = (llvm::SlotTracker *)((char *)v3 + 40))
  {
    if ((*((unsigned char *)v3 + 23) & 0x10) == 0)
    {
      uint64_t v26 = v3;
      int v6 = *((_DWORD *)this + 40);
      *((_DWORD *)this + 40) = v6 + 1;
      *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 17, &v26)+ 2) = v6;
    }
  }
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = v7 + 72;
  uint64_t v9 = *(void *)(v7 + 80);
  if (v9 != v7 + 72)
  {
    do
    {
      if (v9) {
        uint64_t v10 = v9 - 24;
      }
      else {
        uint64_t v10 = 0;
      }
      if ((*(unsigned char *)(v10 + 23) & 0x10) == 0)
      {
        uint64_t v26 = (llvm::SlotTracker *)v10;
        int v11 = *((_DWORD *)this + 40);
        *((_DWORD *)this + 40) = v11 + 1;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 17, &v26)+ 2) = v11;
      }
      uint64_t v12 = v10 + 40;
      for (uint64_t j = *(void *)(v10 + 48); j != v12; uint64_t j = *(void *)(j + 8))
      {
        if (j) {
          uint64_t v14 = j - 24;
        }
        else {
          uint64_t v14 = 0;
        }
        if (*(unsigned char *)(*(void *)v14 + 8) != 7 && (*(unsigned char *)(v14 + 23) & 0x10) == 0)
        {
          uint64_t v26 = (llvm::SlotTracker *)v14;
          int v15 = *((_DWORD *)this + 40);
          *((_DWORD *)this + 40) = v15 + 1;
          *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::FindAndConstruct((uint64_t *)this + 17, &v26)+ 2) = v15;
        }
        unsigned int v16 = *(unsigned __int8 *)(v14 + 16) - 33;
        BOOL v17 = v16 > 0x33;
        uint64_t v18 = (1 << v16) & 0x8000000000041;
        if (!v17 && v18 != 0)
        {
          uint64_t v20 = *(void *)(v14 + 64);
          if (v20)
          {
            if (*(_DWORD *)(v20 + 8))
            {
              uint64_t v21 = *(void *)(v20 + 40);
              if (v21) {
                llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v21);
              }
            }
          }
        }
      }
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9 != v8);
  }
  uint64_t result = *((void *)this + 11);
  if (result)
  {
    char v23 = *((unsigned char *)this + 25);
    uint64_t v25 = *((void *)this + 2);
    uint64_t v26 = this;
    char v24 = v23;
    uint64_t result = (*(uint64_t (**)(uint64_t, llvm::SlotTracker **, uint64_t *, char *))(*(void *)result + 48))(result, &v26, &v25, &v24);
  }
  *((unsigned char *)this + 24) = 1;
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::clear(_DWORD *result)
{
  uint64_t v1 = result;
  int v2 = result[2];
  if (v2)
  {
    unsigned int v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      int v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64) {
        int v5 = 64;
      }
      else {
        int v5 = v4;
      }
LABEL_10:
      if (v5 == v3)
      {
        *((void *)result + 1) = 0;
        uint64_t v6 = 16 * v3;
        uint64_t v7 = *(void **)result;
        do
        {
          void *v7 = -4096;
          v7 += 2;
          v6 -= 16;
        }
        while (v6);
      }
      else
      {
        uint64_t result = (_DWORD *)MEMORY[0x263E500A0](*(void *)result, 8);
        if (v5)
        {
          unint64_t v10 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
          LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
          v1[4] = v11;
          uint64_t result = operator new(16 * v11, (std::align_val_t)8uLL);
          *(void *)uint64_t v1 = result;
          *((void *)v1 + 1) = 0;
          uint64_t v12 = v1[4];
          if (v12)
          {
            uint64_t v13 = 16 * v12;
            do
            {
              *(void *)uint64_t result = -4096;
              result += 4;
              v13 -= 16;
            }
            while (v13);
          }
        }
        else
        {
          *(void *)uint64_t v1 = 0;
          *((void *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3]) {
      return result;
    }
    unsigned int v3 = result[4];
    if (v3 > 0x40)
    {
      int v5 = 0;
      goto LABEL_10;
    }
  }
  if (v3)
  {
    uint64_t v8 = *(void **)result;
    uint64_t v9 = 16 * v3;
    do
    {
      void *v8 = -4096;
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  *((void *)result + 1) = 0;
  return result;
}

uint64_t llvm::SlotTracker::getGlobalSlot(llvm::SlotTracker *this, const llvm::GlobalValue *a2)
{
  if (*((void *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((void *)this + 1) = 0;
  }
  if (*((void *)this + 2) && !*((unsigned char *)this + 24)) {
    llvm::SlotTracker::processFunction(this);
  }
  uint64_t v6 = a2;
  uint64_t v7 = 0;
  int v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)this + 13, &v6, &v7);
  uint64_t result = 0xFFFFFFFFLL;
  if (v4)
  {
    if (v7 != *((void *)this + 13) + 16 * *((unsigned int *)this + 30)) {
      return *(unsigned int *)(v7 + 8);
    }
  }
  return result;
}

uint64_t llvm::SlotTracker::getMetadataSlot(llvm::SlotTracker *this, const llvm::MDNode *a2)
{
  if (*((void *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((void *)this + 1) = 0;
  }
  if (*((void *)this + 2) && !*((unsigned char *)this + 24)) {
    llvm::SlotTracker::processFunction(this);
  }
  uint64_t v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((void *)this + 21), *((_DWORD *)this + 46), (uint64_t)a2, &v6))BOOL v4 = v6 == *((void *)this + 21) + 16 * *((unsigned int *)this + 46); {
  else
  }
    BOOL v4 = 1;
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(v6 + 8);
  }
}

uint64_t llvm::SlotTracker::getAttributeGroupSlot(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    llvm::SlotTracker::processModule((llvm::SlotTracker *)a1);
    *(void *)(a1 + 8) = 0;
  }
  if (*(void *)(a1 + 16) && !*(unsigned char *)(a1 + 24)) {
    llvm::SlotTracker::processFunction((llvm::SlotTracker *)a1);
  }
  uint64_t v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(*(void *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, &v6))BOOL v4 = v6 == *(void *)(a1 + 200) + 16 * *(unsigned int *)(a1 + 216); {
  else
  }
    BOOL v4 = 1;
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *(unsigned int *)(v6 + 8);
  }
}

uint64_t anonymous namespace'::AssemblyWriter::AssemblyWriter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  uint64_t v8 = a1 + 232;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a5;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(unsigned char *)(a1 + 280) = a6;
  *(unsigned char *)(a1 + 281) = a7;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a1 + 328;
  *(void *)(a1 + 320) = 0x800000000;
  *(void *)(a1 + 456) = a1 + 472;
  *(void *)(a1 + 464) = 0x800000000;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 616) = 0;
  if (a4)
  {
    uint64_t v9 = (char **)(a1 + 256);
    uint64_t v10 = a4 + 24;
    uint64_t v11 = *(void *)(a4 + 32);
    uint64_t v12 = a4 + 8;
    uint64_t v13 = *(void *)(a4 + 16);
    uint64_t v36 = v11;
    uint64_t v37 = v13;
    uint64_t v38 = a4 + 24;
    uint64_t v39 = a4 + 8;
    while (1)
    {
      if (v11 == v10 && v13 == v12)
      {
        BOOL v14 = v38 == v10 && v39 == v12;
        if (v14) {
          return a1;
        }
      }
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = (*(uint64_t (**)(uint64_t *))((char *)&off_270DC2BD0 + v15))(&v36);
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = v15 == 16;
        }
        v15 += 16;
      }
      while (!v17);
      uint64_t v18 = *(void *)(v16 + 48);
      if (v18)
      {
        unsigned int v40 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)(a1 + 232), *(_DWORD *)(a1 + 248), v18, &v40) & 1) == 0)break; {
      }
        }
LABEL_38:
      uint64_t v34 = 0;
      do
      {
        if ((*(uint64_t (**)(uint64_t *))((char *)&off_270DC2BF0 + v34))(&v36)) {
          break;
        }
        BOOL v14 = v34 == 16;
        v34 += 16;
      }
      while (!v14);
      uint64_t v11 = v36;
      uint64_t v13 = v37;
    }
    unsigned int v19 = *(_DWORD *)(a1 + 248);
    int v20 = *(_DWORD *)(a1 + 240);
    if (4 * v20 + 4 >= 3 * v19)
    {
      v19 *= 2;
    }
    else if (v19 + ~v20 - *(_DWORD *)(a1 + 244) > v19 >> 3)
    {
LABEL_19:
      uint64_t v21 = v40;
      ++*(_DWORD *)(a1 + 240);
      if (*v21 != -4096) {
        --*(_DWORD *)(a1 + 244);
      }
      *uint64_t v21 = v18;
      char v23 = *(uint64_t **)(a1 + 264);
      unint64_t v22 = *(void *)(a1 + 272);
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = ((char *)v23 - *v9) >> 3;
        if ((unint64_t)(v25 + 1) >> 61) {
          abort();
        }
        uint64_t v26 = v22 - (void)*v9;
        uint64_t v27 = v26 >> 2;
        if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
          uint64_t v27 = v25 + 1;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v28 = v27;
        }
        if (v28) {
          char v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1 + 272, v28);
        }
        else {
          char v29 = 0;
        }
        uint64_t v30 = (uint64_t *)&v29[8 * v25];
        *uint64_t v30 = v18;
        char v24 = v30 + 1;
        unsigned int v32 = *(char **)(a1 + 256);
        int v31 = *(char **)(a1 + 264);
        if (v31 != v32)
        {
          do
          {
            uint64_t v33 = *((void *)v31 - 1);
            v31 -= 8;
            *--uint64_t v30 = v33;
          }
          while (v31 != v32);
          int v31 = *v9;
        }
        *(void *)(a1 + 256) = v30;
        *(void *)(a1 + 264) = v24;
        *(void *)(a1 + 272) = &v29[8 * v28];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *char v23 = v18;
        char v24 = v23 + 1;
      }
      *(void *)(a1 + 264) = v24;
      goto LABEL_38;
    }
    llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow(v8, v19);
    unsigned int v40 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(void *)(a1 + 232), *(_DWORD *)(a1 + 248), v18, &v40);
    goto LABEL_19;
  }
  return a1;
}

_DWORD *anonymous namespace'::AssemblyWriter::printFunction(_anonymous_namespace_::AssemblyWriter *this, const llvm::Function *a2)
{
  uint64_t v156 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 28);
  if (v4) {
    (*(void (**)(uint64_t, const llvm::Function *, void))(*(void *)v4 + 16))(v4, a2, *(void *)this);
  }
  if (*((unsigned char *)a2 + 35))
  {
    int v5 = *(llvm::raw_ostream **)this;
    uint64_t v6 = *(void *)(*(void *)this + 32);
    if ((unint64_t)(*(void *)(*(void *)this + 24) - v6) > 0x10)
    {
      *(unsigned char *)(v6 + 16) = 10;
      *(_OWORD *)uint64_t v6 = *(_OWORD *)"; Materializable\n";
      *((void *)v5 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v5, "; Materializable\n", 0x11uLL);
    }
  }
  uint64_t v7 = *((void *)a2 + 14);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 8))
    {
      uint64_t v8 = *(void *)(v7 + 40);
      if (v8)
      {
        memset(&v155, 0, sizeof(v155));
        uint64_t v9 = *(unsigned int *)(v8 + 8);
        if (v9)
        {
          uint64_t v10 = (llvm::Attribute *)(v8 + 48);
          uint64_t v11 = 8 * v9;
          do
          {
            if (!*(void *)v10 || *(unsigned char *)(*(void *)v10 + 8) != 2)
            {
              std::string::size_type size = HIBYTE(v155.__r_.__value_.__r.__words[2]);
              if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = v155.__r_.__value_.__l.__size_;
              }
              if (size) {
                std::string::push_back(&v155, 32);
              }
              llvm::Attribute::getAsString(v10, 0, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
              }
              std::string::append(&v155, (const std::string::value_type *)p_p, v14);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            uint64_t v10 = (llvm::Attribute *)((char *)v10 + 8);
            v11 -= 8;
          }
          while (v11);
          std::string::size_type v15 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
          if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v15 = v155.__r_.__value_.__l.__size_;
          }
          if (v15)
          {
            uint64_t v16 = *(llvm::raw_ostream **)this;
            uint64_t v17 = *(void *)(*(void *)this + 32);
            if ((unint64_t)(*(void *)(*(void *)this + 24) - v17) > 0x11)
            {
              *(_WORD *)(v17 + 16) = 8250;
              *(_OWORD *)uint64_t v17 = *(_OWORD *)"; Function Attrs: ";
              *((void *)v16 + 4) += 18;
            }
            else
            {
              uint64_t v16 = llvm::raw_ostream::write(v16, "; Function Attrs: ", 0x12uLL);
            }
            if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v18 = &v155;
            }
            else {
              uint64_t v18 = (std::string *)v155.__r_.__value_.__r.__words[0];
            }
            if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v19 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v19 = v155.__r_.__value_.__l.__size_;
            }
            int v20 = llvm::raw_ostream::write(v16, (const char *)v18, v19);
            uint64_t v21 = (unsigned char *)*((void *)v20 + 4);
            if ((unint64_t)v21 >= *((void *)v20 + 3))
            {
              llvm::raw_ostream::write(v20, 10);
            }
            else
            {
              *((void *)v20 + 4) = v21 + 1;
              *uint64_t v21 = 10;
            }
          }
        }
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v22 = *((void *)this + 4);
  *(void *)(v22 + 16) = a2;
  *(unsigned char *)(v22 + 24) = 0;
  if (a2 && *((unsigned char *)a2 + 16) == 3)
  {
    char v23 = *(llvm::raw_ostream **)this;
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_47;
    }
    goto LABEL_52;
  }
  if (*((unsigned char *)a2 + 16) || *((const llvm::Function **)a2 + 9) != (const llvm::Function *)((char *)a2 + 72))
  {
    char v23 = *(llvm::raw_ostream **)this;
    goto LABEL_52;
  }
  char v23 = *(llvm::raw_ostream **)this;
  if (*((unsigned char *)a2 + 35))
  {
LABEL_52:
    uint64_t v25 = (_DWORD *)*((void *)v23 + 4);
    if (*((void *)v23 + 3) - (void)v25 > 6uLL)
    {
      *(_DWORD *)((char *)v25 + 3) = 543518313;
      *uint64_t v25 = 1768318308;
      *((void *)v23 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v23, "define ", 7uLL);
    }
    goto LABEL_61;
  }
LABEL_47:
  char v24 = (_DWORD *)*((void *)v23 + 4);
  if (*((void *)v23 + 3) - (void)v24 > 6uLL)
  {
    *(_DWORD *)((char *)v24 + 3) = 1701994860;
    *char v24 = 1818453348;
    *((void *)v23 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v23, "declare", 7uLL);
  }
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155.__r_.__value_.__r.__words[2];
  v155.__r_.__value_.__l.__size_ = 0x400000000;
  llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&v155);
  uint64_t v26 = *(llvm::raw_ostream **)this;
  uint64_t v27 = *(unsigned char **)(*(void *)this + 32);
  if ((unint64_t)v27 >= *(void *)(*(void *)this + 24))
  {
    llvm::raw_ostream::write(v26, 32);
  }
  else
  {
    *((void *)v26 + 4) = v27 + 1;
    *uint64_t v27 = 32;
  }
  if ((std::string::size_type *)v155.__r_.__value_.__l.__data_ != &v155.__r_.__value_.__r.__words[2]) {
    free(v155.__r_.__value_.__l.__data_);
  }
LABEL_61:
  unint64_t v28 = *(llvm::raw_ostream **)this;
  getLinkageNameWithSpace(&v155, *((_DWORD *)a2 + 8) & 0xF);
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v29 = &v155;
  }
  else {
    char v29 = (std::string *)v155.__r_.__value_.__r.__words[0];
  }
  if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v30 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v30 = v155.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(v28, (const char *)v29, v30);
  if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v155.__r_.__value_.__l.__data_);
  }
  PrintDSOLocation(a2, *(llvm::formatted_raw_ostream **)this);
  unsigned int v31 = *((_DWORD *)a2 + 8);
  int v32 = (v31 >> 4) & 3;
  uint64_t v33 = *(llvm::raw_ostream **)this;
  if (v32 == 1)
  {
    uint64_t v34 = "hidden ";
    size_t v35 = 7;
  }
  else
  {
    if (v32 != 2) {
      goto LABEL_74;
    }
    uint64_t v34 = "protected ";
    size_t v35 = 10;
  }
  llvm::raw_ostream::operator<<(v33, v34, v35);
  unsigned int v31 = *((_DWORD *)a2 + 8);
  uint64_t v33 = *(llvm::raw_ostream **)this;
LABEL_74:
  int v36 = (v31 >> 8) & 3;
  if (v36 == 1)
  {
    uint64_t v37 = "dllimport ";
  }
  else
  {
    if (v36 != 2) {
      goto LABEL_79;
    }
    uint64_t v37 = "dllexport ";
  }
  llvm::raw_ostream::operator<<(v33, v37, 0xAuLL);
LABEL_79:
  uint64_t v38 = (llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FF);
  if (v38)
  {
    PrintCallingConv(v38, *(llvm::raw_ostream **)this);
    uint64_t v39 = *(llvm::raw_ostream **)this;
    unsigned int v40 = *(unsigned char **)(*(void *)this + 32);
    if (*(unsigned char **)(*(void *)this + 24) == v40)
    {
      llvm::raw_ostream::write(v39, " ", 1uLL);
    }
    else
    {
      *unsigned int v40 = 32;
      ++*((void *)v39 + 4);
    }
  }
  uint64_t v41 = *((void *)a2 + 3);
  uint64_t v42 = v41;
  if (v7)
  {
    uint64_t v42 = *((void *)a2 + 3);
    if (*(_DWORD *)(v7 + 8) >= 2u)
    {
      uint64_t v42 = *((void *)a2 + 3);
      if (*(void *)(v7 + 48))
      {
        unsigned int v43 = *(llvm::raw_ostream **)this;
        __p.__r_.__value_.__r.__words[0] = *(void *)(v7 + 48);
        llvm::AttributeSet::getAsString((llvm::AttributeSetNode **)&__p, 0, &v155);
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v44 = &v155;
        }
        else {
          uint64_t v44 = (std::string *)v155.__r_.__value_.__r.__words[0];
        }
        if ((v155.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v45 = HIBYTE(v155.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v45 = v155.__r_.__value_.__l.__size_;
        }
        llvm::raw_ostream::write(v43, (const char *)v44, v45);
        unint64_t v46 = (unsigned char *)*((void *)v43 + 4);
        if ((unint64_t)v46 >= *((void *)v43 + 3))
        {
          llvm::raw_ostream::write(v43, 32);
        }
        else
        {
          *((void *)v43 + 4) = v46 + 1;
          *unint64_t v46 = 32;
        }
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        uint64_t v42 = *((void *)a2 + 3);
      }
    }
  }
  std::string::size_type v47 = *((void *)this + 4);
  uint64_t v48 = *((void *)a2 + 5);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270DC2C20;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)this + 40;
  __p.__r_.__value_.__r.__words[2] = v47;
  uint64_t v154 = v48;
  size_t v49 = *(llvm::raw_ostream **)this;
  uint64_t v50 = *(unsigned char **)(*(void *)this + 32);
  if ((unint64_t)v50 >= *(void *)(*(void *)this + 24))
  {
    llvm::raw_ostream::write(v49, 32);
  }
  else
  {
    *((void *)v49 + 4) = v50 + 1;
    *uint64_t v50 = 32;
  }
  WriteAsOperandInternal(*(llvm::raw_ostream **)this, (uint64_t ***)a2, (llvm::raw_ostream **)&__p);
  uint64_t v51 = *(llvm::raw_ostream **)this;
  uint64_t v52 = *(unsigned char **)(*(void *)this + 32);
  if ((unint64_t)v52 >= *(void *)(*(void *)this + 24))
  {
    llvm::raw_ostream::write(v51, 40);
  }
  else
  {
    *((void *)v51 + 4) = v52 + 1;
    *uint64_t v52 = 40;
  }
  uint64_t v152 = v41;
  if (a2 && *((unsigned char *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0) {
      goto LABEL_126;
    }
  }
  else if (*((unsigned char *)a2 + 16) {
         || *((const llvm::Function **)a2 + 9) != (const llvm::Function *)((char *)a2 + 72)
  }
         || (*((unsigned char *)a2 + 35) & 1) != 0)
  {
    goto LABEL_126;
  }
  if (!*((unsigned char *)this + 280))
  {
    int v53 = *(_DWORD *)(v41 + 12);
    uint64_t v54 = (v53 - 1);
    if (v53 != 1)
    {
      uint64_t v55 = 0;
      do
      {
        if (v55)
        {
          uint64_t v56 = *(llvm::raw_ostream **)this;
          uint64_t v57 = *(_WORD **)(*(void *)this + 32);
          if (*(void *)(*(void *)this + 24) - (void)v57 > 1uLL)
          {
            *uint64_t v57 = 8236;
            *((void *)v56 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v56, ", ", 2uLL);
          }
        }
        if (v7)
        {
          if ((v55 + 2) < *(_DWORD *)(v7 + 8))
          {
            uint64_t v58 = *(const llvm::AttributeSet **)(v7 + 40 + 8 * (v55 + 2));
            if (v58)
            {
              uint64_t v59 = *(llvm::raw_ostream **)this;
              unint64_t v60 = *(unsigned char **)(*(void *)this + 32);
              if ((unint64_t)v60 >= *(void *)(*(void *)this + 24))
              {
                llvm::raw_ostream::write(v59, 32);
              }
              else
              {
                *((void *)v59 + 4) = v60 + 1;
                unsigned char *v60 = 32;
              }
            }
          }
        }
        ++v55;
      }
      while (v54 != v55);
    }
    goto LABEL_158;
  }
LABEL_126:
  uint64_t v61 = llvm::Function::args(a2);
  if (v61 != v62)
  {
    uint64_t v63 = v61;
    uint64_t v64 = v62;
    do
    {
      int v65 = *(_DWORD *)(v63 + 32);
      if (v65)
      {
        uint64_t v66 = *(llvm::raw_ostream **)this;
        unint64_t v67 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v67 > 1uLL)
        {
          *unint64_t v67 = 8236;
          *((void *)v66 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v66, ", ", 2uLL);
        }
        int v65 = *(_DWORD *)(v63 + 32);
      }
      if (v7 && (unsigned int v68 = v65 + 2, v68 < *(_DWORD *)(v7 + 8))) {
        size_t v69 = *(const llvm::AttributeSet **)(v7 + 40 + 8 * v68);
      }
      else {
        size_t v69 = 0;
      }
      if (v69)
      {
        int v70 = *(llvm::raw_ostream **)this;
        unint64_t v71 = *(unsigned char **)(*(void *)this + 32);
        if ((unint64_t)v71 >= *(void *)(*(void *)this + 24))
        {
          llvm::raw_ostream::write(v70, 32);
        }
        else
        {
          *((void *)v70 + 4) = v71 + 1;
          *unint64_t v71 = 32;
        }
      }
      if ((*(unsigned char *)(v63 + 23) & 0x10) != 0)
      {
        size_t v75 = *(llvm::raw_ostream **)this;
        uint64_t v76 = *(unsigned char **)(*(void *)this + 32);
        if ((unint64_t)v76 >= *(void *)(*(void *)this + 24))
        {
          llvm::raw_ostream::write(v75, 32);
        }
        else
        {
          *((void *)v75 + 4) = v76 + 1;
          *uint64_t v76 = 32;
        }
        uint64_t v77 = *(llvm::raw_ostream **)this;
        if ((*(unsigned char *)(v63 + 23) & 0x10) != 0)
        {
          Valueuint64_t Name = (size_t *)llvm::Value::getValueName((uint64_t ***)v63);
          uint64_t v79 = (llvm::raw_ostream *)(ValueName + 2);
          size_t v78 = *ValueName;
        }
        else
        {
          size_t v78 = 0;
          uint64_t v79 = (llvm::raw_ostream *)&str_3_24;
        }
        if (*(unsigned __int8 *)(v63 + 16) >= 4u) {
          int v81 = 3;
        }
        else {
          int v81 = 0;
        }
        PrintLLVMName(v77, v79, v78, v81);
      }
      else
      {
        int LocalSlot = llvm::SlotTracker::getLocalSlot(*((llvm::SlotTracker **)this + 4), (const llvm::Value *)v63);
        size_t v73 = *(llvm::raw_ostream **)this;
        uint64_t v74 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v74 > 1uLL)
        {
          *uint64_t v74 = 9504;
          *((void *)v73 + 4) += 2;
        }
        else
        {
          size_t v73 = llvm::raw_ostream::write(v73, " %", 2uLL);
        }
        llvm::write_integer(v73, LocalSlot, 0, 0);
      }
      v63 += 40;
    }
    while (v63 != v64);
  }
LABEL_158:
  if (*(_DWORD *)(v152 + 8) >= 0x100u)
  {
    if (*(_DWORD *)(v152 + 12) != 1)
    {
      uint64_t v82 = *(llvm::raw_ostream **)this;
      uint64_t v83 = *(_WORD **)(*(void *)this + 32);
      if (*(void *)(*(void *)this + 24) - (void)v83 > 1uLL)
      {
        *uint64_t v83 = 8236;
        *((void *)v82 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v82, ", ", 2uLL);
      }
    }
    uint64_t v84 = *(llvm::raw_ostream **)this;
    uint64_t v85 = *(void *)(*(void *)this + 32);
    if ((unint64_t)(*(void *)(*(void *)this + 24) - v85) > 2)
    {
      *(unsigned char *)(v85 + 2) = 46;
      *(_WORD *)uint64_t v85 = 11822;
      *((void *)v84 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v84, "...", 3uLL);
    }
  }
  int v86 = *(llvm::raw_ostream **)this;
  uint64_t v87 = *(unsigned char **)(*(void *)this + 32);
  if ((unint64_t)v87 >= *(void *)(*(void *)this + 24))
  {
    llvm::raw_ostream::write(v86, 41);
  }
  else
  {
    *((void *)v86 + 4) = v87 + 1;
    *uint64_t v87 = 41;
  }
  if (*((_DWORD *)a2 + 8) >> 6)
  {
    if (*((_DWORD *)a2 + 8) >> 6 == 1)
    {
      uint64_t v88 = "local_unnamed_addr";
      size_t v89 = 18;
    }
    else
    {
      uint64_t v88 = "unnamed_addr";
      size_t v89 = 12;
    }
    int v90 = *(llvm::raw_ostream **)this;
    size_t v91 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v91 >= *(void *)(*(void *)this + 24))
    {
      int v90 = llvm::raw_ostream::write(v90, 32);
    }
    else
    {
      *((void *)v90 + 4) = v91 + 1;
      *size_t v91 = 32;
    }
    llvm::raw_ostream::operator<<(v90, v88, v89);
  }
  if (*(_DWORD *)(*(void *)a2 + 8) <= 0xFFu)
  {
    uint64_t v92 = *((void *)a2 + 5);
    if (v92)
    {
      if (!*(_DWORD *)(v92 + 268))
      {
LABEL_185:
        if (!v7) {
          goto LABEL_197;
        }
        goto LABEL_188;
      }
    }
  }
  unint64_t v93 = *(llvm::raw_ostream **)this;
  uint64_t v94 = *(void *)(*(void *)this + 32);
  if ((unint64_t)(*(void *)(*(void *)this + 24) - v94) > 0xA)
  {
    *(_DWORD *)(v94 + 7) = 677733217;
    *(void *)uint64_t v94 = *(void *)" addrspace(";
    *((void *)v93 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " addrspace(", 0xBuLL);
  }
  write_unsigned<unsigned long>(v93, (unint64_t)*(unsigned int *)(*(void *)a2 + 8) >> 8, 0, 0, 0);
  uint64_t v95 = (unsigned char *)*((void *)v93 + 4);
  if (*((unsigned char **)v93 + 3) != v95)
  {
    *uint64_t v95 = 41;
    ++*((void *)v93 + 4);
    goto LABEL_185;
  }
  llvm::raw_ostream::write(v93, ")", 1uLL);
  if (!v7) {
    goto LABEL_197;
  }
LABEL_188:
  if (*(_DWORD *)(v7 + 8) && *(void *)(v7 + 40))
  {
    size_t v96 = *(llvm::raw_ostream **)this;
    int64_t v97 = *(_WORD **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v97 > 1uLL)
    {
      *int64_t v97 = 8992;
      *((void *)v96 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " #", 2uLL);
    }
    if (*(_DWORD *)(v7 + 8)) {
      uint64_t v98 = *(void *)(v7 + 40);
    }
    else {
      uint64_t v98 = 0;
    }
    int AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot(*((void *)this + 4), v98);
    llvm::write_integer(v96, AttributeGroupSlot, 0, 0);
  }
LABEL_197:
  if ((*((unsigned char *)a2 + 34) & 0x80) != 0)
  {
    uint64_t v100 = *(llvm::raw_ostream **)this;
    uint64_t v101 = *(void *)(*(void *)this + 32);
    if ((unint64_t)(*(void *)(*(void *)this + 24) - v101) > 9)
    {
      *(_WORD *)(v101 + 8) = 8736;
      *(void *)uint64_t v101 = *(void *)" section \"";
      *((void *)v100 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v100, " section \"", 0xAuLL);
    }
    if ((*((unsigned char *)a2 + 34) & 0x80) != 0)
    {
      size_t v104 = (uint64_t *)(***(void ***)a2 + 2552);
      v155.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
      uint64_t v105 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v104, &v155);
      uint64_t v102 = (llvm::raw_ostream *)v105[1];
      uint64_t v103 = v105[2];
    }
    else
    {
      uint64_t v102 = 0;
      uint64_t v103 = 0;
    }
    llvm::printEscapedString(v102, v103, *(llvm::raw_ostream **)this);
    uint64_t v106 = *(llvm::raw_ostream **)this;
    unint64_t v107 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v107 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v106, 34);
    }
    else
    {
      *((void *)v106 + 4) = v107 + 1;
      unsigned char *v107 = 34;
    }
  }
  if ((*((unsigned char *)a2 + 33) & 0x80) != 0)
  {
    uint64_t v108 = *(llvm::raw_ostream **)this;
    uint64_t v109 = *(void *)(*(void *)this + 32);
    if ((unint64_t)(*(void *)(*(void *)this + 24) - v109) > 0xB)
    {
      *(_DWORD *)(v109 + 8) = 572550767;
      *(void *)uint64_t v109 = *(void *)" partition \"";
      *((void *)v108 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v108, " partition \"", 0xCuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition(a2);
    llvm::printEscapedString(Partition, v111, *(llvm::raw_ostream **)this);
    unint64_t v112 = *(llvm::raw_ostream **)this;
    uint64_t v113 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v113 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v112, 34);
    }
    else
    {
      *((void *)v112 + 4) = v113 + 1;
      *uint64_t v113 = 34;
    }
  }
  maybePrintComdat(*(llvm::raw_ostream **)this, (uint64_t)a2);
  unint64_t v114 = ((unint64_t)*((unsigned int *)a2 + 8) >> 17) & 0x3F;
  if (v114)
  {
    char v115 = v114 - 1;
    unint64_t v116 = *(llvm::raw_ostream **)this;
    long long v117 = *(_DWORD **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v117 > 6uLL)
    {
      *(_DWORD *)((char *)v117 + 3) = 544106345;
      *long long v117 = 1768710432;
      *((void *)v116 + 4) += 7;
    }
    else
    {
      unint64_t v116 = llvm::raw_ostream::write(v116, " align ", 7uLL);
    }
    write_unsigned<unsigned long>(v116, 1 << v115, 0, 0, 0);
  }
  if ((*((_WORD *)a2 + 9) & 0x4000) != 0)
  {
    long long v118 = *(llvm::raw_ostream **)this;
    uint64_t v119 = *(void *)(*(void *)this + 32);
    if ((unint64_t)(*(void *)(*(void *)this + 24) - v119) > 4)
    {
      *(unsigned char *)(v119 + 4) = 34;
      *(_DWORD *)uint64_t v119 = 543385376;
      *((void *)v118 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " gc \"", 5uLL);
    }
    uint64_t v120 = (uint64_t *)(***(void ***)a2 + 2696);
    v155.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    uint64_t v121 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>,llvm::Function const*,std::string,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,std::string>>::FindAndConstruct(v120, (uint64_t *)&v155);
    uint64_t v124 = (const char *)v121[1];
    uint64_t v122 = (const char *)(v121 + 1);
    int64x2_t v123 = v124;
    int v125 = v122[23];
    if (v125 >= 0) {
      uint64_t v126 = v122;
    }
    else {
      uint64_t v126 = v123;
    }
    if (v125 >= 0) {
      size_t v127 = *((unsigned __int8 *)v122 + 23);
    }
    else {
      size_t v127 = *((void *)v122 + 1);
    }
    llvm::raw_ostream::write(v118, v126, v127);
    long long v128 = (unsigned char *)*((void *)v118 + 4);
    if ((unint64_t)v128 >= *((void *)v118 + 3))
    {
      llvm::raw_ostream::write(v118, 34);
    }
    else
    {
      *((void *)v118 + 4) = v128 + 1;
      *long long v128 = 34;
    }
  }
  __int16 v129 = *((_WORD *)a2 + 9);
  if ((v129 & 2) != 0)
  {
    long long v130 = *(llvm::raw_ostream **)this;
    long long v131 = *(void **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v131 > 7uLL)
    {
      *long long v131 = 0x2078696665727020;
      *((void *)v130 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v130, " prefix ", 8uLL);
    }
    int v132 = *((_DWORD *)a2 + 5);
    if ((v132 & 0x40000000) != 0) {
      long long v133 = (llvm::Type ***)*((void *)a2 - 1);
    }
    else {
      long long v133 = (llvm::Type ***)((char *)a2 - 32 * (v132 & 0x7FFFFFF));
    }
    __int16 v129 = *((_WORD *)a2 + 9);
    if ((v129 & 4) == 0)
    {
LABEL_234:
      if ((v129 & 8) == 0) {
        goto LABEL_257;
      }
      goto LABEL_250;
    }
  }
  else if ((v129 & 4) == 0)
  {
    goto LABEL_234;
  }
  long long v134 = *(llvm::raw_ostream **)this;
  uint64_t v135 = *(void *)(*(void *)this + 32);
  if ((unint64_t)(*(void *)(*(void *)this + 24) - v135) > 9)
  {
    *(_WORD *)(v135 + 8) = 8293;
    *(void *)uint64_t v135 = *(void *)" prologue ";
    *((void *)v134 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v134, " prologue ", 0xAuLL);
  }
  int v136 = *((_DWORD *)a2 + 5);
  if ((v136 & 0x40000000) != 0) {
    long long v137 = (llvm::Type ***)*((void *)a2 - 1);
  }
  else {
    long long v137 = (llvm::Type ***)((char *)a2 - 32 * (v136 & 0x7FFFFFF));
  }
  if ((*((_WORD *)a2 + 9) & 8) != 0)
  {
LABEL_250:
    long long v138 = *(llvm::raw_ostream **)this;
    uint64_t v139 = *(void **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v139 > 0xCuLL)
    {
      qmemcpy(v139, " personality ", 13);
      *((void *)v138 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v138, " personality ", 0xDuLL);
    }
    int v140 = *((_DWORD *)a2 + 5);
    if ((v140 & 0x40000000) != 0) {
      long long v141 = (llvm::Type ***)*((void *)a2 - 1);
    }
    else {
      long long v141 = (llvm::Type ***)((char *)a2 - 32 * (v140 & 0x7FFFFFF));
    }
  }
LABEL_257:
  if (a2 && *((unsigned char *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
    {
LABEL_260:
      uint64_t v142 = *(llvm::raw_ostream **)this;
      unint64_t v143 = *(unsigned char **)(*(void *)this + 32);
      if ((unint64_t)v143 >= *(void *)(*(void *)this + 24))
      {
        llvm::raw_ostream::write(v142, 10);
      }
      else
      {
        *((void *)v142 + 4) = v143 + 1;
        *unint64_t v143 = 10;
      }
      goto LABEL_279;
    }
  }
  else if (!*((unsigned char *)a2 + 16) {
         && *((const llvm::Function **)a2 + 9) == (const llvm::Function *)((char *)a2 + 72)
  }
         && (*((unsigned char *)a2 + 35) & 1) == 0)
  {
    goto LABEL_260;
  }
  v155.__r_.__value_.__r.__words[0] = (std::string::size_type)&v155.__r_.__value_.__r.__words[2];
  v155.__r_.__value_.__l.__size_ = 0x400000000;
  llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&v155);
  uint64_t v144 = *(llvm::raw_ostream **)this;
  uint64_t v145 = *(_WORD **)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 24) - (void)v145 > 1uLL)
  {
    *uint64_t v145 = 31520;
    *((void *)v144 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v144, " {", 2uLL);
  }
  for (uint64_t i = (void *)*((void *)a2 + 10); i != (void *)((char *)a2 + 72); uint64_t i = (void *)i[1])
  {
    if (i) {
      uint64_t v147 = (const llvm::BasicBlock *)(i - 3);
    }
    else {
      uint64_t v147 = 0;
    }
  }
  unint64_t v148 = *(llvm::raw_ostream **)this;
  uint64_t v149 = *(_WORD **)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 24) - (void)v149 > 1uLL)
  {
    *uint64_t v149 = 2685;
    *((void *)v148 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v148, "}\n", 2uLL);
  }
  if ((std::string::size_type *)v155.__r_.__value_.__l.__data_ != &v155.__r_.__value_.__r.__words[2]) {
    free(v155.__r_.__value_.__l.__data_);
  }
LABEL_279:
  uint64_t v150 = *((void *)this + 4);
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>::clear((_DWORD *)(v150 + 136));
  *(void *)(v150 + 16) = 0;
  *(unsigned char *)(v150 + 24) = 0;
  return result;
}

void anonymous namespace'::AssemblyWriter::~AssemblyWriter(_anonymous_namespace_::AssemblyWriter *this)
{
  MEMORY[0x263E500A0](*((void *)this + 75), 8);
  int v2 = (char *)*((void *)this + 57);
  if (v2 != (char *)this + 472) {
    free(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 39);
  if (v3 != (char *)this + 328) {
    free(v3);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>,llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>::destroyAll((uint64_t)this + 288);
  MEMORY[0x263E500A0](*((void *)this + 36), 8);
  uint64_t v4 = (void *)*((void *)this + 32);
  if (v4)
  {
    *((void *)this + 33) = v4;
    operator delete(v4);
  }
  MEMORY[0x263E500A0](*((void *)this + 29), 8);
  int v5 = (void *)*((void *)this + 25);
  if (v5)
  {
    *((void *)this + 26) = v5;
    operator delete(v5);
  }
  MEMORY[0x263E500A0](*((void *)this + 22), 8);
  uint64_t v6 = (void *)*((void *)this + 18);
  if (v6)
  {
    *((void *)this + 19) = v6;
    operator delete(v6);
  }
  MEMORY[0x263E500A0](*((void *)this + 15), 8);
  MEMORY[0x263E500A0](*((void *)this + 12), 8);
  MEMORY[0x263E500A0](*((void *)this + 9), 8);
  MEMORY[0x263E500A0](*((void *)this + 6), 8);
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
}

llvm::SlotTracker *anonymous namespace'::AssemblyWriter::printBasicBlock(llvm::SlotTracker **this, const llvm::BasicBlock *a2)
{
  uint64_t v4 = *((void *)a2 + 7);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 80);
    if (v5) {
      uint64_t v6 = (const llvm::BasicBlock *)(v5 - 24);
    }
    else {
      uint64_t v6 = 0;
    }
    BOOL v7 = v6 == a2;
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
    {
      if (v6 == a2) {
        goto LABEL_62;
      }
LABEL_9:
      uint64_t v8 = *this;
      uint64_t v9 = (unsigned char *)*((void *)*this + 4);
      if (*((unsigned char **)*this + 3) == v9)
      {
        llvm::raw_ostream::write(v8, "\n", 1uLL);
      }
      else
      {
        unsigned char *v9 = 10;
        ++*((void *)v8 + 4);
      }
      int LocalSlot = llvm::SlotTracker::getLocalSlot(this[4], a2);
      size_t v19 = *this;
      if (LocalSlot == -1)
      {
        uint64_t v22 = *((void *)v19 + 4);
        if ((unint64_t)(*((void *)v19 + 3) - v22) > 8)
        {
          *(unsigned char *)(v22 + 8) = 58;
          *(void *)uint64_t v22 = *(void *)"<badref>:";
          uint64_t v21 = *((void *)v19 + 4) + 9;
          goto LABEL_32;
        }
        char v23 = "<badref>:";
        char v24 = *this;
        size_t v25 = 9;
      }
      else
      {
        llvm::write_integer(*this, LocalSlot, 0, 0);
        int v20 = (unsigned char *)*((void *)v19 + 4);
        if (*((unsigned char **)v19 + 3) != v20)
        {
          *int v20 = 58;
          uint64_t v21 = *((void *)v19 + 4) + 1;
LABEL_32:
          *((void *)v19 + 4) = v21;
          goto LABEL_33;
        }
        char v23 = ":";
        char v24 = v19;
        size_t v25 = 1;
      }
      llvm::raw_ostream::write(v24, v23, v25);
      goto LABEL_33;
    }
  }
  else
  {
    if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
      goto LABEL_9;
    }
    BOOL v7 = 0;
  }
  uint64_t v10 = *this;
  uint64_t v11 = (unsigned char *)*((void *)*this + 4);
  if (*((unsigned char **)*this + 3) == v11)
  {
    llvm::raw_ostream::write(v10, "\n", 1uLL);
  }
  else
  {
    *uint64_t v11 = 10;
    ++*((void *)v10 + 4);
  }
  uint64_t v12 = *this;
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    Valueuint64_t Name = (size_t *)llvm::Value::getValueName((uint64_t ***)a2);
    std::string::size_type v14 = (llvm::raw_ostream *)(ValueName + 2);
    size_t v13 = *ValueName;
  }
  else
  {
    size_t v13 = 0;
    std::string::size_type v14 = (llvm::raw_ostream *)&str_3_24;
  }
  llvm::printLLVMNameWithoutPrefix(v12, v14, v13);
  uint64_t v16 = *this;
  uint64_t v17 = (unsigned char *)*((void *)*this + 4);
  if ((unint64_t)v17 >= *((void *)*this + 3))
  {
    llvm::raw_ostream::write(v16, 58);
    if (v7) {
      goto LABEL_62;
    }
  }
  else
  {
    *((void *)v16 + 4) = v17 + 1;
    unsigned char *v17 = 58;
    if (v7) {
      goto LABEL_62;
    }
  }
LABEL_33:
  llvm::formatted_raw_ostream::PadToColumn((char **)*this, 50);
  uint64_t v26 = *this;
  uint64_t v27 = (unsigned char *)*((void *)*this + 4);
  if (*((unsigned char **)*this + 3) == v27)
  {
    llvm::raw_ostream::write(v26, ";", 1uLL);
  }
  else
  {
    *uint64_t v27 = 59;
    ++*((void *)v26 + 4);
  }
  uint64_t v28 = *((void *)a2 + 1);
  if (v28)
  {
    while (1)
    {
      uint64_t v29 = *(void *)(v28 + 24);
      unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
      BOOL v31 = v29 && v30 >= 0x1C;
      if (v31 && v30 - 29 < 0xB) {
        break;
      }
      uint64_t v28 = *(void *)(v28 + 8);
      if (!v28) {
        goto LABEL_46;
      }
    }
    size_t v35 = *this;
    uint64_t v36 = *((void *)*this + 4);
    if ((unint64_t)(*((void *)*this + 3) - v36) > 8)
    {
      *(unsigned char *)(v36 + 8) = 32;
      *(void *)uint64_t v36 = *(void *)" preds = ";
      *((void *)v35 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v35, " preds = ", 9uLL);
    }
    uint64_t v37 = *(void *)(v28 + 8);
    if (v37)
    {
      while (1)
      {
        uint64_t v38 = *(void *)(v37 + 24);
        unsigned int v39 = *(unsigned __int8 *)(v38 + 16);
        BOOL v40 = v38 && v39 >= 0x1C;
        if (v40 && v39 - 29 <= 0xA) {
          break;
        }
        uint64_t v37 = *(void *)(v37 + 8);
        if (!v37) {
          goto LABEL_62;
        }
      }
LABEL_80:
      uint64_t v51 = *this;
      uint64_t v52 = (_WORD *)*((void *)*this + 4);
      if (*((void *)*this + 3) - (void)v52 > 1uLL)
      {
        *uint64_t v52 = 8236;
        *((void *)v51 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v51, ", ", 2uLL);
      }
      while (1)
      {
        uint64_t v37 = *(void *)(v37 + 8);
        if (!v37) {
          break;
        }
        uint64_t v53 = *(void *)(v37 + 24);
        unsigned int v54 = *(unsigned __int8 *)(v53 + 16);
        if (v53) {
          BOOL v55 = v54 >= 0x1C;
        }
        else {
          BOOL v55 = 0;
        }
        if (v55 && v54 - 29 < 0xB) {
          goto LABEL_80;
        }
      }
    }
  }
  else
  {
LABEL_46:
    uint64_t v33 = *this;
    uint64_t v34 = *((void *)*this + 4);
    if ((unint64_t)(*((void *)*this + 3) - v34) > 0x10)
    {
      *(unsigned char *)(v34 + 16) = 33;
      *(_OWORD *)uint64_t v34 = *(_OWORD *)" No predecessors!";
      *((void *)v33 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v33, " No predecessors!", 0x11uLL);
    }
  }
LABEL_62:
  uint64_t v42 = *this;
  unsigned int v43 = (unsigned char *)*((void *)*this + 4);
  if (*((unsigned char **)*this + 3) == v43)
  {
    llvm::raw_ostream::write(v42, "\n", 1uLL);
  }
  else
  {
    *unsigned int v43 = 10;
    ++*((void *)v42 + 4);
  }
  uint64_t v44 = this[28];
  if (v44) {
    (*(void (**)(llvm::SlotTracker *, const llvm::BasicBlock *, llvm::SlotTracker *))(*(void *)v44 + 24))(v44, a2, *this);
  }
  for (uint64_t i = (void *)*((void *)a2 + 6); i != (void *)((char *)a2 + 40); uint64_t i = (void *)i[1])
  {
    if (i) {
      unint64_t v46 = (const llvm::Instruction *)(i - 3);
    }
    else {
      unint64_t v46 = 0;
    }
    std::string::size_type v47 = *this;
    uint64_t v48 = (unsigned char *)*((void *)*this + 4);
    if ((unint64_t)v48 >= *((void *)*this + 3))
    {
      llvm::raw_ostream::write(v47, 10);
    }
    else
    {
      *((void *)v47 + 4) = v48 + 1;
      unsigned char *v48 = 10;
    }
  }
  uint64_t result = this[28];
  if (result)
  {
    uint64_t v50 = *(uint64_t (**)(void))(*(void *)result + 32);
    return (llvm::SlotTracker *)v50();
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::AssemblyWriter::printNamedMDNode(llvm::raw_ostream **this, const llvm::NamedMDNode *a2)
{
  uint64_t v4 = *this;
  uint64_t v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 33);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    unsigned char *v5 = 33;
  }
  int v6 = *((char *)a2 + 39);
  if (v6 >= 0) {
    BOOL v7 = (const llvm::NamedMDNode *)((char *)a2 + 16);
  }
  else {
    BOOL v7 = (llvm::raw_ostream *)*((void *)a2 + 2);
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)a2 + 39);
  }
  else {
    uint64_t v8 = *((void *)a2 + 3);
  }
  printMetadataIdentifier(v7, v8, *this);
  uint64_t v9 = *this;
  uint64_t v10 = *((void *)*this + 4);
  if ((unint64_t)(*((void *)*this + 3) - v10) > 4)
  {
    *(unsigned char *)(v10 + 4) = 123;
    *(_DWORD *)uint64_t v10 = 555760928;
    *((void *)v9 + 4) += 5;
  }
  else
  {
    uint64_t v9 = llvm::raw_ostream::write(v9, " = !{", 5uLL);
  }
  uint64_t v11 = *(unsigned int *)(*((void *)a2 + 6) + 8);
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 8 * v11;
    do
    {
      if (v12)
      {
        uint64_t v9 = *this;
        std::string::size_type v14 = (_WORD *)*((void *)*this + 4);
        if (*((void *)*this + 3) - (void)v14 > 1uLL)
        {
          *std::string::size_type v14 = 8236;
          *((void *)v9 + 4) += 2;
        }
        else
        {
          uint64_t v9 = llvm::raw_ostream::write(v9, ", ", 2uLL);
        }
      }
      std::string::size_type v15 = *(unsigned int ***)(**((void **)a2 + 6) + v12);
      if (*(unsigned char *)v15 == 6)
      {
        uint64_t v16 = *this;
        uint64_t v9 = (llvm::raw_ostream *)writeDIExpression(v16, v15, v17);
      }
      else
      {
        int v18 = (*(uint64_t (**)(llvm::raw_ostream *, void))(*(void *)this[4] + 32))(this[4], *(void *)(**((void **)a2 + 6) + v12));
        uint64_t v9 = *this;
        if (v18 == -1)
        {
          int v20 = (void *)*((void *)v9 + 4);
          if (*((void *)v9 + 3) - (void)v20 > 7uLL)
          {
            *int v20 = 0x3E6665726461623CLL;
            *((void *)v9 + 4) += 8;
          }
          else
          {
            uint64_t v9 = llvm::raw_ostream::write(v9, "<badref>", 8uLL);
          }
        }
        else
        {
          size_t v19 = (unsigned char *)*((void *)v9 + 4);
          if ((unint64_t)v19 >= *((void *)v9 + 3))
          {
            uint64_t v9 = llvm::raw_ostream::write(v9, 33);
          }
          else
          {
            *((void *)v9 + 4) = v19 + 1;
            *size_t v19 = 33;
          }
          uint64_t v9 = llvm::write_integer(v9, v18, 0, 0);
        }
      }
      v12 += 8;
    }
    while (v13 != v12);
  }
  uint64_t result = *this;
  uint64_t v22 = (_WORD *)*((void *)*this + 4);
  if (*((void *)*this + 3) - (void)v22 > 1uLL)
  {
    *uint64_t v22 = 2685;
    *((void *)result + 4) += 2;
  }
  else
  {
    return llvm::raw_ostream::write(result, "}\n", 2uLL);
  }
  return result;
}

void llvm::NamedMDNode::print(llvm::NamedMDNode *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, char a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  v22[0] = 0;
  char v23 = 0;
  Machine = (unsigned char *)llvm::ModuleSlotTracker::getMachine(a3);
  if (!Machine)
  {
    v21[0] = *((llvm::raw_ostream **)this + 5);
    Machine = v22;
    std::optional<llvm::SlotTracker>::emplace[abi:nn180100]<llvm::Module const*,void>((llvm::SlotTracker *)v22, (uint64_t *)v21);
  }
  int v9 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  int v15 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = &unk_270DBCD60;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = &v20;
  long long v19 = xmmword_261E8D150;
  llvm::formatted_raw_ostream::setStream((llvm::formatted_raw_ostream *)&v8, a2);
  llvm::formatted_raw_ostream::~formatted_raw_ostream((llvm::formatted_raw_ostream *)&v8);
  if (v23) {
    llvm::SlotTracker::~SlotTracker((llvm::SlotTracker *)v22);
  }
}

void std::optional<llvm::SlotTracker>::emplace[abi:nn180100]<llvm::Module const*,void>(llvm::SlotTracker *a1, uint64_t *a2)
{
  if (*((unsigned char *)a1 + 328)) {
    llvm::SlotTracker::~SlotTracker(a1);
  }
  llvm::SlotTracker::SlotTracker((uint64_t)a1, *a2, 0);
  *(unsigned char *)(v3 + 328) = 1;
}

llvm::raw_ostream *PrintLLVMName(llvm::raw_ostream *a1, llvm::raw_ostream *a2, size_t a3, int a4)
{
  if (a4 == 3)
  {
    int v6 = (char *)*((void *)a1 + 4);
    if ((unint64_t)v6 < *((void *)a1 + 3))
    {
      *((void *)a1 + 4) = v6 + 1;
      char v7 = 37;
      goto LABEL_10;
    }
    char v8 = 37;
  }
  else if (a4 == 1)
  {
    int v6 = (char *)*((void *)a1 + 4);
    if ((unint64_t)v6 < *((void *)a1 + 3))
    {
      *((void *)a1 + 4) = v6 + 1;
      char v7 = 36;
      goto LABEL_10;
    }
    char v8 = 36;
  }
  else
  {
    if (a4) {
      goto LABEL_15;
    }
    int v6 = (char *)*((void *)a1 + 4);
    if ((unint64_t)v6 < *((void *)a1 + 3))
    {
      *((void *)a1 + 4) = v6 + 1;
      char v7 = 64;
LABEL_10:
      char *v6 = v7;
      goto LABEL_15;
    }
    char v8 = 64;
  }
  a1 = llvm::raw_ostream::write(a1, v8);
LABEL_15:
  return llvm::printLLVMNameWithoutPrefix(a1, a2, a3);
}

uint64_t llvm::Type::print(llvm::Type *this, llvm::raw_ostream *a2, BOOL a3, char a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  std::string __p = 0;
  unsigned int v30 = 0;
  uint64_t v31 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  if ((a4 & 1) == 0 && this && (*((_DWORD *)this + 2) & 0x4FF) == 0x10)
  {
    char v7 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v7 > 7uLL)
    {
      void *v7 = 0x2065707974203D20;
      *((void *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, " = type ", 8uLL);
    }
  }
  if (__p)
  {
    unsigned int v30 = __p;
    operator delete(__p);
  }
  MEMORY[0x263E500A0](v26, 8);
  if (v22)
  {
    char v23 = v22;
    operator delete(v22);
  }
  MEMORY[0x263E500A0](v19, 8);
  MEMORY[0x263E500A0](v16, 8);
  MEMORY[0x263E500A0](v13, 8);
  return MEMORY[0x263E500A0](v10, 8);
}

llvm::raw_ostream *anonymous namespace'::TypePrinting::print(llvm::raw_ostream *this, llvm::Type *a2, uint64_t **a3)
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = (llvm::raw_ostream *)a3;
  int v6 = this;
  switch((char)v3)
  {
    case 1:
      int v12 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v12) <= 5)
      {
        uint64_t v11 = "bfloat";
        goto LABEL_12;
      }
      *((_WORD *)v12 + 2) = 29793;
      int v32 = 1869375074;
      goto LABEL_63;
    case 2:
      uint64_t v13 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v13) <= 4)
      {
        uint64_t v11 = "float";
        goto LABEL_34;
      }
      *((unsigned char *)v13 + 4) = 116;
      int v33 = 1634692198;
      goto LABEL_76;
    case 3:
      int v12 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v12) <= 5)
      {
        uint64_t v11 = "double";
LABEL_12:
        uint64_t v14 = (llvm::raw_ostream *)a3;
        size_t v15 = 6;
        goto LABEL_142;
      }
      *((_WORD *)v12 + 2) = 25964;
      int v32 = 1651863396;
LABEL_63:
      *(_DWORD *)int v12 = v32;
      uint64_t v34 = (uint64_t)a3[4] + 6;
      goto LABEL_140;
    case 4:
      uint64_t v16 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v16) <= 7)
      {
        uint64_t v11 = "x86_fp80";
        goto LABEL_26;
      }
      uint64_t v35 = 0x303870665F363878;
      goto LABEL_71;
    case 5:
      uint64_t v13 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v13) <= 4)
      {
        uint64_t v11 = "fp128";
        goto LABEL_34;
      }
      *((unsigned char *)v13 + 4) = 56;
      int v33 = 842100838;
      goto LABEL_76;
    case 6:
      uint64_t v17 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v17) <= 8)
      {
        uint64_t v11 = "ppc_fp128";
        uint64_t v14 = (llvm::raw_ostream *)a3;
        size_t v15 = 9;
        goto LABEL_142;
      }
      *((unsigned char *)v17 + 8) = 56;
      uint64_t *v17 = *(void *)"ppc_fp128";
      uint64_t v34 = (uint64_t)a3[4] + 9;
      goto LABEL_140;
    case 7:
      uint64_t v10 = (int *)a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v10) <= 3)
      {
        uint64_t v11 = "void";
        goto LABEL_21;
      }
      int v31 = 1684631414;
      goto LABEL_68;
    case 8:
      uint64_t v13 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v13) <= 4)
      {
        uint64_t v11 = "label";
        goto LABEL_34;
      }
      *((unsigned char *)v13 + 4) = 108;
      int v33 = 1700946284;
      goto LABEL_76;
    case 9:
      uint64_t v16 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v16) <= 7)
      {
        uint64_t v11 = "metadata";
LABEL_26:
        uint64_t v14 = (llvm::raw_ostream *)a3;
        size_t v15 = 8;
        goto LABEL_142;
      }
      uint64_t v35 = 0x617461646174656DLL;
LABEL_71:
      *uint64_t v16 = v35;
      uint64_t v34 = (uint64_t)(a3[4] + 1);
      goto LABEL_140;
    case 10:
      int v18 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v18) <= 6)
      {
        uint64_t v11 = "x86_mmx";
        goto LABEL_31;
      }
      unsigned __int16 v36 = 27999;
      goto LABEL_74;
    case 11:
      int v18 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v18) <= 6)
      {
        uint64_t v11 = "x86_amx";
LABEL_31:
        uint64_t v14 = (llvm::raw_ostream *)a3;
        size_t v15 = 7;
        goto LABEL_142;
      }
      unsigned __int16 v36 = 24927;
LABEL_74:
      *(_DWORD *)((char *)v18 + 3) = v36 | 0x786D0000;
      *(_DWORD *)int v18 = 1597388920;
      uint64_t v34 = (uint64_t)a3[4] + 7;
      goto LABEL_140;
    case 12:
      uint64_t v13 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v13) <= 4)
      {
        uint64_t v11 = "token";
LABEL_34:
        uint64_t v14 = (llvm::raw_ostream *)a3;
        size_t v15 = 5;
        goto LABEL_142;
      }
      *((unsigned char *)v13 + 4) = 110;
      int v33 = 1701539700;
LABEL_76:
      *(_DWORD *)uint64_t v13 = v33;
      uint64_t v34 = (uint64_t)a3[4] + 5;
      goto LABEL_140;
    case 13:
      uint64_t v19 = a3[4];
      if (v19 >= a3[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a3, 105);
      }
      else
      {
        a3[4] = (uint64_t *)((char *)v19 + 1);
        *(unsigned char *)uint64_t v19 = 105;
      }
      unint64_t v37 = (unint64_t)*((unsigned int *)a2 + 2) >> 8;
      goto LABEL_79;
    case 14:
      uint64_t v20 = (_WORD *)*((void *)v4 + 4);
      if (*((void *)v4 + 3) - (void)v20 > 1uLL)
      {
        *uint64_t v20 = 10272;
        *((void *)v4 + 4) += 2;
      }
      else
      {
        this = llvm::raw_ostream::write(v4, " (", 2uLL);
      }
      uint64_t v38 = 8 * *((unsigned int *)a2 + 3);
      uint64_t v39 = v38 - 8;
      if (v38 != 8)
      {
        char v40 = 0;
        uint64_t v41 = (llvm::Type **)(*((void *)a2 + 2) + 8);
        uint64_t v42 = 8 * (v39 >> 3);
        do
        {
          uint64_t v44 = *v41++;
          unsigned int v43 = v44;
          if (v40) {
            size_t v45 = ", ";
          }
          else {
            size_t v45 = 0;
          }
          if (v40) {
            size_t v46 = 2;
          }
          else {
            size_t v46 = 0;
          }
          llvm::raw_ostream::operator<<(v4, v45, v46);
          char v40 = 1;
          v42 -= 8;
        }
        while (v42);
      }
      if (*((_DWORD *)a2 + 2) > 0xFFu)
      {
        if (v39) {
          std::string::size_type v47 = ", ";
        }
        else {
          std::string::size_type v47 = 0;
        }
        this = llvm::raw_ostream::operator<<(v4, v47, 2 * (v39 != 0));
        uint64_t v48 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v48) > 2)
        {
          *(unsigned char *)(v48 + 2) = 46;
          *(_WORD *)uint64_t v48 = 11822;
          *((void *)this + 4) += 3;
        }
        else
        {
          this = llvm::raw_ostream::write(this, "...", 3uLL);
        }
      }
      goto LABEL_149;
    case 15:
      if (*((void *)a2 + 3))
      {
        unint64_t v21 = *((unsigned int *)a2 + 2);
        if (v21 >= 0x100)
        {
          unint64_t v22 = v21 >> 8;
          char v23 = llvm::raw_ostream::operator<<(v4, " addrspace(", 0xBuLL);
          this = write_unsigned<unsigned long>(v23, v22, 0, 0, 0);
          uint64_t v24 = (unsigned char *)*((void *)v23 + 4);
          if ((unint64_t)v24 >= *((void *)v23 + 3))
          {
            this = llvm::raw_ostream::write(v23, 41);
          }
          else
          {
            *((void *)v23 + 4) = v24 + 1;
            *uint64_t v24 = 41;
          }
        }
        uint64_t v53 = (char *)*((void *)v4 + 4);
        if ((unint64_t)v53 < *((void *)v4 + 3))
        {
          *((void *)v4 + 4) = v53 + 1;
          char v54 = 42;
          goto LABEL_155;
        }
        BOOL v55 = v4;
        char v56 = 42;
      }
      else
      {
        this = llvm::raw_ostream::operator<<((llvm::raw_ostream *)a3, "ptr", 3uLL);
        unint64_t v57 = *((unsigned int *)a2 + 2);
        if (v57 < 0x100) {
          return this;
        }
        unint64_t v58 = v57 >> 8;
        uint64_t v4 = llvm::raw_ostream::operator<<(v4, " addrspace(", 0xBuLL);
        this = write_unsigned<unsigned long>(v4, v58, 0, 0, 0);
LABEL_149:
        uint64_t v53 = (char *)*((void *)v4 + 4);
        if ((unint64_t)v53 < *((void *)v4 + 3))
        {
          *((void *)v4 + 4) = v53 + 1;
          char v54 = 41;
          goto LABEL_155;
        }
        BOOL v55 = v4;
        char v56 = 41;
      }
      goto LABEL_158;
    case 16:
      if ((v3 & 0x400) != 0)
      {
      }
      char v25 = (size_t *)*((void *)a2 + 3);
      if (v25)
      {
        size_t v26 = *v25;
        if (*v25)
        {
          return PrintLLVMName(v4, (llvm::raw_ostream *)(v25 + 2), v26, 3);
        }
      }
      uint64_t v70 = *((void *)v6 + 17);
      uint64_t v71 = *((unsigned int *)v6 + 38);
      unint64_t v72 = llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>,llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>::find(v70, *((_DWORD *)v6 + 38), (uint64_t)a2);
      if ((uint64_t *)(v70 + 16 * v71) != v72)
      {
        size_t v73 = v72;
        uint64_t v74 = (unsigned char *)*((void *)v4 + 4);
        if ((unint64_t)v74 >= *((void *)v4 + 3))
        {
          llvm::raw_ostream::write(v4, 37);
        }
        else
        {
          *((void *)v4 + 4) = v74 + 1;
          *uint64_t v74 = 37;
        }
        unint64_t v37 = *((unsigned int *)v73 + 2);
LABEL_79:
        return write_unsigned<unsigned long>(v4, v37, 0, 0, 0);
      }
      size_t v75 = llvm::raw_ostream::operator<<(v4, "%\"type ", 7uLL);
      this = llvm::write_hex(v75, (unint64_t)a2, 3, 0, 0);
      uint64_t v53 = (char *)*((void *)v75 + 4);
      if ((unint64_t)v53 < *((void *)v75 + 3))
      {
        *((void *)v75 + 4) = v53 + 1;
        char v54 = 34;
        goto LABEL_155;
      }
      BOOL v55 = v75;
      char v56 = 34;
      goto LABEL_158;
    case 17:
      uint64_t v27 = a3[4];
      if (v27 >= a3[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a3, 91);
      }
      else
      {
        a3[4] = (uint64_t *)((char *)v27 + 1);
        *(unsigned char *)uint64_t v27 = 91;
      }
      write_unsigned<unsigned long>(v4, *((void *)a2 + 4), 0, 0, 0);
      uint64_t v49 = *((void *)v4 + 4);
      if ((unint64_t)(*((void *)v4 + 3) - v49) > 2)
      {
        *(unsigned char *)(v49 + 2) = 32;
        *(_WORD *)uint64_t v49 = 30752;
        *((void *)v4 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v4, " x ", 3uLL);
      }
      uint64_t v53 = (char *)*((void *)v4 + 4);
      if ((unint64_t)v53 < *((void *)v4 + 3))
      {
        *((void *)v4 + 4) = v53 + 1;
        char v54 = 93;
        goto LABEL_155;
      }
      BOOL v55 = v4;
      char v56 = 93;
      goto LABEL_158;
    case 18:
    case 19:
      int v7 = v3;
      unint64_t v8 = *((unsigned int *)a2 + 8);
      uint64_t v9 = a3[4];
      if (a3[3] == v9)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a3, "<", 1uLL);
      }
      else
      {
        *(unsigned char *)uint64_t v9 = 60;
        a3[4] = (uint64_t *)((char *)a3[4] + 1);
      }
      if (v7 == 19)
      {
        uint64_t v30 = *((void *)v4 + 4);
        if ((unint64_t)(*((void *)v4 + 3) - v30) > 8)
        {
          *(unsigned char *)(v30 + 8) = 32;
          *(void *)uint64_t v30 = *(void *)"vscale x ";
          *((void *)v4 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v4, "vscale x ", 9uLL);
        }
      }
      write_unsigned<unsigned long>(v4, v8, 0, 0, 0);
      uint64_t v52 = *((void *)v4 + 4);
      if ((unint64_t)(*((void *)v4 + 3) - v52) > 2)
      {
        *(unsigned char *)(v52 + 2) = 32;
        *(_WORD *)uint64_t v52 = 30752;
        *((void *)v4 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v4, " x ", 3uLL);
      }
      uint64_t v53 = (char *)*((void *)v4 + 4);
      if ((unint64_t)v53 >= *((void *)v4 + 3))
      {
        BOOL v55 = v4;
        char v56 = 62;
LABEL_158:
        return llvm::raw_ostream::write(v55, v56);
      }
      else
      {
        *((void *)v4 + 4) = v53 + 1;
        char v54 = 62;
LABEL_155:
        char *v53 = v54;
      }
      return this;
    case 20:
      int v28 = a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v28) > 8)
      {
        *((unsigned char *)v28 + 8) = 40;
        *int v28 = *(void *)"typedptr(";
        a3[4] = (uint64_t *)((char *)a3[4] + 9);
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a3, "typedptr(", 9uLL);
      }
      llvm::Type::print(*((llvm::Type **)a2 + 3), v4, 0, 0);
      uint64_t v50 = (_WORD *)*((void *)v4 + 4);
      if (*((void *)v4 + 3) - (void)v50 > 1uLL)
      {
        *uint64_t v50 = 8236;
        *((void *)v4 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v4, ", ", 2uLL);
      }
      this = write_unsigned<unsigned long>(v4, (unint64_t)*((unsigned int *)a2 + 2) >> 8, 0, 0, 0);
      goto LABEL_138;
    case 21:
      uint64_t v29 = (char *)a3[4];
      if ((unint64_t)((char *)a3[3] - v29) > 7)
      {
        *(void *)uint64_t v29 = 0x2228746567726174;
        ++a3[4];
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a3, "target(\"", 8uLL);
      }
      this = llvm::printEscapedString(*((llvm::raw_ostream **)a2 + 3), *((void *)a2 + 4), v4);
      uint64_t v51 = (unsigned char *)*((void *)v4 + 4);
      if (*((unsigned char **)v4 + 3) == v51)
      {
        this = llvm::raw_ostream::write(v4, "\"", 1uLL);
      }
      else
      {
        *uint64_t v51 = 34;
        ++*((void *)v4 + 4);
      }
      uint64_t v59 = *((unsigned int *)a2 + 3);
      if (v59)
      {
        unint64_t v60 = (llvm::Type **)*((void *)a2 + 2);
        uint64_t v61 = 8 * v59;
        do
        {
          uint64_t v62 = *v60;
          uint64_t v63 = (_WORD *)*((void *)v4 + 4);
          if (*((void *)v4 + 3) - (void)v63 > 1uLL)
          {
            _WORD *v63 = 8236;
            *((void *)v4 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v4, ", ", 2uLL);
          }
          this = (llvm::raw_ostream *)llvm::Type::print(v62, v4, 0, 0);
          ++v60;
          v61 -= 8;
        }
        while (v61);
      }
      unint64_t v64 = *((unsigned int *)a2 + 2);
      if (v64 >= 0x100)
      {
        int v65 = (unsigned int *)*((void *)a2 + 5);
        uint64_t v66 = 4 * (v64 >> 8);
        do
        {
          unint64_t v67 = *v65;
          unsigned int v68 = (_WORD *)*((void *)v4 + 4);
          if (*((void *)v4 + 3) - (void)v68 > 1uLL)
          {
            *unsigned int v68 = 8236;
            *((void *)v4 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v4, ", ", 2uLL);
          }
          this = write_unsigned<unsigned long>(v4, v67, 0, 0, 0);
          ++v65;
          v66 -= 4;
        }
        while (v66);
      }
LABEL_138:
      size_t v69 = (unsigned char *)*((void *)v4 + 4);
      if (*((unsigned char **)v4 + 3) != v69)
      {
        unsigned char *v69 = 41;
        uint64_t v34 = *((void *)v4 + 4) + 1;
        goto LABEL_140;
      }
      uint64_t v11 = ")";
      uint64_t v14 = v4;
      size_t v15 = 1;
      goto LABEL_142;
    default:
      uint64_t v10 = (int *)a3[4];
      if ((unint64_t)((char *)a3[3] - (char *)v10) > 3)
      {
        int v31 = 1718378856;
LABEL_68:
        *uint64_t v10 = v31;
        uint64_t v34 = (uint64_t)a3[4] + 4;
LABEL_140:
        *((void *)v4 + 4) = v34;
      }
      else
      {
        uint64_t v11 = "half";
LABEL_21:
        uint64_t v14 = (llvm::raw_ostream *)a3;
        size_t v15 = 4;
LABEL_142:
        return llvm::raw_ostream::write(v14, v11, v15);
      }
      return this;
  }
}

llvm::raw_ostream *anonymous namespace'::TypePrinting::printStructBody(llvm::raw_ostream *this, llvm::StructType *a2, llvm::raw_ostream *a3)
{
  int v4 = *((_DWORD *)a2 + 2);
  if ((v4 & 0x100) != 0)
  {
    int v7 = this;
    if ((v4 & 0x200) != 0)
    {
      unint64_t v8 = (unsigned char *)*((void *)a3 + 4);
      if ((unint64_t)v8 >= *((void *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, 60);
      }
      else
      {
        *((void *)a3 + 4) = v8 + 1;
        unsigned char *v8 = 60;
      }
    }
    if (*((_DWORD *)a2 + 3))
    {
      uint64_t v9 = (_WORD *)*((void *)a3 + 4);
      if (*((void *)a3 + 3) - (void)v9 > 1uLL)
      {
        _WORD *v9 = 8315;
        *((void *)a3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a3, "{ ", 2uLL);
      }
      uint64_t v11 = *((unsigned int *)a2 + 3);
      if (v11)
      {
        char v12 = 0;
        uint64_t v13 = (llvm::Type **)*((void *)a2 + 2);
        uint64_t v14 = 8 * v11;
        uint64_t v10 = " }";
        do
        {
          uint64_t v16 = *v13++;
          size_t v15 = v16;
          if (v12) {
            uint64_t v17 = ", ";
          }
          else {
            uint64_t v17 = 0;
          }
          if (v12) {
            size_t v18 = 2;
          }
          else {
            size_t v18 = 0;
          }
          llvm::raw_ostream::operator<<(a3, v17, v18);
          char v12 = 1;
          v14 -= 8;
        }
        while (v14);
      }
      else
      {
        uint64_t v10 = " }";
      }
    }
    else
    {
      uint64_t v10 = "{}";
    }
    this = llvm::raw_ostream::operator<<(a3, v10, 2uLL);
    if ((*((unsigned char *)a2 + 9) & 2) != 0)
    {
      uint64_t v19 = (unsigned char *)*((void *)a3 + 4);
      if ((unint64_t)v19 >= *((void *)a3 + 3))
      {
        return llvm::raw_ostream::write(a3, 62);
      }
      else
      {
        *((void *)a3 + 4) = v19 + 1;
        *uint64_t v19 = 62;
      }
    }
  }
  else
  {
    uint64_t v5 = *((void *)a3 + 4);
    if ((unint64_t)(*((void *)a3 + 3) - v5) > 5)
    {
      *(_WORD *)(v5 + 4) = 25973;
      *(_DWORD *)uint64_t v5 = 1902211183;
      *((void *)a3 + 4) += 6;
    }
    else
    {
      return llvm::raw_ostream::write(a3, "opaque", 6uLL);
    }
  }
  return this;
}

uint64_t getModuleFromVal(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 21)
  {
    a1 = *(void *)(a1 + 24);
    if (!a1) {
      return 0;
    }
    return *(void *)(a1 + 40);
  }
  if (a1 && v1 == 22)
  {
    a1 = *(void *)(a1 + 56);
    if (!a1) {
      return 0;
    }
    return *(void *)(a1 + 40);
  }
  if (a1 && v1 >= 0x1C)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      a1 = *(void *)(v2 + 56);
      if (!a1) {
        return 0;
      }
      return *(void *)(a1 + 40);
    }
  }
  else
  {
    if (a1 && v1 < 4) {
      return *(void *)(a1 + 40);
    }
    uint64_t v2 = 0;
    if (a1 && v1 == 23)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      if (!v3) {
        return 0;
      }
      while (1)
      {
        int v4 = *(unsigned __int8 **)(v3 + 24);
        if (v4[16] >= 0x1Cu)
        {
          uint64_t ModuleFromVal = getModuleFromVal((const llvm::Value *)v4);
          if (ModuleFromVal) {
            break;
          }
        }
        uint64_t v2 = 0;
        uint64_t v3 = *(void *)(v3 + 8);
        if (!v3) {
          return v2;
        }
      }
      return ModuleFromVal;
    }
  }
  return v2;
}

void llvm::Value::print(llvm::Value *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, char a4)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  int v21 = 0;
  char v25 = 0;
  uint64_t v26 = 0;
  int v27 = 1;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = (uint64_t *)&unk_270DBCD60;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = &v32;
  long long v31 = xmmword_261E8D150;
  llvm::formatted_raw_ostream::setStream((llvm::formatted_raw_ostream *)&v20, a2);
  Machine = v56;
  llvm::SlotTracker::SlotTracker((uint64_t)v56, 0, 0);
  if (llvm::ModuleSlotTracker::getMachine(a3)) {
    Machine = (unsigned char *)llvm::ModuleSlotTracker::getMachine(a3);
  }
  unsigned int v9 = *((unsigned __int8 *)this + 16);
  if (this && v9 >= 0x1C)
  {
    uint64_t v10 = *((void *)this + 5);
    if (v10)
    {
      uint64_t v11 = *(const llvm::Function **)(v10 + 56);
      if (v11) {
        llvm::ModuleSlotTracker::incorporateFunction((const llvm::Function **)a3, v11);
      }
    }
    uint64_t ModuleFromVal = getModuleFromVal((uint64_t)this);
    goto LABEL_14;
  }
  if (this && v9 == 22)
  {
    uint64_t v13 = (const llvm::Function *)*((void *)this + 7);
    if (v13) {
      llvm::ModuleSlotTracker::incorporateFunction((const llvm::Function **)a3, v13);
    }
    uint64_t v14 = getModuleFromVal((uint64_t)this);
    goto LABEL_14;
  }
  if (this && v9 <= 3)
  {
    int v15 = *((unsigned __int8 *)this + 16);
    if (*((unsigned char *)this + 16))
    {
      if (v15 == 1)
      {
      }
      else if (v15 == 3)
      {
      }
      else
      {
      }
    }
    else
    {
    }
LABEL_14:
    goto LABEL_15;
  }
  if (this && v9 == 23)
  {
    uint64_t v16 = *((void *)this + 3);
    uint64_t v17 = getModuleFromVal((uint64_t)this);
    printMetadataImpl(a2, v16, a3, v17, 0, 0);
  }
  if (this && v9 <= 0x14)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int v45 = 0;
    std::string::size_type v47 = 0;
    uint64_t v48 = 0;
    size_t v46 = 0;
    char v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    int v52 = 0;
    std::string __p = 0;
    char v54 = 0;
    uint64_t v55 = 0;
    int v33 = 0;
    uint64_t v34 = 0;
    int v36 = 0;
    uint64_t v35 = 0;
    size_t v18 = v24;
    if ((unint64_t)v24 >= v23)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v20, 32);
    }
    else
    {
      ++v24;
      *size_t v18 = 32;
    }
    v19[0] = (llvm::raw_ostream *)&unk_270DC2C20;
    v19[1] = (llvm::raw_ostream *)&v33;
    void v19[2] = (llvm::raw_ostream *)llvm::ModuleSlotTracker::getMachine(a3);
    v19[3] = 0;
    WriteConstantInternal((llvm::raw_ostream *)&v20, this, v19);
    if (__p)
    {
      char v54 = __p;
      operator delete(__p);
    }
    MEMORY[0x263E500A0](v50, 8);
    if (v46)
    {
      std::string::size_type v47 = v46;
      operator delete(v46);
    }
    MEMORY[0x263E500A0](v43, 8);
    MEMORY[0x263E500A0](v40, 8);
    MEMORY[0x263E500A0](v37, 8);
    MEMORY[0x263E500A0](v34, 8);
  }
  else
  {
    printAsOperandImpl((llvm::Type **)this, &v20, 1, a3);
  }
LABEL_15:
  llvm::SlotTracker::~SlotTracker((llvm::SlotTracker *)v56);
  llvm::formatted_raw_ostream::~formatted_raw_ostream((llvm::formatted_raw_ostream *)&v20);
}

void anonymous namespace'::AssemblyWriter::printInstruction(_anonymous_namespace_::AssemblyWriter *this, const llvm::Instruction *a2)
{
  uint64_t v327 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 28);
  if (v4) {
    (*(void (**)(uint64_t, const llvm::Instruction *, void))(*(void *)v4 + 40))(v4, a2, *(void *)this);
  }
  uint64_t v5 = *(llvm::raw_ostream **)this;
  int v6 = *(_WORD **)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 24) - (void)v6 > 1uLL)
  {
    _WORD *v6 = 8224;
    *((void *)v5 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v5, "  ", 2uLL);
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v11 = *(llvm::raw_ostream **)this;
    Valueuint64_t Name = (size_t *)llvm::Value::getValueName((uint64_t ***)a2);
    if (*((unsigned __int8 *)a2 + 16) >= 4u) {
      int v13 = 3;
    }
    else {
      int v13 = 0;
    }
    PrintLLVMName(v11, (llvm::raw_ostream *)(ValueName + 2), *ValueName, v13);
    uint64_t v14 = *(llvm::raw_ostream **)this;
    uint64_t v15 = *(void *)(*(void *)this + 32);
    if ((unint64_t)(*(void *)(*(void *)this + 24) - v15) > 2)
    {
      *(unsigned char *)(v15 + 2) = 32;
      *(_WORD *)uint64_t v15 = 15648;
      *((void *)v14 + 4) += 3;
      goto LABEL_27;
    }
    uint64_t v16 = " = ";
    goto LABEL_22;
  }
  if (*(unsigned char *)(*(void *)a2 + 8) == 7) {
    goto LABEL_27;
  }
  int LocalSlot = llvm::SlotTracker::getLocalSlot(*((llvm::SlotTracker **)this + 4), a2);
  unint64_t v8 = *(llvm::raw_ostream **)this;
  if (LocalSlot == -1)
  {
    uint64_t v17 = *((void *)v8 + 4);
    if ((unint64_t)(*((void *)v8 + 3) - v17) <= 0xA)
    {
      uint64_t v16 = "<badref> = ";
      uint64_t v14 = *(llvm::raw_ostream **)this;
      size_t v18 = 11;
LABEL_23:
      llvm::raw_ostream::write(v14, v16, v18);
      goto LABEL_27;
    }
    *(_DWORD *)(v17 + 7) = 540876862;
    *(void *)uint64_t v17 = *(void *)"<badref> = ";
    uint64_t v20 = *((void *)v8 + 4) + 11;
  }
  else
  {
    int v9 = LocalSlot;
    uint64_t v10 = (unsigned char *)*((void *)v8 + 4);
    if ((unint64_t)v10 >= *((void *)v8 + 3))
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 37);
    }
    else
    {
      *((void *)v8 + 4) = v10 + 1;
      *uint64_t v10 = 37;
    }
    llvm::write_integer(v8, v9, 0, 0);
    uint64_t v19 = *((void *)v8 + 4);
    if ((unint64_t)(*((void *)v8 + 3) - v19) <= 2)
    {
      uint64_t v16 = " = ";
      uint64_t v14 = v8;
LABEL_22:
      size_t v18 = 3;
      goto LABEL_23;
    }
    *(unsigned char *)(v19 + 2) = 32;
    *(_WORD *)uint64_t v19 = 15648;
    uint64_t v20 = *((void *)v8 + 4) + 3;
  }
  *((void *)v8 + 4) = v20;
LABEL_27:
  int v21 = *((unsigned __int8 *)a2 + 16);
  if (v21 != 84) {
    goto LABEL_35;
  }
  int v22 = *((_WORD *)a2 + 9) & 3;
  if (v22 == 2)
  {
    unint64_t v23 = "musttail ";
    size_t v24 = 9;
LABEL_34:
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, v23, v24);
    int v21 = *((unsigned __int8 *)a2 + 16);
    goto LABEL_35;
  }
  if ((v22 - 1) < 2)
  {
    unint64_t v23 = "tail ";
    size_t v24 = 5;
    goto LABEL_34;
  }
  if (v22 == 3)
  {
    unint64_t v23 = "notail ";
    size_t v24 = 7;
    goto LABEL_34;
  }
  int v21 = 84;
LABEL_35:
  char v25 = *(llvm::raw_ostream **)this;
  Opcodeuint64_t Name = llvm::Instruction::getOpcodeName((llvm::Instruction *)(v21 - 28));
  size_t v27 = strlen(OpcodeName);
  llvm::raw_ostream::operator<<(v25, OpcodeName, v27);
  int v28 = *((unsigned __int8 *)a2 + 16);
  if (v28 == 61)
  {
    if (!llvm::Instruction::isAtomic(a2))
    {
LABEL_51:
      __int16 v31 = *((_WORD *)a2 + 9);
LABEL_52:
      if (v31)
      {
        uint64_t v34 = *(llvm::raw_ostream **)this;
        uint64_t v35 = *(void *)(*(void *)this + 32);
        if ((unint64_t)(*(void *)(*(void *)this + 24) - v35) > 8)
        {
          *(unsigned char *)(v35 + 8) = 101;
          *(void *)uint64_t v35 = *(void *)" volatile";
          *((void *)v34 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v34, " volatile", 9uLL);
        }
      }
      goto LABEL_56;
    }
  }
  else
  {
    if (v28 != 60) {
      goto LABEL_44;
    }
    if (!llvm::Instruction::isAtomic(a2)) {
      goto LABEL_51;
    }
  }
  uint64_t v29 = *(llvm::raw_ostream **)this;
  uint64_t v30 = *(_DWORD **)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 24) - (void)v30 > 6uLL)
  {
    *(_DWORD *)((char *)v30 + 3) = 1667853679;
    *uint64_t v30 = 1869898016;
    *((void *)v29 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v29, " atomic", 7uLL);
  }
  int v28 = *((unsigned __int8 *)a2 + 16);
LABEL_44:
  if (v28 == 64)
  {
    __int16 v31 = *((_WORD *)a2 + 9);
    if ((v31 & 2) == 0) {
      goto LABEL_52;
    }
    uint64_t v32 = *(llvm::raw_ostream **)this;
    uint64_t v33 = *(void *)(*(void *)this + 32);
    if ((unint64_t)(*(void *)(*(void *)this + 24) - v33) > 4)
    {
      *(unsigned char *)(v33 + 4) = 107;
      *(_DWORD *)uint64_t v33 = 1634039584;
      *((void *)v32 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v32, " weak", 5uLL);
    }
    int v28 = *((unsigned __int8 *)a2 + 16);
  }
  switch(v28)
  {
    case '<':
    case '=':
    case '@':
    case 'A':
      goto LABEL_51;
    default:
      break;
  }
LABEL_56:
  WriteOptimizationInfo(*(llvm::raw_ostream **)this, a2);
  int v36 = *((unsigned __int8 *)a2 + 16);
  if ((v36 - 83) >= 0xFFFFFFFE)
  {
    uint64_t v37 = *(llvm::raw_ostream **)this;
    uint64_t v38 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v38 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
    }
    else
    {
      *((void *)v37 + 4) = v38 + 1;
      *uint64_t v38 = 32;
    }
    Predicateuint64_t Name = llvm::CmpInst::getPredicateName(*((_WORD *)a2 + 9) & 0x3F);
    llvm::raw_ostream::operator<<(v37, PredicateName, v40);
    int v36 = *((unsigned __int8 *)a2 + 16);
  }
  if (v36 == 65)
  {
    uint64_t v41 = *(llvm::raw_ostream **)this;
    int v42 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v42 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
    }
    else
    {
      *((void *)v41 + 4) = v42 + 1;
      *int v42 = 32;
    }
    Operationuint64_t Name = llvm::AtomicRMWInst::getOperationName((*((unsigned __int16 *)a2 + 9) >> 4) & 0x1F);
    llvm::raw_ostream::operator<<(v41, OperationName, v44);
  }
  int v45 = *((_DWORD *)a2 + 5);
  uint64_t v46 = v45 & 0x7FFFFFF;
  if ((v45 & 0x7FFFFFF) != 0)
  {
    if ((v45 & 0x40000000) != 0) {
      std::string::size_type v47 = (llvm::Type ***)*((void *)a2 - 1);
    }
    else {
      std::string::size_type v47 = (llvm::Type ***)((char *)a2 - 32 * v46);
    }
    char v49 = *v47;
    int v48 = *((unsigned __int8 *)a2 + 16);
    if (v48 == 30)
    {
      if (v46 == 3)
      {
        uint64_t v50 = *(llvm::raw_ostream **)this;
        uint64_t v51 = *(unsigned char **)(*(void *)this + 32);
        if ((unint64_t)v51 >= *(void *)(*(void *)this + 24))
        {
          llvm::raw_ostream::write(v50, 32);
        }
        else
        {
          *((void *)v50 + 4) = v51 + 1;
          *uint64_t v51 = 32;
        }
        size_t v104 = *(llvm::raw_ostream **)this;
        uint64_t v105 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v105 > 1uLL)
        {
          *uint64_t v105 = 8236;
          *((void *)v104 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v104, ", ", 2uLL);
        }
        uint64_t v106 = *(llvm::raw_ostream **)this;
        unint64_t v107 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v107 > 1uLL)
        {
          _WORD *v107 = 8236;
          *((void *)v106 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v106, ", ", 2uLL);
        }
        uint64_t v108 = (llvm::Type **)*((void *)a2 - 8);
        goto LABEL_164;
      }
      if (!v49) {
        goto LABEL_321;
      }
      goto LABEL_89;
    }
  }
  else
  {
    int v48 = *((unsigned __int8 *)a2 + 16);
    if (v48 == 30) {
      goto LABEL_347;
    }
    char v49 = 0;
  }
  if (v48 == 32)
  {
    char v54 = *(llvm::raw_ostream **)this;
    uint64_t v55 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v55 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v54, 32);
    }
    else
    {
      *((void *)v54 + 4) = v55 + 1;
      *uint64_t v55 = 32;
    }
    uint64_t v70 = *(llvm::raw_ostream **)this;
    uint64_t v71 = *(void *)(*(void *)this + 32);
    if ((unint64_t)(*(void *)(*(void *)this + 24) - v71) > 2)
    {
      *(unsigned char *)(v71 + 2) = 91;
      *(_WORD *)uint64_t v71 = 8236;
      *((void *)v70 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v70, ", [", 3uLL);
    }
    int v76 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    int v77 = v76 - 1;
    if (v76 != 1)
    {
      uint64_t v78 = 32;
      do
      {
        if (v78 != 32)
        {
          uint64_t v79 = *(llvm::raw_ostream **)this;
          size_t v80 = *(_WORD **)(*(void *)this + 32);
          if (*(void *)(*(void *)this + 24) - (void)v80 > 1uLL)
          {
            *size_t v80 = 8236;
            *((void *)v79 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v79, ", ", 2uLL);
          }
        }
        int v81 = *((_DWORD *)a2 + 5);
        if ((v81 & 0x40000000) != 0) {
          uint64_t v82 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v82 = (char *)a2 - 32 * (v81 & 0x7FFFFFF);
        }
        v78 += 32;
        --v77;
      }
      while (v77);
    }
    goto LABEL_124;
  }
  if (v48 == 31)
  {
    int v52 = *(llvm::raw_ostream **)this;
    uint64_t v53 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v53 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v52, 32);
    }
    else
    {
      *((void *)v52 + 4) = v53 + 1;
      unsigned char *v53 = 32;
    }
    int v68 = *((_DWORD *)a2 + 5);
    if ((v68 & 0x40000000) != 0) {
      size_t v69 = (llvm::Type ***)*((void *)a2 - 1);
    }
    else {
      size_t v69 = (llvm::Type ***)((char *)a2 - 32 * (v68 & 0x7FFFFFF));
    }
    uint64_t v74 = *(llvm::raw_ostream **)this;
    size_t v75 = *(_WORD **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v75 > 1uLL)
    {
      *size_t v75 = 8236;
      *((void *)v74 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v74, ", ", 2uLL);
    }
    int v87 = *((_DWORD *)a2 + 5);
    if ((v87 & 0x40000000) != 0) {
      uint64_t v88 = (llvm::Type ***)*((void *)a2 - 1);
    }
    else {
      uint64_t v88 = (llvm::Type ***)((char *)a2 - 32 * (v87 & 0x7FFFFFF));
    }
    size_t v89 = *(llvm::raw_ostream **)this;
    int v90 = *(_WORD **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v90 > 1uLL)
    {
      *int v90 = 23328;
      *((void *)v89 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v89, " [", 2uLL);
    }
    if (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF) != 1)
    {
      uint64_t v91 = 0;
      uint64_t v92 = 2 * (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1);
      do
      {
        unint64_t v93 = *(llvm::raw_ostream **)this;
        uint64_t v94 = *(void *)(*(void *)this + 32);
        if ((unint64_t)(*(void *)(*(void *)this + 24) - v94) > 4)
        {
          *(unsigned char *)(v94 + 4) = 32;
          *(_DWORD *)uint64_t v94 = 538976266;
          *((void *)v93 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v93, "\n    ", 5uLL);
        }
        int v95 = *((_DWORD *)a2 + 5);
        if ((v95 & 0x40000000) != 0) {
          size_t v96 = (char *)*((void *)a2 - 1);
        }
        else {
          size_t v96 = (char *)a2 - 32 * (v95 & 0x7FFFFFF);
        }
        int64_t v97 = *(llvm::raw_ostream **)this;
        uint64_t v98 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v98 > 1uLL)
        {
          *uint64_t v98 = 8236;
          *((void *)v97 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v97, ", ", 2uLL);
        }
        int v99 = *((_DWORD *)a2 + 5);
        if ((v99 & 0x40000000) != 0) {
          uint64_t v100 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v100 = (char *)a2 - 32 * (v99 & 0x7FFFFFF);
        }
        uint64_t v101 = (v91 + 3);
        if (v91 == 0x1FFFFFFFCLL) {
          uint64_t v101 = 1;
        }
        v91 += 2;
      }
      while (v92 != v91);
    }
    uint64_t v102 = *(llvm::raw_ostream **)this;
    uint64_t v103 = *(_DWORD **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v103 > 3uLL)
    {
      _DWORD *v103 = 1562386442;
      *((void *)v102 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v102, "\n  ]", 4uLL);
    }
    goto LABEL_321;
  }
  if (v48 == 83) {
    char v56 = a2;
  }
  else {
    char v56 = 0;
  }
  if (v48 == 83)
  {
    uint64_t v57 = *(llvm::raw_ostream **)this;
    unint64_t v58 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v58 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v57, 32);
    }
    else
    {
      *((void *)v57 + 4) = v58 + 1;
      *unint64_t v58 = 32;
    }
    uint64_t v109 = *(llvm::raw_ostream **)this;
    size_t v110 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v110 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v109, 32);
    }
    else
    {
      *((void *)v109 + 4) = v110 + 1;
      unsigned char *v110 = 32;
    }
    uint64_t v111 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if (v111)
    {
      uint64_t v112 = 0;
      uint64_t v113 = 0;
      uint64_t v114 = 32 * v111;
      do
      {
        if (v112)
        {
          char v115 = *(llvm::raw_ostream **)this;
          unint64_t v116 = *(_WORD **)(*(void *)this + 32);
          if (*(void *)(*(void *)this + 24) - (void)v116 > 1uLL)
          {
            _WORD *v116 = 8236;
            *((void *)v115 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v115, ", ", 2uLL);
          }
        }
        long long v117 = *(llvm::raw_ostream **)this;
        long long v118 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v118 > 1uLL)
        {
          _WORD *v118 = 8283;
          *((void *)v117 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v117, "[ ", 2uLL);
        }
        int v119 = *((_DWORD *)a2 + 5);
        if ((v119 & 0x40000000) != 0) {
          uint64_t v120 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v120 = (char *)v56 - 32 * (v119 & 0x7FFFFFF);
        }
        uint64_t v121 = *(llvm::raw_ostream **)this;
        uint64_t v122 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v122 > 1uLL)
        {
          *uint64_t v122 = 8236;
          *((void *)v121 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v121, ", ", 2uLL);
        }
        int v123 = *((_DWORD *)a2 + 5);
        if ((v123 & 0x40000000) != 0) {
          uint64_t v124 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v124 = (char *)v56 - 32 * (v123 & 0x7FFFFFF);
        }
        int v125 = *(llvm::raw_ostream **)this;
        uint64_t v126 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v126 > 1uLL)
        {
          *uint64_t v126 = 23840;
          *((void *)v125 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v125, " ]", 2uLL);
        }
        v113 += 32;
        v112 += 8;
      }
      while (v114 != v113);
    }
    goto LABEL_321;
  }
  if (v48 == 93)
  {
    long long v137 = *(llvm::raw_ostream **)this;
    long long v138 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v138 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v137, 32);
    }
    else
    {
      *((void *)v137 + 4) = v138 + 1;
      *long long v138 = 32;
    }
    int v144 = *((_DWORD *)a2 + 5);
    if ((v144 & 0x40000000) != 0) {
      uint64_t v145 = (llvm::Type ***)*((void *)a2 - 1);
    }
    else {
      uint64_t v145 = (llvm::Type ***)((char *)a2 - 32 * (v144 & 0x7FFFFFF));
    }
    std::string v155 = *(llvm::raw_ostream **)this;
    uint64_t v156 = *(_WORD **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v156 > 1uLL)
    {
      *uint64_t v156 = 8236;
      *((void *)v155 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v155, ", ", 2uLL);
    }
    int v157 = *((_DWORD *)a2 + 5);
    if ((v157 & 0x40000000) != 0) {
      uint64_t v158 = (llvm::Type ***)*((void *)a2 - 1);
    }
    else {
      uint64_t v158 = (llvm::Type ***)((char *)a2 - 32 * (v157 & 0x7FFFFFF));
    }
    uint64_t v159 = *((unsigned int *)a2 + 18);
    if (v159)
    {
      long long v160 = (unsigned int *)*((void *)a2 + 8);
      uint64_t v161 = 4 * v159;
      do
      {
        unint64_t v162 = *v160;
        int v163 = *(llvm::raw_ostream **)this;
        int64_t v164 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v164 > 1uLL)
        {
          *int64_t v164 = 8236;
          *((void *)v163 + 4) += 2;
        }
        else
        {
          int v163 = llvm::raw_ostream::write(v163, ", ", 2uLL);
        }
        write_unsigned<unsigned long>(v163, v162, 0, 0, 0);
        ++v160;
        v161 -= 4;
      }
      while (v161);
    }
    goto LABEL_321;
  }
  if (v48 == 92)
  {
    unint64_t v72 = *(llvm::raw_ostream **)this;
    size_t v73 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v73 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v72, 32);
    }
    else
    {
      *((void *)v72 + 4) = v73 + 1;
      *size_t v73 = 32;
    }
    int v142 = *((_DWORD *)a2 + 5);
    if ((v142 & 0x40000000) != 0) {
      unint64_t v143 = (llvm::Type ***)*((void *)a2 - 1);
    }
    else {
      unint64_t v143 = (llvm::Type ***)((char *)a2 - 32 * (v142 & 0x7FFFFFF));
    }
    uint64_t v149 = *((unsigned int *)a2 + 18);
    if (v149)
    {
      uint64_t v150 = (unsigned int *)*((void *)a2 + 8);
      uint64_t v151 = 4 * v149;
      do
      {
        unint64_t v152 = *v150;
        uint64_t v153 = *(llvm::raw_ostream **)this;
        uint64_t v154 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v154 > 1uLL)
        {
          _WORD *v154 = 8236;
          *((void *)v153 + 4) += 2;
        }
        else
        {
          uint64_t v153 = llvm::raw_ostream::write(v153, ", ", 2uLL);
        }
        write_unsigned<unsigned long>(v153, v152, 0, 0, 0);
        ++v150;
        v151 -= 4;
      }
      while (v151);
    }
    goto LABEL_321;
  }
  if (v48 == 94) {
    uint64_t v139 = a2;
  }
  else {
    uint64_t v139 = 0;
  }
  if (v48 == 94)
  {
    int v140 = *(llvm::raw_ostream **)this;
    long long v141 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v141 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v140, 32);
    }
    else
    {
      *((void *)v140 + 4) = v141 + 1;
      *long long v141 = 32;
    }
    if ((*((_WORD *)a2 + 9) & 1) != 0 || (*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
    {
      unint64_t v165 = *(llvm::raw_ostream **)this;
      int64_t v166 = *(unsigned char **)(*(void *)this + 32);
      if ((unint64_t)v166 >= *(void *)(*(void *)this + 24))
      {
        llvm::raw_ostream::write(v165, 10);
      }
      else
      {
        *((void *)v165 + 4) = v166 + 1;
        unsigned char *v166 = 10;
      }
    }
    if (*((_WORD *)a2 + 9)) {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "          cleanup", 0x11uLL);
    }
    uint64_t v171 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
    if (v171)
    {
      uint64_t v172 = 0;
      uint64_t v173 = 32 * v171;
      do
      {
        if (v172 || (*((_WORD *)a2 + 9) & 1) != 0)
        {
          unint64_t v174 = *(llvm::raw_ostream **)this;
          uint64_t v175 = *(unsigned char **)(*(void *)this + 32);
          if (*(unsigned char **)(*(void *)this + 24) == v175)
          {
            llvm::raw_ostream::write(v174, "\n", 1uLL);
          }
          else
          {
            *uint64_t v175 = 10;
            ++*((void *)v174 + 4);
          }
        }
        int v176 = *((_DWORD *)a2 + 5);
        if ((v176 & 0x40000000) != 0) {
          v177 = (char *)*((void *)a2 - 1);
        }
        else {
          v177 = (char *)v139 - 32 * (v176 & 0x7FFFFFF);
        }
        int v178 = *(unsigned __int8 *)(**(void **)&v177[v172] + 8);
        if (v178 == 17) {
          unint64_t v179 = "          filter ";
        }
        else {
          unint64_t v179 = "          catch ";
        }
        if (v178 == 17) {
          size_t v180 = 17;
        }
        else {
          size_t v180 = 16;
        }
        llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, v179, v180);
        int v181 = *((_DWORD *)a2 + 5);
        if ((v181 & 0x40000000) != 0) {
          uint64_t v182 = (char *)*((void *)a2 - 1);
        }
        else {
          uint64_t v182 = (char *)v139 - 32 * (v181 & 0x7FFFFFF);
        }
        v172 += 32;
      }
      while (v173 != v172);
    }
    goto LABEL_321;
  }
  if (v48 == 38) {
    unint64_t v146 = a2;
  }
  else {
    unint64_t v146 = 0;
  }
  if (v48 == 38)
  {
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " within ", 8uLL);
    int v147 = *((_DWORD *)a2 + 5);
    if ((v147 & 0x40000000) != 0) {
      unint64_t v148 = (llvm::Type ***)*((void *)a2 - 1);
    }
    else {
      unint64_t v148 = (llvm::Type ***)((char *)a2 - 32 * (v147 & 0x7FFFFFF));
    }
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " [", 2uLL);
    int v183 = *((_DWORD *)a2 + 5);
    if ((v183 & 0x40000000) != 0)
    {
      int64_t v185 = (char *)*((void *)a2 - 1);
      uint64_t v192 = 64;
      if ((*((_WORD *)a2 + 9) & 1) == 0) {
        uint64_t v192 = 32;
      }
      uint64_t v187 = (llvm::Type ***)&v185[v192];
      uint64_t v184 = v183 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v184 = v183 & 0x7FFFFFF;
      int64_t v185 = (char *)a2 - 32 * v184;
      uint64_t v186 = 64;
      if ((*((_WORD *)a2 + 9) & 1) == 0) {
        uint64_t v186 = 32;
      }
      uint64_t v187 = (llvm::Type ***)&v185[v186];
    }
    v193 = (llvm::Type ***)&v185[32 * v184];
    if (v187 != v193)
    {
      int v194 = 0;
      do
      {
        v195 = *v187;
        if (v194)
        {
          v196 = *(llvm::raw_ostream **)this;
          v197 = *(_WORD **)(*(void *)this + 32);
          if (*(void *)(*(void *)this + 24) - (void)v197 > 1uLL)
          {
            _WORD *v197 = 8236;
            *((void *)v196 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v196, ", ", 2uLL);
          }
        }
        v187 += 4;
        --v194;
      }
      while (v187 != v193);
    }
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "] unwind ", 9uLL);
    if (*((_WORD *)v146 + 9))
    {
      int v198 = *((_DWORD *)a2 + 5);
      v199 = (v198 & 0x40000000) != 0
           ? (const llvm::Instruction *)*((void *)v146 - 1)
           : (const llvm::Instruction *)((char *)v146 - 32 * (v198 & 0x7FFFFFF));
      uint64_t v108 = (llvm::Type **)*((void *)v199 + 4);
      if (v108) {
        goto LABEL_164;
      }
    }
    goto LABEL_319;
  }
  if ((v48 - 81) >= 0xFFFFFFFE) {
    unint64_t v167 = a2;
  }
  else {
    unint64_t v167 = 0;
  }
  if ((v48 - 81) >= 0xFFFFFFFE)
  {
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " within ", 8uLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " [", 2uLL);
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 1)
    {
      uint64_t v188 = 0;
      uint64_t v189 = 32 * ((*((_DWORD *)a2 + 5) & 0x7FFFFFFu) - 1);
      do
      {
        if (v188)
        {
          uint64_t v190 = *(llvm::raw_ostream **)this;
          unint64_t v191 = *(_WORD **)(*(void *)this + 32);
          if (*(void *)(*(void *)this + 24) - (void)v191 > 1uLL)
          {
            *unint64_t v191 = 8236;
            *((void *)v190 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v190, ", ", 2uLL);
          }
        }
        v188 += 32;
      }
      while (v189 != v188);
    }
    goto LABEL_124;
  }
  if (v48 == 29 && !v49)
  {
    uint64_t v168 = *(llvm::raw_ostream **)this;
    uint64_t v169 = " void";
    size_t v170 = 5;
LABEL_320:
    llvm::raw_ostream::operator<<(v168, v169, v170);
    goto LABEL_321;
  }
  if (v48 == 36)
  {
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " from ", 6uLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " unwind ", 8uLL);
    if ((*((_WORD *)a2 + 9) & 1) == 0)
    {
LABEL_319:
      uint64_t v168 = *(llvm::raw_ostream **)this;
      uint64_t v169 = "to caller";
      size_t v170 = 9;
      goto LABEL_320;
    }
    uint64_t v108 = (llvm::Type **)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
LABEL_164:
    goto LABEL_321;
  }
  if (v48 == 37)
  {
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " from ", 6uLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " to ", 4uLL);
    uint64_t v108 = (llvm::Type **)*((void *)a2 - 4);
    goto LABEL_164;
  }
  if (v48 == 84) {
    v214 = a2;
  }
  else {
    v214 = 0;
  }
  if (v48 == 84)
  {
    if ((*((_WORD *)a2 + 9) & 0xFFC) != 0)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " ", 1uLL);
      PrintCallingConv((llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF), *(llvm::raw_ostream **)this);
    }
    v215 = (llvm::raw_ostream *)*((void *)a2 - 4);
    uint64_t v216 = *((void *)a2 + 8);
    uint64_t v217 = *((void *)a2 + 9);
    v218 = **(llvm::Type ***)(v217 + 16);
    if (v216 && *(_DWORD *)(v216 + 8) >= 2u && *(void *)(v216 + 48))
    {
      v219 = *(llvm::raw_ostream **)this;
      v220 = *(unsigned char **)(*(void *)this + 32);
      if ((unint64_t)v220 >= *(void *)(*(void *)this + 24))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
      }
      else
      {
        *((void *)v219 + 4) = v220 + 1;
        unsigned char *v220 = 32;
      }
      uint64_t v239 = *(_DWORD *)(v216 + 8) < 2u ? 0 : *(llvm::AttributeSetNode **)(v216 + 48);
      int64_t v325 = v239;
      llvm::AttributeSet::getAsString(&v325, 0, __p);
      unint64_t v240 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      size_t v241 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(__p[0].__r_.__value_.__r.__words[2])
           : __p[0].__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v219, (const char *)v240, v241);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    maybePrintCallAddrSpace(v215, a2, *(llvm::raw_ostream **)this);
    unint64_t v242 = *(llvm::raw_ostream **)this;
    uint64_t v243 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v243 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v242, 32);
    }
    else
    {
      *((void *)v242 + 4) = v243 + 1;
      *uint64_t v243 = 32;
    }
    if (*(_DWORD *)(v217 + 8) <= 0xFFu) {
      uint64_t v244 = v218;
    }
    else {
      uint64_t v244 = (llvm::Type *)v217;
    }
    uint64_t v245 = *(llvm::raw_ostream **)this;
    uint64_t v246 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v246 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v245, 32);
    }
    else
    {
      *((void *)v245 + 4) = v246 + 1;
      *uint64_t v246 = 32;
    }
    unint64_t v247 = *(llvm::raw_ostream **)this;
    unint64_t v248 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v248 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v247, 40);
    }
    else
    {
      *((void *)v247 + 4) = v248 + 1;
      *unint64_t v248 = 40;
    }
    unint64_t v249 = llvm::CallBase::arg_end(a2) - (void)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    if ((v249 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v250 = 0;
      uint64_t v251 = (v249 >> 5);
      int64x2_t v252 = v214;
      do
      {
        if (v250) {
          llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
        }
        if (v216 && (v250 + 2) < *(_DWORD *)(v216 + 8)) {
          uint64_t v253 = *(const llvm::AttributeSet **)(v216 + 40 + 8 * (v250 + 2));
        }
        else {
          uint64_t v253 = 0;
        }
        ++v250;
        int64x2_t v252 = (const llvm::Instruction *)((char *)v252 + 32);
      }
      while (v251 != v250);
    }
    if ((*((_WORD *)a2 + 9) & 3) == 2)
    {
      uint64_t v254 = *((void *)v214 + 5);
      if (v254)
      {
        uint64_t v255 = *(void *)(v254 + 56);
        if (v255)
        {
          if (*(_DWORD *)(*(void *)(v255 + 24) + 8) >= 0x100u)
          {
            if (((llvm::CallBase::arg_end(v214) - ((void)v214 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0) {
              llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
            }
            llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "...", 3uLL);
          }
        }
      }
    }
    v256 = *(llvm::raw_ostream **)this;
    unint64_t v257 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v257 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v256, 41);
    }
    else
    {
      *((void *)v256 + 4) = v257 + 1;
      *unint64_t v257 = 41;
    }
    if (v216 && *(_DWORD *)(v216 + 8) && *(void *)(v216 + 40))
    {
      uint64_t v258 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " #", 2uLL);
      if (*(_DWORD *)(v216 + 8)) {
        uint64_t v259 = *(void *)(v216 + 40);
      }
      else {
        uint64_t v259 = 0;
      }
      int AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot(*((void *)this + 4), v259);
      llvm::write_integer(v258, AttributeGroupSlot, 0, 0);
    }
    goto LABEL_321;
  }
  if (v48 == 33) {
    v221 = a2;
  }
  else {
    v221 = 0;
  }
  if (v48 == 33)
  {
    v222 = (llvm::raw_ostream *)*((void *)a2 - 4);
    uint64_t v223 = *((void *)a2 + 8);
    uint64_t v224 = *((void *)a2 + 9);
    v225 = **(llvm::Type ***)(v224 + 16);
    if ((*((_WORD *)a2 + 9) & 0xFFC) != 0)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " ", 1uLL);
      PrintCallingConv((llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF), *(llvm::raw_ostream **)this);
    }
    if (v223 && *(_DWORD *)(v223 + 8) >= 2u && *(void *)(v223 + 48))
    {
      v226 = *(llvm::raw_ostream **)this;
      v227 = *(unsigned char **)(*(void *)this + 32);
      if ((unint64_t)v227 >= *(void *)(*(void *)this + 24))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
      }
      else
      {
        *((void *)v226 + 4) = v227 + 1;
        unsigned char *v227 = 32;
      }
      v270 = *(_DWORD *)(v223 + 8) < 2u ? 0 : *(llvm::AttributeSetNode **)(v223 + 48);
      int64_t v325 = v270;
      llvm::AttributeSet::getAsString(&v325, 0, __p);
      v271 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      size_t v272 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(__p[0].__r_.__value_.__r.__words[2])
           : __p[0].__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v226, (const char *)v271, v272);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    maybePrintCallAddrSpace(v222, a2, *(llvm::raw_ostream **)this);
    v273 = *(llvm::raw_ostream **)this;
    v274 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v274 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v273, 32);
    }
    else
    {
      *((void *)v273 + 4) = v274 + 1;
      unsigned char *v274 = 32;
    }
    if (*(_DWORD *)(v224 + 8) <= 0xFFu) {
      v275 = v225;
    }
    else {
      v275 = (llvm::Type *)v224;
    }
    uint64_t v276 = *(llvm::raw_ostream **)this;
    v277 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v277 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v276, 32);
    }
    else
    {
      *((void *)v276 + 4) = v277 + 1;
      unsigned char *v277 = 32;
    }
    v278 = *(llvm::raw_ostream **)this;
    v279 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v279 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v278, 40);
    }
    else
    {
      *((void *)v278 + 4) = v279 + 1;
      unsigned char *v279 = 40;
    }
    unint64_t v280 = llvm::CallBase::arg_end(a2) - (void)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    if ((v280 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v281 = 0;
      uint64_t v282 = (v280 >> 5);
      v283 = v221;
      do
      {
        if (v281) {
          llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
        }
        if (v223 && (v281 + 2) < *(_DWORD *)(v223 + 8)) {
          v284 = *(const llvm::AttributeSet **)(v223 + 40 + 8 * (v281 + 2));
        }
        else {
          v284 = 0;
        }
        ++v281;
        v283 = (const llvm::CallBase *)((char *)v283 + 32);
      }
      while (v282 != v281);
    }
    v285 = *(llvm::raw_ostream **)this;
    uint64_t v286 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v286 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v285, 41);
    }
    else
    {
      *((void *)v285 + 4) = v286 + 1;
      *uint64_t v286 = 41;
    }
    if (v223 && *(_DWORD *)(v223 + 8) && *(void *)(v223 + 40))
    {
      unint64_t v287 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " #", 2uLL);
      if (*(_DWORD *)(v223 + 8)) {
        uint64_t v288 = *(void *)(v223 + 40);
      }
      else {
        uint64_t v288 = 0;
      }
      int v289 = llvm::SlotTracker::getAttributeGroupSlot(*((void *)this + 4), v288);
      llvm::write_integer(v287, v289, 0, 0);
    }
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "\n          to ", 0xEuLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " unwind ", 8uLL);
    uint64_t v108 = (llvm::Type **)*((void *)v221 - 8);
    goto LABEL_164;
  }
  if (v48 == 39) {
    v228 = (unsigned int *)a2;
  }
  else {
    v228 = 0;
  }
  if (v48 == 39)
  {
    v229 = (llvm::Type **)*((void *)a2 - 4);
    uint64_t v230 = *((void *)a2 + 8);
    uint64_t v231 = *((void *)a2 + 9);
    unint64_t v232 = **(llvm::Type ***)(v231 + 16);
    v324 = (char *)a2 - 32;
    if ((*((_WORD *)a2 + 9) & 0xFFC) != 0)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " ", 1uLL);
      PrintCallingConv((llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 2) & 0x3FF), *(llvm::raw_ostream **)this);
    }
    if (v230 && *(_DWORD *)(v230 + 8) >= 2u && *(void *)(v230 + 48))
    {
      uint64_t v233 = *(llvm::raw_ostream **)this;
      unint64_t v234 = *(unsigned char **)(*(void *)this + 32);
      if ((unint64_t)v234 >= *(void *)(*(void *)this + 24))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)this, 32);
      }
      else
      {
        *((void *)v233 + 4) = v234 + 1;
        *unint64_t v234 = 32;
      }
      unint64_t v292 = *(_DWORD *)(v230 + 8) < 2u ? 0 : *(llvm::AttributeSetNode **)(v230 + 48);
      int64_t v325 = v292;
      llvm::AttributeSet::getAsString(&v325, 0, __p);
      int64_t v293 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      size_t v294 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(__p[0].__r_.__value_.__r.__words[2])
           : __p[0].__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v233, (const char *)v293, v294);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    uint64_t v295 = *(llvm::raw_ostream **)this;
    int64_t v296 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v296 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v295, 32);
    }
    else
    {
      *((void *)v295 + 4) = v296 + 1;
      *int64_t v296 = 32;
    }
    if (*(_DWORD *)(v231 + 8) <= 0xFFu) {
      unint64_t v297 = v232;
    }
    else {
      unint64_t v297 = (llvm::Type *)v231;
    }
    int64_t v298 = *(llvm::raw_ostream **)this;
    unint64_t v299 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v299 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v298, 32);
    }
    else
    {
      *((void *)v298 + 4) = v299 + 1;
      *unint64_t v299 = 32;
    }
    uint64_t v300 = *(llvm::raw_ostream **)this;
    int64_t v301 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v301 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v300, 40);
    }
    else
    {
      *((void *)v300 + 4) = v301 + 1;
      *int64_t v301 = 40;
    }
    unint64_t v302 = llvm::CallBase::arg_end(a2) - (void)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    if ((v302 & 0x1FFFFFFFE0) != 0)
    {
      uint64_t v303 = 0;
      uint64_t v304 = (v302 >> 5);
      uint64_t v305 = v228;
      do
      {
        if (v303) {
          llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
        }
        if (v230 && (v303 + 2) < *(_DWORD *)(v230 + 8)) {
          int64_t v306 = *(const llvm::AttributeSet **)(v230 + 40 + 8 * (v303 + 2));
        }
        else {
          int64_t v306 = 0;
        }
        ++v303;
        v305 += 8;
      }
      while (v304 != v303);
    }
    unint64_t v307 = *(llvm::raw_ostream **)this;
    int64_t v308 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v308 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v307, 41);
    }
    else
    {
      *((void *)v307 + 4) = v308 + 1;
      *int64_t v308 = 41;
    }
    if (v230 && *(_DWORD *)(v230 + 8) && *(void *)(v230 + 40))
    {
      unint64_t v309 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " #", 2uLL);
      if (*(_DWORD *)(v230 + 8)) {
        uint64_t v310 = *(void *)(v230 + 40);
      }
      else {
        uint64_t v310 = 0;
      }
      int v311 = llvm::SlotTracker::getAttributeGroupSlot(*((void *)this + 4), v310);
      llvm::write_integer(v309, v311, 0, 0);
    }
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "\n          to ", 0xEuLL);
    llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, " [", 2uLL);
    uint64_t v312 = v228[20];
    if (v312)
    {
      uint64_t v313 = 0;
      uint64_t v314 = 32 * v312;
      do
      {
        if (v313) {
          llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
        }
        v313 += 32;
      }
      while (v314 != v313);
    }
LABEL_124:
    uint64_t v83 = *(llvm::raw_ostream **)this;
    uint64_t v84 = *(char **)(*(void *)this + 32);
    if ((unint64_t)v84 < *(void *)(*(void *)this + 24))
    {
      *((void *)v83 + 4) = v84 + 1;
      char v85 = 93;
LABEL_126:
      *uint64_t v84 = v85;
      goto LABEL_321;
    }
    char v86 = 93;
    goto LABEL_128;
  }
  if (v48 == 59)
  {
    uint64_t v235 = *(llvm::raw_ostream **)this;
    unint64_t v236 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v236 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v235, 32);
    }
    else
    {
      *((void *)v235 + 4) = v236 + 1;
      *unint64_t v236 = 32;
    }
    __int16 v261 = *((_WORD *)a2 + 9);
    if ((v261 & 0x40) != 0)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "inalloca ", 9uLL);
      __int16 v261 = *((_WORD *)a2 + 9);
    }
    if ((v261 & 0x80) != 0) {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, "swifterror ", 0xBuLL);
    }
    uint64_t v262 = *((void *)a2 - 4);
    if (!v262 || (llvm::AllocaInst::isArrayAllocation(a2) & 1) != 0 || *(_DWORD *)(*(void *)v262 + 8) != 8205)
    {
      llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", ", 2uLL);
    }
    __int16 v263 = *((_WORD *)a2 + 9);
    int v264 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", align ", 8uLL);
    write_unsigned<unsigned long>(v264, 1 << v263, 0, 0, 0);
    unint64_t v265 = *(unsigned int *)(*(void *)a2 + 8);
    if (v265 < 0x100) {
      goto LABEL_321;
    }
    unint64_t v266 = v265 >> 8;
    uint64_t v267 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)this, ", addrspace(", 0xCuLL);
    write_unsigned<unsigned long>(v267, v266, 0, 0, 0);
    uint64_t v84 = (char *)*((void *)v267 + 4);
    if ((unint64_t)v84 < *((void *)v267 + 3))
    {
      *((void *)v267 + 4) = v84 + 1;
      char v85 = 41;
      goto LABEL_126;
    }
    uint64_t v83 = v267;
    char v86 = 41;
LABEL_128:
    llvm::raw_ostream::write(v83, v86);
    goto LABEL_321;
  }
  if ((v48 - 66) <= 0xC)
  {
    if (v49)
    {
      uint64_t v237 = *(llvm::raw_ostream **)this;
      unint64_t v238 = *(unsigned char **)(*(void *)this + 32);
      if ((unint64_t)v238 >= *(void *)(*(void *)this + 24))
      {
        llvm::raw_ostream::write(v237, 32);
      }
      else
      {
        *((void *)v237 + 4) = v238 + 1;
        *unint64_t v238 = 32;
      }
    }
    v315 = *(llvm::raw_ostream **)this;
    size_t v316 = " to ";
    size_t v317 = 4;
LABEL_567:
    llvm::raw_ostream::operator<<(v315, v316, v317);
    goto LABEL_321;
  }
  if (v48 == 88)
  {
    if (v49)
    {
      uint64_t v268 = *(llvm::raw_ostream **)this;
      v269 = *(unsigned char **)(*(void *)this + 32);
      if ((unint64_t)v269 >= *(void *)(*(void *)this + 24))
      {
        llvm::raw_ostream::write(v268, 32);
      }
      else
      {
        *((void *)v268 + 4) = v269 + 1;
        unsigned char *v269 = 32;
      }
    }
    v315 = *(llvm::raw_ostream **)this;
    size_t v316 = ", ";
    size_t v317 = 2;
    goto LABEL_567;
  }
  if (v49)
  {
    if (v48 == 60)
    {
      v318 = *(llvm::raw_ostream **)this;
      v319 = *(unsigned char **)(*(void *)this + 32);
      if ((unint64_t)v319 >= *(void *)(*(void *)this + 24))
      {
        llvm::raw_ostream::write(v318, 32);
      }
      else
      {
        *((void *)v318 + 4) = v319 + 1;
        unsigned char *v319 = 32;
      }
      size_t v320 = (_anonymous_namespace_::AssemblyWriter *)((char *)this + 40);
      v321 = *(uint64_t ***)a2;
    }
    else
    {
      if (v48 != 62) {
        goto LABEL_89;
      }
      uint64_t v290 = *(llvm::raw_ostream **)this;
      int64_t v291 = *(unsigned char **)(*(void *)this + 32);
      if ((unint64_t)v291 >= *(void *)(*(void *)this + 24))
      {
        llvm::raw_ostream::write(v290, 32);
      }
      else
      {
        *((void *)v290 + 4) = v291 + 1;
        *int64_t v291 = 32;
      }
      size_t v320 = (_anonymous_namespace_::AssemblyWriter *)((char *)this + 40);
      v321 = (uint64_t **)*((void *)a2 + 8);
    }
    v322 = *(llvm::raw_ostream **)this;
    v323 = *(unsigned char **)(*(void *)this + 32);
    if ((unint64_t)v323 >= *(void *)(*(void *)this + 24))
    {
      llvm::raw_ostream::write(v322, 44);
    }
    else
    {
      *((void *)v322 + 4) = v323 + 1;
      unsigned char *v323 = 44;
    }
LABEL_89:
    uint64_t v59 = *v49;
    unsigned int v60 = *((unsigned __int8 *)a2 + 16) - 29;
    if (v60 >= 0x3F || ((0x4100001900000001uLL >> v60) & 1) == 0)
    {
      int v61 = *((_DWORD *)a2 + 5);
      int v62 = (v61 & 0x7FFFFFF) - 1;
      if ((v61 & 0x7FFFFFF) == 1)
      {
LABEL_98:
        uint64_t v66 = *(llvm::raw_ostream **)this;
        unint64_t v67 = *(unsigned char **)(*(void *)this + 32);
        if ((unint64_t)v67 >= *(void *)(*(void *)this + 24))
        {
          llvm::raw_ostream::write(v66, 32);
        }
        else
        {
          *((void *)v66 + 4) = v67 + 1;
          *unint64_t v67 = 32;
        }
        int v127 = 0;
LABEL_196:
        long long v128 = *(llvm::raw_ostream **)this;
        __int16 v129 = *(unsigned char **)(*(void *)this + 32);
        if ((unint64_t)v129 >= *(void *)(*(void *)this + 24))
        {
          llvm::raw_ostream::write(v128, 32);
        }
        else
        {
          *((void *)v128 + 4) = v129 + 1;
          unsigned char *v129 = 32;
        }
        uint64_t v130 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        if (v130)
        {
          uint64_t v131 = 0;
          uint64_t v132 = 32 * v130;
          do
          {
            if (v131)
            {
              long long v133 = *(llvm::raw_ostream **)this;
              long long v134 = *(_WORD **)(*(void *)this + 32);
              if (*(void *)(*(void *)this + 24) - (void)v134 > 1uLL)
              {
                *long long v134 = 8236;
                *((void *)v133 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v133, ", ", 2uLL);
              }
            }
            int v135 = *((_DWORD *)a2 + 5);
            if ((v135 & 0x40000000) != 0) {
              int v136 = (char *)*((void *)a2 - 1);
            }
            else {
              int v136 = (char *)a2 - 32 * (v135 & 0x7FFFFFF);
            }
            v131 += 32;
          }
          while (v132 != v131);
        }
        goto LABEL_321;
      }
      uint64_t v63 = 32;
      while (1)
      {
        unint64_t v64 = (char *)a2 - 32 * (v61 & 0x7FFFFFF);
        if ((v61 & 0x40000000) != 0) {
          unint64_t v64 = (char *)*((void *)a2 - 1);
        }
        int v65 = *(llvm::Type ***)&v64[v63];
        if (v65)
        {
          if (*v65 != v59) {
            break;
          }
        }
        v63 += 32;
        if (!--v62) {
          goto LABEL_98;
        }
      }
    }
    int v127 = 1;
    goto LABEL_196;
  }
LABEL_321:
  switch(*((unsigned char *)a2 + 16))
  {
    case '<':
    case '=':
      if (llvm::Instruction::isAtomic(a2)) {
      unint64_t v200 = ((unint64_t)*((unsigned __int16 *)a2 + 9) >> 1) & 0x3F;
      }
      v201 = *(llvm::raw_ostream **)this;
      v202 = *(void **)(*(void *)this + 32);
      if (*(void *)(*(void *)this + 24) - (void)v202 > 7uLL)
      {
        void *v202 = 0x206E67696C61202CLL;
        *((void *)v201 + 4) += 8;
      }
      else
      {
        v201 = llvm::raw_ostream::write(v201, ", align ", 8uLL);
      }
      unint64_t v208 = 1 << v200;
      goto LABEL_346;
    case '>':
      break;
    case '?':
      break;
    case '@':
      unsigned int v203 = *((unsigned __int16 *)a2 + 9);
      int v204 = (v203 >> 2) & 7;
      v205 = *(llvm::raw_ostream **)this;
      v206 = *(unsigned char **)(*(void *)this + 32);
      if (*(unsigned char **)(*(void *)this + 24) == v206)
      {
        v205 = llvm::raw_ostream::write(v205, " ", 1uLL);
      }
      else
      {
        unsigned char *v206 = 32;
        ++*((void *)v205 + 4);
      }
      int v210 = v203 >> 5;
      llvm::raw_ostream::operator<<(v205, llvm::toIRString(llvm::AtomicOrdering)::names[v204]);
      v211 = *(llvm::raw_ostream **)this;
      v212 = *(unsigned char **)(*(void *)this + 32);
      if (*(unsigned char **)(*(void *)this + 24) == v212)
      {
        v211 = llvm::raw_ostream::write(v211, " ", 1uLL);
      }
      else
      {
        unsigned char *v212 = 32;
        ++*((void *)v211 + 4);
      }
      llvm::raw_ostream::operator<<(v211, llvm::toIRString(llvm::AtomicOrdering)::names[v210]);
      v201 = *(llvm::raw_ostream **)this;
      v213 = *(void **)(*(void *)this + 32);
      if (*(void *)(*(void *)this + 24) - (void)v213 > 7uLL)
      {
        void *v213 = 0x206E67696C61202CLL;
        *((void *)v201 + 4) += 8;
      }
      else
      {
        v201 = llvm::raw_ostream::write(v201, ", align ", 8uLL);
      }
      LOBYTE(v209) = *((unsigned char *)a2 + 19);
      goto LABEL_345;
    case 'A':
      v201 = *(llvm::raw_ostream **)this;
      v207 = *(void **)(*(void *)this + 32);
      if (*(void *)(*(void *)this + 24) - (void)v207 > 7uLL)
      {
        void *v207 = 0x206E67696C61202CLL;
        *((void *)v201 + 4) += 8;
      }
      else
      {
        v201 = llvm::raw_ostream::write(v201, ", align ", 8uLL);
      }
      unint64_t v209 = (unint64_t)*((unsigned __int16 *)a2 + 9) >> 9;
LABEL_345:
      unint64_t v208 = 1 << v209;
LABEL_346:
      write_unsigned<unsigned long>(v201, v208, 0, 0, 0);
      break;
    default:
      if (*((unsigned char *)a2 + 16) == 91) {
        PrintShuffleMask(*(llvm::raw_ostream **)this, *(void *)a2, *((int **)a2 + 8), *((unsigned int *)a2 + 18));
      }
      break;
  }
LABEL_347:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
  __p[0].__r_.__value_.__l.__size_ = 0x400000000;
  if (*((void *)a2 + 6) || (*((unsigned char *)a2 + 23) & 0x20) != 0) {
    llvm::Instruction::getAllMetadataImpl((uint64_t)a2, (unsigned int *)__p);
  }
  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2]) {
    free(__p[0].__r_.__value_.__l.__data_);
  }
}

void anonymous namespace'::AssemblyWriter::printGlobal(llvm::raw_ostream **this, const llvm::GlobalVariable *a2)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  if (a2 && !*((unsigned char *)a2 + 16) && (*((unsigned char *)a2 + 35) & 1) != 0)
  {
    uint64_t v4 = *this;
    uint64_t v5 = *((void *)*this + 4);
    if ((unint64_t)(*((void *)*this + 3) - v5) > 0x10)
    {
      *(unsigned char *)(v5 + 16) = 10;
      *(_OWORD *)uint64_t v5 = *(_OWORD *)"; Materializable\n";
      *((void *)v4 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v4, "; Materializable\n", 0x11uLL);
    }
  }
  int v6 = this[4];
  int v7 = (llvm::raw_ostream *)*((void *)a2 + 5);
  v73[0] = (llvm::raw_ostream *)&unk_270DC2C20;
  v73[1] = (llvm::raw_ostream *)(this + 5);
  v73[2] = v6;
  v73[3] = v7;
  WriteAsOperandInternal(*this, (uint64_t ***)a2, v73);
  unint64_t v8 = *this;
  uint64_t v9 = *((void *)*this + 4);
  if ((unint64_t)(*((void *)*this + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) != 3 || (*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0) {
      goto LABEL_20;
    }
    int v10 = *((_DWORD *)a2 + 8);
  }
  else
  {
    if (*((const llvm::GlobalVariable **)a2 + 9) != (const llvm::GlobalVariable *)((char *)a2 + 72)) {
      goto LABEL_20;
    }
    int v10 = *((_DWORD *)a2 + 8);
    if ((v10 & 0x1000000) != 0) {
      goto LABEL_20;
    }
  }
  if ((v10 & 0xF) == 0)
  {
    uint64_t v11 = *this;
    uint64_t v12 = *((void *)*this + 4);
    if ((unint64_t)(*((void *)*this + 3) - v12) > 8)
    {
      *(unsigned char *)(v12 + 8) = 32;
      *(void *)uint64_t v12 = *(void *)"external ";
      *((void *)v11 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v11, "external ", 9uLL);
    }
  }
LABEL_20:
  int v13 = *this;
  getLinkageNameWithSpace(&__p, *((_DWORD *)a2 + 8) & 0xF);
  if ((v77 & 0x80u) == 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  if ((v77 & 0x80u) == 0) {
    size_t v15 = v77;
  }
  else {
    size_t v15 = v75;
  }
  llvm::raw_ostream::write(v13, p_p, v15);
  if ((char)v77 < 0) {
    operator delete(__p);
  }
  PrintDSOLocation(a2, *this);
  unsigned int v16 = *((_DWORD *)a2 + 8);
  int v17 = (v16 >> 4) & 3;
  size_t v18 = *this;
  if (v17 == 1)
  {
    uint64_t v19 = "hidden ";
    size_t v20 = 7;
  }
  else
  {
    if (v17 != 2) {
      goto LABEL_33;
    }
    uint64_t v19 = "protected ";
    size_t v20 = 10;
  }
  llvm::raw_ostream::operator<<(v18, v19, v20);
  unsigned int v16 = *((_DWORD *)a2 + 8);
  size_t v18 = *this;
LABEL_33:
  int v21 = (v16 >> 8) & 3;
  if (v21 == 1)
  {
    int v22 = "dllimport ";
  }
  else
  {
    if (v21 != 2) {
      goto LABEL_38;
    }
    int v22 = "dllexport ";
  }
  llvm::raw_ostream::operator<<(v18, v22, 0xAuLL);
  unsigned int v16 = *((_DWORD *)a2 + 8);
  size_t v18 = *this;
LABEL_38:
  unint64_t v23 = "thread_local ";
  size_t v24 = 13;
  switch((v16 >> 10) & 7)
  {
    case 1u:
      goto LABEL_42;
    case 2u:
      unint64_t v23 = "thread_local(localdynamic) ";
      size_t v24 = 27;
      goto LABEL_42;
    case 3u:
      unint64_t v23 = "thread_local(initialexec) ";
      size_t v24 = 26;
      goto LABEL_42;
    case 4u:
      unint64_t v23 = "thread_local(localexec) ";
      size_t v24 = 24;
LABEL_42:
      llvm::raw_ostream::operator<<(v18, v23, v24);
      unsigned int v16 = *((_DWORD *)a2 + 8);
      break;
    default:
      break;
  }
  int v25 = v16 >> 6;
  if (v25)
  {
    if (v25 == 1)
    {
      uint64_t v26 = "local_unnamed_addr";
      size_t v27 = 18;
    }
    else
    {
      uint64_t v26 = "unnamed_addr";
      size_t v27 = 12;
    }
    int v28 = llvm::raw_ostream::operator<<(*this, v26, v27);
    uint64_t v29 = (unsigned char *)*((void *)v28 + 4);
    if ((unint64_t)v29 >= *((void *)v28 + 3))
    {
      llvm::raw_ostream::write(v28, 32);
    }
    else
    {
      *((void *)v28 + 4) = v29 + 1;
      unsigned char *v29 = 32;
    }
  }
  unint64_t v30 = *(unsigned int *)(*(void *)a2 + 8);
  __int16 v31 = *this;
  if (v30 >= 0x100)
  {
    unint64_t v32 = v30 >> 8;
    uint64_t v33 = *((void *)v31 + 4);
    if ((unint64_t)(*((void *)v31 + 3) - v33) > 9)
    {
      *(_WORD *)(v33 + 8) = 10341;
      *(void *)uint64_t v33 = *(void *)"addrspace(";
      *((void *)v31 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(*this, "addrspace(", 0xAuLL);
    }
    write_unsigned<unsigned long>(v31, v32, 0, 0, 0);
    uint64_t v34 = (_WORD *)*((void *)v31 + 4);
    if (*((void *)v31 + 3) - (void)v34 > 1uLL)
    {
      *uint64_t v34 = 8233;
      *((void *)v31 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v31, ") ", 2uLL);
    }
    __int16 v31 = *this;
  }
  char v35 = *((unsigned char *)a2 + 80);
  if ((v35 & 2) != 0)
  {
    int v36 = (void *)*((void *)v31 + 4);
    if (*((void *)v31 + 3) - (void)v36 > 0x16uLL)
    {
      qmemcpy(v36, "externally_initialized ", 23);
      *((void *)v31 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v31, "externally_initialized ", 0x17uLL);
    }
    __int16 v31 = *this;
    char v35 = *((unsigned char *)a2 + 80);
  }
  if (v35) {
    size_t v37 = 9;
  }
  else {
    size_t v37 = 7;
  }
  if (v35) {
    uint64_t v38 = "constant ";
  }
  else {
    uint64_t v38 = "global ";
  }
  llvm::raw_ostream::operator<<(v31, v38, v37);
  if (*((unsigned char *)a2 + 16))
  {
    if (*((unsigned char *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_79;
    }
  }
  else if (*((const llvm::GlobalVariable **)a2 + 9) == (const llvm::GlobalVariable *)((char *)a2 + 72) {
         && (*((unsigned char *)a2 + 35) & 1) == 0)
  }
  {
    goto LABEL_79;
  }
  int v39 = *this;
  size_t v40 = (unsigned char *)*((void *)*this + 4);
  if ((unint64_t)v40 >= *((void *)*this + 3))
  {
    llvm::raw_ostream::write(v39, 32);
  }
  else
  {
    *((void *)v39 + 4) = v40 + 1;
    *size_t v40 = 32;
  }
LABEL_79:
  if ((*((unsigned char *)a2 + 34) & 0x80) != 0)
  {
    uint64_t v41 = *this;
    uint64_t v42 = *((void *)*this + 4);
    if ((unint64_t)(*((void *)*this + 3) - v42) > 0xA)
    {
      *(_DWORD *)(v42 + 7) = 572550767;
      *(void *)uint64_t v42 = *(void *)", section \"";
      *((void *)v41 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v41, ", section \"", 0xBuLL);
    }
    if ((*((unsigned char *)a2 + 34) & 0x80) != 0)
    {
      int v45 = (uint64_t *)(***(void ***)a2 + 2552);
      std::string __p = a2;
      uint64_t v46 = llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>,llvm::GlobalValue const*,llvm::StringRef,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::StringRef>>::FindAndConstruct(v45, &__p);
      uint64_t v43 = (llvm::raw_ostream *)v46[1];
      uint64_t v44 = v46[2];
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
    }
    llvm::printEscapedString(v43, v44, *this);
    std::string::size_type v47 = *this;
    int v48 = (unsigned char *)*((void *)*this + 4);
    if ((unint64_t)v48 >= *((void *)*this + 3))
    {
      llvm::raw_ostream::write(v47, 34);
    }
    else
    {
      *((void *)v47 + 4) = v48 + 1;
      unsigned char *v48 = 34;
    }
  }
  if ((*((unsigned char *)a2 + 33) & 0x80) != 0)
  {
    char v49 = *this;
    uint64_t v50 = (void *)*((void *)*this + 4);
    if (*((void *)*this + 3) - (void)v50 > 0xCuLL)
    {
      qmemcpy(v50, ", partition \"", 13);
      *((void *)v49 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v49, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition(a2);
    llvm::printEscapedString(Partition, v52, *this);
    uint64_t v53 = *this;
    char v54 = (unsigned char *)*((void *)*this + 4);
    if ((unint64_t)v54 >= *((void *)*this + 3))
    {
      llvm::raw_ostream::write(v53, 34);
    }
    else
    {
      *((void *)v53 + 4) = v54 + 1;
      *char v54 = 34;
    }
  }
  if (*((unsigned char *)a2 + 34))
  {
    uint64_t v55 = (uint64_t *)(***(void ***)a2 + 2600);
    std::string __p = a2;
    char v56 = *((unsigned char *)llvm::DenseMapBase<llvm::DenseMap<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>,llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata,llvm::DenseMapInfo<llvm::GlobalValue const*,void>,llvm::detail::DenseMapPair<llvm::GlobalValue const*,llvm::GlobalValue::SanitizerMetadata>>::FindAndConstruct(v55, &__p)+ 8);
    if ((v56 & 1) == 0)
    {
      if ((v56 & 2) == 0) {
        goto LABEL_99;
      }
LABEL_106:
      uint64_t v59 = *this;
      unsigned int v60 = (void *)*((void *)*this + 4);
      if (*((void *)*this + 3) - (void)v60 > 0x16uLL)
      {
        qmemcpy(v60, ", no_sanitize_hwaddress", 23);
        *((void *)v59 + 4) += 23;
        if ((v56 & 4) != 0) {
          goto LABEL_110;
        }
      }
      else
      {
        llvm::raw_ostream::write(v59, ", no_sanitize_hwaddress", 0x17uLL);
        if ((v56 & 4) != 0) {
          goto LABEL_110;
        }
      }
LABEL_100:
      if ((v56 & 8) == 0) {
        goto LABEL_117;
      }
LABEL_114:
      uint64_t v63 = *this;
      unint64_t v64 = (void *)*((void *)*this + 4);
      if (*((void *)*this + 3) - (void)v64 > 0x19uLL)
      {
        qmemcpy(v64, ", sanitize_address_dyninit", 26);
        *((void *)v63 + 4) += 26;
      }
      else
      {
        llvm::raw_ostream::write(v63, ", sanitize_address_dyninit", 0x1AuLL);
      }
      goto LABEL_117;
    }
    uint64_t v57 = *this;
    unint64_t v58 = (void *)*((void *)*this + 4);
    if (*((void *)*this + 3) - (void)v58 > 0x14uLL)
    {
      qmemcpy(v58, ", no_sanitize_address", 21);
      *((void *)v57 + 4) += 21;
      if ((v56 & 2) != 0) {
        goto LABEL_106;
      }
    }
    else
    {
      llvm::raw_ostream::write(v57, ", no_sanitize_address", 0x15uLL);
      if ((v56 & 2) != 0) {
        goto LABEL_106;
      }
    }
LABEL_99:
    if ((v56 & 4) == 0) {
      goto LABEL_100;
    }
LABEL_110:
    int v61 = *this;
    uint64_t v62 = *((void *)*this + 4);
    if ((unint64_t)(*((void *)*this + 3) - v62) > 0x10)
    {
      *(unsigned char *)(v62 + 16) = 103;
      *(_OWORD *)uint64_t v62 = *(_OWORD *)", sanitize_memtag";
      *((void *)v61 + 4) += 17;
      if ((v56 & 8) == 0) {
        goto LABEL_117;
      }
    }
    else
    {
      llvm::raw_ostream::write(v61, ", sanitize_memtag", 0x11uLL);
      if ((v56 & 8) == 0) {
        goto LABEL_117;
      }
    }
    goto LABEL_114;
  }
LABEL_117:
  maybePrintComdat(*this, (uint64_t)a2);
  unint64_t v65 = ((unint64_t)*((unsigned int *)a2 + 8) >> 17) & 0x3F;
  if (v65)
  {
    char v66 = v65 - 1;
    unint64_t v67 = *this;
    int v68 = (void *)*((void *)*this + 4);
    if (*((void *)*this + 3) - (void)v68 > 7uLL)
    {
      *int v68 = 0x206E67696C61202CLL;
      *((void *)v67 + 4) += 8;
    }
    else
    {
      unint64_t v67 = llvm::raw_ostream::write(v67, ", align ", 8uLL);
    }
    write_unsigned<unsigned long>(v67, 1 << v66, 0, 0, 0);
  }
  std::string __p = v76;
  uint64_t v75 = 0x400000000;
  llvm::Value::getAllMetadata((uint64_t ***)a2, (unsigned int *)&__p);
  uint64_t v69 = *((void *)a2 + 9);
  if (v69)
  {
    uint64_t v70 = *this;
    uint64_t v71 = (_WORD *)*((void *)*this + 4);
    if (*((void *)*this + 3) - (void)v71 > 1uLL)
    {
      *uint64_t v71 = 8992;
      *((void *)v70 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(*this, " #", 2uLL);
    }
    int AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)this[4], v69);
    llvm::write_integer(v70, AttributeGroupSlot, 0, 0);
  }
  if (__p != v76) {
    free(__p);
  }
}

llvm::raw_ostream *anonymous namespace'::AssemblyWriter::printAlias(llvm::raw_ostream **a1, uint64_t a2)
{
  if (a2 && !*(unsigned char *)(a2 + 16) && (*(unsigned char *)(a2 + 35) & 1) != 0)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v5) > 0x10)
    {
      *(unsigned char *)(v5 + 16) = 10;
      *(_OWORD *)uint64_t v5 = *(_OWORD *)"; Materializable\n";
      *((void *)v4 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v4, "; Materializable\n", 0x11uLL);
    }
  }
  int v6 = a1[4];
  int v7 = *(llvm::raw_ostream **)(a2 + 40);
  v44[0] = (llvm::raw_ostream *)&unk_270DC2C20;
  v44[1] = (llvm::raw_ostream *)(a1 + 5);
  v44[2] = v6;
  v44[3] = v7;
  WriteAsOperandInternal(*a1, (uint64_t ***)a2, v44);
  unint64_t v8 = *a1;
  uint64_t v9 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  int v10 = *a1;
  getLinkageNameWithSpace(__p, *(_DWORD *)(a2 + 32) & 0xF);
  if ((v43 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v43 & 0x80u) == 0) {
    size_t v12 = v43;
  }
  else {
    size_t v12 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(v10, (const char *)v11, v12);
  if ((char)v43 < 0) {
    operator delete(__p[0]);
  }
  PrintDSOLocation((llvm::raw_ostream *)a2, *a1);
  unsigned int v13 = *(_DWORD *)(a2 + 32);
  int v14 = (v13 >> 4) & 3;
  size_t v15 = *a1;
  if (v14 == 1)
  {
    unsigned int v16 = "hidden ";
    size_t v17 = 7;
  }
  else
  {
    if (v14 != 2) {
      goto LABEL_23;
    }
    unsigned int v16 = "protected ";
    size_t v17 = 10;
  }
  llvm::raw_ostream::operator<<(v15, v16, v17);
  unsigned int v13 = *(_DWORD *)(a2 + 32);
  size_t v15 = *a1;
LABEL_23:
  int v18 = (v13 >> 8) & 3;
  if (v18 == 1)
  {
    uint64_t v19 = "dllimport ";
  }
  else
  {
    if (v18 != 2) {
      goto LABEL_28;
    }
    uint64_t v19 = "dllexport ";
  }
  llvm::raw_ostream::operator<<(v15, v19, 0xAuLL);
  unsigned int v13 = *(_DWORD *)(a2 + 32);
  size_t v15 = *a1;
LABEL_28:
  size_t v20 = "thread_local ";
  size_t v21 = 13;
  switch((v13 >> 10) & 7)
  {
    case 1u:
      goto LABEL_32;
    case 2u:
      size_t v20 = "thread_local(localdynamic) ";
      size_t v21 = 27;
      goto LABEL_32;
    case 3u:
      size_t v20 = "thread_local(initialexec) ";
      size_t v21 = 26;
      goto LABEL_32;
    case 4u:
      size_t v20 = "thread_local(localexec) ";
      size_t v21 = 24;
LABEL_32:
      llvm::raw_ostream::operator<<(v15, v20, v21);
      unsigned int v13 = *(_DWORD *)(a2 + 32);
      break;
    default:
      break;
  }
  int v22 = v13 >> 6;
  if (v22)
  {
    if (v22 == 1)
    {
      unint64_t v23 = "local_unnamed_addr";
      size_t v24 = 18;
    }
    else
    {
      unint64_t v23 = "unnamed_addr";
      size_t v24 = 12;
    }
    int v25 = llvm::raw_ostream::operator<<(*a1, v23, v24);
    uint64_t v26 = (unsigned char *)*((void *)v25 + 4);
    if ((unint64_t)v26 >= *((void *)v25 + 3))
    {
      llvm::raw_ostream::write(v25, 32);
    }
    else
    {
      *((void *)v25 + 4) = v26 + 1;
      *uint64_t v26 = 32;
    }
  }
  size_t v27 = *a1;
  uint64_t v28 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v28) > 5)
  {
    *(_WORD *)(v28 + 4) = 8307;
    *(_DWORD *)uint64_t v28 = 1634298977;
    *((void *)v27 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v27, "alias ", 6uLL);
  }
  uint64_t v29 = *a1;
  unint64_t v30 = (_WORD *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v30 > 1uLL)
  {
    *unint64_t v30 = 8236;
    *((void *)v29 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v29, ", ", 2uLL);
  }
  uint64_t v31 = *(void *)(a2 - 32);
  if (v31)
  {
  }
  else
  {
    unint64_t v32 = *a1;
    uint64_t v33 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v33) > 0x10)
    {
      *(unsigned char *)(v33 + 16) = 62;
      *(_OWORD *)uint64_t v33 = *(_OWORD *)" <<NULL ALIASEE>>";
      *((void *)v32 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v32, " <<NULL ALIASEE>>", 0x11uLL);
    }
  }
  if ((*(unsigned char *)(a2 + 33) & 0x80) != 0)
  {
    uint64_t v34 = *a1;
    char v35 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v35 > 0xCuLL)
    {
      qmemcpy(v35, ", partition \"", 13);
      *((void *)v34 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v34, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v37, *a1);
    uint64_t v38 = *a1;
    int v39 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v39 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v38, 34);
    }
    else
    {
      *((void *)v38 + 4) = v39 + 1;
      *int v39 = 34;
    }
  }
  uint64_t result = *a1;
  uint64_t v41 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v41 >= *((void *)*a1 + 3)) {
    return llvm::raw_ostream::write(result, 10);
  }
  *((void *)result + 4) = v41 + 1;
  *uint64_t v41 = 10;
  return result;
}

llvm::raw_ostream *anonymous namespace'::AssemblyWriter::printIFunc(llvm::raw_ostream **a1, uint64_t a2)
{
  if (a2 && !*(unsigned char *)(a2 + 16) && (*(unsigned char *)(a2 + 35) & 1) != 0)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v5) > 0x10)
    {
      *(unsigned char *)(v5 + 16) = 10;
      *(_OWORD *)uint64_t v5 = *(_OWORD *)"; Materializable\n";
      *((void *)v4 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v4, "; Materializable\n", 0x11uLL);
    }
  }
  int v6 = a1[4];
  int v7 = *(llvm::raw_ostream **)(a2 + 40);
  v33[0] = (llvm::raw_ostream *)&unk_270DC2C20;
  v33[1] = (llvm::raw_ostream *)(a1 + 5);
  v33[2] = v6;
  v33[3] = v7;
  WriteAsOperandInternal(*a1, (uint64_t ***)a2, v33);
  unint64_t v8 = *a1;
  uint64_t v9 = *((void *)*a1 + 4);
  if ((unint64_t)(*((void *)*a1 + 3) - v9) > 2)
  {
    *(unsigned char *)(v9 + 2) = 32;
    *(_WORD *)uint64_t v9 = 15648;
    *((void *)v8 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v8, " = ", 3uLL);
  }
  int v10 = *a1;
  getLinkageNameWithSpace(__p, *(_DWORD *)(a2 + 32) & 0xF);
  if ((v32 & 0x80u) == 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v32 & 0x80u) == 0) {
    size_t v12 = v32;
  }
  else {
    size_t v12 = (size_t)__p[1];
  }
  llvm::raw_ostream::write(v10, (const char *)v11, v12);
  if ((char)v32 < 0) {
    operator delete(__p[0]);
  }
  PrintDSOLocation((llvm::raw_ostream *)a2, *a1);
  int v13 = (*(_DWORD *)(a2 + 32) >> 4) & 3;
  int v14 = *a1;
  if (v13 == 1)
  {
    size_t v15 = "hidden ";
    size_t v16 = 7;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_23;
    }
    size_t v15 = "protected ";
    size_t v16 = 10;
  }
  llvm::raw_ostream::operator<<(v14, v15, v16);
  int v14 = *a1;
LABEL_23:
  uint64_t v17 = *((void *)v14 + 4);
  if ((unint64_t)(*((void *)v14 + 3) - v17) > 5)
  {
    *(_WORD *)(v17 + 4) = 8291;
    *(_DWORD *)uint64_t v17 = 1853187689;
    *((void *)v14 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v14, "ifunc ", 6uLL);
  }
  int v18 = *a1;
  uint64_t v19 = (_WORD *)*((void *)*a1 + 4);
  if (*((void *)*a1 + 3) - (void)v19 > 1uLL)
  {
    *uint64_t v19 = 8236;
    *((void *)v18 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v18, ", ", 2uLL);
  }
  uint64_t v20 = *(void *)(a2 - 32);
  if (v20)
  {
  }
  else
  {
    size_t v21 = *a1;
    uint64_t v22 = *((void *)*a1 + 4);
    if ((unint64_t)(*((void *)*a1 + 3) - v22) > 0x11)
    {
      *(_WORD *)(v22 + 16) = 15934;
      *(_OWORD *)uint64_t v22 = *(_OWORD *)" <<NULL RESOLVER>>";
      *((void *)v21 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v21, " <<NULL RESOLVER>>", 0x12uLL);
    }
  }
  if ((*(unsigned char *)(a2 + 33) & 0x80) != 0)
  {
    unint64_t v23 = *a1;
    size_t v24 = (void *)*((void *)*a1 + 4);
    if (*((void *)*a1 + 3) - (void)v24 > 0xCuLL)
    {
      qmemcpy(v24, ", partition \"", 13);
      *((void *)v23 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v23, ", partition \"", 0xDuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v26, *a1);
    size_t v27 = *a1;
    uint64_t v28 = (unsigned char *)*((void *)*a1 + 4);
    if ((unint64_t)v28 >= *((void *)*a1 + 3))
    {
      llvm::raw_ostream::write(v27, 34);
    }
    else
    {
      *((void *)v27 + 4) = v28 + 1;
      *uint64_t v28 = 34;
    }
  }
  uint64_t result = *a1;
  unint64_t v30 = (unsigned char *)*((void *)*a1 + 4);
  if ((unint64_t)v30 >= *((void *)*a1 + 3)) {
    return llvm::raw_ostream::write(result, 10);
  }
  *((void *)result + 4) = v30 + 1;
  *unint64_t v30 = 10;
  return result;
}

void WriteConstantInternal(llvm::raw_ostream *a1, const llvm::Constant *a2, llvm::raw_ostream **a3)
{
  uint64_t v5 = a1;
  v123[16] = *MEMORY[0x263EF8340];
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (!a2 || v6 != 16)
  {
    if (a2 && v6 == 17)
    {
      int v10 = (const llvm::Constant *)((char *)a2 + 32);
      uint64_t v11 = (void *)*((void *)a2 + 4);
      size_t v12 = (char *)a2 + 24;
      if (v11 == &llvm::semIEEEsingle || v11 == &llvm::semIEEEdouble)
      {
        if (v11 == &llvm::semPPCDoubleDouble)
        {
          size_t v15 = (char *)*((void *)a2 + 5);
          int v14 = v15 + 28;
        }
        else
        {
          int v14 = (char *)a2 + 52;
          size_t v15 = (char *)a2 + 24;
        }
        if ((*v14 & 7) != 0 && (v15[28] & 7) != 1)
        {
          double v26 = llvm::APFloat::convertToDouble((void **)a2 + 3);
          uint64_t v121 = (char *)v123;
          *(_OWORD *)std::vector<std::string>::size_type __n = xmmword_261E8A720;
          llvm::APFloat::toString((uint64_t)v12, &v121, 6, 0, 0);
          llvm::APFloat::APFloat((uint64_t)&__src, &llvm::semIEEEdouble, v121, __n[0]);
          double v27 = llvm::APFloat::convertToDouble(&__src);
          llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v117);
          if (v27 == v26)
          {
            llvm::raw_ostream::write(v5, v121, __n[0]);
            if (v121 != (char *)v123) {
              free(v121);
            }
            return;
          }
          if (v121 != (char *)v123) {
            free(v121);
          }
        }
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)__n, v10);
        if (v11 != &llvm::semIEEEdouble)
        {
          uint64_t v28 = (_UNKNOWN *)__n[0] == &llvm::semPPCDoubleDouble
              ? (llvm::detail::IEEEFloat *)(__n[1] + 8)
              : (llvm::detail::IEEEFloat *)__n;
          BOOL isSignaling = llvm::detail::IEEEFloat::isSignaling(v28);
          llvm::APFloat::convert((uint64_t)&v121, &llvm::semIEEEdouble, 1, &v115);
          if (isSignaling)
          {
            llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v113, (llvm::APFloat *)&v121);
            unint64_t v30 = (_UNKNOWN *)__n[0] == &llvm::semPPCDoubleDouble ? (char **)__n[1] : &v121;
            int v31 = (*((unsigned __int8 *)v30 + 28) >> 3) & 1;
            llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v117, (uint64_t)&llvm::semIEEEdouble);
            llvm::APFloat::makeNaN((llvm::APFloat *)&__src, 1, v31, (const llvm::APInt *)&v113);
            llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)__n, &v117);
            llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v117);
            if (v114 >= 0x41)
            {
              if (v113) {
                MEMORY[0x263E50080](v113, 0x1000C8000313F17);
              }
            }
          }
        }
        llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v113, (llvm::APFloat *)&v121);
        if (v114 >= 0x41) {
          unsigned __int8 v32 = v113;
        }
        else {
          unsigned __int8 v32 = (void **)&v113;
        }
        __src = *v32;
        long long v117 = 0;
        int v118 = 0;
        __int16 v119 = 257;
        char v120 = 1;
        llvm::raw_ostream::operator<<(v5, (uint64_t)&__src);
        if (v114 >= 0x41 && v113) {
          MEMORY[0x263E50080](v113, 0x1000C8000313F17);
        }
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)__n);
        return;
      }
      uint64_t v20 = (_WORD *)*((void *)a1 + 4);
      if (*((void *)a1 + 3) - (void)v20 > 1uLL)
      {
        *uint64_t v20 = 30768;
        *((void *)a1 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a1, "0x", 2uLL);
      }
      llvm::APFloat::bitcastToAPInt((llvm::APInt *)&__src, (const llvm::Constant *)((char *)a2 + 24));
      unint64_t v23 = *(void **)v10;
      if (*(_UNKNOWN **)v10 == &llvm::semX87DoubleExtended)
      {
        uint64_t v33 = (unsigned char *)*((void *)v5 + 4);
        if ((unint64_t)v33 >= *((void *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 75);
        }
        else
        {
          *((void *)v5 + 4) = v33 + 1;
          *uint64_t v33 = 75;
        }
        unsigned int v36 = v117;
        char v37 = (_BYTE)v117 - 16;
        if (v117 > 0x40) {
          operator new[]();
        }
        unint64_t v38 = (unint64_t)__src >> v37;
        uint64_t v121 = (char *)((unint64_t)__src >> v37);
        __n[0] = 0;
        LODWORD(__n[1]) = 4;
        WORD2(__n[1]) = 257;
        BYTE6(__n[1]) = 0;
        llvm::raw_ostream::operator<<(v5, (uint64_t)&v121);
        if (v36 >= 0x41 && v38) {
          MEMORY[0x263E50080](v38, 0x1000C8000313F17);
        }
        llvm::APInt::getLoBits((llvm::APInt *)&__src, 0x40u, (llvm::APInt *)&v113);
        if (v114 >= 0x41) {
          int v39 = (char **)v113;
        }
        else {
          int v39 = (char **)&v113;
        }
        uint64_t v121 = *v39;
        __n[0] = 0;
        LODWORD(__n[1]) = 16;
        WORD2(__n[1]) = 257;
      }
      else
      {
        if (v23 == &llvm::semIEEEquad)
        {
          char v35 = (unsigned char *)*((void *)v5 + 4);
          if ((unint64_t)v35 >= *((void *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 76);
          }
          else
          {
            *((void *)v5 + 4) = v35 + 1;
            *char v35 = 76;
          }
          llvm::APInt::getLoBits((llvm::APInt *)&__src, 0x40u, (llvm::APInt *)&v113);
          if (v114 >= 0x41) {
            unsigned __int8 v43 = (char **)v113;
          }
          else {
            unsigned __int8 v43 = (char **)&v113;
          }
          uint64_t v121 = *v43;
          __n[0] = 0;
          LODWORD(__n[1]) = 16;
          WORD2(__n[1]) = 257;
          BYTE6(__n[1]) = 0;
          llvm::raw_ostream::operator<<(v5, (uint64_t)&v121);
          if (v114 >= 0x41 && v113) {
            MEMORY[0x263E50080](v113, 0x1000C8000313F17);
          }
          unsigned int v44 = v117;
          char v45 = (_BYTE)v117 - 64;
          if (v117 > 0x40) {
            operator new[]();
          }
          unint64_t v46 = (unint64_t)__src >> v45;
          uint64_t v121 = (char *)((unint64_t)__src >> v45);
          __n[0] = 0;
          LODWORD(__n[1]) = 16;
          WORD2(__n[1]) = 257;
          BYTE6(__n[1]) = 0;
          llvm::raw_ostream::operator<<(v5, (uint64_t)&v121);
          if (v44 < 0x41 || !v46) {
            goto LABEL_154;
          }
          unint64_t v47 = v46;
          goto LABEL_148;
        }
        if (v23 != &llvm::semPPCDoubleDouble)
        {
          if (v23 == &llvm::semIEEEhalf)
          {
            size_t v24 = (char *)*((void *)v5 + 4);
            if ((unint64_t)v24 < *((void *)v5 + 3))
            {
              *((void *)v5 + 4) = v24 + 1;
              char v25 = 72;
              goto LABEL_125;
            }
            uint64_t v51 = v5;
            char v52 = 72;
          }
          else
          {
            size_t v24 = (char *)*((void *)v5 + 4);
            if ((unint64_t)v24 < *((void *)v5 + 3))
            {
              *((void *)v5 + 4) = v24 + 1;
              char v25 = 82;
LABEL_125:
              *size_t v24 = v25;
LABEL_151:
              p_src = (char **)&__src;
              if (v117 >= 0x41) {
                p_src = (char **)__src;
              }
              uint64_t v121 = *p_src;
              __n[0] = 0;
              LODWORD(__n[1]) = 4;
              WORD2(__n[1]) = 257;
              BYTE6(__n[1]) = 0;
              llvm::raw_ostream::operator<<(v5, (uint64_t)&v121);
              goto LABEL_154;
            }
            uint64_t v51 = v5;
            char v52 = 82;
          }
          llvm::raw_ostream::write(v51, v52);
          goto LABEL_151;
        }
        uint64_t v42 = (unsigned char *)*((void *)v5 + 4);
        if ((unint64_t)v42 >= *((void *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 77);
        }
        else
        {
          *((void *)v5 + 4) = v42 + 1;
          *uint64_t v42 = 77;
        }
        llvm::APInt::getLoBits((llvm::APInt *)&__src, 0x40u, (llvm::APInt *)&v113);
        if (v114 >= 0x41) {
          uint64_t v53 = (char **)v113;
        }
        else {
          uint64_t v53 = (char **)&v113;
        }
        uint64_t v121 = *v53;
        __n[0] = 0;
        LODWORD(__n[1]) = 16;
        WORD2(__n[1]) = 257;
        BYTE6(__n[1]) = 0;
        llvm::raw_ostream::operator<<(v5, (uint64_t)&v121);
        if (v114 >= 0x41 && v113) {
          MEMORY[0x263E50080](v113, 0x1000C8000313F17);
        }
        llvm::APInt::getHiBits((llvm::APInt *)&__src, 64, (uint64_t)&v113);
        if (v114 >= 0x41) {
          char v54 = (char **)v113;
        }
        else {
          char v54 = (char **)&v113;
        }
        uint64_t v121 = *v54;
        __n[0] = 0;
        LODWORD(__n[1]) = 16;
        WORD2(__n[1]) = 257;
      }
      BYTE6(__n[1]) = 0;
      llvm::raw_ostream::operator<<(v5, (uint64_t)&v121);
      if (v114 < 0x41 || (unint64_t v47 = (unint64_t)v113) == 0)
      {
LABEL_154:
        if (v117 >= 0x41 && __src) {
          MEMORY[0x263E50080](__src, 0x1000C8000313F17);
        }
        return;
      }
LABEL_148:
      MEMORY[0x263E50080](v47, 0x1000C8000313F17);
      goto LABEL_154;
    }
    if (v6 == 18 || v6 == 13)
    {
      uint64_t v17 = (void *)*((void *)a1 + 4);
      if (*((void *)a1 + 3) - (void)v17 > 0xEuLL)
      {
        qmemcpy(v17, "zeroinitializer", 15);
        uint64_t v22 = *((void *)a1 + 4) + 15;
LABEL_106:
        *((void *)v5 + 4) = v22;
        return;
      }
      int v18 = "zeroinitializer";
      size_t v19 = 15;
LABEL_35:
      llvm::raw_ostream::write(a1, v18, v19);
      return;
    }
    if (a2 && v6 == 4)
    {
      size_t v21 = (void *)*((void *)a1 + 4);
      if (*((void *)a1 + 3) - (void)v21 > 0xCuLL)
      {
        qmemcpy(v21, "blockaddress(", 13);
        *((void *)a1 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(a1, "blockaddress(", 0xDuLL);
      }
      WriteAsOperandInternal(v5, *((const llvm::Value **)a2 - 8), (_anonymous_namespace_::AsmWriterContext *)a3);
      size_t v40 = (_WORD *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v40 > 1uLL)
      {
        *size_t v40 = 8236;
        *((void *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, ", ", 2uLL);
      }
      WriteAsOperandInternal(v5, *((const llvm::Value **)a2 - 4), (_anonymous_namespace_::AsmWriterContext *)a3);
      uint64_t v41 = (unsigned char *)*((void *)v5 + 4);
      if (*((unsigned char **)v5 + 3) != v41)
      {
        *uint64_t v41 = 41;
        uint64_t v22 = *((void *)v5 + 4) + 1;
        goto LABEL_106;
      }
      int v18 = ")";
      a1 = v5;
      size_t v19 = 1;
      goto LABEL_35;
    }
    if (a2 && v6 == 6)
    {
      uint64_t v34 = (void *)*((void *)a1 + 4);
      if (*((void *)a1 + 3) - (void)v34 > 0x14uLL)
      {
        qmemcpy(v34, "dso_local_equivalent ", 21);
        *((void *)a1 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(a1, "dso_local_equivalent ", 0x15uLL);
      }
      goto LABEL_127;
    }
    if (a2 && v6 == 7)
    {
      llvm::raw_ostream::operator<<(a1, "no_cfi ", 7uLL);
LABEL_127:
      int v48 = (const llvm::Value *)*((void *)a2 - 4);
      WriteAsOperandInternal(v5, v48, (_anonymous_namespace_::AsmWriterContext *)a3);
      return;
    }
    if (a2 && v6 == 8)
    {
      char v49 = *(llvm::Type **)(*(void *)a2 + 24);
      uint64_t v50 = (unsigned char *)*((void *)a1 + 4);
      if ((unint64_t)v50 >= *((void *)a1 + 3))
      {
        llvm::raw_ostream::write(a1, 91);
      }
      else
      {
        *((void *)a1 + 4) = v50 + 1;
        *uint64_t v50 = 91;
      }
      uint64_t v63 = (unsigned char *)*((void *)v5 + 4);
      if ((unint64_t)v63 >= *((void *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *((void *)v5 + 4) = v63 + 1;
        unsigned char *v63 = 32;
      }
      WriteAsOperandInternal(v5, *((const llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (_anonymous_namespace_::AsmWriterContext *)a3);
      int v65 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      int v66 = v65 - 1;
      if (v65 != 1)
      {
        unint64_t v67 = (char *)a2 + 32;
        do
        {
          int v68 = (_WORD *)*((void *)v5 + 4);
          if (*((void *)v5 + 3) - (void)v68 > 1uLL)
          {
            *int v68 = 8236;
            *((void *)v5 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
          }
          uint64_t v69 = (unsigned char *)*((void *)v5 + 4);
          if ((unint64_t)v69 >= *((void *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *((void *)v5 + 4) = v69 + 1;
            unsigned char *v69 = 32;
          }
          WriteAsOperandInternal(v5, *(const llvm::Value **)&v67[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (_anonymous_namespace_::AsmWriterContext *)a3);
          v67 += 32;
          --v66;
        }
        while (v66);
      }
      int v61 = (char *)*((void *)v5 + 4);
      if ((unint64_t)v61 < *((void *)v5 + 3))
      {
        *((void *)v5 + 4) = v61 + 1;
LABEL_205:
        char v62 = 93;
        goto LABEL_206;
      }
LABEL_207:
      int v81 = v5;
      char v82 = 93;
      goto LABEL_208;
    }
    if (a2 && v6 == 14)
    {
      uint64_t v56 = *(void *)a2;
      if (*(unsigned char *)(*(void *)a2 + 8) == 17)
      {
        uint64_t v57 = *(llvm::Type **)(v56 + 24);
        unint64_t v58 = (void *)((char *)a1 + 32);
        if (*((_DWORD *)v57 + 2) == 2061)
        {
          llvm::raw_ostream::operator<<(a1, "c\"", 2uLL);
          RawDataValues = (llvm::raw_ostream *)llvm::ConstantDataSequential::getRawDataValues(a2);
          llvm::printEscapedString(RawDataValues, v60, v5);
          int v61 = (char *)*((void *)v5 + 4);
          if ((unint64_t)v61 < *((void *)v5 + 3))
          {
            *unint64_t v58 = v61 + 1;
            char v62 = 34;
LABEL_206:
            *int v61 = v62;
            return;
          }
          int v81 = v5;
          char v82 = 34;
LABEL_208:
          llvm::raw_ostream::write(v81, v82);
          return;
        }
      }
      else
      {
        unint64_t v58 = (void *)((char *)a1 + 32);
        uint64_t v57 = *(llvm::Type **)(v56 + 24);
      }
      uint64_t v70 = (unsigned char *)*((void *)a1 + 4);
      if ((unint64_t)v70 >= *((void *)a1 + 3))
      {
        llvm::raw_ostream::write(a1, 91);
      }
      else
      {
        *unint64_t v58 = v70 + 1;
        *uint64_t v70 = 91;
      }
      uint64_t v74 = (unsigned char *)*((void *)v5 + 4);
      if ((unint64_t)v74 >= *((void *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 32);
      }
      else
      {
        *unint64_t v58 = v74 + 1;
        *uint64_t v74 = 32;
      }
      ElementAsConstant = (const llvm::Value *)llvm::ConstantDataSequential::getElementAsConstant(a2, 0);
      WriteAsOperandInternal(v5, ElementAsConstant, (_anonymous_namespace_::AsmWriterContext *)a3);
      int v76 = *(_DWORD *)(*(void *)a2 + 32);
      if (v76 != 1)
      {
        for (unsigned int i = 1; i != v76; ++i)
        {
          uint64_t v78 = (_WORD *)*((void *)v5 + 4);
          if (*((void *)v5 + 3) - (void)v78 > 1uLL)
          {
            *uint64_t v78 = 8236;
            *v58 += 2;
          }
          else
          {
            llvm::raw_ostream::write(v5, ", ", 2uLL);
          }
          uint64_t v79 = (unsigned char *)*((void *)v5 + 4);
          if ((unint64_t)v79 >= *((void *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *unint64_t v58 = v79 + 1;
            *uint64_t v79 = 32;
          }
          size_t v80 = (const llvm::Value *)llvm::ConstantDataSequential::getElementAsConstant(a2, i);
          WriteAsOperandInternal(v5, v80, (_anonymous_namespace_::AsmWriterContext *)a3);
        }
      }
      int v61 = (char *)*((void *)v5 + 4);
      if ((unint64_t)v61 < *((void *)v5 + 3))
      {
        *unint64_t v58 = v61 + 1;
        goto LABEL_205;
      }
      goto LABEL_207;
    }
    if (a2 && v6 == 9)
    {
      if ((*(unsigned char *)(*(void *)a2 + 9) & 2) != 0)
      {
        unint64_t v64 = (unsigned char *)*((void *)a1 + 4);
        if ((unint64_t)v64 >= *((void *)a1 + 3))
        {
          llvm::raw_ostream::write(a1, 60);
        }
        else
        {
          *((void *)a1 + 4) = v64 + 1;
          *unint64_t v64 = 60;
        }
      }
      uint64_t v83 = (unsigned char *)*((void *)v5 + 4);
      if ((unint64_t)v83 >= *((void *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 123);
      }
      else
      {
        *((void *)v5 + 4) = v83 + 1;
        *uint64_t v83 = 123;
      }
      int v84 = *((_DWORD *)a2 + 5);
      uint64_t v85 = v84 & 0x7FFFFFF;
      if ((v84 & 0x7FFFFFF) != 0)
      {
        char v86 = (unsigned char *)*((void *)v5 + 4);
        if ((unint64_t)v86 >= *((void *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((void *)v5 + 4) = v86 + 1;
          *char v86 = 32;
        }
        int v87 = (unsigned char *)*((void *)v5 + 4);
        if ((unint64_t)v87 >= *((void *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((void *)v5 + 4) = v87 + 1;
          *int v87 = 32;
        }
        WriteAsOperandInternal(v5, *((const llvm::Value **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (_anonymous_namespace_::AsmWriterContext *)a3);
        if (v85 >= 2)
        {
          uint64_t v88 = v85 - 1;
          size_t v89 = (char *)a2 + 32;
          do
          {
            llvm::raw_ostream::operator<<(v5, ", ", 2uLL);
            int v90 = (unsigned char *)*((void *)v5 + 4);
            if ((unint64_t)v90 >= *((void *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((void *)v5 + 4) = v90 + 1;
              *int v90 = 32;
            }
            WriteAsOperandInternal(v5, *(const llvm::Value **)&v89[-32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)], (_anonymous_namespace_::AsmWriterContext *)a3);
            v89 += 32;
            --v88;
          }
          while (v88);
        }
        uint64_t v91 = (unsigned char *)*((void *)v5 + 4);
        if ((unint64_t)v91 >= *((void *)v5 + 3))
        {
          llvm::raw_ostream::write(v5, 32);
        }
        else
        {
          *((void *)v5 + 4) = v91 + 1;
          *uint64_t v91 = 32;
        }
      }
      uint64_t v92 = (unsigned char *)*((void *)v5 + 4);
      if ((unint64_t)v92 >= *((void *)v5 + 3))
      {
        llvm::raw_ostream::write(v5, 125);
      }
      else
      {
        *((void *)v5 + 4) = v92 + 1;
        *uint64_t v92 = 125;
      }
      if ((*(unsigned char *)(*(void *)a2 + 9) & 2) == 0) {
        return;
      }
LABEL_253:
      int v61 = (char *)*((void *)v5 + 4);
      if ((unint64_t)v61 < *((void *)v5 + 3))
      {
        *((void *)v5 + 4) = v61 + 1;
        char v62 = 62;
        goto LABEL_206;
      }
      int v81 = v5;
      char v82 = 62;
    }
    else
    {
      switch(*((unsigned char *)a2 + 16))
      {
        case 0xA:
        case 0xF:
          uint64_t v71 = *(void *)a2;
          unint64_t v72 = *(llvm::Type **)(*(void *)a2 + 24);
          size_t v73 = (unsigned char *)*((void *)a1 + 4);
          if ((unint64_t)v73 >= *((void *)a1 + 3))
          {
            llvm::raw_ostream::write(a1, 60);
          }
          else
          {
            *((void *)a1 + 4) = v73 + 1;
            *size_t v73 = 60;
          }
          unint64_t v93 = (unsigned char *)*((void *)v5 + 4);
          if ((unint64_t)v93 >= *((void *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 32);
          }
          else
          {
            *((void *)v5 + 4) = v93 + 1;
            unsigned char *v93 = 32;
          }
          AggregateElement = (const llvm::Value *)llvm::Constant::getAggregateElement(a2, 0);
          WriteAsOperandInternal(v5, AggregateElement, (_anonymous_namespace_::AsmWriterContext *)a3);
          int v95 = *(_DWORD *)(v71 + 32);
          if (v95 != 1)
          {
            uint64_t v96 = 1;
            do
            {
              llvm::raw_ostream::operator<<(v5, ", ", 2uLL);
              int64_t v97 = (unsigned char *)*((void *)v5 + 4);
              if ((unint64_t)v97 >= *((void *)v5 + 3))
              {
                llvm::raw_ostream::write(v5, 32);
              }
              else
              {
                *((void *)v5 + 4) = v97 + 1;
                *int64_t v97 = 32;
              }
              uint64_t v98 = (const llvm::Value *)llvm::Constant::getAggregateElement(a2, (llvm::Type *)v96);
              WriteAsOperandInternal(v5, v98, (_anonymous_namespace_::AsmWriterContext *)a3);
              uint64_t v96 = (v96 + 1);
            }
            while (v95 != v96);
          }
          goto LABEL_253;
        case 0xC:
          uint64_t v9 = "poison";
          size_t v8 = 6;
          goto LABEL_13;
        case 0x13:
          uint64_t v9 = "null";
          goto LABEL_242;
        case 0x14:
          uint64_t v9 = "none";
LABEL_242:
          size_t v8 = 4;
          goto LABEL_13;
        default:
          if ((v6 - 11) <= 1)
          {
            uint64_t v9 = "undef";
            size_t v8 = 5;
            goto LABEL_13;
          }
          if (!a2 || v6 != 5)
          {
            uint64_t v9 = "<placeholder or erroneous Constant>";
            size_t v8 = 35;
            goto LABEL_13;
          }
          Opcodeuint64_t Name = (char *)llvm::Instruction::getOpcodeName((llvm::Instruction *)*((unsigned __int16 *)a2 + 9));
          llvm::raw_ostream::operator<<(v5, OpcodeName);
          WriteOptimizationInfo(v5, a2);
          if (*((unsigned __int16 *)a2 + 9) - 53 <= 1)
          {
            uint64_t v100 = (unsigned char *)*((void *)v5 + 4);
            if ((unint64_t)v100 >= *((void *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((void *)v5 + 4) = v100 + 1;
              *uint64_t v100 = 32;
            }
            Predicateuint64_t Name = llvm::CmpInst::getPredicateName(*((unsigned __int16 *)a2 + 12));
            llvm::raw_ostream::operator<<(v5, PredicateName, v102);
          }
          llvm::raw_ostream::operator<<(v5, " (", 2uLL);
          if (*((_WORD *)a2 + 9) == 34)
          {
            uint64_t v103 = 24;
            if (*((unsigned char *)a2 + 16) == 62) {
              uint64_t v103 = 64;
            }
            llvm::raw_ostream::operator<<(v5, ", ", 2uLL);
            unsigned int v104 = *((unsigned __int8 *)a2 + 17);
            BOOL v105 = v104 > 3;
            BOOL v106 = v104 > 3;
            if (v104 <= 3) {
              unsigned __int8 v107 = 0;
            }
            else {
              unsigned __int8 v107 = (*((unsigned char *)a2 + 17) >> 2) - 1;
            }
            if (v105) {
              int v108 = v107 + 1;
            }
            else {
              int v108 = 0;
            }
          }
          else
          {
            int v108 = 0;
            BOOL v106 = 0;
          }
          uint64_t v109 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
          if (!v109) {
            goto LABEL_284;
          }
          uint64_t v110 = -32 * v109;
          if (v106) {
            goto LABEL_278;
          }
          while (1)
          {
            uint64_t v111 = (unsigned char *)*((void *)v5 + 4);
            if ((unint64_t)v111 >= *((void *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((void *)v5 + 4) = v111 + 1;
              *uint64_t v111 = 32;
            }
            WriteAsOperandInternal(v5, *(const llvm::Value **)((char *)a2 + v110), (_anonymous_namespace_::AsmWriterContext *)a3);
            if (v110 == -32) {
              break;
            }
            llvm::raw_ostream::operator<<(v5, ", ", 2uLL);
            v110 += 32;
            if (v106)
            {
LABEL_278:
              if (v108 == ((v110 + 32 * (unint64_t)(*((_DWORD *)a2 + 5) & 0x7FFFFFF)) >> 5)) {
                llvm::raw_ostream::operator<<(v5, "inrange ", 8uLL);
              }
            }
          }
LABEL_284:
          int v112 = *((unsigned __int16 *)a2 + 9);
          if ((v112 - 38) < 0xD)
          {
            llvm::raw_ostream::operator<<(v5, " to ", 4uLL);
            int v112 = *((unsigned __int16 *)a2 + 9);
          }
          if (v112 == 63) {
            PrintShuffleMask(v5, *(void *)a2, *((int **)a2 + 3), *((unsigned int *)a2 + 8));
          }
          int v61 = (char *)*((void *)v5 + 4);
          if ((unint64_t)v61 < *((void *)v5 + 3))
          {
            *((void *)v5 + 4) = v61 + 1;
            char v62 = 41;
            goto LABEL_206;
          }
          int v81 = v5;
          char v82 = 41;
          break;
      }
    }
    goto LABEL_208;
  }
  int v7 = (const llvm::Constant *)((char *)a2 + 24);
  if (*(_DWORD *)(*(void *)a2 + 8) == 269)
  {
    if (*((_DWORD *)a2 + 8) >= 0x41u) {
      int v7 = *(llvm::APInt **)v7;
    }
    if (*(void *)v7) {
      size_t v8 = 4;
    }
    else {
      size_t v8 = 5;
    }
    if (*(void *)v7) {
      uint64_t v9 = "true";
    }
    else {
      uint64_t v9 = "false";
    }
    a1 = v5;
LABEL_13:
    llvm::raw_ostream::operator<<(a1, v9, v8);
  }
  else
  {
    llvm::APInt::print(v7, v5, 1);
  }
}

uint64_t printAsOperandImpl(llvm::Type **a1, uint64_t **a2, int a3, llvm::ModuleSlotTracker *this)
{
  uint64_t v7 = *((void *)this + 3);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = v7;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v25 = 0;
  double v27 = 0;
  uint64_t v28 = 0;
  double v26 = 0;
  char v29 = 0;
  int v32 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  std::string __p = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (a3)
  {
    size_t v8 = a2[4];
    if (v8 >= a2[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, 32);
    }
    else
    {
      a2[4] = (uint64_t *)((char *)v8 + 1);
      *(unsigned char *)size_t v8 = 32;
    }
  }
  Machine = (llvm::raw_ostream *)llvm::ModuleSlotTracker::getMachine(this);
  int v10 = (llvm::raw_ostream *)*((void *)this + 3);
  v12[0] = (llvm::raw_ostream *)&unk_270DC2C20;
  v12[1] = (llvm::raw_ostream *)&v13;
  v12[2] = Machine;
  v12[3] = v10;
  WriteAsOperandInternal((llvm::raw_ostream *)a2, (uint64_t ***)a1, v12);
  if (__p)
  {
    uint64_t v34 = __p;
    operator delete(__p);
  }
  MEMORY[0x263E500A0](v30, 8);
  if (v26)
  {
    double v27 = v26;
    operator delete(v26);
  }
  MEMORY[0x263E500A0](v23, 8);
  MEMORY[0x263E500A0](v20, 8);
  MEMORY[0x263E500A0](v17, 8);
  return MEMORY[0x263E500A0](v14, 8);
}

void printMetadataImpl(llvm::raw_ostream *a1, uint64_t a2, llvm::ModuleSlotTracker *a3, uint64_t a4, char a5, int a6)
{
  int v10 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  int v16 = 1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = &unk_270DBCD60;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = &v21;
  long long v20 = xmmword_261E8D150;
  llvm::formatted_raw_ostream::setStream((llvm::formatted_raw_ostream *)&v9, a1);
  llvm::ModuleSlotTracker::getMachine(a3);
  if (a6)
  {
    if ((a5 & 1) == 0) {
      operator new();
    }
  }
  operator new();
}

void llvm::SlotTracker::~SlotTracker(llvm::SlotTracker *this)
{
  llvm::SlotTracker::~SlotTracker(this);
  JUMPOUT(0x263E500B0);
}

{
  *(void *)this = &unk_270DC2BA8;
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 296);
  MEMORY[0x263E500A0](*((void *)this + 33), 8);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 232);
  MEMORY[0x263E500A0](*((void *)this + 25), 8);
  MEMORY[0x263E500A0](*((void *)this + 21), 8);
  MEMORY[0x263E500A0](*((void *)this + 17), 8);
  MEMORY[0x263E500A0](*((void *)this + 13), 8);
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Function const*,BOOL)>::~__value_func[abi:nn180100]((void *)this + 8);
  std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Module const*,BOOL)>::~__value_func[abi:nn180100]((void *)this + 4);
}

uint64_t llvm::SlotTracker::getNextMetadataSlot(llvm::SlotTracker *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t llvm::concat_iterator<llvm::GlobalObject const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>>::getHelper<0ul>(void *a1)
{
  if (*a1 == a1[2] || *a1 == 0) {
    return 0;
  }
  else {
    return *a1 - 56;
  }
}

uint64_t llvm::concat_iterator<llvm::GlobalObject const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>>::getHelper<1ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == *(void *)(a1 + 24) || v1 == 0) {
    return 0;
  }
  else {
    return v1 - 56;
  }
}

BOOL llvm::concat_iterator<llvm::GlobalObject const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>>::incrementHelper<0ul>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[2];
  if (*a1 != v2) {
    *a1 = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalObject const,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,true>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,true>>::incrementHelper<1ul>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  if (v1 != v2) {
    *(void *)(a1 + 8) = *(void *)(v1 + 8);
  }
  return v1 != v2;
}

void anonymous namespace'::AssemblyWriter::printMetadataAttachments(uint64_t a1, _DWORD *a2, const void *a3, size_t __n)
{
  unsigned int v4 = a2[2];
  if (v4)
  {
    if (!*(_DWORD *)(a1 + 320))
    {
      uint64_t v9 = (void *)(a1 + 312);
      uint64_t v10 = *(void *)(*(void *)(*(void *)a2 + 8) + 8);
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 4) != 0) {
        uint64_t v11 = (void *)*v11;
      }
      llvm::LLVMContext::getMDKindNames((uint64_t)v11, v9);
      unsigned int v4 = a2[2];
    }
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 8);
    v23[0] = &unk_270DC2C20;
    v23[1] = a1 + 40;
    v23[2] = v12;
    v23[3] = v13;
    if (v4)
    {
      char v14 = *(llvm::DIExpression ***)a2;
      uint64_t v15 = *(void *)a2 + 16 * v4;
      do
      {
        unint64_t v16 = *(unsigned int *)v14;
        llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, a3, __n);
        uint64_t v17 = *(llvm::raw_ostream **)a1;
        int v19 = *(char **)(*(void *)a1 + 24);
        uint64_t v18 = *(char **)(*(void *)a1 + 32);
        if (*(_DWORD *)(a1 + 320) <= v16)
        {
          if ((unint64_t)(v19 - v18) > 0xF)
          {
            *(_OWORD *)uint64_t v18 = *(_OWORD *)"!<unknown kind #";
            *((void *)v17 + 4) += 16;
          }
          else
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "!<unknown kind #", 0x10uLL);
          }
          write_unsigned<unsigned long>(v17, v16, 0, 0, 0);
          long long v20 = (unsigned char *)*((void *)v17 + 4);
          if (*((unsigned char **)v17 + 3) == v20)
          {
            llvm::raw_ostream::write(v17, ">", 1uLL);
          }
          else
          {
            *long long v20 = 62;
            ++*((void *)v17 + 4);
          }
        }
        else
        {
          if (v19 == v18)
          {
            llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "!", 1uLL);
          }
          else
          {
            *uint64_t v18 = 33;
            ++*((void *)v17 + 4);
          }
          printMetadataIdentifier(*(llvm::raw_ostream **)(*(void *)(a1 + 312) + 16 * v16), *(void *)(*(void *)(a1 + 312) + 16 * v16 + 8), *(llvm::raw_ostream **)a1);
        }
        uint64_t v21 = *(llvm::raw_ostream **)a1;
        int v22 = *(unsigned char **)(*(void *)a1 + 32);
        if ((unint64_t)v22 >= *(void *)(*(void *)a1 + 24))
        {
          llvm::raw_ostream::write(v21, 32);
        }
        else
        {
          *((void *)v21 + 4) = v22 + 1;
          *int v22 = 32;
        }
        WriteAsOperandInternal(*(llvm::raw_ostream **)a1, v14[1], (uint64_t)v23);
        v14 += 2;
      }
      while (v14 != (llvm::DIExpression **)v15);
    }
  }
}

void getLinkageNameWithSpace(void *a1, int a2)
{
  if (a2)
  {
    std::string::basic_string[abi:nn180100]<0>(&v5, off_265597018[a2 - 1]);
    uint64_t v3 = std::string::append(&v5, " ");
    std::string::size_type v4 = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)a1 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    a1[2] = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(a1, "");
  }
}

llvm::raw_ostream *PrintDSOLocation(llvm::raw_ostream *result, llvm::formatted_raw_ostream *this)
{
  int v2 = *((_DWORD *)result + 8);
  if ((v2 & 0x4000) != 0 && (*((_DWORD *)result + 8) & 0xFu) - 7 >= 2)
  {
    if ((v2 & 0x30) == 0
      || (uint64_t result = (llvm::raw_ostream *)llvm::GlobalValue::hasExternalWeakLinkage(result), result))
    {
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) > 9)
      {
        *(_WORD *)(v4 + 8) = 8300;
        *(void *)uint64_t v4 = *(void *)"dso_local ";
        *((void *)this + 4) += 10;
      }
      else
      {
        return llvm::raw_ostream::write(this, "dso_local ", 0xAuLL);
      }
    }
  }
  return result;
}

llvm::raw_ostream *PrintCallingConv(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  unsigned int v3 = result;
  switch((int)result)
  {
    case 8:
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) <= 5)
      {
        std::string v5 = "fastcc";
        goto LABEL_63;
      }
      *(_WORD *)(v4 + 4) = 25443;
      int v22 = 1953718630;
      goto LABEL_144;
    case 9:
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) <= 5)
      {
        std::string v5 = "coldcc";
        goto LABEL_63;
      }
      *(_WORD *)(v4 + 4) = 25443;
      int v22 = 1684828003;
      goto LABEL_144;
    case 10:
      uint64_t v6 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v6) <= 4)
      {
        std::string v5 = "ghccc";
        uint64_t v7 = this;
        size_t v8 = 5;
        goto LABEL_106;
      }
      *(unsigned char *)(v6 + 4) = 99;
      *(_DWORD *)uint64_t v6 = 1667459175;
      uint64_t v23 = *((void *)this + 4) + 5;
      goto LABEL_169;
    case 12:
      uint64_t v10 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v10) <= 0xA)
      {
        std::string v5 = "webkit_jscc";
        goto LABEL_71;
      }
      int v24 = 1667461994;
      int v25 = "webkit_jscc";
      goto LABEL_149;
    case 13:
      uint64_t v11 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v11 <= 7uLL)
      {
        std::string v5 = "anyregcc";
        goto LABEL_66;
      }
      uint64_t v26 = 0x676572796E61;
      goto LABEL_146;
    case 14:
      uint64_t v12 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 0xEuLL)
      {
        std::string v5 = "preserve_mostcc";
        goto LABEL_38;
      }
      double v27 = "preserve_mostcc";
      goto LABEL_130;
    case 15:
      uint64_t v13 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v13 <= 0xDuLL)
      {
        std::string v5 = "preserve_allcc";
        goto LABEL_53;
      }
      uint64_t v28 = "preserve_allcc";
      goto LABEL_138;
    case 16:
      char v14 = (int *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v14 <= 6uLL)
      {
        std::string v5 = "swiftcc";
        goto LABEL_58;
      }
      *(int *)((char *)v14 + 3) = 1667462246;
      int v29 = 1718187891;
      goto LABEL_141;
    case 17:
      uint64_t v13 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v13 <= 0xDuLL)
      {
        std::string v5 = "cxx_fast_tlscc";
        goto LABEL_53;
      }
      uint64_t v28 = "cxx_fast_tlscc";
      goto LABEL_138;
    case 18:
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) <= 5)
      {
        std::string v5 = "tailcc";
        goto LABEL_63;
      }
      *(_WORD *)(v4 + 4) = 25443;
      int v22 = 1818845556;
      goto LABEL_144;
    case 19:
      uint64_t v12 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 0xEuLL)
      {
        std::string v5 = "cfguard_checkcc";
        goto LABEL_38;
      }
      double v27 = "cfguard_checkcc";
      goto LABEL_130;
    case 20:
      uint64_t v10 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v10) <= 0xA)
      {
        std::string v5 = "swifttailcc";
        goto LABEL_71;
      }
      int v24 = 1667460201;
      int v25 = "swifttailcc";
      goto LABEL_149;
    case 64:
      uint64_t v15 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 <= 0xCuLL)
      {
        std::string v5 = "x86_stdcallcc";
        goto LABEL_86;
      }
      uint64_t v30 = "x86_stdcallcc";
      goto LABEL_157;
    case 65:
      uint64_t v13 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v13 <= 0xDuLL)
      {
        std::string v5 = "x86_fastcallcc";
        goto LABEL_53;
      }
      uint64_t v28 = "x86_fastcallcc";
      goto LABEL_138;
    case 66:
      uint64_t v16 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v16) <= 9)
      {
        std::string v5 = "arm_apcscc";
        goto LABEL_100;
      }
      __int16 v31 = 25443;
      int v32 = "arm_apcscc";
      goto LABEL_165;
    case 67:
      uint64_t v10 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v10) <= 0xA)
      {
        std::string v5 = "arm_aapcscc";
        goto LABEL_71;
      }
      int v24 = 1667461987;
      int v25 = "arm_aapcscc";
      goto LABEL_149;
    case 68:
      uint64_t v12 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v12 <= 0xEuLL)
      {
        std::string v5 = "arm_aapcs_vfpcc";
LABEL_38:
        uint64_t v7 = this;
        size_t v8 = 15;
        goto LABEL_106;
      }
      double v27 = "arm_aapcs_vfpcc";
LABEL_130:
      *uint64_t v12 = *(void *)v27;
      *(void *)((char *)v12 + 7) = *(void *)(v27 + 7);
      uint64_t v23 = *((void *)this + 4) + 15;
      goto LABEL_169;
    case 69:
      uint64_t v15 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 <= 0xCuLL)
      {
        std::string v5 = "msp430_intrcc";
        goto LABEL_86;
      }
      uint64_t v30 = "msp430_intrcc";
      goto LABEL_157;
    case 70:
      uint64_t v13 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v13 <= 0xDuLL)
      {
        std::string v5 = "x86_thiscallcc";
        goto LABEL_53;
      }
      uint64_t v28 = "x86_thiscallcc";
      goto LABEL_138;
    case 71:
      uint64_t v16 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v16) <= 9)
      {
        std::string v5 = "ptx_kernel";
        goto LABEL_100;
      }
      __int16 v31 = 27749;
      int v32 = "ptx_kernel";
      goto LABEL_165;
    case 72:
      uint64_t v16 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v16) <= 9)
      {
        std::string v5 = "ptx_device";
        goto LABEL_100;
      }
      __int16 v31 = 25955;
      int v32 = "ptx_device";
      goto LABEL_165;
    case 75:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 8)
      {
        std::string v5 = "spir_func";
        goto LABEL_93;
      }
      char v33 = 99;
      uint64_t v34 = "spir_func";
      goto LABEL_161;
    case 76:
      uint64_t v10 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v10) <= 0xA)
      {
        std::string v5 = "spir_kernel";
        goto LABEL_71;
      }
      int v24 = 1818586738;
      int v25 = "spir_kernel";
      goto LABEL_149;
    case 77:
      uint64_t v13 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v13 <= 0xDuLL)
      {
        std::string v5 = "intel_ocl_bicc";
LABEL_53:
        uint64_t v7 = this;
        size_t v8 = 14;
        goto LABEL_106;
      }
      uint64_t v28 = "intel_ocl_bicc";
LABEL_138:
      *uint64_t v13 = *(void *)v28;
      *(void *)((char *)v13 + 6) = *(void *)(v28 + 6);
      uint64_t v23 = *((void *)this + 4) + 14;
      goto LABEL_169;
    case 78:
      uint64_t v15 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 <= 0xCuLL)
      {
        std::string v5 = "x86_64_sysvcc";
        goto LABEL_86;
      }
      uint64_t v30 = "x86_64_sysvcc";
      goto LABEL_157;
    case 79:
      char v14 = (int *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v14 <= 6uLL)
      {
        std::string v5 = "win64cc";
LABEL_58:
        uint64_t v7 = this;
        size_t v8 = 7;
        goto LABEL_106;
      }
      *(int *)((char *)v14 + 3) = 1667445814;
      int v29 = 913205623;
LABEL_141:
      *char v14 = v29;
      uint64_t v23 = *((void *)this + 4) + 7;
      goto LABEL_169;
    case 80:
      uint64_t v18 = (_OWORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v18 <= 0xFuLL)
      {
        std::string v5 = "x86_vectorcallcc";
        uint64_t v7 = this;
        size_t v8 = 16;
        goto LABEL_106;
      }
      *uint64_t v18 = *(_OWORD *)"x86_vectorcallcc";
      uint64_t v23 = *((void *)this + 4) + 16;
      goto LABEL_169;
    case 81:
      uint64_t v4 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v4) <= 5)
      {
        std::string v5 = "hhvmcc";
LABEL_63:
        uint64_t v7 = this;
        size_t v8 = 6;
        goto LABEL_106;
      }
      *(_WORD *)(v4 + 4) = 25443;
      int v22 = 1836476520;
LABEL_144:
      *(_DWORD *)uint64_t v4 = v22;
      uint64_t v23 = *((void *)this + 4) + 6;
      goto LABEL_169;
    case 82:
      uint64_t v11 = (uint64_t *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v11 <= 7uLL)
      {
        std::string v5 = "hhvm_ccc";
LABEL_66:
        uint64_t v7 = this;
        size_t v8 = 8;
        goto LABEL_106;
      }
      uint64_t v26 = 0x635F6D766868;
LABEL_146:
      *uint64_t v11 = v26 & 0xFFFFFFFFFFFFLL | 0x6363000000000000;
      uint64_t v23 = *((void *)this + 4) + 8;
      goto LABEL_169;
    case 83:
      uint64_t v16 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v16) <= 9)
      {
        std::string v5 = "x86_intrcc";
        goto LABEL_100;
      }
      __int16 v31 = 25443;
      int v32 = "x86_intrcc";
      goto LABEL_165;
    case 84:
      uint64_t v10 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v10) <= 0xA)
      {
        std::string v5 = "avr_intrcc ";
LABEL_71:
        uint64_t v7 = this;
        size_t v8 = 11;
        goto LABEL_106;
      }
      int v24 = 543384434;
      int v25 = "avr_intrcc ";
LABEL_149:
      *(_DWORD *)(v10 + 7) = v24;
      *(void *)uint64_t v10 = *(void *)v25;
      uint64_t v23 = *((void *)this + 4) + 11;
      goto LABEL_169;
    case 85:
      uint64_t v15 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 <= 0xCuLL)
      {
        std::string v5 = "avr_signalcc ";
        goto LABEL_86;
      }
      uint64_t v30 = "avr_signalcc ";
      goto LABEL_157;
    case 87:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 8)
      {
        std::string v5 = "amdgpu_vs";
        goto LABEL_93;
      }
      char v33 = 115;
      uint64_t v34 = "amdgpu_vs";
      goto LABEL_161;
    case 88:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 8)
      {
        std::string v5 = "amdgpu_gs";
        goto LABEL_93;
      }
      char v33 = 115;
      uint64_t v34 = "amdgpu_gs";
      goto LABEL_161;
    case 89:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 8)
      {
        std::string v5 = "amdgpu_ps";
        goto LABEL_93;
      }
      char v33 = 115;
      uint64_t v34 = "amdgpu_ps";
      goto LABEL_161;
    case 90:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 8)
      {
        std::string v5 = "amdgpu_cs";
        goto LABEL_93;
      }
      char v33 = 115;
      uint64_t v34 = "amdgpu_cs";
      goto LABEL_161;
    case 91:
      uint64_t v15 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 <= 0xCuLL)
      {
        std::string v5 = "amdgpu_kernel";
        goto LABEL_86;
      }
      uint64_t v30 = "amdgpu_kernel";
      goto LABEL_157;
    case 92:
      uint64_t v15 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v15 <= 0xCuLL)
      {
        std::string v5 = "x86_regcallcc";
LABEL_86:
        uint64_t v7 = this;
        size_t v8 = 13;
        goto LABEL_106;
      }
      uint64_t v30 = "x86_regcallcc";
LABEL_157:
      *uint64_t v15 = *(void *)v30;
      *(void *)((char *)v15 + 5) = *(void *)(v30 + 5);
      uint64_t v23 = *((void *)this + 4) + 13;
      goto LABEL_169;
    case 93:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 8)
      {
        std::string v5 = "amdgpu_hs";
        goto LABEL_93;
      }
      char v33 = 115;
      uint64_t v34 = "amdgpu_hs";
      goto LABEL_161;
    case 95:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 8)
      {
        std::string v5 = "amdgpu_ls";
        goto LABEL_93;
      }
      char v33 = 115;
      uint64_t v34 = "amdgpu_ls";
      goto LABEL_161;
    case 96:
      uint64_t v17 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v17) <= 8)
      {
        std::string v5 = "amdgpu_es";
LABEL_93:
        uint64_t v7 = this;
        size_t v8 = 9;
        goto LABEL_106;
      }
      char v33 = 115;
      uint64_t v34 = "amdgpu_es";
LABEL_161:
      *(unsigned char *)(v17 + 8) = v33;
      *(void *)uint64_t v17 = *(void *)v34;
      uint64_t v23 = *((void *)this + 4) + 9;
      goto LABEL_169;
    case 97:
      uint64_t v19 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v19) <= 0x11)
      {
        std::string v5 = "aarch64_vector_pcs";
        uint64_t v7 = this;
        size_t v8 = 18;
        goto LABEL_106;
      }
      *(_WORD *)(v19 + 16) = 29539;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)"aarch64_vector_pcs";
      uint64_t v23 = *((void *)this + 4) + 18;
      goto LABEL_169;
    case 98:
      long long v20 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v20 <= 0x15uLL)
      {
        std::string v5 = "aarch64_sve_vector_pcs";
        uint64_t v7 = this;
        size_t v8 = 22;
        goto LABEL_106;
      }
      qmemcpy(v20, "aarch64_sve_vector_pcs", 22);
      uint64_t v23 = *((void *)this + 4) + 22;
      goto LABEL_169;
    case 100:
      uint64_t v16 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v16) <= 9)
      {
        std::string v5 = "amdgpu_gfx";
LABEL_100:
        uint64_t v7 = this;
        size_t v8 = 10;
        goto LABEL_106;
      }
      __int16 v31 = 30822;
      int v32 = "amdgpu_gfx";
LABEL_165:
      *(_WORD *)(v16 + 8) = v31;
      *(void *)uint64_t v16 = *(void *)v32;
      uint64_t v23 = *((void *)this + 4) + 10;
      goto LABEL_169;
    case 102:
      uint64_t v21 = (_OWORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v21 <= 0x1FuLL)
      {
        std::string v5 = "aarch64_sme_preservemost_from_x0";
        goto LABEL_105;
      }
      uint64_t v35 = "aarch64_sme_preservemost_from_x0";
      goto LABEL_168;
    case 103:
      uint64_t v21 = (_OWORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v21 > 0x1FuLL)
      {
        uint64_t v35 = "aarch64_sme_preservemost_from_x2";
LABEL_168:
        long long v36 = *((_OWORD *)v35 + 1);
        *uint64_t v21 = *(_OWORD *)v35;
        v21[1] = v36;
        uint64_t v23 = *((void *)this + 4) + 32;
LABEL_169:
        *((void *)this + 4) = v23;
      }
      else
      {
        std::string v5 = "aarch64_sme_preservemost_from_x2";
LABEL_105:
        uint64_t v7 = this;
        size_t v8 = 32;
LABEL_106:
        return llvm::raw_ostream::write(v7, v5, v8);
      }
      return result;
    default:
      uint64_t v9 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v9 > 1uLL)
      {
        _WORD *v9 = 25443;
        *((void *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, "cc", 2uLL);
      }
      return write_unsigned<unsigned long>(this, v3, 0, 0, 0);
  }
}

void WriteAsOperandInternal(llvm::raw_ostream *a1, uint64_t ***a2, llvm::raw_ostream **a3)
{
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    Valueuint64_t Name = (size_t *)llvm::Value::getValueName(a2);
    size_t v9 = *ValueName;
    if (*((unsigned __int8 *)a2 + 16) >= 4u) {
      int v10 = 3;
    }
    else {
      int v10 = 0;
    }
    PrintLLVMName(a1, (llvm::raw_ostream *)(ValueName + 2), v9, v10);
  }
  else
  {
    unsigned int v5 = *((unsigned __int8 *)a2 + 16);
    if (v5 <= 0x14)
    {
      if (v5 < 4) {
        goto LABEL_14;
      }
      WriteConstantInternal(a1, (const llvm::Constant *)a2, a3);
    }
    else
    {
      if (v5 != 23)
      {
        if (v5 == 24)
        {
          uint64_t v6 = (_DWORD *)*((void *)a1 + 4);
          if (*((void *)a1 + 3) - (void)v6 > 3uLL)
          {
            _DWORD *v6 = 544043873;
            unint64_t v7 = *((void *)a1 + 4) + 4;
            *((void *)a1 + 4) = v7;
          }
          else
          {
            llvm::raw_ostream::write(a1, "asm ", 4uLL);
            unint64_t v7 = *((void *)a1 + 4);
          }
          if (*((unsigned char *)a2 + 80))
          {
            if (*((void *)a1 + 3) - v7 > 0xA)
            {
              *(_DWORD *)(v7 + 7) = 544498533;
              *(void *)unint64_t v7 = *(void *)"sideeffect ";
              unint64_t v7 = *((void *)a1 + 4) + 11;
              *((void *)a1 + 4) = v7;
            }
            else
            {
              llvm::raw_ostream::write(a1, "sideeffect ", 0xBuLL);
              unint64_t v7 = *((void *)a1 + 4);
            }
          }
          if (*((unsigned char *)a2 + 81))
          {
            if (*((void *)a1 + 3) - v7 > 0xA)
            {
              *(_DWORD *)(v7 + 7) = 543908705;
              *(void *)unint64_t v7 = *(void *)"alignstack ";
              unint64_t v7 = *((void *)a1 + 4) + 11;
              *((void *)a1 + 4) = v7;
            }
            else
            {
              llvm::raw_ostream::write(a1, "alignstack ", 0xBuLL);
              unint64_t v7 = *((void *)a1 + 4);
            }
          }
          if (*((_DWORD *)a2 + 21) == 1)
          {
            if (*((void *)a1 + 3) - v7 > 0xC)
            {
              qmemcpy((void *)v7, "inteldialect ", 13);
              unint64_t v7 = *((void *)a1 + 4) + 13;
              *((void *)a1 + 4) = v7;
            }
            else
            {
              llvm::raw_ostream::write(a1, "inteldialect ", 0xDuLL);
              unint64_t v7 = *((void *)a1 + 4);
            }
          }
          if (*((unsigned char *)a2 + 88))
          {
            if (*((void *)a1 + 3) - v7 > 6)
            {
              *(_DWORD *)(v7 + 3) = 543452777;
              *(_DWORD *)unint64_t v7 = 1769434741;
              unint64_t v7 = *((void *)a1 + 4) + 7;
              *((void *)a1 + 4) = v7;
            }
            else
            {
              llvm::raw_ostream::write(a1, "unwind ", 7uLL);
              unint64_t v7 = *((void *)a1 + 4);
            }
          }
          if (v7 >= *((void *)a1 + 3))
          {
            llvm::raw_ostream::write(a1, 34);
          }
          else
          {
            *((void *)a1 + 4) = v7 + 1;
            *(unsigned char *)unint64_t v7 = 34;
          }
          int v22 = *((char *)a2 + 47);
          if (v22 >= 0) {
            uint64_t v23 = (llvm::raw_ostream *)(a2 + 3);
          }
          else {
            uint64_t v23 = (llvm::raw_ostream *)a2[3];
          }
          if (v22 >= 0) {
            uint64_t v24 = *((unsigned __int8 *)a2 + 47);
          }
          else {
            uint64_t v24 = (uint64_t)a2[4];
          }
          llvm::printEscapedString(v23, v24, a1);
          int v25 = (_DWORD *)*((void *)a1 + 4);
          if (*((void *)a1 + 3) - (void)v25 > 3uLL)
          {
            *int v25 = 572533794;
            *((void *)a1 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(a1, "\", \"", 4uLL);
          }
          uint64_t v28 = a2[6];
          double v27 = (uint64_t *)(a2 + 6);
          uint64_t v26 = (llvm::raw_ostream *)v28;
          int v29 = *((char *)v27 + 23);
          if (v29 >= 0) {
            uint64_t v30 = (llvm::raw_ostream *)v27;
          }
          else {
            uint64_t v30 = v26;
          }
          if (v29 >= 0) {
            uint64_t v31 = *((unsigned __int8 *)v27 + 23);
          }
          else {
            uint64_t v31 = v27[1];
          }
          llvm::printEscapedString(v30, v31, a1);
          int v32 = (unsigned char *)*((void *)a1 + 4);
          if ((unint64_t)v32 >= *((void *)a1 + 3))
          {
            llvm::raw_ostream::write(a1, 34);
          }
          else
          {
            *((void *)a1 + 4) = v32 + 1;
            unsigned char *v32 = 34;
          }
          return;
        }
LABEL_14:
        uint64_t v11 = a3[2];
        if (v11)
        {
          if (v5 <= 3)
          {
            int GlobalSlot = llvm::SlotTracker::getGlobalSlot(v11, (const llvm::GlobalValue *)a2);
            char v14 = 64;
          }
          else
          {
            int LocalSlot = llvm::SlotTracker::getLocalSlot(v11, (const llvm::Value *)a2);
            if (LocalSlot != -1)
            {
              int GlobalSlot = LocalSlot;
              char v14 = 37;
LABEL_45:
              long long v20 = (char *)*((void *)a1 + 4);
              if ((unint64_t)v20 >= *((void *)a1 + 3))
              {
                llvm::raw_ostream::write(a1, v14);
              }
              else
              {
                *((void *)a1 + 4) = v20 + 1;
                *long long v20 = v14;
              }
              llvm::write_integer(a1, GlobalSlot, 0, 0);
              return;
            }
            SlotTracker = (llvm::SlotTracker *)createSlotTracker((const llvm::Value *)a2);
            if (!SlotTracker) {
              goto LABEL_47;
            }
            uint64_t v19 = SlotTracker;
            int GlobalSlot = llvm::SlotTracker::getLocalSlot(SlotTracker, (const llvm::Value *)a2);
            (*(void (**)(llvm::SlotTracker *))(*(void *)v19 + 8))(v19);
            char v14 = 37;
          }
        }
        else
        {
          uint64_t v16 = (llvm::SlotTracker *)createSlotTracker((const llvm::Value *)a2);
          if (!v16)
          {
LABEL_47:
            uint64_t v21 = (void *)*((void *)a1 + 4);
            if (*((void *)a1 + 3) - (void)v21 > 7uLL)
            {
              *uint64_t v21 = 0x3E6665726461623CLL;
              *((void *)a1 + 4) += 8;
            }
            else
            {
              llvm::raw_ostream::write(a1, "<badref>", 8uLL);
            }
            return;
          }
          uint64_t v17 = v16;
          if (*((unsigned __int8 *)a2 + 16) <= 3u)
          {
            int GlobalSlot = llvm::SlotTracker::getGlobalSlot(v16, (const llvm::GlobalValue *)a2);
            char v14 = 64;
          }
          else
          {
            int GlobalSlot = llvm::SlotTracker::getLocalSlot(v16, (const llvm::Value *)a2);
            char v14 = 37;
          }
          (*(void (**)(llvm::SlotTracker *))(*(void *)v17 + 8))(v17);
        }
        if (GlobalSlot != -1) {
          goto LABEL_45;
        }
        goto LABEL_47;
      }
      uint64_t v15 = (llvm::DIExpression *)a2[3];
      WriteAsOperandInternal(a1, v15);
    }
  }
}

void anonymous namespace'::AssemblyWriter::writeAttributeSet(uint64_t ***this, const llvm::AttributeSet *a2)
{
  if (a2) {
    unsigned int v3 = (const llvm::AttributeSet *)((char *)a2 + 48);
  }
  else {
    unsigned int v3 = 0;
  }
  if (a2) {
    uint64_t v4 = (const llvm::AttributeSet *)((char *)a2 + 8 * *((unsigned int *)a2 + 2) + 48);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3 != v4)
  {
    for (char i = 1; ; char i = 0)
    {
      if ((i & 1) == 0)
      {
        uint64_t v6 = *this;
        unint64_t v7 = (*this)[4];
        if (v7 >= (*this)[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v6, 32);
        }
        else
        {
          _OWORD v6[4] = (uint64_t *)((char *)v7 + 1);
          *(unsigned char *)unint64_t v7 = 32;
        }
      }
      uint64_t v8 = *(void *)v3;
      if (!*(void *)v3) {
        break;
      }
      size_t v9 = *this;
      if (*(unsigned char *)(v8 + 8) != 3) {
        goto LABEL_20;
      }
      NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v8 + 12));
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)v9, NameFromAttrKind, v11);
      if (*(void *)v3)
      {
        uint64_t v12 = *(llvm::Type **)(*(void *)v3 + 16);
        if (v12)
        {
          uint64_t v13 = *this;
          char v14 = (*this)[4];
          if (v14 >= (*this)[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v13, 40);
          }
          else
          {
            void v13[4] = (uint64_t *)((char *)v14 + 1);
            *(unsigned char *)char v14 = 40;
          }
          uint64_t v17 = *this;
          uint64_t v18 = (*this)[4];
          if (v18 >= (*this)[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v17, 41);
          }
          else
          {
            void v17[4] = (uint64_t *)((char *)v18 + 1);
            *(unsigned char *)uint64_t v18 = 41;
          }
        }
      }
LABEL_28:
      unsigned int v3 = (llvm::Attribute *)((char *)v3 + 8);
      if (v3 == v4) {
        return;
      }
    }
    size_t v9 = *this;
LABEL_20:
    llvm::Attribute::getAsString(v3, 0, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    llvm::raw_ostream::write((llvm::raw_ostream *)v9, (const char *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_28;
  }
}

llvm::raw_ostream *maybePrintComdat(llvm::raw_ostream *this, uint64_t a2)
{
  int v2 = *(size_t ***)(a2 + 48);
  if (v2)
  {
    uint64_t v4 = this;
    if (*(unsigned char *)(a2 + 16) == 3)
    {
      unsigned int v5 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v5 >= *((void *)this + 3))
      {
        this = llvm::raw_ostream::write(this, 44);
      }
      else
      {
        *((void *)this + 4) = v5 + 1;
        unsigned char *v5 = 44;
      }
    }
    uint64_t v6 = (_DWORD *)*((void *)v4 + 4);
    if (*((void *)v4 + 3) - (void)v6 > 6uLL)
    {
      *(_DWORD *)((char *)v6 + 3) = 1952539757;
      _DWORD *v6 = 1836016416;
      *((void *)v4 + 4) += 7;
    }
    else
    {
      this = llvm::raw_ostream::write(v4, " comdat", 7uLL);
    }
    if ((*(unsigned char *)(a2 + 23) & 0x10) != 0)
    {
      Valueuint64_t Name = (size_t *)llvm::Value::getValueName((uint64_t ***)a2);
      size_t v9 = *ValueName;
      this = (llvm::raw_ostream *)(ValueName + 2);
      size_t v8 = v9;
      if (v9 == **v2)
      {
        if (!v8) {
          return this;
        }
        this = (llvm::raw_ostream *)memcmp(this, *v2 + 9, v8);
        if (!this) {
          return this;
        }
      }
    }
    else if (!**v2)
    {
      return this;
    }
    int v10 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v10 >= *((void *)v4 + 3))
    {
      llvm::raw_ostream::write(v4, 40);
    }
    else
    {
      *((void *)v4 + 4) = v10 + 1;
      *int v10 = 40;
    }
    this = PrintLLVMName(v4, (llvm::raw_ostream *)(*v2 + 9), **v2, 1);
    size_t v11 = (unsigned char *)*((void *)v4 + 4);
    if ((unint64_t)v11 >= *((void *)v4 + 3))
    {
      return llvm::raw_ostream::write(v4, 41);
    }
    else
    {
      *((void *)v4 + 4) = v11 + 1;
      *size_t v11 = 41;
    }
  }
  return this;
}

void anonymous namespace'::AssemblyWriter::writeOperand(uint64_t ***this, llvm::Type **a2, int a3)
{
  if (a2)
  {
    if (a3)
    {
      unsigned int v5 = *this;
      uint64_t v6 = (*this)[4];
      if (v6 >= (*this)[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v5, 32);
      }
      else
      {
        v5[4] = (uint64_t *)((char *)v6 + 1);
        *(unsigned char *)uint64_t v6 = 32;
      }
    }
    size_t v9 = (llvm::raw_ostream *)this[4];
    int v10 = *this;
    size_t v11 = (llvm::raw_ostream *)this[1];
    v12[0] = (llvm::raw_ostream *)&unk_270DC2C20;
    v12[1] = (llvm::raw_ostream *)(this + 5);
    v12[2] = v9;
    v12[3] = v11;
    WriteAsOperandInternal((llvm::raw_ostream *)v10, (uint64_t ***)a2, v12);
  }
  else
  {
    unint64_t v7 = *this;
    size_t v8 = (*this)[4];
    if ((unint64_t)((char *)(*this)[3] - (char *)v8) > 0xE)
    {
      qmemcpy(v8, "<null operand!>", 15);
      void v7[4] = (uint64_t *)((char *)v7[4] + 15);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v7, "<null operand!>", 0xFuLL);
    }
  }
}

llvm::raw_ostream *anonymous namespace'::AssemblyWriter::printUseLists(_anonymous_namespace_::AssemblyWriter *this, const llvm::Function *a2)
{
  v31[0] = 0;
  uint64_t result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>,llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>::LookupBucketFor<llvm::Function const*>(*((void *)this + 36), *((_DWORD *)this + 76), (uint64_t)a2, v31);
  uint64_t v4 = v31[0];
  if (result) {
    BOOL v5 = v31[0] == (llvm::raw_ostream *)(*((void *)this + 36) + 56 * *((unsigned int *)this + 76));
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t result = *(llvm::raw_ostream **)this;
    uint64_t v6 = *(void **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v6 > 0x1AuLL)
    {
      qmemcpy(v6, "\n; uselistorder directives\n", 27);
      *((void *)result + 4) += 27;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(result, "\n; uselistorder directives\n", 0x1BuLL);
    }
    size_t v8 = (uint64_t *)*((void *)v4 + 4);
    for (char i = (uint64_t *)*((void *)v4 + 5); v8 != i; v8 += 4)
    {
      uint64_t v9 = *v8;
      int v10 = *(llvm::raw_ostream **)this;
      uint64_t v11 = *(void *)(*(void *)this + 32);
      unint64_t v12 = *(void *)(*(void *)this + 24) - v11;
      if (*(void *)(*((void *)this + 4) + 16))
      {
        if (v12 > 1)
        {
          *(_WORD *)uint64_t v11 = 8224;
          *((void *)v10 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v10, "  ", 2uLL);
        }
        uint64_t v13 = *(llvm::raw_ostream **)this;
        uint64_t v14 = *(void *)(*(void *)this + 32);
        if ((unint64_t)(*(void *)(*(void *)this + 24) - v14) > 0xB)
        {
          *(_DWORD *)(v14 + 8) = 1919247474;
          *(void *)uint64_t v14 = *(void *)"uselistorder";
          *((void *)v13 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v13, "uselistorder", 0xCuLL);
        }
      }
      else
      {
        if (v12 > 0xB)
        {
          *(_DWORD *)(v11 + 8) = 1919247474;
          *(void *)uint64_t v11 = *(void *)"uselistorder";
          *((void *)v10 + 4) += 12;
        }
        else
        {
          llvm::raw_ostream::write(v10, "uselistorder", 0xCuLL);
        }
        if (*(unsigned char *)(v9 + 16) == 22)
        {
          uint64_t v15 = *(llvm::raw_ostream **)this;
          uint64_t v16 = *(_DWORD **)(*(void *)this + 32);
          if (*(void *)(*(void *)this + 24) - (void)v16 > 3uLL)
          {
            *uint64_t v16 = 543318623;
            *((void *)v15 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(v15, "_bb ", 4uLL);
          }
          uint64_t v26 = *(llvm::raw_ostream **)this;
          double v27 = *(_WORD **)(*(void *)this + 32);
          if (*(void *)(*(void *)this + 24) - (void)v27 > 1uLL)
          {
            *double v27 = 8236;
            *((void *)v26 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v26, ", ", 2uLL);
          }
          uint64_t v28 = (llvm::raw_ostream *)*((void *)this + 4);
          int v29 = *(llvm::raw_ostream **)this;
          uint64_t v30 = (llvm::raw_ostream *)*((void *)this + 1);
          v31[0] = (llvm::raw_ostream *)&unk_270DC2C20;
          v31[1] = (_anonymous_namespace_::AssemblyWriter *)((char *)this + 40);
          v31[2] = v28;
          v31[3] = v30;
          WriteAsOperandInternal(v29, (uint64_t ***)v9, v31);
          goto LABEL_26;
        }
      }
      uint64_t v17 = *(llvm::raw_ostream **)this;
      uint64_t v18 = *(unsigned char **)(*(void *)this + 32);
      if (*(unsigned char **)(*(void *)this + 24) == v18)
      {
        llvm::raw_ostream::write(v17, " ", 1uLL);
      }
      else
      {
        *uint64_t v18 = 32;
        ++*((void *)v17 + 4);
      }
LABEL_26:
      uint64_t v19 = *(llvm::raw_ostream **)this;
      long long v20 = *(_DWORD **)(*(void *)this + 32);
      if (*(void *)(*(void *)this + 24) - (void)v20 > 3uLL)
      {
        *long long v20 = 544940076;
        *((void *)v19 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v19, ", { ", 4uLL);
      }
      write_unsigned<unsigned long>(*(llvm::raw_ostream **)this, *(unsigned int *)v8[1], 0, 0, 0);
      unint64_t v21 = (unint64_t)(v8[2] - v8[1]) >> 2;
      if (v21 != 1)
      {
        uint64_t v22 = 1;
        do
        {
          uint64_t v23 = *(llvm::raw_ostream **)this;
          uint64_t v24 = *(_WORD **)(*(void *)this + 32);
          if (*(void *)(*(void *)this + 24) - (void)v24 > 1uLL)
          {
            *uint64_t v24 = 8236;
            *((void *)v23 + 4) += 2;
          }
          else
          {
            uint64_t v23 = llvm::raw_ostream::write(v23, ", ", 2uLL);
          }
          write_unsigned<unsigned long>(v23, *(unsigned int *)(v8[1] + 4 * v22++), 0, 0, 0);
        }
        while (v21 != v22);
      }
      uint64_t result = *(llvm::raw_ostream **)this;
      uint64_t v25 = *(void *)(*(void *)this + 32);
      if ((unint64_t)(*(void *)(*(void *)this + 24) - v25) > 2)
      {
        *(unsigned char *)(v25 + 2) = 10;
        *(_WORD *)uint64_t v25 = 32032;
        *((void *)result + 4) += 3;
      }
      else
      {
        uint64_t result = llvm::raw_ostream::write(result, " }\n", 3uLL);
      }
    }
  }
  return result;
}

llvm::raw_ostream *printMetadataIdentifier(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  if (!a2)
  {
    size_t v8 = (void *)*((void *)a3 + 4);
    if (*((void *)a3 + 3) - (void)v8 > 0xCuLL)
    {
      qmemcpy(v8, "<empty name> ", 13);
      *((void *)a3 + 4) += 13;
    }
    else
    {
      return llvm::raw_ostream::write(a3, "<empty name> ", 0xDuLL);
    }
    return result;
  }
  int v4 = a2;
  BOOL v5 = result;
  int v6 = *(char *)result;
  uint64_t v7 = MEMORY[0x263EF8318];
  if (v6 < 0)
  {
    uint64_t result = (llvm::raw_ostream *)__maskrune(*(unsigned __int8 *)result, 0x100uLL);
    LOBYTE(v6) = *v5;
    if (!result) {
      goto LABEL_10;
    }
LABEL_14:
    int v10 = (unsigned char *)*((void *)a3 + 4);
    if ((unint64_t)v10 < *((void *)a3 + 3))
    {
      *((void *)a3 + 4) = v10 + 1;
      *int v10 = v6;
      goto LABEL_18;
    }
    char v11 = v6;
    goto LABEL_17;
  }
  uint64_t result = (llvm::raw_ostream *)(*(_DWORD *)(MEMORY[0x263EF8318] + 4 * *(unsigned __int8 *)result + 60) & 0x100);
  if (result) {
    goto LABEL_14;
  }
LABEL_10:
  if (v6 - 36 <= 0x3B
    && ((1 << (v6 - 36)) & 0x800000000000601) != 0)
  {
    goto LABEL_14;
  }
  uint64_t v25 = (unsigned char *)*((void *)a3 + 4);
  if ((unint64_t)v25 >= *((void *)a3 + 3))
  {
    uint64_t result = llvm::raw_ostream::write(a3, 92);
  }
  else
  {
    *((void *)a3 + 4) = v25 + 1;
    *uint64_t v25 = 92;
  }
  char v26 = llvm::hexdigit(unsigned int,BOOL)::LUT[(char)*v5 >> 4];
  double v27 = (char *)*((void *)a3 + 4);
  if ((unint64_t)v27 >= *((void *)a3 + 3))
  {
    uint64_t result = llvm::raw_ostream::write(a3, v26);
  }
  else
  {
    *((void *)a3 + 4) = v27 + 1;
    *double v27 = v26;
  }
  char v11 = llvm::hexdigit(unsigned int,BOOL)::LUT[*v5 & 0xF];
  uint64_t v28 = (char *)*((void *)a3 + 4);
  if ((unint64_t)v28 >= *((void *)a3 + 3))
  {
LABEL_17:
    uint64_t result = llvm::raw_ostream::write(a3, v11);
    goto LABEL_18;
  }
  *((void *)a3 + 4) = v28 + 1;
  *uint64_t v28 = v11;
LABEL_18:
  int v12 = v4 - 1;
  if (v12)
  {
    uint64_t v13 = v5 + 1;
    do
    {
      int v15 = *v13++;
      char v14 = v15;
      __darwin_ct_rune_t v16 = v15;
      unint64_t v17 = v15;
      if (v15 < 0)
      {
        uint64_t result = (llvm::raw_ostream *)__maskrune(v16, 0x500uLL);
        if (result) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t result = (llvm::raw_ostream *)(*(_DWORD *)(v7 + 4 * v17 + 60) & 0x500);
        if (result) {
          goto LABEL_28;
        }
      }
      if ((v16 - 36) > 0x3B || ((1 << (v16 - 36)) & 0x800000000000601) == 0)
      {
        unint64_t v21 = (unsigned char *)*((void *)a3 + 4);
        if ((unint64_t)v21 >= *((void *)a3 + 3))
        {
          uint64_t result = llvm::raw_ostream::write(a3, 92);
        }
        else
        {
          *((void *)a3 + 4) = v21 + 1;
          *unint64_t v21 = 92;
        }
        char v22 = llvm::hexdigit(unsigned int,BOOL)::LUT[v17 >> 4];
        uint64_t v23 = (char *)*((void *)a3 + 4);
        if ((unint64_t)v23 >= *((void *)a3 + 3))
        {
          uint64_t result = llvm::raw_ostream::write(a3, v22);
        }
        else
        {
          *((void *)a3 + 4) = v23 + 1;
          *uint64_t v23 = v22;
        }
        char v20 = llvm::hexdigit(unsigned int,BOOL)::LUT[v17 & 0xF];
        uint64_t v24 = (char *)*((void *)a3 + 4);
        if ((unint64_t)v24 < *((void *)a3 + 3))
        {
          *((void *)a3 + 4) = v24 + 1;
          *uint64_t v24 = v20;
          goto LABEL_32;
        }
        goto LABEL_31;
      }
LABEL_28:
      uint64_t v19 = (char *)*((void *)a3 + 4);
      if ((unint64_t)v19 >= *((void *)a3 + 3))
      {
        char v20 = v14;
LABEL_31:
        uint64_t result = llvm::raw_ostream::write(a3, v20);
        goto LABEL_32;
      }
      *((void *)a3 + 4) = v19 + 1;
      *uint64_t v19 = v14;
LABEL_32:
      --v12;
    }
    while (v12);
  }
  return result;
}

void WriteAsOperandInternal(llvm::raw_ostream *this, llvm::DIExpression *a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)a2;
  if (v6 == 33)
  {
    writeDIArgList(this, a2, (_anonymous_namespace_::AsmWriterContext *)a3);
  }
  else if (v6 == 6)
  {
    writeDIExpression(this, (unsigned int **)a2, (_anonymous_namespace_::AsmWriterContext *)a3);
  }
  else if (llvm::MDNode::classof(a2))
  {
    uint64_t v7 = *(void *)(a3 + 16);
    if (!v7) {
      operator new();
    }
    int v9 = (*(uint64_t (**)(void, llvm::DIExpression *))(**(void **)(a3 + 16) + 32))(*(void *)(a3 + 16), a2);
    if (v9 == -1)
    {
      if (*(unsigned char *)a2 == 5)
      {
        writeDILocation(this, a2, (_anonymous_namespace_::AsmWriterContext *)a3);
      }
      else
      {
        int v15 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v15)
        {
          llvm::raw_ostream::write(this, "<", 1uLL);
        }
        else
        {
          *int v15 = 60;
          ++*((void *)this + 4);
        }
        llvm::write_hex(this, (unint64_t)a2, 3, 0, 0);
        __darwin_ct_rune_t v16 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v16)
        {
          llvm::raw_ostream::write(this, ">", 1uLL);
        }
        else
        {
          *__darwin_ct_rune_t v16 = 62;
          ++*((void *)this + 4);
        }
      }
    }
    else
    {
      int v10 = v9;
      char v11 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v11 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 33);
      }
      else
      {
        *((void *)this + 4) = v11 + 1;
        *char v11 = 33;
      }
      llvm::write_integer(this, v10, 0, 0);
    }
    *(void *)(a3 + 16) = v7;
  }
  else if (*(unsigned char *)a2)
  {
    size_t v8 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v8 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 32);
    }
    else
    {
      *((void *)this + 4) = v8 + 1;
      unsigned char *v8 = 32;
    }
    uint64_t v13 = (uint64_t ***)*((void *)a2 + 16);
    WriteAsOperandInternal(this, v13, (llvm::raw_ostream **)a3);
  }
  else
  {
    int v12 = (_WORD *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v12 > 1uLL)
    {
      *int v12 = 8737;
      *((void *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, "!\"", 2uLL);
    }
    llvm::printEscapedString((llvm::raw_ostream *)(*((void *)a2 + 1) + 24), **((void **)a2 + 1), this);
    char v14 = (unsigned char *)*((void *)this + 4);
    if ((unint64_t)v14 >= *((void *)this + 3))
    {
      llvm::raw_ostream::write(this, 34);
    }
    else
    {
      *((void *)this + 4) = v14 + 1;
      *char v14 = 34;
    }
  }
}

uint64_t writeDIExpression(llvm::raw_ostream *this, unsigned int **a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  BOOL v5 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v5 > 0xDuLL)
  {
    qmemcpy(v5, "!DIExpression(", 14);
    *((void *)this + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(this, "!DIExpression(", 0xEuLL);
  }
  uint64_t result = llvm::DIExpression::isValid((llvm::DIExpression *)a2);
  size_t v8 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v9 = (char *)v7 - (char *)v8;
  if (result)
  {
    uint64_t v30 = a2[2];
    if (v7 != v8)
    {
      char v10 = 0;
      char v11 = (unsigned int *)((char *)v8 + (v9 & 0xFFFFFFFFFFFFFFF8));
      do
      {
        int v12 = llvm::dwarf::OperationEncodingString((llvm::dwarf *)*v8);
        size_t v14 = v13;
        int v15 = this;
        if (v10) {
          int v15 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
        }
        llvm::raw_ostream::operator<<(v15, v12, v14);
        if (*(void *)v8 == 4097)
        {
          __darwin_ct_rune_t v16 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
          write_unsigned<unsigned long>(v16, *((void *)v8 + 1), 0, 0, 0);
          unint64_t v17 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
          uint64_t v18 = llvm::dwarf::AttributeEncodingString((llvm::dwarf *)v8[4]);
          llvm::raw_ostream::operator<<(v17, v18, v19);
        }
        else
        {
          int Size = llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v30);
          uint64_t v21 = (Size - 1);
          if (Size != 1)
          {
            char v22 = (unint64_t *)(v8 + 2);
            do
            {
              uint64_t v23 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
              unint64_t v24 = *v22++;
              write_unsigned<unsigned long>(v23, v24, 0, 0, 0);
              --v21;
            }
            while (v21);
          }
        }
        uint64_t result = llvm::DIExpression::ExprOperand::getSize((uint64_t **)&v30);
        v8 += 2 * result;
        uint64_t v30 = v8;
        char v10 = 1;
      }
      while (v8 != v11);
    }
  }
  else if (v7 != v8)
  {
    char v25 = 0;
    uint64_t v26 = 8 * (v9 >> 3);
    do
    {
      double v27 = this;
      if (v25) {
        double v27 = llvm::raw_ostream::operator<<(this, ", ", 2uLL);
      }
      unint64_t v28 = *(void *)v8;
      v8 += 2;
      uint64_t result = (uint64_t)write_unsigned<unsigned long>(v27, v28, 0, 0, 0);
      char v25 = 1;
      v26 -= 8;
    }
    while (v26);
  }
  int v29 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v29)
  {
    return (uint64_t)llvm::raw_ostream::write(this, ")", 1uLL);
  }
  else
  {
    unsigned char *v29 = 41;
    ++*((void *)this + 4);
  }
  return result;
}

llvm::raw_ostream *writeDIArgList(llvm::raw_ostream *this, const llvm::DIArgList *a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  int v4 = this;
  uint64_t v5 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v5) > 0xA)
  {
    *(_DWORD *)(v5 + 7) = 678720361;
    *(void *)uint64_t v5 = *(void *)"!DIArgList(";
    *((void *)this + 4) += 11;
  }
  else
  {
    this = llvm::raw_ostream::write(this, "!DIArgList(", 0xBuLL);
  }
  uint64_t v6 = *((unsigned int *)a2 + 6);
  if (v6)
  {
    char v7 = 0;
    size_t v8 = (llvm::DIExpression **)*((void *)a2 + 2);
    uint64_t v9 = 8 * v6;
    do
    {
      char v10 = *v8;
      if (v7) {
        llvm::raw_ostream::operator<<(v4, ", ", 2uLL);
      }
      this = (llvm::raw_ostream *)WriteAsOperandInternal(v4, v10);
      ++v8;
      char v7 = 1;
      v9 -= 8;
    }
    while (v9);
  }
  char v11 = (unsigned char *)*((void *)v4 + 4);
  if (*((unsigned char **)v4 + 3) == v11)
  {
    return llvm::raw_ostream::write(v4, ")", 1uLL);
  }
  else
  {
    *char v11 = 41;
    ++*((void *)v4 + 4);
  }
  return this;
}

llvm::raw_ostream *writeDILocation(llvm::raw_ostream *this, const llvm::DILocation *a2, _anonymous_namespace_::AsmWriterContext *a3)
{
  uint64_t v6 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v6) > 0xB)
  {
    *(_DWORD *)(v6 + 8) = 678326121;
    *(void *)uint64_t v6 = *(void *)"!DILocation(";
    *((void *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, "!DILocation(", 0xCuLL);
  }
  size_t v14 = this;
  char v15 = 1;
  __darwin_ct_rune_t v16 = ", ";
  unint64_t v17 = a3;
  size_t v8 = (void *)((char *)a2 - 16);
  unint64_t v7 = *((void *)a2 - 2);
  if ((v7 & 2) != 0) {
    uint64_t v9 = (llvm::DIExpression **)*((void *)a2 - 4);
  }
  else {
    uint64_t v9 = (llvm::DIExpression **)&v8[-((v7 >> 2) & 0xF)];
  }
  if ((*v8 & 2) != 0)
  {
    if (*((_DWORD *)a2 - 6) == 2)
    {
      char v10 = (void *)*((void *)a2 - 4);
      goto LABEL_12;
    }
  }
  else if ((*v8 & 0x3C0) == 0x80)
  {
    char v10 = &v8[-((*v8 >> 2) & 0xFLL)];
LABEL_12:
    char v11 = (llvm::DIExpression *)v10[1];
    goto LABEL_14;
  }
  char v11 = 0;
LABEL_14:
  size_t v13 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v13)
  {
    return llvm::raw_ostream::write(this, ")", 1uLL);
  }
  else
  {
    *size_t v13 = 41;
    ++*((void *)this + 4);
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::MDFieldPrinter::printInt<unsigned int>(llvm::raw_ostream *result, const void *a2, size_t __n, unsigned int a4, char a5)
{
  size_t v8 = result;
  if (a4 || (a5 & 1) == 0)
  {
    uint64_t v9 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)v8 + 8)) {
      *((unsigned char *)v8 + 8) = 0;
    }
    else {
      uint64_t v9 = llvm::raw_ostream::operator<<(v9, *((char **)v8 + 2));
    }
    char v10 = llvm::raw_ostream::operator<<(v9, a2, __n);
    char v11 = (_WORD *)*((void *)v10 + 4);
    if (*((void *)v10 + 3) - (void)v11 > 1uLL)
    {
      *char v11 = 8250;
      *((void *)v10 + 4) += 2;
    }
    else
    {
      char v10 = llvm::raw_ostream::write(v10, ": ", 2uLL);
    }
    return write_unsigned<unsigned long>(v10, a4, 0, 0, 0);
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::MDFieldPrinter::printMetadata(llvm::raw_ostream *result, const void *a2, size_t __n, llvm::DIExpression *a4, char a5)
{
  uint64_t v8 = (uint64_t)result;
  if (a4 || (a5 & 1) == 0)
  {
    uint64_t v9 = *(llvm::raw_ostream **)result;
    if (*(unsigned char *)(v8 + 8)) {
      *(unsigned char *)(v8 + 8) = 0;
    }
    else {
      uint64_t v9 = llvm::raw_ostream::operator<<(v9, *(char **)(v8 + 16));
    }
    char v10 = llvm::raw_ostream::operator<<(v9, a2, __n);
    char v11 = (_WORD *)*((void *)v10 + 4);
    if (*((void *)v10 + 3) - (void)v11 > 1uLL)
    {
      *char v11 = 8250;
      *((void *)v10 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v10, ": ", 2uLL);
    }
    int v12 = *(llvm::raw_ostream **)v8;
    size_t v13 = *(uint64_t (****)(void, llvm::DIExpression *))(v8 + 24);
    return writeMetadataAsOperand(v12, a4, v13);
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::MDFieldPrinter::printBool(llvm::raw_ostream *result, const void *a2, size_t __n, int a4, __int16 a5)
{
  if ((a5 & 0xFF00) == 0 || a4 != a5)
  {
    uint64_t v8 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)result + 8)) {
      *((unsigned char *)result + 8) = 0;
    }
    else {
      uint64_t v8 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)result, *((char **)result + 2));
    }
    uint64_t v9 = llvm::raw_ostream::operator<<(v8, a2, __n);
    char v10 = (_WORD *)*((void *)v9 + 4);
    if (*((void *)v9 + 3) - (void)v10 > 1uLL)
    {
      *char v10 = 8250;
      *((void *)v9 + 4) += 2;
    }
    else
    {
      uint64_t v9 = llvm::raw_ostream::write(v9, ": ", 2uLL);
    }
    if (a4) {
      size_t v11 = 4;
    }
    else {
      size_t v11 = 5;
    }
    if (a4) {
      int v12 = "true";
    }
    else {
      int v12 = "false";
    }
    return llvm::raw_ostream::operator<<(v9, v12, v11);
  }
  return result;
}

llvm::raw_ostream *writeMetadataAsOperand(llvm::raw_ostream *result, llvm::DIExpression *a2, uint64_t (***a3)(void, llvm::DIExpression *))
{
  if (a2)
  {
    WriteAsOperandInternal(result, a2);
    uint64_t v5 = **a3;
    return (llvm::raw_ostream *)v5(a3, a2);
  }
  else
  {
    uint64_t v6 = (_DWORD *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v6 > 3uLL)
    {
      _DWORD *v6 = 1819047278;
      *((void *)result + 4) += 4;
    }
    else
    {
      return llvm::raw_ostream::write(result, "null", 4uLL);
    }
  }
  return result;
}

uint64_t createSlotTracker(const llvm::Value *a1)
{
  unsigned int v2 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v2 == 21) {
    operator new();
  }
  if (a1 && v2 >= 0x1C)
  {
    if (*((void *)a1 + 5)) {
      operator new();
    }
    return 0;
  }
  else
  {
    if (a1 && v2 == 22) {
      operator new();
    }
    if (a1 && v2 == 3 || a1 && v2 == 1 || a1 && v2 == 2) {
      operator new();
    }
    uint64_t result = 0;
    if (a1 && !v2) {
      operator new();
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>,llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>::LookupBucketFor<llvm::Function const*>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 56 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      char v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          char v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 56 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>,llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::MapVector<llvm::Value const*,std::vector<unsigned int>,llvm::DenseMap<llvm::Value const*,unsigned int,llvm::DenseMapInfo<llvm::Value const*,void>,llvm::detail::DenseMapPair<llvm::Value const*,unsigned int>>,std::vector<std::pair<llvm::Value const*,std::vector<unsigned int>>>>>>::destroyAll(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 56 * v1;
    unsigned int v3 = (void **)(*(void *)result + 32);
    do
    {
      if (((unint64_t)*(v3 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v4 = v3;
        std::vector<std::pair<llvm::MCSection *,std::vector<llvm::MCDwarfLineEntry>>>::__destroy_vector::operator()[abi:nn180100](&v4);
        uint64_t result = MEMORY[0x263E500A0](*(v3 - 3), 8);
      }
      v3 += 7;
      v2 -= 56;
    }
    while (v2);
  }
  return result;
}

void anonymous namespace'::TypePrinting::incorporateTypes(_anonymous_namespace_::TypePrinting *this)
{
  if (*(void *)this)
  {
    llvm::TypeFinder::run((_anonymous_namespace_::TypePrinting *)((char *)this + 8), *(const llvm::Module **)this, 0);
    *(void *)this = 0;
    uint64_t v2 = (uint64_t *)*((void *)this + 13);
    unsigned int v3 = (uint64_t *)*((void *)this + 14);
    if (v2 != v3)
    {
      int v4 = 0;
      unsigned int v5 = (uint64_t *)*((void *)this + 13);
      while (1)
      {
        uint64_t v6 = *v5;
        if ((*(unsigned char *)(*v5 + 9) & 4) == 0)
        {
          uint64_t v7 = *(void **)(v6 + 24);
          if (!v7 || !*v7)
          {
            uint64_t v12 = 0;
            char v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((void *)this + 17), *((_DWORD *)this + 38), v6, &v12);
            uint64_t v9 = v12;
            if ((v8 & 1) == 0)
            {
              int v10 = *((_DWORD *)this + 36);
              unsigned int v11 = *((_DWORD *)this + 38);
              if (4 * v10 + 4 >= 3 * v11)
              {
                v11 *= 2;
              }
              else if (v11 + ~v10 - *((_DWORD *)this + 37) > v11 >> 3)
              {
                goto LABEL_11;
              }
              llvm::DenseMap<llvm::Function *,unsigned int,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,unsigned int>>::grow((uint64_t)this + 136, v11);
              uint64_t v12 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*((void *)this + 17), *((_DWORD *)this + 38), v6, &v12);
              uint64_t v9 = v12;
LABEL_11:
              ++*((_DWORD *)this + 36);
              if (*(void *)v9 != -4096) {
                --*((_DWORD *)this + 37);
              }
              *(void *)uint64_t v9 = v6;
              *(_DWORD *)(v9 + 8) = 0;
            }
            *(_DWORD *)(v9 + 8) = v4++;
            goto LABEL_15;
          }
          *v2++ = v6;
        }
LABEL_15:
        if (++v5 == v3)
        {
          if (v2 != *((uint64_t **)this + 14)) {
            *((void *)this + 14) = v2;
          }
          return;
        }
      }
    }
  }
}

void WriteMDNodeBodyInternal(llvm::raw_ostream *this, const llvm::MDNode *a2, llvm::raw_ostream **a3)
{
  unsigned int v5 = this;
  uint64_t v547 = *MEMORY[0x263EF8340];
  int v6 = *((unsigned char *)a2 + 1) & 0x7F;
  if (v6 == 1)
  {
    uint64_t v7 = "distinct ";
    size_t v8 = 9;
    goto LABEL_5;
  }
  if (v6 == 2)
  {
    uint64_t v7 = "<temporary!> ";
    size_t v8 = 13;
LABEL_5:
    this = llvm::raw_ostream::operator<<(this, v7, v8);
  }
  switch(*(unsigned char *)a2)
  {
    case 5:
      writeDILocation(v5, a2, (_anonymous_namespace_::AsmWriterContext *)a3);
      return;
    case 6:
      writeDIExpression(v5, (unsigned int **)a2, (_anonymous_namespace_::AsmWriterContext *)a3);
      return;
    case 7:
      int v10 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v10 > 0x1BuLL)
      {
        qmemcpy(v10, "!DIGlobalVariableExpression(", 28);
        *((void *)v5 + 4) += 28;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIGlobalVariableExpression(", 0x1CuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      unint64_t v46 = (void *)((char *)a2 - 16);
      unint64_t v45 = *((void *)a2 - 2);
      if ((v45 & 2) != 0) {
        unint64_t v47 = (llvm::DIExpression **)*((void *)a2 - 4);
      }
      else {
        unint64_t v47 = (llvm::DIExpression **)&v46[-((v45 >> 2) & 0xF)];
      }
      if ((*v46 & 2) != 0) {
        uint64_t v88 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v88 = &v46[-((*v46 >> 2) & 0xFLL)];
      }
      uint64_t v124 = (llvm::DIExpression *)v88[1];
      int v125 = "expr";
      goto LABEL_521;
    case 8:
      unsigned int v11 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v11 > 0xEuLL)
      {
        qmemcpy(v11, "!GenericDINode(", 15);
        *((void *)v5 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!GenericDINode(", 0xFuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      char v49 = (unint64_t *)((char *)a2 - 16);
      unint64_t v48 = *((void *)a2 - 2);
      if ((v48 & 2) != 0) {
        uint64_t v50 = (uint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v50 = (uint64_t *)&v49[-((v48 >> 2) & 0xF)];
      }
      uint64_t v89 = *v50;
      if (v89)
      {
        int v90 = *(uint64_t **)(v89 + 8);
        uint64_t v93 = *v90;
        uint64_t v91 = (llvm::raw_ostream *)(v90 + 3);
        uint64_t v92 = v93;
      }
      else
      {
        uint64_t v91 = 0;
        uint64_t v92 = 0;
      }
      if ((*v49 & 2) != 0) {
        unsigned int v255 = *((_DWORD *)a2 - 6);
      }
      else {
        unsigned int v255 = (*v49 >> 6) & 0xF;
      }
      if (v255 != 1)
      {
        v256 = v5;
        if (!(_BYTE)v544) {
          v256 = llvm::raw_ostream::operator<<(v5, __s);
        }
        llvm::raw_ostream::operator<<(v256, "operands: {", 0xBuLL);
        unint64_t v257 = *v49;
        if ((*v49 & 2) != 0)
        {
          uint64_t v258 = (unint64_t *)*((void *)a2 - 4);
          uint64_t v259 = *((unsigned int *)a2 - 6);
        }
        else
        {
          uint64_t v258 = &v49[-((v257 >> 2) & 0xF)];
          uint64_t v259 = (v257 >> 6) & 0xF;
        }
        if (v259 != 1)
        {
          char v425 = 0;
          v426 = (llvm::DIExpression **)(v258 + 1);
          uint64_t v427 = 8 * v259 - 8;
          do
          {
            if (v425)
            {
              unsigned int v428 = (_WORD *)*((void *)v5 + 4);
              if (*((void *)v5 + 3) - (void)v428 > 1uLL)
              {
                *unsigned int v428 = 8236;
                *((void *)v5 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v5, ", ", 2uLL);
              }
            }
            v429 = *v426++;
            writeMetadataAsOperand(v5, v429, (uint64_t (***)(void, llvm::DIExpression *))a3);
            char v425 = 1;
            v427 -= 8;
          }
          while (v427);
        }
        llvm::raw_ostream::operator<<(v5, "}", 1uLL);
      }
      goto LABEL_793;
    case 9:
      uint64_t v25 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v25) > 0xB)
      {
        *(_DWORD *)(v25 + 8) = 677734254;
        *(void *)uint64_t v25 = *(void *)"!DISubrange(";
        *((void *)v5 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DISubrange(", 0xCuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      long long v128 = (void *)((char *)a2 - 16);
      unint64_t v127 = *((void *)a2 - 2);
      if ((v127 & 2) != 0) {
        __int16 v129 = (llvm::DIExpression **)*((void *)a2 - 4);
      }
      else {
        __int16 v129 = (llvm::DIExpression **)&v128[-((v127 >> 2) & 0xF)];
      }
      uint64_t v171 = *v129;
      if (*v129 && *(unsigned char *)v171 == 1)
      {
        uint64_t v172 = *((void *)v171 + 16);
        unsigned int v173 = *(_DWORD *)(v172 + 32);
        if (v173 > 0x40) {
          unint64_t v174 = **(void **)(v172 + 24);
        }
        else {
          unint64_t v174 = (uint64_t)(*(void *)(v172 + 24) << -(char)v173) >> -(char)v173;
        }
      }
      else
      {
      }
      if ((*v128 & 2) != 0) {
        v523 = (void *)*((void *)a2 - 4);
      }
      else {
        v523 = &v128[-((*v128 >> 2) & 0xFLL)];
      }
      v524 = (llvm::DIExpression *)v523[1];
      if (v524 && *(unsigned char *)v524 == 1)
      {
        uint64_t v525 = *((void *)v524 + 16);
        unsigned int v526 = *(_DWORD *)(v525 + 32);
        if (v526 > 0x40) {
          unint64_t v527 = **(void **)(v525 + 24);
        }
        else {
          unint64_t v527 = (uint64_t)(*(void *)(v525 + 24) << -(char)v526) >> -(char)v526;
        }
      }
      else
      {
      }
      if ((*v128 & 2) != 0) {
        v528 = (void *)*((void *)a2 - 4);
      }
      else {
        v528 = &v128[-((*v128 >> 2) & 0xFLL)];
      }
      v529 = (llvm::DIExpression *)v528[2];
      if (v529 && *(unsigned char *)v529 == 1)
      {
        uint64_t v530 = *((void *)v529 + 16);
        unsigned int v531 = *(_DWORD *)(v530 + 32);
        if (v531 > 0x40) {
          unint64_t v532 = **(void **)(v530 + 24);
        }
        else {
          unint64_t v532 = (uint64_t)(*(void *)(v530 + 24) << -(char)v531) >> -(char)v531;
        }
      }
      else
      {
      }
      if ((*v128 & 2) != 0) {
        v533 = (void *)*((void *)a2 - 4);
      }
      else {
        v533 = &v128[-((*v128 >> 2) & 0xFLL)];
      }
      uint64_t v124 = (llvm::DIExpression *)v533[3];
      if (!v124 || *(unsigned char *)v124 != 1)
      {
        int v125 = "stride";
        size_t v126 = 6;
        goto LABEL_651;
      }
      uint64_t v534 = *((void *)v124 + 16);
      unsigned int v535 = *(_DWORD *)(v534 + 32);
      if (v535 > 0x40) {
        unint64_t v254 = **(void **)(v534 + 24);
      }
      else {
        unint64_t v254 = (uint64_t)(*(void *)(v534 + 24) << -(char)v535) >> -(char)v535;
      }
      goto LABEL_832;
    case 0xA:
      uint64_t v26 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v26 > 0xDuLL)
      {
        qmemcpy(v26, "!DIEnumerator(", 14);
        *((void *)v5 + 4) += 14;
      }
      else
      {
        this = llvm::raw_ostream::write(v5, "!DIEnumerator(", 0xEuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = &qword_26B41C9A0;
      unint64_t v130 = *((void *)a2 - 2);
      if ((v130 & 2) != 0) {
        uint64_t v131 = (uint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v131 = (uint64_t *)((char *)a2 - 8 * ((v130 >> 2) & 0xF) - 16);
      }
      uint64_t v175 = *v131;
      if (v175)
      {
        int v176 = *(uint64_t **)(v175 + 8);
        uint64_t v179 = *v176;
        v177 = (llvm::raw_ostream *)(v176 + 3);
        uint64_t v178 = v179;
      }
      else
      {
        v177 = 0;
        uint64_t v178 = 0;
      }
      int v284 = *((_DWORD *)a2 + 1);
      v285 = p_s;
      if ((_BYTE)v544)
      {
        LOBYTE(v544) = 0;
        uint64_t v286 = p_s;
      }
      else
      {
        uint64_t v286 = llvm::raw_ostream::operator<<(p_s, __s);
      }
      uint64_t v344 = *((void *)v286 + 4);
      if ((unint64_t)(*((void *)v286 + 3) - v344) > 4)
      {
        *(unsigned char *)(v344 + 4) = 101;
        *(_DWORD *)uint64_t v344 = 1970037110;
        v345 = (_WORD *)(*((void *)v286 + 4) + 5);
        *((void *)v286 + 4) = v345;
      }
      else
      {
        uint64_t v286 = llvm::raw_ostream::write(v286, "value", 5uLL);
        v345 = (_WORD *)*((void *)v286 + 4);
      }
      if (*((void *)v286 + 3) - (void)v345 > 1uLL)
      {
        _WORD *v345 = 8250;
        *((void *)v286 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v286, ": ", 2uLL);
      }
      llvm::APInt::print((const llvm::MDNode *)((char *)a2 + 16), v285, v284 == 0);
      if (!*((_DWORD *)a2 + 1)) {
        goto LABEL_793;
      }
      v271 = "isUnsigned";
      size_t v272 = 10;
      int v270 = 1;
      goto LABEL_470;
    case 0xB:
      uint64_t v12 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v12 > 0xCuLL)
      {
        qmemcpy(v12, "!DIBasicType(", 13);
        *((void *)v5 + 4) += 13;
      }
      else
      {
        this = llvm::raw_ostream::write(v5, "!DIBasicType(", 0xDuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = &qword_26B41C9A0;
      if (*((_WORD *)a2 + 1) != 36) {
      unint64_t v51 = *((void *)a2 - 2);
      }
      if ((v51 & 2) != 0) {
        char v52 = (char *)*((void *)a2 - 4);
      }
      else {
        char v52 = (char *)a2 - 8 * ((v51 >> 2) & 0xF) - 16;
      }
      uint64_t v94 = *((void *)v52 + 2);
      if (v94)
      {
        int v95 = *(uint64_t **)(v94 + 8);
        uint64_t v98 = *v95;
        uint64_t v96 = (llvm::raw_ostream *)(v95 + 3);
        uint64_t v97 = v98;
      }
      else
      {
        uint64_t v96 = 0;
        uint64_t v97 = 0;
      }
      goto LABEL_793;
    case 0xC:
      double v27 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v27 > 0xEuLL)
      {
        qmemcpy(v27, "!DIDerivedType(", 15);
        *((void *)v5 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIDerivedType(", 0xFuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      long long v133 = (void *)((char *)a2 - 16);
      unint64_t v132 = *((void *)a2 - 2);
      if ((v132 & 2) != 0) {
        long long v134 = (void *)*((void *)a2 - 4);
      }
      else {
        long long v134 = &v133[-((v132 >> 2) & 0xF)];
      }
      uint64_t v180 = v134[2];
      if (v180)
      {
        int v181 = *(uint64_t **)(v180 + 8);
        uint64_t v184 = *v181;
        uint64_t v182 = (llvm::raw_ostream *)(v181 + 3);
        uint64_t v183 = v184;
      }
      else
      {
        uint64_t v182 = 0;
        uint64_t v183 = 0;
      }
      if ((*v133 & 2) != 0) {
        unint64_t v287 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v287 = &v133[-((*v133 >> 2) & 0xFLL)];
      }
      uint64_t v288 = a2;
      if (*(unsigned char *)a2 != 15)
      {
        if ((*v133 & 2) != 0) {
          int v289 = (llvm::DIExpression **)*((void *)a2 - 4);
        }
        else {
          int v289 = (llvm::DIExpression **)&v133[-((*v133 >> 2) & 0xFLL)];
        }
        uint64_t v288 = *v289;
      }
      unint64_t v456 = *((void *)a2 - 2);
      if ((v456 & 2) != 0) {
        v457 = (void *)*((void *)a2 - 4);
      }
      else {
        v457 = &v133[-((v456 >> 2) & 0xF)];
      }
      unint64_t v458 = *((void *)a2 - 2);
      if ((v458 & 2) != 0) {
        v459 = (void *)*((void *)a2 - 4);
      }
      else {
        v459 = &v133[-((v458 >> 2) & 0xF)];
      }
      uint64_t v460 = *(void *)((char *)a2 + 44);
      if ((v460 & 0xFF00000000) != 0) {
      if ((*v133 & 2) != 0)
      }
        int v461 = (void *)*((void *)a2 - 4);
      else {
        int v461 = &v133[-((*v133 >> 2) & 0xFLL)];
      }
      if (*((_WORD *)a2 + 1) != 17152) {
        goto LABEL_793;
      }
      if (*((_WORD *)a2 + 1) != 17152) {
        goto LABEL_793;
      }
      if (*((_WORD *)a2 + 1) != 17152) {
        goto LABEL_793;
      }
      if (*((_WORD *)a2 + 1) != 17152) {
        goto LABEL_793;
      }
      if (*((_WORD *)a2 + 1) != 17152) {
        goto LABEL_793;
      }
      int v270 = (*((_DWORD *)a2 + 1) >> 22) & 1;
      v271 = "ptrAuthAuthenticatesNullValues";
      size_t v272 = 30;
LABEL_470:
      __int16 v346 = 0;
      goto LABEL_693;
    case 0xD:
      uint64_t v13 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v13) > 0x10)
      {
        *(unsigned char *)(v13 + 16) = 40;
        *(_OWORD *)uint64_t v13 = *(_OWORD *)"!DICompositeType(";
        *((void *)v5 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DICompositeType(", 0x11uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      char v54 = (unint64_t *)((char *)a2 - 16);
      unint64_t v53 = *((void *)a2 - 2);
      if ((v53 & 2) != 0) {
        uint64_t v55 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v55 = &v54[-((v53 >> 2) & 0xF)];
      }
      unint64_t v99 = v55[2];
      if (v99)
      {
        uint64_t v100 = *(uint64_t **)(v99 + 8);
        uint64_t v103 = *v100;
        uint64_t v101 = (llvm::raw_ostream *)(v100 + 3);
        uint64_t v102 = v103;
      }
      else
      {
        uint64_t v101 = 0;
        uint64_t v102 = 0;
      }
      if ((*v54 & 2) != 0) {
        v260 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        v260 = &v54[-((*v54 >> 2) & 0xF)];
      }
      __int16 v261 = a2;
      if (*(unsigned char *)a2 != 15)
      {
        if ((*v54 & 2) != 0) {
          uint64_t v262 = (llvm::DIExpression **)*((void *)a2 - 4);
        }
        else {
          uint64_t v262 = (llvm::DIExpression **)&v54[-((*v54 >> 2) & 0xF)];
        }
        __int16 v261 = *v262;
      }
      unint64_t v430 = *((void *)a2 - 2);
      if ((v430 & 2) != 0) {
        int v431 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        int v431 = &v54[-((v430 >> 2) & 0xF)];
      }
      unint64_t v432 = *((void *)a2 - 2);
      if ((v432 & 2) != 0) {
        v433 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        v433 = &v54[-((v432 >> 2) & 0xF)];
      }
      unint64_t v434 = *((void *)a2 - 2);
      if ((v434 & 2) != 0) {
        double v435 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        double v435 = &v54[-((v434 >> 2) & 0xF)];
      }
      if ((*v54 & 2) != 0) {
        v436 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        v436 = &v54[-((*v54 >> 2) & 0xF)];
      }
      if ((*v54 & 2) != 0) {
        unsigned int v437 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        unsigned int v437 = &v54[-((*v54 >> 2) & 0xF)];
      }
      unint64_t v438 = v437[7];
      if (v438)
      {
        uint64_t v439 = *(uint64_t **)(v438 + 8);
        uint64_t v442 = *v439;
        unint64_t v440 = (llvm::raw_ostream *)(v439 + 3);
        uint64_t v441 = v442;
      }
      else
      {
        unint64_t v440 = 0;
        uint64_t v441 = 0;
      }
      if ((*v54 & 2) != 0) {
        int64_t v443 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        int64_t v443 = &v54[-((*v54 >> 2) & 0xF)];
      }
      if ((*v54 & 2) != 0) {
        unint64_t v444 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        unint64_t v444 = &v54[-((*v54 >> 2) & 0xF)];
      }
      if ((*v54 & 2) != 0) {
        unint64_t v445 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        unint64_t v445 = &v54[-((*v54 >> 2) & 0xF)];
      }
      if ((*v54 & 2) != 0) {
        uint64_t v446 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v446 = &v54[-((*v54 >> 2) & 0xF)];
      }
      unint64_t v447 = *v54;
      if ((*v54 & 2) != 0) {
        uint64_t v448 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v448 = &v54[-((v447 >> 2) & 0xF)];
      }
      unint64_t v449 = v448[12];
      if (v449 && *(unsigned char *)v449 == 1 && (uint64_t v450 = *(void *)(v449 + 128)) != 0 && *(unsigned char *)(v450 + 16) == 16)
      {
        unsigned int v451 = *(_DWORD *)(v450 + 32);
        if (v451 > 0x40) {
          unint64_t v452 = **(void **)(v450 + 24);
        }
        else {
          unint64_t v452 = (uint64_t)(*(void *)(v450 + 24) << -(char)v451) >> -(char)v451;
        }
      }
      else
      {
        if ((v447 & 2) != 0) {
          uint64_t v453 = (unint64_t *)*((void *)a2 - 4);
        }
        else {
          uint64_t v453 = &v54[-((v447 >> 2) & 0xF)];
        }
      }
      if ((*v54 & 2) != 0) {
        v454 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        v454 = &v54[-((*v54 >> 2) & 0xF)];
      }
      uint64_t v124 = (llvm::DIExpression *)v454[13];
      goto LABEL_650;
    case 0xE:
      uint64_t v28 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v28) > 0x11)
      {
        *(_WORD *)(v28 + 16) = 10341;
        *(_OWORD *)uint64_t v28 = *(_OWORD *)"!DISubroutineType(";
        *((void *)v5 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DISubroutineType(", 0x12uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      int v135 = (llvm::dwarf *)*((unsigned __int8 *)a2 + 44);
      if (*((unsigned char *)a2 + 44))
      {
        int v136 = p_s;
        if ((_BYTE)v544)
        {
          LOBYTE(v544) = 0;
          long long v137 = p_s;
        }
        else
        {
          long long v137 = llvm::raw_ostream::operator<<(p_s, __s);
        }
        int v491 = llvm::raw_ostream::operator<<(v137, "cc", 2uLL);
        long long v492 = (_WORD *)*((void *)v491 + 4);
        if (*((void *)v491 + 3) - (void)v492 > 1uLL)
        {
          *long long v492 = 8250;
          *((void *)v491 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v491, ": ", 2uLL);
        }
        int64x2_t v493 = llvm::dwarf::ConventionString(v135);
        if (v494)
        {
          llvm::raw_ostream::operator<<(v136, v493, v494);
        }
        else
        {
          v522 = (unsigned char *)*((void *)v136 + 4);
          if ((unint64_t)v522 >= *((void *)v136 + 3))
          {
            llvm::raw_ostream::write(v136, (char)v135);
          }
          else
          {
            *((void *)v136 + 4) = v522 + 1;
            unsigned char *v522 = (_BYTE)v135;
          }
        }
      }
      unint64_t v536 = *((void *)a2 - 2);
      if ((v536 & 2) != 0) {
        v537 = (char *)*((void *)a2 - 4);
      }
      else {
        v537 = (char *)a2 - 8 * ((v536 >> 2) & 0xF) - 16;
      }
      uint64_t v124 = (llvm::DIExpression *)*((void *)v537 + 3);
      int v125 = "types";
      goto LABEL_838;
    case 0xF:
      size_t v14 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v14 > 7uLL)
      {
        *size_t v14 = 0x28656C6946494421;
        *((void *)v5 + 4) += 8;
      }
      else
      {
        this = llvm::raw_ostream::write(v5, "!DIFile(", 8uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = &qword_26B41C9A0;
      uint64_t v57 = (void *)((char *)a2 - 16);
      unint64_t v56 = *((void *)a2 - 2);
      if ((v56 & 2) != 0) {
        unint64_t v58 = (uint64_t *)*((void *)a2 - 4);
      }
      else {
        unint64_t v58 = &v57[-((v56 >> 2) & 0xF)];
      }
      uint64_t v104 = *v58;
      if (v104)
      {
        BOOL v105 = *(uint64_t **)(v104 + 8);
        uint64_t v108 = *v105;
        BOOL v106 = (llvm::raw_ostream *)(v105 + 3);
        uint64_t v107 = v108;
      }
      else
      {
        BOOL v106 = 0;
        uint64_t v107 = 0;
      }
      if ((*v57 & 2) != 0) {
        __int16 v263 = (void *)*((void *)a2 - 4);
      }
      else {
        __int16 v263 = &v57[-((*v57 >> 2) & 0xFLL)];
      }
      uint64_t v264 = v263[1];
      if (v264)
      {
        unint64_t v265 = *(uint64_t **)(v264 + 8);
        uint64_t v268 = *v265;
        unint64_t v266 = (llvm::raw_ostream *)(v265 + 3);
        uint64_t v267 = v268;
      }
      else
      {
        unint64_t v266 = 0;
        uint64_t v267 = 0;
      }
      if (*((unsigned char *)a2 + 32))
      {
        v278 = *(uint64_t **)(*((void *)a2 + 3) + 8);
        uint64_t v281 = *v278;
        v279 = (llvm::raw_ostream *)(v278 + 3);
        uint64_t v280 = v281;
        uint64_t v282 = *((int *)a2 + 4);
        v283 = p_s;
        if ((_BYTE)v544) {
          LOBYTE(v544) = 0;
        }
        else {
          v283 = llvm::raw_ostream::operator<<(p_s, __s);
        }
        v470 = (void *)*((void *)v283 + 4);
        if (*((void *)v283 + 3) - (void)v470 > 0xDuLL)
        {
          qmemcpy(v470, "checksumkind: ", 14);
          *((void *)v283 + 4) += 14;
        }
        else
        {
          llvm::raw_ostream::write(v283, "checksumkind: ", 0xEuLL);
        }
        v471 = ChecksumKindName[v282 - 1];
        size_t v472 = strlen(v471);
        llvm::raw_ostream::operator<<(v283, v471, v472);
      }
      uint64_t v473 = *((void *)a2 + 5);
      if (v473)
      {
        v474 = *(uint64_t **)(v473 + 8);
        uint64_t v475 = *v474;
        TargetFuncuint64_t Name = (llvm::raw_ostream *)(v474 + 3);
        uint64_t v369 = v475;
      }
      else
      {
        TargetFuncuint64_t Name = 0;
        uint64_t v369 = 0;
      }
      uint64_t v379 = "source";
      p_p_s = (llvm::raw_ostream *)&p_s;
      size_t v381 = 6;
      goto LABEL_792;
    case 0x10:
      char v15 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v15 > 0xEuLL)
      {
        qmemcpy(v15, "!DICompileUnit(", 15);
        *((void *)v5 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DICompileUnit(", 0xFuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      uint64_t v59 = a2;
      if (*(unsigned char *)a2 != 15)
      {
        unint64_t v60 = *((void *)a2 - 2);
        if ((v60 & 2) != 0) {
          int v61 = (llvm::DIExpression **)*((void *)a2 - 4);
        }
        else {
          int v61 = (llvm::DIExpression **)((char *)a2 - 8 * ((v60 >> 2) & 0xF) - 16);
        }
        uint64_t v59 = *v61;
      }
      unint64_t v391 = (void *)((char *)a2 - 16);
      unint64_t v390 = *((void *)a2 - 2);
      if ((v390 & 2) != 0) {
        unint64_t v392 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v392 = &v391[-((v390 >> 2) & 0xF)];
      }
      uint64_t v393 = v392[1];
      if (v393)
      {
        uint64_t v394 = *(uint64_t **)(v393 + 8);
        uint64_t v397 = *v394;
        uint64_t v395 = (llvm::raw_ostream *)(v394 + 3);
        uint64_t v396 = v397;
      }
      else
      {
        uint64_t v395 = 0;
        uint64_t v396 = 0;
      }
      unint64_t v398 = *((void *)a2 - 2);
      if ((v398 & 2) != 0) {
        v399 = (void *)*((void *)a2 - 4);
      }
      else {
        v399 = &v391[-((v398 >> 2) & 0xF)];
      }
      uint64_t v400 = v399[2];
      if (v400)
      {
        unsigned int v401 = *(uint64_t **)(v400 + 8);
        uint64_t v404 = *v401;
        unint64_t v402 = (llvm::raw_ostream *)(v401 + 3);
        uint64_t v403 = v404;
      }
      else
      {
        unint64_t v402 = 0;
        uint64_t v403 = 0;
      }
      unint64_t v405 = *((void *)a2 - 2);
      if ((v405 & 2) != 0) {
        unint64_t v406 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v406 = &v391[-((v405 >> 2) & 0xF)];
      }
      uint64_t v407 = v406[3];
      if (v407)
      {
        unint64_t v408 = *(uint64_t **)(v407 + 8);
        uint64_t v411 = *v408;
        unint64_t v409 = (llvm::raw_ostream *)(v408 + 3);
        uint64_t v410 = v411;
      }
      else
      {
        unint64_t v409 = 0;
        uint64_t v410 = 0;
      }
      uint64_t v412 = *((int *)a2 + 7);
      v413 = p_s;
      if ((_BYTE)v544) {
        LOBYTE(v544) = 0;
      }
      else {
        v413 = llvm::raw_ostream::operator<<(p_s, __s);
      }
      uint64_t v414 = *((void *)v413 + 4);
      if ((unint64_t)(*((void *)v413 + 3) - v414) > 0xB)
      {
        *(_DWORD *)(v414 + 8) = 1684957515;
        *(void *)uint64_t v414 = *(void *)"emissionKind";
        uint64_t v415 = (_WORD *)(*((void *)v413 + 4) + 12);
        *((void *)v413 + 4) = v415;
      }
      else
      {
        v413 = llvm::raw_ostream::write(v413, "emissionKind", 0xCuLL);
        uint64_t v415 = (_WORD *)*((void *)v413 + 4);
      }
      if (*((void *)v413 + 3) - (void)v415 > 1uLL)
      {
        *uint64_t v415 = 8250;
        *((void *)v413 + 4) += 2;
      }
      else
      {
        v413 = llvm::raw_ostream::write(v413, ": ", 2uLL);
      }
      if (v412 > 3) {
        uint64_t v416 = 0;
      }
      else {
        uint64_t v416 = off_265597068[v412];
      }
      llvm::raw_ostream::operator<<(v413, v416);
      if ((*v391 & 2) != 0) {
        v417 = (void *)*((void *)a2 - 4);
      }
      else {
        v417 = &v391[-((*v391 >> 2) & 0xFLL)];
      }
      if ((*v391 & 2) != 0) {
        long long v418 = (void *)*((void *)a2 - 4);
      }
      else {
        long long v418 = &v391[-((*v391 >> 2) & 0xFLL)];
      }
      if ((*v391 & 2) != 0) {
        long long v419 = (void *)*((void *)a2 - 4);
      }
      else {
        long long v419 = &v391[-((*v391 >> 2) & 0xFLL)];
      }
      if ((*v391 & 2) != 0) {
        int64x2_t v420 = (void *)*((void *)a2 - 4);
      }
      else {
        int64x2_t v420 = &v391[-((*v391 >> 2) & 0xFLL)];
      }
      if ((*v391 & 2) != 0) {
        uint64_t v421 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v421 = &v391[-((*v391 >> 2) & 0xFLL)];
      }
      int v422 = *((_DWORD *)a2 + 11);
      if (v422)
      {
        v423 = p_s;
        if ((_BYTE)v544) {
          LOBYTE(v544) = 0;
        }
        else {
          v423 = llvm::raw_ostream::operator<<(p_s, __s);
        }
        v476 = llvm::raw_ostream::operator<<(v423, "nameTableKind", 0xDuLL);
        v477 = (_WORD *)*((void *)v476 + 4);
        if (*((void *)v476 + 3) - (void)v477 > 1uLL)
        {
          _WORD *v477 = 8250;
          *((void *)v476 + 4) += 2;
        }
        else
        {
          v476 = llvm::raw_ostream::write(v476, ": ", 2uLL);
        }
        v478 = "GNU";
        if (v422 != 1) {
          v478 = 0;
        }
        if (v422 == 2) {
          uint64_t v479 = "None";
        }
        else {
          uint64_t v479 = (char *)v478;
        }
        llvm::raw_ostream::operator<<(v476, v479);
      }
      unint64_t v480 = *((void *)a2 - 2);
      if ((v480 & 2) != 0) {
        uint64_t v481 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v481 = &v391[-((v480 >> 2) & 0xF)];
      }
      uint64_t v482 = v481[9];
      if (v482)
      {
        v483 = *(uint64_t **)(v482 + 8);
        uint64_t v486 = *v483;
        v484 = (llvm::raw_ostream *)(v483 + 3);
        uint64_t v485 = v486;
      }
      else
      {
        v484 = 0;
        uint64_t v485 = 0;
      }
      if ((*v391 & 2) != 0) {
        uint64_t v487 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v487 = &v391[-((*v391 >> 2) & 0xFLL)];
      }
      uint64_t v488 = v487[10];
      if (v488)
      {
        char v489 = *(uint64_t **)(v488 + 8);
        uint64_t v490 = *v489;
        TargetFuncuint64_t Name = (llvm::raw_ostream *)(v489 + 3);
        uint64_t v369 = v490;
      }
      else
      {
        TargetFuncuint64_t Name = 0;
        uint64_t v369 = 0;
      }
      uint64_t v379 = "sdk";
      p_p_s = (llvm::raw_ostream *)&p_s;
      size_t v381 = 3;
      goto LABEL_792;
    case 0x11:
      int v29 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v29 > 0xDuLL)
      {
        qmemcpy(v29, "!DISubprogram(", 14);
        *((void *)v5 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DISubprogram(", 0xEuLL);
      }
      *(void *)v539 = v5;
      char v540 = 1;
      v541 = ", ";
      v542 = a3;
      uint64_t v139 = (unint64_t *)((char *)a2 - 16);
      unint64_t v138 = *((void *)a2 - 2);
      if ((v138 & 2) != 0) {
        int v140 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        int v140 = &v139[-((v138 >> 2) & 0xF)];
      }
      unint64_t v185 = v140[2];
      if (v185)
      {
        uint64_t v186 = *(uint64_t **)(v185 + 8);
        uint64_t v189 = *v186;
        uint64_t v187 = (llvm::raw_ostream *)(v186 + 3);
        uint64_t v188 = v189;
      }
      else
      {
        uint64_t v187 = 0;
        uint64_t v188 = 0;
      }
      if ((*v139 & 2) != 0) {
        uint64_t v290 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v290 = &v139[-((*v139 >> 2) & 0xF)];
      }
      unint64_t v291 = v290[3];
      if (v291)
      {
        unint64_t v292 = *(uint64_t **)(v291 + 8);
        uint64_t v295 = *v292;
        int64_t v293 = (llvm::raw_ostream *)(v292 + 3);
        uint64_t v294 = v295;
      }
      else
      {
        int64_t v293 = 0;
        uint64_t v294 = 0;
      }
      if ((*v139 & 2) != 0) {
        uint64_t v347 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v347 = &v139[-((*v139 >> 2) & 0xF)];
      }
      v348 = a2;
      if (*(unsigned char *)a2 != 15)
      {
        if ((*v139 & 2) != 0) {
          v349 = (llvm::DIExpression **)*((void *)a2 - 4);
        }
        else {
          v349 = (llvm::DIExpression **)&v139[-((*v139 >> 2) & 0xF)];
        }
        v348 = *v349;
      }
      unint64_t v462 = *((void *)a2 - 2);
      if ((v462 & 2) != 0) {
        v463 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        v463 = &v139[-((v462 >> 2) & 0xF)];
      }
      unint64_t v464 = *((void *)a2 - 2);
      if ((v464 & 2) != 0)
      {
        if (*((_DWORD *)a2 - 6) >= 9u)
        {
          uint64_t v465 = (unint64_t *)*((void *)a2 - 4);
          goto LABEL_682;
        }
      }
      else if ((*((void *)a2 - 2) & 0x3C0uLL) > 0x200)
      {
        uint64_t v465 = &v139[-((v464 >> 2) & 0xF)];
LABEL_682:
        v466 = (llvm::DIExpression *)v465[8];
        goto LABEL_684;
      }
      v466 = 0;
LABEL_684:
      unsigned int v467 = *((_DWORD *)a2 + 6);
      if (*((_DWORD *)a2 + 9) & 3 | v467) {
      unint64_t v468 = *((int *)a2 + 7);
      }
      if (v468)
      {
        uint64_t v469 = *(llvm::raw_ostream **)v539;
        if (v540) {
          char v540 = 0;
        }
        else {
          uint64_t v469 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)v539, v541);
        }
        v495 = llvm::raw_ostream::operator<<(v469, "thisAdjustment", 0xEuLL);
        v496 = (_WORD *)*((void *)v495 + 4);
        if (*((void *)v495 + 3) - (void)v496 > 1uLL)
        {
          _WORD *v496 = 8250;
          *((void *)v495 + 4) += 2;
        }
        else
        {
          v495 = llvm::raw_ostream::write(v495, ": ", 2uLL);
        }
        llvm::write_integer(v495, v468, 0, 0);
      }
      uint64_t v497 = *((unsigned int *)a2 + 9);
      v498 = *(llvm::raw_ostream **)v539;
      if (v540)
      {
        char v540 = 0;
        v499 = *(llvm::raw_ostream **)v539;
      }
      else
      {
        v499 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)v539, v541);
      }
      v500 = (_DWORD *)*((void *)v499 + 4);
      if (*((void *)v499 + 3) - (void)v500 > 6uLL)
      {
        *(_DWORD *)((char *)v500 + 3) = 1936154988;
        _DWORD *v500 = 1816555635;
        v501 = (_WORD *)(*((void *)v499 + 4) + 7);
        *((void *)v499 + 4) = v501;
      }
      else
      {
        v499 = llvm::raw_ostream::write(v499, "spFlags", 7uLL);
        v501 = (_WORD *)*((void *)v499 + 4);
      }
      if (*((void *)v499 + 3) - (void)v501 > 1uLL)
      {
        _WORD *v501 = 8250;
        *((void *)v499 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v499, ": ", 2uLL);
      }
      if (!v497)
      {
        write_unsigned<unsigned long>(v498, 0, 0, 0, 0);
        goto LABEL_761;
      }
      p_s = (llvm::raw_ostream *)&__s;
      uint64_t v544 = 0x800000000;
      unsigned int v502 = llvm::DISubprogram::splitFlags(v497, (unsigned int *)&p_s);
      unsigned int v503 = v502;
      if (!v544) {
        goto LABEL_757;
      }
      unsigned int v538 = v502;
      char v504 = 0;
      v505 = (int *)p_s;
      uint64_t v506 = 4 * v544;
      do
      {
        FlagString = llvm::DISubprogram::getFlagString(*v505);
        size_t v509 = v508;
        if (v504)
        {
          uint64_t v510 = *((void *)v498 + 4);
          if ((unint64_t)(*((void *)v498 + 3) - v510) > 2)
          {
            *(unsigned char *)(v510 + 2) = 32;
            *(_WORD *)uint64_t v510 = 31776;
            *((void *)v498 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v498, " | ", 3uLL);
          }
        }
        llvm::raw_ostream::operator<<(v498, FlagString, v509);
        ++v505;
        char v504 = 1;
        v506 -= 4;
      }
      while (v506);
      uint64_t v139 = (unint64_t *)((char *)a2 - 16);
      unsigned int v503 = v538;
      if (v538 || !v544)
      {
        v498 = llvm::raw_ostream::operator<<(v498, " | ", 3uLL);
LABEL_757:
        write_unsigned<unsigned long>(v498, v503, 0, 0, 0);
      }
      if (p_s != (llvm::raw_ostream *)&__s) {
        free(p_s);
      }
LABEL_761:
      if ((*v139 & 2) != 0) {
        v511 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        v511 = &v139[-((*v139 >> 2) & 0xF)];
      }
      if ((*v139 & 2) != 0)
      {
        if (*((_DWORD *)a2 - 6) >= 0xAu)
        {
          v512 = (unint64_t *)*((void *)a2 - 4);
          goto LABEL_769;
        }
      }
      else if ((*v139 & 0x380) > 0x240)
      {
        v512 = &v139[-((*v139 >> 2) & 0xF)];
LABEL_769:
        v513 = (llvm::DIExpression *)v512[9];
        goto LABEL_771;
      }
      v513 = 0;
LABEL_771:
      if ((*v139 & 2) != 0) {
        uint64_t v514 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v514 = &v139[-((*v139 >> 2) & 0xF)];
      }
      if ((*v139 & 2) != 0) {
        char v515 = (unint64_t *)*((void *)a2 - 4);
      }
      else {
        char v515 = &v139[-((*v139 >> 2) & 0xF)];
      }
      if ((*v139 & 2) != 0)
      {
        if (*((_DWORD *)a2 - 6) >= 0xBu)
        {
          uint64_t v516 = (unint64_t *)*((void *)a2 - 4);
          goto LABEL_782;
        }
      }
      else if ((*v139 & 0x3C0) > 0x280)
      {
        uint64_t v516 = &v139[-((*v139 >> 2) & 0xF)];
LABEL_782:
        int v517 = (llvm::DIExpression *)v516[10];
        goto LABEL_784;
      }
      int v517 = 0;
LABEL_784:
      unint64_t v518 = *v139;
      if ((*v139 & 2) != 0)
      {
        if (*((_DWORD *)a2 - 6) >= 0xCu)
        {
          uint64_t v519 = (unint64_t *)*((void *)a2 - 4);
          goto LABEL_789;
        }
      }
      else if ((~(_WORD)v518 & 0x300) == 0)
      {
        uint64_t v519 = &v139[-((v518 >> 2) & 0xF)];
LABEL_789:
        v520 = (llvm::DIExpression *)v519[11];
        goto LABEL_791;
      }
      v520 = 0;
LABEL_791:
      TargetFuncuint64_t Name = (llvm::raw_ostream *)llvm::DISubprogram::getTargetFuncName(a2);
      uint64_t v369 = v521;
      uint64_t v379 = "targetFuncName";
      p_p_s = (llvm::raw_ostream *)v539;
      size_t v381 = 14;
LABEL_792:
LABEL_793:
      char v86 = (char *)*((void *)v5 + 4);
      if (*((char **)v5 + 3) == v86)
      {
        llvm::raw_ostream::write(v5, ")", 1uLL);
      }
      else
      {
        char v87 = 41;
LABEL_795:
        *char v86 = v87;
        uint64_t v74 = *((void *)v5 + 4) + 1;
LABEL_796:
        *((void *)v5 + 4) = v74;
      }
      return;
    case 0x12:
      __darwin_ct_rune_t v16 = (_OWORD *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v16 > 0xFuLL)
      {
        *__darwin_ct_rune_t v16 = *(_OWORD *)"!DILexicalBlock(";
        *((void *)v5 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DILexicalBlock(", 0x10uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      uint64_t v63 = (void *)((char *)a2 - 16);
      unint64_t v62 = *((void *)a2 - 2);
      if ((v62 & 2) != 0) {
        unint64_t v64 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v64 = &v63[-((v62 >> 2) & 0xF)];
      }
      uint64_t v109 = a2;
      if (*(unsigned char *)a2 != 15)
      {
        if ((*v63 & 2) != 0) {
          uint64_t v110 = (llvm::DIExpression **)*((void *)a2 - 4);
        }
        else {
          uint64_t v110 = (llvm::DIExpression **)&v63[-((*v63 >> 2) & 0xFLL)];
        }
        uint64_t v109 = *v110;
      }
      unsigned int v341 = *((unsigned __int16 *)a2 + 10);
      unint64_t v342 = "column";
      size_t v343 = 6;
      goto LABEL_587;
    case 0x13:
      uint64_t v17 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v17) > 0x13)
      {
        *(_DWORD *)(v17 + 16) = 677735529;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)"!DILexicalBlockFile(";
        *((void *)v5 + 4) += 20;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DILexicalBlockFile(", 0x14uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      int v66 = (void *)((char *)a2 - 16);
      unint64_t v65 = *((void *)a2 - 2);
      if ((v65 & 2) != 0) {
        unint64_t v67 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v67 = &v66[-((v65 >> 2) & 0xF)];
      }
      uint64_t v111 = a2;
      if (*(unsigned char *)a2 != 15)
      {
        if ((*v66 & 2) != 0) {
          int v112 = (llvm::DIExpression **)*((void *)a2 - 4);
        }
        else {
          int v112 = (llvm::DIExpression **)&v66[-((*v66 >> 2) & 0xFLL)];
        }
        uint64_t v111 = *v112;
      }
      unsigned int v341 = *((_DWORD *)a2 + 4);
      unint64_t v342 = "discriminator";
      size_t v343 = 13;
      char v424 = 0;
      goto LABEL_591;
    case 0x14:
      uint64_t v18 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v18 > 0xCuLL)
      {
        qmemcpy(v18, "!DINamespace(", 13);
        *((void *)v5 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DINamespace(", 0xDuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      uint64_t v69 = (void *)((char *)a2 - 16);
      unint64_t v68 = *((void *)a2 - 2);
      if ((v68 & 2) != 0) {
        uint64_t v70 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v70 = &v69[-((v68 >> 2) & 0xF)];
      }
      uint64_t v113 = v70[2];
      if (v113)
      {
        unsigned int v114 = *(uint64_t **)(v113 + 8);
        uint64_t v117 = *v114;
        char v115 = (llvm::raw_ostream *)(v114 + 3);
        uint64_t v116 = v117;
      }
      else
      {
        char v115 = 0;
        uint64_t v116 = 0;
      }
      if ((*v69 & 2) != 0) {
        v269 = (void *)*((void *)a2 - 4);
      }
      else {
        v269 = &v69[-((*v69 >> 2) & 0xFLL)];
      }
      int v270 = *((unsigned char *)a2 + 16) & 1;
      v271 = "exportSymbols";
      size_t v272 = 13;
      goto LABEL_692;
    case 0x15:
      uint64_t v30 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v30) > 9)
      {
        *(_WORD *)(v30 + 8) = 10341;
        *(void *)uint64_t v30 = *(void *)"!DIModule(";
        *((void *)v5 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIModule(", 0xAuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      int v142 = (void *)((char *)a2 - 16);
      unint64_t v141 = *((void *)a2 - 2);
      if ((v141 & 2) != 0) {
        unint64_t v143 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v143 = &v142[-((v141 >> 2) & 0xF)];
      }
      if ((*v142 & 2) != 0) {
        uint64_t v190 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v190 = &v142[-((*v142 >> 2) & 0xFLL)];
      }
      uint64_t v230 = v190[2];
      if (v230)
      {
        uint64_t v231 = *(uint64_t **)(v230 + 8);
        uint64_t v234 = *v231;
        unint64_t v232 = (llvm::raw_ostream *)(v231 + 3);
        uint64_t v233 = v234;
      }
      else
      {
        unint64_t v232 = 0;
        uint64_t v233 = 0;
      }
      if ((*v142 & 2) != 0) {
        uint64_t v332 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v332 = &v142[-((*v142 >> 2) & 0xFLL)];
      }
      uint64_t v333 = v332[3];
      if (v333)
      {
        uint64_t v334 = *(uint64_t **)(v333 + 8);
        uint64_t v337 = *v334;
        unint64_t v335 = (llvm::raw_ostream *)(v334 + 3);
        uint64_t v336 = v337;
      }
      else
      {
        unint64_t v335 = 0;
        uint64_t v336 = 0;
      }
      if ((*v142 & 2) != 0) {
        uint64_t v371 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v371 = &v142[-((*v142 >> 2) & 0xFLL)];
      }
      uint64_t v372 = v371[4];
      if (v372)
      {
        v373 = *(uint64_t **)(v372 + 8);
        uint64_t v376 = *v373;
        v374 = (llvm::raw_ostream *)(v373 + 3);
        uint64_t v375 = v376;
      }
      else
      {
        v374 = 0;
        uint64_t v375 = 0;
      }
      if ((*v142 & 2) != 0) {
        unint64_t v382 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v382 = &v142[-((*v142 >> 2) & 0xFLL)];
      }
      uint64_t v383 = v382[5];
      if (v383)
      {
        unint64_t v384 = *(uint64_t **)(v383 + 8);
        uint64_t v387 = *v384;
        uint64_t v385 = (llvm::raw_ostream *)(v384 + 3);
        uint64_t v386 = v387;
      }
      else
      {
        uint64_t v385 = 0;
        uint64_t v386 = 0;
      }
      uint64_t v388 = a2;
      if (*(unsigned char *)a2 != 15)
      {
        if ((*v142 & 2) != 0) {
          uint64_t v389 = (llvm::DIExpression **)*((void *)a2 - 4);
        }
        else {
          uint64_t v389 = (llvm::DIExpression **)&v142[-((*v142 >> 2) & 0xFLL)];
        }
        uint64_t v388 = *v389;
      }
      int v270 = *((unsigned __int8 *)a2 + 20);
      v271 = "isDecl";
      size_t v272 = 6;
      goto LABEL_692;
    case 0x16:
      uint64_t v31 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v31 > 0x18uLL)
      {
        qmemcpy(v31, "!DITemplateTypeParameter(", 25);
        *((void *)v5 + 4) += 25;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DITemplateTypeParameter(", 0x19uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      uint64_t v145 = (void *)((char *)a2 - 16);
      unint64_t v144 = *((void *)a2 - 2);
      if ((v144 & 2) != 0) {
        unint64_t v146 = (uint64_t *)*((void *)a2 - 4);
      }
      else {
        unint64_t v146 = &v145[-((v144 >> 2) & 0xF)];
      }
      uint64_t v191 = *v146;
      if (v191)
      {
        uint64_t v192 = *(uint64_t **)(v191 + 8);
        uint64_t v195 = *v192;
        v193 = (llvm::raw_ostream *)(v192 + 3);
        uint64_t v194 = v195;
      }
      else
      {
        v193 = 0;
        uint64_t v194 = 0;
      }
      if ((*v145 & 2) != 0) {
        int64_t v296 = (void *)*((void *)a2 - 4);
      }
      else {
        int64_t v296 = &v145[-((*v145 >> 2) & 0xFLL)];
      }
      int v270 = *((unsigned __int8 *)a2 + 16);
      v271 = "defaulted";
      size_t v272 = 9;
LABEL_692:
      __int16 v346 = 256;
LABEL_693:
      goto LABEL_793;
    case 0x17:
      int v32 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v32 > 0x19uLL)
      {
        qmemcpy(v32, "!DITemplateValueParameter(", 26);
        *((void *)v5 + 4) += 26;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DITemplateValueParameter(", 0x1AuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      if (*((_WORD *)a2 + 1) != 48) {
      unint64_t v148 = (void *)((char *)a2 - 16);
      }
      unint64_t v147 = *((void *)a2 - 2);
      if ((v147 & 2) != 0) {
        uint64_t v149 = (uint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v149 = &v148[-((v147 >> 2) & 0xF)];
      }
      uint64_t v196 = *v149;
      if (v196)
      {
        v197 = *(uint64_t **)(v196 + 8);
        uint64_t v200 = *v197;
        int v198 = (llvm::raw_ostream *)(v197 + 3);
        uint64_t v199 = v200;
      }
      else
      {
        int v198 = 0;
        uint64_t v199 = 0;
      }
      if ((*v148 & 2) != 0) {
        unint64_t v297 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v297 = &v148[-((*v148 >> 2) & 0xFLL)];
      }
      unint64_t v298 = *((void *)a2 - 2);
      if ((v298 & 2) != 0) {
        unint64_t v299 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v299 = &v148[-((v298 >> 2) & 0xF)];
      }
      uint64_t v124 = (llvm::DIExpression *)v299[2];
      int v125 = "value";
LABEL_838:
      size_t v126 = 5;
      char v455 = 0;
      goto LABEL_652;
    case 0x18:
      uint64_t v33 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v33) > 0x11)
      {
        *(_WORD *)(v33 + 16) = 10341;
        *(_OWORD *)uint64_t v33 = *(_OWORD *)"!DIGlobalVariable(";
        *((void *)v5 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIGlobalVariable(", 0x12uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      uint64_t v151 = (void *)((char *)a2 - 16);
      unint64_t v150 = *((void *)a2 - 2);
      if ((v150 & 2) != 0) {
        unint64_t v152 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v152 = &v151[-((v150 >> 2) & 0xF)];
      }
      uint64_t v201 = v152[1];
      if (v201)
      {
        v202 = *(uint64_t **)(v201 + 8);
        uint64_t v205 = *v202;
        unsigned int v203 = (llvm::raw_ostream *)(v202 + 3);
        uint64_t v204 = v205;
      }
      else
      {
        unsigned int v203 = 0;
        uint64_t v204 = 0;
      }
      if ((*v151 & 2) != 0) {
        uint64_t v300 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v300 = &v151[-((*v151 >> 2) & 0xFLL)];
      }
      uint64_t v301 = v300[5];
      if (v301)
      {
        unint64_t v302 = *(uint64_t **)(v301 + 8);
        uint64_t v305 = *v302;
        uint64_t v303 = (llvm::raw_ostream *)(v302 + 3);
        uint64_t v304 = v305;
      }
      else
      {
        uint64_t v303 = 0;
        uint64_t v304 = 0;
      }
      if ((*v151 & 2) != 0) {
        v350 = (llvm::DIExpression **)*((void *)a2 - 4);
      }
      else {
        v350 = (llvm::DIExpression **)&v151[-((*v151 >> 2) & 0xFLL)];
      }
      if ((*v151 & 2) != 0) {
        v351 = (void *)*((void *)a2 - 4);
      }
      else {
        v351 = &v151[-((*v151 >> 2) & 0xFLL)];
      }
      unint64_t v352 = *((void *)a2 - 2);
      if ((v352 & 2) != 0) {
        v353 = (void *)*((void *)a2 - 4);
      }
      else {
        v353 = &v151[-((v352 >> 2) & 0xF)];
      }
      unint64_t v354 = *((void *)a2 - 2);
      if ((v354 & 2) != 0) {
        v355 = (void *)*((void *)a2 - 4);
      }
      else {
        v355 = &v151[-((v354 >> 2) & 0xF)];
      }
      if ((*v151 & 2) != 0) {
        v356 = (void *)*((void *)a2 - 4);
      }
      else {
        v356 = &v151[-((*v151 >> 2) & 0xFLL)];
      }
      unint64_t v357 = *((void *)a2 - 2);
      if ((v357 & 2) != 0) {
        v358 = (void *)*((void *)a2 - 4);
      }
      else {
        v358 = &v151[-((v357 >> 2) & 0xF)];
      }
      uint64_t v124 = (llvm::DIExpression *)v358[8];
      goto LABEL_650;
    case 0x19:
      uint64_t v34 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v34) > 0x10)
      {
        *(unsigned char *)(v34 + 16) = 40;
        *(_OWORD *)uint64_t v34 = *(_OWORD *)"!DILocalVariable(";
        *((void *)v5 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DILocalVariable(", 0x11uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      uint64_t v154 = (void *)((char *)a2 - 16);
      unint64_t v153 = *((void *)a2 - 2);
      if ((v153 & 2) != 0) {
        std::string v155 = (void *)*((void *)a2 - 4);
      }
      else {
        std::string v155 = &v154[-((v153 >> 2) & 0xF)];
      }
      uint64_t v206 = v155[1];
      if (v206)
      {
        v207 = *(uint64_t **)(v206 + 8);
        uint64_t v210 = *v207;
        unint64_t v208 = (llvm::raw_ostream *)(v207 + 3);
        uint64_t v209 = v210;
      }
      else
      {
        unint64_t v208 = 0;
        uint64_t v209 = 0;
      }
      unint64_t v306 = *((void *)a2 - 2);
      if ((v306 & 2) != 0) {
        unint64_t v307 = (llvm::DIExpression **)*((void *)a2 - 4);
      }
      else {
        unint64_t v307 = (llvm::DIExpression **)&v154[-((v306 >> 2) & 0xF)];
      }
      if ((*v154 & 2) != 0) {
        int64_t v308 = (void *)*((void *)a2 - 4);
      }
      else {
        int64_t v308 = &v154[-((*v154 >> 2) & 0xFLL)];
      }
      unint64_t v309 = *((void *)a2 - 2);
      if ((v309 & 2) != 0) {
        uint64_t v310 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v310 = &v154[-((v309 >> 2) & 0xF)];
      }
      unint64_t v311 = *((void *)a2 - 2);
      if ((v311 & 2) != 0) {
        uint64_t v312 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v312 = &v154[-((v311 >> 2) & 0xF)];
      }
      uint64_t v124 = (llvm::DIExpression *)v312[4];
LABEL_650:
      int v125 = "annotations";
      size_t v126 = 11;
      goto LABEL_651;
    case 0x1A:
      uint64_t v35 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v35) > 8)
      {
        *(unsigned char *)(v35 + 8) = 40;
        *(void *)uint64_t v35 = *(void *)"!DILabel(";
        *((void *)v5 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DILabel(", 9uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      int v157 = (void *)((char *)a2 - 16);
      unint64_t v156 = *((void *)a2 - 2);
      if ((v156 & 2) != 0) {
        uint64_t v158 = (llvm::DIExpression **)*((void *)a2 - 4);
      }
      else {
        uint64_t v158 = (llvm::DIExpression **)&v157[-((v156 >> 2) & 0xF)];
      }
      if ((*v157 & 2) != 0) {
        v211 = (void *)*((void *)a2 - 4);
      }
      else {
        v211 = &v157[-((*v157 >> 2) & 0xFLL)];
      }
      uint64_t v235 = v211[1];
      if (v235)
      {
        unint64_t v236 = *(uint64_t **)(v235 + 8);
        uint64_t v239 = *v236;
        uint64_t v237 = (llvm::raw_ostream *)(v236 + 3);
        uint64_t v238 = v239;
      }
      else
      {
        uint64_t v237 = 0;
        uint64_t v238 = 0;
      }
      if ((*v157 & 2) != 0) {
        v338 = (void *)*((void *)a2 - 4);
      }
      else {
        v338 = &v157[-((*v157 >> 2) & 0xFLL)];
      }
      int64_t v339 = (llvm::DIExpression *)v338[2];
      goto LABEL_460;
    case 0x1B:
      long long v36 = (_OWORD *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v36 > 0xFuLL)
      {
        *long long v36 = *(_OWORD *)"!DIObjCProperty(";
        *((void *)v5 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIObjCProperty(", 0x10uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      long long v160 = (void *)((char *)a2 - 16);
      unint64_t v159 = *((void *)a2 - 2);
      if ((v159 & 2) != 0) {
        uint64_t v161 = (uint64_t *)*((void *)a2 - 4);
      }
      else {
        uint64_t v161 = &v160[-((v159 >> 2) & 0xF)];
      }
      uint64_t v212 = *v161;
      if (v212)
      {
        v213 = *(uint64_t **)(v212 + 8);
        uint64_t v216 = *v213;
        v214 = (llvm::raw_ostream *)(v213 + 3);
        uint64_t v215 = v216;
      }
      else
      {
        v214 = 0;
        uint64_t v215 = 0;
      }
      if ((*v160 & 2) != 0) {
        uint64_t v313 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v313 = &v160[-((*v160 >> 2) & 0xFLL)];
      }
      unint64_t v314 = *((void *)a2 - 2);
      if ((v314 & 2) != 0) {
        v315 = (void *)*((void *)a2 - 4);
      }
      else {
        v315 = &v160[-((v314 >> 2) & 0xF)];
      }
      uint64_t v316 = v315[3];
      if (v316)
      {
        size_t v317 = *(uint64_t **)(v316 + 8);
        uint64_t v320 = *v317;
        v318 = (llvm::raw_ostream *)(v317 + 3);
        uint64_t v319 = v320;
      }
      else
      {
        v318 = 0;
        uint64_t v319 = 0;
      }
      if ((*v160 & 2) != 0) {
        v359 = (void *)*((void *)a2 - 4);
      }
      else {
        v359 = &v160[-((*v160 >> 2) & 0xFLL)];
      }
      uint64_t v360 = v359[2];
      if (v360)
      {
        v361 = *(uint64_t **)(v360 + 8);
        uint64_t v364 = *v361;
        v362 = (llvm::raw_ostream *)(v361 + 3);
        uint64_t v363 = v364;
      }
      else
      {
        v362 = 0;
        uint64_t v363 = 0;
      }
      unint64_t v377 = *((void *)a2 - 2);
      if ((v377 & 2) != 0) {
        unint64_t v378 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v378 = &v160[-((v377 >> 2) & 0xF)];
      }
      uint64_t v124 = (llvm::DIExpression *)v378[4];
      int v125 = "type";
LABEL_521:
      size_t v126 = 4;
      goto LABEL_651;
    case 0x1C:
      uint64_t v19 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v19) > 0x11)
      {
        *(_WORD *)(v19 + 16) = 10361;
        *(_OWORD *)uint64_t v19 = *(_OWORD *)"!DIImportedEntity(";
        *((void *)v5 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIImportedEntity(", 0x12uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      unint64_t v72 = (void *)((char *)a2 - 16);
      unint64_t v71 = *((void *)a2 - 2);
      if ((v71 & 2) != 0) {
        size_t v73 = (void *)*((void *)a2 - 4);
      }
      else {
        size_t v73 = &v72[-((v71 >> 2) & 0xF)];
      }
      uint64_t v118 = v73[2];
      if (v118)
      {
        __int16 v119 = *(uint64_t **)(v118 + 8);
        uint64_t v122 = *v119;
        char v120 = (llvm::raw_ostream *)(v119 + 3);
        uint64_t v121 = v122;
      }
      else
      {
        char v120 = 0;
        uint64_t v121 = 0;
      }
      if ((*v72 & 2) != 0) {
        v273 = (llvm::DIExpression **)*((void *)a2 - 4);
      }
      else {
        v273 = (llvm::DIExpression **)&v72[-((*v72 >> 2) & 0xFLL)];
      }
      if ((*v72 & 2) != 0) {
        v274 = (void *)*((void *)a2 - 4);
      }
      else {
        v274 = &v72[-((*v72 >> 2) & 0xFLL)];
      }
      if ((*v72 & 2) != 0) {
        v275 = (void *)*((void *)a2 - 4);
      }
      else {
        v275 = &v72[-((*v72 >> 2) & 0xFLL)];
      }
      unint64_t v276 = *((void *)a2 - 2);
      if ((v276 & 2) != 0) {
        v277 = (void *)*((void *)a2 - 4);
      }
      else {
        v277 = &v72[-((v276 >> 2) & 0xF)];
      }
      uint64_t v124 = (llvm::DIExpression *)v277[4];
      int v125 = "elements";
      size_t v126 = 8;
      goto LABEL_651;
    case 0x1D:
      char v20 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v20 <= 0xCuLL)
      {
        uint64_t v21 = "!DIAssignID()";
        char v22 = v5;
        size_t v23 = 13;
        goto LABEL_319;
      }
      qmemcpy(v20, "!DIAssignID()", 13);
      uint64_t v74 = *((void *)v5 + 4) + 13;
      goto LABEL_796;
    case 0x1E:
      uint64_t v37 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v37) > 8)
      {
        *(unsigned char *)(v37 + 8) = 40;
        *(void *)uint64_t v37 = *(void *)"!DIMacro(";
        uint64_t v38 = *((void *)v5 + 4) + 9;
        *((void *)v5 + 4) = v38;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIMacro(", 9uLL);
        uint64_t v38 = *((void *)v5 + 4);
      }
      p_s = v5;
      __s = ", ";
      v546 = (uint64_t *)a3;
      LOBYTE(v544) = 0;
      if ((unint64_t)(*((void *)v5 + 3) - v38) > 5)
      {
        *(_WORD *)(v38 + 4) = 8250;
        *(_DWORD *)uint64_t v38 = 1701869940;
        *((void *)v5 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v5, "type: ", 6uLL);
      }
      unint64_t v217 = *((unsigned __int16 *)a2 + 1);
      v218 = llvm::dwarf::MacinfoString((llvm::dwarf *)v217);
      if (v219) {
        llvm::raw_ostream::operator<<(v5, v218, v219);
      }
      else {
        write_unsigned<unsigned long>(v5, v217, 0, 0, 0);
      }
      v322 = (void *)((char *)a2 - 16);
      unint64_t v321 = *((void *)a2 - 2);
      if ((v321 & 2) != 0) {
        v323 = (uint64_t *)*((void *)a2 - 4);
      }
      else {
        v323 = &v322[-((v321 >> 2) & 0xF)];
      }
      uint64_t v324 = *v323;
      if (v324)
      {
        int64_t v325 = *(uint64_t **)(v324 + 8);
        uint64_t v328 = *v325;
        unint64_t v326 = (llvm::raw_ostream *)(v325 + 3);
        uint64_t v327 = v328;
      }
      else
      {
        unint64_t v326 = 0;
        uint64_t v327 = 0;
      }
      if ((*v322 & 2) != 0) {
        v365 = (void *)*((void *)a2 - 4);
      }
      else {
        v365 = &v322[-((*v322 >> 2) & 0xFLL)];
      }
      uint64_t v366 = v365[1];
      if (v366)
      {
        v367 = *(uint64_t **)(v366 + 8);
        uint64_t v370 = *v367;
        TargetFuncuint64_t Name = (llvm::raw_ostream *)(v367 + 3);
        uint64_t v369 = v370;
      }
      else
      {
        TargetFuncuint64_t Name = 0;
        uint64_t v369 = 0;
      }
      uint64_t v379 = "value";
      p_p_s = (llvm::raw_ostream *)&p_s;
      size_t v381 = 5;
      goto LABEL_792;
    case 0x1F:
      unint64_t v24 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v24 > 0xCuLL)
      {
        qmemcpy(v24, "!DIMacroFile(", 13);
        *((void *)v5 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIMacroFile(", 0xDuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      int v76 = (void *)((char *)a2 - 16);
      unint64_t v75 = *((void *)a2 - 2);
      if ((v75 & 2) != 0) {
        unsigned __int8 v77 = (llvm::DIExpression **)*((void *)a2 - 4);
      }
      else {
        unsigned __int8 v77 = (llvm::DIExpression **)&v76[-((v75 >> 2) & 0xF)];
      }
      if ((*v76 & 2) != 0) {
        int v123 = (void *)*((void *)a2 - 4);
      }
      else {
        int v123 = &v76[-((*v76 >> 2) & 0xFLL)];
      }
      uint64_t v124 = (llvm::DIExpression *)v123[1];
      int v125 = "nodes";
      size_t v126 = 5;
      goto LABEL_651;
    case 0x20:
      int v39 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v39 > 0xEuLL)
      {
        qmemcpy(v39, "!DICommonBlock(", 15);
        *((void *)v5 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DICommonBlock(", 0xFuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      int v163 = (void *)((char *)a2 - 16);
      unint64_t v162 = *((void *)a2 - 2);
      if ((v162 & 2) != 0) {
        int64_t v164 = (llvm::DIExpression **)*((void *)a2 - 4);
      }
      else {
        int64_t v164 = (llvm::DIExpression **)&v163[-((v162 >> 2) & 0xF)];
      }
      if ((*v163 & 2) != 0) {
        v220 = (void *)*((void *)a2 - 4);
      }
      else {
        v220 = &v163[-((*v163 >> 2) & 0xFLL)];
      }
      if ((*v163 & 2) != 0) {
        unint64_t v240 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v240 = &v163[-((*v163 >> 2) & 0xFLL)];
      }
      uint64_t v244 = v240[2];
      if (v244)
      {
        uint64_t v245 = *(uint64_t **)(v244 + 8);
        uint64_t v248 = *v245;
        uint64_t v246 = (llvm::raw_ostream *)(v245 + 3);
        uint64_t v247 = v248;
      }
      else
      {
        uint64_t v246 = 0;
        uint64_t v247 = 0;
      }
      if ((*v163 & 2) != 0) {
        unint64_t v340 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v340 = &v163[-((*v163 >> 2) & 0xFLL)];
      }
      int64_t v339 = (llvm::DIExpression *)v340[3];
LABEL_460:
      unsigned int v341 = *((_DWORD *)a2 + 4);
      unint64_t v342 = "line";
      size_t v343 = 4;
LABEL_587:
      char v424 = 1;
LABEL_591:
      goto LABEL_793;
    case 0x21:
      writeDIArgList(v5, a2, (_anonymous_namespace_::AsmWriterContext *)a3);
      return;
    case 0x22:
      size_t v40 = (void *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v40 > 0xDuLL)
      {
        qmemcpy(v40, "!DIStringType(", 14);
        *((void *)v5 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIStringType(", 0xEuLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      if (*((_WORD *)a2 + 1) != 18) {
      int64_t v166 = (void *)((char *)a2 - 16);
      }
      unint64_t v165 = *((void *)a2 - 2);
      if ((v165 & 2) != 0) {
        unint64_t v167 = (void *)*((void *)a2 - 4);
      }
      else {
        unint64_t v167 = &v166[-((v165 >> 2) & 0xF)];
      }
      uint64_t v221 = v167[2];
      if (v221)
      {
        v222 = *(uint64_t **)(v221 + 8);
        uint64_t v225 = *v222;
        uint64_t v223 = (llvm::raw_ostream *)(v222 + 3);
        uint64_t v224 = v225;
      }
      else
      {
        uint64_t v223 = 0;
        uint64_t v224 = 0;
      }
      if ((*v166 & 2) != 0) {
        uint64_t v329 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v329 = &v166[-((*v166 >> 2) & 0xFLL)];
      }
      if ((*v166 & 2) != 0) {
        v330 = (void *)*((void *)a2 - 4);
      }
      else {
        v330 = &v166[-((*v166 >> 2) & 0xFLL)];
      }
      if ((*v166 & 2) != 0) {
        v331 = (void *)*((void *)a2 - 4);
      }
      else {
        v331 = &v166[-((*v166 >> 2) & 0xFLL)];
      }
      goto LABEL_793;
    case 0x23:
      uint64_t v41 = *((void *)v5 + 4);
      if ((unint64_t)(*((void *)v5 + 3) - v41) > 0x12)
      {
        *(_DWORD *)(v41 + 15) = 677734254;
        *(_OWORD *)uint64_t v41 = *(_OWORD *)"!DIGenericSubrange(";
        *((void *)v5 + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!DIGenericSubrange(", 0x13uLL);
      }
      p_s = v5;
      LOBYTE(v544) = 1;
      __s = ", ";
      v546 = (uint64_t *)a3;
      uint64_t v169 = (void *)((char *)a2 - 16);
      unint64_t v168 = *((void *)a2 - 2);
      if ((v168 & 2) != 0) {
        size_t v170 = (llvm::DIExpression **)*((void *)a2 - 4);
      }
      else {
        size_t v170 = (llvm::DIExpression **)&v169[-((v168 >> 2) & 0xF)];
      }
      v226 = *v170;
      if (*v170
        && *(unsigned char *)v226 == 6
        && ((uint64_t isConstant = llvm::DIExpression::isConstant(v226), (isConstant & 0xFF00000000) != 0)
          ? (BOOL v228 = isConstant == 0)
          : (BOOL v228 = 0),
            v228))
      {
      }
      else
      {
      }
      if ((*v169 & 2) != 0) {
        v229 = (void *)*((void *)a2 - 4);
      }
      else {
        v229 = &v169[-((*v169 >> 2) & 0xFLL)];
      }
      size_t v241 = (llvm::DIExpression *)v229[1];
      if (v241
        && *(unsigned char *)v241 == 6
        && (uint64_t v242 = llvm::DIExpression::isConstant(v241), (v242 & 0xFF00000000) != 0)
        && !v242)
      {
      }
      else
      {
      }
      if ((*v169 & 2) != 0) {
        uint64_t v243 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v243 = &v169[-((*v169 >> 2) & 0xFLL)];
      }
      unint64_t v249 = (llvm::DIExpression *)v243[2];
      if (v249
        && *(unsigned char *)v249 == 6
        && (uint64_t v250 = llvm::DIExpression::isConstant(v249), (v250 & 0xFF00000000) != 0)
        && !v250)
      {
      }
      else
      {
      }
      if ((*v169 & 2) != 0) {
        uint64_t v251 = (void *)*((void *)a2 - 4);
      }
      else {
        uint64_t v251 = &v169[-((*v169 >> 2) & 0xFLL)];
      }
      int64x2_t v252 = (llvm::DIExpression *)v251[3];
      if (v252
        && *(unsigned char *)v252 == 6
        && (uint64_t v253 = llvm::DIExpression::isConstant(v252), (v253 & 0xFF00000000) != 0)
        && !v253)
      {
        unint64_t v254 = *(void *)(*((void *)v252 + 2) + 8);
LABEL_832:
      }
      else
      {
        int v125 = "stride";
        size_t v126 = 6;
        uint64_t v124 = v252;
LABEL_651:
        char v455 = 1;
LABEL_652:
      }
      goto LABEL_793;
    default:
      uint64_t v9 = (_WORD *)*((void *)v5 + 4);
      if (*((void *)v5 + 3) - (void)v9 > 1uLL)
      {
        _WORD *v9 = 31521;
        *((void *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, "!{", 2uLL);
      }
      unsigned __int8 v43 = (unint64_t *)((char *)a2 - 16);
      unint64_t v42 = *((void *)a2 - 2);
      if ((v42 & 2) != 0) {
        unsigned int v44 = *((_DWORD *)a2 - 6);
      }
      else {
        unsigned int v44 = (v42 >> 6) & 0xF;
      }
      if (!v44) {
        goto LABEL_135;
      }
      unint64_t v78 = 0;
      uint64_t v79 = 8 * v44 - 8;
      if ((v42 & 2) == 0) {
        goto LABEL_123;
      }
LABEL_122:
      for (char i = (unint64_t *)*((void *)a2 - 4); ; char i = &v43[-((v42 >> 2) & 0xF)])
      {
        char v82 = (llvm::DIExpression *)i[v78 / 8];
        if (v82)
        {
          if (*(unsigned __int8 *)v82 - 3 >= 0xFFFFFFFE)
          {
            int v84 = (llvm::Type **)*((void *)v82 + 16);
            uint64_t v85 = (unsigned char *)*((void *)v5 + 4);
            if ((unint64_t)v85 >= *((void *)v5 + 3))
            {
              llvm::raw_ostream::write(v5, 32);
            }
            else
            {
              *((void *)v5 + 4) = v85 + 1;
              *uint64_t v85 = 32;
            }
            WriteAsOperandInternal(v5, (uint64_t ***)v84, a3);
          }
          else
          {
            WriteAsOperandInternal(v5, v82, (uint64_t)a3);
            (*(void (**)(llvm::raw_ostream **, llvm::DIExpression *))*a3)(a3, v82);
          }
        }
        else
        {
          uint64_t v83 = (_DWORD *)*((void *)v5 + 4);
          if (*((void *)v5 + 3) - (void)v83 > 3uLL)
          {
            *uint64_t v83 = 1819047278;
            *((void *)v5 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(v5, "null", 4uLL);
          }
        }
        if (v79 == v78) {
          break;
        }
        size_t v80 = (_WORD *)*((void *)v5 + 4);
        if (*((void *)v5 + 3) - (void)v80 > 1uLL)
        {
          *size_t v80 = 8236;
          *((void *)v5 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v5, ", ", 2uLL);
        }
        unint64_t v42 = *v43;
        v78 += 8;
        if ((*v43 & 2) != 0) {
          goto LABEL_122;
        }
LABEL_123:
        ;
      }
LABEL_135:
      char v86 = (char *)*((void *)v5 + 4);
      if (*((char **)v5 + 3) != v86)
      {
        char v87 = 125;
        goto LABEL_795;
      }
      uint64_t v21 = "}";
      char v22 = v5;
      size_t v23 = 1;
LABEL_319:
      llvm::raw_ostream::write(v22, v21, v23);
      return;
  }
}

llvm::raw_ostream *anonymous namespace'::MDFieldPrinter::printTag(uint64_t a1, uint64_t a2)
{
  int v4 = *(llvm::raw_ostream **)a1;
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  else {
    int v4 = llvm::raw_ostream::operator<<(v4, *(char **)(a1 + 16));
  }
  uint64_t v5 = *((void *)v4 + 4);
  if ((unint64_t)(*((void *)v4 + 3) - v5) > 4)
  {
    *(unsigned char *)(v5 + 4) = 32;
    *(_DWORD *)uint64_t v5 = 979853684;
    *((void *)v4 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v4, "tag: ", 5uLL);
  }
  uint64_t v7 = llvm::dwarf::TagString((llvm::dwarf *)*(unsigned __int16 *)(a2 + 2));
  size_t v8 = *(llvm::raw_ostream **)a1;
  if (v6)
  {
    return llvm::raw_ostream::operator<<(v8, v7, v6);
  }
  else
  {
    unint64_t v10 = *(unsigned __int16 *)(a2 + 2);
    return llvm::write_integer(v8, v10, 0, 0);
  }
}

llvm::raw_ostream *anonymous namespace'::MDFieldPrinter::printString(llvm::raw_ostream *result, const void *a2, size_t a3, llvm::raw_ostream *a4, uint64_t a5, int a6)
{
  unint64_t v10 = result;
  if (!a6 || a5)
  {
    unsigned int v11 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)v10 + 8)) {
      *((unsigned char *)v10 + 8) = 0;
    }
    else {
      unsigned int v11 = llvm::raw_ostream::operator<<(v11, *((char **)v10 + 2));
    }
    uint64_t v12 = llvm::raw_ostream::operator<<(v11, a2, a3);
    uint64_t v13 = *((void *)v12 + 4);
    if ((unint64_t)(*((void *)v12 + 3) - v13) > 2)
    {
      *(unsigned char *)(v13 + 2) = 34;
      *(_WORD *)uint64_t v13 = 8250;
      *((void *)v12 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v12, ": \"", 3uLL);
    }
    llvm::printEscapedString(a4, a5, *(llvm::raw_ostream **)v10);
    uint64_t result = *(llvm::raw_ostream **)v10;
    size_t v14 = *(unsigned char **)(*(void *)v10 + 32);
    if (*(unsigned char **)(*(void *)v10 + 24) == v14)
    {
      return llvm::raw_ostream::write(result, "\"", 1uLL);
    }
    else
    {
      *size_t v14 = 34;
      ++*((void *)result + 4);
    }
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::MDFieldPrinter::printInt<long long>(uint64_t a1, const void *a2, size_t __n, unint64_t a4)
{
  size_t v8 = *(llvm::raw_ostream **)a1;
  if (*(unsigned char *)(a1 + 8)) {
    *(unsigned char *)(a1 + 8) = 0;
  }
  else {
    size_t v8 = llvm::raw_ostream::operator<<(v8, *(char **)(a1 + 16));
  }
  uint64_t v9 = llvm::raw_ostream::operator<<(v8, a2, __n);
  unint64_t v10 = (_WORD *)*((void *)v9 + 4);
  if (*((void *)v9 + 3) - (void)v10 > 1uLL)
  {
    *unint64_t v10 = 8250;
    *((void *)v9 + 4) += 2;
  }
  else
  {
    uint64_t v9 = llvm::raw_ostream::write(v9, ": ", 2uLL);
  }
  return llvm::write_integer(v9, a4, 0, 0);
}

void anonymous namespace'::AsmWriterContext::getEmpty(_anonymous_namespace_::AsmWriterContext *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_33, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_33))
  {
    qword_26B41C9A0 = (uint64_t)&unk_270DC2C20;
    unk_26B41C9A8 = 0;
    qword_26B41C9B0 = 0;
    unk_26B41C9B8 = 0;
    __cxa_guard_release(&_MergedGlobals_33);
  }
}

llvm::raw_ostream *anonymous namespace'::MDFieldPrinter::printInt<unsigned long long>(llvm::raw_ostream *result, const void *a2, size_t __n, unint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = result;
    size_t v8 = *(llvm::raw_ostream **)result;
    if (*((unsigned char *)v7 + 8)) {
      *((unsigned char *)v7 + 8) = 0;
    }
    else {
      size_t v8 = llvm::raw_ostream::operator<<(v8, *((char **)v7 + 2));
    }
    uint64_t v9 = llvm::raw_ostream::operator<<(v8, a2, __n);
    unint64_t v10 = (_WORD *)*((void *)v9 + 4);
    if (*((void *)v9 + 3) - (void)v10 > 1uLL)
    {
      *unint64_t v10 = 8250;
      *((void *)v9 + 4) += 2;
    }
    else
    {
      uint64_t v9 = llvm::raw_ostream::write(v9, ": ", 2uLL);
    }
    return write_unsigned<unsigned long>(v9, a4, 0, 0, 0);
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::MDFieldPrinter::printDwarfEnum<unsigned int,llvm::StringRef (*)(unsigned int)>(llvm::raw_ostream *result, const void *a2, size_t __n, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  if (a4)
  {
    uint64_t v9 = (uint64_t)result;
    unint64_t v10 = *(llvm::raw_ostream **)result;
    if (*(unsigned char *)(v9 + 8)) {
      *(unsigned char *)(v9 + 8) = 0;
    }
    else {
      unint64_t v10 = llvm::raw_ostream::operator<<(v10, *(char **)(v9 + 16));
    }
    unsigned int v11 = llvm::raw_ostream::operator<<(v10, a2, __n);
    uint64_t v12 = (_WORD *)*((void *)v11 + 4);
    if (*((void *)v11 + 3) - (void)v12 > 1uLL)
    {
      *uint64_t v12 = 8250;
      *((void *)v11 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v11, ": ", 2uLL);
    }
    size_t v14 = (const void *)a5(a4);
    char v15 = *(llvm::raw_ostream **)v9;
    if (v13)
    {
      return llvm::raw_ostream::operator<<(v15, v14, v13);
    }
    else
    {
      return write_unsigned<unsigned long>(v15, a4, 0, 0, 0);
    }
  }
  return result;
}

void anonymous namespace'::MDFieldPrinter::printDIFlags(uint64_t a1, uint64_t a2)
{
  void v18[4] = *MEMORY[0x263EF8340];
  if (a2)
  {
    int v4 = *(llvm::raw_ostream **)a1;
    if (*(unsigned char *)(a1 + 8)) {
      *(unsigned char *)(a1 + 8) = 0;
    }
    else {
      int v4 = llvm::raw_ostream::operator<<(v4, *(char **)(a1 + 16));
    }
    uint64_t v5 = *((void *)v4 + 4);
    if ((unint64_t)(*((void *)v4 + 3) - v5) > 4)
    {
      *(unsigned char *)(v5 + 4) = 115;
      *(_DWORD *)uint64_t v5 = 1734437990;
      size_t v6 = (_WORD *)(*((void *)v4 + 4) + 5);
      *((void *)v4 + 4) = v6;
    }
    else
    {
      int v4 = llvm::raw_ostream::write(v4, "flags", 5uLL);
      size_t v6 = (_WORD *)*((void *)v4 + 4);
    }
    if (*((void *)v4 + 3) - (void)v6 > 1uLL)
    {
      _WORD *v6 = 8250;
      *((void *)v4 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v4, ": ", 2uLL);
    }
    __darwin_ct_rune_t v16 = v18;
    uint64_t v17 = 0x800000000;
    unsigned int v7 = llvm::DINode::splitFlags(a2, (unsigned int *)&v16);
    if (v17)
    {
      char v8 = 0;
      uint64_t v9 = (int *)v16;
      uint64_t v10 = 4 * v17;
      do
      {
        FlagString = llvm::DINode::getFlagString(*v9);
        size_t v13 = v12;
        size_t v14 = *(llvm::raw_ostream **)a1;
        if (v8) {
          size_t v14 = llvm::raw_ostream::operator<<(v14, " | ", 3uLL);
        }
        llvm::raw_ostream::operator<<(v14, FlagString, v13);
        ++v9;
        char v8 = 1;
        v10 -= 4;
      }
      while (v10);
      if (!v7 && v17) {
        goto LABEL_21;
      }
      char v15 = llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)a1, " | ", 3uLL);
    }
    else
    {
      char v15 = *(llvm::raw_ostream **)a1;
    }
    write_unsigned<unsigned long>(v15, v7, 0, 0, 0);
LABEL_21:
    if (v16 != v18) {
      free(v16);
    }
  }
}

uint64_t llvm::DISubprogram::getTargetFuncName(llvm::DISubprogram *this)
{
  unint64_t v1 = *((void *)this - 2);
  if ((v1 & 2) != 0)
  {
    if (*((_DWORD *)this - 6) <= 0xCu) {
      return 0;
    }
    uint64_t v2 = (char *)*((void *)this - 4);
  }
  else
  {
    if ((*((void *)this - 2) & 0x3C0uLL) <= 0x300) {
      return 0;
    }
    uint64_t v2 = (char *)this - 8 * ((v1 >> 2) & 0xF) - 16;
  }
  uint64_t v3 = *((void *)v2 + 12);
  if (v3) {
    return *(void *)(v3 + 8) + 24;
  }
  return 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>,llvm::StructType *,unsigned int,llvm::DenseMapInfo<llvm::StructType *,void>,llvm::detail::DenseMapPair<llvm::StructType *,unsigned int>>::find(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 16 * a2);
  }
  LODWORD(v3) = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  int v4 = (uint64_t *)(a1 + 16 * v3);
  uint64_t v5 = *v4;
  if (*v4 != a3)
  {
    int v6 = 1;
    while (v5 != -4096)
    {
      int v7 = v3 + v6++;
      uint64_t v3 = v7 & (a2 - 1);
      uint64_t v5 = *(void *)(a1 + 16 * v3);
      if (v5 == a3) {
        return (uint64_t *)(a1 + 16 * v3);
      }
    }
    return (uint64_t *)(a1 + 16 * a2);
  }
  return v4;
}

llvm::raw_ostream *WriteOptimizationInfo(llvm::raw_ostream *a1, const llvm::User *a2)
{
  uint64_t result = (llvm::raw_ostream *)llvm::FPMathOperator::classof((uint64_t)a2);
  if (a2 && result)
  {
    int v5 = *((unsigned __int8 *)a2 + 17) >> 1;
    if (v5 == 127) {
      int v5 = -1;
    }
    int v21 = v5;
    uint64_t result = llvm::FastMathFlags::print((llvm::raw_ostream *)&v21, a1);
  }
  uint64_t v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 >= 0x1C)
  {
    HIDWORD(v8) = v6 - 41;
    LODWORD(v8) = v6 - 41;
    unsigned int v7 = v8 >> 1;
    BOOL v9 = v7 > 6;
    int v10 = (1 << v7) & 0x47;
    if (!v9 && v10 != 0) {
      goto LABEL_21;
    }
    if (v6 > 0x3E) {
      return result;
    }
    if (((1 << v6) & 0xC1800000000000) == 0)
    {
      if (v6 != 62) {
        return result;
      }
LABEL_37:
      if ((*((unsigned char *)a2 + 17) & 2) == 0) {
        return result;
      }
      uint64_t v19 = " inbounds";
      size_t v20 = 9;
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  if (v6 != 5) {
    return result;
  }
  uint64_t v12 = *((unsigned __int16 *)a2 + 9);
  HIDWORD(v14) = v12 - 13;
  LODWORD(v14) = v12 - 13;
  unsigned int v13 = v14 >> 1;
  BOOL v9 = v13 > 6;
  int v15 = (1 << v13) & 0x47;
  if (v9 || v15 == 0)
  {
    if (v12 > 0x22) {
      return result;
    }
    if (((1 << v12) & 0xC180000) == 0)
    {
      if (v12 != 34) {
        return result;
      }
      goto LABEL_37;
    }
LABEL_34:
    if ((*((unsigned char *)a2 + 17) & 2) == 0) {
      return result;
    }
    uint64_t v19 = " exact";
    size_t v20 = 6;
    goto LABEL_29;
  }
LABEL_21:
  char v17 = *((unsigned char *)a2 + 17);
  if ((v17 & 2) != 0)
  {
    uint64_t v18 = (_DWORD *)*((void *)a1 + 4);
    if (*((void *)a1 + 3) - (void)v18 > 3uLL)
    {
      *uint64_t v18 = 2004184608;
      *((void *)a1 + 4) += 4;
    }
    else
    {
      uint64_t result = llvm::raw_ostream::write(a1, " nuw", 4uLL);
    }
    char v17 = *((unsigned char *)a2 + 17);
  }
  if ((v17 & 4) != 0)
  {
    uint64_t v19 = " nsw";
    size_t v20 = 4;
LABEL_29:
    return llvm::raw_ostream::operator<<(a1, v19, v20);
  }
  return result;
}

llvm::raw_ostream *maybePrintCallAddrSpace(llvm::raw_ostream *result, const llvm::Instruction *a2, llvm::raw_ostream *this)
{
  if (!result)
  {
    unsigned int v7 = (void *)*((void *)this + 4);
    if (*((void *)this + 3) - (void)v7 > 0x17uLL)
    {
      qmemcpy(v7, " <cannot get addrspace!>", 24);
      uint64_t v12 = *((void *)this + 4) + 24;
      goto LABEL_15;
    }
    unint64_t v8 = " <cannot get addrspace!>";
    BOOL v9 = this;
    size_t v10 = 24;
    goto LABEL_18;
  }
  unsigned int v4 = *(_DWORD *)(*(void *)result + 8);
  if ((v4 & 0xFE) == 0x12) {
    unsigned int v4 = *(_DWORD *)(**(void **)(*(void *)result + 16) + 8);
  }
  if (v4 > 0xFF || (uint64_t result = (llvm::raw_ostream *)getModuleFromVal((uint64_t)a2)) == 0 || *((_DWORD *)result + 67))
  {
    unint64_t v5 = v4 >> 8;
    uint64_t v6 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v6) > 0xA)
    {
      *(_DWORD *)(v6 + 7) = 677733217;
      *(void *)uint64_t v6 = *(void *)" addrspace(";
      *((void *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, " addrspace(", 0xBuLL);
    }
    uint64_t result = write_unsigned<unsigned long>(this, v5, 0, 0, 0);
    unsigned int v11 = (unsigned char *)*((void *)this + 4);
    if (*((unsigned char **)this + 3) != v11)
    {
      *unsigned int v11 = 41;
      uint64_t v12 = *((void *)this + 4) + 1;
LABEL_15:
      *((void *)this + 4) = v12;
      return result;
    }
    unint64_t v8 = ")";
    BOOL v9 = this;
    size_t v10 = 1;
LABEL_18:
    return llvm::raw_ostream::write(v9, v8, v10);
  }
  return result;
}

void anonymous namespace'::AssemblyWriter::writeParamOperand(uint64_t a1, llvm::Type **a2, const llvm::AttributeSet *a3)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v6 = *(uint64_t ***)a1;
      unsigned int v7 = *(unsigned char **)(*(void *)a1 + 32);
      if ((unint64_t)v7 >= *(void *)(*(void *)a1 + 24))
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v6, 32);
      }
      else
      {
        _OWORD v6[4] = (uint64_t *)(v7 + 1);
        unsigned char *v7 = 32;
      }
    }
    size_t v10 = *(uint64_t ***)a1;
    unsigned int v11 = *(unsigned char **)(*(void *)a1 + 32);
    if ((unint64_t)v11 >= *(void *)(*(void *)a1 + 24))
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v10, 32);
    }
    else
    {
      void v10[4] = (uint64_t *)(v11 + 1);
      *unsigned int v11 = 32;
    }
    uint64_t v12 = *(llvm::raw_ostream **)(a1 + 32);
    unsigned int v13 = *(uint64_t ***)a1;
    unint64_t v14 = *(llvm::raw_ostream **)(a1 + 8);
    v15[0] = (llvm::raw_ostream *)&unk_270DC2C20;
    v15[1] = (llvm::raw_ostream *)(a1 + 40);
    v15[2] = v12;
    v15[3] = v14;
    WriteAsOperandInternal((llvm::raw_ostream *)v13, (uint64_t ***)a2, v15);
  }
  else
  {
    unint64_t v8 = *(uint64_t ***)a1;
    BOOL v9 = *(void **)(*(void *)a1 + 32);
    if (*(void *)(*(void *)a1 + 24) - (void)v9 > 0xEuLL)
    {
      qmemcpy(v9, "<null operand!>", 15);
      void v8[4] = (uint64_t *)((char *)v8[4] + 15);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v8, "<null operand!>", 0xFuLL);
    }
  }
}

llvm::raw_ostream *anonymous namespace'::AssemblyWriter::writeOperandBundles(llvm::raw_ostream *this, const llvm::CallBase *a2)
{
  int v2 = *((_DWORD *)a2 + 5);
  if (v2 < 0 && (*((void *)a2 - 4 * (v2 & 0x7FFFFFF) - 1) & 0xFFFFFFFF0) != 0)
  {
    uint64_t v4 = (uint64_t)this;
    unint64_t v5 = *(llvm::raw_ostream **)this;
    uint64_t v6 = *((void *)v5 + 4);
    if ((unint64_t)(*((void *)v5 + 3) - v6) > 2)
    {
      *(unsigned char *)(v6 + 2) = 32;
      *(_WORD *)uint64_t v6 = 23328;
      *((void *)v5 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v5, " [ ", 3uLL);
    }
    int v7 = *((_DWORD *)a2 + 5);
    if (v7 < 0)
    {
      unint64_t v8 = *((void *)a2 - 4 * (v7 & 0x7FFFFFF) - 1);
      if ((v8 & 0xFFFFFFFF0) != 0)
      {
        uint64_t v9 = 0;
        uint64_t v38 = (v8 >> 4);
        char v10 = 1;
        do
        {
          uint64_t v11 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
          uint64_t v12 = (char *)a2 + 16 * v9 - *((void *)a2 - 4 * v11 - 1) + -32 * v11 - 8;
          uint64_t v13 = *(unsigned int *)((char *)a2 + 16 * v9 - *((void *)a2 - 4 * v11 - 1) + -32 * v11);
          uint64_t v14 = *((unsigned int *)v12 + 3);
          int v15 = *(uint64_t **)v12;
          if ((v10 & 1) == 0)
          {
            __darwin_ct_rune_t v16 = *(llvm::raw_ostream **)v4;
            char v17 = *(_WORD **)(*(void *)v4 + 32);
            if (*(void *)(*(void *)v4 + 24) - (void)v17 > 1uLL)
            {
              _WORD *v17 = 8236;
              *((void *)v16 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v16, ", ", 2uLL);
            }
          }
          uint64_t v18 = *(llvm::raw_ostream **)v4;
          uint64_t v19 = *(unsigned char **)(*(void *)v4 + 32);
          if ((unint64_t)v19 >= *(void *)(*(void *)v4 + 24))
          {
            llvm::raw_ostream::write(v18, 34);
          }
          else
          {
            *((void *)v18 + 4) = v19 + 1;
            *uint64_t v19 = 34;
          }
          llvm::printEscapedString((llvm::raw_ostream *)(v15 + 2), *v15, *(llvm::raw_ostream **)v4);
          size_t v20 = *(llvm::raw_ostream **)v4;
          int v21 = *(unsigned char **)(*(void *)v4 + 32);
          if ((unint64_t)v21 >= *(void *)(*(void *)v4 + 24))
          {
            llvm::raw_ostream::write(v20, 34);
          }
          else
          {
            *((void *)v20 + 4) = v21 + 1;
            *int v21 = 34;
          }
          char v22 = *(llvm::raw_ostream **)v4;
          size_t v23 = *(unsigned char **)(*(void *)v4 + 32);
          if ((unint64_t)v23 >= *(void *)(*(void *)v4 + 24))
          {
            llvm::raw_ostream::write(v22, 40);
          }
          else
          {
            *((void *)v22 + 4) = v23 + 1;
            *size_t v23 = 40;
          }
          unint64_t v24 = *(llvm::raw_ostream **)(v4 + 32);
          uint64_t v25 = *(llvm::raw_ostream **)(v4 + 8);
          v39[0] = (llvm::raw_ostream *)&unk_270DC2C20;
          v39[1] = (llvm::raw_ostream *)(v4 + 40);
          v39[2] = v24;
          v39[3] = v25;
          if (v13 != v14)
          {
            uint64_t v26 = (llvm::Type ***)((char *)a2 + 32 * v13 + -32 * v11);
            char v27 = 1;
            uint64_t v28 = 32 * v14 - 32 * v13;
            do
            {
              if ((v27 & 1) == 0)
              {
                int v29 = *(llvm::raw_ostream **)v4;
                uint64_t v30 = *(_WORD **)(*(void *)v4 + 32);
                if (*(void *)(*(void *)v4 + 24) - (void)v30 > 1uLL)
                {
                  *uint64_t v30 = 8236;
                  *((void *)v29 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v29, ", ", 2uLL);
                }
              }
              if (*v26)
              {
                uint64_t v31 = *(llvm::raw_ostream **)v4;
                int v32 = *(unsigned char **)(*(void *)v4 + 32);
                if (*(unsigned char **)(*(void *)v4 + 24) == v32)
                {
                  llvm::raw_ostream::write(v31, " ", 1uLL);
                }
                else
                {
                  unsigned char *v32 = 32;
                  ++*((void *)v31 + 4);
                }
                WriteAsOperandInternal(*(llvm::raw_ostream **)v4, (uint64_t ***)*v26, v39);
              }
              else
              {
                uint64_t v33 = *(llvm::raw_ostream **)v4;
                uint64_t v34 = *(void **)(*(void *)v4 + 32);
                if (*(void *)(*(void *)v4 + 24) - (void)v34 > 0x15uLL)
                {
                  qmemcpy(v34, "<null operand bundle!>", 22);
                  *((void *)v33 + 4) += 22;
                }
                else
                {
                  llvm::raw_ostream::write(v33, "<null operand bundle!>", 0x16uLL);
                }
              }
              char v27 = 0;
              v26 += 4;
              v28 -= 32;
            }
            while (v28);
          }
          uint64_t v35 = *(llvm::raw_ostream **)v4;
          long long v36 = *(unsigned char **)(*(void *)v4 + 32);
          if ((unint64_t)v36 >= *(void *)(*(void *)v4 + 24))
          {
            llvm::raw_ostream::write(v35, 41);
          }
          else
          {
            *((void *)v35 + 4) = v36 + 1;
            *long long v36 = 41;
          }
          char v10 = 0;
          ++v9;
        }
        while (v9 != v38);
      }
    }
    this = *(llvm::raw_ostream **)v4;
    uint64_t v37 = *(_WORD **)(*(void *)v4 + 32);
    if (*(void *)(*(void *)v4 + 24) - (void)v37 > 1uLL)
    {
      _WORD *v37 = 23840;
      *((void *)this + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(this, " ]", 2uLL);
    }
  }
  return this;
}

llvm::raw_ostream *anonymous namespace'::AssemblyWriter::writeAtomic(llvm::raw_ostream *result, uint64_t a2, int a3, unsigned int a4)
{
  if (a3)
  {
    unint64_t v5 = (llvm::raw_ostream **)result;
    uint64_t v6 = *v5;
    int v7 = (unsigned char *)*((void *)*v5 + 4);
    if (*((unsigned char **)*v5 + 3) == v7)
    {
      uint64_t v6 = llvm::raw_ostream::write(v6, " ", 1uLL);
    }
    else
    {
      unsigned char *v7 = 32;
      ++*((void *)v6 + 4);
    }
    unint64_t v8 = llvm::toIRString(llvm::AtomicOrdering)::names[a3];
    return llvm::raw_ostream::operator<<(v6, v8);
  }
  return result;
}

llvm::raw_ostream *PrintShuffleMask(llvm::raw_ostream *this, uint64_t a2, int *a3, unint64_t a4)
{
  uint64_t v8 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v8) > 2)
  {
    *(unsigned char *)(v8 + 2) = 60;
    *(_WORD *)uint64_t v8 = 8236;
    *((void *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, ", <", 3uLL);
  }
  if (*(unsigned char *)(a2 + 8) == 19)
  {
    uint64_t v9 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v9) > 8)
    {
      *(unsigned char *)(v9 + 8) = 32;
      *(void *)uint64_t v9 = *(void *)"vscale x ";
      *((void *)this + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(this, "vscale x ", 9uLL);
    }
  }
  write_unsigned<unsigned long>(this, a4, 0, 0, 0);
  char v10 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v10 <= 7uLL)
  {
    llvm::raw_ostream::write(this, " x i32> ", 8uLL);
    if (a4) {
      goto LABEL_10;
    }
LABEL_15:
    uint64_t v12 = "zeroinitializer";
    size_t v13 = 15;
    goto LABEL_37;
  }
  *char v10 = 0x203E323369207820;
  *((void *)this + 4) += 8;
  if (!a4) {
    goto LABEL_15;
  }
LABEL_10:
  uint64_t v11 = 4 * a4;
  uint64_t v12 = "zeroinitializer";
  size_t v13 = 15;
  uint64_t v14 = v11;
  int v15 = a3;
  while (!*v15)
  {
    ++v15;
    v14 -= 4;
    if (!v14) {
      goto LABEL_37;
    }
  }
  size_t v13 = 5;
  uint64_t v16 = v11;
  char v17 = a3;
  uint64_t v12 = "undef";
  while (*v17 == -1)
  {
    ++v17;
    v16 -= 4;
    if (!v16) {
      goto LABEL_37;
    }
  }
  uint64_t v18 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v18)
  {
    llvm::raw_ostream::write(this, "<", 1uLL);
  }
  else
  {
    *uint64_t v18 = 60;
    ++*((void *)this + 4);
  }
  size_t v13 = 1;
  uint64_t v12 = ">";
  char v19 = 1;
  do
  {
    unint64_t v20 = *a3;
    int v21 = (_WORD *)*((void *)this + 4);
    if ((v19 & 1) == 0)
    {
      if (*((void *)this + 3) - (void)v21 > 1uLL)
      {
        *int v21 = 8236;
        int v21 = (_WORD *)(*((void *)this + 4) + 2);
        *((void *)this + 4) = v21;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        int v21 = (_WORD *)*((void *)this + 4);
      }
    }
    if (*((void *)this + 3) - (void)v21 > 3uLL)
    {
      *(_DWORD *)int v21 = 540160873;
      *((void *)this + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(this, "i32 ", 4uLL);
    }
    if (v20 == -1)
    {
      uint64_t v22 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v22) > 4)
      {
        *(unsigned char *)(v22 + 4) = 102;
        *(_DWORD *)uint64_t v22 = 1701080693;
        *((void *)this + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(this, "undef", 5uLL);
      }
    }
    else
    {
      llvm::write_integer(this, v20, 0, 0);
    }
    char v19 = 0;
    ++a3;
    v11 -= 4;
  }
  while (v11);
LABEL_37:
  return llvm::raw_ostream::operator<<(this, v12, v13);
}

uint64_t **anonymous namespace'::AssemblyWriter::printInfoComment(uint64_t ***this, const llvm::Value *a2)
{
  if (llvm::GCRelocateInst::classof((uint64_t)a2))
  {
    uint64_t v4 = *this;
    unint64_t v5 = (char *)(*this)[4];
    if ((unint64_t)((char *)(*this)[3] - v5) > 3)
    {
      *(_DWORD *)unint64_t v5 = 673200928;
      v4[4] = (uint64_t *)((char *)v4[4] + 4);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v4, " ; (", 4uLL);
    }
    BasePtr = (llvm::Type **)llvm::GCRelocateInst::getBasePtr(a2);
    int v7 = *this;
    uint64_t v8 = (char *)(*this)[4];
    if ((unint64_t)((char *)(*this)[3] - v8) > 1)
    {
      *(_WORD *)uint64_t v8 = 8236;
      void v7[4] = (uint64_t *)((char *)v7[4] + 2);
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v7, ", ", 2uLL);
    }
    DerivedPtr = (llvm::Type **)llvm::GCRelocateInst::getDerivedPtr(a2);
    char v10 = *this;
    uint64_t v11 = (*this)[4];
    if ((*this)[3] == v11)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v10, ")", 1uLL);
    }
    else
    {
      *(unsigned char *)uint64_t v11 = 41;
      void v10[4] = (uint64_t *)((char *)v10[4] + 1);
    }
  }
  uint64_t result = this[28];
  if (result)
  {
    size_t v13 = (uint64_t (*)(void))(*result)[6];
    return (uint64_t **)v13();
  }
  return result;
}

llvm::raw_ostream *anonymous namespace'::AssemblyWriter::writeSyncScope(llvm::raw_ostream *result, uint64_t a2, unsigned int a3)
{
  if (a3 != 1)
  {
    uint64_t v4 = (llvm::raw_ostream **)result;
    if (!*((_DWORD *)result + 116)) {
      llvm::LLVMContextImpl::getSyncScopeNames(a2, (void *)result + 57);
    }
    unint64_t v5 = *v4;
    uint64_t v6 = *((void *)*v4 + 4);
    if ((unint64_t)(*((void *)*v4 + 3) - v6) > 0xB)
    {
      *(_DWORD *)(v6 + 8) = 573072752;
      *(void *)uint64_t v6 = *(void *)" syncscope(\"";
      *((void *)v5 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v5, " syncscope(\"", 0xCuLL);
    }
    uint64_t v7 = (uint64_t)v4[57] + 16 * a3;
    llvm::printEscapedString(*(llvm::raw_ostream **)v7, *(void *)(v7 + 8), *v4);
    uint64_t result = *v4;
    uint64_t v8 = (_WORD *)*((void *)*v4 + 4);
    if (*((void *)*v4 + 3) - (void)v8 > 1uLL)
    {
      _WORD *v8 = 10530;
      *((void *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, "\")", 2uLL);
    }
  }
  return result;
}

void anonymous namespace'::AsmWriterContext::~AsmWriterContext(_anonymous_namespace_::AsmWriterContext *this)
{
}

void anonymous namespace'::MDTreeAsmWriterContext::onWriteMetadataAsOperand(uint64_t a1, unsigned __int8 *a2)
{
  llvm::SmallPtrSetImpl<llvm::Value *>::insert((llvm::SmallPtrSetImplBase *)(a1 + 184), a2, (uint64_t)&v25);
  if ((_BYTE)v27)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v24 = 0;
    int v15 = 0;
    char v19 = 0;
    uint64_t v20 = 0;
    int v21 = 1;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = 0;
    uint64_t v14 = &unk_270DBD6E0;
    uint64_t v22 = __p;
    llvm::raw_ostream::SetUnbuffered(&v14);
    unint64_t v4 = (*(_DWORD *)(a1 + 32) + 1);
    *(_DWORD *)(a1 + 32) = v4;
    uint64_t v25 = (void *)v4;
    uint64_t v26 = "";
    uint64_t v5 = *(unsigned int *)(a1 + 48);
    if (v5 >= *(_DWORD *)(a1 + 52))
    {
      llvm::SmallVectorTemplateBase<std::pair<unsigned int,std::string>,false>::growAndEmplaceBack<std::pair<unsigned int,char const*>>(a1 + 40, (uint64_t)&v25);
      unsigned int v7 = *(_DWORD *)(a1 + 48) - 1;
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 40) + 32 * v5;
      *(_DWORD *)uint64_t v6 = v4;
      std::string::basic_string[abi:nn180100]<0>((void *)(v6 + 8), "");
      unsigned int v7 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = v7 + 1;
    }
    LODWORD(v26) = 0;
    char v30 = 0;
    uint64_t v31 = 0;
    int v32 = 1;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = &unk_270DBCD60;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = &v37;
    long long v36 = xmmword_261E8D150;
    llvm::formatted_raw_ostream::setStream((llvm::formatted_raw_ostream *)&v25, (llvm::raw_ostream *)&v14);
    WriteAsOperandInternal((llvm::raw_ostream *)&v25, (llvm::DIExpression *)a2, a1);
    if (llvm::MDNode::classof(a2))
    {
      int v8 = *a2;
      if (v8 != 6 && v8 != 33)
      {
        uint64_t v9 = (_WORD *)v29;
        if ((unint64_t)(v28 - v29) > 2)
        {
          *(unsigned char *)(v29 + 2) = 32;
          _WORD *v9 = 15648;
          v29 += 3;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v25, " = ", 3uLL);
        }
        WriteMDNodeBodyInternal((llvm::raw_ostream *)&v25, (const llvm::MDNode *)a2, (llvm::raw_ostream **)a1);
      }
    }
    llvm::formatted_raw_ostream::~formatted_raw_ostream((llvm::formatted_raw_ostream *)&v25);
    char v10 = v22;
    uint64_t v11 = *(void *)(a1 + 40) + 32 * v7;
    uint64_t v12 = v11 + 8;
    if (*(char *)(v11 + 31) < 0) {
      operator delete(*(void **)v12);
    }
    long long v13 = *(_OWORD *)v10;
    *(void *)(v12 + 16) = v10[2];
    *(_OWORD *)uint64_t v12 = v13;
    *((unsigned char *)v10 + 23) = 0;
    *(unsigned char *)char v10 = 0;
    --*(_DWORD *)(a1 + 32);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v14);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
  }
}

void anonymous namespace'::MDTreeAsmWriterContext::~MDTreeAsmWriterContext(_anonymous_namespace_::MDTreeAsmWriterContext *this)
{
  *(void *)this = &unk_270DC2C48;
  uint64_t v2 = *((unsigned int *)this + 12);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 5);
    uint64_t v4 = v3 + 32 * v2;
    do
    {
      uint64_t v5 = (llvm::raw_ostream *)*((void *)this + 31);
      uint64_t v6 = (unsigned char *)*((void *)v5 + 4);
      if (*((unsigned char **)v5 + 3) == v6)
      {
        llvm::raw_ostream::write(v5, "\n", 1uLL);
      }
      else
      {
        unsigned char *v6 = 10;
        ++*((void *)v5 + 4);
      }
      unsigned int v7 = llvm::raw_ostream::indent(*((llvm::raw_ostream **)this + 31), (2 * *(_DWORD *)v3));
      char v10 = *(const char **)(v3 + 8);
      uint64_t v9 = v3 + 8;
      int v8 = v10;
      int v11 = *(char *)(v9 + 23);
      if (v11 >= 0) {
        uint64_t v12 = (const char *)v9;
      }
      else {
        uint64_t v12 = v8;
      }
      if (v11 >= 0) {
        size_t v13 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        size_t v13 = *(void *)(v9 + 8);
      }
      llvm::raw_ostream::write(v7, v12, v13);
      uint64_t v3 = v9 + 24;
    }
    while (v3 != v4);
  }
  uint64_t v14 = (void *)*((void *)this + 24);
  if (v14 != *((void **)this + 23)) {
    free(v14);
  }
  int v15 = (char *)*((void *)this + 5);
  uint64_t v16 = *((unsigned int *)this + 12);
  if (v16)
  {
    uint64_t v17 = 32 * v16;
    do
    {
      if (v15[v17 - 1] < 0) {
        operator delete(*(void **)&v15[v17 - 24]);
      }
      v17 -= 32;
    }
    while (v17);
    int v15 = (char *)*((void *)this + 5);
  }
  if (v15 != (char *)this + 56) {
    free(v15);
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x263E500B0);
}

void llvm::SmallVectorTemplateBase<std::pair<unsigned int,std::string>,false>::growAndEmplaceBack<std::pair<unsigned int,char const*>>(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  uint64_t v4 = (char *)(a1 + 16);
  uint64_t v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 32, &v15);
  uint64_t v6 = &v5[32 * *(unsigned int *)(a1 + 8)];
  *(_DWORD *)uint64_t v6 = *(_DWORD *)a2;
  std::string::basic_string[abi:nn180100]<0>((void *)v6 + 1, *(char **)(a2 + 8));
  unsigned int v7 = *(char **)a1;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (v8)
  {
    uint64_t v9 = &v7[32 * v8];
    char v10 = v5;
    do
    {
      *(_DWORD *)char v10 = *(_DWORD *)v7;
      long long v11 = *(_OWORD *)(v7 + 8);
      *((void *)v10 + 3) = *((void *)v7 + 3);
      *(_OWORD *)(v10 + 8) = v11;
      *((void *)v7 + 2) = 0;
      *((void *)v7 + 3) = 0;
      *((void *)v7 + 1) = 0;
      v7 += 32;
      v10 += 32;
    }
    while (v7 != v9);
    unsigned int v7 = *(char **)a1;
    uint64_t v12 = *(unsigned int *)(a1 + 8);
    if (v12)
    {
      uint64_t v13 = 32 * v12;
      do
      {
        if (v7[v13 - 1] < 0) {
          operator delete(*(void **)&v7[v13 - 24]);
        }
        v13 -= 32;
      }
      while (v13);
      unsigned int v7 = *(char **)a1;
    }
  }
  int v14 = v15;
  if (v7 != v4) {
    free(v7);
  }
  *(void *)a1 = v5;
  ++*(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = v14;
}

void *std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Module const*,BOOL)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Function const*,BOOL)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Module const*,BOOL)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Function const*,BOOL)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Module const*,BOOL)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void *std::__function::__value_func<void ()(llvm::AbstractSlotTrackerStorage *,llvm::Function const*,BOOL)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      char v10 = 0;
      int v11 = 1;
      while (v7 != -4)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8;
        }
        if (v12) {
          char v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 16 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 16 * v10;
      do
      {
        *uint64_t result = -4;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 16 * v3;
      uint64_t v13 = v4;
      do
      {
        uint64_t v14 = *(void *)v13;
        if ((*(void *)v13 | 4) != 0xFFFFFFFFFFFFFFFCLL)
        {
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>,llvm::AttributeSet,unsigned int,llvm::DenseMapInfo<llvm::AttributeSet,void>,llvm::detail::DenseMapPair<llvm::AttributeSet,unsigned int>>::LookupBucketFor<llvm::AttributeSet>(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          uint64_t v15 = v18;
          *uint64_t v18 = *(void *)v13;
          *((_DWORD *)v15 + 2) = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x263E500A0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 16 * v16;
    do
    {
      *uint64_t result = -4;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

unint64_t llvm::Attribute::get(uint64_t *a1, int a2, uint64_t a3)
{
  v12[16] = *MEMORY[0x263EF8340];
  unsigned int v5 = a2 - 75;
  uint64_t v6 = *a1;
  v11[0] = v12;
  v11[1] = (void *)0x2000000000;
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v11, a2);
  if (v5 <= 9)
  {
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v11, a3);
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v11, SHIDWORD(a3));
  }
  uint64_t v10 = 0;
  unint64_t NodeOrInsertPos = (unint64_t)llvm::FoldingSetBase::FindNodeOrInsertPos(v6 + 264, (uint64_t)v11, &v10, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    uint64_t v8 = v6 + 2072;
    if (v5 >= 0xA)
    {
      unint64_t NodeOrInsertPos = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v8, 16, 3);
      *(void *)unint64_t NodeOrInsertPos = 0;
      *(unsigned char *)(NodeOrInsertPos + 8) = 0;
      *(_DWORD *)(NodeOrInsertPos + 12) = a2;
    }
    else
    {
      unint64_t NodeOrInsertPos = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v8, 24, 3);
      *(void *)unint64_t NodeOrInsertPos = 0;
      *(unsigned char *)(NodeOrInsertPos + 8) = 1;
      *(_DWORD *)(NodeOrInsertPos + 12) = a2;
      *(void *)(NodeOrInsertPos + 16) = a3;
    }
    llvm::FoldingSetBase::InsertNode(v6 + 264, (uint64_t *)NodeOrInsertPos, v10, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v11[0] != v12) {
    free(v11[0]);
  }
  return NodeOrInsertPos;
}

{
  uint64_t v5;
  unint64_t NodeOrInsertPos;
  uint64_t v8;
  void *v9[2];
  void v10[17];

  v10[16] = *MEMORY[0x263EF8340];
  unsigned int v5 = *a1;
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v9, a2);
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v9, a3);
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v9, SHIDWORD(a3));
  uint64_t v8 = 0;
  unint64_t NodeOrInsertPos = (unint64_t)llvm::FoldingSetBase::FindNodeOrInsertPos(v5 + 264, (uint64_t)v9, &v8, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    unint64_t NodeOrInsertPos = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v5 + 2072, 24, 3);
    *(void *)unint64_t NodeOrInsertPos = 0;
    *(unsigned char *)(NodeOrInsertPos + 8) = 3;
    *(_DWORD *)(NodeOrInsertPos + 12) = a2;
    *(void *)(NodeOrInsertPos + 16) = a3;
    llvm::FoldingSetBase::InsertNode(v5 + 264, (uint64_t *)NodeOrInsertPos, v8, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v9[0] != v10) {
    free(v9[0]);
  }
  return NodeOrInsertPos;
}

uint64_t *llvm::Attribute::get(uint64_t *a1, unsigned char *a2, size_t a3, unsigned char *a4, size_t a5)
{
  v14[16] = *MEMORY[0x263EF8340];
  uint64_t v9 = *a1;
  v13[0] = v14;
  v13[1] = (void *)0x2000000000;
  llvm::FoldingSetNodeID::AddString((unsigned int *)v13, a2, a3);
  if (a5) {
    llvm::FoldingSetNodeID::AddString((unsigned int *)v13, a4, a5);
  }
  uint64_t v12 = 0;
  unint64_t NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(v9 + 264, (uint64_t)v13, &v12, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    unint64_t NodeOrInsertPos = (uint64_t *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v9 + 2072, a3 + a5 + 26, 3);
    llvm::StringAttributeImpl::StringAttributeImpl((uint64_t)NodeOrInsertPos, a2, a3, a4, a5);
    llvm::FoldingSetBase::InsertNode(v9 + 264, NodeOrInsertPos, v12, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v13[0] != v14) {
    free(v13[0]);
  }
  return NodeOrInsertPos;
}

uint64_t llvm::Attribute::getAttrKindFromName(char *a1, uint64_t a2)
{
  switch(a2)
  {
    case 3:
      if (*(_WORD *)a1 == 28520 && a1[2] == 116)
      {
        uint64_t result = 9;
      }
      else
      {
        if (*(_WORD *)a1 != 29555 || a1[2] != 112) {
          goto LABEL_362;
        }
        uint64_t result = 59;
      }
      break;
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x646C6F63:
          uint64_t result = 5;
          break;
        case 0x7473656E:
          uint64_t result = 17;
          break;
        case 0x74657273:
          uint64_t result = 74;
          break;
        default:
          goto LABEL_362;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 == 1701998185 && a1[4] == 103)
      {
        uint64_t result = 11;
      }
      else if (*(_DWORD *)a1 == 1701536110 && a1[4] == 100)
      {
        uint64_t result = 16;
      }
      else if (*(_DWORD *)a1 == 1702000994 && a1[4] == 102)
      {
        uint64_t result = 69;
      }
      else if (*(_DWORD *)a1 == 1635154274 && a1[4] == 108)
      {
        uint64_t result = 70;
      }
      else
      {
        if (*(_DWORD *)a1 != 1734962273 || a1[4] != 110) {
          goto LABEL_362;
        }
        uint64_t result = 75;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 == 1634561385 && *((_WORD *)a1 + 2) == 26482)
      {
        uint64_t result = 10;
      }
      else if (*(_DWORD *)a1 == 1919315822 && *((_WORD *)a1 + 2) == 25957)
      {
        uint64_t result = 24;
      }
      else if (*(_DWORD *)a1 == 2037608302 && *((_WORD *)a1 + 2) == 25454)
      {
        uint64_t result = 34;
      }
      else if (*(_DWORD *)a1 == 1919972211 && *((_WORD *)a1 + 2) == 29029)
      {
        uint64_t result = 60;
      }
      else
      {
        if (*(_DWORD *)a1 != 1869440365 || *((_WORD *)a1 + 2) != 31090) {
          goto LABEL_362;
        }
        uint64_t result = 80;
      }
      break;
    case 7:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)(a1 + 3) == 1852404844)
      {
        uint64_t result = 4;
      }
      else if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)(a1 + 3) == 1702521203)
      {
        uint64_t result = 14;
      }
      else if (*(_DWORD *)a1 == 1818324846 && *(_DWORD *)(a1 + 3) == 1935763820)
      {
        uint64_t result = 18;
      }
      else if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)(a1 + 3) == 1701278309)
      {
        uint64_t result = 27;
      }
      else if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)(a1 + 3) == 1717920878)
      {
        uint64_t result = 35;
      }
      else if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)(a1 + 3) == 1819047278)
      {
        uint64_t result = 38;
      }
      else if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)(a1 + 3) == 1702521203)
      {
        uint64_t result = 41;
      }
      else if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)(a1 + 3) == 1701736302)
      {
        uint64_t result = 42;
      }
      else if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)(a1 + 3) == 1954047342)
      {
        uint64_t result = 48;
      }
      else if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)(a1 + 3) == 1954047343)
      {
        uint64_t result = 68;
      }
      else
      {
        if (*(_DWORD *)a1 != 1635022709 || *(_DWORD *)(a1 + 3) != 1701601889) {
          goto LABEL_362;
        }
        uint64_t result = 83;
      }
      break;
    case 8:
      switch(*(void *)a1)
      {
        case 0x727470636F6C6C61:
          uint64_t result = 2;
          break;
        case 0x656E696C6E696F6ELL:
          uint64_t result = 26;
          break;
        case 0x6E72757465726F6ELL:
          uint64_t result = 31;
          break;
        case 0x646E69776E756F6ELL:
          uint64_t result = 36;
          break;
        case 0x656E6F6E64616572:
          uint64_t result = 44;
          break;
        case 0x796C6E6F64616572:
          uint64_t result = 45;
          break;
        case 0x64656E7275746572:
          uint64_t result = 46;
          break;
        case 0x7066746369727473:
          uint64_t result = 62;
          break;
        case 0x61636F6C6C616E69:
          uint64_t result = 72;
          break;
        default:
          goto LABEL_362;
      }
      break;
    case 9:
      if (*(void *)a1 == 0x6C626174706D756ALL && a1[8] == 101)
      {
        uint64_t result = 13;
      }
      else if (*(void *)a1 == 0x69746C6975626F6ELL && a1[8] == 110)
      {
        uint64_t result = 19;
      }
      else if (*(void *)a1 == 0x7275747061636F6ELL && a1[8] == 101)
      {
        uint64_t result = 21;
      }
      else if (*(void *)a1 == 0x6C69666F72706F6ELL && a1[8] == 101)
      {
        uint64_t result = 28;
      }
      else if (*(void *)a1 == 0x7372756365726F6ELL && a1[8] == 101)
      {
        uint64_t result = 29;
      }
      else if (*(void *)a1 == 0x6E6F7A6465726F6ELL && a1[8] == 101)
      {
        uint64_t result = 30;
      }
      else if (*(void *)a1 == 0x6361747365666173 && a1[8] == 107)
      {
        uint64_t result = 49;
      }
      else if (*(void *)a1 == 0x6E6F727473707373 && a1[8] == 103)
      {
        uint64_t result = 61;
      }
      else if (*(void *)a1 == 0x6C65737466697773 && a1[8] == 102)
      {
        uint64_t result = 65;
      }
      else if (*(void *)a1 == 0x6C6E6F6574697277 && a1[8] == 121)
      {
        uint64_t result = 67;
      }
      else if (*(void *)a1 == 0x6E696B636F6C6C61 && a1[8] == 100)
      {
        uint64_t result = 76;
      }
      else if (*(void *)a1 == 0x7A6973636F6C6C61 && a1[8] == 101)
      {
        uint64_t result = 77;
      }
      else
      {
        if (*(void *)a1 != 0x73616C6370666F6ELL || a1[8] != 115) {
          goto LABEL_362;
        }
        uint64_t result = 81;
      }
      break;
    case 10:
      if (*(void *)a1 == 0x696C61636F6C6C61 && *((_WORD *)a1 + 4) == 28263)
      {
        uint64_t result = 1;
      }
      else if (*(void *)a1 == 0x65677265766E6F63 && *((_WORD *)a1 + 4) == 29806)
      {
        uint64_t result = 6;
      }
      else if (*(void *)a1 == 0x6968656E696C6E69 && *((_WORD *)a1 + 4) == 29806)
      {
        uint64_t result = 12;
      }
      else if (*(void *)a1 == 0x61626C6C61636F6ELL && *((_WORD *)a1 + 4) == 27491)
      {
        uint64_t result = 20;
      }
      else if (*(void *)a1 == 0x6568635F66636F6ELL && *((_WORD *)a1 + 4) == 27491)
      {
        uint64_t result = 22;
      }
      else if (*(void *)a1 == 0x7973617466697773 && *((_WORD *)a1 + 4) == 25454)
      {
        uint64_t result = 63;
      }
      else if (*(void *)a1 == 0x7272657466697773 && *((_WORD *)a1 + 4) == 29295)
      {
        uint64_t result = 64;
      }
      else if (*(void *)a1 == 0x757465726C6C6977 && *((_WORD *)a1 + 4) == 28274)
      {
        uint64_t result = 66;
      }
      else
      {
        if (*(void *)a1 != 0x6174736E67696C61 || *((_WORD *)a1 + 4) != 27491) {
          goto LABEL_362;
        }
        uint64_t result = 82;
      }
      break;
    case 11:
      if (*(void *)a1 == 0x63696C7075646F6ELL && *(void *)(a1 + 3) == 0x65746163696C7075)
      {
        uint64_t result = 23;
      }
      else if (*(void *)a1 == 0x62797A616C6E6F6ELL && *(void *)(a1 + 3) == 0x646E6962797A616CLL)
      {
        uint64_t result = 37;
      }
      else if (*(void *)a1 == 0x666F727070696B73 && *(void *)(a1 + 3) == 0x656C69666F727070)
      {
        uint64_t result = 56;
      }
      else
      {
        if (*(void *)a1 != 0x74746E656D656C65 || *(void *)(a1 + 3) != 0x65707974746E656DLL) {
          goto LABEL_362;
        }
        uint64_t result = 71;
      }
      break;
    case 12:
      if (*(void *)a1 == 0x6E69737961776C61 && *((_DWORD *)a1 + 2) == 1701734764)
      {
        uint64_t result = 3;
      }
      else if (*(void *)a1 == 0x676F72707473756DLL && *((_DWORD *)a1 + 2) == 1936942450)
      {
        uint64_t result = 15;
      }
      else if (*(void *)a1 == 0x74616C7563657073 && *((_DWORD *)a1 + 2) == 1701601889)
      {
        uint64_t result = 57;
      }
      else if (*(void *)a1 == 0x636F6C6C61657270 && *((_DWORD *)a1 + 2) == 1684370529)
      {
        uint64_t result = 73;
      }
      else
      {
        if (*(void *)a1 != 0x725F656C61637376 || *((_DWORD *)a1 + 2) != 1701277281) {
          goto LABEL_362;
        }
        uint64_t result = 84;
      }
      break;
    case 13:
      if (*(void *)a1 == 0x7566726F6674706FLL && *(void *)(a1 + 5) == 0x676E697A7A756672)
      {
        uint64_t result = 40;
      }
      else
      {
        if (*(void *)a1 != 0x5F736E7275746572 || *(void *)(a1 + 5) != 0x65636977745F736ELL) {
          goto LABEL_362;
        }
        uint64_t result = 47;
      }
      break;
    case 15:
      if (*(void *)a1 == 0x63696C706D696F6ELL && *(void *)(a1 + 7) == 0x74616F6C66746963)
      {
        uint64_t result = 25;
      }
      else if (*(void *)a1 == 0x657A6974696E6173 && *(void *)(a1 + 7) == 0x6761746D656D5F65)
      {
        uint64_t result = 52;
      }
      else if (*(void *)a1 == 0x657A6974696E6173 && *(void *)(a1 + 7) == 0x79726F6D656D5F65)
      {
        uint64_t result = 53;
      }
      else if (*(void *)a1 == 0x657A6974696E6173 && *(void *)(a1 + 7) == 0x6461657268745F65)
      {
        uint64_t result = 54;
      }
      else if (*(void *)a1 == 0x6163776F64616873 && *(void *)(a1 + 7) == 0x6B636174736C6C61)
      {
        uint64_t result = 55;
      }
      else
      {
        if (*(void *)a1 != 0x6572656665726564 || *(void *)(a1 + 7) != 0x656C626165636E65) {
          goto LABEL_362;
        }
        uint64_t result = 78;
      }
      break;
    case 16:
      if (*(void *)a1 != 0x657A6974696E6173 || *((void *)a1 + 1) != 0x737365726464615FLL) {
        goto LABEL_362;
      }
      uint64_t result = 50;
      break;
    case 17:
      if (*(void *)a1 == 0x6974696E61736F6ELL && *((void *)a1 + 1) == 0x646E756F625F657ALL && a1[16] == 115)
      {
        uint64_t result = 32;
      }
      else
      {
        if (*(void *)a1 != 0x74696C7073657270 || *((void *)a1 + 1) != 0x6E6974756F726F63 || a1[16] != 101) {
          goto LABEL_362;
        }
        uint64_t result = 43;
      }
      break;
    case 18:
      if (*(void *)a1 != 0x657A6974696E6173
        || *((void *)a1 + 1) != 0x657264646177685FLL
        || *((_WORD *)a1 + 8) != 29555)
      {
        goto LABEL_362;
      }
      uint64_t result = 51;
      break;
    case 19:
      if (*(void *)a1 == 0x745F7465725F6E66
        && *((void *)a1 + 1) == 0x7478655F6B6E7568
        && *(void *)(a1 + 11) == 0x6E72657478655F6BLL)
      {
        uint64_t result = 8;
      }
      else
      {
        if (*(void *)a1 != 0x6974696E61736F6ELL
          || *((void *)a1 + 1) != 0x7265766F635F657ALL
          || *(void *)(a1 + 11) != 0x6567617265766F63)
        {
          goto LABEL_362;
        }
        uint64_t result = 33;
      }
      break;
    case 21:
      if (*(void *)a1 != 0x696F705F6C6C756ELL
        || *((void *)a1 + 1) != 0x5F73695F7265746ELL
        || *(void *)(a1 + 13) != 0x64696C61765F7369)
      {
        goto LABEL_362;
      }
      uint64_t result = 39;
      break;
    case 23:
      if (*(void *)a1 != 0x6572656665726564
        || *((void *)a1 + 1) != 0x5F656C626165636ELL
        || *(void *)(a1 + 15) != 0x6C6C756E5F726F5FLL)
      {
        goto LABEL_362;
      }
      uint64_t result = 79;
      break;
    case 26:
      if (*(void *)a1 != 0x74616C7563657073
        || *((void *)a1 + 1) != 0x64616F6C5F657669
        || *((void *)a1 + 2) != 0x696E65647261685FLL
        || *((_WORD *)a1 + 12) != 26478)
      {
        goto LABEL_362;
      }
      uint64_t result = 58;
      break;
    case 33:
      if (memcmp(a1, "disable_sanitizer_instrumentation", 0x21uLL)) {
        goto LABEL_362;
      }
      uint64_t result = 7;
      break;
    default:
LABEL_362:
      uint64_t result = 0;
      break;
  }
  return result;
}

char *llvm::Attribute::getNameFromAttrKind(int a1)
{
  return off_265597088[a1];
}

BOOL llvm::Attribute::isExistingAttribute(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  switch(a2)
  {
    case 3:
      if (*a1 == 28520 && *((unsigned char *)a1 + 2) == 116) {
        return 1;
      }
      int v4 = *((unsigned __int8 *)a1 + 2);
      BOOL v5 = *a1 == 29555;
      int v6 = 112;
      return v5 && v4 == v6;
    case 4:
      return *(_DWORD *)a1 == 1684828003 || *(_DWORD *)a1 == 1953719662 || *(_DWORD *)a1 == 1952805491;
    case 5:
      if (*(_DWORD *)a1 == 1701998185 && *((unsigned char *)a1 + 4) == 103) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1701536110 && *((unsigned char *)a1 + 4) == 100) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1702000994 && *((unsigned char *)a1 + 4) == 102) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1635154274 && *((unsigned char *)a1 + 4) == 108) {
        return 1;
      }
      int v4 = *((unsigned __int8 *)a1 + 4);
      BOOL v5 = *(_DWORD *)a1 == 1734962273;
      int v6 = 110;
      return v5 && v4 == v6;
    case 6:
      if (*(_DWORD *)a1 == 1634561385 && a1[2] == 26482) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1919315822 && a1[2] == 25957) {
        return 1;
      }
      if (*(_DWORD *)a1 == 2037608302 && a1[2] == 25454) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1919972211 && a1[2] == 29029) {
        return 1;
      }
      int v4 = a1[2];
      BOOL v5 = *(_DWORD *)a1 == 1869440365;
      int v6 = 31090;
      return v5 && v4 == v6;
    case 7:
      if (*(_DWORD *)a1 == 1818850658 && *(_DWORD *)((char *)a1 + 3) == 1852404844) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1936615789 && *(_DWORD *)((char *)a1 + 3) == 1702521203) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1818324846 && *(_DWORD *)((char *)a1 + 3) == 1935763820) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1701670766 && *(_DWORD *)((char *)a1 + 3) == 1701278309) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1853189998 && *(_DWORD *)((char *)a1 + 3) == 1717920878) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1852731246 && *(_DWORD *)((char *)a1 + 3) == 1819047278) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1937010799 && *(_DWORD *)((char *)a1 + 3) == 1702521203) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1853124719 && *(_DWORD *)((char *)a1 + 3) == 1701736302) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1852270963 && *(_DWORD *)((char *)a1 + 3) == 1954047342) {
        return 1;
      }
      if (*(_DWORD *)a1 == 1869768058 && *(_DWORD *)((char *)a1 + 3) == 1954047343) {
        return 1;
      }
      int v4 = *(_DWORD *)((char *)a1 + 3);
      BOOL v5 = *(_DWORD *)a1 == 1635022709;
      int v6 = 1701601889;
      return v5 && v4 == v6;
    case 8:
      return *(void *)a1 == 0x727470636F6C6C61
          || *(void *)a1 == 0x656E696C6E696F6ELL
          || *(void *)a1 == 0x6E72757465726F6ELL
          || *(void *)a1 == 0x646E69776E756F6ELL
          || *(void *)a1 == 0x656E6F6E64616572
          || *(void *)a1 == 0x796C6E6F64616572
          || *(void *)a1 == 0x64656E7275746572
          || *(void *)a1 == 0x7066746369727473
          || *(void *)a1 == 0x61636F6C6C616E69;
    case 9:
      if (*(void *)a1 == 0x6C626174706D756ALL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x69746C6975626F6ELL && *((unsigned char *)a1 + 8) == 110) {
        return 1;
      }
      if (*(void *)a1 == 0x7275747061636F6ELL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x6C69666F72706F6ELL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x7372756365726F6ELL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x6E6F7A6465726F6ELL && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      if (*(void *)a1 == 0x6361747365666173 && *((unsigned char *)a1 + 8) == 107) {
        return 1;
      }
      if (*(void *)a1 == 0x6E6F727473707373 && *((unsigned char *)a1 + 8) == 103) {
        return 1;
      }
      if (*(void *)a1 == 0x6C65737466697773 && *((unsigned char *)a1 + 8) == 102) {
        return 1;
      }
      if (*(void *)a1 == 0x6C6E6F6574697277 && *((unsigned char *)a1 + 8) == 121) {
        return 1;
      }
      if (*(void *)a1 == 0x6E696B636F6C6C61 && *((unsigned char *)a1 + 8) == 100) {
        return 1;
      }
      if (*(void *)a1 == 0x7A6973636F6C6C61 && *((unsigned char *)a1 + 8) == 101) {
        return 1;
      }
      int v4 = *((unsigned __int8 *)a1 + 8);
      BOOL v5 = *(void *)a1 == 0x73616C6370666F6ELL;
      int v6 = 115;
      return v5 && v4 == v6;
    case 10:
      if (*(void *)a1 == 0x696C61636F6C6C61 && a1[4] == 28263) {
        return 1;
      }
      if (*(void *)a1 == 0x65677265766E6F63 && a1[4] == 29806) {
        return 1;
      }
      if (*(void *)a1 == 0x6968656E696C6E69 && a1[4] == 29806) {
        return 1;
      }
      if (*(void *)a1 == 0x61626C6C61636F6ELL && a1[4] == 27491) {
        return 1;
      }
      if (*(void *)a1 == 0x6568635F66636F6ELL && a1[4] == 27491) {
        return 1;
      }
      if (*(void *)a1 == 0x7973617466697773 && a1[4] == 25454) {
        return 1;
      }
      if (*(void *)a1 == 0x7272657466697773 && a1[4] == 29295) {
        return 1;
      }
      if (*(void *)a1 == 0x757465726C6C6977 && a1[4] == 28274) {
        return 1;
      }
      int v4 = a1[4];
      BOOL v5 = *(void *)a1 == 0x6174736E67696C61;
      int v6 = 27491;
      return v5 && v4 == v6;
    case 11:
      if (*(void *)a1 == 0x63696C7075646F6ELL && *(void *)((char *)a1 + 3) == 0x65746163696C7075) {
        return 1;
      }
      if (*(void *)a1 == 0x62797A616C6E6F6ELL && *(void *)((char *)a1 + 3) == 0x646E6962797A616CLL) {
        return 1;
      }
      if (*(void *)a1 == 0x666F727070696B73 && *(void *)((char *)a1 + 3) == 0x656C69666F727070) {
        return 1;
      }
      uint64_t v49 = *(void *)((char *)a1 + 3);
      BOOL v50 = *(void *)a1 == 0x74746E656D656C65;
      uint64_t v51 = 0x65707974746E656DLL;
      return v50 && v49 == v51;
    case 12:
      if (*(void *)a1 == 0x6E69737961776C61 && *((_DWORD *)a1 + 2) == 1701734764) {
        return 1;
      }
      if (*(void *)a1 == 0x676F72707473756DLL && *((_DWORD *)a1 + 2) == 1936942450) {
        return 1;
      }
      if (*(void *)a1 == 0x74616C7563657073 && *((_DWORD *)a1 + 2) == 1701601889) {
        return 1;
      }
      if (*(void *)a1 == 0x636F6C6C61657270 && *((_DWORD *)a1 + 2) == 1684370529) {
        return 1;
      }
      int v4 = *((_DWORD *)a1 + 2);
      BOOL v5 = *(void *)a1 == 0x725F656C61637376;
      int v6 = 1701277281;
      return v5 && v4 == v6;
    case 13:
      if (*(void *)a1 == 0x7566726F6674706FLL && *(void *)((char *)a1 + 5) == 0x676E697A7A756672) {
        return 1;
      }
      uint64_t v49 = *(void *)((char *)a1 + 5);
      BOOL v50 = *(void *)a1 == 0x5F736E7275746572;
      uint64_t v51 = 0x65636977745F736ELL;
      return v50 && v49 == v51;
    case 14:
      if (*(void *)a1 == 0x2D706D756A2D6F6ELL && *(void *)(a1 + 3) == 0x73656C6261742D70) {
        return 1;
      }
      uint64_t v49 = *(void *)(a1 + 3);
      BOOL v50 = *(void *)a1 == 0x662D656661736E75;
      uint64_t v51 = 0x6874616D2D70662DLL;
      return v50 && v49 == v51;
    case 15:
      if (*(void *)a1 == 0x63696C706D696F6ELL && *(void *)((char *)a1 + 7) == 0x74616F6C66746963) {
        return 1;
      }
      if (*(void *)a1 == 0x657A6974696E6173 && *(void *)((char *)a1 + 7) == 0x6761746D656D5F65) {
        return 1;
      }
      if (*(void *)a1 == 0x657A6974696E6173 && *(void *)((char *)a1 + 7) == 0x79726F6D656D5F65) {
        return 1;
      }
      if (*(void *)a1 == 0x657A6974696E6173 && *(void *)((char *)a1 + 7) == 0x6461657268745F65) {
        return 1;
      }
      if (*(void *)a1 == 0x6163776F64616873 && *(void *)((char *)a1 + 7) == 0x6B636174736C6C61) {
        return 1;
      }
      if (*(void *)a1 == 0x6572656665726564 && *(void *)((char *)a1 + 7) == 0x656C626165636E65) {
        return 1;
      }
      uint64_t v64 = 0x6874616D2D70662DLL;
      if (*(void *)a1 == 0x2D73666E692D6F6ELL && *(void *)((char *)a1 + 7) == 0x6874616D2D70662DLL) {
        return 1;
      }
      uint64_t v66 = *(void *)((char *)a1 + 7);
      BOOL v67 = *(void *)a1 == 0x2D736E616E2D6F6ELL;
      return v67 && v66 == v64;
    case 16:
      uint64_t v49 = *((void *)a1 + 1);
      BOOL v50 = *(void *)a1 == 0x657A6974696E6173;
      uint64_t v51 = 0x737365726464615FLL;
      return v50 && v49 == v51;
    case 17:
      if (*(void *)a1 == 0x6974696E61736F6ELL
        && *((void *)a1 + 1) == 0x646E756F625F657ALL
        && *((unsigned char *)a1 + 16) == 115)
      {
        return 1;
      }
      int v71 = *((unsigned __int8 *)a1 + 16);
      BOOL v72 = *(void *)a1 == 0x74696C7073657270 && *((void *)a1 + 1) == 0x6E6974756F726F63;
      int v73 = 101;
      return v72 && v71 == v73;
    case 18:
      if (*(void *)a1 == 0x657A6974696E6173 && *((void *)a1 + 1) == 0x657264646177685FLL && a1[8] == 29555) {
        return 1;
      }
      BOOL v76 = *(void *)a1 == 0x6572702D7373656CLL && *((void *)a1 + 1) == 0x6D70662D65736963;
      if (v76 && a1[8] == 25697) {
        return 1;
      }
      int v71 = a1[8];
      BOOL v72 = *(void *)a1 == 0x706D61732D657375 && *((void *)a1 + 1) == 0x69666F72702D656CLL;
      int v73 = 25964;
      return v72 && v71 == v73;
    case 19:
      if (*(void *)a1 == 0x745F7465725F6E66
        && *((void *)a1 + 1) == 0x7478655F6B6E7568
        && *(void *)((char *)a1 + 11) == 0x6E72657478655F6BLL)
      {
        return 1;
      }
      BOOL v81 = *(void *)a1 == 0x6974696E61736F6ELL && *((void *)a1 + 1) == 0x7265766F635F657ALL;
      if (v81 && *(void *)((char *)a1 + 11) == 0x6567617265766F63) {
        return 1;
      }
      uint64_t v66 = *(void *)((char *)a1 + 11);
      BOOL v67 = *(void *)a1 == 0x662D786F72707061 && *((void *)a1 + 1) == 0x6D2D70662D636E75;
      uint64_t v64 = 0x6874616D2D70662DLL;
      return v67 && v66 == v64;
    case 21:
      if (*(void *)a1 == 0x696F705F6C6C756ELL
        && *((void *)a1 + 1) == 0x5F73695F7265746ELL
        && *(void *)((char *)a1 + 13) == 0x64696C61765F7369)
      {
        return 1;
      }
      uint64_t v66 = *(void *)((char *)a1 + 13);
      BOOL v67 = *(void *)a1 == 0x6E696C6E692D6F6ELL && *((void *)a1 + 1) == 0x742D656E696C2D65;
      uint64_t v64 = 0x73656C6261742D65;
      return v67 && v66 == v64;
    case 23:
      if (*(void *)a1 == 0x6572656665726564
        && *((void *)a1 + 1) == 0x5F656C626165636ELL
        && *(void *)((char *)a1 + 15) == 0x6C6C756E5F726F5FLL)
      {
        return 1;
      }
      BOOL v87 = *(void *)a1 == 0x656E6769732D6F6ELL && *((void *)a1 + 1) == 0x2D736F72657A2D64;
      if (v87 && *(void *)((char *)a1 + 15) == 0x6874616D2D70662DLL) {
        return 1;
      }
      uint64_t v66 = *(void *)((char *)a1 + 15);
      BOOL v67 = *(void *)a1 == 0x2D656C69666F7270 && *((void *)a1 + 1) == 0x612D656C706D6173;
      uint64_t v64 = 0x6574617275636361;
      return v67 && v66 == v64;
    case 26:
      return *(void *)a1 == 0x74616C7563657073
          && *((void *)a1 + 1) == 0x64616F6C5F657669
          && *((void *)a1 + 2) == 0x696E65647261685FLL
          && a1[12] == 26478;
    case 33:
      return !memcmp(a1, "disable_sanitizer_instrumentation", 0x21uLL);
    default:
      return v2;
  }
}

BOOL llvm::AttributeImpl::hasAttribute(uint64_t a1, const void *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 8) != 2) {
    return 0;
  }
  size_t v4 = *(unsigned int *)(a1 + 12);
  if (a3 != v4) {
    return 0;
  }
  if (v4) {
    return memcmp((const void *)(a1 + 24), a2, v4) == 0;
  }
  return 1;
}

uint64_t llvm::Attribute::getAllocSizeArgs(llvm::Attribute *this)
{
  uint64_t v1 = *(void *)(*(void *)this + 16);
  BOOL v2 = v1 == 0xFFFFFFFFLL;
  BOOL v3 = v1 != 0xFFFFFFFFLL;
  uint64_t v4 = *(void *)(*(void *)this + 16);
  if (v2) {
    uint64_t v4 = 0;
  }
  *(void *)&void v6[4] = v4 & 0xFFFFFFFEFFFFFFFFLL | *(void *)(*(void *)this + 16) & 0xFFFFFF00 | ((unint64_t)v3 << 32);
  return *(void *)v6;
}

uint64_t llvm::Attribute::getVScaleRangeMax(llvm::Attribute *this)
{
  uint64_t v1 = *(void *)(*(void *)this + 16);
  if (!*(void *)(*(void *)this + 16)) {
    uint64_t v1 = 0;
  }
  *(void *)&v4[4] = v1 | *(void *)(*(void *)this + 16) & 0xFFFFFF00 | ((unint64_t)(*(void *)(*(void *)this + 16) != 0) << 32);
  *((void *)&v3 + 1) = *(void *)(*(void *)this + 16) != 0;
  *(void *)&long long v3 = *(void *)v4;
  return v3 >> 32;
}

void llvm::Attribute::getAsString(llvm::Attribute *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_8;
  }
  int v6 = *(unsigned __int8 *)(v4 + 8);
  if (v6 == 3)
  {
    NameFromAttrKind = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (NameFromAttrKind)
    {
      std::string::basic_string[abi:nn180100](a3, NameFromAttrKind, v10);
    }
    else
    {
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
    }
    std::string::push_back(a3, 40);
    DWORD2(v70) = 0;
    char v74 = 0;
    uint64_t v75 = 0;
    int v76 = 1;
    BOOL v72 = 0;
    int v73 = 0;
    int v71 = 0;
    *(void *)&long long v70 = &unk_270DBD6E0;
    unsigned __int8 v77 = a3;
    llvm::raw_ostream::SetUnbuffered(&v70);
    if (*(void *)this) {
      uint64_t v13 = *(llvm::Type **)(*(void *)this + 16);
    }
    else {
      uint64_t v13 = 0;
    }
    llvm::Type::print(v13, (llvm::raw_ostream *)&v70, 0, 1);
    uint64_t v14 = v73 - v71;
    if (v73 != v71)
    {
      int v73 = v71;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v70, v71, v14);
    }
    std::string::push_back(a3, 41);
    goto LABEL_24;
  }
  if (!*(unsigned char *)(v4 + 8))
  {
    int v7 = llvm::Attribute::getNameFromAttrKind(*(_DWORD *)(v4 + 12));
    if (v7)
    {
      std::string::basic_string[abi:nn180100](a3, v7, v8);
      return;
    }
LABEL_8:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  if (v6 != 2)
  {
    switch(*(_DWORD *)(v4 + 12))
    {
      case 'K':
        v67[0] = *(void *)(v4 + 16);
        if (a2) {
          uint64_t v12 = "align=";
        }
        else {
          uint64_t v12 = "align ";
        }
        *(void *)&long long v70 = v12;
        int v71 = (char *)v67;
        LOWORD(v73) = 3075;
        goto LABEL_93;
      case 'L':
        uint64_t v23 = *(void *)(v4 + 16);
        *(void *)&long long v70 = &v71;
        *((void *)&v70 + 1) = 0x300000000;
        if (v23)
        {
          llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v70, (uint64_t)"alloc", 5);
          if ((v23 & 2) == 0)
          {
LABEL_43:
            if ((v23 & 4) == 0) {
              goto LABEL_44;
            }
            goto LABEL_79;
          }
        }
        else if ((v23 & 2) == 0)
        {
          goto LABEL_43;
        }
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v70, (uint64_t)"realloc", 7);
        if ((v23 & 4) == 0)
        {
LABEL_44:
          if ((v23 & 8) == 0) {
            goto LABEL_45;
          }
          goto LABEL_80;
        }
LABEL_79:
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v70, (uint64_t)"free", 4);
        if ((v23 & 8) == 0)
        {
LABEL_45:
          if ((v23 & 0x10) == 0) {
            goto LABEL_46;
          }
          goto LABEL_81;
        }
LABEL_80:
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v70, (uint64_t)"uninitialized", 13);
        if ((v23 & 0x10) == 0)
        {
LABEL_46:
          if ((v23 & 0x20) == 0) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }
LABEL_81:
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v70, (uint64_t)"zeroed", 6);
        if ((v23 & 0x20) == 0)
        {
LABEL_48:
          v63[0] = (uint64_t)"allockind(\"";
          __int16 v64 = 259;
          llvm::join<llvm::StringRef *>(&__p, v70, v70 + 16 * DWORD2(v70));
          __int16 v62 = 260;
          v61[0] = (uint64_t)&__p;
          llvm::operator+(v63, v61, (uint64_t)v65);
          v59[0] = (uint64_t)"\")";
          __int16 v60 = 259;
          llvm::operator+(v65, v59, (uint64_t)v67);
          llvm::Twine::str((llvm::Twine *)v67, a3);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((char **)v70 != &v71) {
            free((void *)v70);
          }
          return;
        }
LABEL_47:
        llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v70, (uint64_t)"aligned", 7);
        goto LABEL_48;
      case 'M':
        unint64_t AllocSizeArgs = llvm::Attribute::getAllocSizeArgs(this);
        if (!v25)
        {
          v65[0] = (uint64_t)"allocsize(";
          __int16 v66 = 259;
          __int16 v64 = 264;
          LODWORD(v63[0]) = AllocSizeArgs;
          goto LABEL_91;
        }
        unint64_t v26 = HIDWORD(AllocSizeArgs);
        v61[0] = (uint64_t)"allocsize(";
        __int16 v62 = 259;
        __int16 v60 = 264;
        LODWORD(v59[0]) = AllocSizeArgs;
        llvm::operator+(v61, v59, (uint64_t)v63);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)",";
        __int16 v58 = 259;
        llvm::operator+(v63, (uint64_t *)&__p, (uint64_t)v65);
        __int16 v56 = 264;
        LODWORD(v55[0]) = v26;
        llvm::operator+(v65, v55, (uint64_t)v67);
        unint64_t v53 = ")";
        __int16 v54 = 259;
LABEL_74:
        unsigned int v44 = (uint64_t *)&v53;
        goto LABEL_92;
      case 'N':
        uint64_t v27 = "dereferenceable";
        goto LABEL_56;
      case 'O':
        uint64_t v27 = "dereferenceable_or_null";
LABEL_56:
        llvm::Attribute::getAsString(BOOL)const::$_0::operator()(a3, a2, v4, (unsigned __int8 *)v27);
        return;
      case 'P':
        a3->__r_.__value_.__r.__words[0] = 0;
        a3->__r_.__value_.__l.__size_ = 0;
        a3->__r_.__value_.__r.__words[2] = 0;
        DWORD2(v70) = 0;
        char v74 = 0;
        uint64_t v75 = 0;
        int v76 = 1;
        BOOL v72 = 0;
        int v73 = 0;
        int v71 = 0;
        *(void *)&long long v70 = &unk_270DBD6E0;
        unsigned __int8 v77 = a3;
        llvm::raw_ostream::SetUnbuffered(&v70);
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v70, "memory(", 7uLL);
        unsigned int v28 = *(_DWORD *)(*(void *)this + 16);
        int v29 = (v28 >> 4) & 3;
        char v30 = "read";
        switch(v29)
        {
          case 1:
            goto LABEL_97;
          case 2:
            char v30 = "write";
            goto LABEL_97;
          case 3:
            char v30 = "readwrite";
            goto LABEL_97;
          default:
            if (((v28 | (v28 >> 2) | (v28 >> 4)) & 3) != 0)
            {
              char v31 = 1;
            }
            else
            {
              char v30 = "none";
LABEL_97:
              llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v70, v30);
              char v31 = 0;
            }
            char v47 = 0;
            uint64_t v48 = 0;
            break;
        }
        break;
      case 'Q':
        std::string::basic_string[abi:nn180100]<0>(a3, "nofpclass");
        DWORD2(v70) = 0;
        char v74 = 0;
        uint64_t v75 = 0;
        int v76 = 1;
        BOOL v72 = 0;
        int v73 = 0;
        int v71 = 0;
        *(void *)&long long v70 = &unk_270DBD6E0;
        unsigned __int8 v77 = a3;
        llvm::raw_ostream::SetUnbuffered(&v70);
        uint64_t v15 = llvm::operator<<((llvm::raw_ostream *)&v70, *(_DWORD *)(*(void *)this + 16));
        goto LABEL_25;
      case 'R':
        if (a2)
        {
          v65[0] = *(void *)(v4 + 16);
          v67[0] = (uint64_t)"=";
          unint64_t v68 = v65;
          __int16 v69 = 3075;
          char v32 = 2;
          char v33 = 3;
          uint64_t v34 = (uint64_t *)"alignstack";
          uint64_t v35 = (const char *)v67;
        }
        else
        {
          v63[0] = *(void *)(v4 + 16);
          v65[0] = (uint64_t)"(";
          v65[2] = (uint64_t)v63;
          __int16 v66 = 3075;
          v67[0] = (uint64_t)"alignstack";
          unint64_t v68 = v65;
          char v32 = 3;
          char v33 = 2;
          uint64_t v35 = ")";
          __int16 v69 = 515;
          uint64_t v34 = v67;
        }
        *(void *)&long long v70 = v34;
        int v71 = (char *)v35;
        LOBYTE(v73) = v33;
        BYTE1(v73) = v32;
        goto LABEL_93;
      case 'S':
        int v36 = *(_DWORD *)(v4 + 16);
        if (!v36) {
          goto LABEL_12;
        }
        if (v36 == 2)
        {
          std::string::basic_string[abi:nn180100]<0>(a3, "uwtable");
        }
        else
        {
          v65[0] = (uint64_t)"uwtable(";
          unint64_t v45 = "async";
          __int16 v66 = 259;
          if (v36 == 1) {
            unint64_t v45 = "sync";
          }
          char v46 = 1;
          HIBYTE(v64) = 1;
          if (*v45)
          {
            v63[0] = (uint64_t)v45;
            char v46 = 3;
          }
          LOBYTE(v64) = v46;
LABEL_91:
          llvm::operator+(v65, v63, (uint64_t)v67);
          v61[0] = (uint64_t)")";
          __int16 v62 = 259;
          unsigned int v44 = v61;
LABEL_92:
          llvm::operator+(v67, v44, (uint64_t)&v70);
LABEL_93:
          llvm::Twine::str((llvm::Twine *)&v70, a3);
        }
        return;
      case 'T':
        unint64_t v41 = *(void *)(v4 + 16);
        unint64_t v37 = HIDWORD(v41);
        BOOL v38 = v41 == 0;
        uint64_t v39 = v41 != 0;
        uint64_t v40 = v41 & 0xFFFFFF00;
        unint64_t v41 = v41;
        LODWORD(v70) = v37;
        if (v38) {
          unint64_t v41 = 0;
        }
        *(void *)((char *)&v70 + 4) = v41 | v40 | (v39 << 32);
        uint64_t VScaleRangeMax = llvm::Attribute::getVScaleRangeMax(this);
        v61[0] = (uint64_t)"vscale_range(";
        __int16 v62 = 259;
        __int16 v60 = 264;
        LODWORD(v59[0]) = v70;
        llvm::operator+(v61, v59, (uint64_t)v63);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)",";
        __int16 v58 = 259;
        llvm::operator+(v63, (uint64_t *)&__p, (uint64_t)v65);
        if ((VScaleRangeMax & 0xFF00000000) != 0) {
          int v43 = VScaleRangeMax;
        }
        else {
          int v43 = 0;
        }
        __int16 v56 = 264;
        LODWORD(v55[0]) = v43;
        llvm::operator+(v65, v55, (uint64_t)v67);
        unint64_t v53 = ")";
        __int16 v54 = 259;
        goto LABEL_74;
      default:
        goto LABEL_12;
    }
    while (1)
    {
      int v49 = (v28 >> v47) & 3;
      if (v49 != v29) {
        break;
      }
LABEL_108:
      ++v48;
      v47 += 2;
      if (v48 == 3)
      {
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v70, ")", 1uLL);
        uint64_t v52 = v73 - v71;
        if (v73 != v71)
        {
          int v73 = v71;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v70, v71, v52);
        }
        goto LABEL_24;
      }
    }
    if ((v31 & 1) == 0) {
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v70, ", ", 2uLL);
    }
    if (v48)
    {
      if (v48 != 1)
      {
LABEL_107:
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v70, off_265597330[v49]);
        char v31 = 0;
        goto LABEL_108;
      }
      BOOL v50 = "inaccessiblemem: ";
      size_t v51 = 17;
    }
    else
    {
      BOOL v50 = "argmem: ";
      size_t v51 = 8;
    }
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v70, v50, v51);
    goto LABEL_107;
  }
LABEL_12:
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  DWORD2(v70) = 0;
  char v74 = 0;
  uint64_t v75 = 0;
  int v76 = 1;
  BOOL v72 = 0;
  int v73 = 0;
  int v71 = 0;
  *(void *)&long long v70 = &unk_270DBD6E0;
  unsigned __int8 v77 = a3;
  llvm::raw_ostream::SetUnbuffered(&v70);
  uint64_t v11 = v73;
  if (v73 >= v72)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v70, 34);
  }
  else
  {
    ++v73;
    *uint64_t v11 = 34;
  }
  uint64_t v16 = *(void *)this;
  if (*(void *)this)
  {
    uint64_t v17 = (const void *)(v16 + 24);
    size_t v18 = *(unsigned int *)(v16 + 12);
  }
  else
  {
    uint64_t v17 = 0;
    size_t v18 = 0;
  }
  char v19 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v70, v17, v18);
  uint64_t v20 = (unsigned char *)*((void *)v19 + 4);
  if ((unint64_t)v20 >= *((void *)v19 + 3))
  {
    llvm::raw_ostream::write(v19, 34);
  }
  else
  {
    *((void *)v19 + 4) = v20 + 1;
    *uint64_t v20 = 34;
  }
  uint64_t v21 = *(unsigned int *)(*(void *)this + 16);
  if (v21)
  {
    uint64_t v22 = (llvm::raw_ostream *)(*(void *)this + *(unsigned int *)(*(void *)this + 12) + 25);
    if ((unint64_t)(v72 - v73) > 1)
    {
      *(_WORD *)int v73 = 8765;
      v73 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v70, "=\"", 2uLL);
    }
    llvm::printEscapedString(v22, v21, (llvm::raw_ostream *)&v70);
    if (v72 == v73) {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v70, "\"", 1uLL);
    }
    else {
      *v73++ = 34;
    }
  }
LABEL_24:
  uint64_t v15 = (llvm::raw_ostream *)&v70;
LABEL_25:
  llvm::raw_ostream::~raw_ostream(v15);
}

void llvm::Attribute::getAsString(BOOL)const::$_0::operator()(std::string *a1, char a2, uint64_t a3, unsigned __int8 *a4)
{
  int v4 = *a4;
  if (a2)
  {
    if (a3) {
      uint64_t v5 = *(void *)(a3 + 16);
    }
    else {
      uint64_t v5 = 0;
    }
    *(void *)&long long v11 = v5;
    *(void *)&long long v14 = "=";
    *(void *)&long long v15 = &v11;
    LOWORD(v16) = 3075;
    if (!v4)
    {
      long long v17 = v14;
      long long v18 = v15;
      uint64_t v19 = v16;
      goto LABEL_19;
    }
    *(void *)&long long v17 = a4;
    *(void *)&long long v18 = &v14;
    __int16 v7 = 515;
    goto LABEL_9;
  }
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 16);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v10 = v6;
  *(void *)&long long v11 = "(";
  *(void *)&long long v12 = &v10;
  LOWORD(v13) = 3075;
  if (v4)
  {
    *(void *)&long long v14 = a4;
    *(void *)&long long v15 = &v11;
    LOWORD(v16) = 515;
    char v8 = 3;
  }
  else
  {
    long long v14 = v11;
    long long v15 = v12;
    uint64_t v16 = v13;
    char v8 = v13;
    if (v13 == 1)
    {
      *(void *)&long long v17 = ")";
      __int16 v7 = 259;
LABEL_9:
      LOWORD(v19) = v7;
      goto LABEL_19;
    }
  }
  if (BYTE1(v16) != 1) {
    char v8 = 2;
  }
  uint64_t v9 = &v14;
  if (BYTE1(v16) == 1) {
    uint64_t v9 = (long long *)v14;
  }
  *(void *)&long long v17 = v9;
  *((void *)&v17 + 1) = *((void *)&v14 + 1);
  *(void *)&long long v18 = ")";
  LOBYTE(v19) = v8;
  BYTE1(v19) = 3;
LABEL_19:
  llvm::Twine::str((llvm::Twine *)&v17, a1);
}

std::string *llvm::join<llvm::StringRef *>(std::string *this, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = this;
    std::string::size_type v6 = ((a3 - a2) >> 4) - 1;
    uint64_t v7 = a2;
    do
    {
      v6 += *(void *)(v7 + 8);
      v7 += 16;
    }
    while (v7 != a3);
    std::string::reserve(this, v6);
    this = std::string::append(v5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    for (uint64_t i = a2 + 16; i != a3; this = std::string::append(v5, v9, v10))
    {
      std::string::append(v5, ",", 1uLL);
      uint64_t v9 = *(const std::string::value_type **)i;
      std::string::size_type v10 = *(void *)(i + 8);
      i += 16;
    }
  }
  return this;
}

BOOL llvm::Attribute::hasParentContext(uint64_t *a1, void *a2)
{
  v9[16] = *MEMORY[0x263EF8340];
  v8[0] = v9;
  v8[1] = (void *)0x2000000000;
  llvm::AttributeImpl::Profile(*a1, (unsigned int *)v8);
  unint64_t NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(*a2 + 264, (uint64_t)v8, &v7, (uint64_t)llvm::FoldingSet<llvm::AttributeImpl>::getFoldingSetInfo(void)::Info);
  uint64_t v5 = *a1;
  if (v8[0] != v9) {
    free(v8[0]);
  }
  return NodeOrInsertPos == (void *)v5;
}

unsigned int *llvm::AttributeImpl::Profile(uint64_t a1, unsigned int *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      int v9 = *(_DWORD *)(a1 + 12);
      uint64_t v10 = *(void *)(a1 + 16);
      long long v11 = a2;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 8))
      {
        int v4 = *(_DWORD *)(a1 + 12);
        return llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a2, v4);
      }
      int v9 = *(_DWORD *)(a1 + 12);
      uint64_t v10 = *(void *)(a1 + 16);
      long long v11 = a2;
    }
    return llvm::AttributeImpl::Profile(v11, v9, v10);
  }
  uint64_t v6 = a1 + 24;
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  uint64_t result = llvm::FoldingSetNodeID::AddString(a2, (unsigned char *)(a1 + 24), v8);
  if (v7)
  {
    return llvm::FoldingSetNodeID::AddString(a2, (unsigned char *)(v6 + v8 + 1), v7);
  }
  return result;
}

uint64_t llvm::AttributeImpl::operator<(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v19 = v2;
  uint64_t v20 = v3;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) == 2)
  {
    if (v6 == 2)
    {
      uint64_t v7 = a1 + 24;
      uint64_t v8 = *(unsigned int *)(a1 + 12);
      uint64_t v9 = a2 + 24;
      size_t v10 = *(unsigned int *)(a2 + 12);
      if (v8 == v10
        && (!v8 || !memcmp((const void *)(a1 + 24), (const void *)(a2 + 24), *(unsigned int *)(a1 + 12))))
      {
        uint64_t v16 = *(unsigned int *)(a1 + 16);
        size_t v12 = *(unsigned int *)(a2 + 16);
        long long v11 = (const void *)(v9 + v10 + 1);
        uint64_t v17 = v7 + v8 + 1;
        uint64_t v18 = v16;
      }
      else
      {
        uint64_t v17 = a1 + 24;
        uint64_t v18 = v8;
        long long v11 = (const void *)(a2 + 24);
        size_t v12 = v10;
      }
      return llvm::StringRef::compare((uint64_t)&v17, v11, v12) >> 31;
    }
    else
    {
      return 0;
    }
  }
  else if (v6 == 2)
  {
    return 1;
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 12);
    int v15 = *(_DWORD *)(a2 + 12);
    if (v14 == v15) {
      return *(void *)(a1 + 16) < *(void *)(a2 + 16);
    }
    else {
      return v14 < v15;
    }
  }
}

uint64_t *llvm::AttributeSetNode::get(uint64_t *a1, unsigned char *a2, uint64_t a3)
{
  v9[8] = *MEMORY[0x263EF8340];
  __base = v9;
  size_t __nel = 0x800000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&__base, a2, &a2[8 * a3]);
  unsigned int v4 = __nel;
  if (__nel >= 2)
  {
    qsort(__base, __nel, 8uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<llvm::Attribute>);
    unsigned int v4 = __nel;
  }
  Sorted = llvm::AttributeSetNode::getSorted(a1, (uint64_t *)__base, v4);
  if (__base != v9) {
    free(__base);
  }
  return Sorted;
}

uint64_t **llvm::AttrBuilder::addAttribute(uint64_t **a1, int a2)
{
  unsigned int v4 = (unsigned int *)(a1 + 1);
  unint64_t v5 = llvm::Attribute::get(*a1, a2, 0);
  addAttributeImpl<llvm::Attribute::AttrKind>(v4, a2, v5);
  return a1;
}

uint64_t *llvm::AttributeSet::removeAttribute(uint64_t **a1, uint64_t *a2, int a3)
{
  v10[8] = *MEMORY[0x263EF8340];
  Sorted = *a1;
  if (*a1)
  {
    if ((*((unsigned __int8 *)Sorted + a3 / 8 + 12) >> (a3 & 7)))
    {
      uint64_t v7 = a2;
      uint64_t v8 = v10;
      uint64_t v9 = 0x800000000;
      llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v8, (uint64_t)v10, Sorted + 6, &Sorted[*((unsigned int *)Sorted + 2) + 6]);
      llvm::AttrBuilder::removeAttribute((uint64_t)&v7, a3);
      Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v8, v9);
      if (v8 != v10) {
        free(v8);
      }
    }
  }
  return Sorted;
}

uint64_t llvm::AttrBuilder::removeAttribute(uint64_t a1, int a2)
{
  int v8 = a2;
  uint64_t v3 = llvm::lower_bound<llvm::SmallVector<llvm::Attribute,8u> &,llvm::Attribute::AttrKind &,AttributeComparator>(a1 + 8, &v8);
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8) + 8 * v4;
  if (v3 != (uint64_t *)v5)
  {
    uint64_t v6 = *v3;
    if (*v3)
    {
      if (*(unsigned char *)(v6 + 8) == 2 || *(_DWORD *)(v6 + 12) != v8) {
        return a1;
      }
    }
    else if (v8)
    {
      return a1;
    }
    if ((uint64_t *)v5 != v3 + 1)
    {
      memmove(v3, v3 + 1, v5 - (void)(v3 + 1));
      LODWORD(v4) = *(_DWORD *)(a1 + 16);
    }
    *(_DWORD *)(a1 + 16) = v4 - 1;
  }
  return a1;
}

uint64_t llvm::AttrBuilder::removeAttribute(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v12 = a2;
  uint64_t v13 = a3;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = &v4[*(unsigned int *)(a1 + 16)];
  char v14 = 0;
  uint64_t v6 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::Attribute *,llvm::Attribute *,llvm::StringRef,std::__identity,AttributeComparator>(v4, v5, (uint64_t)&v12);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 8) + 8 * v7;
  if (v6 != (uint64_t *)v8)
  {
    uint64_t v9 = v6;
    uint64_t v10 = *v6;
    if (v10)
    {
      if (*(unsigned char *)(v10 + 8) == 2 && llvm::AttributeImpl::hasAttribute(v10, v12, v13))
      {
        if ((uint64_t *)v8 != v9 + 1)
        {
          memmove(v9, v9 + 1, v8 - (void)(v9 + 1));
          LODWORD(v7) = *(_DWORD *)(a1 + 16);
        }
        *(_DWORD *)(a1 + 16) = v7 - 1;
      }
    }
  }
  return a1;
}

uint64_t *llvm::AttributeSet::removeAttributes(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  v16[8] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  uint64_t v13 = a2;
  char v14 = v16;
  uint64_t v15 = 0x800000000;
  if (v6)
  {
    uint64_t v7 = v6 + 6;
    uint64_t v8 = &v6[*((unsigned int *)v6 + 2) + 6];
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v14, (uint64_t)v16, v7, v8);
  if (v15)
  {
    uint64_t v9 = (uint64_t *)v14;
    uint64_t v10 = 8 * v15;
    while (!llvm::AttributeMask::contains(a3, *v9))
    {
      ++v9;
      v10 -= 8;
      if (!v10) {
        goto LABEL_8;
      }
    }
    llvm::AttrBuilder::remove((uint64_t)&v13, a3);
    Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v14, v15);
  }
  else
  {
LABEL_8:
    Sorted = *a1;
  }
  if (v14 != v16) {
    free(v14);
  }
  return Sorted;
}

uint64_t llvm::AttrBuilder::remove(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = &v4[v5];
  if (v5)
  {
    uint64_t v7 = 8 * v5;
    while (!llvm::AttributeMask::contains(a2, *v4))
    {
      ++v4;
      v7 -= 8;
      if (!v7)
      {
        uint64_t v4 = v6;
        goto LABEL_13;
      }
    }
  }
  uint64_t v8 = v4 + 1;
  if (v4 != v6 && v8 != v6)
  {
    do
    {
      if (!llvm::AttributeMask::contains(a2, *v8)) {
        *v4++ = *v8;
      }
      ++v8;
    }
    while (v8 != v6);
  }
LABEL_13:
  *(_DWORD *)(a1 + 16) = ((unint64_t)v4 - *(void *)(a1 + 8)) >> 3;
  return a1;
}

uint64_t llvm::AttributeSet::getAttribute(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = *a1;
  if (!*a1) {
    return 0;
  }
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v8 = 0;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v4 + 24), (uint64_t)v7, &v8, a4);
  uint64_t result = 0;
  if (v5) {
    return *(void *)(v8 + 16);
  }
  return result;
}

uint64_t llvm::AttributeSetNode::getAlignment(llvm::AttributeSetNode *this)
{
  uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute((uint64_t)this, 75);
  if (v2)
  {
    unint64_t v3 = *(void *)(EnumAttribute + 16);
    unsigned int v4 = __clz(v3) ^ 0x3F | 0x100;
    if (v3) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = 0;
    }
    unsigned int v6 = v5 >> 8;
  }
  else
  {
    LOBYTE(v5) = 0;
    unsigned int v6 = 0;
  }
  return v5 | (v6 << 8);
}

uint64_t llvm::AttributeSet::getByRefType(llvm::AttributeSet *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 69);
    if (v3) {
      BOOL v4 = EnumAttribute == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      return 0;
    }
    else {
      return *(void *)(EnumAttribute + 16);
    }
  }
  return result;
}

uint64_t llvm::AttributeSet::getByValType(llvm::AttributeSet *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 70);
    if (v3) {
      BOOL v4 = EnumAttribute == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      return 0;
    }
    else {
      return *(void *)(EnumAttribute + 16);
    }
  }
  return result;
}

uint64_t llvm::AttributeSet::getPreallocatedType(llvm::AttributeSet *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 73);
    if (v3) {
      BOOL v4 = EnumAttribute == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      return 0;
    }
    else {
      return *(void *)(EnumAttribute + 16);
    }
  }
  return result;
}

uint64_t llvm::AttributeSet::getInAllocaType(llvm::AttributeSet *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 72);
    if (v3) {
      BOOL v4 = EnumAttribute == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      return 0;
    }
    else {
      return *(void *)(EnumAttribute + 16);
    }
  }
  return result;
}

uint64_t llvm::AttributeSet::getElementType(llvm::AttributeSet *this)
{
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 71);
    if (v3) {
      BOOL v4 = EnumAttribute == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4) {
      return 0;
    }
    else {
      return *(void *)(EnumAttribute + 16);
    }
  }
  return result;
}

uint64_t llvm::AttributeSetNode::getAllocSizeArgs(llvm::AttributeSetNode *this)
{
  uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute((uint64_t)this, 77);
  if (!v2) {
    return 0;
  }
  unint64_t v5 = *(void *)(EnumAttribute + 16);
  unint64_t v3 = HIDWORD(v5);
  int v4 = v5 & 0xFFFFFF00;
  LODWORD(v5) = v5;
  LODWORD(v7) = v3;
  if (*(void *)(EnumAttribute + 16) == 0xFFFFFFFFLL) {
    LODWORD(v5) = 0;
  }
  HIDWORD(v7) = v5 | v4;
  return v7;
}

uint64_t llvm::AttributeSetNode::getVScaleRangeMin(llvm::AttributeSetNode *this)
{
  uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute((uint64_t)this, 84);
  if (v2) {
    return *(unsigned int *)(EnumAttribute + 20);
  }
  else {
    return 1;
  }
}

uint64_t llvm::AttributeSetNode::getVScaleRangeMax(llvm::AttributeSetNode *this)
{
  uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute((uint64_t)this, 84);
  if (!v2) {
    return 0;
  }
  unint64_t v5 = *(void *)(EnumAttribute + 16);
  unint64_t v3 = HIDWORD(v5);
  int v4 = v5 & 0xFFFFFF00;
  LODWORD(v5) = v5;
  LODWORD(v8) = v3;
  if (!*(void *)(EnumAttribute + 16)) {
    LODWORD(v5) = 0;
  }
  HIDWORD(v8) = v5 | v4;
  *((void *)&v7 + 1) = *(void *)(EnumAttribute + 16) != 0;
  *(void *)&long long v7 = v8;
  return v7 >> 32;
}

void llvm::AttributeSet::getAsString(llvm::AttributeSetNode **this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  unint64_t v3 = *this;
  if (v3) {
    llvm::AttributeSetNode::getAsString(v3, a2, a3);
  }
  else {
    std::string::basic_string[abi:nn180100]<0>(a3, (char *)&str_119);
  }
}

void llvm::AttributeSetNode::getAsString(llvm::AttributeSetNode *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4)
  {
    uint64_t v6 = 0;
    long long v7 = (char *)this + 48;
    uint64_t v8 = 8 * v4;
    do
    {
      if (v6) {
        std::string::push_back(a3, 32);
      }
      llvm::Attribute::getAsString((llvm::Attribute *)&v7[v6], a2, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v6 += 8;
    }
    while (v8 != v6);
  }
}

BOOL llvm::AttributeSet::hasParentContext(uint64_t a1, void *a2)
{
  v9[16] = *MEMORY[0x263EF8340];
  v8[0] = v9;
  v8[1] = (void *)0x2000000000;
  llvm::AttributeListImpl::Profile((unsigned int *)v8, (uint64_t *)(*(void *)a1 + 48), *(unsigned int *)(*(void *)a1 + 8));
  unint64_t NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(*a2 + 296, (uint64_t)v8, &v7, (uint64_t)llvm::FoldingSet<llvm::AttributeSetNode>::getFoldingSetInfo(void)::Info);
  unint64_t v5 = *(void **)a1;
  if (v8[0] != v9) {
    free(v8[0]);
  }
  return NodeOrInsertPos == v5;
}

uint64_t llvm::AttributeSetNode::AttributeSetNode(uint64_t a1, const void *a2, uint64_t a3)
{
  unsigned int v3 = a3;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 12) = 0u;
  uint64_t v5 = a1 + 12;
  *(_OWORD *)(a1 + 28) = 0u;
  if (a3)
  {
    uint64_t v6 = (uint64_t *)(a1 + 48);
    memmove((void *)(a1 + 48), a2, 8 * a3);
    if (v3)
    {
      uint64_t v8 = 8 * v3;
      while (1)
      {
        uint64_t v9 = *v6;
        if (!*v6) {
          goto LABEL_13;
        }
        if (*(unsigned char *)(v9 + 8) != 2) {
          break;
        }
        uint64_t v10 = *(unsigned int *)(v9 + 12);
        *(void *)&long long v16 = v9 + 24;
        *((void *)&v16 + 1) = v10;
        uint64_t v17 = v9;
        uint64_t v18 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 24), (uint64_t)&v16, &v18, v7) & 1) == 0)
        {
          int v11 = *(_DWORD *)(a1 + 32);
          unsigned int v12 = *(_DWORD *)(a1 + 40);
          if (4 * v11 + 4 >= 3 * v12)
          {
            v12 *= 2;
          }
          else if (v12 + ~v11 - *(_DWORD *)(a1 + 36) > v12 >> 3)
          {
LABEL_9:
            uint64_t v13 = v18;
            ++*(_DWORD *)(a1 + 32);
            if (*v13 != -1) {
              --*(_DWORD *)(a1 + 36);
            }
            *(_OWORD *)uint64_t v13 = v16;
            uint64_t v13[2] = v17;
            goto LABEL_14;
          }
          llvm::DenseMap<llvm::StringRef,llvm::jitlink::Block *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Block *>>::grow(a1 + 24, v12);
          uint64_t v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 24), (uint64_t)&v16, &v18, v14);
          goto LABEL_9;
        }
LABEL_14:
        ++v6;
        v8 -= 8;
        if (!v8) {
          return a1;
        }
      }
      LODWORD(v9) = *(_DWORD *)(v9 + 12);
LABEL_13:
      *(unsigned char *)(v5 + (int)v9 / 8) |= 1 << (v9 & 7);
      goto LABEL_14;
    }
  }
  return a1;
}

uint64_t *llvm::AttributeSetNode::getSorted(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v15[16] = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  uint64_t v5 = *a1;
  v14[0] = v15;
  v14[1] = (void *)0x2000000000;
  uint64_t v6 = 8 * a3;
  uint64_t v7 = 8 * a3;
  uint64_t v8 = a2;
  do
  {
    uint64_t v9 = *v8++;
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v14, v9);
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)v14, SHIDWORD(v9));
    v7 -= 8;
  }
  while (v7);
  uint64_t v13 = 0;
  uint64_t v10 = v5 + 296;
  unint64_t NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(v10, (uint64_t)v14, &v13, (uint64_t)llvm::FoldingSet<llvm::AttributeSetNode>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    unint64_t NodeOrInsertPos = (uint64_t *)operator new(v6 + 48);
    llvm::AttributeSetNode::AttributeSetNode((uint64_t)NodeOrInsertPos, a2, a3);
    llvm::FoldingSetBase::InsertNode(v10, NodeOrInsertPos, v13, (uint64_t)llvm::FoldingSet<llvm::AttributeSetNode>::getFoldingSetInfo(void)::Info);
  }
  if (v14[0] != v15) {
    free(v14[0]);
  }
  return NodeOrInsertPos;
}

uint64_t llvm::AttributeSetNode::findEnumAttribute(uint64_t a1, int a2)
{
  if (((*(unsigned __int8 *)(a1 + a2 / 8 + 12) >> (a2 & 7)) & 1) == 0) {
    return 0;
  }
  char v2 = (void *)(a1 + 48);
  uint64_t v3 = 8 * *(unsigned int *)(a1 + 8) - 8 * *(unsigned int *)(a1 + 32);
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    do
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = &v2[v4 >> 1];
      uint64_t v7 = *v6;
      if (*v6) {
        LODWORD(v7) = *(_DWORD *)(v7 + 12);
      }
      uint64_t v8 = v6 + 1;
      v4 += ~v5;
      if ((int)v7 < a2) {
        char v2 = v8;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  return *v2;
}

uint64_t llvm::AttributeListImpl::AttributeListImpl(uint64_t a1, void *__src, uint64_t a3)
{
  unint64_t v4 = __src;
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(void *)(a1 + 12) = 0;
  uint64_t v6 = a1 + 12;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  if (a3) {
    memmove((void *)(a1 + 40), __src, 8 * a3);
  }
  uint64_t v7 = *v4;
  if (*v4) {
    uint64_t v8 = (uint64_t *)(*v4 + 48);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    uint64_t v9 = *v4 + 48 + 8 * *(unsigned int *)(v7 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8 != (uint64_t *)v9)
  {
    while (1)
    {
      uint64_t v10 = *v8;
      if (!*v8) {
        goto LABEL_13;
      }
      if (*(unsigned char *)(v10 + 8) != 2) {
        break;
      }
LABEL_14:
      if (++v8 == (uint64_t *)v9) {
        goto LABEL_15;
      }
    }
    LODWORD(v10) = *(_DWORD *)(v10 + 12);
LABEL_13:
    *(unsigned char *)(v6 + (int)v10 / 8) |= 1 << (v10 & 7);
    goto LABEL_14;
  }
LABEL_15:
  if (a3)
  {
    int v11 = &v4[a3];
    do
    {
      uint64_t v12 = *v4;
      if (*v4) {
        uint64_t v13 = (uint64_t *)(*v4 + 48);
      }
      else {
        uint64_t v13 = 0;
      }
      if (v12) {
        uint64_t v14 = *v4 + 48 + 8 * *(unsigned int *)(v12 + 8);
      }
      else {
        uint64_t v14 = 0;
      }
      while (v13 != (uint64_t *)v14)
      {
        uint64_t v15 = *v13;
        if (*v13)
        {
          if (*(unsigned char *)(v15 + 8) == 2) {
            goto LABEL_27;
          }
          LODWORD(v15) = *(_DWORD *)(v15 + 12);
        }
        *(unsigned char *)(a1 + 24 + (int)v15 / 8) |= 1 << (v15 & 7);
LABEL_27:
        ++v13;
      }
      ++v4;
    }
    while (v4 != v11);
  }
  return a1;
}

unsigned int *llvm::AttributeListImpl::Profile(unsigned int *result, uint64_t *a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v4 = result;
    uint64_t v5 = 8 * a3;
    do
    {
      uint64_t v6 = *a2++;
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v4, v6);
      uint64_t result = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v4, SHIDWORD(v6));
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

BOOL llvm::AttributeListImpl::hasAttrSomewhere(uint64_t a1, int a2, int *a3)
{
  if (a2 >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = a2 + 7;
  }
  int v4 = 1 << (a2 & 7);
  int v5 = (v4 & *(unsigned char *)(a1 + (v3 >> 3) + 24));
  if (a3)
  {
    if ((v4 & *(unsigned char *)(a1 + (v3 >> 3) + 24)) != 0)
    {
      uint64_t v6 = *(unsigned int *)(a1 + 8);
      if (v6)
      {
        uint64_t v7 = (uint64_t)v3 >> 3;
        uint64_t v8 = (void *)(a1 + 40);
        int v9 = -1;
        while (!*v8 || (v4 & *(unsigned char *)(*v8 + v7 + 12)) == 0)
        {
          ++v9;
          ++v8;
          if (!--v6) {
            return v5 != 0;
          }
        }
        *a3 = v9;
      }
    }
  }
  return v5 != 0;
}

uint64_t *llvm::AttributeList::getImpl(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  v10[16] = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  llvm::AttributeListImpl::Profile((unsigned int *)v9, a2, a3);
  uint64_t v8 = 0;
  unint64_t NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(v5 + 280, (uint64_t)v9, &v8, (uint64_t)llvm::FoldingSet<llvm::AttributeListImpl>::getFoldingSetInfo(void)::Info);
  if (!NodeOrInsertPos)
  {
    unint64_t NodeOrInsertPos = (uint64_t *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v5 + 2072, 8 * a3 + 40, 3);
    llvm::AttributeListImpl::AttributeListImpl((uint64_t)NodeOrInsertPos, a2, a3);
    llvm::FoldingSetBase::InsertNode(v5 + 280, NodeOrInsertPos, v8, (uint64_t)llvm::FoldingSet<llvm::AttributeListImpl>::getFoldingSetInfo(void)::Info);
  }
  if (v9[0] != v10) {
    free(v9[0]);
  }
  return NodeOrInsertPos;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  void v11[4] = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  uint64_t v3 = a2;
  uint64_t v5 = a2 + 16 * a3;
  int v6 = *(_DWORD *)(v5 - 16);
  if (v6 == -1)
  {
    if (a3 < 2) {
      int v6 = -1;
    }
    else {
      int v6 = *(_DWORD *)(a2 + 16 * a3 - 32);
    }
  }
  int v9 = v11;
  uint64_t v10 = 0x400000000;
  llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v9, (v6 + 2));
  do
  {
    *((void *)v9 + (*(_DWORD *)v3 + 1)) = *(void *)(v3 + 8);
    v3 += 16;
  }
  while (v3 != v5);
  Impl = llvm::AttributeList::getImpl(a1, (uint64_t *)v9, v10);
  if (v9 != v11) {
    free(v9);
  }
  return Impl;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5)
{
  v18[8] = *MEMORY[0x263EF8340];
  LODWORD(v10) = a5 + 3;
  unint64_t v11 = a5;
  do
  {
    if (!v11) {
      goto LABEL_7;
    }
    uint64_t v12 = a4[--v11];
    unint64_t v10 = (v10 - 1);
  }
  while (!v12);
  if (!v10)
  {
LABEL_7:
    if (a3)
    {
      LODWORD(v10) = 2;
    }
    else
    {
      if (!a2) {
        return 0;
      }
      LODWORD(v10) = 1;
    }
    long long v16 = v18;
    uint64_t v17 = 0x800000000;
    goto LABEL_12;
  }
  long long v16 = v18;
  uint64_t v17 = 0x800000000;
  if (v10 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, v10, 8);
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v16, a2);
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v16, a3);
    goto LABEL_14;
  }
LABEL_12:
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v16, a2);
  if (v10 == 1) {
    goto LABEL_17;
  }
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v16, a3);
  if (v10 < 3) {
    goto LABEL_17;
  }
LABEL_14:
  unint64_t v13 = (v10 - 2);
  if (a5 < v13) {
    unint64_t v13 = a5;
  }
  llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v16, (uint64_t)v16 + 8 * v17, a4, &a4[v13]);
LABEL_17:
  Impl = llvm::AttributeList::getImpl(a1, (uint64_t *)v16, v17);
  if (v16 != v18) {
    free(v16);
  }
  return Impl;
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, int a2, uint64_t a3)
{
  v10[8] = *MEMORY[0x263EF8340];
  if (!a3) {
    return 0;
  }
  unsigned int v5 = a2 + 1;
  uint64_t v8 = v10;
  uint64_t v9 = 0x800000000;
  llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v8, (a2 + 2));
  *((void *)v8 + v5) = a3;
  Impl = llvm::AttributeList::getImpl(a1, (uint64_t *)v8, v9);
  if (v8 != v10) {
    free(v8);
  }
  return Impl;
}

{
  uint64_t *Sorted;
  uint64_t vars8;

  Sorted = llvm::AttributeSetNode::getSorted(a1, *(uint64_t **)(a3 + 8), *(unsigned int *)(a3 + 16));
  return llvm::AttributeList::get(a1, a2, (uint64_t)Sorted);
}

uint64_t *llvm::AttributeList::get(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  Impl = a3;
  v31[8] = *MEMORY[0x263EF8340];
  if (a3)
  {
    if (a3 == (uint64_t *)1)
    {
      return (uint64_t *)*a2;
    }
    else
    {
      LODWORD(v5) = 0;
      uint64_t v6 = 8 * (void)a3;
      uint64_t v7 = a2;
      uint64_t v8 = &a2[(void)a3];
      do
      {
        uint64_t v9 = *v7;
        if (*v7) {
          LODWORD(v9) = *(_DWORD *)(v9 + 8);
        }
        if (v5 <= v9) {
          unint64_t v5 = v9;
        }
        else {
          unint64_t v5 = v5;
        }
        ++v7;
        v6 -= 8;
      }
      while (v6);
      if (v5)
      {
        int v29 = v31;
        uint64_t v30 = 0x800000000;
        llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v29, v5);
        for (unint64_t i = 0; i != v5; ++i)
        {
          char v25 = a1;
          unint64_t v26 = v28;
          unint64_t v11 = a2;
          uint64_t v27 = 0x800000000;
          do
          {
            uint64_t v12 = *v11;
            if (*v11 && i < *(unsigned int *)(v12 + 8))
            {
              uint64_t v13 = *(void *)(v12 + 8 * i + 40);
              uint64_t v22 = v24;
              uint64_t v23 = 0x800000000;
              if (v13)
              {
                uint64_t v14 = (uint64_t *)(v13 + 48);
                uint64_t v15 = (uint64_t *)(v13 + 48 + 8 * *(unsigned int *)(v13 + 8));
              }
              else
              {
                uint64_t v14 = 0;
                uint64_t v15 = 0;
              }
            }
            else
            {
              uint64_t v14 = 0;
              uint64_t v15 = 0;
              uint64_t v22 = v24;
              uint64_t v23 = 0x800000000;
            }
            llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v22, (uint64_t)v24, v14, v15);
            long long v16 = (uint64_t *)v22;
            if (v23)
            {
              uint64_t v17 = 8 * v23;
              do
              {
                uint64_t v18 = *v16++;
                llvm::AttrBuilder::addAttribute((uint64_t)&v25, v18);
                v17 -= 8;
              }
              while (v17);
              long long v16 = (uint64_t *)v22;
            }
            if (v16 != (uint64_t *)v24) {
              free(v16);
            }
            ++v11;
          }
          while (v11 != v8);
          Sorted = llvm::AttributeSetNode::getSorted(a1, (uint64_t *)v26, v27);
          *((void *)v29 + i) = Sorted;
          if (v26 != v28) {
            free(v26);
          }
        }
        Impl = llvm::AttributeList::getImpl(a1, (uint64_t *)v29, v30);
        if (v29 != v31) {
          free(v29);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return Impl;
}

uint64_t *llvm::AttributeList::addAttributeAtIndex(uint64_t **a1, uint64_t *a2, int a3, int a4)
{
  v17[8] = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  if (*a1 && (a3 + 1) < *((_DWORD *)v8 + 2) && (uint64_t v9 = v8[(a3 + 1) + 5]) != 0)
  {
    if ((*(unsigned __int8 *)(v9 + a4 / 8 + 12) >> (a4 & 7))) {
      return v8;
    }
    unint64_t v10 = (unsigned char *)(v9 + 48);
    unint64_t v11 = (unsigned char *)(v9 + 48 + 8 * *(unsigned int *)(v9 + 8));
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v11 = 0;
  }
  uint64_t v15 = v17;
  uint64_t v16 = 0x800000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v15, v10, v11);
  unint64_t v12 = llvm::Attribute::get(a2, a4, 0);
  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v15, v12);
  uint64_t v13 = llvm::AttributeSetNode::get(a2, v15, v16);
  uint64_t v8 = llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, (uint64_t)v13);
  if (v15 != v17) {
    free(v15);
  }
  return v8;
}

uint64_t *llvm::AttributeList::setAttributesAtIndex(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  void v18[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = (a3 + 1);
  uint64_t v8 = *a1;
  if (*a1) {
    uint64_t v9 = (unsigned char *)(*a1 + 40);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    unint64_t v10 = (unsigned char *)(*a1 + 40 + 8 * *(unsigned int *)(v8 + 8));
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v16 = v18;
  uint64_t v17 = 0x400000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v16, v9, v10);
  unsigned int v11 = v17;
  if (v17 > v7)
  {
    *((void *)v16 + v7) = a4;
    unint64_t v12 = (uint64_t *)v16;
    goto LABEL_10;
  }
  llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v16, (a3 + 2));
  unsigned int v11 = v17;
  *((void *)v16 + v7) = a4;
  unint64_t v12 = (uint64_t *)v16;
  if (v11)
  {
LABEL_10:
    while (1)
    {
      unsigned int v13 = v11;
      if (v12[v11 - 1]) {
        break;
      }
      --v11;
      LODWORD(v17) = v13 - 1;
      if (v13 == 1) {
        goto LABEL_12;
      }
    }
    Impl = llvm::AttributeList::getImpl(a2, v12, v11);
    unint64_t v12 = (uint64_t *)v16;
  }
  else
  {
LABEL_12:
    Impl = 0;
  }
  if (v12 != v18) {
    free(v12);
  }
  return Impl;
}

uint64_t llvm::AttrBuilder::addAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 8) != 2)
  {
    LODWORD(a2) = *(_DWORD *)(a2 + 12);
LABEL_5:
    addAttributeImpl<llvm::Attribute::AttrKind>((unsigned int *)(a1 + 8), a2, v2);
    return a1;
  }
  addAttributeImpl<llvm::StringRef>((unsigned int *)(a1 + 8), (const void *)(a2 + 24), *(unsigned int *)(a2 + 12), a2);
  return a1;
}

uint64_t *llvm::AttributeList::addParamAttribute(void *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  void v27[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = *a1;
  if (*a1) {
    unint64_t v10 = (unsigned char *)(*a1 + 40);
  }
  else {
    unint64_t v10 = 0;
  }
  if (v9) {
    unsigned int v11 = (unsigned char *)(*a1 + 40 + 8 * *(unsigned int *)(v9 + 8));
  }
  else {
    unsigned int v11 = 0;
  }
  char v25 = v27;
  uint64_t v26 = 0x400000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v25, v10, v11);
  int v12 = a3[a4 - 1];
  if (v26 <= v12 + 2) {
    llvm::SmallVectorImpl<llvm::AttributeSet>::resizeImpl<false>((uint64_t)&v25, (v12 + 3));
  }
  if (a4)
  {
    uint64_t v13 = 4 * a4;
    do
    {
      uint64_t v14 = (*a3 + 2);
      uint64_t v15 = *((void *)v25 + v14);
      uint64_t v21 = a2;
      uint64_t v22 = v24;
      uint64_t v23 = 0x800000000;
      if (v15)
      {
        uint64_t v16 = (uint64_t *)(v15 + 48);
        uint64_t v17 = (uint64_t *)(v15 + 48 + 8 * *(unsigned int *)(v15 + 8));
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
      }
      llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>((unsigned int *)&v22, (uint64_t)v24, v16, v17);
      llvm::AttrBuilder::addAttribute((uint64_t)&v21, a5);
      Sorted = llvm::AttributeSetNode::getSorted(a2, (uint64_t *)v22, v23);
      *((void *)v25 + v14) = Sorted;
      if (v22 != v24) {
        free(v22);
      }
      ++a3;
      v13 -= 4;
    }
    while (v13);
  }
  Impl = llvm::AttributeList::getImpl(a2, (uint64_t *)v25, v26);
  if (v25 != v27) {
    free(v25);
  }
  return Impl;
}

uint64_t *llvm::AttributeList::removeAttributeAtIndex(void *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7 = *a1;
  if (*a1 && (a3 + 1) < *(_DWORD *)(v7 + 8)) {
    uint64_t v8 = *(uint64_t **)(v7 + 8 * (a3 + 1) + 40);
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v11 = v8;
  uint64_t v9 = llvm::AttributeSet::removeAttribute(&v11, a2, a4);
  if (v8 == v9) {
    return (uint64_t *)*a1;
  }
  return llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, (uint64_t)v9);
}

uint64_t *llvm::AttributeList::removeAttributesAtIndex(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (*a1 && (a3 + 1) < *(_DWORD *)(v7 + 8)) {
    uint64_t v8 = *(uint64_t **)(v7 + 8 * (a3 + 1) + 40);
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v11 = v8;
  uint64_t v9 = llvm::AttributeSet::removeAttributes(&v11, a2, a4);
  if (v8 == v9) {
    return (uint64_t *)*a1;
  }
  return llvm::AttributeList::setAttributesAtIndex(a1, a2, a3, (uint64_t)v9);
}

uint64_t **llvm::AttrBuilder::addDereferenceableAttr(uint64_t **this, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = llvm::Attribute::get(*this, 78, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
  }
  return this;
}

uint64_t **llvm::AttrBuilder::addDereferenceableOrNullAttr(uint64_t **this, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = llvm::Attribute::get(*this, 79, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
  }
  return this;
}

uint64_t llvm::AttributeList::hasAttributeAtIndex(uint64_t *a1, int a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = *a1;
  if (!*a1) {
    return 0;
  }
  if ((a2 + 1) >= *(_DWORD *)(v4 + 8)) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8 * (a2 + 1) + 40);
  if (!v5) {
    return 0;
  }
  v7[0] = a3;
  v7[1] = a4;
  uint64_t v8 = 0;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v5 + 24), (uint64_t)v7, &v8, a4);
}

uint64_t llvm::AttributeList::getAttributeAtIndex(uint64_t *a1, int a2, int a3)
{
  uint64_t v3 = *a1;
  if (!*a1 || (a2 + 1) >= *(_DWORD *)(v3 + 8)) {
    return 0;
  }
  uint64_t result = *(void *)(v3 + 8 * (a2 + 1) + 40);
  if (result)
  {
    uint64_t result = llvm::AttributeSetNode::findEnumAttribute(result, a3);
    if (!v5) {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::AttributeList::getRetAlignment(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_6;
  }
  if (*(_DWORD *)(v1 + 8) < 2u)
  {
    LODWORD(v1) = 0;
LABEL_6:
    LOBYTE(v2) = 0;
    return v2 | (v1 << 8);
  }
  uint64_t v2 = *(llvm::AttributeSetNode **)(v1 + 48);
  if (v2)
  {
    LOWORD(v2) = llvm::AttributeSetNode::getAlignment(v2);
    LODWORD(v1) = BYTE1(v2);
  }
  else
  {
    LODWORD(v1) = 0;
  }
  return v2 | (v1 << 8);
}

uint64_t llvm::AttributeList::getParamAlignment(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this) {
    goto LABEL_6;
  }
  if ((a2 + 2) >= *(_DWORD *)(v2 + 8))
  {
    LODWORD(v2) = 0;
LABEL_6:
    LOBYTE(v3) = 0;
    return v3 | (v2 << 8);
  }
  uint64_t v3 = *(llvm::AttributeSetNode **)(v2 + 8 * (a2 + 2) + 40);
  if (v3)
  {
    LOWORD(v3) = llvm::AttributeSetNode::getAlignment(v3);
    LODWORD(v2) = BYTE1(v3);
  }
  else
  {
    LODWORD(v2) = 0;
  }
  return v3 | (v2 << 8);
}

uint64_t llvm::AttributeList::getParamStructRetType(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this || (a2 + 2) >= *(_DWORD *)(v2 + 8)) {
    return 0;
  }
  uint64_t result = *(void *)(v2 + 8 * (a2 + 2) + 40);
  if (!result) {
    return result;
  }
  uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 74);
  if (!v5 || EnumAttribute == 0) {
    return 0;
  }
  else {
    return *(void *)(EnumAttribute + 16);
  }
}

uint64_t llvm::AttributeList::getParamElementType(llvm::AttributeList *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (!*(void *)this || (a2 + 2) >= *(_DWORD *)(v2 + 8)) {
    return 0;
  }
  uint64_t result = *(void *)(v2 + 8 * (a2 + 2) + 40);
  if (!result) {
    return result;
  }
  uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 71);
  if (!v5 || EnumAttribute == 0) {
    return 0;
  }
  else {
    return *(void *)(EnumAttribute + 16);
  }
}

uint64_t llvm::AttributeList::getAllocKind(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)this || !*(_DWORD *)(v1 + 8)) {
    return 0;
  }
  uint64_t result = *(void *)(v1 + 40);
  if (!result) {
    return result;
  }
  uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(result, 76);
  if (v4) {
    return *(void *)(EnumAttribute + 16);
  }
  else {
    return 0;
  }
}

uint64_t llvm::AttributeList::getMemoryEffects(llvm::AttributeList *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this
    && *(_DWORD *)(v1 + 8)
    && (uint64_t v2 = *(void *)(v1 + 40)) != 0
    && (uint64_t EnumAttribute = llvm::AttributeSetNode::findEnumAttribute(v2, 80), v4))
  {
    return *(unsigned int *)(EnumAttribute + 16);
  }
  else
  {
    return 63;
  }
}

BOOL llvm::AttributeList::hasParentContext(uint64_t a1, void *a2)
{
  v9[16] = *MEMORY[0x263EF8340];
  v8[0] = v9;
  v8[1] = (void *)0x2000000000;
  llvm::AttributeListImpl::Profile((unsigned int *)v8, (uint64_t *)(*(void *)a1 + 40), *(unsigned int *)(*(void *)a1 + 8));
  unint64_t NodeOrInsertPos = llvm::FoldingSetBase::FindNodeOrInsertPos(*a2 + 280, (uint64_t)v8, &v7, (uint64_t)llvm::FoldingSet<llvm::AttributeListImpl>::getFoldingSetInfo(void)::Info);
  char v5 = *(void **)a1;
  if (v8[0] != v9) {
    free(v8[0]);
  }
  return NodeOrInsertPos == v5;
}

void llvm::AttributeList::print(llvm::AttributeSetNode **this, llvm::raw_ostream *a2)
{
  char v4 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v4 > 0xEuLL)
  {
    qmemcpy(v4, "AttributeList[\n", 15);
    *((void *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, "AttributeList[\n", 0xFuLL);
  }
  if (*this)
  {
    int v5 = *((_DWORD *)*this + 2);
    if (v5)
    {
      unsigned int v6 = 0;
      uint64_t v7 = 40;
      while (1)
      {
        uint64_t v8 = *this;
        if (*this)
        {
          if (v6 < *((_DWORD *)v8 + 2) && *(void *)((char *)v8 + v7)) {
            break;
          }
        }
LABEL_47:
        ++v6;
        v7 += 8;
        if (v5 == v6) {
          goto LABEL_48;
        }
      }
      uint64_t v9 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v9 > 3uLL)
      {
        _DWORD *v9 = 544940064;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  { ", 4uLL);
      }
      if (v6)
      {
        if (v6 == 1)
        {
          uint64_t v10 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v10) <= 5)
          {
            unsigned int v11 = a2;
            int v12 = "return";
            size_t v13 = 6;
LABEL_28:
            llvm::raw_ostream::write(v11, v12, v13);
            goto LABEL_29;
          }
          *(_WORD *)(v10 + 4) = 28274;
          *(_DWORD *)uint64_t v10 = 1970562418;
          uint64_t v16 = *((void *)a2 + 4) + 6;
        }
        else
        {
          uint64_t v15 = (_DWORD *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v15 > 3uLL)
          {
            *uint64_t v15 = 677868129;
            *((void *)a2 + 4) += 4;
          }
          else
          {
            llvm::raw_ostream::write(a2, "arg(", 4uLL);
          }
          write_unsigned<unsigned long>(a2, v6 - 2, 0, 0, 0);
          uint64_t v17 = (unsigned char *)*((void *)a2 + 4);
          if (*((unsigned char **)a2 + 3) == v17)
          {
            unsigned int v11 = a2;
            int v12 = ")";
            size_t v13 = 1;
            goto LABEL_28;
          }
          unsigned char *v17 = 41;
          uint64_t v16 = *((void *)a2 + 4) + 1;
        }
      }
      else
      {
        uint64_t v14 = (void *)*((void *)a2 + 4);
        if (*((void *)a2 + 3) - (void)v14 <= 7uLL)
        {
          unsigned int v11 = a2;
          int v12 = "function";
          size_t v13 = 8;
          goto LABEL_28;
        }
        *uint64_t v14 = 0x6E6F6974636E7566;
        uint64_t v16 = *((void *)a2 + 4) + 8;
      }
      *((void *)a2 + 4) = v16;
LABEL_29:
      uint64_t v18 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v18 > 3uLL)
      {
        *uint64_t v18 = 540949792;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, " => ", 4uLL);
      }
      uint64_t v19 = *this;
      if (*this)
      {
        if (v6 >= *((_DWORD *)v19 + 2)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = *(llvm::AttributeSetNode **)((char *)v19 + v7);
        }
      }
      char v25 = v19;
      llvm::AttributeSet::getAsString(&v25, 0, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      llvm::raw_ostream::write(a2, (const char *)p_p, size);
      uint64_t v22 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v22) > 2)
      {
        *(unsigned char *)(v22 + 2) = 10;
        *(_WORD *)uint64_t v22 = 32032;
        *((void *)a2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a2, " }\n", 3uLL);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  uint64_t v23 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v23 > 1uLL)
  {
    *uint64_t v23 = 2653;
    *((void *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, "]\n", 2uLL);
  }
}

uint64_t addAttributeImpl<llvm::StringRef>(unsigned int *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  int v12 = a2;
  uint64_t v13 = a3;
  unsigned int v6 = *(void **)a1;
  uint64_t v7 = &v6[a1[2]];
  char v14 = 0;
  uint64_t v8 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::Attribute *,llvm::Attribute *,llvm::StringRef,std::__identity,AttributeComparator>(v6, v7, (uint64_t)&v12);
  uint64_t v9 = v8;
  if (v8 != (uint64_t *)(*(void *)a1 + 8 * a1[2])
    && (uint64_t v10 = *v8, *v9)
    && *(unsigned char *)(v10 + 8) == 2
    && (uint64_t result = llvm::AttributeImpl::hasAttribute(v10, v12, v13), result))
  {
    uint64_t *v9 = a4;
  }
  else
  {
    uint64_t v15 = a4;
    return llvm::SmallVectorImpl<llvm::Attribute>::insert_one_impl<llvm::Attribute>(a1, (uint64_t)v9, &v15);
  }
  return result;
}

uint64_t *addAttributeImpl<llvm::Attribute::AttrKind>(unsigned int *a1, int a2, uint64_t a3)
{
  int v7 = a2;
  uint64_t result = llvm::lower_bound<llvm::SmallVector<llvm::Attribute,8u> &,llvm::Attribute::AttrKind &,AttributeComparator>((uint64_t)a1, &v7);
  if (result != (uint64_t *)(*(void *)a1 + 8 * a1[2]))
  {
    uint64_t v6 = *result;
    if (*result)
    {
      if (*(unsigned char *)(v6 + 8) != 2 && *(_DWORD *)(v6 + 12) == v7) {
        goto LABEL_5;
      }
    }
    else if (!v7)
    {
LABEL_5:
      *uint64_t result = a3;
      return result;
    }
  }
  uint64_t v8 = a3;
  return (uint64_t *)llvm::SmallVectorImpl<llvm::Attribute>::insert_one_impl<llvm::Attribute>(a1, (uint64_t)result, &v8);
}

void *llvm::lower_bound<llvm::SmallVector<llvm::Attribute,8u> &,llvm::Attribute::AttrKind &,AttributeComparator>(uint64_t a1, _DWORD *a2)
{
  uint64_t result = *(void **)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = &result[v4 >> 1];
      uint64_t v7 = *v6;
      if (!*v6) {
        goto LABEL_5;
      }
      if (*(unsigned char *)(v7 + 8) != 2) {
        break;
      }
LABEL_7:
      unint64_t v4 = v5;
      if (!v5) {
        return result;
      }
    }
    LODWORD(v7) = *(_DWORD *)(v7 + 12);
LABEL_5:
    uint64_t v8 = v6 + 1;
    unint64_t v9 = v4 + ~v5;
    if ((int)v7 < *a2)
    {
      unint64_t v5 = v9;
      uint64_t result = v8;
    }
    goto LABEL_7;
  }
  result += v4;
  return result;
}

uint64_t llvm::AttrBuilder::getAttribute(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v3 = llvm::lower_bound<llvm::SmallVector<llvm::Attribute,8u> &,llvm::Attribute::AttrKind &,AttributeComparator>(a1 + 8, &v5);
  if (v3 == (uint64_t *)(*(void *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 16))) {
    return 0;
  }
  uint64_t result = *v3;
  if (!result)
  {
    if (!v5) {
      return result;
    }
    return 0;
  }
  if (*(unsigned char *)(result + 8) == 2 || *(_DWORD *)(result + 12) != v5) {
    return 0;
  }
  return result;
}

uint64_t **llvm::AttrBuilder::addAlignmentAttr(uint64_t **a1, __int16 a2)
{
  if ((a2 & 0xFF00) != 0)
  {
    unint64_t v3 = llvm::Attribute::get(*a1, 75, 1 << a2);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
  }
  return a1;
}

uint64_t **llvm::AttrBuilder::addStackAlignmentAttr(uint64_t **a1, __int16 a2)
{
  if ((a2 & 0xFF00) != 0)
  {
    unint64_t v3 = llvm::Attribute::get(*a1, 82, 1 << a2);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
  }
  return a1;
}

uint64_t llvm::AttrBuilder::addAllocSizeAttrFromRawRepr(uint64_t **this, uint64_t a2)
{
  unint64_t v3 = llvm::Attribute::get(*this, 77, a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t **llvm::AttrBuilder::addVScaleRangeAttrFromRawRepr(uint64_t **this, uint64_t a2)
{
  if (a2)
  {
    unint64_t v3 = llvm::Attribute::get(*this, 84, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
  }
  return this;
}

uint64_t **llvm::AttrBuilder::addUWTableAttr(uint64_t **a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = llvm::Attribute::get(*a1, 83, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
  }
  return a1;
}

uint64_t llvm::AttrBuilder::addMemoryAttr(uint64_t **a1, unsigned int a2)
{
  unint64_t v3 = llvm::Attribute::get(*a1, 80, a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
}

uint64_t **llvm::AttrBuilder::addNoFPClassAttr(uint64_t **a1, unsigned int a2)
{
  if (a2)
  {
    unint64_t v3 = llvm::Attribute::get(*a1, 81, a2);
    llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
  }
  return a1;
}

uint64_t llvm::AttrBuilder::addAllocKindAttr(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = llvm::Attribute::get(*a1, 76, a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)a1, v3);
}

uint64_t llvm::AttrBuilder::addByValAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3 = llvm::Attribute::get(*this, 70, (uint64_t)a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::addStructRetAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3 = llvm::Attribute::get(*this, 74, (uint64_t)a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::addInAllocaAttr(uint64_t **this, llvm::Type *a2)
{
  unint64_t v3 = llvm::Attribute::get(*this, 72, (uint64_t)a2);
  return llvm::AttrBuilder::addAttribute((uint64_t)this, v3);
}

uint64_t llvm::AttrBuilder::getAttribute(uint64_t a1, const void *a2, uint64_t a3)
{
  unint64_t v9 = a2;
  uint64_t v10 = a3;
  unint64_t v4 = *(void **)(a1 + 8);
  int v5 = &v4[*(unsigned int *)(a1 + 16)];
  char v11 = 0;
  uint64_t v6 = std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::Attribute *,llvm::Attribute *,llvm::StringRef,std::__identity,AttributeComparator>(v4, v5, (uint64_t)&v9);
  if (v6 == (uint64_t *)(*(void *)(a1 + 8) + 8 * *(unsigned int *)(a1 + 16))) {
    return 0;
  }
  uint64_t v7 = *v6;
  if (!*v6 || *(unsigned char *)(v7 + 8) != 2) {
    return 0;
  }
  if (llvm::AttributeImpl::hasAttribute(*v6, v9, v10)) {
    return v7;
  }
  return 0;
}

BOOL llvm::AttributeFuncs::isNoFPClassCompatibleType(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 8);
  if (a1 && v1 == 17)
  {
    do
    {
      a1 = *(void *)(a1 + 24);
      int v1 = *(unsigned __int8 *)(a1 + 8);
      if (a1) {
        BOOL v2 = v1 == 17;
      }
      else {
        BOOL v2 = 0;
      }
    }
    while (v2);
  }
  if ((v1 & 0xFE) == 0x12) {
    int v1 = *(_DWORD *)(**(void **)(a1 + 16) + 8);
  }
  return v1 < 6u && ((0x2Fu >> v1) & 1) != 0 || (v1 & 0xFD) == 4;
}

uint64_t llvm::AttributeFuncs::typeIncompatible@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[4] = 0;
  a3[3] = 0;
  a3[2] = (uint64_t)(a3 + 3);
  int v7 = *(unsigned __int8 *)(result + 8);
  if (v7 != 13)
  {
    if (a2)
    {
      uint64_t v6 = 2;
      *a3 = 2;
      if ((a2 & 2) != 0) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v6 = 0;
      if ((a2 & 2) != 0)
      {
LABEL_4:
        v6 |= 0x1000000000000uLL;
        uint64_t v5 = 16;
        *a3 = v6;
        a3[1] = 16;
        goto LABEL_7;
      }
    }
    uint64_t v5 = 0;
LABEL_7:
    if (v7 == 15) {
      goto LABEL_12;
    }
  }
  if (a2)
  {
    v6 |= 0x304000240000uLL;
    v5 |= 0xC000uLL;
    *a3 = v6;
    a3[1] = v5;
  }
  if ((a2 & 2) != 0)
  {
    v5 |= 0x7E1uLL;
    v6 |= 0x20004uLL;
    *a3 = v6;
    a3[1] = v5;
  }
LABEL_12:
  int v8 = v7;
  if ((v7 & 0xFE) == 0x12) {
    int v8 = *(unsigned __int8 *)(**(void **)(result + 16) + 8);
  }
  if ((a2 & 1) == 0 || v8 == 15)
  {
    if ((a2 & 1) == 0) {
      return result;
    }
  }
  else
  {
    v5 |= 0x800uLL;
    a3[1] = v5;
  }
  uint64_t result = llvm::AttributeFuncs::isNoFPClassCompatibleType(result);
  if ((result & 1) == 0) {
    a3[1] = v5 | 0x20000;
  }
  if ((a2 & 1) != 0 && v7 == 7) {
    *a3 = v6 | 0x800000000;
  }
  return result;
}

uint64_t llvm::StringAttributeImpl::StringAttributeImpl(uint64_t a1, const void *a2, size_t __len, void *__src, size_t a5)
{
  unsigned int v7 = __len;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 2;
  *(_DWORD *)(a1 + 12) = __len;
  *(_DWORD *)(a1 + 16) = a5;
  uint64_t v9 = a1 + 24;
  if (__len) {
    memmove((void *)(a1 + 24), a2, __len);
  }
  *(unsigned char *)(v9 + v7) = 0;
  if (a5)
  {
    memmove((void *)(v9 + v7 + 1), __src, a5);
    unsigned int v7 = *(_DWORD *)(a1 + 12);
    int v10 = *(_DWORD *)(a1 + 16) + 1;
  }
  else
  {
    int v10 = 1;
  }
  *(unsigned char *)(v9 + v10 + v7) = 0;
  return a1;
}

unsigned int *llvm::AttributeImpl::Profile(unsigned int *a1, int a2, uint64_t a3)
{
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, a2);
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, a3);
  return llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, SHIDWORD(a3));
}

void *std::__lower_bound[abi:nn180100]<std::_ClassicAlgPolicy,llvm::Attribute *,llvm::Attribute *,llvm::StringRef,std::__identity,AttributeComparator>(void *a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2;
  if (a2 != a1)
  {
    unint64_t v5 = a2 - a1;
    unint64_t v3 = a1;
    do
    {
      unint64_t v6 = v5 >> 1;
      unsigned int v7 = &v3[v5 >> 1];
      uint64_t v8 = *v7;
      if (!*v7
        || *(unsigned char *)(v8 + 8) != 2
        || (uint64_t v9 = *(const void **)a3,
            size_t v10 = *(void *)(a3 + 8),
            uint64_t v11 = v8 + 24,
            uint64_t v12 = *(unsigned int *)(v8 + 12),
            v14[0] = v11,
            v14[1] = v12,
            (llvm::StringRef::compare((uint64_t)v14, v9, v10) & 0x80000000) != 0))
      {
        unint64_t v3 = v7 + 1;
        unint64_t v6 = v5 + ~v6;
      }
      unint64_t v5 = v6;
    }
    while (v6);
  }
  return v3;
}

unsigned int *llvm::FoldingSet<llvm::AttributeImpl>::GetNodeProfile(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return llvm::AttributeImpl::Profile(a2, a3);
}

BOOL llvm::FoldingSet<llvm::AttributeImpl>::NodeEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  llvm::AttributeImpl::Profile(a2, a5);
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  return v7 == a5[2] && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

unint64_t llvm::FoldingSet<llvm::AttributeImpl>::ComputeNodeHash(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  llvm::AttributeImpl::Profile(a2, a3);
  return llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(void *)a3 + 4 * a3[2], v4, v5);
}

unsigned int *llvm::FoldingSet<llvm::AttributeSetNode>::GetNodeProfile(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return llvm::AttributeListImpl::Profile(a3, (uint64_t *)(a2 + 48), *(unsigned int *)(a2 + 8));
}

BOOL llvm::FoldingSet<llvm::AttributeSetNode>::NodeEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  llvm::AttributeListImpl::Profile(a5, (uint64_t *)(a2 + 48), *(unsigned int *)(a2 + 8));
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  return v7 == a5[2] && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

unint64_t llvm::FoldingSet<llvm::AttributeSetNode>::ComputeNodeHash(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  llvm::AttributeListImpl::Profile(a3, (uint64_t *)(a2 + 48), *(unsigned int *)(a2 + 8));
  return llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(void *)a3 + 4 * a3[2], v4, v5);
}

uint64_t llvm::array_pod_sort_comparator<llvm::Attribute>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a1) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (v4) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v3 == 0;
    }
    if (!v6) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    char v8 = llvm::AttributeImpl::operator<(*a1, v3);
    if (v8) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v4 = *a1;
    uint64_t v3 = *a2;
  }
  if (v3) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v4 == 0;
  }
  uint64_t result = !v10;
  if (v3) {
    BOOL v11 = v4 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11) {
    return llvm::AttributeImpl::operator<(v3, v4);
  }
  return result;
}

unsigned int *llvm::FoldingSet<llvm::AttributeListImpl>::GetNodeProfile(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return llvm::AttributeListImpl::Profile(a3, (uint64_t *)(a2 + 40), *(unsigned int *)(a2 + 8));
}

BOOL llvm::FoldingSet<llvm::AttributeListImpl>::NodeEquals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  llvm::AttributeListImpl::Profile(a5, (uint64_t *)(a2 + 40), *(unsigned int *)(a2 + 8));
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  return v7 == a5[2] && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

unint64_t llvm::FoldingSet<llvm::AttributeListImpl>::ComputeNodeHash(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  llvm::AttributeListImpl::Profile(a3, (uint64_t *)(a2 + 40), *(unsigned int *)(a2 + 8));
  return llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(void *)a3 + 4 * a3[2], v4, v5);
}

unsigned char *llvm::SmallVectorImpl<llvm::AttributeSet>::insert<llvm::AttributeSet const*,void>(unsigned int *a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  BOOL v5 = __src;
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = (a2 - *(void *)a1) >> 3;
  uint64_t v9 = a1[2];
  if (*(void *)a1 + 8 * v9 == a2)
  {
    llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(a1, __src, a4);
    return (unsigned char *)(*(void *)a1 + 8 * v8);
  }
  else
  {
    unint64_t v10 = a4 - __src;
    if (v9 + v10 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v9 + v10, 8);
      uint64_t v7 = *(void *)a1;
      uint64_t v9 = a1[2];
    }
    BOOL v11 = (unsigned char *)(v7 + 8 * v8);
    uint64_t v12 = (unsigned char *)(v7 + 8 * v9);
    unint64_t v13 = (v12 - v11) >> 3;
    if (v13 >= v10)
    {
      unint64_t v17 = v10 + v9;
      if (v17 <= a1[3])
      {
        uint64_t v18 = v9;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v17, 8);
        uint64_t v18 = a1[2];
        LODWORD(v9) = a1[2];
      }
      if (a4 != v5)
      {
        uint64_t v19 = (void *)(*(void *)a1 + 8 * v18);
        uint64_t v20 = -8 * v10;
        do
        {
          *v19++ = *(void *)&v12[v20];
          v20 += 8;
        }
        while (v20);
      }
      a1[2] = v9 + v10;
      if (&v12[-8 * v10] != v11) {
        memmove(&v11[8 * v10], v11, &v12[-8 * v10] - v11);
      }
      if (a4 != v5) {
        memmove(v11, v5, (char *)a4 - (char *)v5);
      }
    }
    else
    {
      unsigned int v14 = v9 + ((unint64_t)((char *)a4 - (char *)v5) >> 3);
      a1[2] = v14;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v14 - 8 * v13), (const void *)(v7 + 8 * v8), v12 - v11);
        uint64_t v15 = v11;
        do
        {
          uint64_t v16 = *v5++;
          *v15++ = v16;
          --v13;
        }
        while (v13);
      }
      if (v5 != a4) {
        memcpy(v12, v5, (char *)a4 - (char *)v5);
      }
    }
  }
  return v11;
}

uint64_t llvm::SmallVectorImpl<llvm::Attribute>::insert_one_impl<llvm::Attribute>(unsigned int *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = a1[2];
  if (*(void *)a1 + 8 * v6 == a2)
  {
    llvm::SmallVectorTemplateBase<void *,true>::push_back(a1, *a3);
    return *(void *)a1 + 8 * a1[2] - 8;
  }
  else
  {
    uint64_t v7 = (a2 - v5) >> 3;
    if (v6 >= a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v6 + 1, 8);
      uint64_t v5 = *(void *)a1;
      uint64_t v6 = a1[2];
    }
    uint64_t v8 = (uint64_t *)(v5 + 8 * v7);
    *(void *)(v5 + 8 * v6) = *(void *)(v5 + 8 * v6 - 8);
    uint64_t v9 = *(void *)a1 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      memmove(v8 + 1, v8, v9 - (void)v8);
      LODWORD(v6) = a1[2];
    }
    a1[2] = v6 + 1;
    uint64_t *v8 = *a3;
  }
  return (uint64_t)v8;
}

BOOL llvm::AttributeMask::contains(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    unint64_t v4 = 0;
LABEL_6:
    uint64_t v3 = (1 << v4) & *(void *)(a1 + ((v4 >> 3) & 0x1FFFFFF8));
    return v3 != 0;
  }
  if (*(unsigned char *)(a2 + 8) != 2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 12);
    goto LABEL_6;
  }
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  *(void *)&long long v6 = a2 + 24;
  *((void *)&v6 + 1) = v2;
  uint64_t v3 = std::__tree<llvm::SmallString<32u>>::__count_multi<llvm::StringRef>(a1 + 16, &v6);
  return v3 != 0;
}

uint64_t std::__tree<llvm::SmallString<32u>>::__count_multi<llvm::StringRef>(uint64_t a1, long long *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = (const void *)v3[4];
    size_t v6 = v3[5];
    long long v26 = *a2;
    if ((llvm::StringRef::compare((uint64_t)&v26, v5, v6) & 0x80000000) != 0)
    {
      uint64_t v2 = v3;
      goto LABEL_6;
    }
    uint64_t v7 = v3[5];
    uint64_t v8 = *(const void **)a2;
    size_t v9 = *((void *)a2 + 1);
    *(void *)&long long v26 = v3[4];
    *((void *)&v26 + 1) = v7;
    if ((llvm::StringRef::compare((uint64_t)&v26, v8, v9) & 0x80000000) == 0) {
      break;
    }
    ++v3;
LABEL_6:
    uint64_t v3 = (void *)*v3;
    if (!v3) {
      return 0;
    }
  }
  BOOL v11 = (void *)*v3;
  uint64_t v12 = v3;
  if (*v3)
  {
    uint64_t v12 = v3;
    do
    {
      uint64_t v13 = v11[5];
      unsigned int v14 = *(const void **)a2;
      size_t v15 = *((void *)a2 + 1);
      *(void *)&long long v26 = v11[4];
      *((void *)&v26 + 1) = v13;
      int v16 = llvm::StringRef::compare((uint64_t)&v26, v14, v15);
      unint64_t v17 = v11 + 1;
      if (v16 >= 0)
      {
        unint64_t v17 = v11;
        uint64_t v12 = v11;
      }
      BOOL v11 = (void *)*v17;
    }
    while (*v17);
  }
  uint64_t v18 = (void *)v3[1];
  if (v18)
  {
    do
    {
      uint64_t v19 = (const void *)v18[4];
      size_t v20 = v18[5];
      long long v26 = *a2;
      int v21 = llvm::StringRef::compare((uint64_t)&v26, v19, v20);
      uint64_t v22 = v18 + 1;
      if (v21 < 0)
      {
        uint64_t v22 = v18;
        uint64_t v2 = v18;
      }
      uint64_t v18 = (void *)*v22;
    }
    while (*v22);
  }
  if (v12 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v23 = (void *)v12[1];
    if (v23)
    {
      do
      {
        uint64_t v24 = v23;
        uint64_t v23 = (void *)*v23;
      }
      while (v23);
    }
    else
    {
      do
      {
        uint64_t v24 = (void *)v12[2];
        BOOL v25 = *v24 == (void)v12;
        uint64_t v12 = v24;
      }
      while (!v25);
    }
    ++result;
    uint64_t v12 = v24;
  }
  while (v24 != v2);
  return result;
}

uint64_t llvm::UpgradeIntrinsicFunction(llvm *this, llvm::Function **a2, llvm::Function **a3)
{
  *a2 = 0;
  uint64_t v5 = UpgradeIntrinsicFunction1(this, a2);
  if (*a2) {
    size_t v6 = *a2;
  }
  else {
    size_t v6 = this;
  }
  int v7 = *((_DWORD *)v6 + 9);
  if (v7) {
    *((void *)v6 + 14) = llvm::Intrinsic::getAttributes(**(uint64_t ***)v6, v7);
  }
  return v5;
}

uint64_t UpgradeIntrinsicFunction1(llvm::Function *a1, llvm::Function **a2)
{
  uint64_t v292 = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
    return 0;
  }
  Valueuint64_t Name = llvm::Value::getValueName((uint64_t ***)a1);
  uint64_t v6 = *(void *)ValueName;
  if (*(void *)ValueName < 8uLL) {
    return 0;
  }
  if (*(_DWORD *)(ValueName + 16) != 1836477548 || *(unsigned char *)(ValueName + 20) != 46) {
    return 0;
  }
  uint64_t v11 = ValueName + 21;
  int v10 = *(char *)(ValueName + 21);
  size_t v12 = v6 - 5;
  int v284 = (char *)(ValueName + 21);
  unint64_t v285 = v6 - 5;
  switch(v10)
  {
    case 'a':
      if (v12 < 8) {
        goto LABEL_16;
      }
      if (*(void *)v11 == 0x746962722E6D7261) {
        goto LABEL_465;
      }
      if (v12 < 0xC) {
        goto LABEL_16;
      }
      if (*(void *)v11 == 0x2E34366863726161 && *(_DWORD *)(ValueName + 29) == 1953063538) {
        goto LABEL_465;
      }
      if (v12 >= 0x13)
      {
        if (*(void *)v11 == 0x2E34366863726161
          && *(void *)(ValueName + 29) == 0x6972662E6E6F656ELL
          && *(void *)(ValueName + 32) == 0x6E746E6972662E6ELL)
        {
          int v163 = (uint64_t **)*((void *)a1 + 5);
          if (*((_WORD *)a1 + 9)) {
            llvm::Function::BuildLazyArguments(a1);
          }
          v286.__r_.__value_.__r.__words[0] = **((void **)a1 + 11);
          uint64_t v8 = 1;
          unint64_t v17 = v163;
          int v18 = 264;
          goto LABEL_468;
        }
      }
      else if (v12 < 0x11)
      {
        goto LABEL_16;
      }
      if (*(void *)v11 == 0x2E34366863726161
        && *(void *)(ValueName + 29) == 0x6962722E6E6F656ELL
        && *(unsigned char *)(ValueName + 37) == 116)
      {
LABEL_465:
        uint64_t v145 = (uint64_t **)*((void *)a1 + 5);
        if (*((_WORD *)a1 + 9)) {
          llvm::Function::BuildLazyArguments(a1);
        }
        v286.__r_.__value_.__r.__words[0] = **((void **)a1 + 11);
        uint64_t v8 = 1;
        unint64_t v17 = v145;
        int v18 = 8;
        goto LABEL_468;
      }
LABEL_16:
      if (v6 == 29)
      {
        if (!memcmp((const void *)(ValueName + 21), "aarch64.sve.bfmlalb.lane", v12))
        {
          uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
          int v14 = 991;
          goto LABEL_538;
        }
        if (*(void *)v11 == 0x2E34366863726161
          && *(void *)(v11 + 8) == 0x6C6D66622E657673
          && *(void *)(v11 + 16) == 0x656E616C2E746C61)
        {
          uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
          int v14 = 993;
          goto LABEL_538;
        }
      }
      else if (v6 == 27 && !memcmp((const void *)(ValueName + 21), "aarch64.sve.bfdot.lane", v12))
      {
        uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
        int v14 = 989;
LABEL_538:
        int v84 = 0;
        uint64_t v85 = 0;
LABEL_673:
        Declaration = (llvm::Function *)llvm::Intrinsic::getDeclaration(v13, v14, (uint64_t)v84, v85);
LABEL_785:
        *a2 = Declaration;
        return 1;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_34, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&_MergedGlobals_34))
      {
        llvm::Regex::Regex();
      }
      if (!llvm::Regex::match((uint64_t)&unk_26B41C9E8, v284, v285, 0, 0))
      {
        if (v285 >= 0x15)
        {
          if (*(void *)v284 == 0x2E34366863726161
            && *((void *)v284 + 1) == 0x6C7075742E657673
            && *(void *)(v284 + 13) == 0x7465672E656C7075)
          {
LABEL_313:
            v286.__r_.__value_.__r.__words[0] = **(void **)(*((void *)a1 + 3) + 16);
            if (*((unsigned char *)a1 + 18)) {
              llvm::Function::BuildLazyArguments(a1);
            }
            v286.__r_.__value_.__l.__size_ = **((void **)a1 + 11);
            uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
            int v84 = &v286;
            int v14 = 320;
            goto LABEL_672;
          }
          if (*(void *)v284 == 0x2E34366863726161
            && *((void *)v284 + 1) == 0x6C7075742E657673
            && *(void *)(v284 + 13) == 0x7465732E656C7075)
          {
            long long v160 = *(int8x16_t **)(*((void *)a1 + 3) + 16);
            v286.__r_.__value_.__r.__words[0] = v160->u64[1];
            *(int8x16_t *)&v286.__r_.__value_.__r.__words[1] = vextq_s8(v160[1], v160[1], 8uLL);
            uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
            int v84 = &v286;
            int v14 = 321;
LABEL_664:
            uint64_t v85 = 3;
            goto LABEL_673;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B41C9C8, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26B41C9C8))
        {
          llvm::Regex::Regex();
        }
        if (llvm::Regex::match((uint64_t)&unk_26B41C9F8, v284, v285, 0, 0))
        {
          uint64_t v97 = *(std::string::size_type **)(*((void *)a1 + 3) + 16);
          std::string::size_type v98 = *v97;
          std::string::size_type v99 = v97[2];
          v286.__r_.__value_.__r.__words[0] = v98;
          v286.__r_.__value_.__l.__size_ = v99;
LABEL_310:
          uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
          int v84 = &v286;
          int v14 = 321;
          goto LABEL_672;
        }
        if (v285 >= 0xD)
        {
          if (*(void *)v284 == 0x6E6F656E2E6D7261 && *(void *)(v284 + 5) == 0x7A6C63762E6E6F65)
          {
            if (*((_WORD *)a1 + 9)) {
              llvm::Function::BuildLazyArguments(a1);
            }
            *(void *)&long long v289 = **((void **)a1 + 11);
            *((void *)&v289 + 1) = ***(void ***)a1 + 1920;
            unint64_t v164 = llvm::FunctionType::get(**(uint64_t ****)(*((void *)a1 + 3) + 16), (uint64_t *)&v289, 2, 0);
            int v165 = *((_DWORD *)a1 + 8) & 0xF;
            int64_t v166 = (llvm::Type *)(*(_DWORD *)(*(void *)a1 + 8) >> 8);
            unint64_t v167 = 14;
            if (v285 < 0xE) {
              unint64_t v167 = v285;
            }
            __int16 v288 = 1283;
            v286.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.ctlz.";
            v286.__r_.__value_.__r.__words[2] = (std::string::size_type)&v284[v167];
            unint64_t v287 = v285 - v167;
            uint64_t v168 = *((void *)a1 + 5);
            uint64_t v169 = operator new(0x80uLL);
            size_t v170 = (llvm::Function *)(v169 + 2);
            v169[7] = v169[7] & 0x38000000 | 0x40000000;
            *(void *)uint64_t v169 = 0;
            llvm::Function::Function((uint64_t)(v169 + 2), v164, v165, v166, (const llvm::Twine *)&v286, v168);
            *a2 = v170;
            return 1;
          }
          if (*(void *)v284 == 0x6E6F656E2E6D7261 && *(void *)(v284 + 5) == 0x746E63762E6E6F65)
          {
            uint64_t v179 = (uint64_t **)*((void *)a1 + 5);
            if (*((_WORD *)a1 + 9)) {
              llvm::Function::BuildLazyArguments(a1);
            }
            v286.__r_.__value_.__r.__words[0] = **((void **)a1 + 11);
            uint64_t v8 = 1;
            unint64_t v17 = v179;
            int v18 = 54;
            goto LABEL_468;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B41C9D0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26B41C9D0))
        {
          llvm::Regex::Regex();
        }
        if (llvm::Regex::match((uint64_t)&unk_26B41CA08, v284, v285, 0, 0))
        {
          uint64_t v122 = *((void *)a1 + 3);
          uint64_t v123 = 8 * *(unsigned int *)(v122 + 12) - 8;
          *(_OWORD *)&v286.__r_.__value_.__l.__data_ = *(_OWORD *)(*(void *)(v122 + 16) + 8);
          uint64_t v124 = llvm::StringRef::find((uint64_t *)&v284, "lane", 4uLL, 0);
          int v125 = (int *)((char *)&UpgradeIntrinsicFunction1(llvm::Function *,llvm::Function *&)::StoreLaneInts
                       + (v123 >> 1)
                       - 20);
          if (v124 == -1) {
            int v125 = (int *)((char *)&UpgradeIntrinsicFunction1(llvm::Function *,llvm::Function *&)::StoreInts
          }
                         + (v123 >> 1)
                         - 12);
          int v14 = *v125;
          int v84 = &v286;
          uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
LABEL_672:
          uint64_t v85 = 2;
          goto LABEL_673;
        }
        if (v285 == 18)
        {
          if (*(void *)v284 != 0x657268742E6D7261
            || *((void *)v284 + 1) != 0x746E696F702E6461
            || *((_WORD *)v284 + 8) != 29285)
          {
            goto LABEL_593;
          }
        }
        else
        {
          if (v285 != 22)
          {
            if (v285 < 0x10)
            {
              if (v285 == 15)
              {
                BOOL v182 = *(void *)v284 == 0x6E6F656E2E6D7261 && *(void *)(v284 + 7) == 0x2E746F6466622E6ELL;
                char v183 = 1;
                if (!v182) {
                  goto LABEL_704;
                }
                goto LABEL_703;
              }
              if (v285 < 0xC) {
                goto LABEL_718;
              }
              char v183 = 1;
              goto LABEL_704;
            }
            goto LABEL_593;
          }
          if (*(void *)v284 != 0x2E34366863726161
            || *((void *)v284 + 1) != 0x702E646165726874
            || *(void *)(v284 + 14) != 0x7265746E696F702ELL)
          {
LABEL_593:
            if (*(void *)v284 == 0x6E6F656E2E6D7261 && *((void *)v284 + 1) == 0x2E7364646171762ELL)
            {
              uint64_t v191 = (uint64_t **)*((void *)a1 + 5);
              if (*((_WORD *)a1 + 9)) {
                llvm::Function::BuildLazyArguments(a1);
              }
              v286.__r_.__value_.__r.__words[0] = **((void **)a1 + 11);
              uint64_t v8 = 1;
              unint64_t v17 = v191;
              int v18 = 265;
              goto LABEL_468;
            }
            if (*(void *)v284 == 0x6E6F656E2E6D7261 && *((void *)v284 + 1) == 0x2E7564646171762ELL)
            {
              unsigned int v203 = (uint64_t **)*((void *)a1 + 5);
              if (*((_WORD *)a1 + 9)) {
                llvm::Function::BuildLazyArguments(a1);
              }
              v286.__r_.__value_.__r.__words[0] = **((void **)a1 + 11);
              uint64_t v8 = 1;
              unint64_t v17 = v203;
              int v18 = 303;
              goto LABEL_468;
            }
            if (*(void *)v284 == 0x6E6F656E2E6D7261 && *((void *)v284 + 1) == 0x2E7362757371762ELL)
            {
              uint64_t v204 = (uint64_t **)*((void *)a1 + 5);
              if (*((_WORD *)a1 + 9)) {
                llvm::Function::BuildLazyArguments(a1);
              }
              v286.__r_.__value_.__r.__words[0] = **((void **)a1 + 11);
              uint64_t v8 = 1;
              unint64_t v17 = v204;
              int v18 = 286;
              goto LABEL_468;
            }
            if (*(void *)v284 == 0x6E6F656E2E6D7261 && *((void *)v284 + 1) == 0x2E7562757371762ELL)
            {
              uint64_t v205 = (uint64_t **)*((void *)a1 + 5);
              if (*((_WORD *)a1 + 9)) {
                llvm::Function::BuildLazyArguments(a1);
              }
              v286.__r_.__value_.__r.__words[0] = **((void **)a1 + 11);
              uint64_t v8 = 1;
              unint64_t v17 = v205;
              int v18 = 314;
              goto LABEL_468;
            }
            if (v285 < 0x11)
            {
              if (*(void *)v284 != 0x6E6F656E2E6D7261 || *(void *)(v284 + 7) != 0x2E746F6466622E6ELL)
              {
                if (*(void *)v284 != 0x6E6F656E2E6D7261 || *((_DWORD *)v284 + 2) != 1835426350) {
                  goto LABEL_709;
                }
                goto LABEL_714;
              }
              goto LABEL_702;
            }
            if (*(void *)v284 != 0x2E34366863726161
              || *((void *)v284 + 1) != 0x6464612E6E6F656ELL
              || v284[16] != 112)
            {
              goto LABEL_696;
            }
            if (*((void *)a1 + 12) == 2)
            {
              uint64_t v223 = **(void **)(*((void *)a1 + 3) + 16);
              if (!v223
                || (*(_DWORD *)(v223 + 8) & 0xFE) != 0x12
                || (int v224 = *(_DWORD *)(*(void *)(v223 + 24) + 8), v224 >= 4u)
                && v224 != 5
                && (v224 & 0xFD) != 4)
              {
LABEL_696:
                if (*(void *)v284 == 0x6E6F656E2E6D7261 && *(void *)(v284 + 7) == 0x2E746F6466622E6ELL)
                {
LABEL_702:
                  char v183 = 0;
LABEL_703:
                  if (*(_WORD *)&v284[v285 - 2] == 14441)
                  {
                    switch(v285)
                    {
                      case 0x19uLL:
                        int v219 = v284[24];
                        BOOL v221 = *(void *)v284 == 0x6E6F656E2E6D7261
                            && *((void *)v284 + 1) == 0x762E746F6466622ELL
                            && *((void *)v284 + 2) == 0x6938762E32336632;
                        int v222 = 56;
                        goto LABEL_875;
                      case 0x1AuLL:
                        int v219 = *((unsigned __int16 *)v284 + 12);
                        BOOL v221 = *(void *)v284 == 0x6E6F656E2E6D7261
                            && *((void *)v284 + 1) == 0x762E746F6466622ELL
                            && *((void *)v284 + 2) == 0x3631762E32336634;
                        int v222 = 14441;
LABEL_875:
                        if (!v221 || v219 != v222) {
                          goto LABEL_771;
                        }
                        int v268 = 2812;
                        goto LABEL_901;
                      case 0x1DuLL:
                        uint64_t v269 = *(void *)(v284 + 21);
                        BOOL v271 = *(void *)v284 == 0x2E34366863726161
                            && *((void *)v284 + 1) == 0x6466622E6E6F656ELL
                            && *((void *)v284 + 2) == 0x32336632762E746FLL;
                        uint64_t v272 = 0x38762E323366;
                        goto LABEL_895;
                      case 0x1EuLL:
                        uint64_t v269 = *(void *)(v284 + 22);
                        BOOL v271 = *(void *)v284 == 0x2E34366863726161
                            && *((void *)v284 + 1) == 0x6466622E6E6F656ELL
                            && *((void *)v284 + 2) == 0x32336634762E746FLL;
                        uint64_t v272 = 0x3631762E3233;
LABEL_895:
                        uint64_t v274 = v272 & 0xFFFFFFFFFFFFLL | 0x3869000000000000;
                        if (!v271 || v269 != v274) {
                          goto LABEL_771;
                        }
                        int v268 = 488;
LABEL_901:
                        unint64_t v276 = **(llvm::Type ***)(*((void *)a1 + 3) + 16);
                        unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v276);
                        if ((_BYTE)v277)
                        {
                          unint64_t v276 = **(llvm::Type ***)(*((void *)a1 + 3) + 16);
                        }
                        uint64_t v279 = **((void **)a1 + 5);
                        v286.__r_.__value_.__r.__words[0] = (std::string::size_type)v276;
                        llvm::FixedVectorType::get((uint64_t **)(*(void *)v279 + 1680), (llvm::Type *)(PrimitiveSizeInBits >> 4));
                        v286.__r_.__value_.__l.__size_ = v280;
                        uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
                        int v84 = &v286;
                        int v14 = v268;
                        break;
                      default:
                        goto LABEL_771;
                    }
                    goto LABEL_672;
                  }
                  goto LABEL_704;
                }
                if (v285 < 0x13)
                {
                  char v183 = 0;
                  goto LABEL_704;
                }
                char v183 = 0;
                if (*(void *)v284 == 0x2E34366863726161
                  && *((void *)v284 + 1) == 0x6466622E6E6F656ELL
                  && *(void *)(v284 + 11) == 0x2E746F6466622E6ELL)
                {
                  goto LABEL_703;
                }
LABEL_704:
                if (*(void *)v284 != 0x6E6F656E2E6D7261 || *((_DWORD *)v284 + 2) != 1835426350)
                {
                  if (v183) {
                    goto LABEL_718;
                  }
LABEL_709:
                  if (*(void *)v284 != 0x2E34366863726161 || *((void *)v284 + 1) != 0x6D66622E6E6F656ELL)
                  {
LABEL_718:
                    switch(v285)
                    {
                      case '#':
                        if (!memcmp(v284, "arm.cde.vcx1q.predicated.v2i64.v4i1", 0x23uLL)
                          || !memcmp(v284, "arm.cde.vcx2q.predicated.v2i64.v4i1", 0x23uLL))
                        {
                          return 1;
                        }
                        uint64_t v212 = "arm.cde.vcx3q.predicated.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 35;
                        goto LABEL_770;
                      case '$':
                        if (!memcmp(v284, "arm.cde.vcx1qa.predicated.v2i64.v4i1", 0x24uLL)
                          || !memcmp(v284, "arm.cde.vcx2qa.predicated.v2i64.v4i1", 0x24uLL))
                        {
                          return 1;
                        }
                        uint64_t v212 = "arm.cde.vcx3qa.predicated.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 36;
                        goto LABEL_770;
                      case '%':
                      case '&':
                      case '\'':
                      case '(':
                      case ')':
                      case '*':
                      case '-':
                      case '.':
                      case '/':
                      case '0':
                      case '1':
                      case '2':
                      case '3':
                      case '6':
                      case ';':
                        goto LABEL_771;
                      case '+':
                        uint64_t v212 = "arm.mve.vqdmull.predicated.v2i64.v4i32.v4i1";
                        v213 = v284;
                        size_t v214 = 43;
                        goto LABEL_770;
                      case ',':
                        uint64_t v212 = "arm.mve.mull.int.predicated.v2i64.v4i32.v4i1";
                        v213 = v284;
                        size_t v214 = 44;
                        goto LABEL_770;
                      case '4':
                        uint64_t v212 = "arm.mve.vldr.gather.base.predicated.v2i64.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 52;
                        goto LABEL_770;
                      case '5':
                        uint64_t v212 = "arm.mve.vstr.scatter.base.predicated.v2i64.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 53;
                        goto LABEL_770;
                      case '7':
                        uint64_t v212 = "arm.mve.vldr.gather.base.wb.predicated.v2i64.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 55;
                        goto LABEL_770;
                      case '8':
                        uint64_t v212 = "arm.mve.vstr.scatter.base.wb.predicated.v2i64.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 56;
                        goto LABEL_770;
                      case '9':
                        uint64_t v212 = "arm.mve.vldr.gather.offset.predicated.v2i64.p0.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 57;
                        goto LABEL_770;
                      case ':':
                        uint64_t v212 = "arm.mve.vstr.scatter.offset.predicated.p0.v2i64.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 58;
                        goto LABEL_770;
                      case '<':
                        uint64_t v212 = "arm.mve.vldr.gather.offset.predicated.v2i64.p0i64.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 60;
                        goto LABEL_770;
                      case '=':
                        uint64_t v212 = "arm.mve.vstr.scatter.offset.predicated.p0i64.v2i64.v2i64.v4i1";
                        v213 = v284;
                        size_t v214 = 61;
LABEL_770:
                        if (memcmp(v213, v212, v214)) {
                          goto LABEL_771;
                        }
                        return 1;
                      default:
                        if (v285 == 15)
                        {
                          if (*(void *)v284 == 0x612E6E6367646D61 && *(void *)(v284 + 7) == 0x7469626E67696C61)
                          {
                            unint64_t v17 = (uint64_t **)*((void *)a1 + 5);
                            v286.__r_.__value_.__r.__words[0] = **(void **)(*((void *)a1 + 3) + 16);
                            uint64_t v8 = 1;
                            int v18 = 149;
                            goto LABEL_468;
                          }
                        }
                        else if (v285 == 14)
                        {
                          BOOL v218 = *(void *)v284 == 0x2E65766D2E6D7261
                              && *(void *)(v284 + 6) == 0x3436707463762E65;
                          if (v218 && *(_DWORD *)(**(void **)(*((void *)a1 + 3) + 16) + 32) == 4)
                          {
                            rename((uint64_t ***)a1);
                            return 1;
                          }
                        }
                        break;
                    }
                    goto LABEL_771;
                  }
                }
LABEL_714:
                if (*(void *)&v284[v285 - 12] != 0x762E32336634762ELL || *(_DWORD *)&v284[v285 - 4] != 946419249) {
                  goto LABEL_718;
                }
                switch(v285)
                {
                  case 0x1BuLL:
                    if (*(void *)v284 != 0x6E6F656E2E6D7261
                      || *((void *)v284 + 1) != 0x2E616C6D6D66622ELL
                      || *((void *)v284 + 2) != 0x31762E3233663476
                      || *(void *)(v284 + 19) != 0x38693631762E3233)
                    {
                      goto LABEL_771;
                    }
                    int v14 = 2815;
                    goto LABEL_906;
                  case 0x1CuLL:
                    if (*(void *)v284 == 0x6E6F656E2E6D7261
                      && *((void *)v284 + 1) == 0x626C616C6D66622ELL
                      && *((void *)v284 + 2) == 0x762E32336634762ELL
                      && *((_DWORD *)v284 + 6) == 946419249)
                    {
                      int v14 = 2813;
                      goto LABEL_906;
                    }
                    if (*(void *)v284 == 0x6E6F656E2E6D7261
                      && *((void *)v284 + 1) == 0x746C616C6D66622ELL
                      && *((void *)v284 + 2) == 0x762E32336634762ELL
                      && *((_DWORD *)v284 + 6) == 946419249)
                    {
                      int v14 = 2814;
                      goto LABEL_906;
                    }
                    goto LABEL_771;
                  case 0x1FuLL:
                    if (*(void *)v284 != 0x2E34366863726161
                      || *((void *)v284 + 1) != 0x6D66622E6E6F656ELL
                      || *((void *)v284 + 2) != 0x336634762E616C6DLL
                      || *(void *)(v284 + 23) != 0x38693631762E3233)
                    {
                      goto LABEL_771;
                    }
                    int v14 = 491;
                    goto LABEL_906;
                  case 0x20uLL:
                    if (*(void *)v284 == 0x2E34366863726161
                      && *((void *)v284 + 1) == 0x6D66622E6E6F656ELL
                      && *((void *)v284 + 2) == 0x6634762E626C616CLL
                      && *((void *)v284 + 3) == 0x38693631762E3233)
                    {
                      int v14 = 489;
                    }
                    else
                    {
                      if (*(void *)v284 != 0x2E34366863726161
                        || *((void *)v284 + 1) != 0x6D66622E6E6F656ELL
                        || *((void *)v284 + 2) != 0x6634762E746C616CLL
                        || *((void *)v284 + 3) != 0x38693631762E3233)
                      {
                        goto LABEL_771;
                      }
                      int v14 = 490;
                    }
LABEL_906:
                    uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
                    goto LABEL_538;
                  default:
                    goto LABEL_771;
                }
              }
              unint64_t v17 = (uint64_t **)*((void *)a1 + 5);
              v286.__r_.__value_.__r.__words[0] = **(void **)(*((void *)a1 + 3) + 16);
              uint64_t v8 = 1;
              int v18 = 496;
LABEL_468:
              *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v17, v18, (uint64_t)&v286, 1);
              return v8;
            }
LABEL_771:
            uint64_t v225 = **(void **)(*((void *)a1 + 3) + 16);
            if ((*(_DWORD *)(v225 + 8) & 0x600) != 0x400 && v225 != 0 && *(_DWORD *)(v225 + 8) == 16)
            {
              v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v286.__r_.__value_.__r.__words[2];
              v286.__r_.__value_.__l.__size_ = 0x400000000;
              llvm::Intrinsic::getIntrinsicInfoTableEntries(*((_DWORD *)a1 + 9), (unsigned int *)&v286);
              if (*(_DWORD *)v286.__r_.__value_.__l.__data_ == 13)
              {
                uint64_t v228 = *((void *)a1 + 3);
                v229 = (uint64_t **)llvm::StructType::get(*(uint64_t **)v225, *(void *)(v225 + 16), *(unsigned int *)(v225 + 12), 0);
                unint64_t v230 = llvm::FunctionType::get(v229, (uint64_t *)(*(void *)(v228 + 16) + 8), (8 * *(unsigned int *)(v228 + 12) - 8) >> 3, (unint64_t *)(*(_DWORD *)(v228 + 8) > 0xFFu));
                if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
                {
                  uint64_t v234 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
                  unint64_t v232 = v234 + 2;
                  size_t v231 = *v234;
                }
                else
                {
                  size_t v231 = 0;
                  unint64_t v232 = &str_3_24;
                }
                std::string::basic_string[abi:nn180100](__p, v232, v231);
                if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
                {
                  uint64_t v237 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)a1);
                  uint64_t v238 = *v237;
                  unint64_t v236 = v237 + 2;
                  uint64_t v235 = v238;
                }
                else
                {
                  uint64_t v235 = 0;
                  unint64_t v236 = &str_3_24;
                }
                __int16 v291 = 773;
                *(void *)&long long v289 = v236;
                *((void *)&v289 + 1) = v235;
                uint64_t v290 = ".old";
                llvm::Value::setName(a1, (const llvm::Twine *)&v289);
                int v239 = *((_DWORD *)a1 + 8) & 0xF;
                unint64_t v240 = (llvm::Type *)(*(_DWORD *)(*(void *)a1 + 8) >> 8);
                __int16 v291 = 260;
                *(void *)&long long v289 = __p;
                uint64_t v241 = *((void *)a1 + 5);
                uint64_t v242 = operator new(0x80uLL);
                uint64_t v243 = (llvm::Function *)(v242 + 2);
                v242[7] = v242[7] & 0x38000000 | 0x40000000;
                *(void *)uint64_t v242 = 0;
                uint64_t v244 = (llvm::Intrinsic *)llvm::Function::Function((uint64_t)(v242 + 2), v230, v239, v240, (const llvm::Twine *)&v289, v241);
                *a2 = v243;
                uint64_t v246 = llvm::Intrinsic::remangleIntrinsicFunction(v244, v245);
                if (v247) {
                  *a2 = v246;
                }
                if (v283 < 0) {
                  operator delete(__p[0]);
                }
                v202 = (void *)v286.__r_.__value_.__r.__words[0];
                if ((std::string::size_type *)v286.__r_.__value_.__l.__data_ != &v286.__r_.__value_.__r.__words[2]) {
LABEL_796:
                }
                  free(v202);
                return 1;
              }
              if ((std::string::size_type *)v286.__r_.__value_.__l.__data_ != &v286.__r_.__value_.__r.__words[2]) {
                free(v286.__r_.__value_.__l.__data_);
              }
            }
            Declaration = llvm::Intrinsic::remangleIntrinsicFunction(a1, v5);
            if (!v233) {
              return 0;
            }
            goto LABEL_785;
          }
        }
        uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
        int v14 = 297;
        goto LABEL_538;
      }
      uint64_t v88 = **(void **)(*((void *)a1 + 3) + 16);
      if ((*(_DWORD *)(v88 + 8) & 0xFE) != 0x12) {
        uint64_t v88 = 0;
      }
      uint64_t v89 = *(uint64_t ***)(v88 + 24);
      if (*((_WORD *)a1 + 9)) {
        llvm::Function::BuildLazyArguments(a1);
      }
      uint64_t v90 = **((void **)a1 + 11);
      if ((*(_DWORD *)(v90 + 8) & 0xFE) != 0x12) {
        uint64_t v90 = 0;
      }
      llvm::VectorType::get(v89, (llvm::Type *)(*(unsigned int *)(v90 + 32) | ((unint64_t)(*(unsigned char *)(v90 + 8) == 19) << 32)));
      v286.__r_.__value_.__r.__words[0] = v91;
      if (v285 >= 0xF)
      {
        if (*(void *)v284 == 0x2E34366863726161 && *(void *)(v284 + 7) == 0x32646C2E6576732ELL)
        {
          int v92 = 1221;
        }
        else if (*(void *)v284 == 0x2E34366863726161 && *(void *)(v284 + 7) == 0x33646C2E6576732ELL)
        {
          int v92 = 1222;
        }
        else if (*(void *)v284 ^ 0x2E34366863726161 | *(void *)(v284 + 7) ^ 0x34646C2E6576732ELL)
        {
          int v92 = 0;
        }
        else
        {
          int v92 = 1223;
        }
      }
      else
      {
        int v92 = 0;
      }
      uint64_t v161 = (uint64_t **)*((void *)a1 + 5);
      uint64_t v8 = 1;
      *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v161, v92, (uint64_t)&v286, 1);
      return v8;
    case 'c':
      if (v12 < 5) {
        goto LABEL_771;
      }
      BOOL v15 = *(_DWORD *)v11 == 2053928035 && *(unsigned char *)(ValueName + 25) == 46;
      if (v15 && *((void *)a1 + 12) == 1)
      {
        rename((uint64_t ***)a1);
        int v16 = (uint64_t **)*((void *)a1 + 5);
        if (*((_WORD *)a1 + 9)) {
          llvm::Function::BuildLazyArguments(a1);
        }
        v286.__r_.__value_.__r.__words[0] = **((void **)a1 + 11);
        uint64_t v8 = 1;
        unint64_t v17 = v16;
        int v18 = 53;
      }
      else
      {
        BOOL v57 = *(_DWORD *)v11 == 2054452323 && *(unsigned char *)(ValueName + 25) == 46;
        if (!v57 || *((void *)a1 + 12) != 1) {
          goto LABEL_771;
        }
        rename((uint64_t ***)a1);
        __int16 v58 = (uint64_t **)*((void *)a1 + 5);
        if (*((_WORD *)a1 + 9)) {
          llvm::Function::BuildLazyArguments(a1);
        }
        v286.__r_.__value_.__r.__words[0] = **((void **)a1 + 11);
        uint64_t v8 = 1;
        unint64_t v17 = v58;
        int v18 = 55;
      }
      goto LABEL_468;
    case 'd':
      if (v6 == 14)
      {
        if (memcmp((const void *)(ValueName + 21), "dbg.value", v12) || *((void *)a1 + 12) != 4) {
          goto LABEL_771;
        }
      }
      else if (v6 != 13 || memcmp((const void *)(ValueName + 21), "dbg.addr", v12))
      {
        goto LABEL_771;
      }
      rename((uint64_t ***)a1);
      uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
      int v14 = 59;
      goto LABEL_538;
    case 'e':
      if (v12 >= 0x1C)
      {
        if (*(void *)v11 == 0x656D697265707865
          && *(void *)(ValueName + 29) == 0x6365762E6C61746ELL
          && *(void *)(ValueName + 37) == 0x727478652E726F74
          && *(_DWORD *)(ValueName + 45) == 779379553)
        {
          rename((uint64_t ***)a1);
          goto LABEL_313;
        }
      }
      else if (v6 != 32)
      {
        goto LABEL_168;
      }
      if (*(void *)v11 == 0x656D697265707865
        && *(void *)(ValueName + 29) == 0x6365762E6C61746ELL
        && *(void *)(ValueName + 37) == 0x65736E692E726F74
        && *(void *)(ValueName + 40) == 0x2E747265736E692ELL)
      {
        rename((uint64_t ***)a1);
        *(_OWORD *)&v286.__r_.__value_.__l.__data_ = *(_OWORD *)(*(void *)(*((void *)a1 + 3) + 16) + 8);
        goto LABEL_310;
      }
LABEL_168:
      v286.__r_.__value_.__r.__words[0] = (std::string::size_type)&v286.__r_.__value_.__r.__words[2];
      v286.__r_.__value_.__l.__size_ = 0x200000000;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B41C9D8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26B41C9D8))
      {
        llvm::Regex::Regex();
      }
      if (!llvm::Regex::match((uint64_t)&unk_26B41CA18, v284, v285, (unsigned int *)&v286, 0)) {
        goto LABEL_397;
      }
      uint64_t v48 = *(unsigned __int16 **)(v286.__r_.__value_.__r.__words[0] + 16);
      uint64_t v49 = *(void *)(v286.__r_.__value_.__r.__words[0] + 24);
      switch(v49)
      {
        case 2:
          if (*v48 != 29295) {
            goto LABEL_397;
          }
          int v56 = 329;
          break;
        case 4:
          switch(*(_DWORD *)v48)
          {
            case 0x78616D73:
              int v56 = 330;
              break;
            case 0x6E696D73:
              int v56 = 331;
              break;
            case 0x78616D75:
              int v56 = 332;
              break;
            case 0x6E696D75:
              int v56 = 333;
              break;
            case 0x78616D66:
              int v56 = 325;
              break;
            case 0x6E696D66:
              int v56 = 326;
              break;
            default:
              goto LABEL_397;
          }
          break;
        case 3:
          if (*v48 == 25697 && *((unsigned char *)v48 + 2) == 100)
          {
            int v56 = 322;
          }
          else if (*v48 == 30061 && *((unsigned char *)v48 + 2) == 108)
          {
            int v56 = 328;
          }
          else if (*v48 == 28257 && *((unsigned char *)v48 + 2) == 100)
          {
            int v56 = 323;
          }
          else
          {
            int v53 = *v48;
            int v54 = *((unsigned __int8 *)v48 + 2);
            if (v53 != 28536 || v54 != 114)
            {
LABEL_397:
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26B41C9E0, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_26B41C9E0))
              {
                llvm::Regex::Regex();
              }
              LODWORD(v286.__r_.__value_.__r.__words[1]) = 0;
              if (!llvm::Regex::match((uint64_t)&unk_26B41CA28, v284, v285, (unsigned int *)&v286, 0)
                || *(void *)(v286.__r_.__value_.__r.__words[0] + 24) != 4)
              {
                goto LABEL_405;
              }
              unsigned int v126 = bswap32(**(_DWORD **)(v286.__r_.__value_.__r.__words[0] + 16));
              BOOL v127 = v126 > 0x66616464;
              BOOL v128 = v126 < 0x66616464;
              BOOL v129 = v126 >= 0x666D756C;
              BOOL v130 = v126 > 0x666D756C;
              BOOL v131 = !v129;
              int v132 = v130 - v131;
              int v133 = v127 - v128;
              if (v133)
              {
                if (v132)
                {
LABEL_405:
                  if ((std::string::size_type *)v286.__r_.__value_.__l.__data_ != &v286.__r_.__value_.__r.__words[2]) {
                    free(v286.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_771;
                }
              }
              if (v133) {
                int v139 = 0;
              }
              else {
                int v139 = 324;
              }
              if (v132) {
                int v56 = v139;
              }
              else {
                int v56 = 327;
              }
              rename((uint64_t ***)a1);
              *(void *)&long long v289 = *(void *)(*(void *)(*((void *)a1 + 3) + 16) + 16);
              int v140 = (uint64_t **)*((void *)a1 + 5);
LABEL_676:
              *a2 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v140, v56, (uint64_t)&v289, 1);
              v202 = (void *)v286.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v286.__r_.__value_.__l.__data_ != &v286.__r_.__value_.__r.__words[2]) {
                goto LABEL_796;
              }
              return 1;
            }
            int v56 = 334;
          }
          break;
        default:
          goto LABEL_397;
      }
      rename((uint64_t ***)a1);
      int v140 = (uint64_t **)*((void *)a1 + 5);
      *(void *)&long long v289 = *(void *)(*(void *)(*((void *)a1 + 3) + 16) + 8);
      goto LABEL_676;
    case 'f':
      if (v12 < 0xA) {
        goto LABEL_771;
      }
      if (*(void *)v11 != 0x6E756F722E746C66 || *(_WORD *)(ValueName + 29) != 29540) {
        goto LABEL_771;
      }
      rename((uint64_t ***)a1);
      uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
      int v14 = 155;
      goto LABEL_538;
    case 'i':
    case 'l':
      if (v12 < 0xE)
      {
        if (v12 < 0xC) {
          goto LABEL_771;
        }
        goto LABEL_233;
      }
      if (*(void *)v11 == 0x656D69746566696CLL && *(void *)(ValueName + 27) == 0x74726174732E656DLL)
      {
        int v59 = 171;
      }
      else
      {
        if (v12 < 0xF)
        {
          if (*(void *)v11 != 0x656D69746566696CLL || *(_DWORD *)(ValueName + 29) != 1684956462)
          {
LABEL_238:
            if (*(void *)v11 != 0x6E61697261766E69 || *(void *)(v11 + 5) != 0x646E652E746E6169)
            {
LABEL_257:
              if (v12 >= 0x17)
              {
                BOOL v82 = *(void *)v11 == 0x6E61697261766E69 && *(void *)(v11 + 8) == 0x2E70756F72672E74;
                if (v82 && *(void *)(v11 + 15) == 0x726569727261622ELL)
                {
                  v286.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(*((void *)a1 + 3) + 16) + 8);
                  rename((uint64_t ***)a1);
                  unint64_t v17 = (uint64_t **)*((void *)a1 + 5);
                  uint64_t v8 = 1;
                  int v18 = 169;
                  goto LABEL_468;
                }
              }
              goto LABEL_771;
            }
            int v73 = 165;
            uint64_t v74 = 2;
LABEL_245:
            *(void *)&long long v289 = *(void *)(*(void *)(*((void *)a1 + 3) + 16) + 8 * v74 + 8);
            if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
            {
              unsigned __int8 v77 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
              int v76 = v77 + 2;
              size_t v75 = *v77;
            }
            else
            {
              size_t v75 = 0;
              int v76 = &str_3_24;
            }
            BOOL v78 = 1;
            int v281 = v73;
            getIntrinsicNameImpl(v73, (uint64_t)&v289, 1, *((uint64_t ***)a1 + 5), 0, &v286);
            int v79 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
            std::string::size_type size = v286.__r_.__value_.__l.__size_;
            BOOL v81 = (void *)v286.__r_.__value_.__r.__words[0];
            if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v5 = (llvm::Function *)&v286;
            }
            else {
              uint64_t v5 = (llvm::Function *)v286.__r_.__value_.__r.__words[0];
            }
            if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v286.__r_.__value_.__r.__words[2]);
            }
            if (v75 == size)
            {
              if (v75)
              {
                BOOL v78 = memcmp(v76, v5, v75) != 0;
                if (v79 < 0) {
                  goto LABEL_256;
                }
LABEL_268:
                if (!v78) {
                  goto LABEL_257;
                }
                goto LABEL_269;
              }
              BOOL v78 = 0;
              if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_268;
              }
            }
            else if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_268;
            }
LABEL_256:
            operator delete(v81);
            if (!v78) {
              goto LABEL_257;
            }
LABEL_269:
            rename((uint64_t ***)a1);
            uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
            int v84 = (std::string *)&v289;
            int v14 = v281;
            goto LABEL_270;
          }
LABEL_244:
          int v73 = 170;
          uint64_t v74 = 1;
          goto LABEL_245;
        }
        if (*(void *)v11 != 0x6E61697261766E69 || *(void *)(ValueName + 28) != 0x74726174732E746ELL)
        {
LABEL_233:
          if (*(void *)v11 != 0x656D69746566696CLL || *(_DWORD *)(v11 + 8) != 1684956462)
          {
            if (v12 < 0xD) {
              goto LABEL_771;
            }
            goto LABEL_238;
          }
          goto LABEL_244;
        }
        int v59 = 166;
      }
      *(void *)&long long v289 = *(void *)(*(void *)(*((void *)a1 + 3) + 16) + 16);
      if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
      {
        __int16 v66 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
        __int16 v62 = v66 + 2;
        size_t v61 = *v66;
      }
      else
      {
        size_t v61 = 0;
        __int16 v62 = &str_3_24;
      }
      BOOL v67 = 1;
      int v281 = v59;
      getIntrinsicNameImpl(v59, (uint64_t)&v289, 1, *((uint64_t ***)a1 + 5), 0, &v286);
      int v68 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
      std::string::size_type v69 = v286.__r_.__value_.__l.__size_;
      long long v70 = (void *)v286.__r_.__value_.__r.__words[0];
      if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = (llvm::Function *)&v286;
      }
      else {
        uint64_t v5 = (llvm::Function *)v286.__r_.__value_.__r.__words[0];
      }
      if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v69 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
      }
      if (v61 == v69)
      {
        if (v61)
        {
          BOOL v67 = memcmp(v62, v5, v61) != 0;
          if (v68 < 0) {
            goto LABEL_229;
          }
LABEL_232:
          if (v67) {
            goto LABEL_269;
          }
          goto LABEL_233;
        }
        BOOL v67 = 0;
        if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_232;
        }
      }
      else if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_232;
      }
LABEL_229:
      operator delete(v70);
      if (v67) {
        goto LABEL_269;
      }
      goto LABEL_233;
    case 'm':
      if (v12 >= 0xC)
      {
        if (*(void *)v11 == 0x6C2E64656B73616DLL && *(_DWORD *)(ValueName + 29) == 778330479)
        {
          long long v289 = 0uLL;
          *(void *)&long long v289 = **(void **)(*((void *)a1 + 3) + 16);
          if (*((unsigned char *)a1 + 18)) {
            llvm::Function::BuildLazyArguments(a1);
          }
          *((void *)&v289 + 1) = **((void **)a1 + 11);
          if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
          {
            int v112 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
            BOOL v38 = v112 + 2;
            size_t v37 = *v112;
          }
          else
          {
            size_t v37 = 0;
            BOOL v38 = &str_3_24;
          }
          getIntrinsicNameImpl(188, (uint64_t)&v289, 2, *((uint64_t ***)a1 + 5), 0, &v286);
          int v113 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
          std::string::size_type v114 = v286.__r_.__value_.__l.__size_;
          char v115 = (void *)v286.__r_.__value_.__r.__words[0];
          if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v5 = (llvm::Function *)&v286;
          }
          else {
            uint64_t v5 = (llvm::Function *)v286.__r_.__value_.__r.__words[0];
          }
          if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v114 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
          }
          if (v37 == v114)
          {
            if (v37) {
              LODWORD(v37) = memcmp(v38, v5, v37) != 0;
            }
          }
          else
          {
            LODWORD(v37) = 1;
          }
          if (v113 < 0) {
            operator delete(v115);
          }
          if (v37)
          {
            rename((uint64_t ***)a1);
            uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
            int v84 = (std::string *)&v289;
            int v14 = 188;
            goto LABEL_672;
          }
        }
        if (v12 >= 0xD)
        {
          if (*(void *)v11 == 0x732E64656B73616DLL && *(void *)(v11 + 5) == 0x2E65726F74732E64)
          {
            uint64_t v117 = *(void *)(*((void *)a1 + 3) + 16);
            long long v289 = 0uLL;
            long long v289 = *(_OWORD *)(v117 + 8);
            if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
            {
              uint64_t v151 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
              __int16 v119 = v151 + 2;
              size_t v118 = *v151;
            }
            else
            {
              size_t v118 = 0;
              __int16 v119 = &str_3_24;
            }
            getIntrinsicNameImpl(190, (uint64_t)&v289, 2, *((uint64_t ***)a1 + 5), 0, &v286);
            int v152 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
            std::string::size_type v153 = v286.__r_.__value_.__l.__size_;
            uint64_t v154 = (void *)v286.__r_.__value_.__r.__words[0];
            if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v5 = (llvm::Function *)&v286;
            }
            else {
              uint64_t v5 = (llvm::Function *)v286.__r_.__value_.__r.__words[0];
            }
            if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v153 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
            }
            if (v118 == v153)
            {
              if (v118) {
                LODWORD(v118) = memcmp(v119, v5, v118) != 0;
              }
            }
            else
            {
              LODWORD(v118) = 1;
            }
            if (v152 < 0) {
              operator delete(v154);
            }
            if (v118)
            {
              rename((uint64_t ***)a1);
              uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
              int v84 = (std::string *)&v289;
              int v14 = 190;
              goto LABEL_672;
            }
          }
          if (v12 >= 0xE)
          {
            if (*(void *)v11 == 0x672E64656B73616DLL && *(void *)(v11 + 6) == 0x2E7265687461672ELL)
            {
              long long v289 = 0uLL;
              *(void *)&long long v289 = **(void **)(*((void *)a1 + 3) + 16);
              if (*((unsigned char *)a1 + 18)) {
                llvm::Function::BuildLazyArguments(a1);
              }
              *((void *)&v289 + 1) = **((void **)a1 + 11);
              if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
              {
                uint64_t v171 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
                int v157 = v171 + 2;
                size_t v156 = *v171;
              }
              else
              {
                size_t v156 = 0;
                int v157 = &str_3_24;
              }
              getIntrinsicNameImpl(187, (uint64_t)&v289, 2, *((uint64_t ***)a1 + 5), 0, &v286);
              int v172 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
              std::string::size_type v173 = v286.__r_.__value_.__l.__size_;
              unint64_t v174 = (void *)v286.__r_.__value_.__r.__words[0];
              if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v5 = (llvm::Function *)&v286;
              }
              else {
                uint64_t v5 = (llvm::Function *)v286.__r_.__value_.__r.__words[0];
              }
              if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v173 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
              }
              if (v156 == v173)
              {
                if (v156) {
                  LODWORD(v156) = memcmp(v157, v5, v156) != 0;
                }
              }
              else
              {
                LODWORD(v156) = 1;
              }
              if (v172 < 0) {
                operator delete(v174);
              }
              if (v156)
              {
                rename((uint64_t ***)a1);
                uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
                int v84 = (std::string *)&v289;
                int v14 = 187;
                goto LABEL_672;
              }
            }
            if (v12 >= 0xF && *(void *)v11 == 0x732E64656B73616DLL && *(void *)(v11 + 7) == 0x2E72657474616373)
            {
              uint64_t v176 = *(void *)(*((void *)a1 + 3) + 16);
              long long v289 = 0uLL;
              long long v289 = *(_OWORD *)(v176 + 8);
              if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
              {
                uint64_t v192 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
                uint64_t v178 = v192 + 2;
                size_t v177 = *v192;
              }
              else
              {
                size_t v177 = 0;
                uint64_t v178 = &str_3_24;
              }
              getIntrinsicNameImpl(189, (uint64_t)&v289, 2, *((uint64_t ***)a1 + 5), 0, &v286);
              int v193 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
              std::string::size_type v194 = v286.__r_.__value_.__l.__size_;
              uint64_t v195 = (void *)v286.__r_.__value_.__r.__words[0];
              if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v5 = (llvm::Function *)&v286;
              }
              else {
                uint64_t v5 = (llvm::Function *)v286.__r_.__value_.__r.__words[0];
              }
              if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v194 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
              }
              if (v177 == v194)
              {
                if (v177) {
                  LODWORD(v177) = memcmp(v178, v5, v177) != 0;
                }
              }
              else
              {
                LODWORD(v177) = 1;
              }
              if (v193 < 0) {
                operator delete(v195);
              }
              if (v177)
              {
                rename((uint64_t ***)a1);
                uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
                int v84 = (std::string *)&v289;
                int v14 = 189;
                goto LABEL_672;
              }
            }
          }
        }
      }
      else if (v12 < 7)
      {
        goto LABEL_771;
      }
      BOOL v196 = *(_DWORD *)v11 == 1668113773 && *(_DWORD *)(v11 + 3) == 779710563;
      if (v196 && *((void *)a1 + 12) == 5)
      {
        rename((uint64_t ***)a1);
        int v84 = (std::string *)(*(void *)(*((void *)a1 + 3) + 16) + 8);
        uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
        int v14 = 197;
        goto LABEL_664;
      }
      if (v12 >= 8 && *(void *)v11 == 0x2E65766F6D6D656DLL && *((void *)a1 + 12) == 5)
      {
        rename((uint64_t ***)a1);
        int v84 = (std::string *)(*(void *)(*((void *)a1 + 3) + 16) + 8);
        uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
        int v14 = 200;
        goto LABEL_664;
      }
      BOOL v197 = *(_DWORD *)v11 == 1936549229 && *(_DWORD *)(v11 + 3) == 779380083;
      if (!v197 || *((void *)a1 + 12) != 5) {
        goto LABEL_771;
      }
      rename((uint64_t ***)a1);
      uint64_t v198 = *(void *)(*((void *)a1 + 3) + 16);
      std::string::size_type v199 = *(void *)(v198 + 8);
      std::string::size_type v200 = *(void *)(v198 + 24);
      v286.__r_.__value_.__r.__words[0] = v199;
      v286.__r_.__value_.__l.__size_ = v200;
      uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
      int v84 = &v286;
      int v14 = 202;
      goto LABEL_672;
    case 'n':
      if (v12 < 5) {
        goto LABEL_771;
      }
      if (*(_DWORD *)v11 != 1836480110 || *(unsigned char *)(ValueName + 25) != 46) {
        goto LABEL_771;
      }
      uint64_t v30 = (unsigned char *)(ValueName + 26);
      if (v6 == 15)
      {
        if (*(_DWORD *)v30 != 779775075 || v30[4] != 105)
        {
          v286.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
          v286.__r_.__value_.__l.__size_ = 5;
          LOWORD(v286.__r_.__value_.__r.__words[2]) = 0;
          goto LABEL_624;
        }
        int v18 = 53;
      }
      else
      {
        if (v6 != 16)
        {
          v286.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
          v286.__r_.__value_.__l.__size_ = v6 - 10;
          LOWORD(v286.__r_.__value_.__r.__words[2]) = 0;
          goto LABEL_630;
        }
        BOOL v31 = *(_DWORD *)v30 == 1986359906 && *((_WORD *)v30 + 2) == 12851;
        if (v31 || (*(_DWORD *)v30 == 1986359906 ? (BOOL v32 = *((unsigned __int16 *)v30 + 2) == 13366) : (BOOL v32 = 0), v32))
        {
          int v18 = 8;
        }
        else
        {
          if (*(_DWORD *)v30 != 1668312944 || *((_WORD *)v30 + 2) != 26926)
          {
            v286.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
            v286.__r_.__value_.__l.__size_ = 6;
            LOWORD(v286.__r_.__value_.__r.__words[2]) = 0;
            goto LABEL_633;
          }
          int v18 = 54;
        }
      }
      if (*((void *)a1 + 12) == 1)
      {
        unint64_t v17 = (uint64_t **)*((void *)a1 + 5);
        v286.__r_.__value_.__r.__words[0] = **(void **)(*((void *)a1 + 3) + 16);
        uint64_t v8 = 1;
        goto LABEL_468;
      }
      v286.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      v286.__r_.__value_.__l.__size_ = v6 - 10;
      LOWORD(v286.__r_.__value_.__r.__words[2]) = 0;
      if (v6 != 15)
      {
LABEL_633:
        if (!memcmp(v30, "abs.ll", v6 - 10)) {
LABEL_629:
        }
          LOWORD(v286.__r_.__value_.__r.__words[2]) = 257;
LABEL_630:
        llvm::StringSwitch<BOOL,BOOL>::Cases((uint64_t)&v286, "clz.ll", 6, "popc.ll", 7, "h2f", 3);
        llvm::StringSwitch<BOOL,BOOL>::Case((uint64_t)&v286, "max.i", 5);
        llvm::StringSwitch<BOOL,BOOL>::Cases((uint64_t)&v286, "max.ll", 6, "max.ui", 6, "max.ull", 7);
        llvm::StringSwitch<BOOL,BOOL>::Case((uint64_t)&v286, "min.i", 5);
        llvm::StringSwitch<BOOL,BOOL>::Cases((uint64_t)&v286, "min.ll", 6, "min.ui", 6, "min.ull", 7);
        llvm::StringSwitch<BOOL,BOOL>::StartsWith((uint64_t)&v286, "atomic.load.add.f32.p", 0x15uLL);
        llvm::StringSwitch<BOOL,BOOL>::StartsWith((uint64_t)&v286, "atomic.load.add.f64.p", 0x15uLL);
        if (v286.__r_.__value_.__s.__data_[17] && v286.__r_.__value_.__s.__data_[16])
        {
LABEL_632:
          *a2 = 0;
          return 1;
        }
        goto LABEL_771;
      }
LABEL_624:
      if (*(_DWORD *)v30 == 779313761 && v30[4] == 105) {
        goto LABEL_629;
      }
      goto LABEL_630;
    case 'o':
      if (v12 < 0xB) {
        goto LABEL_771;
      }
      if (*(void *)v11 != 0x69737463656A626FLL || *(void *)(ValueName + 24) != 0x2E657A6973746365) {
        goto LABEL_771;
      }
      *(void *)&long long v289 = **(void **)(*((void *)a1 + 3) + 16);
      if (*((unsigned char *)a1 + 18)) {
        llvm::Function::BuildLazyArguments(a1);
      }
      uint64_t v35 = *((void *)a1 + 12);
      *((void *)&v289 + 1) = **((void **)a1 + 11);
      if ((v35 & 0xFFFFFFFFFFFFFFFELL) != 2)
      {
        if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
        {
          unint64_t v147 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
          uint64_t v111 = v147 + 2;
          size_t v110 = *v147;
        }
        else
        {
          size_t v110 = 0;
          uint64_t v111 = &str_3_24;
        }
        getIntrinsicNameImpl(240, (uint64_t)&v289, 2, *((uint64_t ***)a1 + 5), 0, &v286);
        int v148 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
        std::string::size_type v149 = v286.__r_.__value_.__l.__size_;
        unint64_t v150 = (void *)v286.__r_.__value_.__r.__words[0];
        if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v5 = (llvm::Function *)&v286;
        }
        else {
          uint64_t v5 = (llvm::Function *)v286.__r_.__value_.__r.__words[0];
        }
        if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v149 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
        }
        if (v110 == v149)
        {
          if (v110) {
            LODWORD(v110) = memcmp(v111, v5, v110) != 0;
          }
        }
        else
        {
          LODWORD(v110) = 1;
        }
        if (v148 < 0) {
          operator delete(v150);
        }
        if (!v110) {
          goto LABEL_771;
        }
      }
      rename((uint64_t ***)a1);
      uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
      int v14 = 240;
      int v84 = (std::string *)&v289;
      uint64_t v85 = 2;
      goto LABEL_673;
    case 'p':
      if (v6 != 13)
      {
        if (v12 >= 0xF)
        {
          BOOL v63 = *(void *)v11 == 0x6F6E6E612E727470 && *(void *)(ValueName + 28) == 0x2E6E6F697461746FLL;
          if (v63 && *((void *)a1 + 12) == 4)
          {
            rename((uint64_t ***)a1);
            __int16 v64 = (uint64_t **)*((void *)a1 + 5);
            if (*((_WORD *)a1 + 9))
            {
              llvm::Function::BuildLazyArguments(a1);
              __int16 v162 = *((_WORD *)a1 + 9);
              unint64_t v65 = (std::string::size_type *)*((void *)a1 + 11);
              v286.__r_.__value_.__r.__words[0] = *v65;
              if (v162)
              {
                llvm::Function::BuildLazyArguments(a1);
                unint64_t v65 = (std::string::size_type *)*((void *)a1 + 11);
              }
            }
            else
            {
              unint64_t v65 = (std::string::size_type *)*((void *)a1 + 11);
              v286.__r_.__value_.__r.__words[0] = *v65;
            }
            v286.__r_.__value_.__l.__size_ = v65[5];
            int v84 = &v286;
            uint64_t v13 = v64;
            int v14 = 249;
            goto LABEL_672;
          }
        }
        else if (v12 < 8)
        {
          goto LABEL_771;
        }
        goto LABEL_347;
      }
      if (*(void *)v11 != 0x6863746566657270) {
        goto LABEL_347;
      }
      *(void *)&long long v289 = 0;
      if (*((_WORD *)a1 + 9)) {
        llvm::Function::BuildLazyArguments(a1);
      }
      *(void *)&long long v289 = **((void **)a1 + 11);
      if ((*((unsigned char *)a1 + 23) & 0x10) != 0)
      {
        uint64_t v103 = (size_t *)llvm::Value::getValueName((uint64_t ***)a1);
        size_t v20 = v103 + 2;
        size_t v19 = *v103;
      }
      else
      {
        size_t v19 = 0;
        size_t v20 = &str_3_24;
      }
      BOOL v104 = 1;
      getIntrinsicNameImpl(244, (uint64_t)&v289, 1, *((uint64_t ***)a1 + 5), 0, &v286);
      int v105 = SHIBYTE(v286.__r_.__value_.__r.__words[2]);
      std::string::size_type v106 = v286.__r_.__value_.__l.__size_;
      uint64_t v107 = (void *)v286.__r_.__value_.__r.__words[0];
      if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = (llvm::Function *)&v286;
      }
      else {
        uint64_t v5 = (llvm::Function *)v286.__r_.__value_.__r.__words[0];
      }
      if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v106 = HIBYTE(v286.__r_.__value_.__r.__words[2]);
      }
      if (v19 == v106)
      {
        if (v19)
        {
          BOOL v104 = memcmp(v20, v5, v19) != 0;
          if (v105 < 0) {
            goto LABEL_346;
          }
LABEL_353:
          if (!v104)
          {
LABEL_347:
            if (*(void *)v11 == 0x2E68747561727470)
            {
              uint64_t v108 = (void *)(v11 + 8);
              switch(v12)
              {
                case 0x10uLL:
                  if (*v108 == 0x3436692E68747561)
                  {
                    int v109 = 250;
                  }
                  else
                  {
                    if (*v108 != 0x3436692E6E676973) {
                      goto LABEL_771;
                    }
                    int v109 = 253;
                  }
                  goto LABEL_537;
                case 0x11uLL:
                  if (*v108 == 0x36692E7069727473 && *(unsigned char *)(v11 + 16) == 52)
                  {
                    int v109 = 255;
                  }
                  else
                  {
                    if (*v108 != 0x36692E646E656C62 || *(unsigned char *)(v11 + 16) != 52) {
                      goto LABEL_771;
                    }
                    int v109 = 251;
                  }
LABEL_537:
                  rename((uint64_t ***)a1);
                  uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
                  int v14 = v109;
                  goto LABEL_538;
                case 0x12uLL:
                  if (*v108 != 0x692E6E6769736572 || *(_WORD *)(v11 + 16) != 13366) {
                    goto LABEL_771;
                  }
                  int v109 = 252;
                  goto LABEL_537;
                case 0x18uLL:
                  if (*v108 != 0x6E65672E6E676973 || *(void *)(v11 + 16) != 0x3436692E63697265) {
                    goto LABEL_771;
                  }
                  int v109 = 254;
                  goto LABEL_537;
                default:
                  goto LABEL_771;
              }
            }
            goto LABEL_771;
          }
LABEL_354:
          rename((uint64_t ***)a1);
          uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
          int v84 = (std::string *)&v289;
          int v14 = 244;
LABEL_270:
          uint64_t v85 = 1;
          goto LABEL_673;
        }
        BOOL v104 = 0;
        if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_353;
        }
      }
      else if ((SHIBYTE(v286.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_353;
      }
LABEL_346:
      operator delete(v107);
      if (!v104) {
        goto LABEL_347;
      }
      goto LABEL_354;
    case 's':
      if (v6 != 24) {
        goto LABEL_771;
      }
      BOOL v21 = *(void *)v11 == 0x6F72706B63617473 && *(void *)(ValueName + 29) == 0x6863726F74636574;
      if (!v21 || *(void *)(ValueName + 32) != 0x6B63656863726F74) {
        goto LABEL_771;
      }
      goto LABEL_632;
    case 'v':
      if (v6 != 19) {
        goto LABEL_771;
      }
      BOOL v23 = *(void *)v11 == 0x6F6E6E612E726176 && *(void *)(ValueName + 27) == 0x6E6F697461746F6ELL;
      if (!v23 || *((void *)a1 + 12) != 4) {
        goto LABEL_771;
      }
      rename((uint64_t ***)a1);
      uint64_t v24 = (uint64_t **)*((void *)a1 + 5);
      if (*((_WORD *)a1 + 9))
      {
        llvm::Function::BuildLazyArguments(a1);
        __int16 v146 = *((_WORD *)a1 + 9);
        BOOL v25 = (std::string::size_type *)*((void *)a1 + 11);
        v286.__r_.__value_.__r.__words[0] = *v25;
        if (v146)
        {
          llvm::Function::BuildLazyArguments(a1);
          BOOL v25 = (std::string::size_type *)*((void *)a1 + 11);
        }
      }
      else
      {
        BOOL v25 = (std::string::size_type *)*((void *)a1 + 11);
        v286.__r_.__value_.__r.__words[0] = *v25;
      }
      v286.__r_.__value_.__l.__size_ = v25[5];
      int v84 = &v286;
      uint64_t v13 = v24;
      int v14 = 319;
      goto LABEL_672;
    case 'w':
      if (v12 < 9) {
        goto LABEL_63;
      }
      if (*(void *)v11 == 0x616D662E6D736177 && *(unsigned char *)(ValueName + 29) == 46)
      {
        rename((uint64_t ***)a1);
        unint64_t v17 = (uint64_t **)*((void *)a1 + 5);
        v286.__r_.__value_.__r.__words[0] = **(void **)(*((void *)a1 + 3) + 16);
        uint64_t v8 = 1;
        int v18 = 10138;
        goto LABEL_468;
      }
      if (*(void *)v11 == 0x736D662E6D736177 && *(unsigned char *)(ValueName + 29) == 46)
      {
        rename((uint64_t ***)a1);
        unint64_t v17 = (uint64_t **)*((void *)a1 + 5);
        v286.__r_.__value_.__r.__words[0] = **(void **)(*((void *)a1 + 3) + 16);
        uint64_t v8 = 1;
        int v18 = 10141;
        goto LABEL_468;
      }
      if (v12 >= 0x10 && *(void *)v11 == 0x6E616C2E6D736177 && *(void *)(ValueName + 29) == 0x2E7463656C657365)
      {
        rename((uint64_t ***)a1);
        unint64_t v17 = (uint64_t **)*((void *)a1 + 5);
        v286.__r_.__value_.__r.__words[0] = **(void **)(*((void *)a1 + 3) + 16);
        uint64_t v8 = 1;
        int v18 = 10137;
        goto LABEL_468;
      }
LABEL_63:
      if (v6 != 36)
      {
        if (v6 == 32 && !memcmp((const void *)(ValueName + 21), "wasm.dot.i8x16.i7x16.signed", v12))
        {
          rename((uint64_t ***)a1);
          uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
          int v14 = 10136;
          goto LABEL_538;
        }
        goto LABEL_771;
      }
      if (memcmp((const void *)(ValueName + 21), "wasm.dot.i8x16.i7x16.add.signed", v12)) {
        goto LABEL_771;
      }
      rename((uint64_t ***)a1);
      uint64_t v13 = (uint64_t **)*((void *)a1 + 5);
      int v14 = 10135;
      goto LABEL_538;
    case 'x':
      if (UpgradeX86IntrinsicFunction((uint64_t)a1, v11, v6 - 5, a2)) {
        return 1;
      }
      goto LABEL_771;
    default:
      goto LABEL_771;
  }
}

uint64_t llvm::UpgradeGlobalVariable(uint64_t **this, llvm::GlobalVariable *a2)
{
  v66[1] = *MEMORY[0x263EF8340];
  if ((this[4] & 0xF) == 6
    && ((*((unsigned char *)this + 23) & 0x10) != 0
     && (uint64_t v3 = llvm::Value::getValueName((uint64_t ***)this), *(void *)v3 == 12)
     && (*(void *)(v3 + 16) == 0x646D632E6D766C6CLL ? (BOOL v4 = *(_DWORD *)(v3 + 24) == 1701734764) : (BOOL v4 = 0), v4)
     || (*((unsigned char *)this + 23) & 0x10) != 0
     && (uint64_t v5 = llvm::Value::getValueName((uint64_t ***)this), *(void *)v5 == 20)
     && (*(void *)(v5 + 16) == 0x626D652E6D766C6CLL ? (BOOL v6 = *(void *)(v5 + 24) == 0x6F6D2E6465646465) : (BOOL v6 = 0),
         v6 ? (BOOL v7 = *(_DWORD *)(v5 + 32) == 1701606756) : (BOOL v7 = 0),
         v7)))
  {
    uint64_t v14 = 0;
    *((_DWORD *)this + 8) = this[4] & 0xFFFFBCC0 | 0x4008;
  }
  else
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      return 0;
    }
    Valueuint64_t Name = llvm::Value::getValueName((uint64_t ***)this);
    if (*(void *)ValueName != 17
      || (*(void *)(ValueName + 16) == 0x6F6C672E6D766C6CLL
        ? (BOOL v9 = *(void *)(ValueName + 24) == 0x726F74635F6C6162)
        : (BOOL v9 = 0),
          v9 ? (BOOL v10 = *(unsigned char *)(ValueName + 32) == 115) : (BOOL v10 = 0),
          !v10))
    {
      if ((*((unsigned char *)this + 23) & 0x10) == 0) {
        return 0;
      }
      uint64_t v11 = llvm::Value::getValueName((uint64_t ***)this);
      if (*(void *)v11 != 17) {
        return 0;
      }
      BOOL v12 = *(void *)(v11 + 16) == 0x6F6C672E6D766C6CLL && *(void *)(v11 + 24) == 0x726F74645F6C6162;
      if (!v12 || *(unsigned char *)(v11 + 32) != 115) {
        return 0;
      }
    }
    if (*((unsigned char *)this + 16))
    {
      if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
        return 0;
      }
    }
    else if (this[9] == (uint64_t *)(this + 9) && (*((unsigned char *)this + 35) & 1) == 0)
    {
      return 0;
    }
    uint64_t v14 = 0;
    BOOL v15 = this[3];
    if (v15)
    {
      if (*((unsigned char *)v15 + 8) == 17)
      {
        uint64_t v14 = 0;
        uint64_t v16 = v15[3];
        if (v16)
        {
          if (*(unsigned char *)(v16 + 8) == 16)
          {
            if (*(_DWORD *)(v16 + 12) != 2) {
              return 0;
            }
            uint64_t v17 = **this;
            int v53 = v55;
            uint64_t v54 = 0x200000000;
            uint64_t v56 = v17;
            BOOL v57 = &v65;
            __int16 v58 = v66;
            uint64_t v59 = 0;
            int v60 = 0;
            __int16 v61 = 512;
            char v62 = 7;
            uint64_t v55[4] = 0;
            v55[5] = 0;
            uint64_t v63 = 0;
            uint64_t v64 = 0;
            unint64_t v65 = &unk_270DC2FC0;
            v66[0] = &unk_270DC30B0;
            long long v46 = *(_OWORD *)*(void *)(v16 + 16);
            uint64_t v18 = llvm::PointerType::get((llvm::PointerType **)(*(void *)v17 + 1944), 0);
            size_t v19 = *(uint64_t **)v46;
            long long v50 = v46;
            uint64_t v51 = v18;
            size_t v20 = (llvm::ConstantAggregateZero *)llvm::StructType::get(v19, (uint64_t)&v50, 3, 0);
            uint64_t v21 = (uint64_t)*(this - 4);
            int v22 = *(_DWORD *)(v21 + 20);
            std::string __p = 0;
            uint64_t v48 = 0;
            uint64_t v49 = 0;
            BOOL v23 = (llvm::Type *)(v22 & 0x7FFFFFF);
            if ((v22 & 0x7FFFFFF) != 0)
            {
              std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](&__p, v22 & 0x7FFFFFF);
              uint64_t v24 = (char *)v48;
              bzero(v48, 8 * (void)v23);
              uint64_t v25 = 0;
              uint64_t v26 = 0;
              uint64_t v48 = &v24[8 * (void)v23];
              do
              {
                int v27 = *(_DWORD *)(v21 + 20);
                if ((v27 & 0x40000000) != 0) {
                  uint64_t v28 = *(void *)(v21 - 8);
                }
                else {
                  uint64_t v28 = v21 - 32 * (v27 & 0x7FFFFFF);
                }
                int v29 = *(llvm::Constant **)(v28 + v26);
                uint64_t AggregateElement = llvm::Constant::getAggregateElement(v29, 0);
                uint64_t v31 = llvm::Constant::getAggregateElement(v29, (llvm::Type *)1);
                BOOL v32 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType **)(*(void *)v56 + 1944), 0);
                uint64_t NullValue = llvm::Constant::getNullValue(v32, v33);
                *(void *)&long long v50 = AggregateElement;
                *((void *)&v50 + 1) = v31;
                uint64_t v51 = NullValue;
                uint64_t v35 = llvm::ConstantStruct::get(v20, (llvm::Constant **)&v50, (unint64_t *)3);
                *(void *)((char *)__p + v25) = v35;
                v26 += 32;
                v25 += 8;
              }
              while (32 * (void)v23 != v26);
            }
            llvm::ArrayType::get((uint64_t **)v20, v23);
            size_t v37 = (llvm::PointerType ***)llvm::ConstantArray::get(v36, (llvm::Type *)__p, (unint64_t *)(((unsigned char *)v48 - (unsigned char *)__p) >> 3));
            BOOL v38 = operator new(0x78uLL);
            uint64_t v14 = (uint64_t)(v38 + 8);
            v38[13] = v38[13] & 0x38000000 | 1;
            *(void *)BOOL v38 = 0;
            *((void *)v38 + 1) = 0;
            *((void *)v38 + 2) = 0;
            *((void *)v38 + 3) = v38 + 8;
            uint64_t v39 = *v37;
            int v40 = this[4] & 0xF;
            if ((*((unsigned char *)this + 23) & 0x10) != 0)
            {
              unsigned int v44 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)this);
              uint64_t v45 = *v44;
              unint64_t v42 = v44 + 2;
              uint64_t v41 = v45;
            }
            else
            {
              uint64_t v41 = 0;
              unint64_t v42 = &str_3_24;
            }
            __int16 v52 = 261;
            *(void *)&long long v50 = v42;
            *((void *)&v50 + 1) = v41;
            llvm::GlobalVariable::GlobalVariable(v14, v39, 0, v40, (uint64_t)v37, (const llvm::Twine *)&v50, 0, 0, 0);
            if (__p)
            {
              uint64_t v48 = __p;
              operator delete(__p);
            }
            if (v53 != v55) {
              free(v53);
            }
          }
        }
      }
    }
  }
  return v14;
}

std::string *llvm::UpgradeInlineAsmString(std::string *__s)
{
  int v1 = __s;
  uint64_t v2 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v3 = (std::string *)__s->__r_.__value_.__r.__words[0];
    uint64_t size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t v3 = __s;
    uint64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  }
  if (size >= 6)
  {
    uint64_t v5 = (std::string *)((char *)v3 + size);
    __s = v3;
    do
    {
      __s = (std::string *)memchr(__s, 109, size - 5);
      if (!__s) {
        break;
      }
      if (LODWORD(__s->__r_.__value_.__l.__data_) == 158756717 && WORD2(__s->__r_.__value_.__r.__words[0]) == 28774)
      {
        if (__s != v5 && __s == v3)
        {
          if ((v2 & 0x80) != 0)
          {
            BOOL v7 = (std::string *)v1->__r_.__value_.__r.__words[0];
            uint64_t v8 = v1->__r_.__value_.__l.__size_;
          }
          else
          {
            BOOL v7 = v1;
            uint64_t v8 = v2;
          }
          if (v8 >= 33)
          {
            BOOL v9 = (std::string *)((char *)v7 + v8);
            __s = v7;
            while (1)
            {
              __s = (std::string *)memchr(__s, 111, v8 - 32);
              if (!__s) {
                break;
              }
              BOOL v10 = __s;
              __s = (std::string *)memcmp(__s, "objc_retainAutoreleaseReturnValue", 0x21uLL);
              if (!__s)
              {
                if (v10 != v9 && (char *)v10 - (char *)v7 != -1)
                {
                  if ((v2 & 0x80) != 0)
                  {
                    uint64_t v11 = (std::string *)v1->__r_.__value_.__r.__words[0];
                    uint64_t v2 = v1->__r_.__value_.__l.__size_;
                  }
                  else
                  {
                    uint64_t v11 = v1;
                  }
                  if (v2 >= 8)
                  {
                    BOOL v12 = (std::string *)((char *)v11 + v2);
                    __s = v11;
                    while (1)
                    {
                      __s = (std::string *)memchr(__s, 35, v2 - 7);
                      if (!__s) {
                        break;
                      }
                      if (__s->__r_.__value_.__r.__words[0] == 0x72656B72616D2023)
                      {
                        if (__s != v12 && (char *)__s - (char *)v11 != -1)
                        {
                          return std::string::replace(v1, (char *)__s - (char *)v11, 1uLL, ";");
                        }
                        return __s;
                      }
                      __s = (std::string *)((char *)__s + 1);
                      uint64_t v2 = (char *)v12 - (char *)__s;
                      if ((char *)v12 - (char *)__s < 8) {
                        return __s;
                      }
                    }
                  }
                }
                return __s;
              }
              __s = (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + 1);
              uint64_t v8 = (char *)v9 - ((char *)&v10->__r_.__value_.__l.__data_ + 1);
              if (v8 < 33) {
                return __s;
              }
            }
          }
        }
        return __s;
      }
      __s = (std::string *)((char *)__s + 1);
      uint64_t size = (char *)v5 - (char *)__s;
    }
    while ((char *)v5 - (char *)__s >= 6);
  }
  return __s;
}

void llvm::UpgradeIntrinsicCall(llvm *this, llvm::CallBase *a2, llvm::Function *a3)
{
  v1663[1] = *MEMORY[0x263EF8340];
  v1632 = a2;
  v1633 = this;
  uint64_t v4 = *((void *)this - 4);
  if (v4) {
    BOOL v5 = *(unsigned char *)(v4 + 16) == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    v1627 = (llvm::Value *)*((void *)this - 4);
    BOOL v6 = **(uint64_t ***)this;
    BOOL v7 = v1648;
    v1647[0] = v1648;
    v1647[1] = (void *)0x200000000;
    uint64_t v1650 = 0;
    v1651 = v6;
    v1652 = &v1660;
    v1653 = &v1661;
    uint64_t v1654 = 0;
    int v1655 = 0;
    __int16 v1656 = 512;
    char v1657 = 7;
    uint64_t v1649 = 0;
    uint64_t v1659 = 0;
    uint64_t v1658 = 0;
    v1660 = &unk_270DC2FC0;
    v1661 = &unk_270DC30B0;
    llvm::IRBuilderBase::SetInsertPoint((unsigned int *)v1647, *((void *)this + 5), (uint64_t)this + 24);
    uint64_t v14 = v1632;
    if (v1632)
    {
      v1628 = &v1633;
      size_t v1629 = (size_t)&v1632;
      v1630 = v1647;
      int v15 = *((_DWORD *)v1632 + 9);
      if (v15 > 2933)
      {
        if (v15 > 10958)
        {
          if (v15 > 11392)
          {
            if (v15 <= 11534)
            {
              if ((v15 - 11393) >= 4)
              {
                if ((v15 - 11400) < 3)
                {
                  uint64_t v16 = (unsigned __int8 *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                  uint64_t v17 = *(void *)v16;
                  llvm::FixedVectorType::get((uint64_t **)(*v6 + 1704), (llvm::Type *)4);
                  if (v17 == v18)
                  {
                    size_t v19 = (unsigned __int8 *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                    llvm::FixedVectorType::get((uint64_t **)(*v6 + 2016), (llvm::Type *)2);
                    uint64_t v21 = v20;
                    __src = "cast";
                    LOWORD(NullValue) = 259;
                    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v16, v20, (uint64_t)&__src);
                    __src = "cast";
                    LOWORD(NullValue) = 259;
                    BOOL v23 = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v19, v21, (uint64_t)&__src);
                    uint64_t v24 = v1632;
                    if (v1632) {
                      uint64_t v25 = *((void *)v1632 + 3);
                    }
                    else {
                      uint64_t v25 = 0;
                    }
                    v1644[0] = (llvm::hashing::detail::hash_state *)Cast;
LABEL_498:
                    v1644[1] = v23;
                    LOWORD(NullValue) = 257;
                    int v84 = (uint64_t *)v1644;
LABEL_499:
                    uint64_t v141 = 2;
                    goto LABEL_1101;
                  }
LABEL_1108:
                  if (v1647[0] != v7) {
                    free(v1647[0]);
                  }
                  return;
                }
                goto LABEL_495;
              }
              goto LABEL_388;
            }
            if ((v15 - 11537) >= 4)
            {
              if ((v15 - 11535) < 2)
              {
                uint64_t v25 = *((void *)v1632 + 3);
                int v163 = (llvm::hashing::detail::hash_state *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
LABEL_230:
                v1644[0] = v163;
                LOWORD(NullValue) = 257;
                int v84 = (uint64_t *)v1644;
                uint64_t v24 = v1632;
                uint64_t v141 = 1;
                goto LABEL_1101;
              }
              goto LABEL_495;
            }
            uint64_t v85 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
            char v86 = (char *)llvm::CallBase::arg_end(v1633);
            __src = &v1641;
            uint64_t v1640 = 0x400000000;
            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v85, v86);
            llvm::VectorType::getInteger(**((void **)__src + 2));
            BOOL v87 = (unsigned __int8 *)*((void *)__src + 2);
            __int16 v1646 = 257;
            uint64_t v89 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v87, v88, (uint64_t)v1644);
            uint64_t v90 = (uint64_t *)__src;
            *((void *)__src + 2) = v89;
            std::string::size_type v91 = v1632;
            if (v1632) {
              uint64_t v92 = *((void *)v1632 + 3);
            }
            else {
              uint64_t v92 = 0;
            }
            uint64_t v166 = v1640;
            __int16 v1646 = 257;
            goto LABEL_307;
          }
          if ((v15 - 10959) <= 8)
          {
            if (((1 << (v15 + 49)) & 0x11F) != 0)
            {
              long long v50 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
              uint64_t v51 = (char *)llvm::CallBase::arg_end(v1633);
              __src = &v1641;
              uint64_t v1640 = 0x400000000;
              llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v50, v51);
              __int16 v52 = v1632;
              int v53 = (llvm::Type *)*(unsigned int *)(*(void *)v1633 + 32);
              uint64_t v54 = (uint64_t *)__src;
              if (*((_DWORD *)v1632 + 9) == 10967
                && (uint64_t v55 = (unsigned __int8 *)*((void *)__src + 1),
                    llvm::FixedVectorType::get((uint64_t **)(*v1651 + 1680), (llvm::Type *)*(unsigned int *)(*(void *)v1633 + 32)), v1646 = 257, v57 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v55, v56, (uint64_t)v1644), uint64_t v54 = (uint64_t *)__src, *((void *)__src + 1) = v57, (v52 = v1632) == 0))
              {
                uint64_t v58 = 0;
              }
              else
              {
                uint64_t v58 = *((void *)v52 + 3);
              }
              __int16 v1646 = 257;
              uint64_t v59 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v58, (uint64_t)v52, v54, v1640, (uint64_t)v1644, 0);
              llvm::FixedVectorType::get((uint64_t **)(*v1651 + 1968), v53);
              __int16 v1646 = 257;
              __int16 v61 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, (unsigned __int8 *)v59, v60, (uint64_t)v1644);
              llvm::Value::takeName((llvm::Value *)v59, v1633);
              uint64_t v63 = v1633;
              uint64_t v64 = (llvm::Value *)v61;
LABEL_223:
              llvm::Value::doRAUW(v63, v64, (llvm::Value *)1, v62);
              llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*((void *)v1633 + 5) + 40, (uint64_t)v1633 + 24);
              __int16 v162 = (llvm::hashing::detail::hash_state *)__src;
              if (__src == &v1641) {
                goto LABEL_1108;
              }
LABEL_341:
              free(v162);
              goto LABEL_1108;
            }
            unint64_t v144 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
            uint64_t v145 = (char *)llvm::CallBase::arg_end(v1633);
            __src = &v1641;
            uint64_t v1640 = 0x400000000;
            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v144, v145);
            __int16 v146 = (llvm::Type *)(2 * *(_DWORD *)(*(void *)v1633 + 32));
            unint64_t v147 = (unsigned __int8 *)*((void *)__src + 1);
            llvm::FixedVectorType::get((uint64_t **)(*v1651 + 1680), v146);
            __int16 v1646 = 257;
            std::string::size_type v149 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v147, v148, (uint64_t)v1644);
            unint64_t v150 = __src;
            *((void *)__src + 1) = v149;
            uint64_t v151 = (unsigned __int8 *)*((void *)v150 + 2);
            llvm::FixedVectorType::get((uint64_t **)(*v1651 + 1680), v146);
            __int16 v1646 = 257;
            std::string::size_type v153 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v151, v152, (uint64_t)v1644);
            uint64_t v154 = (uint64_t *)__src;
            *((void *)__src + 2) = v153;
            int v79 = v1632;
            if (v1632) {
              uint64_t v80 = *((void *)v1632 + 3);
            }
            else {
              uint64_t v80 = 0;
            }
            uint64_t v155 = v1640;
            __int16 v1646 = 257;
LABEL_392:
            AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v80, (uint64_t)v79, v154, v155, (uint64_t)v1644, 0);
            v227 = (llvm::hashing::detail::hash_state *)__src;
            if (__src == &v1641)
            {
LABEL_1102:
              v348 = v1633;
              uint64_t v347 = AlignedLoad;
LABEL_1103:
              llvm::Value::takeName((llvm::Value *)v347, v348);
              goto LABEL_1104;
            }
LABEL_393:
            free(v227);
            goto LABEL_1102;
          }
          if (v15 == 11268)
          {
            if ((*((_DWORD *)v1633 + 5) & 0x7FFFFFF) != 0)
            {
              uint64_t v269 = *((void *)v1632 + 3);
              LOWORD(NullValue) = 257;
              int v270 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v269, (uint64_t)v1632, 0, 0, (uint64_t)&__src, 0);
              LODWORD(v1644[0]) = 1;
              LOWORD(NullValue) = 257;
              Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1647, v270, (unsigned int *)v1644, 1, (uint64_t)&__src);
              uint64_t v272 = (unsigned __int8 *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
              v273 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType **)*Value, 0);
              LOWORD(NullValue) = 257;
              uint64_t v274 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v272, v273, (uint64_t)&__src);
              llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v1647, (llvm::Type **)Value, (uint64_t)v274, 256, 0);
              LODWORD(v1644[0]) = 0;
              LOWORD(NullValue) = 257;
              v275 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1647, v270, (unsigned int *)v1644, 1, (uint64_t)&__src);
              llvm::Value::takeName((llvm::Value *)v270, v1633);
              unint64_t v276 = v1633;
              v277 = (llvm::Value *)v275;
LABEL_1105:
              llvm::Value::doRAUW(v276, v277, (llvm::Value *)1, v134);
              goto LABEL_1106;
            }
            goto LABEL_1108;
          }
LABEL_495:
          llvm::UpgradeIntrinsicCall(llvm::CallBase *,llvm::Function *)::$_0::operator()((uint64_t)&v1628, v13, (uint64_t)v8, v9);
          goto LABEL_1108;
        }
        if (v15 > 10315)
        {
          if ((v15 - 10464) < 6)
          {
            unint64_t v65 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
            __int16 v66 = (char *)llvm::CallBase::arg_end(v1633);
            __src = &v1641;
            uint64_t v1640 = 0x400000000;
            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v65, v66);
            X86MaskVec = getX86MaskVec((uint64_t)v1647, *((unsigned __int8 **)__src + 3), *(_DWORD *)(**(void **)__src + 32));
            int v68 = (uint64_t *)__src;
            *((void *)__src + 3) = X86MaskVec;
            if (v1632) {
              uint64_t v69 = *((void *)v1632 + 3);
            }
            else {
              uint64_t v69 = 0;
            }
            __int16 v1646 = 257;
            long long v160 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v69, (uint64_t)v1632, v68, v1640, (uint64_t)v1644, 0);
            uint64_t v161 = ApplyX86MaskOn1BitsVec((llvm::IntegerType **)v1647, (llvm::Type *)v160, 0);
            llvm::Value::takeName((llvm::Value *)v160, v1633);
            uint64_t v63 = v1633;
            uint64_t v64 = (llvm::Value *)v161;
            goto LABEL_223;
          }
          int v49 = 10316;
LABEL_387:
          if (v15 != v49) {
            goto LABEL_495;
          }
LABEL_388:
          uint64_t v264 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
          unint64_t v265 = (char *)llvm::CallBase::arg_end(v1633);
          __src = &v1641;
          uint64_t v1640 = 0x400000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v264, v265);
          unint64_t v266 = (unsigned __int8 *)*((void *)__src + v1640 - 1);
          uint64_t v267 = (llvm::Type *)(*v6 + 1944);
          v1644[0] = (llvm::hashing::detail::hash_state *)"trunc";
          __int16 v1646 = 259;
          int v268 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 38, v266, v267, (uint64_t)v1644);
          uint64_t v155 = v1640;
          *((void *)__src + v1640 - 1) = v268;
          int v79 = v1632;
          if (v1632) {
            uint64_t v80 = *((void *)v1632 + 3);
          }
          else {
            uint64_t v80 = 0;
          }
          uint64_t v154 = (uint64_t *)__src;
          __int16 v1646 = 257;
          goto LABEL_392;
        }
        if ((v15 - 2934) > 9 || ((1 << (v15 - 118)) & 0x3F1) == 0)
        {
          int v49 = 10247;
          goto LABEL_387;
        }
        goto LABEL_232;
      }
      if (v15 <= 318)
      {
        if (v15 > 164)
        {
          if (v15 <= 239)
          {
            unsigned int v28 = v15 - 165;
            if (v28 > 0x25) {
              goto LABEL_495;
            }
            if (((1 << v28) & 0x3C00000) != 0)
            {
              uint64_t v123 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
              uint64_t v124 = (char *)llvm::CallBase::arg_end(v1633);
              __src = &v1641;
              uint64_t v1640 = 0x400000000;
              llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v123, v124);
              if (v1632) {
                uint64_t v125 = *((void *)v1632 + 3);
              }
              else {
                uint64_t v125 = 0;
              }
              __int16 v1646 = 257;
              AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v125, (uint64_t)v1632, (uint64_t *)__src, v1640, (uint64_t)v1644, 0);
              llvm::Instruction::copyMetadata((uint64_t)AlignedLoad, (uint64_t)v1633, 0, 0);
LABEL_308:
              v227 = (llvm::hashing::detail::hash_state *)__src;
              if (__src == &v1641) {
                goto LABEL_1102;
              }
              goto LABEL_393;
            }
            if (((1 << v28) & 0x2900000000) == 0)
            {
              if (((1 << v28) & 3) == 0) {
                goto LABEL_495;
              }
LABEL_232:
              unint64_t v164 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
              int v165 = (char *)llvm::CallBase::arg_end(v1633);
              __src = &v1641;
              uint64_t v1640 = 0x400000000;
              llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v164, v165);
              std::string::size_type v91 = v1632;
              if (v1632) {
                uint64_t v92 = *((void *)v1632 + 3);
              }
              else {
                uint64_t v92 = 0;
              }
              uint64_t v90 = (uint64_t *)__src;
LABEL_236:
              uint64_t v166 = v1640;
              __int16 v1646 = 257;
LABEL_307:
              AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v92, (uint64_t)v91, v90, v166, (uint64_t)v1644, 0);
              goto LABEL_308;
            }
            int v29 = v1633;
            if (((llvm::CallBase::arg_end(v1633) - ((void)v29 - 32 * (*((_DWORD *)v29 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0xA0) {
              goto LABEL_495;
            }
            uint64_t v30 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
            v1644[0] = *v30;
            v1644[1] = v30[4];
            *(void *)&long long v1645 = v30[8];
            *((void *)&v1645 + 1) = v30[16];
            if (v1632) {
              uint64_t v31 = *((void *)v1632 + 3);
            }
            else {
              uint64_t v31 = 0;
            }
            LOWORD(NullValue) = 257;
            AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v31, (uint64_t)v1632, (uint64_t *)v1644, 4, (uint64_t)&__src, 0);
            uint64_t v315 = *((void *)v1633 + 8);
            if (!v315)
            {
              uint64_t v317 = 0;
              uint64_t v318 = 0;
              __src = 0;
              uint64_t v1640 = 0;
LABEL_514:
              uint64_t v1641 = 0;
LABEL_515:
              uint64_t v1642 = v315;
              AlignedLoad[8] = (uint64_t)llvm::AttributeList::get(v6, v317, v318, (uint64_t *)&__src, 4uLL);
              uint64_t v349 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[12];
              v350 = (unint64_t *)(v349 + 24);
              v351 = (unint64_t *)(v349 + 24);
              if (*(_DWORD *)(v349 + 32) >= 0x41u) {
                v351 = (unint64_t *)*v350;
              }
              unint64_t v352 = *v351;
              unint64_t v353 = __clz(v352) ^ 0x13F;
              if (v352) {
                __int16 v354 = v353;
              }
              else {
                __int16 v354 = 0;
              }
              llvm::MemIntrinsicBase<llvm::MemIntrinsic>::setDestAlignment((uint64_t)AlignedLoad, v354);
              if ((*(_DWORD *)(*(AlignedLoad - 4) + 36) - 197) <= 3
                && *(_DWORD *)(*(AlignedLoad - 4) + 36) != 198)
              {
                if (*(_DWORD *)(v349 + 32) >= 0x41u) {
                  v350 = (unint64_t *)*v350;
                }
                unint64_t v355 = __clz(*v350) ^ 0x13F;
                if (*v350) {
                  __int16 v356 = v355;
                }
                else {
                  __int16 v356 = 0;
                }
                llvm::MemTransferBase<llvm::MemIntrinsic>::setSourceAlignment((uint64_t)AlignedLoad, v356);
              }
              goto LABEL_1102;
            }
            unsigned int v316 = *(_DWORD *)(v315 + 8);
            if (v316)
            {
              uint64_t v317 = *(void *)(v315 + 40);
              if (v316 != 1)
              {
                uint64_t v318 = *(void *)(v315 + 48);
                if (v316 > 2)
                {
                  __src = *(void **)(v315 + 56);
                  if (v316 != 3)
                  {
                    uint64_t v1640 = *(void *)(v315 + 64);
                    if (v316 > 4)
                    {
                      uint64_t v1641 = *(void *)(v315 + 72);
                      if (v316 < 7) {
                        uint64_t v315 = 0;
                      }
                      else {
                        uint64_t v315 = *(void *)(v315 + 88);
                      }
                      goto LABEL_515;
                    }
                    goto LABEL_513;
                  }
LABEL_512:
                  uint64_t v1640 = 0;
LABEL_513:
                  uint64_t v315 = 0;
                  goto LABEL_514;
                }
LABEL_511:
                __src = 0;
                goto LABEL_512;
              }
            }
            else
            {
              uint64_t v317 = 0;
            }
            uint64_t v318 = 0;
            goto LABEL_511;
          }
          if (v15 == 240)
          {
            std::string::size_type v280 = v1633;
            if (((llvm::CallBase::arg_end(v1633) - ((void)v280 - 32 * (*((_DWORD *)v280 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x40)
            {
              uint64_t v281 = *v1651;
              uint64_t v282 = *(void *)(*v1651 + 1600);
              if (!v282)
              {
                uint64_t v282 = llvm::ConstantInt::get(v281 + 1920, 0);
                *(void *)(v281 + 1600) = v282;
              }
              char v283 = v1633;
            }
            else
            {
              char v283 = v1633;
              uint64_t v282 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
            }
            if (((llvm::CallBase::arg_end(v283) - ((void)v283 - 32 * (*((_DWORD *)v283 + 5) & 0x7FFFFFF))) & 0x1FFFFFFF80) != 0)
            {
              uint64_t v324 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[12];
            }
            else
            {
              uint64_t v342 = *v1651;
              uint64_t v324 = *(void *)(*v1651 + 1600);
              if (!v324)
              {
                uint64_t v324 = llvm::ConstantInt::get(v342 + 1920, 0);
                *(void *)(v342 + 1600) = v324;
              }
            }
            uint64_t v24 = v1632;
            if (v1632) {
              uint64_t v25 = *((void *)v1632 + 3);
            }
            else {
              uint64_t v25 = 0;
            }
            size_t v343 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
            v1644[0] = *v343;
            v1644[1] = v343[4];
            *(void *)&long long v1645 = v282;
            *((void *)&v1645 + 1) = v324;
            LOWORD(NullValue) = 257;
            int v84 = (uint64_t *)v1644;
            uint64_t v141 = 4;
            goto LABEL_1101;
          }
          if (v15 != 249)
          {
            if (v15 != 297) {
              goto LABEL_495;
            }
            uint64_t v25 = *((void *)v1632 + 3);
            LOWORD(NullValue) = 257;
            uint64_t v24 = v1632;
            int v84 = 0;
            uint64_t v141 = 0;
LABEL_1101:
            AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v25, (uint64_t)v24, v84, v141, (uint64_t)&__src, 0);
            goto LABEL_1102;
          }
LABEL_237:
          unint64_t v167 = v1633;
          if (((llvm::CallBase::arg_end(v1633) - ((void)v167 - 32 * (*((_DWORD *)v167 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x80)
          {
            uint64_t v168 = v1632;
            if (v1632) {
              uint64_t v169 = *((void *)v1632 + 3);
            }
            else {
              uint64_t v169 = 0;
            }
            uint64_t v344 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
            __src = *(void **)v344;
            uint64_t v1640 = *((void *)v344 + 4);
            uint64_t v1641 = *((void *)v344 + 8);
            uint64_t v1642 = *((void *)v344 + 12);
            v345 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType **)(*v1651 + 1944), 0);
            uint64_t NullValue = llvm::Constant::getNullValue(v345, v346);
            __int16 v1646 = 257;
            uint64_t v347 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v169, (uint64_t)v168, (uint64_t *)&__src, 5, (uint64_t)v1644, 0);
            AlignedLoad = v347;
            v348 = v1633;
            goto LABEL_1103;
          }
          goto LABEL_495;
        }
        switch(v15)
        {
          case '5':
          case '7':
            uint64_t v81 = *((void *)v1632 + 3);
            v1644[0] = *((llvm::hashing::detail::hash_state **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
            uint64_t v82 = *v1651;
            uint64_t v83 = *(llvm::hashing::detail::hash_state **)(*v1651 + 1600);
            if (!v83)
            {
              uint64_t v83 = (llvm::hashing::detail::hash_state *)llvm::ConstantInt::get(v82 + 1920, 0);
              *(void *)(v82 + 1600) = v83;
            }
            v1644[1] = v83;
            LOWORD(NullValue) = 257;
            int v84 = (uint64_t *)v1644;
            uint64_t v25 = v81;
            uint64_t v24 = v14;
            goto LABEL_499;
          case '6':
            goto LABEL_227;
          case '8':
          case '9':
          case ':':
            goto LABEL_495;
          case ';':
            if ((*((unsigned char *)v1627 + 23) & 0x10) != 0)
            {
              Valueuint64_t Name = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1627);
              unint64_t v320 = *ValueName;
              uint64_t v279 = (char *)(ValueName + 2);
              unint64_t v278 = v320;
            }
            else
            {
              unint64_t v278 = 0;
              uint64_t v279 = (char *)&str_3_24;
            }
            uint64_t v321 = 5;
            if (v278 < 5) {
              uint64_t v321 = v278;
            }
            if (v278 - v321 >= 8 && *(void *)&v279[v321] == 0x726464612E676264)
            {
              v413 = *(void **)(((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8] + 24);
              __src = (void *)6;
              uint64_t v414 = llvm::DIExpression::append(v413, &__src, 1);
              uint64_t v415 = v1632;
              if (v1632) {
                uint64_t v416 = *((void *)v1632 + 3);
              }
              else {
                uint64_t v416 = 0;
              }
              v476 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
              v1644[0] = *v476;
              v1644[1] = v476[4];
              *(void *)&long long v1645 = llvm::MetadataAsValue::get(v6, v414);
              LOWORD(NullValue) = 257;
              int v84 = (uint64_t *)v1644;
              uint64_t v25 = v416;
              uint64_t v24 = v415;
              goto LABEL_1100;
            }
            v322 = v1633;
            v323 = (unsigned __int8 *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
            if (!v323 || v323[16] > 0x14u) {
              goto LABEL_1107;
            }
            if ((llvm::Constant::isZeroValue((llvm::Constant *)v323) & 1) == 0) {
              goto LABEL_1106;
            }
            uint64_t v24 = v1632;
            if (v1632) {
              uint64_t v25 = *((void *)v1632 + 3);
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v486 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
            v1644[0] = *v486;
            v1644[1] = v486[8];
            *(void *)&long long v1645 = v486[12];
            break;
          default:
            if (v15 != 8 && v15 != 18) {
              goto LABEL_495;
            }
LABEL_227:
            uint64_t v25 = *((void *)v1632 + 3);
            int v163 = (llvm::hashing::detail::hash_state *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
            goto LABEL_230;
        }
LABEL_1099:
        LOWORD(NullValue) = 257;
        int v84 = (uint64_t *)v1644;
LABEL_1100:
        uint64_t v141 = 3;
        goto LABEL_1101;
      }
      if (v15 <= 988)
      {
        if (v15 <= 487)
        {
          if (v15 == 319) {
            goto LABEL_237;
          }
          if (v15 == 320)
          {
            if ((*((unsigned char *)v1627 + 23) & 0x10) != 0)
            {
              uint64_t v336 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1627);
              unint64_t v337 = *v336;
              unint64_t v285 = (char *)(v336 + 2);
              unint64_t v284 = v337;
            }
            else
            {
              unint64_t v284 = 0;
              unint64_t v285 = (char *)&str_3_24;
            }
            uint64_t v338 = 5;
            if (v284 < 5) {
              uint64_t v338 = v284;
            }
            if (v284 - v338 >= 0x15)
            {
              BOOL v339 = *(void *)&v285[v338] == 0x2E34366863726161
                  && *(void *)&v285[v338 + 8] == 0x6C7075742E657673;
              if (v339 && *(void *)&v285[v338 + 13] == 0x7465672E656C7075)
              {
                uint64_t v417 = **(void **)(*((void *)v1627 + 3) + 16);
                if (*(unsigned char *)(v417 + 8) != 19) {
                  uint64_t v417 = 0;
                }
                int v418 = *(_DWORD *)(v417 + 32);
                uint64_t v419 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                int64x2_t v420 = (void *)(v419 + 24);
                if (*(_DWORD *)(v419 + 32) >= 0x41u) {
                  int64x2_t v420 = (void *)*v420;
                }
                BOOL v23 = (llvm::hashing::detail::hash_state *)llvm::ConstantInt::get(*v6 + 2016, (v418 * *(_DWORD *)v420));
                uint64_t v24 = v1632;
                if (v1632) {
                  uint64_t v25 = *((void *)v1632 + 3);
                }
                else {
                  uint64_t v25 = 0;
                }
                v1644[0] = *((llvm::hashing::detail::hash_state **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                goto LABEL_498;
              }
            }
            goto LABEL_495;
          }
          if (v15 != 321) {
            goto LABEL_495;
          }
          if ((*((unsigned char *)v1627 + 23) & 0x10) != 0)
          {
            int64_t v325 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1627);
            unint64_t v326 = *v325;
            unint64_t v143 = v325 + 2;
            unint64_t v142 = v326;
          }
          else
          {
            unint64_t v142 = 0;
            unint64_t v143 = &str_3_24;
          }
          uint64_t v327 = 5;
          if (v142 < 5) {
            uint64_t v327 = v142;
          }
          unint64_t v328 = v142 - v327;
          if (v142 - v327 < 0x11) {
            goto LABEL_495;
          }
          uint64_t v329 = &v143[v327];
          BOOL v330 = *(void *)&v143[v327] == 0x2E34366863726161 && *(void *)&v143[v327 + 8] == 0x6C7075742E657673;
          if (!v330 || v143[v327 + 16] != 101) {
            goto LABEL_495;
          }
          if (v328 >= 0x15)
          {
            if (*(void *)v329 == 0x2E34366863726161
              && *((void *)v329 + 1) == 0x6C7075742E657673
              && *(void *)(v329 + 13) == 0x7465732E656C7075)
            {
              uint64_t v497 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
              if (*(unsigned char *)(*((void *)v497 + 4) + 16) == 16) {
                uint64_t v498 = *((void *)v497 + 4);
              }
              else {
                uint64_t v498 = 0;
              }
              v499 = (void *)(v498 + 24);
              if (*(_DWORD *)(v498 + 32) >= 0x41u) {
                v499 = (void *)*v499;
              }
              unsigned int v500 = *(_DWORD *)v499;
              uint64_t v501 = **((void **)v497 + 8);
              if (*(unsigned char *)(v501 + 8) != 19) {
                uint64_t v501 = 0;
              }
              uint64_t v502 = llvm::ConstantInt::get(*v6 + 2016, v500 * (unint64_t)*(unsigned int *)(v501 + 32));
              uint64_t v24 = v1632;
              if (v1632) {
                uint64_t v25 = *((void *)v1632 + 3);
              }
              else {
                uint64_t v25 = 0;
              }
              v616 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
              v1644[0] = *v616;
              v1644[1] = v616[8];
              *(void *)&long long v1645 = v502;
              goto LABEL_1099;
            }
            if (v328 >= 0x18)
            {
              BOOL v334 = *(void *)v329 == 0x2E34366863726161 && *((void *)v329 + 1) == 0x6C7075742E657673;
              if (v334 && *((void *)v329 + 2) == 0x6574616572632E65)
              {
                if (v328 >= 0x19)
                {
                  if (*(void *)v329 == 0x2E34366863726161
                    && *((void *)v329 + 1) == 0x6C7075742E657673
                    && *((void *)v329 + 2) == 0x6574616572632E65
                    && v329[24] == 50)
                  {
                    unsigned int v669 = 2;
                  }
                  else if (*(void *)v329 == 0x2E34366863726161 {
                         && *((void *)v329 + 1) == 0x6C7075742E657673
                  }
                         && *((void *)v329 + 2) == 0x6574616572632E65
                         && v329[24] == 51)
                  {
                    unsigned int v669 = 3;
                  }
                  else
                  {
                    uint64_t v686 = *(void *)v329;
                    uint64_t v687 = *((void *)v329 + 1);
                    uint64_t v688 = *((void *)v329 + 2);
                    int v689 = v329[24];
                    BOOL v693 = v686 == 0x2E34366863726161
                        && v687 == 0x6C7075742E657673
                        && v688 == 0x6574616572632E65
                        && v689 == 52;
                    unsigned int v669 = 4 * v693;
                  }
                }
                else
                {
                  unsigned int v669 = 0;
                }
                if (*(unsigned char *)(**(void **)(*((void *)v1627 + 3) + 16) + 8) == 19) {
                  v723 = **(llvm::PoisonValue ***)(*((void *)v1627 + 3) + 16);
                }
                else {
                  v723 = 0;
                }
                Intrinsic = (uint64_t *)llvm::PoisonValue::get(v723, v8);
                if (v669)
                {
                  uint64_t v725 = 0;
                  int v726 = 0;
                  uint64_t v727 = 32 * v669;
                  int v728 = *((_DWORD *)v723 + 8) / v669;
                  do
                  {
                    uint64_t v729 = llvm::ConstantInt::get(*v6 + 2016, (v728 * v726));
                    v730 = *(llvm::hashing::detail::hash_state **)((char *)v1633
                                                                 + v725
                                                                 + -32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                    LOWORD(NullValue) = 257;
                    std::string __p = v723;
                    v1636 = *(uint64_t **)v730;
                    v1644[0] = (llvm::hashing::detail::hash_state *)Intrinsic;
                    v1644[1] = v730;
                    *(void *)&long long v1645 = v729;
                    Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t)v1647, 321, (uint64_t)&__p, 2, (uint64_t *)v1644, 3, 0, (uint64_t)&__src);
                    ++v726;
                    v725 += 32;
                  }
                  while (v727 != v725);
                }
                if (*((unsigned char *)Intrinsic + 16) == 84) {
                  AlignedLoad = Intrinsic;
                }
                else {
                  AlignedLoad = 0;
                }
                goto LABEL_1102;
              }
            }
          }
          AlignedLoad = 0;
          goto LABEL_1102;
        }
        if ((v15 - 488) >= 4) {
          goto LABEL_495;
        }
      }
      else if ((v15 - 2812) >= 4)
      {
        if ((v15 - 989) > 4 || ((1 << (v15 + 35)) & 0x15) == 0)
        {
          if ((v15 - 1221) >= 3) {
            goto LABEL_495;
          }
          if ((*((unsigned char *)v1627 + 23) & 0x10) != 0)
          {
            uint64_t v216 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1627);
            unint64_t v217 = *v216;
            uint64_t v48 = (char *)(v216 + 2);
            unint64_t v47 = v217;
          }
          else
          {
            unint64_t v47 = 0;
            uint64_t v48 = (char *)&str_3_24;
          }
          uint64_t v218 = 5;
          if (v47 < 5) {
            uint64_t v218 = v47;
          }
          if (v47 - v218 >= 0xF)
          {
            v220 = &v48[v218];
            if (*(void *)&v48[v218] == 0x2E34366863726161 && *(void *)&v48[v218 + 7] == 0x32646C2E6576732ELL)
            {
              unsigned int v219 = 2;
            }
            else if (*(void *)v220 == 0x2E34366863726161 && *(void *)(v220 + 7) == 0x33646C2E6576732ELL)
            {
              unsigned int v219 = 3;
            }
            else
            {
              uint64_t v223 = *(void *)v220;
              uint64_t v224 = *(void *)(v220 + 7);
              BOOL v226 = v223 == 0x2E34366863726161 && v224 == 0x34646C2E6576732ELL;
              unsigned int v219 = 4 * v226;
            }
          }
          else
          {
            unsigned int v219 = 0;
          }
          if (*(unsigned char *)(**(void **)(*((void *)v1627 + 3) + 16) + 8) == 19) {
            unint64_t v357 = **(llvm::PoisonValue ***)(*((void *)v1627 + 3) + 16);
          }
          else {
            unint64_t v357 = 0;
          }
          unsigned int v358 = *((_DWORD *)v357 + 8);
          v359 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
          uint64_t v360 = (char *)llvm::CallBase::arg_end(v1633);
          v1644[0] = (llvm::hashing::detail::hash_state *)&v1645;
          v1644[1] = (llvm::hashing::detail::hash_state *)0x200000000;
          llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)v1644, v359, v360);
          if (v1632) {
            uint64_t v361 = *((void *)v1632 + 3);
          }
          else {
            uint64_t v361 = 0;
          }
          LOWORD(NullValue) = 257;
          v362 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v361, (uint64_t)v1632, (uint64_t *)v1644[0], LODWORD(v1644[1]), (uint64_t)&__src, 0);
          uint64_t v364 = (uint64_t *)llvm::PoisonValue::get(v357, v363);
          LODWORD(v1634) = 0;
          if (v219)
          {
            unsigned int v365 = 0;
            int v366 = v358 / v219;
            do
            {
              v367 = (llvm::Value *)llvm::ConstantInt::get(*v6 + 2016, v365 * v366);
              LOWORD(NullValue) = 257;
              v368 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1647, v362, (unsigned int *)&v1634, 1, (uint64_t)&__src);
              LOWORD(NullValue) = 257;
              v1662[0] = (uint64_t)v357;
              v1662[1] = *v368;
              std::string __p = v364;
              v1636 = v368;
              FNeg = v367;
              uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(v1649 + 56) + 40), 321, (uint64_t)v1662, 2);
              if (Declaration) {
                uint64_t v370 = *(void *)(Declaration + 24);
              }
              else {
                uint64_t v370 = 0;
              }
              uint64_t v364 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v370, Declaration, (uint64_t *)&__p, 3, 0, 0, (uint64_t)&__src, 0);
              unsigned int v365 = v1634 + 1;
              LODWORD(v1634) = v365;
            }
            while (v365 < v219);
          }
          if (*((unsigned char *)v364 + 16) == 84) {
            AlignedLoad = v364;
          }
          else {
            AlignedLoad = 0;
          }
          v227 = v1644[0];
          if ((long long *)v1644[0] == &v1645) {
            goto LABEL_1102;
          }
          goto LABEL_393;
        }
        int v135 = (void *)**((void **)v1627 + 5);
        int v136 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
        long long v137 = (char *)llvm::CallBase::arg_end(v1633);
        __src = &v1641;
        uint64_t v1640 = 0x400000000;
        llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v136, v137);
        uint64_t v138 = *((void *)__src + 3);
        int v139 = (uint64_t *)(v138 + 24);
        if (*(_DWORD *)(v138 + 32) >= 0x41u) {
          int v139 = (uint64_t *)*v139;
        }
        uint64_t v140 = llvm::ConstantInt::get(*v135 + 1992, *v139);
        uint64_t v90 = (uint64_t *)__src;
        *((void *)__src + 3) = v140;
        std::string::size_type v91 = v1632;
        if (v1632) {
          uint64_t v92 = *((void *)v1632 + 3);
        }
        else {
          uint64_t v92 = 0;
        }
        goto LABEL_236;
      }
      __src = &v1641;
      uint64_t v1640 = 0x300000000;
      unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*((llvm::Type ***)v1633
                                                               - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4]);
      if ((_BYTE)v70) {
      llvm::FixedVectorType::get((uint64_t **)(*v6 + 1680), (llvm::Type *)(PrimitiveSizeInBits >> 4));
      }
      int v73 = v72;
      uint64_t v74 = (uint64_t *)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
      llvm::CallBase::arg_end(v1633);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, *v74);
      size_t v75 = (unsigned __int8 *)v74[4];
      __int16 v1646 = 257;
      int v76 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v75, v73, (uint64_t)v1644);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, (uint64_t)v76);
      unsigned __int8 v77 = (unsigned __int8 *)v74[8];
      __int16 v1646 = 257;
      BOOL v78 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v77, v73, (uint64_t)v1644);
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, (uint64_t)v78);
      int v79 = v1632;
      if (v1632) {
        uint64_t v80 = *((void *)v1632 + 3);
      }
      else {
        uint64_t v80 = 0;
      }
      uint64_t v154 = (uint64_t *)__src;
      uint64_t v155 = v1640;
      __int16 v1646 = 257;
      goto LABEL_392;
    }
    if ((*((unsigned char *)v1627 + 23) & 0x10) != 0)
    {
      BOOL v32 = (unint64_t *)llvm::Value::getValueName((uint64_t ***)v1627);
      unint64_t v33 = *v32;
      int v27 = (char *)(v32 + 2);
      unint64_t v26 = v33;
    }
    else
    {
      unint64_t v26 = 0;
      int v27 = (char *)&str_3_24;
    }
    uint64_t v34 = 5;
    if (v26 < 5) {
      uint64_t v34 = v26;
    }
    uint64_t v35 = (llvm::CallBase **)&v27[v34];
    unint64_t v36 = v26 - v34;
    v1628 = (llvm::CallBase **)&v27[v34];
    size_t v1629 = v26 - v34;
    if (v26 - v34 <= 3)
    {
      ShuffleVector = 0;
      goto LABEL_32;
    }
    BOOL v44 = *(_DWORD *)v35 != 775305336;
    if (*(_DWORD *)v35 == 775305336)
    {
      uint64_t v35 = (llvm::CallBase **)((char *)v35 + 4);
      v36 -= 4;
      v1628 = v35;
      size_t v1629 = v36;
    }
    BOOL v45 = v36 > 4;
    if (v36 >= 5)
    {
      if (*(_DWORD *)v35 != 1836480110 || *((unsigned char *)v35 + 4) != 46)
      {
        BOOL v45 = 0;
LABEL_90:
        if (*(_DWORD *)v35 == 778924641)
        {
          uint64_t v35 = (llvm::CallBase **)((char *)v35 + 4);
          v36 -= 4;
          v1628 = v35;
          size_t v1629 = v36;
        }
LABEL_92:
        if (v44)
        {
          ShuffleVector = 0;
          if (v36 == 19)
          {
            if (*v35 == (llvm::CallBase *)0x6F72706B63617473
              && v35[1] == (llvm::CallBase *)0x6863726F74636574
              && *(llvm::CallBase **)((char *)v35 + 11) == (llvm::CallBase *)0x6B63656863726F74)
            {
              goto LABEL_1106;
            }
            goto LABEL_159;
          }
          if (v36 != 23) {
            goto LABEL_159;
          }
          char v96 = 0;
          goto LABEL_96;
        }
        if (v36 >= 0xC)
        {
          if (*v35 == (llvm::CallBase *)0x6F6D2E6134657373 && *((_DWORD *)v35 + 2) == 779382390)
          {
            v202 = (uint64_t **)*((void *)v1627 + 5);
            v1644[0] = (llvm::hashing::detail::hash_state *)&v1645;
            v1644[1] = (llvm::hashing::detail::hash_state *)0x100000000;
            unsigned int v203 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*v6 + 1992, 1);
            uint64_t v205 = llvm::ValueAsMetadata::get(v203, v204);
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v1644, v205);
            Impl = llvm::MDTuple::getImpl(v6, v1644[0], LODWORD(v1644[1]), 0, 1);
            v207 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
            unint64_t v208 = *(unsigned __int8 **)v207;
            uint64_t v209 = (llvm::Value *)*((void *)v207 + 4);
            uint64_t v210 = (llvm::Type *)llvm::PointerType::get(*(llvm::PointerType ***)(*(void *)v209 + 24), 0);
            __src = "cast";
            LOWORD(NullValue) = 259;
            v211 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v208, v210, (uint64_t)&__src);
            __src = "extractelement";
            LOWORD(NullValue) = 259;
            Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v209, (const llvm::Twine *)&__src, v212);
            uint64_t v214 = (uint64_t)v211;
            __int16 v215 = 256;
            goto LABEL_340;
          }
        }
        else if (v36 < 0xA)
        {
          char v114 = 1;
          goto LABEL_315;
        }
        if (*v35 != (llvm::CallBase *)0x6E766F6D2E787661 || *((_WORD *)v35 + 4) != 11892)
        {
          if (v36 < 0xF)
          {
            if (v36 == 14)
            {
              if (*v35 == (llvm::CallBase *)0x6F74732E32657373
                && *(llvm::CallBase **)((char *)v35 + 6) == (llvm::CallBase *)0x71642E6C65726F74)
              {
                uint64_t v395 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                unint64_t v311 = *(unsigned __int8 **)v395;
                uint64_t v396 = (unsigned __int8 *)*((void *)v395 + 4);
                llvm::FixedVectorType::get((uint64_t **)(*v6 + 2016), (llvm::Type *)2);
                __src = "cast";
                LOWORD(NullValue) = 259;
                unint64_t v398 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v396, v397, (uint64_t)&__src);
                LOWORD(NullValue) = 257;
                uint64_t v312 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, (llvm::Value *)v398, (const llvm::Twine *)&__src, v399);
                uint64_t v313 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType **)*v312, 0);
                __src = "cast";
                LOWORD(NullValue) = 259;
                goto LABEL_430;
              }
              char v114 = 0;
              uint64_t v122 = v35;
              goto LABEL_318;
            }
            goto LABEL_314;
          }
          if (*v35 != (llvm::CallBase *)0x732E323135787661
            || *(llvm::CallBase **)((char *)v35 + 7) != (llvm::CallBase *)0x2E746E65726F7473)
          {
LABEL_314:
            char v114 = 0;
LABEL_315:
            uint64_t v122 = v35;
            if (v36 < 0xB)
            {
              char v229 = 1;
              ShuffleVector = 0;
              char v230 = 1;
              char v231 = 1;
              char v232 = 1;
              if (v36 < 9) {
                goto LABEL_554;
              }
              goto LABEL_329;
            }
LABEL_318:
            if (*v35 == (llvm::CallBase *)0x726F74732E657373
              && *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x2E7565726F74732ELL)
            {
              goto LABEL_429;
            }
            if (v36 < 0xC)
            {
              if (*v35 != (llvm::CallBase *)0x726F74732E787661
                || *(llvm::CallBase **)((char *)v35 + 3) != (llvm::CallBase *)0x2E7565726F74732ELL)
              {
                goto LABEL_327;
              }
              goto LABEL_429;
            }
            BOOL v299 = *v35 == (llvm::CallBase *)0x6F74732E32657373 && *((_DWORD *)v35 + 2) == 779445618;
            if (v299
              || (*v35 == (llvm::CallBase *)0x726F74732E787661
                ? (BOOL v300 = *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x2E7565726F74732ELL)
                : (BOOL v300 = 0),
                  v300))
            {
LABEL_429:
              uint64_t v310 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
              unint64_t v311 = *(unsigned __int8 **)v310;
              uint64_t v312 = (uint64_t *)*((void *)v310 + 4);
              uint64_t v313 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType **)*v312, 0);
              __src = "cast";
              LOWORD(NullValue) = 259;
LABEL_430:
              unint64_t v314 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v311, v313, (uint64_t)&__src);
              llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v1647, (llvm::Type **)v312, (uint64_t)v314, 256, 0);
              goto LABEL_1106;
            }
            if (v36 == 20)
            {
              if (*v122 == (llvm::CallBase *)0x6D2E323135787661
                && v122[1] == (llvm::CallBase *)0x726F74732E6B7361
                && *((_DWORD *)v122 + 4) == 1936928357)
              {
                uint64_t v303 = (llvm::Value *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
                uint64_t v304 = (llvm::Value *)llvm::ConstantInt::get(*v1651 + 1944, 1);
                LOWORD(NullValue) = 257;
                uint64_t v305 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1647, v303, v304, (const llvm::Twine *)&__src);
                unint64_t v306 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                unint64_t v307 = *(unsigned __int8 **)v306;
                int64_t v308 = (llvm::PointerType ***)*((void *)v306 + 4);
                BOOL v309 = 0;
                goto LABEL_739;
              }
            }
            else if (v36 < 0x11)
            {
LABEL_327:
              char v230 = 1;
LABEL_328:
              char v229 = 0;
              ShuffleVector = 0;
LABEL_329:
              BOOL v235 = *v35 == (llvm::CallBase *)0x6D63702E32657373 && *((unsigned char *)v35 + 8) == 112;
              if (v235
                || (*v35 == (llvm::CallBase *)0x6D63702E32787661 ? (BOOL v236 = *((unsigned char *)v35 + 8) == 112) : (BOOL v236 = 0),
                    v236))
              {
                if (*((unsigned char *)v35 + 9) == 101) {
                  __int16 v291 = 32;
                }
                else {
                  __int16 v291 = 38;
                }
                uint64_t v292 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                int64_t v293 = *(llvm::CmpInst ***)v292;
                uint64_t v294 = *((void *)v292 + 4);
                LOWORD(NullValue) = 257;
                ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t)v1647, v291, v293, v294, (uint64_t)&__src);
                ShuffleVector = (llvm::Value *)ICmp;
                int64_t v296 = *(llvm::Type **)v1633;
                LOWORD(NullValue) = 257;
                p_src = &__src;
                int v298 = 40;
                goto LABEL_410;
              }
              if (v230)
              {
                char v231 = 0;
                char v232 = 1;
              }
              else
              {
                if (*v35 == (llvm::CallBase *)0x622E323135787661
                  && v35[1] == (llvm::CallBase *)0x7473616364616F72
                  && *((unsigned char *)v35 + 16) == 109)
                {
                  if (*(_DWORD *)(**((void **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)) + 8) == 2061) {
                    uint64_t v460 = (llvm::Type *)(*v6 + 2016);
                  }
                  else {
                    uint64_t v460 = (llvm::Type *)(*v6 + 1992);
                  }
                  unint64_t v462 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1633);
                  if ((_BYTE)v461) {
                  unint64_t v464 = llvm::Type::getPrimitiveSizeInBits(v460);
                  }
                  if ((_BYTE)v463) {
                  uint64_t v465 = (unsigned __int8 *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                  }
                  LOWORD(NullValue) = 257;
                  ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 39, v465, v460, (uint64_t)&__src);
                  LOWORD(NullValue) = 257;
                  VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((llvm::IRBuilderBase *)v1647, (llvm::Type *)(v462 / v464), (uint64_t ***)ShuffleVector, (uint64_t)&__src);
                  goto LABEL_682;
                }
                char v231 = 0;
                char v232 = 0;
              }
LABEL_554:
              if (v36 == 12)
              {
                if (*v122 != (llvm::CallBase *)0x7271732E32657373 || *((_DWORD *)v122 + 2) != 1685270132) {
                  goto LABEL_560;
                }
              }
              else if (v36 != 11 {
                     || (*v122 == (llvm::CallBase *)0x747271732E657373
              }
                       ? (BOOL v373 = *(llvm::CallBase **)((char *)v122 + 3) == (llvm::CallBase *)0x73732E747271732ELL)
                       : (BOOL v373 = 0),
                         !v373))
              {
LABEL_560:
                if ((v114 & 1) == 0
                  && (*v35 == (llvm::CallBase *)0x747271732E787661
                    ? (BOOL v374 = *((unsigned __int16 *)v35 + 4) == 28718)
                    : (BOOL v374 = 0),
                      v374)
                  || (v229 & 1) == 0
                  && (*v35 == (llvm::CallBase *)0x7271732E32657373
                    ? (BOOL v375 = *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x702E747271732E32)
                    : (BOOL v375 = 0),
                      v375)
                  || (v114 & 1) == 0
                  && (*v35 == (llvm::CallBase *)0x747271732E657373
                    ? (BOOL v376 = *((unsigned __int16 *)v35 + 4) == 28718)
                    : (BOOL v376 = 0),
                      v376))
                {
                  uint64_t v379 = (uint64_t **)*((void *)v1627 + 5);
                  v1644[0] = *(llvm::hashing::detail::hash_state **)v1633;
                  uint64_t v380 = llvm::Intrinsic::getDeclaration(v379, 283, (uint64_t)v1644, 1);
                  uint64_t v262 = v380;
                  if (v380) {
                    uint64_t v263 = *(void *)(v380 + 24);
                  }
                  else {
                    uint64_t v263 = 0;
                  }
                  std::string __p = (void *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                  __int16 v421 = 257;
LABEL_650:
                  LOWORD(NullValue) = v421;
                  VectorSplat = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v263, v262, (uint64_t *)&__p, 1, (uint64_t)&__src, 0);
                  goto LABEL_682;
                }
                if (v36 >= 0x12)
                {
                  if (*v35 == (llvm::CallBase *)0x6D2E323135787661
                    && v35[1] == (llvm::CallBase *)0x747271732E6B7361
                    && *((_WORD *)v35 + 8) == 28718)
                  {
                    if (((llvm::CallBase::arg_end(v1633) - ((void)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80) {
                      goto LABEL_729;
                    }
                    v466 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                    uint64_t v467 = *((void *)v466 + 12);
                    if (*(unsigned char *)(v467 + 16) != 16) {
                      goto LABEL_781;
                    }
                    unint64_t v468 = (void *)(v467 + 24);
                    if (*(_DWORD *)(v467 + 32) >= 0x41u) {
                      unint64_t v468 = (void *)*v468;
                    }
                    if (*v468 == 4)
                    {
LABEL_729:
                      uint64_t v469 = (uint64_t **)*((void *)v1627 + 5);
                      v1644[0] = *(llvm::hashing::detail::hash_state **)v1633;
                      uint64_t v470 = llvm::Intrinsic::getDeclaration(v469, 283, (uint64_t)v1644, 1);
                      uint64_t v471 = v470;
                      if (v470) {
                        uint64_t v472 = *(void *)(v470 + 24);
                      }
                      else {
                        uint64_t v472 = 0;
                      }
                      std::string __p = (void *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                      LOWORD(NullValue) = 257;
                      p_p = (uint64_t *)&__p;
                      uint64_t v546 = 1;
                    }
                    else
                    {
LABEL_781:
                      if (*((unsigned char *)v1628 + 18) == 115) {
                        int v495 = 10892;
                      }
                      else {
                        int v495 = 10891;
                      }
                      v1644[0] = *(llvm::hashing::detail::hash_state **)v466;
                      v1644[1] = (llvm::hashing::detail::hash_state *)v467;
                      uint64_t v496 = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56) + 40), v495, 0, 0);
                      uint64_t v471 = v496;
                      if (v496) {
                        uint64_t v472 = *(void *)(v496 + 24);
                      }
                      else {
                        uint64_t v472 = 0;
                      }
                      LOWORD(NullValue) = 257;
                      p_p = (uint64_t *)v1644;
                      uint64_t v546 = 2;
                    }
                    BOOL v129 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v472, v471, p_p, v546, (uint64_t)&__src, 0);
                    goto LABEL_190;
                  }
                }
                else if (v36 < 0xD)
                {
                  BOOL v377 = 1;
                  char v378 = 1;
LABEL_609:
                  switch(v36)
                  {
                    case 0xAuLL:
                      if (*v122 == (llvm::CallBase *)0x2E6464612E657373 && *((_WORD *)v122 + 4) == 29555) {
                        goto LABEL_841;
                      }
                      if (*v122 == (llvm::CallBase *)0x2E6275732E657373 && *((_WORD *)v122 + 4) == 29555) {
                        goto LABEL_841;
                      }
                      if (*v122 == (llvm::CallBase *)0x2E6C756D2E657373 && *((_WORD *)v122 + 4) == 29555) {
                        goto LABEL_841;
                      }
                      if (*v122 == (llvm::CallBase *)0x2E7669642E657373 && *((_WORD *)v122 + 4) == 29555) {
                        goto LABEL_841;
                      }
                      goto LABEL_840;
                    case 0xBuLL:
                      if ((*v122 != (llvm::CallBase *)0x6464612E32657373
                         || *(llvm::CallBase **)((char *)v122 + 3) != (llvm::CallBase *)0x64732E6464612E32)
                        && (*v122 != (llvm::CallBase *)0x6275732E32657373
                         || *(llvm::CallBase **)((char *)v122 + 3) != (llvm::CallBase *)0x64732E6275732E32)
                        && (*v122 != (llvm::CallBase *)0x6C756D2E32657373
                         || *(llvm::CallBase **)((char *)v122 + 3) != (llvm::CallBase *)0x64732E6C756D2E32)
                        && (*v122 != (llvm::CallBase *)0x7669642E32657373
                         || *(llvm::CallBase **)((char *)v122 + 3) != (llvm::CallBase *)0x64732E7669642E32))
                      {
LABEL_840:
                        char v513 = 1;
                        goto LABEL_908;
                      }
LABEL_841:
                      unint64_t v518 = (llvm::ConstantInt *)(*v6 + 1992);
                      uint64_t v519 = (llvm::Value *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                      v520 = (llvm::Value *)llvm::ConstantInt::get(v518, 0);
                      LOWORD(NullValue) = 257;
                      uint64_t v521 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v519, v520, (const llvm::Twine *)&__src);
                      v522 = (llvm::Value *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                      v523 = (llvm::Value *)llvm::ConstantInt::get(v518, 0);
                      LOWORD(NullValue) = 257;
                      v524 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v522, v523, (const llvm::Twine *)&__src);
                      if (llvm::StringRef::find((uint64_t *)&v1628, ".add.", 5uLL, 0) == -1)
                      {
                        if (llvm::StringRef::find((uint64_t *)&v1628, ".sub.", 5uLL, 0) == -1)
                        {
                          if (llvm::StringRef::find((uint64_t *)&v1628, ".mul.", 5uLL, 0) == -1)
                          {
                            LOWORD(NullValue) = 257;
                            FDiv = llvm::IRBuilderBase::CreateFDiv((llvm::IRBuilderBase *)v1647, (llvm::Value *)v521, (llvm::Value *)v524, (const llvm::Twine *)&__src, 0);
                          }
                          else
                          {
                            LOWORD(NullValue) = 257;
                            FDiv = llvm::IRBuilderBase::CreateFMul((llvm::IRBuilderBase *)v1647, (llvm::Value *)v521, (llvm::Value *)v524, (const llvm::Twine *)&__src, 0);
                          }
                        }
                        else
                        {
                          LOWORD(NullValue) = 257;
                          FDiv = llvm::IRBuilderBase::CreateFSub((llvm::IRBuilderBase *)v1647, (llvm::Value *)v521, (llvm::Value *)v524, (const llvm::Twine *)&__src, 0);
                        }
                      }
                      else
                      {
                        LOWORD(NullValue) = 257;
                        FDiv = llvm::IRBuilderBase::CreateFAdd((llvm::IRBuilderBase *)v1647, (llvm::Value *)v521, (llvm::Value *)v524, (const llvm::Twine *)&__src, 0);
                      }
                      v706 = (llvm::Value *)FDiv;
                      v707 = (llvm::Value *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                      v708 = (llvm::Value *)llvm::ConstantInt::get(v518, 0);
                      LOWORD(NullValue) = 257;
                      VectorSplat = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1647, v707, v706, v708, (const llvm::Twine *)&__src);
                      goto LABEL_682;
                    case 0xCuLL:
                      if (*v122 != (llvm::CallBase *)0x6B2E323135787661 || *((_DWORD *)v122 + 2) != 1999532655) {
                        goto LABEL_865;
                      }
                      char v504 = getX86MaskVec((uint64_t)v1647, *((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)), 0x10u);
                      v505 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4], 0x10u);
                      LOWORD(NullValue) = 257;
                      uint64_t v506 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v1647, (llvm::Value *)v504, (llvm::Value *)v505, (const llvm::Twine *)&__src);
                      goto LABEL_1253;
                    case 0xDuLL:
                      if (*v122 == (llvm::CallBase *)0x6B2E323135787661
                        && *(llvm::CallBase **)((char *)v122 + 5) == (llvm::CallBase *)0x772E646E616B2E32)
                      {
                        v617 = getX86MaskVec((uint64_t)v1647, *((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)), 0x10u);
                        v618 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(NullValue) = 257;
                        uint64_t v506 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1647, (llvm::Value *)v617, (llvm::Value *)v618, (const llvm::Twine *)&__src);
                      }
                      else
                      {
                        if (*v122 != (llvm::CallBase *)0x6B2E323135787661
                          || *(llvm::CallBase **)((char *)v122 + 5) != (llvm::CallBase *)0x772E726F786B2E32)
                        {
                          if (*v122 == (llvm::CallBase *)0x6B2E323135787661
                            && *(llvm::CallBase **)((char *)v122 + 5) == (llvm::CallBase *)0x772E746F6E6B2E32)
                          {
                            v529 = getX86MaskVec((uint64_t)v1647, *((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)), 0x10u);
                            LOWORD(NullValue) = 257;
                            ICmp = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1647, (llvm::Constant **)v529, (const llvm::Twine *)&__src);
                            ShuffleVector = (llvm::Value *)ICmp;
                            int64_t v296 = *(llvm::Type **)v1633;
                            LOWORD(NullValue) = 257;
                            goto LABEL_1256;
                          }
LABEL_865:
                          char v512 = 1;
LABEL_902:
                          char v513 = 1;
LABEL_903:
                          if (*v35 == (llvm::CallBase *)0x632E323135787661 && *((_DWORD *)v35 + 2) == 1882091629)
                          {
                            v560 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                            v561 = (char *)llvm::CallBase::arg_end(v1633);
                            __src = &v1641;
                            uint64_t v1640 = 0x400000000;
                            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&__src, v560, v561);
                            uint64_t v562 = **(void **)__src;
                            int v564 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v562);
                            if ((_BYTE)v563) {
                            if ((*(_DWORD *)(v562 + 8) & 0xFE) == 0x12)
                            }
                              uint64_t v562 = **(void **)(v562 + 16);
                            int v565 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v562);
                            if (v564 == 128 && v565 == 32)
                            {
                              int v567 = 10467;
                            }
                            else if (v564 == 256 && v565 == 32)
                            {
                              int v567 = 10468;
                            }
                            else if (v564 == 512 && v565 == 32)
                            {
                              int v567 = 10469;
                            }
                            else if (v564 == 128 && v565 == 64)
                            {
                              int v567 = 10464;
                            }
                            else if (v565 == 64 && v564 == 256)
                            {
                              int v567 = 10465;
                            }
                            else
                            {
                              int v567 = 10466;
                            }
                            uint64_t AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v1633, v566);
                            uint64_t v718 = AllOnesValue;
                            if (v564 == 512)
                            {
                              v719 = (char *)__src + 8 * v1640;
                              uint64_t v720 = *((void *)v719 - 1);
                              *((void *)v719 - 1) = AllOnesValue;
                              uint64_t v718 = v720;
                            }
                            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&__src, v718);
                            uint64_t v721 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)v1627 + 5), v567, 0, 0);
                            if (v721) {
                              uint64_t v722 = *(void *)(v721 + 24);
                            }
                            else {
                              uint64_t v722 = 0;
                            }
                            __int16 v1646 = 257;
                            ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v722, v721, (uint64_t *)__src, v1640, (uint64_t)v1644, 0);
                            v705 = __src;
                            if (__src == &v1641) {
                              goto LABEL_1364;
                            }
LABEL_1363:
                            free(v705);
                            goto LABEL_1364;
                          }
                          if (v512)
                          {
LABEL_908:
                            char v512 = 1;
                          }
                          else
                          {
                            if (*v35 == (llvm::CallBase *)0x6D2E323135787661
                              && v35[1] == (llvm::CallBase *)0x2E706D632E6B7361)
                            {
                              v667 = v1633;
                              uint64_t v678 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
                              v679 = (void *)(v678 + 24);
                              if (*(_DWORD *)(v678 + 32) >= 0x41u) {
                                v679 = (void *)*v679;
                              }
                              int v668 = *(_DWORD *)v679;
LABEL_1261:
                              int v672 = 1;
                              goto LABEL_1262;
                            }
                            char v512 = 0;
                          }
LABEL_921:
                          if (v232)
                          {
LABEL_922:
                            if (v36 == 16
                              && (*v122 == (llvm::CallBase *)0x61702E3365737373
                                ? (BOOL v569 = v122[1] == (llvm::CallBase *)0x3832312E622E7362)
                                : (BOOL v569 = 0),
                                  v569
                               || (*v122 == (llvm::CallBase *)0x61702E3365737373
                                 ? (BOOL v570 = v122[1] == (llvm::CallBase *)0x3832312E772E7362)
                                 : (BOOL v570 = 0),
                                   v570
                                || (*v122 == (llvm::CallBase *)0x61702E3365737373
                                  ? (BOOL v571 = v122[1] == (llvm::CallBase *)0x3832312E642E7362)
                                  : (BOOL v571 = 0),
                                    v571)))
                              || (v231 & 1) == 0
                              && (*v35 == (llvm::CallBase *)0x6261702E32787661
                                ? (BOOL v572 = *((unsigned char *)v35 + 8) == 115)
                                : (BOOL v572 = 0),
                                  v572)
                              || (v512 & 1) == 0
                              && (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                ? (BOOL v573 = v35[1] == (llvm::CallBase *)0x736261702E6B7361)
                                : (BOOL v573 = 0),
                                  v573))
                            {
                              VectorSplat = upgradeAbs((llvm::IRBuilderBase *)v1647, (uint64_t *)v1633);
                              goto LABEL_682;
                            }
                            uint64_t v3 = v1648;
                            if (v36 == 12
                              && (*v122 == (llvm::CallBase *)0x6D702E3134657373
                                ? (BOOL v574 = *((unsigned int *)v122 + 2) == 1651734625)
                                : (BOOL v574 = 0),
                                  v574
                               || ((uint64_t v10 = 0x616D702E32657373, *v122 == (llvm::CallBase *)0x616D702E32657373)
                                 ? (BOOL v575 = *((unsigned int *)v122 + 2) == 1999532920)
                                 : (BOOL v575 = 0),
                                   v575
                                || (*v122 == (llvm::CallBase *)0x6D702E3134657373
                                  ? (BOOL v576 = *((unsigned int *)v122 + 2) == 1685289057)
                                  : (BOOL v576 = 0),
                                    v576)))
                              || (v114 & 1) == 0
                              && (*v35 == (llvm::CallBase *)0x616D702E32787661
                                ? (BOOL v577 = *((unsigned __int16 *)v35 + 4) == 29560)
                                : (BOOL v577 = 0),
                                  v577)
                              || (v232 & 1) == 0
                              && (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                ? (BOOL v578 = v35[1] == (llvm::CallBase *)0x78616D702E6B7361)
                                : (BOOL v578 = 0),
                                  v578 ? (BOOL v579 = *((unsigned char *)v35 + 16) == 115) : (BOOL v579 = 0),
                                  v579))
                            {
                              v665 = (uint64_t *)v1633;
                              int v666 = 277;
                            }
                            else if (v36 == 12 {
                                   && (*v122 == (llvm::CallBase *)0x616D702E32657373
                            }
                                     ? (BOOL v580 = *((unsigned int *)v122 + 2) == 1647211896)
                                     : (BOOL v580 = 0),
                                       v580
                                    || (*v122 == (llvm::CallBase *)0x6D702E3134657373
                                      ? (BOOL v581 = *((unsigned int *)v122 + 2) == 2004187233)
                                      : (BOOL v581 = 0),
                                        v581
                                     || (*v122 == (llvm::CallBase *)0x6D702E3134657373
                                       ? (BOOL v582 = *((_DWORD *)v122 + 2) == 1685420129)
                                       : (BOOL v582 = 0),
                                         v582)))
                                   || (v114 & 1) == 0
                                   && (*v35 == (llvm::CallBase *)0x616D702E32787661
                                     ? (BOOL v583 = *((unsigned __int16 *)v35 + 4) == 30072)
                                     : (BOOL v583 = 0),
                                       v583)
                                   || (v232 & 1) == 0
                                   && (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                     ? (BOOL v584 = v35[1] == (llvm::CallBase *)0x78616D702E6B7361)
                                     : (BOOL v584 = 0),
                                       v584 ? (BOOL v585 = *((unsigned char *)v35 + 16) == 117) : (BOOL v585 = 0),
                                       v585))
                            {
                              v665 = (uint64_t *)v1633;
                              int v666 = 308;
                            }
                            else if (v36 == 12 {
                                   && (*v122 == (llvm::CallBase *)0x6D702E3134657373
                            }
                                     ? (BOOL v586 = *((_DWORD *)v122 + 2) == 1651732073)
                                     : (BOOL v586 = 0),
                                       v586
                                    || ((uint64_t v10 = 0x696D702E32657373, *v122 == (llvm::CallBase *)0x696D702E32657373)
                                      ? (BOOL v587 = *((unsigned int *)v122 + 2) == 1999532910)
                                      : (BOOL v587 = 0),
                                        v587
                                     || (*v122 == (llvm::CallBase *)0x6D702E3134657373
                                       ? (BOOL v588 = *((_DWORD *)v122 + 2) == 1685286505)
                                       : (BOOL v588 = 0),
                                         v588)))
                                   || (v114 & 1) == 0
                                   && (*v35 == (llvm::CallBase *)0x696D702E32787661
                                     ? (BOOL v589 = *((unsigned __int16 *)v35 + 4) == 29550)
                                     : (BOOL v589 = 0),
                                       v589)
                                   || (v232 & 1) == 0
                                   && (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                     ? (BOOL v590 = v35[1] == (llvm::CallBase *)0x6E696D702E6B7361)
                                     : (BOOL v590 = 0),
                                       v590 ? (BOOL v591 = *((unsigned char *)v35 + 16) == 115) : (BOOL v591 = 0),
                                       v591))
                            {
                              v665 = (uint64_t *)v1633;
                              int v666 = 278;
                            }
                            else
                            {
                              if (v36 != 12
                                || (*v122 == (llvm::CallBase *)0x696D702E32657373
                                  ? (BOOL v592 = *((_DWORD *)v122 + 2) == 1647211886)
                                  : (BOOL v592 = 0),
                                    !v592
                                 && (*v122 == (llvm::CallBase *)0x6D702E3134657373
                                   ? (BOOL v593 = *((_DWORD *)v122 + 2) == 2004184681)
                                   : (BOOL v593 = 0),
                                     !v593
                                  && (*v122 == (llvm::CallBase *)0x6D702E3134657373
                                    ? (BOOL v594 = *((unsigned int *)v122 + 2) == 1685417577)
                                    : (BOOL v594 = 0),
                                      !v594))))
                              {
                                if ((v114 & 1) != 0
                                  || (*v35 == (llvm::CallBase *)0x696D702E32787661
                                    ? (BOOL v595 = *((unsigned __int16 *)v35 + 4) == 30062)
                                    : (BOOL v595 = 0),
                                      !v595))
                                {
                                  if ((v232 & 1) != 0
                                    || (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                      ? (BOOL v596 = v35[1] == (llvm::CallBase *)0x6E696D702E6B7361)
                                      : (BOOL v596 = 0),
                                        v596 ? (BOOL v597 = *((unsigned char *)v35 + 16) == 117) : (BOOL v597 = 0),
                                        !v597))
                                  {
                                    if (v36 == 19)
                                    {
                                      uint64_t v600 = *(uint64_t *)((char *)v122 + 11);
                                      BOOL v601 = *v122 == (llvm::CallBase *)0x702E323135787661
                                          && v122[1] == (llvm::CallBase *)0x2E71642E756C756DLL;
                                      uint64_t v598 = 0x3231352E71642E75;
                                    }
                                    else
                                    {
                                      if (v36 != 13)
                                      {
LABEL_1434:
                                        if ((v513 & 1) != 0
                                          || (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                            ? (BOOL v742 = v35[1] == (llvm::CallBase *)0x6C756D702E6B7361)
                                            : (BOOL v742 = 0),
                                              v742
                                            ? (BOOL v743 = *(llvm::CallBase **)((char *)v35 + 13) == (llvm::CallBase *)0x2E71642E756C756DLL)
                                            : (BOOL v743 = 0),
                                              !v743))
                                        {
                                          if (v36 == 18)
                                          {
                                            uint64_t v10 = 0x702E323135787661;
                                            if (*v122 != (llvm::CallBase *)0x702E323135787661
                                              || v122[1] != (llvm::CallBase *)0x352E71642E6C756DLL
                                              || *((_WORD *)v122 + 8) != 12849)
                                            {
                                              goto LABEL_2082;
                                            }
                                          }
                                          else if (v36 == 12)
                                          {
                                            if ((*v122 != (llvm::CallBase *)0x6D702E3134657373
                                               || *((_DWORD *)v122 + 2) != 1902406773)
                                              && (*v122 != (llvm::CallBase *)0x756D702E32787661
                                               || *((_DWORD *)v122 + 2) != 1902390892))
                                            {
LABEL_1490:
                                              if (*v122 == (llvm::CallBase *)0x737476632E657373
                                                && *((_DWORD *)v122 + 2) == 1936929385)
                                              {
LABEL_2059:
                                                v967 = (llvm::Value *)((void *)v1633
                                                                     - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                v968 = *(llvm::Type **)(*(void *)v1633 + 24);
                                                LOWORD(NullValue) = 257;
                                                SIToFP = llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)v1647, v967, v968, (const llvm::Twine *)&__src);
LABEL_2060:
                                                v971 = (llvm::Value *)SIToFP;
                                                ShuffleVector = (llvm::Value *)SIToFP;
                                                v972 = (llvm::Value *)*((void *)v1633
                                                                      - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                LOWORD(NullValue) = 257;
                                                goto LABEL_2061;
                                              }
LABEL_2082:
                                              if ((v513 & 1) == 0)
                                              {
                                                BOOL v980 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v35[1] == (llvm::CallBase *)0x647476632E6B7361;
                                                if (v980
                                                  && *(llvm::CallBase **)((char *)v35 + 13) == (llvm::CallBase *)0x2E64703271647476)
                                                {
                                                  goto LABEL_2348;
                                                }
                                              }
                                              if ((v378 & 1) == 0)
                                              {
                                                uint64_t v10 = *(uint64_t *)((char *)v35 + 14);
                                                uint64_t v11 = 0x2E64703271647574;
                                                BOOL v982 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v35[1] == (llvm::CallBase *)0x757476632E6B7361;
                                                if (v982 && v10 == 0x2E64703271647574) {
                                                  goto LABEL_2348;
                                                }
                                              }
                                              if ((v513 & 1) == 0)
                                              {
                                                uint64_t v10 = *(uint64_t *)((char *)v35 + 13);
                                                BOOL v984 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v35[1] == (llvm::CallBase *)0x647476632E6B7361;
                                                if (v984 && v10 == 0x2E73703271647476) {
                                                  goto LABEL_2348;
                                                }
                                              }
                                              if ((v378 & 1) == 0)
                                              {
                                                uint64_t v10 = *(uint64_t *)((char *)v35 + 14);
                                                uint64_t v11 = 0x2E73703271647574;
                                                BOOL v986 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v35[1] == (llvm::CallBase *)0x757476632E6B7361;
                                                if (v986 && v10 == 0x2E73703271647574) {
                                                  goto LABEL_2348;
                                                }
                                              }
                                              if ((v513 & 1) == 0)
                                              {
                                                uint64_t v10 = *(uint64_t *)((char *)v35 + 13);
                                                BOOL v988 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v35[1] == (llvm::CallBase *)0x717476632E6B7361;
                                                if (v988 && v10 == 0x2E64703271717476) {
                                                  goto LABEL_2348;
                                                }
                                              }
                                              if ((v378 & 1) == 0)
                                              {
                                                BOOL v990 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v35[1] == (llvm::CallBase *)0x757476632E6B7361;
                                                if (v990
                                                  && *(llvm::CallBase **)((char *)v35 + 14) == (llvm::CallBase *)0x2E64703271717574)
                                                {
                                                  goto LABEL_2348;
                                                }
                                              }
                                              if ((uint64_t)v36 > 23)
                                              {
                                                if (v36 == 25)
                                                {
                                                  if (*v122 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v122[1] == (llvm::CallBase *)0x757476632E6B7361
                                                    && v122[2] == (llvm::CallBase *)0x35322E7370327171
                                                    && *((unsigned char *)v122 + 24) == 54)
                                                  {
                                                    goto LABEL_2348;
                                                  }
                                                  uint64_t v10 = *((unsigned __int8 *)v122 + 24);
                                                  BOOL v1029 = *v122 == (llvm::CallBase *)0x6D2E323135787661
                                                       && v122[1] == (llvm::CallBase *)0x757476632E6B7361;
                                                  BOOL v1030 = v1029 && v122[2] == (llvm::CallBase *)0x31352E7370327171;
                                                  if (v1030 && v10 == 50) {
                                                    goto LABEL_2348;
                                                  }
                                                }
                                                else if (v36 == 24)
                                                {
                                                  BOOL v994 = *v122 == (llvm::CallBase *)0x6D2E323135787661
                                                      && v122[1] == (llvm::CallBase *)0x717476632E6B7361;
                                                  if (v994 && v122[2] == (llvm::CallBase *)0x3635322E73703271) {
                                                    goto LABEL_2348;
                                                  }
                                                  BOOL v996 = *v122 == (llvm::CallBase *)0x6D2E323135787661
                                                      && v122[1] == (llvm::CallBase *)0x717476632E6B7361;
                                                  if (v996 && v122[2] == (llvm::CallBase *)0x3231352E73703271) {
                                                    goto LABEL_2348;
                                                  }
                                                  BOOL v998 = *v122 == (llvm::CallBase *)0x6D2E323135787661
                                                      && v122[1] == (llvm::CallBase *)0x707476632E6B7361;
                                                  if (v998 && v122[2] == (llvm::CallBase *)0x3832312E64703273) {
                                                    goto LABEL_2348;
                                                  }
                                                  BOOL v1000 = *v122 == (llvm::CallBase *)0x6D2E323135787661
                                                       && v122[1] == (llvm::CallBase *)0x707476632E6B7361;
                                                  if (v1000 && v122[2] == (llvm::CallBase *)0x3635322E64703273) {
                                                    goto LABEL_2348;
                                                  }
                                                }
                                              }
                                              else
                                              {
                                                if (v36 != 13)
                                                {
                                                  if (v36 != 18) {
                                                    goto LABEL_2225;
                                                  }
                                                  BOOL v992 = *v122 == (llvm::CallBase *)0x2E7476632E787661
                                                      && v122[1] == (llvm::CallBase *)0x322E64702E327370;
                                                  if (!v992 || *((_WORD *)v122 + 8) != 13877) {
                                                    goto LABEL_2225;
                                                  }
LABEL_2348:
                                                  v1067 = *(llvm::Type **)v1633;
                                                  v1068 = (llvm::Value *)*((void *)v1633
                                                                         - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                  ShuffleVector = v1068;
                                                  uint64_t v1069 = *(void *)v1068;
                                                  if (*((_DWORD *)v1067 + 8) < *(_DWORD *)(*(void *)v1068 + 32))
                                                  {
                                                    v1644[0] = (llvm::hashing::detail::hash_state *)0x100000000;
                                                    LOWORD(NullValue) = 257;
                                                    ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v1068, (uint64_t)v1068, (int *)v1644, (llvm::Type *)2, (uint64_t)&__src);
                                                  }
                                                  int v1070 = *(unsigned __int8 *)(*(void *)(v1069 + 24) + 8);
                                                  uint64_t v1071 = llvm::StringRef::find((uint64_t *)&v1628, "cvtu", 4uLL, 0);
                                                  if (v1070 != 2)
                                                  {
                                                    uint64_t v1075 = v1071;
                                                    v1076 = v1633;
                                                    if (((llvm::CallBase::arg_end(v1633)
                                                         - ((void)v1076
                                                          - 32 * (*((_DWORD *)v1076 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80)
                                                      goto LABEL_2358;
                                                    uint64_t v1077 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[12];
                                                    if (*(unsigned char *)(v1077 + 16) != 16) {
                                                      goto LABEL_2360;
                                                    }
                                                    v1078 = (void *)(v1077 + 24);
                                                    if (*(_DWORD *)(v1077 + 32) >= 0x41u) {
                                                      v1078 = (void *)*v1078;
                                                    }
                                                    if (*v1078 == 4)
                                                    {
LABEL_2358:
                                                      __src = "cvt";
                                                      LOWORD(NullValue) = 259;
                                                      if (v1075 == -1) {
                                                        UIToFP = llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)v1647, ShuffleVector, v1067, (const llvm::Twine *)&__src);
                                                      }
                                                      else {
                                                        UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)v1647, ShuffleVector, v1067, (const llvm::Twine *)&__src);
                                                      }
                                                    }
                                                    else
                                                    {
LABEL_2360:
                                                      if (v1075 == -1) {
                                                        int v1079 = 10890;
                                                      }
                                                      else {
                                                        int v1079 = 10895;
                                                      }
                                                      v1080 = *(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56)
                                                                           + 40);
                                                      __src = v1067;
                                                      uint64_t v1640 = v1069;
                                                      uint64_t v1081 = llvm::Intrinsic::getDeclaration(v1080, v1079, (uint64_t)&__src, 2);
                                                      if (v1081) {
                                                        uint64_t v1082 = *(void *)(v1081 + 24);
                                                      }
                                                      else {
                                                        uint64_t v1082 = 0;
                                                      }
                                                      v1644[0] = ShuffleVector;
                                                      v1644[1] = ((llvm::hashing::detail::hash_state **)v1633
                                                                - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[12];
                                                      LOWORD(NullValue) = 257;
                                                      UIToFP = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1082, v1081, (uint64_t *)v1644, 2, (uint64_t)&__src, 0);
                                                    }
                                                    goto LABEL_2368;
                                                  }
                                                  v1072 = ShuffleVector;
                                                  v1073 = "cvtps2pd";
LABEL_2352:
                                                  __src = v1073;
                                                  LOWORD(NullValue) = 259;
                                                  UIToFP = llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v1647, v1072, v1067, (const llvm::Twine *)&__src);
LABEL_2368:
                                                  ShuffleVector = (llvm::Value *)UIToFP;
                                                  v1083 = v1633;
                                                  if (((unint64_t)(llvm::CallBase::arg_end(v1633)
                                                                                       - ((void)v1083
                                                                                        - 32
                                                                                        * (*((_DWORD *)v1083 + 5) & 0x7FFFFFF))) >> 5) < 3)
                                                    goto LABEL_1364;
                                                  BOOL v131 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                  int v132 = (unsigned __int8 *)*((void *)v131 + 8);
                                                  BOOL v130 = ShuffleVector;
LABEL_191:
                                                  VectorSplat = EmitX86Select((llvm::IRBuilderBase *)v1647, v132, v130, *((llvm::Value **)v131 + 4));
LABEL_682:
                                                  AlignedLoad = VectorSplat;
                                                  ShuffleVector = (llvm::Value *)VectorSplat;
                                                  goto LABEL_683;
                                                }
                                                if (*v122 == (llvm::CallBase *)0x7476632E32657373
                                                  && *(llvm::CallBase **)((char *)v122 + 5) == (llvm::CallBase *)0x6470327370747663)
                                                {
                                                  goto LABEL_2348;
                                                }
                                              }
LABEL_2225:
                                              if ((v378 & 1) != 0
                                                || (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                  ? (BOOL v1032 = v35[1] == (llvm::CallBase *)0x747663762E6B7361)
                                                  : (BOOL v1032 = 0),
                                                    v1032
                                                  ? (BOOL v1033 = *(llvm::CallBase **)((char *)v35 + 14) == (llvm::CallBase *)0x2E73703268707476)
                                                  : (BOOL v1033 = 0),
                                                    !v1033))
                                              {
                                                if ((v114 & 1) != 0
                                                  || (*v35 == (llvm::CallBase *)0x7032687074766376
                                                    ? (BOOL v1034 = *((unsigned __int16 *)v35 + 4) == 11891)
                                                    : (BOOL v1034 = 0),
                                                      !v1034))
                                                {
                                                  if ((v512 & 1) == 0
                                                    && *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v35[1] == (llvm::CallBase *)0x64616F6C2E6B7361)
                                                  {
                                                    v1180 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                    InsertElement = UpgradeMaskedLoad((uint64_t *)v1647, *(unsigned __int8 **)v1180, *((llvm::PointerType ****)v1180 + 4), *((unsigned __int8 **)v1180 + 8), *((unsigned __int8 *)v35 + 16) != 117);
                                                    goto LABEL_1586;
                                                  }
                                                  if (v36 < 0x18) {
                                                    goto LABEL_2262;
                                                  }
                                                  if (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                    && v35[1] == (llvm::CallBase *)0x617078652E6B7361
                                                    && v35[2] == (llvm::CallBase *)0x2E64616F6C2E646ELL)
                                                  {
                                                    v1190 = *(llvm::Type **)v1633;
                                                    v1191 = (unsigned __int8 *)*((void *)v1633
                                                                               - 4
                                                                               * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                    v1192 = (llvm::Type *)llvm::PointerType::get(*(llvm::PointerType ***)(*(void *)v1633 + 24), 0);
                                                    LOWORD(NullValue) = 257;
                                                    v1193 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1191, v1192, (uint64_t)&__src);
                                                    v1194 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633- 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8], *((_DWORD *)v1190 + 8));
                                                    v1195 = (uint64_t **)*((void *)v1627 + 5);
                                                    __src = v1190;
                                                    uint64_t v1196 = llvm::Intrinsic::getDeclaration(v1195, 186, (uint64_t)&__src, 1);
                                                    uint64_t v1152 = v1196;
                                                    if (v1196) {
                                                      uint64_t v1153 = *(void *)(v1196 + 24);
                                                    }
                                                    else {
                                                      uint64_t v1153 = 0;
                                                    }
                                                    v1644[0] = (llvm::hashing::detail::hash_state *)v1193;
                                                    v1644[1] = (llvm::hashing::detail::hash_state *)v1194;
                                                    *(void *)&long long v1645 = ((void *)v1633
                                                                       - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                  }
                                                  else
                                                  {
                                                    if (v36 < 0x1B
                                                      || (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                        ? (BOOL v1038 = v35[1] == (llvm::CallBase *)0x706D6F632E6B7361)
                                                        : (BOOL v1038 = 0),
                                                          v1038
                                                        ? (BOOL v1039 = v35[2] == (llvm::CallBase *)0x6F74732E73736572)
                                                        : (BOOL v1039 = 0),
                                                          v1039
                                                        ? (BOOL v1040 = *(llvm::CallBase **)((char *)v35 + 19) == (llvm::CallBase *)0x2E65726F74732E73)
                                                        : (BOOL v1040 = 0),
                                                          !v1040))
                                                    {
LABEL_2262:
                                                      if ((v513 & 1) == 0
                                                        && (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                          ? (BOOL v1041 = v35[1] == (llvm::CallBase *)0x706D6F632E6B7361)
                                                          : (BOOL v1041 = 0),
                                                            v1041
                                                          ? (BOOL v1042 = *(llvm::CallBase **)((char *)v35 + 13) == (llvm::CallBase *)0x2E73736572706D6FLL)
                                                          : (BOOL v1042 = 0),
                                                            v1042)
                                                        || v36 >= 0x13
                                                        && (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                          ? (BOOL v1043 = v35[1] == (llvm::CallBase *)0x617078652E6B7361)
                                                          : (BOOL v1043 = 0),
                                                            v1043
                                                          ? (BOOL v1044 = *(llvm::CallBase **)((char *)v35 + 11) == (llvm::CallBase *)0x2E646E617078652ELL)
                                                          : (BOOL v1044 = 0),
                                                            v1044))
                                                      {
                                                        v1147 = *(llvm::Type **)v1633;
                                                        v1148 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633- 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8], *(_DWORD *)(*(void *)v1633 + 32));
                                                        if (*((unsigned char *)v1628 + 12) == 99) {
                                                          int v1149 = 10472;
                                                        }
                                                        else {
                                                          int v1149 = 10526;
                                                        }
                                                        v1150 = (uint64_t **)*((void *)v1627 + 5);
                                                        __src = v1147;
                                                        uint64_t v1151 = llvm::Intrinsic::getDeclaration(v1150, v1149, (uint64_t)&__src, 1);
                                                        uint64_t v1152 = v1151;
                                                        if (v1151) {
                                                          uint64_t v1153 = *(void *)(v1151 + 24);
                                                        }
                                                        else {
                                                          uint64_t v1153 = 0;
                                                        }
                                                        v1220 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                        v1644[0] = *v1220;
                                                        v1644[1] = v1220[4];
                                                        *(void *)&long long v1645 = v1148;
                                                        LOWORD(NullValue) = 257;
                                                        goto LABEL_2651;
                                                      }
                                                      if ((v231 & 1) != 0
                                                        || (*v35 == (llvm::CallBase *)0x6F6370762E706F78
                                                          ? (BOOL v1045 = *((unsigned char *)v35 + 8) == 109)
                                                          : (BOOL v1045 = 0),
                                                            !v1045))
                                                      {
                                                        if ((v114 & 1) == 0
                                                          && *v35 == (llvm::CallBase *)0x6D6370762E706F78
                                                          && *((_WORD *)v35 + 4) == 30319)
                                                        {
                                                          v1226 = (llvm::Constant **)((void *)v1633
                                                                                    - 4
                                                                                    * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
                                                          LOWORD(NullValue) = 257;
                                                          Not = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1647, v1226, (const llvm::Twine *)&__src);
                                                          v1228 = (llvm::Value *)*((void *)v1633
                                                                                 - 4
                                                                                 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                          LOWORD(NullValue) = 257;
                                                          v1229 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1647, v1228, (llvm::Value *)v1226, (const llvm::Twine *)&__src);
                                                          v1230 = (llvm::Value *)((void *)v1633
                                                                                - 4
                                                                                * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                          LOWORD(NullValue) = 257;
                                                          v1231 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1647, v1230, (llvm::Value *)Not, (const llvm::Twine *)&__src);
                                                          LOWORD(NullValue) = 257;
                                                          InsertElement = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1229, (llvm::Value *)v1231, (const llvm::Twine *)&__src);
                                                          goto LABEL_1586;
                                                        }
                                                        if ((v231 & 1) == 0
                                                          && (*v35 == (llvm::CallBase *)0x6F7270762E706F78
                                                            ? (BOOL v1047 = *((unsigned char *)v35 + 8) == 116)
                                                            : (BOOL v1047 = 0),
                                                              v1047)
                                                          || (v229 & 1) == 0
                                                          && (*v35 == (llvm::CallBase *)0x702E323135787661
                                                            ? (BOOL v1048 = *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x6C6F72702E323135)
                                                            : (BOOL v1048 = 0),
                                                              v1048)
                                                          || (v512 & 1) == 0
                                                          && (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                            ? (BOOL v1049 = v35[1] == (llvm::CallBase *)0x6C6F72702E6B7361)
                                                            : (BOOL v1049 = 0),
                                                              v1049))
                                                        {
                                                          v1210 = (uint64_t *)v1633;
                                                          int v1211 = 0;
                                                        }
                                                        else
                                                        {
                                                          if ((v229 & 1) != 0
                                                            || (*v35 == (llvm::CallBase *)0x702E323135787661
                                                              ? (BOOL v1050 = *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x726F72702E323135)
                                                              : (BOOL v1050 = 0),
                                                                !v1050))
                                                          {
                                                            if ((v512 & 1) != 0
                                                              || (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                                ? (BOOL v1051 = v35[1] == (llvm::CallBase *)0x726F72702E6B7361)
                                                                : (BOOL v1051 = 0),
                                                                  !v1051))
                                                            {
                                                              if (!v377
                                                                && (*v35 == (llvm::CallBase *)0x762E323135787661
                                                                  ? (BOOL v1052 = *(llvm::CallBase **)((char *)v35 + 6) == (llvm::CallBase *)0x2E646C687370762ELL)
                                                                  : (BOOL v1052 = 0),
                                                                    v1052)
                                                                || v36 >= 0x12
                                                                && ((uint64_t v35 = v1628,
                                                                     *v1628 == (llvm::CallBase *)0x6D2E323135787661)
                                                                  ? (BOOL v1053 = v1628[1] == (llvm::CallBase *)0x687370762E6B7361)
                                                                  : (BOOL v1053 = 0),
                                                                    v1053
                                                                  ? (BOOL v1054 = *((unsigned __int16 *)v1628 + 8) == 25708)
                                                                  : (BOOL v1054 = 0),
                                                                    v1054
                                                                 || v36 >= 0x13
                                                                 && (*v1628 == (llvm::CallBase *)0x6D2E323135787661
                                                                   ? (BOOL v1055 = v1628[1] == (llvm::CallBase *)0x7370762E7A6B7361)
                                                                   : (BOOL v1055 = 0),
                                                                     v1055
                                                                   ? (BOOL v1056 = *(llvm::CallBase **)((char *)v1628 + 11) == (llvm::CallBase *)0x646C687370762E7ALL)
                                                                   : (BOOL v1056 = 0),
                                                                     v1056)))
                                                              {
                                                                BOOL v1256 = *((unsigned __int8 *)v35 + 11) == 122;
                                                                v1257 = (uint64_t *)v1633;
                                                                int v1258 = 0;
                                                              }
                                                              else
                                                              {
                                                                if (v377
                                                                  || ((v1057 = v1628,
                                                                       *v1628 == (llvm::CallBase *)0x762E323135787661)
                                                                    ? (BOOL v1058 = *(llvm::CallBase **)((char *)v1628 + 6) == (llvm::CallBase *)0x2E6472687370762ELL)
                                                                    : (BOOL v1058 = 0),
                                                                      !v1058))
                                                                {
                                                                  if (v36 < 0x12)
                                                                  {
                                                                    if (v36 == 16)
                                                                    {
                                                                      v1060 = *v122;
                                                                      v1059 = v122[1];
                                                                      if (v1060 == (llvm::CallBase *)0x72632E3234657373
                                                                        && v1059 == (llvm::CallBase *)0x382E34362E323363)
                                                                      {
                                                                        uint64_t v1062 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)v1627 + 5), 11409, 0, 0);
                                                                        v1063 = (unsigned __int8 *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                        v1064 = (llvm::Type *)(*v6 + 1992);
                                                                        LOWORD(NullValue) = 257;
                                                                        v1065 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 38, v1063, v1064, (uint64_t)&__src);
                                                                        if (v1062) {
                                                                          uint64_t v1066 = *(void *)(v1062 + 24);
                                                                        }
                                                                        else {
                                                                          uint64_t v1066 = 0;
                                                                        }
                                                                        v1644[0] = (llvm::hashing::detail::hash_state *)v1065;
                                                                        v1644[1] = ((llvm::hashing::detail::hash_state **)v1633
                                                                                  - 4
                                                                                  * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                                        LOWORD(NullValue) = 257;
                                                                        ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1066, v1062, (uint64_t *)v1644, 2, (uint64_t)&__src, 0);
                                                                        v1384 = *(llvm::Type **)v1633;
                                                                        LOWORD(NullValue) = 257;
                                                                        InsertElement = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 39, (unsigned __int8 *)ShuffleVector, v1384, (uint64_t)&__src);
                                                                        goto LABEL_1586;
                                                                      }
                                                                    }
LABEL_2577:
                                                                    if ((v512 & 1) != 0
                                                                      || (*v1628 == (llvm::CallBase *)0x6F7262762E787661
                                                                        ? (BOOL v1283 = v1628[1] == (llvm::CallBase *)0x732E747361636461)
                                                                        : (BOOL v1283 = 0),
                                                                          !v1283))
                                                                    {
                                                                      if (v36 < 0x13)
                                                                      {
                                                                        if (v36 < 0xC)
                                                                        {
LABEL_2667:
                                                                          if ((v229 & 1) != 0
                                                                            || (*v1628 == (llvm::CallBase *)0x6F6D702E32787661
                                                                              ? (BOOL v1308 = *(llvm::CallBase **)((char *)v1628 + 3) == (llvm::CallBase *)0x7873766F6D702E32)
                                                                              : (BOOL v1308 = 0),
                                                                                !v1308
                                                                             && (*v1628 == (llvm::CallBase *)0x6F6D702E32787661
                                                                               ? (BOOL v1309 = *(llvm::CallBase **)((char *)v1628 + 3) == (llvm::CallBase *)0x787A766F6D702E32)
                                                                               : (BOOL v1309 = 0),
                                                                                 !v1309)))
                                                                          {
                                                                            if (v36 < 0x12
                                                                              || (*v1628 == (llvm::CallBase *)0x6D2E323135787661
                                                                                ? (BOOL v1310 = v1628[1] == (llvm::CallBase *)0x766F6D702E6B7361)
                                                                                : (BOOL v1310 = 0),
                                                                                  v1310
                                                                                ? (BOOL v1311 = *((unsigned __int16 *)v1628
                                                                                           + 8) == 30835)
                                                                                : (BOOL v1311 = 0),
                                                                                  !v1311
                                                                               && (*v1628 == (llvm::CallBase *)0x6D2E323135787661
                                                                                 ? (BOOL v1312 = v1628[1] == (llvm::CallBase *)0x766F6D702E6B7361)
                                                                                 : (BOOL v1312 = 0),
                                                                                   v1312
                                                                                 ? (BOOL v1313 = *((unsigned __int16 *)v1628
                                                                                            + 8) == 30842)
                                                                                 : (BOOL v1313 = 0),
                                                                                   !v1313)))
                                                                            {
                                                                              uint64_t v35 = v1628;
                                                                              unint64_t v107 = v1629;
                                                                              if (v1629 != 23)
                                                                              {
                                                                                if (v1629 < 0x12)
                                                                                {
                                                                                  if (v1629 < 0xF)
                                                                                  {
                                                                                    char v494 = 1;
                                                                                    char v493 = 1;
                                                                                    char v113 = 1;
                                                                                    char v112 = 1;
                                                                                    char v628 = 1;
                                                                                    char v640 = 1;
                                                                                    BOOL v631 = 1;
                                                                                    char v641 = 1;
                                                                                    BOOL v642 = 1;
                                                                                    if (v1629 < 0xB)
                                                                                    {
LABEL_1563:
                                                                                      switch(v107)
                                                                                      {
                                                                                        case 0xCuLL:
                                                                                          BOOL v814 = *v35 == (llvm::CallBase *)0x6C73702E32657373
                                                                                              && *((_DWORD *)v35 + 2) == 1902390892;
                                                                                          if (v814
                                                                                            || (*v35 == (llvm::CallBase *)0x6C73702E32787661
                                                                                              ? (BOOL v815 = *((unsigned int *)v35 + 2) == 1902390892)
                                                                                              : (BOOL v815 = 0),
                                                                                                v815))
                                                                                          {
                                                                                            v1009 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                            uint64_t v1010 = *((void *)v1009 + 4);
                                                                                            v1011 = (void *)(v1010 + 24);
                                                                                            if (*(_DWORD *)(v1010 + 32) >= 0x41u) {
                                                                                              v1011 = (void *)*v1011;
                                                                                            }
                                                                                            v853 = *(unsigned __int8 **)v1009;
                                                                                            unsigned int v852 = *(_DWORD *)v1011 >> 3;
                                                                                            goto LABEL_2178;
                                                                                          }
                                                                                          if (*v35 != (llvm::CallBase *)0x7273702E32657373
                                                                                            || *((_DWORD *)v35 + 2) != 1902390892)
                                                                                          {
                                                                                            uint64_t v10 = 0x7273702E32787661;
                                                                                            if (*v35 != (llvm::CallBase *)0x7273702E32787661
                                                                                              || *((_DWORD *)v35 + 2) != 1902390892)
                                                                                            {
                                                                                              goto LABEL_1653;
                                                                                            }
                                                                                          }
                                                                                          v818 = (char *)v1633
                                                                                               - 32
                                                                                               * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                          uint64_t v819 = *((void *)v818 + 4);
                                                                                          v820 = (void *)(v819 + 24);
                                                                                          if (*(_DWORD *)(v819 + 32) >= 0x41u) {
                                                                                            v820 = (void *)*v820;
                                                                                          }
                                                                                          v821 = *(unsigned __int8 **)v818;
                                                                                          unsigned int v822 = *(_DWORD *)v820 >> 3;
                                                                                          goto LABEL_1638;
                                                                                        case 0xDuLL:
                                                                                          if (*v35 == (llvm::CallBase *)0x62702E3134657373
                                                                                            && *(llvm::CallBase **)((char *)v35 + 5) == (llvm::CallBase *)0x77646E656C62702ELL)
                                                                                          {
                                                                                            goto LABEL_2184;
                                                                                          }
                                                                                          goto LABEL_1653;
                                                                                        case 0xFuLL:
                                                                                          if (*v35 == (llvm::CallBase *)0x6C73702E32657373
                                                                                            && *(llvm::CallBase **)((char *)v35 + 7) == (llvm::CallBase *)0x73622E71642E6C6CLL)
                                                                                          {
                                                                                            goto LABEL_1662;
                                                                                          }
                                                                                          if (*v35 == (llvm::CallBase *)0x6C73702E32787661
                                                                                            && *(llvm::CallBase **)((char *)v35 + 7) == (llvm::CallBase *)0x73622E71642E6C6CLL)
                                                                                          {
                                                                                            goto LABEL_1662;
                                                                                          }
                                                                                          if (*v35 != (llvm::CallBase *)0x7273702E32657373
                                                                                            || *(llvm::CallBase **)((char *)v35 + 7) != (llvm::CallBase *)0x73622E71642E6C72)
                                                                                          {
                                                                                            uint64_t v10 = 0x7273702E32787661;
                                                                                            if (*v35 != (llvm::CallBase *)0x7273702E32787661
                                                                                              || *(llvm::CallBase **)((char *)v35 + 7) != (llvm::CallBase *)0x73622E71642E6C72)
                                                                                            {
                                                                                              goto LABEL_1653;
                                                                                            }
                                                                                          }
                                                                                          goto LABEL_1635;
                                                                                        case 0x12uLL:
                                                                                          if (*v35 == (llvm::CallBase *)0x702E323135787661
                                                                                            && v35[1] == (llvm::CallBase *)0x352E71642E6C6C73
                                                                                            && *((_WORD *)v35 + 8) == 12849)
                                                                                          {
LABEL_1662:
                                                                                            v849 = (char *)v1633
                                                                                                 - 32
                                                                                                 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                            uint64_t v850 = *((void *)v849 + 4);
                                                                                            v851 = (void *)(v850 + 24);
                                                                                            if (*(_DWORD *)(v850 + 32) >= 0x41u) {
                                                                                              v851 = (void *)*v851;
                                                                                            }
                                                                                            unsigned int v852 = *(_DWORD *)v851;
                                                                                            v853 = *(unsigned __int8 **)v849;
LABEL_2178:
                                                                                            InsertElement = UpgradeX86PSLLDQIntrinsics((uint64_t)v1647, v853, v852);
                                                                                            goto LABEL_1586;
                                                                                          }
                                                                                          uint64_t v10 = (uint64_t)*v35;
                                                                                          if (*v35 == (llvm::CallBase *)0x702E323135787661
                                                                                            && v35[1] == (llvm::CallBase *)0x352E71642E6C7273
                                                                                            && *((_WORD *)v35 + 8) == 12849)
                                                                                          {
LABEL_1635:
                                                                                            v841 = (char *)v1633
                                                                                                 - 32
                                                                                                 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                            uint64_t v842 = *((void *)v841 + 4);
                                                                                            v843 = (void *)(v842 + 24);
                                                                                            if (*(_DWORD *)(v842 + 32) >= 0x41u) {
                                                                                              v843 = (void *)*v843;
                                                                                            }
                                                                                            unsigned int v822 = *(_DWORD *)v843;
                                                                                            v821 = *(unsigned __int8 **)v841;
LABEL_1638:
                                                                                            InsertElement = UpgradeX86PSRLDQIntrinsics((uint64_t)v1647, v821, v822);
                                                                                            goto LABEL_1586;
                                                                                          }
LABEL_1653:
                                                                                          if (*v35 == (llvm::CallBase *)0x6C622E3134657373
                                                                                            && *((_DWORD *)v35 + 2) == 1885630053)
                                                                                          {
                                                                                            goto LABEL_2184;
                                                                                          }
                                                                                          if ((v640 & 1) == 0) {
                                                                                            goto LABEL_1171;
                                                                                          }
                                                                                          goto LABEL_1661;
                                                                                        default:
                                                                                          if (v640)
                                                                                          {
                                                                                            char v640 = 1;
LABEL_1661:
                                                                                            char v644 = 1;
                                                                                            goto LABEL_1176;
                                                                                          }
                                                                                          if (*v35 != (llvm::CallBase *)0x6C622E3134657373
                                                                                            || *((_DWORD *)v35 + 2) != 1885630053)
                                                                                          {
                                                                                            char v640 = 0;
                                                                                            goto LABEL_1171;
                                                                                          }
                                                                                          break;
                                                                                      }
                                                                                      goto LABEL_2184;
                                                                                    }
                                                                                    goto LABEL_1127;
                                                                                  }
                                                                                  char v113 = 1;
                                                                                  char v112 = 1;
                                                                                  goto LABEL_771;
                                                                                }
                                                                                if (*v1628 != (llvm::CallBase *)0x6F7262762E787661
                                                                                  || v1628[1] != (llvm::CallBase *)0x3166747361636461
                                                                                  || *((_WORD *)v1628 + 8) != 14386)
                                                                                {
                                                                                  if (v1629 == 19)
                                                                                  {
                                                                                    if (*v1628 == (llvm::CallBase *)0x7262762E32787661
                                                                                      && v1628[1] == (llvm::CallBase *)0x697473616364616FLL
                                                                                      && *(llvm::CallBase **)((char *)v1628 + 11) == (llvm::CallBase *)0x3832316974736163)
                                                                                    {
                                                                                      goto LABEL_2787;
                                                                                    }
                                                                                    unint64_t v107 = 19;
                                                                                  }
LABEL_133:
                                                                                  BOOL v109 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                                                      && v35[1] == (llvm::CallBase *)0x667568732E6B7361
                                                                                      && *((_WORD *)v35 + 8) == 26926;
                                                                                  if (v109
                                                                                    || (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                                                      ? (BOOL v110 = v35[1] == (llvm::CallBase *)0x667568732E6B7361)
                                                                                      : (BOOL v110 = 0),
                                                                                        v110
                                                                                      ? (BOOL v111 = *((unsigned __int16 *)v35
                                                                                                + 8) == 26158)
                                                                                      : (BOOL v111 = 0),
                                                                                        v111))
                                                                                  {
                                                                                    uint64_t v441 = ((void *)v1633
                                                                                          - 4
                                                                                          * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
                                                                                    uint64_t v442 = (void *)(v441 + 24);
                                                                                    if (*(_DWORD *)(v441 + 32) >= 0x41u) {
                                                                                      uint64_t v442 = (void *)*v442;
                                                                                    }
                                                                                    unsigned int v443 = *(_DWORD *)v442;
                                                                                    unint64_t v444 = *(llvm::Type **)v1633;
                                                                                    unint64_t v446 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1633);
                                                                                    if ((_BYTE)v445) {
                                                                                    unint64_t v447 = v446 >> 7;
                                                                                    }
                                                                                    if ((*((_DWORD *)v444 + 2) & 0xFE) == 0x12) {
                                                                                      unint64_t v444 = (llvm::Type *)**((void **)v444 + 2);
                                                                                    }
                                                                                    unsigned int v448 = llvm::Type::getPrimitiveSizeInBits(v444);
                                                                                    __src = &v1641;
                                                                                    uint64_t v1640 = 0x800000000;
                                                                                    llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, 0);
                                                                                    if (v447)
                                                                                    {
                                                                                      unsigned int v449 = 0;
                                                                                      unsigned int v450 = v447 >> 1;
                                                                                      do
                                                                                      {
                                                                                        if (v448 <= 0x80)
                                                                                        {
                                                                                          int v451 = 0;
                                                                                          if (v449 >= v450) {
                                                                                            int v452 = v446 >> 7;
                                                                                          }
                                                                                          else {
                                                                                            int v452 = 0;
                                                                                          }
                                                                                          int v453 = (((v443 >> (v449 * v450)) & (v447 - 1))
                                                                                                + v452)
                                                                                               * (0x80
                                                                                                / v448);
                                                                                          unsigned int v454 = 0x80 / v448;
                                                                                          do
                                                                                          {
                                                                                            llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)&__src, v451 + v453);
                                                                                            ++v451;
                                                                                            --v454;
                                                                                          }
                                                                                          while (v454);
                                                                                        }
                                                                                        ++v449;
                                                                                      }
                                                                                      while (v449 != v447);
                                                                                    }
                                                                                    char v455 = (char *)v1633
                                                                                         - 32
                                                                                         * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                    unint64_t v456 = *(void **)v455;
                                                                                    uint64_t v457 = *((void *)v455 + 4);
                                                                                    __int16 v1646 = 257;
                                                                                    ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v456, v457, (int *)__src, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                    unint64_t v458 = (char *)v1633
                                                                                         - 32
                                                                                         * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                    ShuffleVector = (llvm::Value *)EmitX86Select((llvm::IRBuilderBase *)v1647, *((unsigned __int8 **)v458 + 16), ShuffleVector, *((llvm::Value **)v458 + 12));
                                                                                    if (__src != &v1641) {
                                                                                      free(__src);
                                                                                    }
                                                                                    BOOL v7 = v1648;
                                                                                    goto LABEL_1364;
                                                                                  }
                                                                                  if (v107 >= 0x16)
                                                                                  {
                                                                                    BOOL v488 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                                                        && v35[1] == (llvm::CallBase *)0x616F72622E6B7361
                                                                                        && *(llvm::CallBase **)((char *)v35 + 14) == (llvm::CallBase *)0x667473616364616FLL;
                                                                                    if (v488
                                                                                      || (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                                                        ? (BOOL v489 = v35[1] == (llvm::CallBase *)0x616F72622E6B7361)
                                                                                        : (BOOL v489 = 0),
                                                                                          v489
                                                                                        ? (BOOL v490 = *(llvm::CallBase **)((char *)v35 + 14) == (llvm::CallBase *)0x697473616364616FLL)
                                                                                        : (BOOL v490 = 0),
                                                                                          v490))
                                                                                    {
                                                                                      unsigned int v537 = *(_DWORD *)(**((void **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)) + 32);
                                                                                      unint64_t v538 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                      __src = &v1641;
                                                                                      uint64_t v1640 = 0x800000000;
                                                                                      llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v538);
                                                                                      v539 = (int *)__src;
                                                                                      if (v538)
                                                                                      {
                                                                                        for (uint64_t i = 0; i != v538; ++i)
                                                                                          v539[i] = i % v537;
                                                                                      }
                                                                                      v541 = (void *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                      __int16 v1646 = 257;
                                                                                      v542 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v541, (uint64_t)v541, v539, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                      ShuffleVector = v542;
                                                                                      v543 = (char *)v1633
                                                                                           - 32
                                                                                           * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                      uint64_t v544 = (unsigned __int8 *)*((void *)v543 + 8);
                                                                                      goto LABEL_1328;
                                                                                    }
                                                                                    char v113 = 0;
                                                                                    char v112 = 0;
                                                                                  }
                                                                                  else
                                                                                  {
                                                                                    char v112 = 0;
                                                                                    char v113 = 1;
                                                                                  }
LABEL_771:
                                                                                  if ((*v35 != (llvm::CallBase *)0x7262702E32787661
                                                                                     || *(llvm::CallBase **)((char *)v35 + 7) != (llvm::CallBase *)0x7473616364616F72)
                                                                                    && (*v35 != (llvm::CallBase *)0x7262762E32787661
                                                                                     || *(llvm::CallBase **)((char *)v35 + 7) != (llvm::CallBase *)0x7473616364616F72))
                                                                                  {
                                                                                    if (v107 < 0x11)
                                                                                    {
                                                                                      uint64_t v3 = v1648;
                                                                                      char v493 = 0;
                                                                                      char v494 = 1;
LABEL_1126:
                                                                                      char v628 = 1;
LABEL_1127:
                                                                                      BOOL v629 = *v35 == (llvm::CallBase *)0x6461702E32657373
                                                                                          && *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x2E73646461702E32;
                                                                                      if (v629
                                                                                        || (*v35 == (llvm::CallBase *)0x6461702E32787661
                                                                                          ? (BOOL v630 = *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x2E73646461702E32)
                                                                                          : (BOOL v630 = 0),
                                                                                            v630
                                                                                         || (BOOL v631 = v107 < 0xD,
                                                                                             v107 >= 0xD)
                                                                                         && (*v35 == (llvm::CallBase *)0x702E323135787661
                                                                                           ? (BOOL v632 = *(llvm::CallBase **)((char *)v35 + 5) == (llvm::CallBase *)0x2E73646461702E32)
                                                                                           : (BOOL v632 = 0),
                                                                                             v632))
                                                                                        || (v112 & 1) == 0
                                                                                        && (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                                                                          ? (BOOL v633 = v35[1] == (llvm::CallBase *)0x646461702E6B7361)
                                                                                          : (BOOL v633 = 0),
                                                                                            v633
                                                                                          ? (BOOL v634 = *((unsigned __int16 *)v35 + 8) == 11891)
                                                                                          : (BOOL v634 = 0),
                                                                                            v634))
                                                                                      {
                                                                                        v665 = (uint64_t *)v1633;
                                                                                        int v666 = 265;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        BOOL v635 = *v35 == (llvm::CallBase *)0x7573702E32657373
                                                                                            && *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x2E73627573702E32;
                                                                                        if (v635
                                                                                          || ((uint64_t v10 = *(uint64_t *)((char *)v35 + 3),
                                                                                               *v35 == (llvm::CallBase *)0x7573702E32787661)
                                                                                            ? (BOOL v636 = v10 == 0x2E73627573702E32)
                                                                                            : (BOOL v636 = 0),
                                                                                              v636
                                                                                           || v107 >= 0xD
                                                                                           && ((uint64_t v10 = *(uint64_t *)((char *)v35 + 5),
                                                                                                *v35 == (llvm::CallBase *)0x702E323135787661)
                                                                                             ? (BOOL v637 = v10 == 0x2E73627573702E32)
                                                                                             : (BOOL v637 = 0),
                                                                                               v637))
                                                                                          || (v112 & 1) == 0
                                                                                          && ((uint64_t v10 = *((unsigned __int16 *)v35 + 8),
                                                                                               *v35 == (llvm::CallBase *)0x6D2E323135787661)
                                                                                            ? (BOOL v638 = v35[1] == (llvm::CallBase *)0x627573702E6B7361)
                                                                                            : (BOOL v638 = 0),
                                                                                              v638
                                                                                            ? (BOOL v639 = v10 == 11891)
                                                                                            : (BOOL v639 = 0),
                                                                                              v639))
                                                                                        {
                                                                                          v665 = (uint64_t *)v1633;
                                                                                          int v666 = 286;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                          if (v107 < 0xC)
                                                                                          {
                                                                                            char v640 = 1;
                                                                                            unint64_t v107 = 11;
                                                                                            char v641 = 1;
                                                                                            BOOL v642 = 1;
LABEL_1171:
                                                                                            if (*v35 != (llvm::CallBase *)0x6E656C622E787661
                                                                                              || *(llvm::CallBase **)((char *)v35 + 3) != (llvm::CallBase *)0x702E646E656C622ELL)
                                                                                            {
                                                                                              char v644 = 0;
LABEL_1176:
                                                                                              if (v107 != 12
                                                                                                || ((uint64_t v10 = 0x6C62702E32787661, *v35 == (llvm::CallBase *)0x6C62702E32787661) ? (v645 = *((_DWORD *)v35 + 2) == 2003070565) : (v645 = 0),
                                                                                                    !v645))
                                                                                              {
                                                                                                if (v631 || ((uint64_t v10 = 0x6C62702E32787661, *v35 == (llvm::CallBase *)0x6C62702E32787661) ? (v646 = *(llvm::CallBase **)((char *)v35 + 5) == (llvm::CallBase *)0x2E64646E656C6270) : (v646 = 0), !v646))
                                                                                                {
                                                                                                  if (v107 >= 0x10 && ((uint64_t v10 = 0x736E69762E787661, *v35 == (llvm::CallBase *)0x736E69762E787661) ? (v647 = v35[1] == (llvm::CallBase *)0x2E38323166747265) : (v647 = 0), v647 || v107 == 16 && ((uint64_t v10 = 0x6E69762E32787661, *v35 == (llvm::CallBase *)0x6E69762E32787661) ? (v648 = v35[1] == (llvm::CallBase *)0x3832316974726573) : (v648 = 0), v648)) || (v112 & 1) == 0 && ((uint64_t v10 = *((unsigned __int16 *)v35 + 8), *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v649 = v35[1] == (llvm::CallBase *)0x65736E692E6B7361) : (v649 = 0), v649 ? (v650 = v10 == 29810) : (v650 = 0), v650))
                                                                                                  {
                                                                                                    v748 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                    v749 = (llvm::PoisonValue **)*((void *)v748 + 4);
                                                                                                    uint64_t v750 = *((void *)v748 + 8);
                                                                                                    v751 = (void *)(v750 + 24);
                                                                                                    if (*(_DWORD *)(v750 + 32) >= 0x41u) {
                                                                                                      v751 = (void *)*v751;
                                                                                                    }
                                                                                                    v752 = *(void **)v748;
                                                                                                    unsigned int v753 = *(_DWORD *)v751;
                                                                                                    unint64_t v754 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                    uint64_t v755 = *((unsigned int *)*v749 + 8);
                                                                                                    __src = &v1641;
                                                                                                    uint64_t v1640 = 0x800000000;
                                                                                                    llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v754);
                                                                                                    v756 = (int *)__src;
                                                                                                    if (v755)
                                                                                                    {
                                                                                                      for (uint64_t j = 0;
                                                                                                            j != v755;
                                                                                                            ++j)
                                                                                                      {
                                                                                                        v756[j] = j;
                                                                                                      }
                                                                                                    }
                                                                                                    if (v755 != v754)
                                                                                                    {
                                                                                                      int v758 = v755;
                                                                                                      do
                                                                                                        v756[v758++] = v755;
                                                                                                      while (v754 != v758);
                                                                                                    }
                                                                                                    __int16 v1646 = 257;
                                                                                                    v759 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v749, v756, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                                    ShuffleVector = (llvm::Value *)v759;
                                                                                                    v760 = (int *)__src;
                                                                                                    if (v754)
                                                                                                    {
                                                                                                      for (uint64_t k = 0;
                                                                                                            k != v754;
                                                                                                            ++k)
                                                                                                      {
                                                                                                        v760[k] = k;
                                                                                                      }
                                                                                                    }
                                                                                                    if (v755)
                                                                                                    {
                                                                                                      uint64_t v762 = 0;
                                                                                                      int v763 = v753 % (v754 / v755) * v755;
                                                                                                      do
                                                                                                      {
                                                                                                        v760[(v763 + v762++)] = v754;
                                                                                                        LODWORD(v754) = v754 + 1;
                                                                                                        --v755;
                                                                                                      }
                                                                                                      while (v755);
                                                                                                    }
                                                                                                    __int16 v1646 = 257;
                                                                                                    ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v752, (uint64_t)v759, v760, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                                    if (((llvm::CallBase::arg_end(v1633) - ((void)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xA0)
                                                                                                    {
                                                                                                      v764 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                      v765 = (unsigned __int8 *)*((void *)v764 + 16);
                                                                                                      v766 = ShuffleVector;
                                                                                                      v767 = (llvm::Value *)*((void *)v764 + 12);
LABEL_1471:
                                                                                                      v768 = EmitX86Select((llvm::IRBuilderBase *)v1647, v765, v766, v767);
LABEL_2195:
                                                                                                      ShuffleVector = (llvm::Value *)v768;
                                                                                                    }
LABEL_2196:
                                                                                                    v807 = __src;
                                                                                                    if (__src == &v1641) {
                                                                                                      goto LABEL_2198;
                                                                                                    }
LABEL_2197:
                                                                                                    free(v807);
                                                                                                    goto LABEL_2198;
                                                                                                  }
                                                                                                  if ((v494 & 1) != 0 || ((uint64_t v10 = *((unsigned __int8 *)v35 + 16), *v35 == (llvm::CallBase *)0x747865762E787661) ? (v651 = v35[1] == (llvm::CallBase *)0x3832316674636172) : (v651 = 0), v651 ? (v652 = v10 == 46) : (v652 = 0), !v652))
                                                                                                  {
                                                                                                    if (v107 != 17 || ((uint64_t v10 = *((unsigned __int8 *)v35 + 16), *v35 == (llvm::CallBase *)0x7865762E32787661) ? (v653 = v35[1] == (llvm::CallBase *)0x3231697463617274) : (v653 = 0), v653 ? (v654 = v10 == 56) : (v654 = 0), !v654))
                                                                                                    {
                                                                                                      if (v642)
                                                                                                      {
LABEL_1221:
                                                                                                        if ((v493 & 1) != 0 || ((uint64_t v10 = 0x726570762E787661, *v35 == (llvm::CallBase *)0x726570762E787661) ? (v655 = *(llvm::CallBase **)((char *)v35 + 7) == (llvm::CallBase *)0x2E38323166326D72) : (v655 = 0), !v655))
                                                                                                        {
                                                                                                          if (v107 != 15)
                                                                                                          {
                                                                                                            if (v640) {
                                                                                                              goto LABEL_1666;
                                                                                                            }
                                                                                                            goto LABEL_1589;
                                                                                                          }
                                                                                                          if (*v35 != (llvm::CallBase *)0x6570762E32787661 || *(llvm::CallBase **)((char *)v35 + 7) != (llvm::CallBase *)0x38323169326D7265)
                                                                                                          {
LABEL_1589:
                                                                                                            uint64_t v10 = 0x726570762E787661;
                                                                                                            if (*v35 == (llvm::CallBase *)0x726570762E787661 && *((_DWORD *)v35 + 2) == 778856813) {
                                                                                                              goto LABEL_2384;
                                                                                                            }
                                                                                                            if (v107 == 12)
                                                                                                            {
                                                                                                              uint64_t v10 = 0x6873702E32657373;
                                                                                                              if (*v35 == (llvm::CallBase *)0x6873702E32657373 && *((_DWORD *)v35 + 2) == 1680762485) {
                                                                                                                goto LABEL_2384;
                                                                                                              }
                                                                                                            }
                                                                                                            else if (v107 >= 0x15)
                                                                                                            {
                                                                                                              uint64_t v10 = *(uint64_t *)((char *)v35 + 13);
                                                                                                              if (*v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x726570762E6B7361 && v10 == 0x702E6C696D726570) {
                                                                                                                goto LABEL_2384;
                                                                                                              }
                                                                                                              char v854 = 0;
                                                                                                              goto LABEL_1667;
                                                                                                            }
LABEL_1666:
                                                                                                            char v854 = 1;
LABEL_1667:
                                                                                                            uint64_t v855 = 0x756873702E6B7361;
                                                                                                            if (v642 || (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (v856 = v35[1] == (llvm::CallBase *)0x756873702E6B7361) : (v856 = 0), (uint64_t v10 = 778317414, v856) ? (v857 = *((_DWORD *)v35 + 4) == 778317414) : (v857 = 0), !v857))
                                                                                                            {
                                                                                                              if (v107 == 13 && ((uint64_t v10 = 0x772E6C6675687370, *v35 == (llvm::CallBase *)0x6873702E32657373) ? (v858 = *(llvm::CallBase **)((char *)v35 + 5) == (llvm::CallBase *)0x772E6C6675687370) : (v858 = 0), v858) || (v854 & 1) == 0 && (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (v859 = v35[1] == (llvm::CallBase *)0x756873702E6B7361) : (v859 = 0), (uint64_t v10 = 0x2E772E6C66756873, v859) ? (v860 = *(llvm::CallBase **)((char *)v35 + 13) == (llvm::CallBase *)0x2E772E6C66756873) : (v860 = 0), v860))
                                                                                                              {
                                                                                                                v947 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                v782 = *(void **)v947;
                                                                                                                uint64_t v948 = *((void *)v947 + 4);
                                                                                                                v949 = (void *)(v948 + 24);
                                                                                                                if (*(_DWORD *)(v948 + 32) >= 0x41u) {
                                                                                                                  v949 = (void *)*v949;
                                                                                                                }
                                                                                                                unsigned int v950 = *(_DWORD *)v949;
                                                                                                                unint64_t v951 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                                __src = &v1641;
                                                                                                                uint64_t v1640 = 0x1000000000;
                                                                                                                llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v951);
                                                                                                                v787 = (int *)__src;
                                                                                                                if (v951)
                                                                                                                {
                                                                                                                  unint64_t v952 = 0;
                                                                                                                  v953.i64[0] = 0x300000003;
                                                                                                                  v953.i64[1] = 0x300000003;
                                                                                                                  int8x16_t v954 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v950), (uint32x4_t)xmmword_261E91C00), v953);
                                                                                                                  v955 = (int8x16_t *)__src;
                                                                                                                  do
                                                                                                                  {
                                                                                                                    int8x16_t *v955 = vorrq_s8(v954, (int8x16_t)vdupq_n_s32(v952));
                                                                                                                    v955 += 2;
                                                                                                                    int8x16_t v956 = (int8x16_t)vdupq_n_s64(v952);
                                                                                                                    int32x4_t v957 = (int32x4_t)vorrq_s8(v956, (int8x16_t)xmmword_261E91C20);
                                                                                                                    int32x4_t v958 = (int32x4_t)vorrq_s8(v956, (int8x16_t)xmmword_261E91C30);
                                                                                                                    *(int32x4_t *)&v787[v958.i64[0]] = vuzp1q_s32(v958, v957);
                                                                                                                    v952 += 8;
                                                                                                                  }
                                                                                                                  while (v951 != v952);
                                                                                                                }
                                                                                                              }
                                                                                                              else
                                                                                                              {
                                                                                                                if (v107 != 13 || ((uint64_t v10 = 0x772E686675687370, *v35 == (llvm::CallBase *)0x6873702E32657373) ? (v861 = *(llvm::CallBase **)((char *)v35 + 5) == (llvm::CallBase *)0x772E686675687370) : (v861 = 0), !v861))
                                                                                                                {
                                                                                                                  if ((v854 & 1) != 0 || ((uint64_t v10 = (uint64_t)*v35, *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v862 = v35[1] == (llvm::CallBase *)0x756873702E6B7361) : (v862 = 0), (v855 = 0x2E772E6866756873, v862) ? (v863 = *(llvm::CallBase **)((char *)v35 + 13) == (llvm::CallBase *)0x2E772E6866756873) : (v863 = 0), !v863))
                                                                                                                  {
                                                                                                                    if ((v112 & 1) == 0)
                                                                                                                    {
                                                                                                                      uint64_t v10 = (uint64_t)v35[1];
                                                                                                                      BOOL v864 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v10 == 0x667568732E6B7361;
                                                                                                                      uint64_t v855 = 28718;
                                                                                                                      if (v864 && *((_WORD *)v35 + 8) == 28718)
                                                                                                                      {
                                                                                                                        v1154 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                        uint64_t v1155 = *((void *)v1154 + 8);
                                                                                                                        v1156 = (void *)(v1155 + 24);
                                                                                                                        if (*(_DWORD *)(v1155 + 32) >= 0x41u) {
                                                                                                                          v1156 = (void *)*v1156;
                                                                                                                        }
                                                                                                                        v1157 = *(void **)v1154;
                                                                                                                        uint64_t v1158 = *((void *)v1154 + 4);
                                                                                                                        v1159 = *(llvm::Type **)v1633;
                                                                                                                        unint64_t v1160 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                                        if ((*(_DWORD *)(*(void *)v1633 + 8) & 0xFE) == 0x12) {
                                                                                                                          v1159 = (llvm::Type *)**((void **)v1159 + 2);
                                                                                                                        }
                                                                                                                        unsigned int v1161 = *(_DWORD *)v1156;
                                                                                                                        unsigned int v1162 = llvm::Type::getPrimitiveSizeInBits(v1159);
                                                                                                                        __src = &v1641;
                                                                                                                        uint64_t v1640 = 0x1000000000;
                                                                                                                        llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1160);
                                                                                                                        if (v1160)
                                                                                                                        {
                                                                                                                          uint64_t v1163 = 0;
                                                                                                                          unsigned int v1164 = 0x80 / v1162;
                                                                                                                          unsigned int v1165 = (0x80 / v1162) >> 1;
                                                                                                                          v1166 = __src;
                                                                                                                          int v1167 = ~(-1 << v1165);
                                                                                                                          int64x2_t v1168 = (int64x2_t)xmmword_261E8D440;
                                                                                                                          uint64x2_t v1169 = (uint64x2_t)vdupq_n_s64(v1160 - 1);
                                                                                                                          int64x2_t v1170 = vdupq_n_s64(2uLL);
                                                                                                                          do
                                                                                                                          {
                                                                                                                            int32x2_t v1171 = vmovn_s64((int64x2_t)vcgeq_u64(v1169, (uint64x2_t)v1168));
                                                                                                                            if (v1171.i8[0])
                                                                                                                            {
                                                                                                                              if (v1163 % v1164 >= v1165) {
                                                                                                                                int v1172 = v1160;
                                                                                                                              }
                                                                                                                              else {
                                                                                                                                int v1172 = 0;
                                                                                                                              }
                                                                                                                              v1166[v1163] = v1163 / v1164 * v1164 + ((v1161 >> ((v1165 * v1163) & 6)) & v1167) + v1172;
                                                                                                                            }
                                                                                                                            if (v1171.i8[4])
                                                                                                                            {
                                                                                                                              if (((int)v1163 + 1) % v1164 >= v1165) {
                                                                                                                                int v1173 = v1160;
                                                                                                                              }
                                                                                                                              else {
                                                                                                                                int v1173 = 0;
                                                                                                                              }
                                                                                                                              v1166[v1163 + 1] = ((int)v1163 + 1) / v1164 * v1164 + ((v1161 >> ((v1165 * (v1163 | 1)) & 7)) & v1167) + v1173;
                                                                                                                            }
                                                                                                                            v1163 += 2;
                                                                                                                            int64x2_t v1168 = vaddq_s64(v1168, v1170);
                                                                                                                          }
                                                                                                                          while (((v1160 + 1) & 0x1FFFFFFFELL) != v1163);
                                                                                                                        }
                                                                                                                        __int16 v1646 = 257;
                                                                                                                        v1174 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v1157, v1158, (int *)__src, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                                                        ShuffleVector = (llvm::Value *)v1174;
                                                                                                                        v1175 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                        v1176 = (unsigned __int8 *)*((void *)v1175 + 16);
                                                                                                                        v1177 = (llvm::Value *)*((void *)v1175 + 12);
LABEL_2504:
                                                                                                                        ShuffleVector = (llvm::Value *)EmitX86Select((llvm::IRBuilderBase *)v1647, v1176, (llvm::Value *)v1174, v1177);
                                                                                                                        v807 = __src;
                                                                                                                        if (__src == &v1641) {
                                                                                                                          goto LABEL_2198;
                                                                                                                        }
                                                                                                                        goto LABEL_2197;
                                                                                                                      }
                                                                                                                    }
                                                                                                                    if ((v641 & 1) != 0 || ((uint64_t v10 = (uint64_t)v35[1], *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v866 = v10 == 0x64766F6D2E6B7361) : (v866 = 0), (v855 = 0x70756464766F6D2ELL, v866) ? (v867 = *(llvm::CallBase **)((char *)v35 + 11) == (llvm::CallBase *)0x70756464766F6D2ELL) : (v867 = 0), !v867))
                                                                                                                    {
                                                                                                                      if (v642 || ((v855 = 0x73766F6D2E6B7361, *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v868 = v35[1] == (llvm::CallBase *)0x73766F6D2E6B7361) : (v868 = 0), v868 ? (v869 = *((_DWORD *)v35 + 4) == 1886741608) : (v869 = 0), !v869 && ((uint64_t v10 = 1886741612, *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v870 = v35[1] == (llvm::CallBase *)0x73766F6D2E6B7361) : (v870 = 0), v870 ? (v871 = *((unsigned int *)v35 + 4) == 1886741612) : (v871 = 0), !v871)))
                                                                                                                      {
                                                                                                                        if (v641) {
                                                                                                                          goto LABEL_1733;
                                                                                                                        }
                                                                                                                        BOOL v1124 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x706E75702E6B7361 && *(llvm::CallBase **)((char *)v35 + 11) == (llvm::CallBase *)0x6C6B63706E75702ELL;
                                                                                                                        if (v1124 || ((uint64_t v855 = 0x63706E752E6B7361, *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v1125 = v35[1] == (llvm::CallBase *)0x63706E752E6B7361) : (v1125 = 0), v1125 ? (v1126 = *(llvm::CallBase **)((char *)v35 + 11) == (llvm::CallBase *)0x2E6C6B63706E752ELL) : (v1126 = 0), v1126))
                                                                                                                        {
                                                                                                                          v1197 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                          v1132 = *(void **)v1197;
                                                                                                                          uint64_t v1133 = *((void *)v1197 + 4);
                                                                                                                          v1198 = *(llvm::Type **)v1633;
                                                                                                                          unint64_t v1199 = *(int *)(*(void *)v1633 + 32);
                                                                                                                          uint64_t v1200 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                                          if ((*(_DWORD *)(*(void *)v1633 + 8) & 0xFE) == 0x12) {
                                                                                                                            v1198 = (llvm::Type *)**((void **)v1198 + 2);
                                                                                                                          }
                                                                                                                          unsigned int v1201 = llvm::Type::getPrimitiveSizeInBits(v1198);
                                                                                                                          __src = &v1641;
                                                                                                                          uint64_t v1640 = 0x4000000000;
                                                                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1199);
                                                                                                                          v1138 = (int *)__src;
                                                                                                                          if (v1200)
                                                                                                                          {
                                                                                                                            uint64_t v1202 = 0;
                                                                                                                            uint64_t v1203 = 0x80 / v1201;
                                                                                                                            uint64x2_t v1204 = (uint64x2_t)vdupq_n_s64(v1203 - 1);
                                                                                                                            int64x2_t v1205 = vdupq_n_s64(2uLL);
                                                                                                                            do
                                                                                                                            {
                                                                                                                              if (v1201 <= 0x80)
                                                                                                                              {
                                                                                                                                uint64_t v1206 = 0;
                                                                                                                                int64x2_t v1207 = (int64x2_t)xmmword_261E8D440;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                  int32x2_t v1208 = vmovn_s64((int64x2_t)vcgeq_u64(v1204, (uint64x2_t)v1207));
                                                                                                                                  if (v1208.i8[0]) {
                                                                                                                                    v1138[v1206 + v1202] = v1202 + (v1206 >> 1);
                                                                                                                                  }
                                                                                                                                  if (v1208.i8[4]) {
                                                                                                                                    v1138[(v1206 | 1) + v1202] = v1202 + (v1206 >> 1) + v1199;
                                                                                                                                  }
                                                                                                                                  v1206 += 2;
                                                                                                                                  int64x2_t v1207 = vaddq_s64(v1207, v1205);
                                                                                                                                }
                                                                                                                                while ((((_WORD)v1203 + 1) & 0x1FE) != v1206);
                                                                                                                              }
                                                                                                                              v1202 += v1203;
                                                                                                                            }
                                                                                                                            while (v1202 != v1200);
                                                                                                                          }
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                          if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x706E75702E6B7361 || *(llvm::CallBase **)((char *)v35 + 11) != (llvm::CallBase *)0x686B63706E75702ELL)
                                                                                                                          {
                                                                                                                            uint64_t v10 = (uint64_t)v35[1];
                                                                                                                            BOOL v1129 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v10 == 0x63706E752E6B7361;
                                                                                                                            if (!v1129 || *(llvm::CallBase **)((char *)v35 + 11) != (llvm::CallBase *)0x2E686B63706E752ELL)
                                                                                                                            {
LABEL_1733:
                                                                                                                              if (v107 < 0x10 || ((uint64_t v855 = (uint64_t)v35[1], *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v872 = v855 == 0x2E646E612E6B7361) : (v872 = 0), !v872))
                                                                                                                              {
                                                                                                                                if (v494) {
                                                                                                                                  goto LABEL_1753;
                                                                                                                                }
                                                                                                                                if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x646E61702E6B7361 || *((unsigned char *)v35 + 16) != 46)
                                                                                                                                {
                                                                                                                                  uint64_t v10 = (uint64_t)v35[1];
                                                                                                                                  uint64_t v855 = 0x6E646E612E6B7361;
                                                                                                                                  if (*v35 == (llvm::CallBase *)0x6D2E323135787661 && v10 == 0x6E646E612E6B7361 && *((unsigned char *)v35 + 16) == 46)
                                                                                                                                  {
LABEL_2523:
                                                                                                                                    v1212 = *(llvm::Type **)v1633;
                                                                                                                                    llvm::VectorType::getInteger(*(void *)v1633);
                                                                                                                                    v1233 = v1232;
                                                                                                                                    v1234 = (unsigned __int8 *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                    LOWORD(NullValue) = 257;
                                                                                                                                    v1235 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1234, v1232, (uint64_t)&__src);
                                                                                                                                    __int16 v1646 = 257;
                                                                                                                                    v1216 = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1647, (llvm::Constant **)v1235, (const llvm::Twine *)v1644);
                                                                                                                                    ShuffleVector = (llvm::Value *)v1216;
                                                                                                                                    v1236 = (unsigned __int8 *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                                                                                                    LOWORD(NullValue) = 257;
                                                                                                                                    v1218 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1236, v1233, (uint64_t)&__src);
                                                                                                                                    __int16 v1646 = 257;
                                                                                                                                    v1219 = (const llvm::Twine *)v1644;
                                                                                                                                    goto LABEL_2524;
                                                                                                                                  }
LABEL_1753:
                                                                                                                                  if ((v112 & 1) != 0 || ((v855 = (uint64_t)v35[1], uint64_t v10 = *((unsigned __int16 *)v35 + 8), *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v877 = v855 == 0x646E61702E6B7361) : (v877 = 0), v877 ? (v878 = v10 == 11886) : (v878 = 0), !v878))
                                                                                                                                  {
                                                                                                                                    if ((v493 & 1) != 0 || ((uint64_t v855 = *(uint64_t *)((char *)v35 + 7), *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v879 = v855 == 0x2E726F2E6B73616DLL) : (v879 = 0), !v879))
                                                                                                                                    {
                                                                                                                                      if (v107 < 0x10) {
                                                                                                                                        goto LABEL_1775;
                                                                                                                                      }
                                                                                                                                      if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x2E726F702E6B7361)
                                                                                                                                      {
                                                                                                                                        uint64_t v855 = (uint64_t)v35[1];
                                                                                                                                        if (*v35 == (llvm::CallBase *)0x6D2E323135787661 && v855 == 0x2E726F782E6B7361)
                                                                                                                                        {
LABEL_2558:
                                                                                                                                          v1212 = *(llvm::Type **)v1633;
                                                                                                                                          llvm::VectorType::getInteger(*(void *)v1633);
                                                                                                                                          v1270 = v1269;
                                                                                                                                          v1271 = (unsigned __int8 *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                          LOWORD(NullValue) = 257;
                                                                                                                                          v1272 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1271, v1269, (uint64_t)&__src);
                                                                                                                                          v1273 = (unsigned __int8 *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                                                                                                          __int16 v1646 = 257;
                                                                                                                                          v1274 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1273, v1270, (uint64_t)v1644);
                                                                                                                                          __int16 v1638 = 257;
                                                                                                                                          Xor = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1272, (llvm::Value *)v1274, (const llvm::Twine *)&__p);
                                                                                                                                          goto LABEL_2559;
                                                                                                                                        }
LABEL_1775:
                                                                                                                                        if (v494) {
                                                                                                                                          goto LABEL_1776;
                                                                                                                                        }
                                                                                                                                        if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x726F78702E6B7361 || *((unsigned char *)v35 + 16) != 46)
                                                                                                                                        {
                                                                                                                                          if (*v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x646461702E6B7361 && *((unsigned char *)v35 + 16) == 46)
                                                                                                                                          {
                                                                                                                                            v1335 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                            v1336 = *(llvm::Value **)v1335;
                                                                                                                                            v1337 = (llvm::Value *)*((void *)v1335 + 4);
                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                            Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v1647, v1336, v1337, (const llvm::Twine *)&__src, 0, 0);
                                                                                                                                            goto LABEL_2560;
                                                                                                                                          }
                                                                                                                                          uint64_t v855 = (uint64_t)v35[1];
                                                                                                                                          uint64_t v10 = *((unsigned __int8 *)v35 + 16);
                                                                                                                                          if (*v35 == (llvm::CallBase *)0x6D2E323135787661 && v855 == 0x627573702E6B7361 && v10 == 46)
                                                                                                                                          {
                                                                                                                                            v1265 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                            v1266 = *(llvm::Value **)v1265;
                                                                                                                                            v1267 = (llvm::Value *)*((void *)v1265 + 4);
                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                            Add = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)v1647, v1266, v1267, (const llvm::Twine *)&__src, 0, 0);
                                                                                                                                            goto LABEL_2560;
                                                                                                                                          }
LABEL_1776:
                                                                                                                                          if ((v112 & 1) == 0 && ((v855 = (uint64_t)v35[1], uint64_t v10 = *((unsigned __int16 *)v35 + 8), *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v882 = v855 == 0x6C756D702E6B7361) : (v882 = 0), v882 ? (v883 = v10 == 11884) : (v883 = 0), v883))
                                                                                                                                          {
                                                                                                                                            v1338 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                            v1339 = *(llvm::Value **)v1338;
                                                                                                                                            v1340 = (llvm::Value *)*((void *)v1338 + 4);
                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                            Add = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)v1647, v1339, v1340, (const llvm::Twine *)&__src, 0, 0);
                                                                                                                                          }
                                                                                                                                          else
                                                                                                                                          {
                                                                                                                                            if (v494) {
                                                                                                                                              goto LABEL_1785;
                                                                                                                                            }
                                                                                                                                            if (*v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x2E6464612E6B7361 && *((unsigned char *)v35 + 16) == 112)
                                                                                                                                            {
                                                                                                                                              if (*(_DWORD *)((char *)v35 + v107 - 4) == 842085678)
                                                                                                                                              {
                                                                                                                                                BOOL v1376 = *((unsigned char *)v35 + 17) == 115;
                                                                                                                                                int v1377 = 10381;
                                                                                                                                                goto LABEL_2870;
                                                                                                                                              }
                                                                                                                                              v1347 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                              v1348 = *(llvm::Value **)v1347;
                                                                                                                                              v1349 = (llvm::Value *)*((void *)v1347 + 4);
                                                                                                                                              LOWORD(NullValue) = 257;
                                                                                                                                              Add = llvm::IRBuilderBase::CreateFAdd((llvm::IRBuilderBase *)v1647, v1348, v1349, (const llvm::Twine *)&__src, 0);
                                                                                                                                            }
                                                                                                                                            else if (*v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x2E7669642E6B7361 && *((unsigned char *)v35 + 16) == 112)
                                                                                                                                            {
                                                                                                                                              if (*(_DWORD *)((char *)v35 + v107 - 4) == 842085678)
                                                                                                                                              {
                                                                                                                                                BOOL v1376 = *((unsigned char *)v35 + 17) == 115;
                                                                                                                                                int v1377 = 10412;
                                                                                                                                                goto LABEL_2870;
                                                                                                                                              }
                                                                                                                                              v1351 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                              v1352 = *(llvm::Value **)v1351;
                                                                                                                                              v1353 = (llvm::Value *)*((void *)v1351 + 4);
                                                                                                                                              LOWORD(NullValue) = 257;
                                                                                                                                              Add = llvm::IRBuilderBase::CreateFDiv((llvm::IRBuilderBase *)v1647, v1352, v1353, (const llvm::Twine *)&__src, 0);
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                              if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x2E6C756D2E6B7361 || *((unsigned char *)v35 + 16) != 112)
                                                                                                                                              {
                                                                                                                                                uint64_t v10 = *((unsigned __int8 *)v35 + 16);
                                                                                                                                                if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x2E6275732E6B7361 || v10 != 112)
                                                                                                                                                {
                                                                                                                                                  uint64_t v855 = *((unsigned __int8 *)v35 + 16);
                                                                                                                                                  if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x2E78616D2E6B7361 || v855 != 112)
                                                                                                                                                  {
                                                                                                                                                    uint64_t v855 = (uint64_t)v35[1];
                                                                                                                                                    uint64_t v10 = *((unsigned __int8 *)v35 + 16);
                                                                                                                                                    BOOL v1298 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v855 == 0x2E6E696D2E6B7361;
                                                                                                                                                    if (!v1298 || v10 != 112) {
                                                                                                                                                      goto LABEL_1785;
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  uint64_t v1300 = 18;
                                                                                                                                                  if (v107 < 0x12) {
                                                                                                                                                    uint64_t v1300 = v107;
                                                                                                                                                  }
                                                                                                                                                  if (v107 - v1300 != 4 || *(_DWORD *)((char *)v35 + v1300) != 842085678)
                                                                                                                                                  {
LABEL_1785:
                                                                                                                                                    if ((v112 & 1) == 0)
                                                                                                                                                    {
                                                                                                                                                      uint64_t v855 = *((unsigned __int16 *)v35 + 8);
                                                                                                                                                      BOOL v884 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x6E637A6C2E6B7361;
                                                                                                                                                      if (v884 && v855 == 11892)
                                                                                                                                                      {
LABEL_2730:
                                                                                                                                                        v1354 = (uint64_t **)*((void *)v1627 + 5);
                                                                                                                                                        std::string __p = *(void **)v1633;
                                                                                                                                                        uint64_t v1355 = llvm::Intrinsic::getDeclaration(v1354, 53, (uint64_t)&__p, 1);
                                                                                                                                                        uint64_t v1356 = v1355;
                                                                                                                                                        if (v1355) {
                                                                                                                                                          uint64_t v1357 = *(void *)(v1355 + 24);
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                          uint64_t v1357 = 0;
                                                                                                                                                        }
                                                                                                                                                        v1644[0] = *((llvm::hashing::detail::hash_state **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                                        v1644[1] = (llvm::hashing::detail::hash_state *)llvm::ConstantInt::get(*v1651 + 1920, 0);
                                                                                                                                                        LOWORD(NullValue) = 257;
                                                                                                                                                        v1275 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1357, v1356, (uint64_t *)v1644, 2, (uint64_t)&__src, 0);
                                                                                                                                                        ShuffleVector = v1275;
                                                                                                                                                        v1386 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                                        v1277 = (unsigned __int8 *)*((void *)v1386 + 8);
                                                                                                                                                        v1278 = (llvm::Value *)*((void *)v1386 + 4);
                                                                                                                                                        goto LABEL_2561;
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    if (v107 < 0x10) {
                                                                                                                                                      goto LABEL_1794;
                                                                                                                                                    }
                                                                                                                                                    if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x6C6C73702E6B7361)
                                                                                                                                                    {
                                                                                                                                                      if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x6C7273702E6B7361)
                                                                                                                                                      {
                                                                                                                                                        if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x617273702E6B7361)
                                                                                                                                                        {
LABEL_1794:
                                                                                                                                                          if ((v112 & 1) == 0)
                                                                                                                                                          {
                                                                                                                                                            BOOL v886 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x65766F6D2E6B7361;
                                                                                                                                                            if (v886 && *((_WORD *)v35 + 8) == 29486)
                                                                                                                                                            {
                                                                                                                                                              InsertElement = upgradeMaskedMove((llvm::IRBuilderBase *)v1647, (uint64_t)v1633, (const llvm::APInt *)v855, (unint64_t *)v10);
                                                                                                                                                              goto LABEL_1586;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          if ((v493 & 1) == 0 && *v35 == (llvm::CallBase *)0x632E323135787661 && *(llvm::CallBase **)((char *)v35 + 7) == (llvm::CallBase *)0x326B73616D747663)
                                                                                                                                                          {
                                                                                                                                                            InsertElement = UpgradeMaskToInt((uint64_t)v1647, v1633);
                                                                                                                                                            goto LABEL_1586;
                                                                                                                                                          }
                                                                                                                                                          if (v107 >= 9 && *(llvm::CallBase **)((char *)v35 + v107 - 9) == (llvm::CallBase *)0x7164746E766F6D2ELL && *((unsigned char *)v35 + v107 - 1) == 97)
                                                                                                                                                          {
                                                                                                                                                            v1406 = (uint64_t **)*((void *)v1627 + 5);
                                                                                                                                                            v1407 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*v6 + 1992, 1);
                                                                                                                                                            __src = (void *)llvm::ValueAsMetadata::get(v1407, v1408);
                                                                                                                                                            v1409 = llvm::MDTuple::getImpl(v6, (llvm::hashing::detail::hash_state *)&__src, 1uLL, 0, 1);
                                                                                                                                                            v1410 = (unsigned __int8 *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                                            v1411 = (llvm::Type *)llvm::PointerType::get(*(llvm::PointerType ***)v1633, 0);
                                                                                                                                                            __src = "cast";
                                                                                                                                                            LOWORD(NullValue) = 259;
                                                                                                                                                            v1412 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1410, v1411, (uint64_t)&__src);
                                                                                                                                                            v1413 = *(llvm::Type **)v1633;
                                                                                                                                                            unint64_t v1414 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1633);
                                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                                            AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v1647, v1413, (llvm::Value *)v1412, (63 - __clz(v1414 >> 3)) | 0x100u, 0, (uint64_t)&__src);
                                                                                                                                                            int MDKindID = llvm::Module::getMDKindID(v1406, (uint64_t *)"nontemporal", 0xBuLL);
                                                                                                                                                            llvm::Instruction::setMetadata(AlignedLoad, MDKindID, v1409);
                                                                                                                                                            ShuffleVector = (llvm::Value *)AlignedLoad;
                                                                                                                                                            goto LABEL_1587;
                                                                                                                                                          }
                                                                                                                                                          if ((v644 & 1) != 0 || (*v35 == (llvm::CallBase *)0x616D66762E616D66 ? (BOOL v890 = *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x2E6464616D66762ELL) : (BOOL v890 = 0), !v890 && (*v35 == (llvm::CallBase *)0x736D66762E616D66 ? (v891 = *(llvm::CallBase **)((char *)v35 + 3) == (llvm::CallBase *)0x2E6275736D66762ELL) : (v891 = 0), !v891)))
                                                                                                                                                          {
                                                                                                                                                            if ((v640 & 1) != 0 || (*v35 == (llvm::CallBase *)0x6D6E66762E616D66 ? (BOOL v892 = *((_DWORD *)v35 + 2) == 778331233) : (BOOL v892 = 0), !v892 && (*v35 == (llvm::CallBase *)0x6D6E66762E616D66 ? (v893 = *((_DWORD *)v35 + 2) == 778204531) : (v893 = 0), !v893)))
                                                                                                                                                            {
                                                                                                                                                              if (!v631 && *v35 == (llvm::CallBase *)0x6D66762E34616D66 && *(llvm::CallBase **)((char *)v35 + 5) == (llvm::CallBase *)0x732E6464616D6676)
                                                                                                                                                              {
                                                                                                                                                                v1458 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                                                v1459 = *(llvm::Value **)v1458;
                                                                                                                                                                v1460 = (llvm::Value *)*((void *)v1458 + 4);
                                                                                                                                                                v1461 = (llvm::Value *)*((void *)v1458 + 8);
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                v1462 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v1459, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
                                                                                                                                                                v1644[0] = (llvm::hashing::detail::hash_state *)v1462;
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                v1644[1] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v1460, (const llvm::Twine *)&__src, v1463);
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                *(void *)&long long v1645 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v1461, (const llvm::Twine *)&__src, v1464);
                                                                                                                                                                v1465 = *(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56) + 40);
                                                                                                                                                                std::string __p = (void *)*v1462;
                                                                                                                                                                uint64_t v1466 = llvm::Intrinsic::getDeclaration(v1465, 142, (uint64_t)&__p, 1);
                                                                                                                                                                if (v1466) {
                                                                                                                                                                  uint64_t v1467 = *(void *)(v1466 + 24);
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                  uint64_t v1467 = 0;
                                                                                                                                                                }
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1467, v1466, (uint64_t *)v1644, 3, (uint64_t)&__src, 0);
                                                                                                                                                                v972 = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)v1633, v1508);
                                                                                                                                                                v971 = ShuffleVector;
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                goto LABEL_2061;
                                                                                                                                                              }
                                                                                                                                                              if (v642 || (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (BOOL v895 = v35[1] == (llvm::CallBase *)0x616D66762E6B7361) : (BOOL v895 = 0), v895 ? (v896 = *((_DWORD *)v35 + 4) == 1932420196) : (v896 = 0), !v896))
                                                                                                                                                              {
                                                                                                                                                                if ((v854 & 1) != 0 || (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (BOOL v1420 = v35[1] == (llvm::CallBase *)0x6D66762E7A6B7361) : (BOOL v1420 = 0), v1420 ? (v1421 = *(llvm::CallBase **)((char *)v35 + 13) == (llvm::CallBase *)0x732E6464616D6676) : (v1421 = 0), !v1421 && (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (v1422 = v35[1] == (llvm::CallBase *)0x6D66762E336B7361) : (v1422 = 0), v1422 ? (v1423 = *(llvm::CallBase **)((char *)v35 + 13) == (llvm::CallBase *)0x732E6464616D6676) : (v1423 = 0), !v1423 && (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (v1424 = v35[1] == (llvm::CallBase *)0x6D66762E336B7361) : (v1424 = 0), v1424 ? (v1425 = *(llvm::CallBase **)((char *)v35 + 13) == (llvm::CallBase *)0x732E6275736D6676) : (v1425 = 0), !v1425))))
                                                                                                                                                                {
                                                                                                                                                                  if ((v113 & 1) != 0 || (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (BOOL v897 = v35[1] == (llvm::CallBase *)0x6E66762E336B7361) : (BOOL v897 = 0), v897 ? (v898 = *(llvm::CallBase **)((char *)v35 + 14) == (llvm::CallBase *)0x732E6275736D6E66) : (v898 = 0), !v898))
                                                                                                                                                                  {
                                                                                                                                                                    if (v642 || (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (BOOL v899 = v35[1] == (llvm::CallBase *)0x616D66762E6B7361) : (BOOL v899 = 0), v899 ? (v900 = *((_DWORD *)v35 + 4) == 1882088548) : (v900 = 0), !v900))
                                                                                                                                                                    {
                                                                                                                                                                      if (v854) {
                                                                                                                                                                        goto LABEL_1876;
                                                                                                                                                                      }
                                                                                                                                                                      BOOL v1470 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x6D6E66762E6B7361;
                                                                                                                                                                      if (!v1470 || *(llvm::CallBase **)((char *)v35 + 13) != (llvm::CallBase *)0x702E6464616D6E66)
                                                                                                                                                                      {
                                                                                                                                                                        BOOL v1472 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x6D6E66762E6B7361;
                                                                                                                                                                        if (!v1472 || *(llvm::CallBase **)((char *)v35 + 13) != (llvm::CallBase *)0x702E6275736D6E66)
                                                                                                                                                                        {
                                                                                                                                                                          BOOL v1474 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x6D66762E336B7361;
                                                                                                                                                                          if (!v1474 || *(llvm::CallBase **)((char *)v35 + 13) != (llvm::CallBase *)0x702E6464616D6676)
                                                                                                                                                                          {
                                                                                                                                                                            BOOL v1476 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x6D66762E336B7361;
                                                                                                                                                                            if (!v1476 || *(llvm::CallBase **)((char *)v35 + 13) != (llvm::CallBase *)0x702E6275736D6676)
                                                                                                                                                                            {
LABEL_1876:
                                                                                                                                                                              if ((v113 & 1) != 0 || (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (BOOL v901 = v35[1] == (llvm::CallBase *)0x6E66762E336B7361) : (BOOL v901 = 0), v901 ? (v902 = *(llvm::CallBase **)((char *)v35 + 14) == (llvm::CallBase *)0x702E6275736D6E66) : (v902 = 0), !v902))
                                                                                                                                                                              {
                                                                                                                                                                                if ((v854 & 1) != 0 || (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (BOOL v903 = v35[1] == (llvm::CallBase *)0x6D66762E7A6B7361) : (BOOL v903 = 0), v903 ? (v904 = *(llvm::CallBase **)((char *)v35 + 13) == (llvm::CallBase *)0x702E6464616D6676) : (v904 = 0), !v904))
                                                                                                                                                                                {
                                                                                                                                                                                  if ((v493 & 1) != 0 || (*v35 == (llvm::CallBase *)0x736D66762E616D66 ? (BOOL v905 = *(llvm::CallBase **)((char *)v35 + 7) == (llvm::CallBase *)0x702E646461627573) : (BOOL v905 = 0), !v905))
                                                                                                                                                                                  {
                                                                                                                                                                                    if ((v628 & 1) == 0)
                                                                                                                                                                                    {
                                                                                                                                                                                      BOOL v906 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x616D66762E6B7361;
                                                                                                                                                                                      if (v906 && *(llvm::CallBase **)((char *)v35 + 15) == (llvm::CallBase *)0x702E627573646461) {
                                                                                                                                                                                        goto LABEL_3069;
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                    if (v107 >= 0x18)
                                                                                                                                                                                    {
                                                                                                                                                                                      BOOL v1515 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x6D66762E336B7361;
                                                                                                                                                                                      BOOL v1516 = v1515 && v35[2] == (llvm::CallBase *)0x702E627573646461;
                                                                                                                                                                                      if (v1516 || (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (BOOL v1517 = v35[1] == (llvm::CallBase *)0x6D66762E7A6B7361) : (BOOL v1517 = 0), v1517 ? (v1518 = v35[2] == (llvm::CallBase *)0x702E627573646461) : (v1518 = 0), v1518 || (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (v1519 = v35[1] == (llvm::CallBase *)0x6D66762E336B7361) : (v1519 = 0), v1519 ? (v1520 = v35[2] == (llvm::CallBase *)0x702E646461627573) : (v1520 = 0), v1520)))
                                                                                                                                                                                      {
LABEL_3069:
                                                                                                                                                                                        int v1521 = *((unsigned __int8 *)v35 + 11);
                                                                                                                                                                                        BOOL v1522 = v1521 == 122 || v1521 == 51;
                                                                                                                                                                                        unint64_t v1523 = 12;
                                                                                                                                                                                        if (v1522) {
                                                                                                                                                                                          unint64_t v1523 = 13;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v107 < v1523) {
                                                                                                                                                                                          unint64_t v1523 = v107;
                                                                                                                                                                                        }
                                                                                                                                                                                        v1628 = (llvm::CallBase **)((char *)v35 + v1523);
                                                                                                                                                                                        size_t v1629 = v107 - v1523;
                                                                                                                                                                                        int v1524 = *((unsigned __int8 *)v35 + v1523 + 3);
                                                                                                                                                                                        if (((llvm::CallBase::arg_end(v1633) - ((void)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xA0)
                                                                                                                                                                                        {
                                                                                                                                                                                          if (*((unsigned char *)v1628 + v1629 - 5) == 115) {
                                                                                                                                                                                            int v1525 = 10911;
                                                                                                                                                                                          }
                                                                                                                                                                                          else {
                                                                                                                                                                                            int v1525 = 10910;
                                                                                                                                                                                          }
                                                                                                                                                                                          v1526 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                                                                          v1644[0] = *v1526;
                                                                                                                                                                                          v1644[1] = v1526[4];
                                                                                                                                                                                          v1527 = v1526[8];
                                                                                                                                                                                          *(void *)&long long v1645 = v1527;
                                                                                                                                                                                          *((void *)&v1645 + 1) = v1526[16];
                                                                                                                                                                                          if (v1524 == 115)
                                                                                                                                                                                          {
                                                                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                                                                            *(void *)&long long v1645 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, v1527, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                          }
                                                                                                                                                                                          uint64_t v1528 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)v1627 + 5), v1525, 0, 0);
                                                                                                                                                                                          if (v1528) {
                                                                                                                                                                                            uint64_t v1529 = *(void *)(v1528 + 24);
                                                                                                                                                                                          }
                                                                                                                                                                                          else {
                                                                                                                                                                                            uint64_t v1529 = 0;
                                                                                                                                                                                          }
                                                                                                                                                                                          LOWORD(NullValue) = 257;
                                                                                                                                                                                          ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1529, v1528, (uint64_t *)v1644, 4, (uint64_t)&__src, 0);
                                                                                                                                                                                        }
                                                                                                                                                                                        else
                                                                                                                                                                                        {
                                                                                                                                                                                          unint64_t v1536 = *(int *)(*(void *)v1633 + 32);
                                                                                                                                                                                          uint64_t v1537 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                                                                                                          v1538 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                                                                          std::string __p = *(void **)v1538;
                                                                                                                                                                                          v1636 = (uint64_t *)*((void *)v1538 + 4);
                                                                                                                                                                                          FNeg = (llvm::Value *)*((void *)v1538 + 8);
                                                                                                                                                                                          v1539 = *(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56) + 40);
                                                                                                                                                                                          __src = *(void **)__p;
                                                                                                                                                                                          uint64_t v1540 = llvm::Intrinsic::getDeclaration(v1539, 142, (uint64_t)&__src, 1);
                                                                                                                                                                                          uint64_t v1541 = v1540;
                                                                                                                                                                                          if (v1540) {
                                                                                                                                                                                            uint64_t v1542 = *(void *)(v1540 + 24);
                                                                                                                                                                                          }
                                                                                                                                                                                          else {
                                                                                                                                                                                            uint64_t v1542 = 0;
                                                                                                                                                                                          }
                                                                                                                                                                                          LOWORD(NullValue) = 257;
                                                                                                                                                                                          v1558 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1542, v1540, (uint64_t *)&__p, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                          LOWORD(NullValue) = 257;
                                                                                                                                                                                          FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, FNeg, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                          if (v1541) {
                                                                                                                                                                                            uint64_t v1559 = *(void *)(v1541 + 24);
                                                                                                                                                                                          }
                                                                                                                                                                                          else {
                                                                                                                                                                                            uint64_t v1559 = 0;
                                                                                                                                                                                          }
                                                                                                                                                                                          LOWORD(NullValue) = 257;
                                                                                                                                                                                          v1560 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1559, v1541, (uint64_t *)&__p, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                          if (v1524 == 115) {
                                                                                                                                                                                            v1561 = v1558;
                                                                                                                                                                                          }
                                                                                                                                                                                          else {
                                                                                                                                                                                            v1561 = v1560;
                                                                                                                                                                                          }
                                                                                                                                                                                          if (v1524 == 115) {
                                                                                                                                                                                            v1558 = v1560;
                                                                                                                                                                                          }
                                                                                                                                                                                          __src = &v1641;
                                                                                                                                                                                          uint64_t v1640 = 0x2000000000;
                                                                                                                                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1536);
                                                                                                                                                                                          v1562 = (int *)__src;
                                                                                                                                                                                          if (v1537)
                                                                                                                                                                                          {
                                                                                                                                                                                            uint64_t v1563 = 0;
                                                                                                                                                                                            uint64x2_t v1564 = (uint64x2_t)vdupq_n_s64(v1537 - 1);
                                                                                                                                                                                            int64x2_t v1565 = (int64x2_t)xmmword_261E8D440;
                                                                                                                                                                                            int64x2_t v1566 = vdupq_n_s64(2uLL);
                                                                                                                                                                                            do
                                                                                                                                                                                            {
                                                                                                                                                                                              int32x2_t v1567 = vmovn_s64((int64x2_t)vcgeq_u64(v1564, (uint64x2_t)v1565));
                                                                                                                                                                                              if (v1567.i8[0]) {
                                                                                                                                                                                                v1562[v1563] = v1563;
                                                                                                                                                                                              }
                                                                                                                                                                                              if (v1567.i8[4]) {
                                                                                                                                                                                                v1562[v1563 + 1] = v1536 + 1 + v1563;
                                                                                                                                                                                              }
                                                                                                                                                                                              v1563 += 2;
                                                                                                                                                                                              int64x2_t v1565 = vaddq_s64(v1565, v1566);
                                                                                                                                                                                            }
                                                                                                                                                                                            while (((v1537 + 1) & 0x1FFFFFFFELL) != v1563);
                                                                                                                                                                                          }
                                                                                                                                                                                          __int16 v1646 = 257;
                                                                                                                                                                                          ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v1561, (uint64_t)v1558, v1562, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                                                                                                                          if (__src != &v1641) {
                                                                                                                                                                                            free(__src);
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                        v1568 = v1633;
                                                                                                                                                                                        if (v1521 == 122)
                                                                                                                                                                                        {
                                                                                                                                                                                          v1278 = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)v1633, v1557);
                                                                                                                                                                                          v1568 = v1633;
                                                                                                                                                                                          uint64_t v1569 = -(uint64_t)(*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                                                                        }
                                                                                                                                                                                        else
                                                                                                                                                                                        {
                                                                                                                                                                                          uint64_t v1570 = *((_DWORD *)v1633 + 5) & 0x7FFFFFF;
                                                                                                                                                                                          uint64_t v1569 = -v1570;
                                                                                                                                                                                          v1571 = (char *)v1633 - 32 * v1570;
                                                                                                                                                                                          if (v1521 == 51) {
                                                                                                                                                                                            v1278 = (llvm::Value *)*((void *)v1571 + 8);
                                                                                                                                                                                          }
                                                                                                                                                                                          else {
                                                                                                                                                                                            v1278 = *(llvm::Value **)v1571;
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                        v1277 = (unsigned __int8 *)*((void *)v1568 + 4 * v1569 + 12);
                                                                                                                                                                                        v1275 = ShuffleVector;
                                                                                                                                                                                        goto LABEL_2561;
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                    if ((v854 & 1) == 0 && ((v908 = v1628, *v1628 == (llvm::CallBase *)0x6D2E323135787661) ? (BOOL v909 = v1628[1] == (llvm::CallBase *)0x726574702E6B7361) : (BOOL v909 = 0), v909 ? (v910 = *(llvm::CallBase **)((char *)v1628 + 13) == (llvm::CallBase *)0x2E676F6C6E726574) : (v910 = 0), v910) || (v113 & 1) == 0 && ((v908 = v1628, *v1628 == (llvm::CallBase *)0x6D2E323135787661) ? (v911 = v1628[1] == (llvm::CallBase *)0x6574702E7A6B7361) : (v911 = 0), v911 ? (v912 = *(llvm::CallBase **)((char *)v1628 + 14) == (llvm::CallBase *)0x2E676F6C6E726574) : (v912 = 0), v912))
                                                                                                                                                                                    {
                                                                                                                                                                                      int v1549 = *((unsigned __int8 *)v908 + 11);
                                                                                                                                                                                      v1550 = v1633;
                                                                                                                                                                                      v1551 = *(llvm::Type **)v1633;
                                                                                                                                                                                      int v1553 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1633);
                                                                                                                                                                                      if ((_BYTE)v1552)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1550 = v1633;
                                                                                                                                                                                        v1551 = *(llvm::Type **)v1633;
                                                                                                                                                                                      }
                                                                                                                                                                                      if ((*((_DWORD *)v1551 + 2) & 0xFE) == 0x12) {
                                                                                                                                                                                        v1551 = (llvm::Type *)**((void **)v1551 + 2);
                                                                                                                                                                                      }
                                                                                                                                                                                      int v1554 = llvm::Type::getPrimitiveSizeInBits(v1551);
                                                                                                                                                                                      if (v1553 == 128 && v1554 == 32)
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1555 = 10832;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1553 == 256 && v1554 == 32)
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1555 = 10833;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1553 == 512 && v1554 == 32)
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1555 = 10834;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1553 == 128 && v1554 == 64)
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1555 = 10835;
                                                                                                                                                                                      }
                                                                                                                                                                                      else if (v1554 == 64 && v1553 == 256)
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1555 = 10836;
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1555 = 10837;
                                                                                                                                                                                      }
                                                                                                                                                                                      v1593 = (llvm::hashing::detail::hash_state **)((char *)v1550 - 32 * (*((_DWORD *)v1550 + 5) & 0x7FFFFFF));
                                                                                                                                                                                      v1644[0] = *v1593;
                                                                                                                                                                                      v1644[1] = v1593[4];
                                                                                                                                                                                      *(void *)&long long v1645 = v1593[8];
                                                                                                                                                                                      *((void *)&v1645 + 1) = v1593[12];
                                                                                                                                                                                      uint64_t v1594 = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*((void *)v1550 + 5) + 56) + 40), v1555, 0, 0);
                                                                                                                                                                                      if (v1594) {
                                                                                                                                                                                        uint64_t v1595 = *(void *)(v1594 + 24);
                                                                                                                                                                                      }
                                                                                                                                                                                      else {
                                                                                                                                                                                        uint64_t v1595 = 0;
                                                                                                                                                                                      }
                                                                                                                                                                                      LOWORD(NullValue) = 257;
                                                                                                                                                                                      v1596 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1595, v1594, (uint64_t *)v1644, 4, (uint64_t)&__src, 0);
                                                                                                                                                                                      ShuffleVector = (llvm::Value *)v1596;
                                                                                                                                                                                      v1598 = v1633;
                                                                                                                                                                                      if (v1549 == 122)
                                                                                                                                                                                      {
                                                                                                                                                                                        v1278 = (llvm::Value *)llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1633, v1597);
                                                                                                                                                                                        v1598 = v1633;
                                                                                                                                                                                        v1275 = ShuffleVector;
                                                                                                                                                                                        uint64_t v1599 = -(uint64_t)(*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
                                                                                                                                                                                        v1275 = (llvm::Value *)v1596;
                                                                                                                                                                                        uint64_t v1600 = *((_DWORD *)v1633 + 5) & 0x7FFFFFF;
                                                                                                                                                                                        uint64_t v1599 = -v1600;
                                                                                                                                                                                        v1278 = (llvm::Value *)*((void *)v1633 - 4 * v1600);
                                                                                                                                                                                      }
                                                                                                                                                                                      v1277 = (unsigned __int8 *)*((void *)v1598 + 4 * v1599 + 16);
                                                                                                                                                                                      goto LABEL_2561;
                                                                                                                                                                                    }
                                                                                                                                                                                    if (!v642 && ((v913 = (unsigned __int8 *)v1628, *v1628 == (llvm::CallBase *)0x6D2E323135787661) ? (BOOL v914 = v1628[1] == (llvm::CallBase *)0x616D70762E6B7361) : (BOOL v914 = 0), v914 ? (v915 = *((_DWORD *)v1628 + 4) == 842359908) : (v915 = 0), v915) || (v854 & 1) == 0 && ((v913 = (unsigned __int8 *)v1628, *v1628 == (llvm::CallBase *)0x6D2E323135787661) ? (v916 = v1628[1] == (llvm::CallBase *)0x6D70762E7A6B7361) : (v916 = 0), v916 ? (v917 = *(llvm::CallBase **)((char *)v1628 + 13) == (llvm::CallBase *)0x32356464616D7076) : (v917 = 0), v917))
                                                                                                                                                                                    {
                                                                                                                                                                                      BOOL v1556 = v913[20] == 104 || v913[21] == 104;
                                                                                                                                                                                      int v1572 = v913[11];
                                                                                                                                                                                      int v1583 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1633);
                                                                                                                                                                                      if ((_BYTE)v1582) {
                                                                                                                                                                                      int v1584 = v1583 != 128 || v1556;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v1584 != 1)
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1577 = 10953;
                                                                                                                                                                                        goto LABEL_3334;
                                                                                                                                                                                      }
                                                                                                                                                                                      int v1585 = v1583 != 256 || v1556;
                                                                                                                                                                                      if (v1585 != 1)
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1577 = 10954;
                                                                                                                                                                                        goto LABEL_3334;
                                                                                                                                                                                      }
                                                                                                                                                                                      int v1586 = v1583 != 512 || v1556;
                                                                                                                                                                                      if (v1586 != 1)
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1577 = 10955;
                                                                                                                                                                                        goto LABEL_3334;
                                                                                                                                                                                      }
                                                                                                                                                                                      int v1587 = !v1556;
                                                                                                                                                                                      if (v1583 == 128 && !v1587)
                                                                                                                                                                                      {
                                                                                                                                                                                        int v1577 = 10950;
                                                                                                                                                                                        goto LABEL_3334;
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v1583 != 256) {
                                                                                                                                                                                        int v1587 = 1;
                                                                                                                                                                                      }
                                                                                                                                                                                      BOOL v1608 = v1587 == 0;
                                                                                                                                                                                      int v1609 = 10951;
                                                                                                                                                                                    }
                                                                                                                                                                                    else
                                                                                                                                                                                    {
                                                                                                                                                                                      if ((v628 & 1) == 0)
                                                                                                                                                                                      {
                                                                                                                                                                                        v918 = v1628;
                                                                                                                                                                                        BOOL v919 = *v1628 == (llvm::CallBase *)0x6D2E323135787661 && v1628[1] == (llvm::CallBase *)0x726570762E6B7361;
                                                                                                                                                                                        if (v919 && *(llvm::CallBase **)((char *)v1628 + 15) == (llvm::CallBase *)0x2E72617632696D72) {
                                                                                                                                                                                          goto LABEL_3174;
                                                                                                                                                                                        }
                                                                                                                                                                                        BOOL v921 = *v1628 == (llvm::CallBase *)0x6D2E323135787661 && v1628[1] == (llvm::CallBase *)0x726570762E6B7361;
                                                                                                                                                                                        if (v921 && *(llvm::CallBase **)((char *)v1628 + 15) == (llvm::CallBase *)0x2E72617632746D72) {
                                                                                                                                                                                          goto LABEL_3174;
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                      if (v107 >= 0x18)
                                                                                                                                                                                      {
                                                                                                                                                                                        v918 = v1628;
                                                                                                                                                                                        BOOL v923 = *v1628 == (llvm::CallBase *)0x6D2E323135787661 && v1628[1] == (llvm::CallBase *)0x6570762E7A6B7361;
                                                                                                                                                                                        if (v923 && v1628[2] == (llvm::CallBase *)0x2E72617632746D72)
                                                                                                                                                                                        {
LABEL_3174:
                                                                                                                                                                                          InsertElement = UpgradeX86VPERMT2Intrinsics((llvm::IRBuilderBase *)v1647, (uint64_t)v1633, *((unsigned __int8 *)v918 + 11) == 122, *((unsigned char *)v918 + 17) == 105);
                                                                                                                                                                                          goto LABEL_1586;
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                      if ((v854 & 1) == 0)
                                                                                                                                                                                      {
                                                                                                                                                                                        v925 = v1628;
                                                                                                                                                                                        BOOL v926 = *v1628 == (llvm::CallBase *)0x6D2E323135787661 && v1628[1] == (llvm::CallBase *)0x706470762E6B7361;
                                                                                                                                                                                        if (v926 && *(llvm::CallBase **)((char *)v1628 + 13) == (llvm::CallBase *)0x2E64737562706470) {
                                                                                                                                                                                          goto LABEL_3207;
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                      if ((v113 & 1) == 0)
                                                                                                                                                                                      {
                                                                                                                                                                                        v925 = v1628;
                                                                                                                                                                                        BOOL v928 = *v1628 == (llvm::CallBase *)0x6D2E323135787661 && v1628[1] == (llvm::CallBase *)0x6470762E7A6B7361;
                                                                                                                                                                                        if (v928 && *(llvm::CallBase **)((char *)v1628 + 14) == (llvm::CallBase *)0x2E64737562706470) {
                                                                                                                                                                                          goto LABEL_3207;
                                                                                                                                                                                        }
                                                                                                                                                                                        BOOL v930 = *v1628 == (llvm::CallBase *)0x6D2E323135787661 && v1628[1] == (llvm::CallBase *)0x706470762E6B7361;
                                                                                                                                                                                        if (v930 && *(llvm::CallBase **)((char *)v1628 + 14) == (llvm::CallBase *)0x2E73647375627064) {
                                                                                                                                                                                          goto LABEL_3207;
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                      if ((v628 & 1) == 0 && ((v925 = v1628, *v1628 == (llvm::CallBase *)0x6D2E323135787661) ? (BOOL v932 = v1628[1] == (llvm::CallBase *)0x6470762E7A6B7361) : (BOOL v932 = 0), v932 ? (v933 = *(llvm::CallBase **)((char *)v1628 + 15) == (llvm::CallBase *)0x2E73647375627064) : (v933 = 0), v933))
                                                                                                                                                                                      {
LABEL_3207:
                                                                                                                                                                                        int v1572 = *((unsigned __int8 *)v925 + 11);
                                                                                                                                                                                        uint64_t v1573 = 20;
                                                                                                                                                                                        if (v1572 == 122) {
                                                                                                                                                                                          uint64_t v1573 = 21;
                                                                                                                                                                                        }
                                                                                                                                                                                        int v1574 = *((unsigned __int8 *)v925 + v1573);
                                                                                                                                                                                        int v1576 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1633);
                                                                                                                                                                                        if ((_BYTE)v1575) {
                                                                                                                                                                                        if (v1576 == 128 && v1574 != 115)
                                                                                                                                                                                        }
                                                                                                                                                                                        {
                                                                                                                                                                                          int v1577 = 10918;
                                                                                                                                                                                          goto LABEL_3334;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1576 == 256 && v1574 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          int v1577 = 10919;
                                                                                                                                                                                          goto LABEL_3334;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1576 == 512 && v1574 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          int v1577 = 10920;
                                                                                                                                                                                          goto LABEL_3334;
                                                                                                                                                                                        }
                                                                                                                                                                                        BOOL v1607 = v1574 != 115;
                                                                                                                                                                                        if (v1576 == 128 && v1574 == 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          int v1577 = 10921;
                                                                                                                                                                                          goto LABEL_3334;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1576 != 256) {
                                                                                                                                                                                          BOOL v1607 = 1;
                                                                                                                                                                                        }
                                                                                                                                                                                        BOOL v1608 = !v1607;
                                                                                                                                                                                        int v1609 = 10922;
                                                                                                                                                                                      }
                                                                                                                                                                                      else
                                                                                                                                                                                      {
                                                                                                                                                                                        if ((v854 & 1) != 0 || ((v934 = v1628, *v1628 == (llvm::CallBase *)0x6D2E323135787661) ? (BOOL v935 = v1628[1] == (llvm::CallBase *)0x706470762E6B7361) : (BOOL v935 = 0), v935 ? (v936 = *(llvm::CallBase **)((char *)v1628 + 13) == (llvm::CallBase *)0x2E64737377706470) : (v936 = 0), !v936))
                                                                                                                                                                                        {
                                                                                                                                                                                          if ((v113 & 1) != 0 || ((v934 = v1628, *v1628 == (llvm::CallBase *)0x6D2E323135787661) ? (BOOL v937 = v1628[1] == (llvm::CallBase *)0x6470762E7A6B7361) : (BOOL v937 = 0), v937 ? (v938 = *(llvm::CallBase **)((char *)v1628 + 14) == (llvm::CallBase *)0x2E64737377706470) : (v938 = 0), !v938 && (*v1628 == (llvm::CallBase *)0x6D2E323135787661 ? (v939 = v1628[1] == (llvm::CallBase *)0x706470762E6B7361) : (v939 = 0), v939 ? (v940 = *(llvm::CallBase **)((char *)v1628 + 14) == (llvm::CallBase *)0x2E73647373777064) : (v940 = 0), !v940)))
                                                                                                                                                                                          {
                                                                                                                                                                                            if ((v628 & 1) != 0 || ((v934 = v1628, *v1628 == (llvm::CallBase *)0x6D2E323135787661) ? (BOOL v941 = v1628[1] == (llvm::CallBase *)0x6470762E7A6B7361) : (BOOL v941 = 0), v941 ? (v942 = *(llvm::CallBase **)((char *)v1628 + 15) == (llvm::CallBase *)0x2E73647373777064) : (v942 = 0), !v942))
                                                                                                                                                                                            {
                                                                                                                                                                                              if (v107 == 12)
                                                                                                                                                                                              {
                                                                                                                                                                                                if ((*v35 != (llvm::CallBase *)0x7972726163646461 || *((_DWORD *)v35 + 2) != 842233134) && (*v35 != (llvm::CallBase *)0x7972726163646461 || *((_DWORD *)v35 + 2) != 875984174)) {
                                                                                                                                                                                                  goto LABEL_3299;
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                              else
                                                                                                                                                                                              {
                                                                                                                                                                                                if (v107 != 13)
                                                                                                                                                                                                {
                                                                                                                                                                                                  if (v640)
                                                                                                                                                                                                  {
LABEL_3303:
                                                                                                                                                                                                    BOOL v7 = v1648;
                                                                                                                                                                                                    goto LABEL_159;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  goto LABEL_3299;
                                                                                                                                                                                                }
                                                                                                                                                                                                if ((*v35 != (llvm::CallBase *)0x7972726163646461 || *(llvm::CallBase **)((char *)v35 + 5) != (llvm::CallBase *)0x3233752E78797272) && (*v35 != (llvm::CallBase *)0x7972726163646461 || *(llvm::CallBase **)((char *)v35 + 5) != (llvm::CallBase *)0x3436752E78797272) && (*v35 != (llvm::CallBase *)0x6F72726F62627573 || *(llvm::CallBase **)((char *)v35 + 5) != (llvm::CallBase *)0x3233752E776F7272) && (*v35 != (llvm::CallBase *)0x6F72726F62627573 || *(llvm::CallBase **)((char *)v35 + 5) != (llvm::CallBase *)0x3436752E776F7272))
                                                                                                                                                                                                {
LABEL_3299:
                                                                                                                                                                                                  if (*v1628 != (llvm::CallBase *)0x6D2E323135787661 || *((_DWORD *)v1628 + 2) != 778793825) {
                                                                                                                                                                                                    goto LABEL_3303;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  BOOL v7 = v1648;
                                                                                                                                                                                                  if ((upgradeAVX512MaskToSelect((uint64_t)v35, v107, (llvm::IRBuilderBase *)v1647, (uint64_t)v1633, &ShuffleVector) & 1) == 0) {
                                                                                                                                                                                                    goto LABEL_159;
                                                                                                                                                                                                  }
LABEL_1364:
                                                                                                                                                                                                  AlignedLoad = (uint64_t *)ShuffleVector;
                                                                                                                                                                                                  goto LABEL_683;
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                              int v1603 = *(unsigned __int8 *)v1628;
                                                                                                                                                                                              if (v1603 == 115)
                                                                                                                                                                                              {
                                                                                                                                                                                                if (*((unsigned char *)v1628 + v107 - 1) == 50)
                                                                                                                                                                                                {
                                                                                                                                                                                                  int v1605 = 11458;
                                                                                                                                                                                                  goto LABEL_3316;
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                              else if (v1603 == 97)
                                                                                                                                                                                              {
                                                                                                                                                                                                int v1604 = *((unsigned __int8 *)v1628 + v107 - 1);
                                                                                                                                                                                                if (v1604 == 50)
                                                                                                                                                                                                {
                                                                                                                                                                                                  int v1605 = 10199;
                                                                                                                                                                                                  goto LABEL_3316;
                                                                                                                                                                                                }
                                                                                                                                                                                                if (v1604 == 52)
                                                                                                                                                                                                {
                                                                                                                                                                                                  int v1605 = 10200;
LABEL_3316:
                                                                                                                                                                                                  v1610 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                                                                                  v1644[0] = *v1610;
                                                                                                                                                                                                  v1644[1] = v1610[4];
                                                                                                                                                                                                  *(void *)&long long v1645 = v1610[8];
                                                                                                                                                                                                  uint64_t v1611 = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56) + 40), v1605, 0, 0);
                                                                                                                                                                                                  if (v1611) {
                                                                                                                                                                                                    uint64_t v1612 = *(void *)(v1611 + 24);
                                                                                                                                                                                                  }
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    uint64_t v1612 = 0;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  LOWORD(NullValue) = 257;
                                                                                                                                                                                                  v1613 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1612, v1611, (uint64_t *)v1644, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                                  LODWORD(__p) = 1;
                                                                                                                                                                                                  LOWORD(NullValue) = 257;
                                                                                                                                                                                                  v1614 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1647, v1613, (unsigned int *)&__p, 1, (uint64_t)&__src);
                                                                                                                                                                                                  v1615 = (unsigned __int8 *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[12];
                                                                                                                                                                                                  v1616 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType **)*v1614, 0);
                                                                                                                                                                                                  LOWORD(NullValue) = 257;
                                                                                                                                                                                                  v1617 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1615, v1616, (uint64_t)&__src);
                                                                                                                                                                                                  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v1647, (llvm::Type **)v1614, (uint64_t)v1617, 256, 0);
                                                                                                                                                                                                  LODWORD(__p) = 0;
                                                                                                                                                                                                  LOWORD(NullValue) = 257;
                                                                                                                                                                                                  v1618 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v1647, v1613, (unsigned int *)&__p, 1, (uint64_t)&__src);
                                                                                                                                                                                                  llvm::Value::doRAUW(v1633, (llvm::Value *)v1618, (llvm::Value *)1, v1619);
                                                                                                                                                                                                  ShuffleVector = 0;
                                                                                                                                                                                                  BOOL v7 = v1648;
                                                                                                                                                                                                  goto LABEL_1106;
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                              int v1605 = 11459;
                                                                                                                                                                                              goto LABEL_3316;
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                        int v1572 = *((unsigned __int8 *)v934 + 11);
                                                                                                                                                                                        uint64_t v1588 = 20;
                                                                                                                                                                                        if (v1572 == 122) {
                                                                                                                                                                                          uint64_t v1588 = 21;
                                                                                                                                                                                        }
                                                                                                                                                                                        int v1589 = *((unsigned __int8 *)v934 + v1588);
                                                                                                                                                                                        int v1591 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1633);
                                                                                                                                                                                        if ((_BYTE)v1590) {
                                                                                                                                                                                        if (v1591 == 128 && v1589 != 115)
                                                                                                                                                                                        }
                                                                                                                                                                                        {
                                                                                                                                                                                          int v1577 = 10924;
                                                                                                                                                                                          goto LABEL_3334;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1591 == 256 && v1589 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          int v1577 = 10925;
                                                                                                                                                                                          goto LABEL_3334;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1591 == 512 && v1589 != 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          int v1577 = 10926;
                                                                                                                                                                                          goto LABEL_3334;
                                                                                                                                                                                        }
                                                                                                                                                                                        BOOL v1620 = v1589 != 115;
                                                                                                                                                                                        if (v1591 == 128 && v1589 == 115)
                                                                                                                                                                                        {
                                                                                                                                                                                          int v1577 = 10927;
                                                                                                                                                                                          goto LABEL_3334;
                                                                                                                                                                                        }
                                                                                                                                                                                        if (v1591 != 256) {
                                                                                                                                                                                          BOOL v1620 = 1;
                                                                                                                                                                                        }
                                                                                                                                                                                        BOOL v1608 = !v1620;
                                                                                                                                                                                        int v1609 = 10928;
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                    if (v1608) {
                                                                                                                                                                                      int v1577 = v1609;
                                                                                                                                                                                    }
                                                                                                                                                                                    else {
                                                                                                                                                                                      int v1577 = v1609 + 1;
                                                                                                                                                                                    }
LABEL_3334:
                                                                                                                                                                                    v1621 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                                                                    v1644[0] = *v1621;
                                                                                                                                                                                    v1644[1] = v1621[4];
                                                                                                                                                                                    *(void *)&long long v1645 = v1621[8];
                                                                                                                                                                                    uint64_t v1622 = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56) + 40), v1577, 0, 0);
                                                                                                                                                                                    if (v1622) {
                                                                                                                                                                                      uint64_t v1623 = *(void *)(v1622 + 24);
                                                                                                                                                                                    }
                                                                                                                                                                                    else {
                                                                                                                                                                                      uint64_t v1623 = 0;
                                                                                                                                                                                    }
                                                                                                                                                                                    LOWORD(NullValue) = 257;
                                                                                                                                                                                    v1624 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1623, v1622, (uint64_t *)v1644, 3, (uint64_t)&__src, 0);
                                                                                                                                                                                    ShuffleVector = (llvm::Value *)v1624;
                                                                                                                                                                                    v1531 = v1633;
                                                                                                                                                                                    if (v1572 == 122)
                                                                                                                                                                                    {
                                                                                                                                                                                      uint64_t v1532 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1633, v1625);
                                                                                                                                                                                      goto LABEL_3088;
                                                                                                                                                                                    }
                                                                                                                                                                                    v1275 = (llvm::Value *)v1624;
                                                                                                                                                                                    uint64_t v1626 = *((_DWORD *)v1633 + 5) & 0x7FFFFFF;
                                                                                                                                                                                    uint64_t v1533 = -v1626;
                                                                                                                                                                                    v1535 = (char *)v1633 - 32 * v1626;
                                                                                                                                                                                    goto LABEL_3340;
                                                                                                                                                                                  }
                                                                                                                                                                                  v1543 = v1633;
                                                                                                                                                                                  v1544 = *(llvm::Type **)v1633;
                                                                                                                                                                                  int v1546 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v1633);
                                                                                                                                                                                  if ((_BYTE)v1545)
                                                                                                                                                                                  {
                                                                                                                                                                                    v1543 = v1633;
                                                                                                                                                                                    v1544 = *(llvm::Type **)v1633;
                                                                                                                                                                                  }
                                                                                                                                                                                  if ((*((_DWORD *)v1544 + 2) & 0xFE) == 0x12) {
                                                                                                                                                                                    v1544 = (llvm::Type *)**((void **)v1544 + 2);
                                                                                                                                                                                  }
                                                                                                                                                                                  int v1547 = llvm::Type::getPrimitiveSizeInBits(v1544);
                                                                                                                                                                                  if (v1546 == 128 && v1547 == 32)
                                                                                                                                                                                  {
                                                                                                                                                                                    int v1548 = 11154;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1546 == 256 && v1547 == 32)
                                                                                                                                                                                  {
                                                                                                                                                                                    int v1548 = 11155;
                                                                                                                                                                                  }
                                                                                                                                                                                  else if (v1547 == 64 && v1546 == 128)
                                                                                                                                                                                  {
                                                                                                                                                                                    int v1548 = 11152;
                                                                                                                                                                                  }
                                                                                                                                                                                  else
                                                                                                                                                                                  {
                                                                                                                                                                                    int v1548 = 11153;
                                                                                                                                                                                  }
                                                                                                                                                                                  v1579 = (llvm::hashing::detail::hash_state **)((char *)v1543 - 32 * (*((_DWORD *)v1543 + 5) & 0x7FFFFFF));
                                                                                                                                                                                  v1644[0] = *v1579;
                                                                                                                                                                                  v1644[1] = v1579[4];
                                                                                                                                                                                  v1580 = v1579[8];
                                                                                                                                                                                  LOWORD(NullValue) = 257;
                                                                                                                                                                                  *(void *)&long long v1645 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, v1580, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                                  uint64_t v1581 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)v1627 + 5), v1548, 0, 0);
                                                                                                                                                                                  uint64_t v1152 = v1581;
                                                                                                                                                                                  if (v1581) {
                                                                                                                                                                                    uint64_t v1153 = *(void *)(v1581 + 24);
                                                                                                                                                                                  }
                                                                                                                                                                                  else {
                                                                                                                                                                                    uint64_t v1153 = 0;
                                                                                                                                                                                  }
                                                                                                                                                                                  goto LABEL_2650;
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    int v1478 = *((unsigned __int8 *)v35 + 11);
                                                                                                                                                                    BOOL v1479 = v1478 == 51 || v1478 == 122;
                                                                                                                                                                    int v1480 = v1479;
                                                                                                                                                                    unint64_t v1481 = 12;
                                                                                                                                                                    if (v1479) {
                                                                                                                                                                      unint64_t v1481 = 13;
                                                                                                                                                                    }
                                                                                                                                                                    if (v107 < v1481) {
                                                                                                                                                                      unint64_t v1481 = v107;
                                                                                                                                                                    }
                                                                                                                                                                    v1482 = (char *)v35 + v1481;
                                                                                                                                                                    v1628 = (llvm::CallBase **)((char *)v35 + v1481);
                                                                                                                                                                    size_t v1629 = v107 - v1481;
                                                                                                                                                                    int v1483 = *((unsigned __int8 *)v35 + v1481 + 2);
                                                                                                                                                                    v1484 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                                                    v1485 = *(uint64_t **)v1484;
                                                                                                                                                                    v1486 = (uint64_t *)*((void *)v1484 + 4);
                                                                                                                                                                    v1487 = (uint64_t *)*((void *)v1484 + 8);
                                                                                                                                                                    if (v1483 == 110) {
                                                                                                                                                                      uint64_t v1488 = 4;
                                                                                                                                                                    }
                                                                                                                                                                    else {
                                                                                                                                                                      uint64_t v1488 = 3;
                                                                                                                                                                    }
                                                                                                                                                                    int v1489 = v1482[v1488];
                                                                                                                                                                    if (v1483 == 110 && v1480)
                                                                                                                                                                    {
                                                                                                                                                                      LOWORD(NullValue) = 257;
                                                                                                                                                                      v1485 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1485, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                    }
                                                                                                                                                                    else if (v1483 != 110)
                                                                                                                                                                    {
LABEL_2943:
                                                                                                                                                                      if (v1489 == 115)
                                                                                                                                                                      {
                                                                                                                                                                        LOWORD(NullValue) = 257;
                                                                                                                                                                        v1487 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1487, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                      }
                                                                                                                                                                      if (((llvm::CallBase::arg_end(v1633) - ((void)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0xA0) {
                                                                                                                                                                        goto LABEL_2950;
                                                                                                                                                                      }
                                                                                                                                                                      uint64_t v1491 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                                      if (*(unsigned char *)(v1491 + 16) != 16) {
                                                                                                                                                                        goto LABEL_2962;
                                                                                                                                                                      }
                                                                                                                                                                      v1492 = (void *)(v1491 + 24);
                                                                                                                                                                      if (*(_DWORD *)(v1491 + 32) >= 0x41u) {
                                                                                                                                                                        v1492 = (void *)*v1492;
                                                                                                                                                                      }
                                                                                                                                                                      if (*v1492 == 4)
                                                                                                                                                                      {
LABEL_2950:
                                                                                                                                                                        v1493 = *(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56) + 40);
                                                                                                                                                                        __src = (void *)*v1485;
                                                                                                                                                                        uint64_t v1494 = llvm::Intrinsic::getDeclaration(v1493, 142, (uint64_t)&__src, 1);
                                                                                                                                                                        uint64_t v1495 = v1494;
                                                                                                                                                                        if (v1494) {
                                                                                                                                                                          uint64_t v1496 = *(void *)(v1494 + 24);
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                          uint64_t v1496 = 0;
                                                                                                                                                                        }
                                                                                                                                                                        v1644[0] = (llvm::hashing::detail::hash_state *)v1485;
                                                                                                                                                                        v1644[1] = (llvm::hashing::detail::hash_state *)v1486;
                                                                                                                                                                        *(void *)&long long v1645 = v1487;
                                                                                                                                                                        LOWORD(NullValue) = 257;
                                                                                                                                                                        uint64_t v1509 = 3;
                                                                                                                                                                      }
                                                                                                                                                                      else
                                                                                                                                                                      {
LABEL_2962:
                                                                                                                                                                        if (*((unsigned char *)v1628 + v1629 - 5) == 115) {
                                                                                                                                                                          int v1499 = 10909;
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                          int v1499 = 10908;
                                                                                                                                                                        }
                                                                                                                                                                        uint64_t v1500 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)v1627 + 5), v1499, 0, 0);
                                                                                                                                                                        uint64_t v1495 = v1500;
                                                                                                                                                                        if (v1500) {
                                                                                                                                                                          uint64_t v1496 = *(void *)(v1500 + 24);
                                                                                                                                                                        }
                                                                                                                                                                        else {
                                                                                                                                                                          uint64_t v1496 = 0;
                                                                                                                                                                        }
                                                                                                                                                                        v1644[0] = (llvm::hashing::detail::hash_state *)v1485;
                                                                                                                                                                        v1644[1] = (llvm::hashing::detail::hash_state *)v1486;
                                                                                                                                                                        *(void *)&long long v1645 = v1487;
                                                                                                                                                                        *((void *)&v1645 + 1) = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                                        LOWORD(NullValue) = 257;
                                                                                                                                                                        uint64_t v1509 = 4;
                                                                                                                                                                      }
                                                                                                                                                                      v1275 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1496, v1495, (uint64_t *)v1644, v1509, (uint64_t)&__src, 0);
                                                                                                                                                                      ShuffleVector = v1275;
                                                                                                                                                                      v1531 = v1633;
                                                                                                                                                                      if (v1478 == 122)
                                                                                                                                                                      {
                                                                                                                                                                        uint64_t v1532 = llvm::Constant::getNullValue(*(llvm::Constant **)v1633, v1530);
LABEL_3088:
                                                                                                                                                                        v1278 = (llvm::Value *)v1532;
                                                                                                                                                                        v1531 = v1633;
                                                                                                                                                                        v1275 = ShuffleVector;
                                                                                                                                                                        uint64_t v1533 = -(uint64_t)(*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
LABEL_3341:
                                                                                                                                                                        v1277 = (unsigned __int8 *)*((void *)v1531 + 4 * v1533 + 12);
                                                                                                                                                                        goto LABEL_2561;
                                                                                                                                                                      }
                                                                                                                                                                      uint64_t v1534 = *((_DWORD *)v1633 + 5) & 0x7FFFFFF;
                                                                                                                                                                      uint64_t v1533 = -v1534;
                                                                                                                                                                      v1535 = (char *)v1633 - 32 * v1534;
                                                                                                                                                                      if (v1478 == 51)
                                                                                                                                                                      {
                                                                                                                                                                        v1278 = (llvm::Value *)*((void *)v1535 + 8);
                                                                                                                                                                        goto LABEL_3341;
                                                                                                                                                                      }
LABEL_3340:
                                                                                                                                                                      v1278 = *(llvm::Value **)v1535;
                                                                                                                                                                      goto LABEL_3341;
                                                                                                                                                                    }
                                                                                                                                                                    if (v1478 != 51 && v1478 != 122)
                                                                                                                                                                    {
                                                                                                                                                                      LOWORD(NullValue) = 257;
                                                                                                                                                                      v1486 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1486, (const llvm::Twine *)&__src, 0);
                                                                                                                                                                    }
                                                                                                                                                                    goto LABEL_2943;
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                              int v1426 = *((unsigned __int8 *)v35 + 11);
                                                                                                                                                              BOOL v1427 = v1426 == 51 || v1426 == 122;
                                                                                                                                                              int v1428 = v1427;
                                                                                                                                                              unint64_t v1429 = 12;
                                                                                                                                                              if (v1427) {
                                                                                                                                                                unint64_t v1429 = 13;
                                                                                                                                                              }
                                                                                                                                                              if (v107 < v1429) {
                                                                                                                                                                unint64_t v1429 = v107;
                                                                                                                                                              }
                                                                                                                                                              v1430 = (char *)v35 + v1429;
                                                                                                                                                              v1628 = (llvm::CallBase **)((char *)v35 + v1429);
                                                                                                                                                              size_t v1629 = v107 - v1429;
                                                                                                                                                              int v1431 = *((unsigned __int8 *)v35 + v1429 + 2);
                                                                                                                                                              v1432 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                                              v1433 = *(uint64_t **)v1432;
                                                                                                                                                              v1434 = (uint64_t *)*((void *)v1432 + 4);
                                                                                                                                                              v1435 = (uint64_t *)*((void *)v1432 + 8);
                                                                                                                                                              if (v1431 == 110) {
                                                                                                                                                                uint64_t v1436 = 4;
                                                                                                                                                              }
                                                                                                                                                              else {
                                                                                                                                                                uint64_t v1436 = 3;
                                                                                                                                                              }
                                                                                                                                                              int v1437 = v1430[v1436];
                                                                                                                                                              if (v1431 == 110 && v1428)
                                                                                                                                                              {
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                v1433 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1433, (const llvm::Twine *)&__src, 0);
                                                                                                                                                              }
                                                                                                                                                              else if (v1431 != 110)
                                                                                                                                                              {
                                                                                                                                                                goto LABEL_2856;
                                                                                                                                                              }
                                                                                                                                                              if (v1426 != 51 && v1426 != 122)
                                                                                                                                                              {
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                v1434 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1434, (const llvm::Twine *)&__src, 0);
                                                                                                                                                              }
LABEL_2856:
                                                                                                                                                              if (v1437 == 115)
                                                                                                                                                              {
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                v1435 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1435, (const llvm::Twine *)&__src, 0);
                                                                                                                                                              }
                                                                                                                                                              LOWORD(NullValue) = 257;
                                                                                                                                                              v1440 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1433, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
                                                                                                                                                              LOWORD(NullValue) = 257;
                                                                                                                                                              v1442 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1434, (const llvm::Twine *)&__src, v1441);
                                                                                                                                                              LOWORD(NullValue) = 257;
                                                                                                                                                              v1444 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1435, (const llvm::Twine *)&__src, v1443);
                                                                                                                                                              v1445 = v1444;
                                                                                                                                                              uint64_t v1446 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[16];
                                                                                                                                                              if (*(unsigned char *)(v1446 + 16) != 16) {
                                                                                                                                                                goto LABEL_2864;
                                                                                                                                                              }
                                                                                                                                                              v1447 = (void *)(v1446 + 24);
                                                                                                                                                              if (*(_DWORD *)(v1446 + 32) >= 0x41u) {
                                                                                                                                                                v1447 = (void *)*v1447;
                                                                                                                                                              }
                                                                                                                                                              if (*v1447 == 4)
                                                                                                                                                              {
                                                                                                                                                                v1448 = *(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56) + 40);
                                                                                                                                                                __src = (void *)*v1440;
                                                                                                                                                                uint64_t v1449 = llvm::Intrinsic::getDeclaration(v1448, 142, (uint64_t)&__src, 1);
                                                                                                                                                                uint64_t v1450 = v1449;
                                                                                                                                                                if (v1449) {
                                                                                                                                                                  uint64_t v1451 = *(void *)(v1449 + 24);
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                  uint64_t v1451 = 0;
                                                                                                                                                                }
                                                                                                                                                                v1644[0] = (llvm::hashing::detail::hash_state *)v1440;
                                                                                                                                                                v1644[1] = (llvm::hashing::detail::hash_state *)v1442;
                                                                                                                                                                *(void *)&long long v1645 = v1445;
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                uint64_t v1490 = 3;
                                                                                                                                                              }
                                                                                                                                                              else
                                                                                                                                                              {
LABEL_2864:
                                                                                                                                                                v1644[0] = (llvm::hashing::detail::hash_state *)v1440;
                                                                                                                                                                v1644[1] = (llvm::hashing::detail::hash_state *)v1442;
                                                                                                                                                                *(void *)&long long v1645 = v1444;
                                                                                                                                                                *((void *)&v1645 + 1) = v1446;
                                                                                                                                                                if (*((unsigned char *)v1628 + v1629 - 1) == 100) {
                                                                                                                                                                  int v1452 = 10907;
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                  int v1452 = 10906;
                                                                                                                                                                }
                                                                                                                                                                uint64_t v1453 = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56) + 40), v1452, 0, 0);
                                                                                                                                                                uint64_t v1450 = v1453;
                                                                                                                                                                if (v1453) {
                                                                                                                                                                  uint64_t v1451 = *(void *)(v1453 + 24);
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                  uint64_t v1451 = 0;
                                                                                                                                                                }
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                uint64_t v1490 = 4;
                                                                                                                                                              }
                                                                                                                                                              v1510 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1451, v1450, (uint64_t *)v1644, v1490, (uint64_t)&__src, 0);
                                                                                                                                                              ShuffleVector = (llvm::Value *)v1510;
                                                                                                                                                              if (v1426 == 122)
                                                                                                                                                              {
                                                                                                                                                                v1512 = (uint64_t *)llvm::Constant::getNullValue((llvm::Constant *)*v1510, v1511);
                                                                                                                                                              }
                                                                                                                                                              else
                                                                                                                                                              {
                                                                                                                                                                if (v1426 == 51) {
                                                                                                                                                                  v1513 = (const llvm::Twine *)v1445;
                                                                                                                                                                }
                                                                                                                                                                else {
                                                                                                                                                                  v1513 = (const llvm::Twine *)v1440;
                                                                                                                                                                }
                                                                                                                                                                if (v1437 != 115 || v1426 != 51) {
                                                                                                                                                                  goto LABEL_3046;
                                                                                                                                                                }
                                                                                                                                                                v1514 = (llvm::Value *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
                                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                                v1512 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v1514, (const llvm::Twine *)&__src, v1513);
                                                                                                                                                              }
                                                                                                                                                              v1513 = (const llvm::Twine *)v1512;
LABEL_3046:
                                                                                                                                                              v971 = (llvm::Value *)EmitX86ScalarSelect((llvm::IRBuilderBase *)v1647, ((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[12], ShuffleVector, v1513);
                                                                                                                                                              ShuffleVector = v971;
                                                                                                                                                              v972 = (llvm::Value *)*((void *)v1633 + 8 * (unint64_t)(v1426 == 51) + -4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                                              LOWORD(NullValue) = 257;
LABEL_2061:
                                                                                                                                                              InsertElement = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1647, v972, v971, (const llvm::Twine *)&__src, v970);
                                                                                                                                                              goto LABEL_1586;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          int v1361 = *((unsigned __int8 *)v35 + 6);
                                                                                                                                                          uint64_t v1362 = 7;
                                                                                                                                                          if (v1361 == 110) {
                                                                                                                                                            uint64_t v1362 = 8;
                                                                                                                                                          }
                                                                                                                                                          uint64_t v1363 = 11;
                                                                                                                                                          if (v1361 == 110) {
                                                                                                                                                            uint64_t v1363 = 12;
                                                                                                                                                          }
                                                                                                                                                          int v1364 = *((unsigned __int8 *)v35 + v1363);
                                                                                                                                                          int v1365 = *((unsigned __int8 *)v35 + v1362);
                                                                                                                                                          v1366 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                                          v1367 = *(llvm::Value **)v1366;
                                                                                                                                                          v1644[0] = *(llvm::hashing::detail::hash_state **)v1366;
                                                                                                                                                          v1368 = (llvm::hashing::detail::hash_state *)*((void *)v1366 + 4);
                                                                                                                                                          v1644[1] = v1368;
                                                                                                                                                          v1369 = (uint64_t *)*((void *)v1366 + 8);
                                                                                                                                                          *(void *)&long long v1645 = v1369;
                                                                                                                                                          if (v1364 == 115)
                                                                                                                                                          {
                                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                                            v1367 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v1367, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
                                                                                                                                                            v1644[0] = v1367;
                                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                                            v1371 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v1368, (const llvm::Twine *)&__src, v1370);
                                                                                                                                                            v1644[1] = (llvm::hashing::detail::hash_state *)v1371;
                                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                                            v1369 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1369, (const llvm::Twine *)&__src, v1372);
                                                                                                                                                            *(void *)&long long v1645 = v1369;
                                                                                                                                                            if (v1361 == 110)
                                                                                                                                                            {
                                                                                                                                                              LOWORD(NullValue) = 257;
                                                                                                                                                              v1644[1] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1371, (const llvm::Twine *)&__src, 0);
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          else if (v1361 == 110)
                                                                                                                                                          {
                                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                                            v1367 = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, v1367, (const llvm::Twine *)&__src, 0);
                                                                                                                                                            v1644[0] = v1367;
                                                                                                                                                          }
                                                                                                                                                          if (v1365 == 115)
                                                                                                                                                          {
                                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                                            *(void *)&long long v1645 = llvm::IRBuilderBase::CreateFNeg((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1369, (const llvm::Twine *)&__src, 0);
                                                                                                                                                          }
                                                                                                                                                          v1387 = *(uint64_t ***)(*(void *)(*((void *)v1633 + 5) + 56) + 40);
                                                                                                                                                          std::string __p = *(void **)v1367;
                                                                                                                                                          uint64_t v1388 = llvm::Intrinsic::getDeclaration(v1387, 142, (uint64_t)&__p, 1);
                                                                                                                                                          if (v1388) {
                                                                                                                                                            uint64_t v1389 = *(void *)(v1388 + 24);
                                                                                                                                                          }
                                                                                                                                                          else {
                                                                                                                                                            uint64_t v1389 = 0;
                                                                                                                                                          }
                                                                                                                                                          LOWORD(NullValue) = 257;
                                                                                                                                                          v1416 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1389, v1388, (uint64_t *)v1644, 3, (uint64_t)&__src, 0);
                                                                                                                                                          ShuffleVector = (llvm::Value *)v1416;
                                                                                                                                                          if (v1364 == 115)
                                                                                                                                                          {
                                                                                                                                                            v1418 = (llvm::Value *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                                            LOWORD(NullValue) = 257;
                                                                                                                                                            ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1647, v1418, (llvm::Value *)v1416, (const llvm::Twine *)&__src, v1417);
                                                                                                                                                          }
LABEL_2198:
                                                                                                                                                          BOOL v7 = v1648;
                                                                                                                                                          goto LABEL_1364;
                                                                                                                                                        }
                                                                                                                                                        int v1344 = *((unsigned __int8 *)v35 + 16);
                                                                                                                                                        if (v1344 == 105)
                                                                                                                                                        {
                                                                                                                                                          int v1345 = *((unsigned __int8 *)v35 + 18);
                                                                                                                                                          if (*((unsigned char *)v35 + 17) == 46)
                                                                                                                                                          {
                                                                                                                                                            BOOL v1346 = 0;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            BOOL v1346 = 0;
                                                                                                                                                            uint64_t v1497 = 19;
                                                                                                                                                            if (v1345 != 46) {
                                                                                                                                                              uint64_t v1497 = 20;
                                                                                                                                                            }
                                                                                                                                                            int v1345 = *((unsigned __int8 *)v35 + v1497);
                                                                                                                                                          }
                                                                                                                                                          BOOL v1457 = 1;
                                                                                                                                                          goto LABEL_3099;
                                                                                                                                                        }
                                                                                                                                                        BOOL v1457 = v107 >= 0x13 && *((unsigned __int8 *)v35 + 18) == 105;
                                                                                                                                                        BOOL v1346 = v1344 == 118;
                                                                                                                                                        int v1498 = *((unsigned __int8 *)v35 + 17);
                                                                                                                                                        if (v1344 == 46)
                                                                                                                                                        {
                                                                                                                                                          int v1345 = *((unsigned __int8 *)v35 + 17);
                                                                                                                                                          goto LABEL_3099;
                                                                                                                                                        }
                                                                                                                                                        int v1345 = *((unsigned __int8 *)v35 + 18);
                                                                                                                                                        if (v1498 == 46)
                                                                                                                                                        {
LABEL_3099:
                                                                                                                                                          if (*(_DWORD *)((char *)v35 + v107 - 4) == 942813486)
                                                                                                                                                          {
                                                                                                                                                            if (v1345 == 113)
                                                                                                                                                            {
                                                                                                                                                              if (v1346) {
                                                                                                                                                                int v1502 = 10815;
                                                                                                                                                              }
                                                                                                                                                              else {
                                                                                                                                                                int v1502 = 10805;
                                                                                                                                                              }
                                                                                                                                                              BOOL v1503 = !v1457;
                                                                                                                                                              int v1504 = 10810;
                                                                                                                                                              goto LABEL_3127;
                                                                                                                                                            }
                                                                                                                                                            BOOL v1505 = !v1457;
                                                                                                                                                            if (v1345 == 100)
                                                                                                                                                            {
                                                                                                                                                              int v1506 = 11366;
                                                                                                                                                              int v1507 = 11368;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              int v1506 = 11367;
                                                                                                                                                              int v1507 = 11369;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          else if (*(_DWORD *)((char *)v35 + v107 - 4) == 909455918)
                                                                                                                                                          {
                                                                                                                                                            if (v1345 == 113)
                                                                                                                                                            {
                                                                                                                                                              if (v1346) {
                                                                                                                                                                int v1502 = 10816;
                                                                                                                                                              }
                                                                                                                                                              else {
                                                                                                                                                                int v1502 = 10806;
                                                                                                                                                              }
                                                                                                                                                              BOOL v1503 = !v1457;
                                                                                                                                                              int v1504 = 10811;
                                                                                                                                                              goto LABEL_3127;
                                                                                                                                                            }
                                                                                                                                                            BOOL v1505 = !v1457;
                                                                                                                                                            if (v1345 == 100)
                                                                                                                                                            {
                                                                                                                                                              int v1506 = 10353;
                                                                                                                                                              int v1507 = 10355;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              int v1506 = 10354;
                                                                                                                                                              int v1507 = 10356;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            if (v1345 == 113)
                                                                                                                                                            {
                                                                                                                                                              if (v1346) {
                                                                                                                                                                int v1502 = 10817;
                                                                                                                                                              }
                                                                                                                                                              else {
                                                                                                                                                                int v1502 = 10807;
                                                                                                                                                              }
                                                                                                                                                              BOOL v1503 = !v1457;
                                                                                                                                                              int v1504 = 10812;
                                                                                                                                                              goto LABEL_3127;
                                                                                                                                                            }
                                                                                                                                                            if (v1345 == 100)
                                                                                                                                                            {
                                                                                                                                                              if (v1346) {
                                                                                                                                                                int v1502 = 10814;
                                                                                                                                                              }
                                                                                                                                                              else {
                                                                                                                                                                int v1502 = 10804;
                                                                                                                                                              }
                                                                                                                                                              BOOL v1503 = !v1457;
                                                                                                                                                              int v1504 = 10809;
LABEL_3127:
                                                                                                                                                              if (v1503) {
                                                                                                                                                                int v1501 = v1502;
                                                                                                                                                              }
                                                                                                                                                              else {
                                                                                                                                                                int v1501 = v1504;
                                                                                                                                                              }
                                                                                                                                                              goto LABEL_3134;
                                                                                                                                                            }
                                                                                                                                                            BOOL v1505 = !v1457;
                                                                                                                                                            int v1506 = 10808;
                                                                                                                                                            int v1507 = 10813;
                                                                                                                                                          }
LABEL_3131:
                                                                                                                                                          if (v1505) {
                                                                                                                                                            int v1501 = v1506;
                                                                                                                                                          }
                                                                                                                                                          else {
                                                                                                                                                            int v1501 = v1507;
                                                                                                                                                          }
                                                                                                                                                          goto LABEL_3134;
                                                                                                                                                        }
                                                                                                                                                        if (v1345 == 46) {
                                                                                                                                                          int v1345 = *((unsigned __int8 *)v35 + 19);
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                          int v1345 = *((unsigned __int8 *)v35 + 20);
                                                                                                                                                        }
                                                                                                                                                        if (v1344 != 118)
                                                                                                                                                        {
                                                                                                                                                          BOOL v1346 = 0;
                                                                                                                                                          goto LABEL_3099;
                                                                                                                                                        }
                                                                                                                                                        if (v1345 == 104)
                                                                                                                                                        {
                                                                                                                                                          if (v1498 == 49)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10819;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                          if (v1498 == 56)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10818;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        else if (v1345 == 115)
                                                                                                                                                        {
                                                                                                                                                          if (v1498 == 52)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10357;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                          if (v1498 == 56)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10358;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        int v1501 = 10820;
                                                                                                                                                        goto LABEL_3134;
                                                                                                                                                      }
                                                                                                                                                      int v1378 = *((unsigned __int8 *)v35 + 16);
                                                                                                                                                      if (v1378 == 105)
                                                                                                                                                      {
                                                                                                                                                        int v1379 = *((unsigned __int8 *)v35 + 18);
                                                                                                                                                        if (*((unsigned char *)v35 + 17) == 46)
                                                                                                                                                        {
                                                                                                                                                          BOOL v1380 = 0;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          BOOL v1380 = 0;
                                                                                                                                                          uint64_t v1468 = 19;
                                                                                                                                                          if (v1379 != 46) {
                                                                                                                                                            uint64_t v1468 = 20;
                                                                                                                                                          }
                                                                                                                                                          int v1379 = *((unsigned __int8 *)v35 + v1468);
                                                                                                                                                        }
                                                                                                                                                        BOOL v1419 = 1;
                                                                                                                                                        goto LABEL_3012;
                                                                                                                                                      }
                                                                                                                                                      BOOL v1419 = v107 >= 0x13 && *((unsigned __int8 *)v35 + 18) == 105;
                                                                                                                                                      BOOL v1380 = v1378 == 118;
                                                                                                                                                      int v1469 = *((unsigned __int8 *)v35 + 17);
                                                                                                                                                      if (v1378 == 46)
                                                                                                                                                      {
                                                                                                                                                        int v1379 = *((unsigned __int8 *)v35 + 17);
                                                                                                                                                        goto LABEL_3012;
                                                                                                                                                      }
                                                                                                                                                      int v1379 = *((unsigned __int8 *)v35 + 18);
                                                                                                                                                      if (v1469 == 46)
                                                                                                                                                      {
LABEL_3012:
                                                                                                                                                        if (*(_DWORD *)((char *)v35 + v107 - 4) == 942813486)
                                                                                                                                                        {
                                                                                                                                                          if (v1379 == 113)
                                                                                                                                                          {
                                                                                                                                                            BOOL v1505 = !v1419;
                                                                                                                                                            int v1506 = 11371;
                                                                                                                                                            int v1507 = 11374;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            BOOL v1505 = !v1419;
                                                                                                                                                            if (v1379 == 100)
                                                                                                                                                            {
                                                                                                                                                              int v1506 = 11370;
                                                                                                                                                              int v1507 = 11373;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              int v1506 = 11372;
                                                                                                                                                              int v1507 = 11375;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        else if (*(_DWORD *)((char *)v35 + v107 - 4) == 909455918)
                                                                                                                                                        {
                                                                                                                                                          if (v1379 == 113)
                                                                                                                                                          {
                                                                                                                                                            BOOL v1505 = !v1419;
                                                                                                                                                            int v1506 = 10360;
                                                                                                                                                            int v1507 = 10363;
                                                                                                                                                          }
                                                                                                                                                          else
                                                                                                                                                          {
                                                                                                                                                            BOOL v1505 = !v1419;
                                                                                                                                                            if (v1379 == 100)
                                                                                                                                                            {
                                                                                                                                                              int v1506 = 10359;
                                                                                                                                                              int v1507 = 10362;
                                                                                                                                                            }
                                                                                                                                                            else
                                                                                                                                                            {
                                                                                                                                                              int v1506 = 10361;
                                                                                                                                                              int v1507 = 10364;
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          if (v1379 == 113)
                                                                                                                                                          {
                                                                                                                                                            if (v1380) {
                                                                                                                                                              int v1502 = 10828;
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                              int v1502 = 10822;
                                                                                                                                                            }
                                                                                                                                                            BOOL v1503 = !v1419;
                                                                                                                                                            int v1504 = 10825;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          if (v1379 == 100)
                                                                                                                                                          {
                                                                                                                                                            if (v1380) {
                                                                                                                                                              int v1502 = 10827;
                                                                                                                                                            }
                                                                                                                                                            else {
                                                                                                                                                              int v1502 = 10821;
                                                                                                                                                            }
                                                                                                                                                            BOOL v1503 = !v1419;
                                                                                                                                                            int v1504 = 10824;
                                                                                                                                                            goto LABEL_3127;
                                                                                                                                                          }
                                                                                                                                                          BOOL v1505 = !v1419;
                                                                                                                                                          int v1506 = 10823;
                                                                                                                                                          int v1507 = 10826;
                                                                                                                                                        }
                                                                                                                                                        goto LABEL_3131;
                                                                                                                                                      }
                                                                                                                                                      if (v1379 == 46) {
                                                                                                                                                        int v1379 = *((unsigned __int8 *)v35 + 19);
                                                                                                                                                      }
                                                                                                                                                      else {
                                                                                                                                                        int v1379 = *((unsigned __int8 *)v35 + 20);
                                                                                                                                                      }
                                                                                                                                                      if (v1378 != 118)
                                                                                                                                                      {
                                                                                                                                                        BOOL v1380 = 0;
                                                                                                                                                        goto LABEL_3012;
                                                                                                                                                      }
                                                                                                                                                      switch(v1379)
                                                                                                                                                      {
                                                                                                                                                        case 's':
                                                                                                                                                          if (v1469 == 52)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10365;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                          if (v1469 == 56)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10366;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                          break;
                                                                                                                                                        case 'h':
                                                                                                                                                          if (v1469 == 49)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10830;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                          if (v1469 == 56)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10829;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                          break;
                                                                                                                                                        case 'd':
                                                                                                                                                          if (v1469 == 50)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10367;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                          if (v1469 == 52)
                                                                                                                                                          {
                                                                                                                                                            int v1501 = 10368;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                          break;
                                                                                                                                                      }
                                                                                                                                                      int v1501 = 10831;
                                                                                                                                                      goto LABEL_3134;
                                                                                                                                                    }
                                                                                                                                                    int v1358 = *((unsigned __int8 *)v35 + 16);
                                                                                                                                                    if (v1358 == 105)
                                                                                                                                                    {
                                                                                                                                                      int v1359 = *((unsigned __int8 *)v35 + 18);
                                                                                                                                                      if (*((unsigned char *)v35 + 17) == 46)
                                                                                                                                                      {
                                                                                                                                                        BOOL v1360 = 0;
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        BOOL v1360 = 0;
                                                                                                                                                        uint64_t v1438 = 19;
                                                                                                                                                        if (v1359 != 46) {
                                                                                                                                                          uint64_t v1438 = 20;
                                                                                                                                                        }
                                                                                                                                                        int v1359 = *((unsigned __int8 *)v35 + v1438);
                                                                                                                                                      }
                                                                                                                                                      BOOL v1385 = 1;
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                      BOOL v1385 = v107 >= 0x13 && *((unsigned __int8 *)v35 + 18) == 105;
                                                                                                                                                      BOOL v1360 = v1358 == 118;
                                                                                                                                                      int v1439 = *((unsigned __int8 *)v35 + 17);
                                                                                                                                                      if (v1358 == 46)
                                                                                                                                                      {
                                                                                                                                                        int v1359 = *((unsigned __int8 *)v35 + 17);
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        int v1359 = *((unsigned __int8 *)v35 + 18);
                                                                                                                                                        if (v1439 != 46)
                                                                                                                                                        {
                                                                                                                                                          if (v1359 == 46) {
                                                                                                                                                            int v1359 = *((unsigned __int8 *)v35 + 19);
                                                                                                                                                          }
                                                                                                                                                          else {
                                                                                                                                                            int v1359 = *((unsigned __int8 *)v35 + 20);
                                                                                                                                                          }
                                                                                                                                                          if (v1358 == 118)
                                                                                                                                                          {
                                                                                                                                                            switch(v1359)
                                                                                                                                                            {
                                                                                                                                                              case 's':
                                                                                                                                                                if (v1439 == 52)
                                                                                                                                                                {
                                                                                                                                                                  int v1501 = 10349;
                                                                                                                                                                  goto LABEL_3134;
                                                                                                                                                                }
                                                                                                                                                                if (v1439 == 56)
                                                                                                                                                                {
                                                                                                                                                                  int v1501 = 10350;
                                                                                                                                                                  goto LABEL_3134;
                                                                                                                                                                }
                                                                                                                                                                break;
                                                                                                                                                              case 'h':
                                                                                                                                                                if (v1439 == 49)
                                                                                                                                                                {
                                                                                                                                                                  int v1501 = 10802;
                                                                                                                                                                  goto LABEL_3134;
                                                                                                                                                                }
                                                                                                                                                                if (v1439 == 56)
                                                                                                                                                                {
                                                                                                                                                                  int v1501 = 10801;
                                                                                                                                                                  goto LABEL_3134;
                                                                                                                                                                }
                                                                                                                                                                break;
                                                                                                                                                              case 'd':
                                                                                                                                                                if (v1439 == 50)
                                                                                                                                                                {
                                                                                                                                                                  int v1501 = 10351;
                                                                                                                                                                  goto LABEL_3134;
                                                                                                                                                                }
                                                                                                                                                                if (v1439 == 52)
                                                                                                                                                                {
                                                                                                                                                                  int v1501 = 10352;
LABEL_3134:
                                                                                                                                                                  InsertElement = UpgradeX86MaskedShift((llvm::IRBuilderBase *)v1647, (uint64_t)v1633, v1501);
                                                                                                                                                                  goto LABEL_1586;
                                                                                                                                                                }
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                            int v1501 = 10803;
                                                                                                                                                            goto LABEL_3134;
                                                                                                                                                          }
                                                                                                                                                          BOOL v1360 = 0;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    if (*(_DWORD *)((char *)v35 + v107 - 4) == 942813486)
                                                                                                                                                    {
                                                                                                                                                      if (v1359 == 113)
                                                                                                                                                      {
                                                                                                                                                        BOOL v1505 = !v1385;
                                                                                                                                                        int v1506 = 11361;
                                                                                                                                                        int v1507 = 11364;
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        BOOL v1505 = !v1385;
                                                                                                                                                        if (v1359 == 100)
                                                                                                                                                        {
                                                                                                                                                          int v1506 = 11360;
                                                                                                                                                          int v1507 = 11363;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          int v1506 = 11362;
                                                                                                                                                          int v1507 = 11365;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    else if (*(_DWORD *)((char *)v35 + v107 - 4) == 909455918)
                                                                                                                                                    {
                                                                                                                                                      if (v1359 == 113)
                                                                                                                                                      {
                                                                                                                                                        BOOL v1505 = !v1385;
                                                                                                                                                        int v1506 = 10344;
                                                                                                                                                        int v1507 = 10347;
                                                                                                                                                      }
                                                                                                                                                      else
                                                                                                                                                      {
                                                                                                                                                        BOOL v1505 = !v1385;
                                                                                                                                                        if (v1359 == 100)
                                                                                                                                                        {
                                                                                                                                                          int v1506 = 10343;
                                                                                                                                                          int v1507 = 10346;
                                                                                                                                                        }
                                                                                                                                                        else
                                                                                                                                                        {
                                                                                                                                                          int v1506 = 10345;
                                                                                                                                                          int v1507 = 10348;
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                      if (v1359 == 113)
                                                                                                                                                      {
                                                                                                                                                        if (v1360) {
                                                                                                                                                          int v1502 = 10800;
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                          int v1502 = 10794;
                                                                                                                                                        }
                                                                                                                                                        BOOL v1503 = !v1385;
                                                                                                                                                        int v1504 = 10797;
                                                                                                                                                        goto LABEL_3127;
                                                                                                                                                      }
                                                                                                                                                      if (v1359 == 100)
                                                                                                                                                      {
                                                                                                                                                        if (v1360) {
                                                                                                                                                          int v1502 = 10799;
                                                                                                                                                        }
                                                                                                                                                        else {
                                                                                                                                                          int v1502 = 10793;
                                                                                                                                                        }
                                                                                                                                                        BOOL v1503 = !v1385;
                                                                                                                                                        int v1504 = 10796;
                                                                                                                                                        goto LABEL_3127;
                                                                                                                                                      }
                                                                                                                                                      BOOL v1505 = !v1385;
                                                                                                                                                      int v1506 = 10795;
                                                                                                                                                      int v1507 = 10798;
                                                                                                                                                    }
                                                                                                                                                    goto LABEL_3131;
                                                                                                                                                  }
                                                                                                                                                  int v1301 = llvm::UpgradeIntrinsicCall(llvm::CallBase *,llvm::Function *)::MinMaxTbl[2 * (*((unsigned char *)v35 + 13) == 105) + (*((unsigned char *)v35 + 17) == 100)];
                                                                                                                                                  goto LABEL_2873;
                                                                                                                                                }
                                                                                                                                                if (*(_DWORD *)((char *)v35 + v107 - 4) != 842085678)
                                                                                                                                                {
                                                                                                                                                  v1381 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                                  v1382 = *(llvm::Value **)v1381;
                                                                                                                                                  v1383 = (llvm::Value *)*((void *)v1381 + 4);
                                                                                                                                                  LOWORD(NullValue) = 257;
                                                                                                                                                  Add = llvm::IRBuilderBase::CreateFSub((llvm::IRBuilderBase *)v1647, v1382, v1383, (const llvm::Twine *)&__src, 0);
                                                                                                                                                  goto LABEL_2560;
                                                                                                                                                }
                                                                                                                                                BOOL v1376 = *((unsigned char *)v35 + 17) == 115;
                                                                                                                                                int v1377 = 10893;
LABEL_2870:
                                                                                                                                                if (v1376) {
                                                                                                                                                  int v1301 = v1377 + 1;
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                  int v1301 = v1377;
                                                                                                                                                }
LABEL_2873:
                                                                                                                                                uint64_t v1454 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)v1627 + 5), v1301, 0, 0);
                                                                                                                                                if (v1454) {
                                                                                                                                                  uint64_t v1455 = *(void *)(v1454 + 24);
                                                                                                                                                }
                                                                                                                                                else {
                                                                                                                                                  uint64_t v1455 = 0;
                                                                                                                                                }
                                                                                                                                                v1456 = (llvm::hashing::detail::hash_state **)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                                v1644[0] = *v1456;
                                                                                                                                                v1644[1] = v1456[4];
                                                                                                                                                *(void *)&long long v1645 = v1456[16];
                                                                                                                                                LOWORD(NullValue) = 257;
                                                                                                                                                Add = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1455, v1454, (uint64_t *)v1644, 3, (uint64_t)&__src, 0);
                                                                                                                                                goto LABEL_2560;
                                                                                                                                              }
                                                                                                                                              if (*(_DWORD *)((char *)v35 + v107 - 4) == 842085678)
                                                                                                                                              {
                                                                                                                                                BOOL v1376 = *((unsigned char *)v35 + 17) == 115;
                                                                                                                                                int v1377 = 10763;
                                                                                                                                                goto LABEL_2870;
                                                                                                                                              }
                                                                                                                                              v1373 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                              v1374 = *(llvm::Value **)v1373;
                                                                                                                                              v1375 = (llvm::Value *)*((void *)v1373 + 4);
                                                                                                                                              LOWORD(NullValue) = 257;
                                                                                                                                              Add = llvm::IRBuilderBase::CreateFMul((llvm::IRBuilderBase *)v1647, v1374, v1375, (const llvm::Twine *)&__src, 0);
                                                                                                                                            }
                                                                                                                                          }
LABEL_2560:
                                                                                                                                          v1275 = (llvm::Value *)Add;
                                                                                                                                          ShuffleVector = (llvm::Value *)Add;
                                                                                                                                          v1276 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                                          v1277 = (unsigned __int8 *)*((void *)v1276 + 12);
                                                                                                                                          v1278 = (llvm::Value *)*((void *)v1276 + 8);
LABEL_2561:
                                                                                                                                          InsertElement = EmitX86Select((llvm::IRBuilderBase *)v1647, v1277, v1275, v1278);
                                                                                                                                          goto LABEL_1586;
                                                                                                                                        }
                                                                                                                                        goto LABEL_2558;
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    v1212 = *(llvm::Type **)v1633;
                                                                                                                                    llvm::VectorType::getInteger(*(void *)v1633);
                                                                                                                                    v1248 = v1247;
                                                                                                                                    v1249 = (unsigned __int8 *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                                    LOWORD(NullValue) = 257;
                                                                                                                                    v1250 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1249, v1247, (uint64_t)&__src);
                                                                                                                                    v1251 = (unsigned __int8 *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                                                                                                    __int16 v1646 = 257;
                                                                                                                                    v1252 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1251, v1248, (uint64_t)v1644);
                                                                                                                                    __int16 v1638 = 257;
                                                                                                                                    Xor = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1250, (llvm::Value *)v1252, (const llvm::Twine *)&__p);
LABEL_2559:
                                                                                                                                    ShuffleVector = (llvm::Value *)Xor;
                                                                                                                                    LOWORD(NullValue) = 257;
                                                                                                                                    Add = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, (unsigned __int8 *)Xor, v1212, (uint64_t)&__src);
                                                                                                                                    goto LABEL_2560;
                                                                                                                                  }
                                                                                                                                  goto LABEL_2523;
                                                                                                                                }
                                                                                                                              }
                                                                                                                              v1212 = *(llvm::Type **)v1633;
                                                                                                                              llvm::VectorType::getInteger(*(void *)v1633);
                                                                                                                              v1214 = v1213;
                                                                                                                              v1215 = (unsigned __int8 *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                              LOWORD(NullValue) = 257;
                                                                                                                              v1216 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1215, v1213, (uint64_t)&__src);
                                                                                                                              v1217 = (unsigned __int8 *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                                                                                              __int16 v1646 = 257;
                                                                                                                              v1218 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1217, v1214, (uint64_t)v1644);
                                                                                                                              __int16 v1638 = 257;
                                                                                                                              v1219 = (const llvm::Twine *)&__p;
LABEL_2524:
                                                                                                                              Xor = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1216, (llvm::Value *)v1218, v1219);
                                                                                                                              goto LABEL_2559;
                                                                                                                            }
                                                                                                                          }
                                                                                                                          v1131 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                          v1132 = *(void **)v1131;
                                                                                                                          uint64_t v1133 = *((void *)v1131 + 4);
                                                                                                                          v1134 = *(llvm::Type **)v1633;
                                                                                                                          unint64_t v1135 = *(int *)(*(void *)v1633 + 32);
                                                                                                                          uint64_t v1136 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                                          if ((*(_DWORD *)(*(void *)v1633 + 8) & 0xFE) == 0x12) {
                                                                                                                            v1134 = (llvm::Type *)**((void **)v1134 + 2);
                                                                                                                          }
                                                                                                                          unsigned int v1137 = llvm::Type::getPrimitiveSizeInBits(v1134);
                                                                                                                          __src = &v1641;
                                                                                                                          uint64_t v1640 = 0x4000000000;
                                                                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1135);
                                                                                                                          v1138 = (int *)__src;
                                                                                                                          if (v1136)
                                                                                                                          {
                                                                                                                            uint64_t v1139 = 0;
                                                                                                                            uint64_t v1140 = 0x80 / v1137;
                                                                                                                            uint64x2_t v1141 = (uint64x2_t)vdupq_n_s64(v1140 - 1);
                                                                                                                            int64x2_t v1142 = vdupq_n_s64(2uLL);
                                                                                                                            do
                                                                                                                            {
                                                                                                                              if (v1137 <= 0x80)
                                                                                                                              {
                                                                                                                                uint64_t v1143 = 0;
                                                                                                                                int v1144 = (v1140 >> 1) + v1139;
                                                                                                                                int64x2_t v1145 = (int64x2_t)xmmword_261E8D440;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                  int32x2_t v1146 = vmovn_s64((int64x2_t)vcgeq_u64(v1141, (uint64x2_t)v1145));
                                                                                                                                  if (v1146.i8[0]) {
                                                                                                                                    v1138[v1143 + v1139] = v1144 + (v1143 >> 1);
                                                                                                                                  }
                                                                                                                                  if (v1146.i8[4]) {
                                                                                                                                    v1138[(v1143 | 1) + v1139] = v1144 + (v1143 >> 1) + v1135;
                                                                                                                                  }
                                                                                                                                  v1143 += 2;
                                                                                                                                  int64x2_t v1145 = vaddq_s64(v1145, v1142);
                                                                                                                                }
                                                                                                                                while ((((_WORD)v1140 + 1) & 0x1FE) != v1143);
                                                                                                                              }
                                                                                                                              v1139 += v1140;
                                                                                                                            }
                                                                                                                            while (v1139 != v1136);
                                                                                                                          }
                                                                                                                        }
                                                                                                                        __int16 v1646 = 257;
                                                                                                                        v1174 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v1132, v1133, v1138, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                                                        ShuffleVector = (llvm::Value *)v1174;
                                                                                                                        v1209 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                        v1176 = (unsigned __int8 *)*((void *)v1209 + 12);
                                                                                                                        v1177 = (llvm::Value *)*((void *)v1209 + 8);
                                                                                                                        goto LABEL_2504;
                                                                                                                      }
                                                                                                                    }
                                                                                                                    v1118 = *(llvm::Type **)v1633;
                                                                                                                    unint64_t v1119 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                                    if ((*(_DWORD *)(*(void *)v1633 + 8) & 0xFE) == 0x12) {
                                                                                                                      v1118 = (llvm::Type *)**((void **)v1118 + 2);
                                                                                                                    }
                                                                                                                    v1120 = (void *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                                                    unsigned int v1121 = llvm::Type::getPrimitiveSizeInBits(v1118);
                                                                                                                    if (v854)
                                                                                                                    {
                                                                                                                      BOOL v1122 = 0;
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                      unint64_t v1181 = 0x6176783531322E6DLL;
                                                                                                                      unint64_t v1182 = bswap64((unint64_t)*v35);
                                                                                                                      if (v1182 == 0x6176783531322E6DLL && (unint64_t v1181 = 0x61736B2E6D6F7673, v1182 = bswap64((unint64_t)v35[1]), v1182 == 0x61736B2E6D6F7673) && (unint64_t v1181 = 0x6F7673686475702ELL, v1182 = bswap64(*(unint64_t *)((char *)v35 + 13)), v1182 == 0x6F7673686475702ELL))
                                                                                                                      {
                                                                                                                        int v1183 = 0;
                                                                                                                      }
                                                                                                                      else if (v1182 < v1181)
                                                                                                                      {
                                                                                                                        int v1183 = -1;
                                                                                                                      }
                                                                                                                      else
                                                                                                                      {
                                                                                                                        int v1183 = 1;
                                                                                                                      }
                                                                                                                      BOOL v1122 = v1183 == 0;
                                                                                                                    }
                                                                                                                    __src = &v1641;
                                                                                                                    uint64_t v1640 = 0x1000000000;
                                                                                                                    llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1119);
                                                                                                                    v1184 = (int *)__src;
                                                                                                                    if (v1119)
                                                                                                                    {
                                                                                                                      int v1185 = 0;
                                                                                                                      do
                                                                                                                      {
                                                                                                                        if (v1121 <= 0x80)
                                                                                                                        {
                                                                                                                          uint64_t v1186 = 0;
                                                                                                                          unsigned int v1187 = 0x80 / v1121;
                                                                                                                          do
                                                                                                                          {
                                                                                                                            int v1188 = v1185 + v1186 + v1122;
                                                                                                                            v1184[(v1185 + v1186)] = v1188;
                                                                                                                            v1184[(v1185 + v1186 + 1)] = v1188;
                                                                                                                            v1186 += 2;
                                                                                                                            v1187 -= 2;
                                                                                                                          }
                                                                                                                          while (v1187);
                                                                                                                        }
                                                                                                                        v1185 += 0x80 / v1121;
                                                                                                                      }
                                                                                                                      while (v1185 != v1119);
                                                                                                                    }
                                                                                                                    __int16 v1646 = 257;
                                                                                                                    v805 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v1120, (uint64_t)v1120, v1184, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                                                    ShuffleVector = v805;
                                                                                                                    v1189 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                    v804 = (unsigned __int8 *)*((void *)v1189 + 8);
LABEL_2488:
                                                                                                                    v806 = (llvm::Value *)*((void *)v1189 + 4);
LABEL_1537:
                                                                                                                    ShuffleVector = (llvm::Value *)EmitX86Select((llvm::IRBuilderBase *)v1647, v804, v805, v806);
                                                                                                                    goto LABEL_1538;
                                                                                                                  }
                                                                                                                }
                                                                                                                v1084 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                                v782 = *(void **)v1084;
                                                                                                                uint64_t v1085 = *((void *)v1084 + 4);
                                                                                                                v1086 = (void *)(v1085 + 24);
                                                                                                                if (*(_DWORD *)(v1085 + 32) >= 0x41u) {
                                                                                                                  v1086 = (void *)*v1086;
                                                                                                                }
                                                                                                                unsigned int v1087 = *(_DWORD *)v1086;
                                                                                                                unint64_t v1088 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                                __src = &v1641;
                                                                                                                uint64_t v1640 = 0x1000000000;
                                                                                                                llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1088);
                                                                                                                v787 = (int *)__src;
                                                                                                                if (v1088)
                                                                                                                {
                                                                                                                  unint64_t v1089 = 0;
                                                                                                                  v1090.i64[0] = 0x300000003;
                                                                                                                  v1090.i64[1] = 0x300000003;
                                                                                                                  int8x16_t v1091 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v1087), (uint32x4_t)xmmword_261E91C00), v1090);
                                                                                                                  v1092 = (unsigned long long *)((char *)__src + 16);
                                                                                                                  do
                                                                                                                  {
                                                                                                                    v1093.i32[0] = v1089;
                                                                                                                    v1093.i32[1] = v1089 + 1;
                                                                                                                    *(v1092 - 1) = (unsigned __int128)vmovn_hight_s64(v1093, (int64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v1089), (int8x16_t)xmmword_261E91C10));
                                                                                                                    unsigned long long *v1092 = *(_OWORD *)&vorrq_s8(v1091, (int8x16_t)vdupq_n_s32(v1089)) | __PAIR128__(0x400000004, 0x400000004);
                                                                                                                    v1092 += 2;
                                                                                                                    v1089 += 8;
                                                                                                                  }
                                                                                                                  while (v1088 != v1089);
                                                                                                                }
                                                                                                              }
LABEL_1535:
                                                                                                              __int16 v1646 = 257;
                                                                                                              ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v782, (uint64_t)v782, v787, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                                              if (((llvm::CallBase::arg_end(v1633) - ((void)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x80) {
                                                                                                                goto LABEL_1538;
                                                                                                              }
                                                                                                              v803 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                              v804 = (unsigned __int8 *)*((void *)v803 + 12);
                                                                                                              v805 = ShuffleVector;
                                                                                                              v806 = (llvm::Value *)*((void *)v803 + 8);
                                                                                                              goto LABEL_1537;
                                                                                                            }
LABEL_2384:
                                                                                                            v1096 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                            uint64_t v1097 = *((void *)v1096 + 4);
                                                                                                            v1098 = (void *)(v1097 + 24);
                                                                                                            if (*(_DWORD *)(v1097 + 32) >= 0x41u) {
                                                                                                              v1098 = (void *)*v1098;
                                                                                                            }
                                                                                                            v1099 = *(void **)v1096;
                                                                                                            v1100 = *(llvm::Type **)v1633;
                                                                                                            unint64_t v1101 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                            if ((*(_DWORD *)(*(void *)v1633 + 8) & 0xFE) == 0x12) {
                                                                                                              v1100 = (llvm::Type *)**((void **)v1100 + 2);
                                                                                                            }
                                                                                                            unsigned int v1102 = *(_DWORD *)v1098;
                                                                                                            unsigned int v1103 = llvm::Type::getPrimitiveSizeInBits(v1100);
                                                                                                            __src = &v1641;
                                                                                                            uint64_t v1640 = 0x800000000;
                                                                                                            llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1101);
                                                                                                            v1104 = (int *)__src;
                                                                                                            if (v1101)
                                                                                                            {
                                                                                                              uint64_t v1105 = 0;
                                                                                                              unsigned int v1106 = 0x40 / v1103;
                                                                                                              int v1107 = -1 << (0x40 / v1103);
                                                                                                              int v1108 = ~v1107;
                                                                                                              int64x2_t v1109 = (int64x2_t)xmmword_261E8D440;
                                                                                                              uint64x2_t v1110 = (uint64x2_t)vdupq_n_s64(v1101 - 1);
                                                                                                              int64x2_t v1111 = vdupq_n_s64(2uLL);
                                                                                                              do
                                                                                                              {
                                                                                                                int32x2_t v1112 = vmovn_s64((int64x2_t)vcgeq_u64(v1110, (uint64x2_t)v1109));
                                                                                                                if (v1112.i8[0]) {
                                                                                                                  v1104[v1105] = (v1102 >> ((v1106 * v1105) & 6)) & v1108 | v1107 & v1105;
                                                                                                                }
                                                                                                                if (v1112.i8[4]) {
                                                                                                                  v1104[v1105 + 1] = (v1102 >> ((v1106 * (v1105 | 1)) & 7)) & v1108 | v1107 & (v1105 + 1);
                                                                                                                }
                                                                                                                v1105 += 2;
                                                                                                                int64x2_t v1109 = vaddq_s64(v1109, v1111);
                                                                                                              }
                                                                                                              while (((v1101 + 1) & 0x1FFFFFFFELL) != v1105);
                                                                                                            }
                                                                                                            __int16 v1646 = 257;
                                                                                                            ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v1099, (uint64_t)v1099, v1104, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                                            if (((llvm::CallBase::arg_end(v1633) - ((void)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x80)
                                                                                                            {
                                                                                                              v1113 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                              v765 = (unsigned __int8 *)*((void *)v1113 + 12);
                                                                                                              v766 = ShuffleVector;
                                                                                                              v767 = (llvm::Value *)*((void *)v1113 + 8);
                                                                                                              goto LABEL_1471;
                                                                                                            }
                                                                                                            goto LABEL_2196;
                                                                                                          }
                                                                                                        }
                                                                                                        uint64_t v657 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
                                                                                                        v658 = (unint64_t *)(v657 + 24);
                                                                                                        if (*(_DWORD *)(v657 + 32) >= 0x41u) {
                                                                                                          v658 = (unint64_t *)*v658;
                                                                                                        }
                                                                                                        unint64_t v659 = *v658;
                                                                                                        unint64_t v660 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                        __src = &v1641;
                                                                                                        uint64_t v1640 = 0x800000000;
                                                                                                        llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v660);
                                                                                                        v662 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                        uint64_t v663 = *(void *)&v662[v659 & 0x20];
                                                                                                        if ((v659 & 8) != 0) {
                                                                                                          uint64_t v664 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1633, v661);
                                                                                                        }
                                                                                                        else {
                                                                                                          uint64_t v664 = *(void *)&v662[32 * ((v659 >> 1) & 1)];
                                                                                                        }
                                                                                                        if ((v659 & 0x80) != 0) {
                                                                                                          uint64_t v663 = llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)v1633, v661);
                                                                                                        }
                                                                                                        v825 = (int *)__src;
                                                                                                        if (v660 >= 2)
                                                                                                        {
                                                                                                          unint64_t v826 = v660 >> 1;
                                                                                                          int v827 = ((int)(v659 << 31) >> 31) & (v660 >> 1);
                                                                                                          if ((v660 >> 1) <= 1) {
                                                                                                            uint64_t v828 = 1;
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v828 = v826;
                                                                                                          }
                                                                                                          v829 = __src;
                                                                                                          uint64_t v830 = v828;
                                                                                                          do
                                                                                                          {
                                                                                                            *v829++ = v827++;
                                                                                                            --v830;
                                                                                                          }
                                                                                                          while (v830);
                                                                                                          int v831 = (v826 & ((int)(v659 << 27) >> 31)) + v660;
                                                                                                          v832 = &v825[v826];
                                                                                                          do
                                                                                                          {
                                                                                                            *v832++ = v831++;
                                                                                                            --v828;
                                                                                                          }
                                                                                                          while (v828);
                                                                                                        }
                                                                                                        v833 = (llvm::Type *)v1640;
                                                                                                        __int16 v1646 = 257;
                                                                                                        v834 = (void *)v664;
                                                                                                        uint64_t v835 = v663;
LABEL_2194:
                                                                                                        v768 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v834, v835, v825, v833, (uint64_t)v1644);
                                                                                                        goto LABEL_2195;
                                                                                                      }
                                                                                                      if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x747865762E6B7361 || *((_DWORD *)v35 + 4) != 1952670066)
                                                                                                      {
                                                                                                        BOOL v778 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x6D7265702E6B7361 && *((_DWORD *)v35 + 4) == 778462254;
                                                                                                        if (v778 || ((uint64_t v10 = 778658862, *v35 == (llvm::CallBase *)0x6D2E323135787661) ? (v779 = v35[1] == (llvm::CallBase *)0x6D7265702E6B7361) : (v779 = 0), v779 ? (v780 = *((unsigned int *)v35 + 4) == 778658862) : (v780 = 0), v780))
                                                                                                        {
                                                                                                          v781 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                          v782 = *(void **)v781;
                                                                                                          uint64_t v783 = *((void *)v781 + 4);
                                                                                                          v784 = (void *)(v783 + 24);
                                                                                                          if (*(_DWORD *)(v783 + 32) >= 0x41u) {
                                                                                                            v784 = (void *)*v784;
                                                                                                          }
                                                                                                          unsigned int v785 = *(_DWORD *)v784;
                                                                                                          unint64_t v786 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                          __src = &v1641;
                                                                                                          uint64_t v1640 = 0x800000000;
                                                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v786);
                                                                                                          v787 = (int *)__src;
                                                                                                          if (v786)
                                                                                                          {
                                                                                                            char v788 = 0;
                                                                                                            uint64_t v789 = 0;
                                                                                                            int64x2_t v790 = (int64x2_t)xmmword_261E8D440;
                                                                                                            uint64x2_t v791 = (uint64x2_t)vdupq_n_s64(v786 - 1);
                                                                                                            int64x2_t v792 = vdupq_n_s64(2uLL);
                                                                                                            do
                                                                                                            {
                                                                                                              int32x2_t v793 = vmovn_s64((int64x2_t)vcgeq_u64(v791, (uint64x2_t)v790));
                                                                                                              if (v793.i8[0]) {
                                                                                                                v787[v789] = v789 & 0xFFFFFFFC | (v785 >> (v788 & 4)) & 3;
                                                                                                              }
                                                                                                              if (v793.i8[4]) {
                                                                                                                v787[v789 + 1] = v789 & 0xFFFFFFFC | (v785 >> (v788 & 4 | 2)) & 3;
                                                                                                              }
                                                                                                              v789 += 2;
                                                                                                              int64x2_t v790 = vaddq_s64(v790, v792);
                                                                                                              v788 += 4;
                                                                                                            }
                                                                                                            while (((v786 + 1) & 0x1FFFFFFFELL) != v789);
                                                                                                          }
                                                                                                          goto LABEL_1535;
                                                                                                        }
                                                                                                        goto LABEL_1221;
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                  v794 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                  v782 = *(void **)v794;
                                                                                                  uint64_t v795 = *((void *)v794 + 4);
                                                                                                  v796 = (void *)(v795 + 24);
                                                                                                  if (*(_DWORD *)(v795 + 32) >= 0x41u) {
                                                                                                    v796 = (void *)*v796;
                                                                                                  }
                                                                                                  v797 = (void *)*v796;
                                                                                                  unint64_t v798 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                                  unsigned int v799 = *(_DWORD *)(*v782 + 32);
                                                                                                  __src = &v1641;
                                                                                                  uint64_t v1640 = 0x800000000;
                                                                                                  llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v798);
                                                                                                  v787 = (int *)__src;
                                                                                                  if (v798)
                                                                                                  {
                                                                                                    uint64_t v800 = 0;
                                                                                                    int v801 = v797 % (v799 / v798) * v798;
                                                                                                    v802 = __src;
                                                                                                    do
                                                                                                    {
                                                                                                      *v802++ = v801 + v800++;
                                                                                                      --v798;
                                                                                                    }
                                                                                                    while (v798);
                                                                                                  }
                                                                                                  goto LABEL_1535;
                                                                                                }
                                                                                              }
                                                                                            }
LABEL_2184:
                                                                                            v1013 = (void *)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                            v1014 = (void *)*v1013;
                                                                                            uint64_t v1015 = v1013[4];
                                                                                            uint64_t v1016 = v1013[8];
                                                                                            v1017 = (void *)(v1016 + 24);
                                                                                            if (*(_DWORD *)(v1016 + 32) >= 0x41u) {
                                                                                              v1017 = (void *)*v1017;
                                                                                            }
                                                                                            unsigned int v1018 = *(_DWORD *)v1017;
                                                                                            unint64_t v1019 = *(unsigned int *)(*(void *)v1633 + 32);
                                                                                            __src = &v1641;
                                                                                            uint64_t v1640 = 0x1000000000;
                                                                                            llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1019);
                                                                                            v825 = (int *)__src;
                                                                                            if (v1019)
                                                                                            {
                                                                                              uint64_t v1020 = 0;
                                                                                              int64x2_t v1021 = (int64x2_t)xmmword_261E8D440;
                                                                                              uint64x2_t v1022 = (uint64x2_t)vdupq_n_s64(v1019 - 1);
                                                                                              int64x2_t v1023 = vdupq_n_s64(2uLL);
                                                                                              do
                                                                                              {
                                                                                                int32x2_t v1024 = vmovn_s64((int64x2_t)vcgeq_u64(v1022, (uint64x2_t)v1021));
                                                                                                if (v1024.i8[0]) {
                                                                                                  v825[v1020] = v1020 + (((int)(v1018 >> (v1020 & 6) << 31) >> 31) & v1019);
                                                                                                }
                                                                                                if (v1024.i8[4]) {
                                                                                                  v825[v1020 + 1] = v1020 + (((int)(v1018 >> ((v1020 + 1) & 7) << 31) >> 31) & v1019) + 1;
                                                                                                }
                                                                                                v1020 += 2;
                                                                                                int64x2_t v1021 = vaddq_s64(v1021, v1023);
                                                                                              }
                                                                                              while (((v1019 + 1) & 0x1FFFFFFFELL) != v1020);
                                                                                            }
                                                                                            v833 = (llvm::Type *)v1640;
                                                                                            __int16 v1646 = 257;
                                                                                            v834 = v1014;
                                                                                            uint64_t v835 = v1015;
                                                                                            goto LABEL_2194;
                                                                                          }
                                                                                          BOOL v731 = *v35 == (llvm::CallBase *)0x6461702E32657373
                                                                                              && *((_DWORD *)v35 + 2) == 779318628;
                                                                                          if (v731
                                                                                            || ((uint64_t v10 = *((unsigned int *)v35 + 2),
                                                                                                 *v35 == (llvm::CallBase *)0x6461702E32787661)
                                                                                              ? (BOOL v732 = v10 == 779318628)
                                                                                              : (BOOL v732 = 0),
                                                                                                v732
                                                                                             || v107 >= 0x13
                                                                                             && ((uint64_t v10 = 0x6D2E323135787661,
                                                                                                  *v35 == (llvm::CallBase *)0x6D2E323135787661)
                                                                                               ? (BOOL v733 = v35[1] == (llvm::CallBase *)0x646461702E6B7361)
                                                                                               : (BOOL v733 = 0),
                                                                                                 v733
                                                                                               ? (BOOL v734 = *(llvm::CallBase **)((char *)v35 + 11) == (llvm::CallBase *)0x2E7375646461702ELL)
                                                                                               : (BOOL v734 = 0),
                                                                                                 v734)))
                                                                                          {
                                                                                            v665 = (uint64_t *)v1633;
                                                                                            int v666 = 303;
                                                                                          }
                                                                                          else
                                                                                          {
                                                                                            if ((*v35 != (llvm::CallBase *)0x7573702E32657373
                                                                                               || *((_DWORD *)v35 + 2) != 779318626)
                                                                                              && (*v35 != (llvm::CallBase *)0x7573702E32787661
                                                                                               || *((_DWORD *)v35 + 2) != 779318626))
                                                                                            {
                                                                                              if (v107 < 0x13)
                                                                                              {
                                                                                                char v640 = 0;
                                                                                                char v641 = 1;
                                                                                                BOOL v642 = 1;
                                                                                                goto LABEL_1563;
                                                                                              }
                                                                                              BOOL v808 = *v35 == (llvm::CallBase *)0x6D2E323135787661 && v35[1] == (llvm::CallBase *)0x627573702E6B7361;
                                                                                              if (!v808
                                                                                                || *(llvm::CallBase **)((char *)v35 + 11) != (llvm::CallBase *)0x2E7375627573702ELL)
                                                                                              {
                                                                                                BOOL v642 = v107 < 0x14;
                                                                                                if (v107 >= 0x14 && (*v35 == (llvm::CallBase *)0x6D2E323135787661 ? (BOOL v810 = v35[1] == (llvm::CallBase *)0x696C61702E6B7361) : (BOOL v810 = 0), v810 ? (v811 = *((_DWORD *)v35 + 4) == 779251303) : (v811 = 0), v811))
                                                                                                {
                                                                                                  v1117 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                  v1003 = *(llvm::Type **)v1117;
                                                                                                  v1004 = (void *)*((void *)v1117 + 4);
                                                                                                  uint64_t v1005 = *((void *)v1117 + 8);
                                                                                                  v1006 = (llvm::Value *)*((void *)v1117 + 12);
                                                                                                  v1007 = (unsigned __int8 *)*((void *)v1117 + 16);
                                                                                                  int v1008 = 0;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  if (*v35 != (llvm::CallBase *)0x6D2E323135787661 || v35[1] != (llvm::CallBase *)0x696C61762E6B7361 || *(llvm::CallBase **)((char *)v35 + 11) != (llvm::CallBase *)0x2E6E67696C61762ELL)
                                                                                                  {
                                                                                                    char v640 = 0;
                                                                                                    BOOL v631 = 0;
                                                                                                    char v641 = 0;
                                                                                                    goto LABEL_1563;
                                                                                                  }
                                                                                                  v1002 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                  v1003 = *(llvm::Type **)v1002;
                                                                                                  v1004 = (void *)*((void *)v1002 + 4);
                                                                                                  uint64_t v1005 = *((void *)v1002 + 8);
                                                                                                  v1006 = (llvm::Value *)*((void *)v1002 + 12);
                                                                                                  v1007 = (unsigned __int8 *)*((void *)v1002 + 16);
                                                                                                  int v1008 = 1;
                                                                                                }
                                                                                                InsertElement = UpgradeX86ALIGNIntrinsics((llvm::IRBuilderBase *)v1647, v1003, v1004, v1005, v1006, v1007, v1008);
                                                                                                goto LABEL_1586;
                                                                                              }
                                                                                            }
                                                                                            v665 = (uint64_t *)v1633;
                                                                                            int v666 = 314;
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                      goto LABEL_1585;
                                                                                    }
                                                                                    if (*v35 != (llvm::CallBase *)0x702E323135787661
                                                                                      || v35[1] != (llvm::CallBase *)0x73616364616F7262
                                                                                      || *((unsigned char *)v35 + 16) != 116)
                                                                                    {
                                                                                      uint64_t v3 = v1648;
                                                                                      if (v107 < 0x17)
                                                                                      {
                                                                                        char v494 = 0;
                                                                                        char v493 = 0;
                                                                                        goto LABEL_1126;
                                                                                      }
                                                                                      if (*v35 != (llvm::CallBase *)0x6D2E323135787661
                                                                                        || v35[1] != (llvm::CallBase *)0x616F72622E6B7361
                                                                                        || *(llvm::CallBase **)((char *)v35 + 15) != (llvm::CallBase *)0x732E747361636461)
                                                                                      {
                                                                                        char v494 = 0;
                                                                                        char v493 = 0;
                                                                                        char v628 = 0;
                                                                                        goto LABEL_1127;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                  v701 = (llvm::PoisonValue **)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                  llvm::VectorType::get((uint64_t **)(*v6 + 1992), (llvm::Type *)(*(unsigned int *)(*(void *)v1633 + 32) | ((unint64_t)(*(unsigned char *)(*(void *)v1633 + 8) == 19) << 32)));
                                                                                  __src = &v1641;
                                                                                  uint64_t v1640 = 0x800000000;
                                                                                  v704 = (unsigned int *)llvm::Constant::getNullValue(v702, v703);
                                                                                  llvm::ShuffleVectorInst::getShuffleMask(v704, (unsigned int *)&__src);
                                                                                  __int16 v1646 = 257;
                                                                                  ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v701, (int *)__src, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                                  if (((llvm::CallBase::arg_end(v1633)
                                                                                       - ((void)v1633
                                                                                        - 32
                                                                                        * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x60)
                                                                                    goto LABEL_1329;
                                                                                  v543 = (char *)v1633
                                                                                       - 32
                                                                                       * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                  uint64_t v544 = (unsigned __int8 *)*((void *)v543 + 8);
                                                                                  v542 = ShuffleVector;
LABEL_1328:
                                                                                  ShuffleVector = (llvm::Value *)EmitX86Select((llvm::IRBuilderBase *)v1647, v544, v542, *((llvm::Value **)v543 + 4));
LABEL_1329:
                                                                                  v705 = __src;
                                                                                  if (__src == &v1641) {
                                                                                    goto LABEL_1364;
                                                                                  }
                                                                                  goto LABEL_1363;
                                                                                }
LABEL_2787:
                                                                                v1394 = *(llvm::Type **)(*(void *)v1633 + 24);
                                                                                unint64_t v1396 = llvm::Type::getPrimitiveSizeInBits(v1394);
                                                                                if ((_BYTE)v1395) {
                                                                                v1397 = (llvm::Type *)(0x80 / v1396);
                                                                                }
                                                                                llvm::FixedVectorType::get((uint64_t **)v1394, v1397);
                                                                                v1399 = (llvm::Type *)v1398;
                                                                                v1400 = (llvm::Value *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                v1401 = (llvm::Type *)llvm::PointerType::get(v1398, 0);
                                                                                LOWORD(NullValue) = 257;
                                                                                PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)v1647, v1400, v1401, (const llvm::Twine *)&__src, v1402);
                                                                                LOWORD(NullValue) = 257;
                                                                                v1404 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v1647, v1399, (llvm::Value *)PointerCast, 256, 0, (uint64_t)&__src);
                                                                                if (v1397 == 2)
                                                                                {
                                                                                  *(_OWORD *)v1644 = xmmword_261E91C40;
                                                                                  LOWORD(NullValue) = 257;
                                                                                  uint64_t v1405 = 4;
                                                                                }
                                                                                else
                                                                                {
                                                                                  *(_OWORD *)v1644 = xmmword_261E91C50;
                                                                                  long long v1645 = unk_261E91C60;
                                                                                  LOWORD(NullValue) = 257;
                                                                                  uint64_t v1405 = 8;
                                                                                }
                                                                                VectorSplat = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, (llvm::PoisonValue **)v1404, (int *)v1644, (llvm::Type *)v1405, (uint64_t)&__src);
                                                                                goto LABEL_682;
                                                                              }
                                                                              char v96 = 1;
LABEL_96:
                                                                              if (*v35 != (llvm::CallBase *)0x6D2E323135787661
                                                                                || v35[1] != (llvm::CallBase *)0x766F6D702E6B7361
                                                                                || *(llvm::CallBase **)((char *)v35 + 15) != (llvm::CallBase *)0x3635322E64712E76)
                                                                              {
                                                                                BOOL v99 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                                                   && v35[1] == (llvm::CallBase *)0x766F6D702E6B7361;
                                                                                if (!v99
                                                                                  || *(llvm::CallBase **)((char *)v35 + 15) != (llvm::CallBase *)0x3231352E64712E76)
                                                                                {
                                                                                  BOOL v101 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                                                      && v35[1] == (llvm::CallBase *)0x766F6D702E6B7361;
                                                                                  if (!v101
                                                                                    || *(llvm::CallBase **)((char *)v35 + 15) != (llvm::CallBase *)0x3635322E62772E76)
                                                                                  {
                                                                                    BOOL v103 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                                                                                        && v35[1] == (llvm::CallBase *)0x766F6D702E6B7361;
                                                                                    if (!v103
                                                                                      || *(llvm::CallBase **)((char *)v35 + 15) != (llvm::CallBase *)0x3231352E62772E76)
                                                                                    {
                                                                                      if (v96)
                                                                                      {
                                                                                        if (*v35 != (llvm::CallBase *)0x6F7262762E787661
                                                                                          || v35[1] != (llvm::CallBase *)0x3166747361636461
                                                                                          || *((_WORD *)v35 + 8) != 14386)
                                                                                        {
                                                                                          unint64_t v107 = 23;
                                                                                          goto LABEL_133;
                                                                                        }
                                                                                        goto LABEL_2787;
                                                                                      }
LABEL_159:
                                                                                      uint64_t v35 = v1628;
                                                                                      unint64_t v36 = v1629;
                                                                                      if (!v45)
                                                                                      {
LABEL_32:
                                                                                        size_t v37 = v1633;
                                                                                        switch(v36)
                                                                                        {
                                                                                          case 0x1FuLL:
                                                                                          case 0x20uLL:
                                                                                          case 0x21uLL:
                                                                                          case 0x22uLL:
                                                                                          case 0x23uLL:
                                                                                          case 0x24uLL:
                                                                                          case 0x25uLL:
                                                                                          case 0x26uLL:
                                                                                          case 0x27uLL:
                                                                                          case 0x28uLL:
                                                                                          case 0x29uLL:
                                                                                          case 0x2AuLL:
                                                                                          case 0x2BuLL:
                                                                                          case 0x2CuLL:
                                                                                          case 0x2DuLL:
                                                                                          case 0x2EuLL:
                                                                                          case 0x2FuLL:
                                                                                          case 0x30uLL:
                                                                                          case 0x31uLL:
                                                                                          case 0x32uLL:
                                                                                          case 0x33uLL:
                                                                                          case 0x34uLL:
                                                                                          case 0x35uLL:
                                                                                          case 0x36uLL:
                                                                                          case 0x37uLL:
                                                                                          case 0x38uLL:
                                                                                          case 0x39uLL:
                                                                                            goto LABEL_33;
                                                                                          default:
                                                                                            if (v36 != 14) {
                                                                                              goto LABEL_33;
                                                                                            }
                                                                                            if (*v35 != (llvm::CallBase *)0x707463762E65766DLL
                                                                                              || *(llvm::CallBase **)((char *)v35 + 6) != (llvm::CallBase *)0x646C6F2E34367074)
                                                                                            {
                                                                                              goto LABEL_33;
                                                                                            }
                                                                                            uint64_t v157 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)v1627 + 5), 2699, 0, 0);
                                                                                            uint64_t v158 = v157;
                                                                                            if (v157) {
                                                                                              uint64_t v159 = *(void *)(v157 + 24);
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v159 = 0;
                                                                                            }
                                                                                            int v400 = *((_DWORD *)v37 + 5);
                                                                                            v1644[0] = *((llvm::hashing::detail::hash_state **)v37 - 4 * (v400 & 0x7FFFFFF));
                                                                                            if ((v400 & 0x10000000) != 0)
                                                                                            {
                                                                                              uint64_t v403 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)v37);
                                                                                              uint64_t v404 = *v403;
                                                                                              unint64_t v402 = v403 + 2;
                                                                                              uint64_t v401 = v404;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              uint64_t v401 = 0;
                                                                                              unint64_t v402 = &str_3_24;
                                                                                            }
                                                                                            LOWORD(NullValue) = 261;
                                                                                            __src = v402;
                                                                                            uint64_t v1640 = v401;
                                                                                            v1644[0] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v159, v158, (uint64_t *)v1644, 1, (uint64_t)&__src, 0);
                                                                                            unint64_t v405 = (uint64_t **)*((void *)v1627 + 5);
                                                                                            llvm::FixedVectorType::get((uint64_t **)(*v1651 + 1920), (llvm::Type *)2);
                                                                                            std::string __p = v406;
                                                                                            uint64_t v407 = llvm::Intrinsic::getDeclaration(v405, 2659, (uint64_t)&__p, 1);
                                                                                            if (v407) {
                                                                                              uint64_t v408 = *(void *)(v407 + 24);
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v408 = 0;
                                                                                            }
                                                                                            LOWORD(NullValue) = 257;
                                                                                            std::string __p = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v408, v407, (uint64_t *)v1644, 1, (uint64_t)&__src, 0);
                                                                                            unint64_t v409 = (uint64_t **)*((void *)v1627 + 5);
                                                                                            llvm::FixedVectorType::get((uint64_t **)(*v1651 + 1920), (llvm::Type *)4);
                                                                                            v1662[0] = v410;
                                                                                            uint64_t v411 = llvm::Intrinsic::getDeclaration(v409, 2658, (uint64_t)v1662, 1);
                                                                                            if (v411) {
                                                                                              uint64_t v412 = *(void *)(v411 + 24);
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v412 = 0;
                                                                                            }
                                                                                            LOWORD(NullValue) = 257;
                                                                                            AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v412, v411, (uint64_t *)&__p, 1, (uint64_t)&__src, 0);
                                                                                            break;
                                                                                        }
                                                                                        goto LABEL_281;
                                                                                      }
                                                                                      if (v1629 == 6)
                                                                                      {
                                                                                        if (*(_DWORD *)v1628 == 779313761
                                                                                          && *((_WORD *)v1628 + 2) == 27756)
                                                                                        {
                                                                                          goto LABEL_405;
                                                                                        }
LABEL_346:
                                                                                        if (!memcmp(v1628, "max.ll", v1629))goto LABEL_664; {
                                                                                        if (*(_DWORD *)v1628 == 779641197
                                                                                        }
                                                                                          && *((_WORD *)v1628 + 2) == 26997)
                                                                                        {
                                                                                          goto LABEL_664;
                                                                                        }
                                                                                        if (!memcmp(v1628, "min.ll", v1629))goto LABEL_672; {
                                                                                        if (*(_DWORD *)v1628 == 778987885
                                                                                        }
                                                                                          && *((_WORD *)v1628 + 2) == 26997)
                                                                                        {
                                                                                          goto LABEL_672;
                                                                                        }
                                                                                        if (memcmp(v1628, "clz.ll", v1629))
                                                                                        {
                                                                                          goto LABEL_663;
                                                                                        }
                                                                                        uint64_t v250 = (void **)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                        uint64_t v251 = (uint64_t **)*((void *)v1627 + 5);
                                                                                        std::string __p = *v250;
                                                                                        uint64_t v252 = llvm::Intrinsic::getDeclaration(v251, 53, (uint64_t)&__p, 1);
                                                                                        uint64_t v253 = v252;
                                                                                        if (v252) {
                                                                                          uint64_t v254 = *(void *)(v252 + 24);
                                                                                        }
                                                                                        else {
                                                                                          uint64_t v254 = 0;
                                                                                        }
                                                                                        v1644[0] = (llvm::hashing::detail::hash_state *)v250;
                                                                                        uint64_t v547 = *v1651;
                                                                                        v548 = *(llvm::hashing::detail::hash_state **)(*v1651 + 1600);
                                                                                        if (!v548)
                                                                                        {
                                                                                          v548 = (llvm::hashing::detail::hash_state *)llvm::ConstantInt::get(v547 + 1920, 0);
                                                                                          *(void *)(v547 + 1600) = v548;
                                                                                        }
                                                                                        v1644[1] = v548;
                                                                                        __src = "ctlz";
                                                                                        LOWORD(NullValue) = 259;
                                                                                        ICmp = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v254, v253, (uint64_t *)v1644, 2, (uint64_t)&__src, 0);
                                                                                        int64_t v296 = (llvm::Type *)(*v1651 + 1992);
                                                                                        __src = "ctlz.trunc";
                                                                                        LOWORD(NullValue) = 259;
                                                                                      }
                                                                                      else
                                                                                      {
                                                                                        if (v1629 == 5)
                                                                                        {
                                                                                          if (*(_DWORD *)v1628 != 779313761
                                                                                            || *((unsigned char *)v1628 + 4) != 105)
                                                                                          {
LABEL_166:
                                                                                            if (*(_DWORD *)v1628 != 779641197
                                                                                              || *((unsigned char *)v1628 + 4) != 105)
                                                                                            {
                                                                                              if (!memcmp(v1628, "min.i", v1629))
                                                                                              {
LABEL_672:
                                                                                                v429 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                                std::string v286 = *(llvm::CmpInst ***)v429;
                                                                                                Neg = (uint64_t *)*((void *)v429 + 4);
                                                                                                BOOL v430 = *(_WORD *)((char *)v1628 + v1629 - 3) == 29998 && *((unsigned char *)v1628 + v1629 - 1) == 105;
                                                                                                if (v430 || *(_DWORD *)((char *)v1628 + v1629 - 4) == 1819047214)
                                                                                                {
                                                                                                  __src = "min.cond";
                                                                                                  LOWORD(NullValue) = 259;
                                                                                                  __int16 v431 = 37;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  __src = "min.cond";
                                                                                                  LOWORD(NullValue) = 259;
                                                                                                  __int16 v431 = 41;
                                                                                                }
                                                                                                uint64_t v290 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1647, v431, v286, (uint64_t)Neg, (uint64_t)&__src);
                                                                                                unsigned int v428 = "min";
LABEL_680:
                                                                                                __src = v428;
                                                                                                LOWORD(NullValue) = 259;
                                                                                                goto LABEL_681;
                                                                                              }
LABEL_663:
                                                                                              size_t v37 = v1633;
LABEL_33:
                                                                                              v1644[0] = 0;
                                                                                              v1644[1] = 0;
                                                                                              *(void *)&long long v1645 = 0;
                                                                                              uint64_t v38 = *((void *)v37 - 4);
                                                                                              if (v38
                                                                                                && !*(unsigned char *)(v38 + 16)
                                                                                                && *(void *)(v38 + 24) == *((void *)v37 + 9))
                                                                                              {
                                                                                                int v39 = *(_DWORD *)(v38 + 36);
                                                                                                llvm::FixedVectorType::get((uint64_t **)(*v1651 + 1920), (llvm::Type *)2);
                                                                                                uint64_t v41 = v40;
                                                                                                if (v39 <= 2728)
                                                                                                {
                                                                                                  if ((v39 - 2562) <= 0xE && ((1 << (v39 - 2)) & 0x5145) != 0)
                                                                                                  {
                                                                                                    __src = (void *)*((void **)v37 - 4 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF))[4];
                                                                                                    uint64_t v1640 = v40;
                                                                                                    p_uint64_t NullValue = (char *)&v1641;
                                                                                                    unint64_t v43 = 2;
LABEL_242:
                                                                                                    std::vector<llvm::Type *>::__assign_with_size[abi:nn180100]<llvm::Type * const*,llvm::Type * const*>(v1644, (char *)&__src, p_NullValue, v43);
                                                                                                    v1636 = 0;
                                                                                                    FNeg = 0;
                                                                                                    std::string __p = 0;
                                                                                                    uint64_t v171 = (uint64_t *)((char *)v37 - 32 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF));
                                                                                                    uint64_t v172 = llvm::CallBase::arg_end(v37);
                                                                                                    if (v171 != (uint64_t *)v172)
                                                                                                    {
                                                                                                      std::string::size_type v173 = (uint64_t *)v172;
                                                                                                      unint64_t v174 = 0;
                                                                                                      do
                                                                                                      {
                                                                                                        v1662[0] = *v171;
                                                                                                        uint64_t v175 = (uint64_t *)v1662[0];
                                                                                                        uint64_t v176 = *(llvm::Type **)v1662[0];
                                                                                                        if ((*(_DWORD *)(*(void *)v1662[0] + 8) & 0xFE) == 0x12) {
                                                                                                          uint64_t v176 = (llvm::Type *)**((void **)v176 + 2);
                                                                                                        }
                                                                                                        if (llvm::Type::getPrimitiveSizeInBits(v176) == 1)
                                                                                                        {
                                                                                                          v1634 = 0;
                                                                                                          size_t v177 = (uint64_t **)*((void *)v1627 + 5);
                                                                                                          llvm::FixedVectorType::get((uint64_t **)(*v1651 + 1920), (llvm::Type *)4);
                                                                                                          v1663[0] = v178;
                                                                                                          uint64_t v179 = llvm::Intrinsic::getDeclaration(v177, 2659, (uint64_t)v1663, 1);
                                                                                                          if (v179) {
                                                                                                            uint64_t v180 = *(void *)(v179 + 24);
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v180 = 0;
                                                                                                          }
                                                                                                          LOWORD(NullValue) = 257;
                                                                                                          v1634 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v180, v179, v1662, 1, (uint64_t)&__src, 0);
                                                                                                          int v181 = (uint64_t **)*((void *)v1627 + 5);
                                                                                                          v1663[0] = v41;
                                                                                                          uint64_t v182 = llvm::Intrinsic::getDeclaration(v181, 2658, (uint64_t)v1663, 1);
                                                                                                          if (v182) {
                                                                                                            uint64_t v183 = *(void *)(v182 + 24);
                                                                                                          }
                                                                                                          else {
                                                                                                            uint64_t v183 = 0;
                                                                                                          }
                                                                                                          LOWORD(NullValue) = 257;
                                                                                                          uint64_t v175 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v183, v182, (uint64_t *)&v1634, 1, (uint64_t)&__src, 0);
                                                                                                          v1662[0] = (uint64_t)v175;
                                                                                                          unint64_t v174 = (uint64_t **)v1636;
                                                                                                        }
                                                                                                        if (v174 >= (uint64_t **)FNeg)
                                                                                                        {
                                                                                                          uint64_t v184 = ((char *)v174 - (unsigned char *)__p) >> 3;
                                                                                                          if ((unint64_t)(v184 + 1) >> 61) {
                                                                                                            abort();
                                                                                                          }
                                                                                                          unint64_t v185 = (FNeg - (llvm::Value *)__p) >> 2;
                                                                                                          if (v185 <= v184 + 1) {
                                                                                                            unint64_t v185 = v184 + 1;
                                                                                                          }
                                                                                                          if ((unint64_t)(FNeg - (llvm::Value *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                                                                                                            unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
                                                                                                          }
                                                                                                          else {
                                                                                                            unint64_t v186 = v185;
                                                                                                          }
                                                                                                          if (v186)
                                                                                                          {
                                                                                                            uint64_t v187 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&FNeg, v186);
                                                                                                            uint64_t v175 = (uint64_t *)v1662[0];
                                                                                                          }
                                                                                                          else
                                                                                                          {
                                                                                                            uint64_t v187 = 0;
                                                                                                          }
                                                                                                          uint64_t v188 = (uint64_t **)&v187[8 * v184];
                                                                                                          *uint64_t v188 = v175;
                                                                                                          unint64_t v174 = v188 + 1;
                                                                                                          uint64_t v190 = (char *)__p;
                                                                                                          uint64_t v189 = (char *)v1636;
                                                                                                          if (v1636 != __p)
                                                                                                          {
                                                                                                            do
                                                                                                            {
                                                                                                              uint64_t v191 = (uint64_t *)*((void *)v189 - 1);
                                                                                                              v189 -= 8;
                                                                                                              *--uint64_t v188 = v191;
                                                                                                            }
                                                                                                            while (v189 != v190);
                                                                                                            uint64_t v189 = (char *)__p;
                                                                                                          }
                                                                                                          std::string __p = v188;
                                                                                                          v1636 = (uint64_t *)v174;
                                                                                                          FNeg = (llvm::Value *)&v187[8 * v186];
                                                                                                          if (v189) {
                                                                                                            operator delete(v189);
                                                                                                          }
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                          *v174++ = v175;
                                                                                                        }
                                                                                                        v1636 = (uint64_t *)v174;
                                                                                                        v171 += 4;
                                                                                                      }
                                                                                                      while (v171 != v173);
                                                                                                    }
                                                                                                    uint64_t v192 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)v1627 + 5), v39, (uint64_t)v1644[0], (v1644[1] - v1644[0]) >> 3);
                                                                                                    uint64_t v193 = v192;
                                                                                                    if (v192) {
                                                                                                      uint64_t v194 = *(void *)(v192 + 24);
                                                                                                    }
                                                                                                    else {
                                                                                                      uint64_t v194 = 0;
                                                                                                    }
                                                                                                    BOOL v7 = v1648;
                                                                                                    uint64_t v195 = (uint64_t *)__p;
                                                                                                    uint64_t v196 = ((char *)v1636 - (unsigned char *)__p) >> 3;
                                                                                                    if ((*((unsigned char *)v37 + 23) & 0x10) != 0)
                                                                                                    {
                                                                                                      std::string::size_type v199 = (uint64_t *)llvm::Value::getValueName((uint64_t ***)v37);
                                                                                                      uint64_t v200 = *v199;
                                                                                                      uint64_t v198 = v199 + 2;
                                                                                                      uint64_t v197 = v200;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                      uint64_t v197 = 0;
                                                                                                      uint64_t v198 = &str_3_24;
                                                                                                    }
                                                                                                    LOWORD(NullValue) = 261;
                                                                                                    __src = v198;
                                                                                                    uint64_t v1640 = v197;
                                                                                                    AlignedLoad = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v194, v193, v195, v196, (uint64_t)&__src, 0);
                                                                                                    if (__p)
                                                                                                    {
                                                                                                      v1636 = (uint64_t *)__p;
                                                                                                      operator delete(__p);
                                                                                                    }
                                                                                                    if (v1644[0])
                                                                                                    {
                                                                                                      v1644[1] = v1644[0];
                                                                                                      operator delete(v1644[0]);
                                                                                                    }
LABEL_281:
                                                                                                    ShuffleVector = (llvm::Value *)AlignedLoad;
                                                                                                    goto LABEL_683;
                                                                                                  }
                                                                                                  goto LABEL_87;
                                                                                                }
                                                                                                if (v39 <= 2756)
                                                                                                {
                                                                                                  if (v39 == 2729)
                                                                                                  {
LABEL_87:
                                                                                                    __src = *(void **)v37;
                                                                                                    int v95 = (void *)**((void **)v37 - 4 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF));
LABEL_194:
                                                                                                    uint64_t v1640 = (uint64_t)v95;
                                                                                                    uint64_t v1641 = v40;
                                                                                                    p_uint64_t NullValue = (char *)&v1642;
                                                                                                    unint64_t v43 = 3;
                                                                                                    goto LABEL_242;
                                                                                                  }
                                                                                                  if (v39 == 2731)
                                                                                                  {
LABEL_193:
                                                                                                    int v95 = (void *)**((void **)v37 - 4 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF));
                                                                                                    __src = v95;
                                                                                                    goto LABEL_194;
                                                                                                  }
                                                                                                  __src = *(void **)v37;
                                                                                                  uint64_t v93 = (char *)v37 - 32 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF);
                                                                                                  uint64_t v1640 = **(void **)v93;
                                                                                                  uint64_t v94 = (uint64_t *)*((void *)v93 + 4);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                  if (v39 <= 2804)
                                                                                                  {
                                                                                                    if (v39 == 2757) {
                                                                                                      goto LABEL_87;
                                                                                                    }
                                                                                                    goto LABEL_193;
                                                                                                  }
                                                                                                  if (v39 == 2805) {
                                                                                                    goto LABEL_193;
                                                                                                  }
                                                                                                  size_t v170 = (char *)v37 - 32 * (*((_DWORD *)v37 + 5) & 0x7FFFFFF);
                                                                                                  __src = **(void ***)v170;
                                                                                                  uint64_t v1640 = **((void **)v170 + 4);
                                                                                                  uint64_t v94 = (uint64_t *)*((void *)v170 + 8);
                                                                                                }
                                                                                                uint64_t v1641 = *v94;
                                                                                                uint64_t v1642 = v40;
                                                                                                p_uint64_t NullValue = (char *)&NullValue;
                                                                                                unint64_t v43 = 4;
                                                                                                goto LABEL_242;
                                                                                              }
                                                                                              llvm::FixedVectorType::get((uint64_t **)(*v1651 + 1920), (llvm::Type *)2);
                                                                                              __break(1u);
                                                                                              goto LABEL_2730;
                                                                                            }
LABEL_664:
                                                                                            char v425 = (char *)v1633
                                                                                                 - 32
                                                                                                 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                                            std::string v286 = *(llvm::CmpInst ***)v425;
                                                                                            Neg = (uint64_t *)*((void *)v425 + 4);
                                                                                            BOOL v426 = *(_WORD *)((char *)v1628 + v1629 - 3) == 29998
                                                                                                && *((unsigned char *)v1628 + v1629 - 1) == 105;
                                                                                            if (v426
                                                                                              || *(_DWORD *)((char *)v1628 + v1629 - 4) == 1819047214)
                                                                                            {
                                                                                              __src = "max.cond";
                                                                                              LOWORD(NullValue) = 259;
                                                                                              __int16 v427 = 35;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                              __src = "max.cond";
                                                                                              LOWORD(NullValue) = 259;
                                                                                              __int16 v427 = 39;
                                                                                            }
                                                                                            uint64_t v290 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1647, v427, v286, (uint64_t)Neg, (uint64_t)&__src);
                                                                                            unsigned int v428 = "max";
                                                                                            goto LABEL_680;
                                                                                          }
LABEL_405:
                                                                                          std::string v286 = (llvm::CmpInst **)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                          __src = "neg";
                                                                                          LOWORD(NullValue) = 259;
                                                                                          Neg = llvm::IRBuilderBase::CreateNeg((llvm::IRBuilderBase *)v1647, v286, (const llvm::Twine *)&__src);
                                                                                          uint64_t v289 = llvm::Constant::getNullValue(*v286, v288);
                                                                                          __src = "abs.cond";
                                                                                          LOWORD(NullValue) = 259;
                                                                                          uint64_t v290 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1647, 39, v286, v289, (uint64_t)&__src);
                                                                                          __src = "abs";
                                                                                          LOWORD(NullValue) = 259;
LABEL_681:
                                                                                          VectorSplat = llvm::IRBuilderBase::CreateSelect((llvm::IRBuilderBase *)v1647, (llvm::Value *)v290, (llvm::Value *)v286, (llvm::Value *)Neg, (const llvm::Twine *)&__src, 0);
                                                                                          goto LABEL_682;
                                                                                        }
                                                                                        if (v1629 >= 0x15)
                                                                                        {
                                                                                          BOOL v255 = *v1628 == (llvm::CallBase *)0x6C2E63696D6F7461
                                                                                              && v1628[1] == (llvm::CallBase *)0x2E6464612E64616FLL;
                                                                                          BOOL v256 = v255
                                                                                              && *(llvm::CallBase **)((char *)v1628 + 13) == (llvm::CallBase *)0x702E3233662E6464;
                                                                                          if (v256
                                                                                            || (*v1628 == (llvm::CallBase *)0x6C2E63696D6F7461
                                                                                              ? (BOOL v257 = v1628[1] == (llvm::CallBase *)0x2E6464612E64616FLL)
                                                                                              : (BOOL v257 = 0),
                                                                                                v257
                                                                                              ? (BOOL v258 = *(llvm::CallBase **)((char *)v1628 + 13) == (llvm::CallBase *)0x702E3436662E6464)
                                                                                              : (BOOL v258 = 0),
                                                                                                v258))
                                                                                          {
                                                                                            unsigned int v341 = (llvm::Type ***)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                            VectorSplat = llvm::IRBuilderBase::CreateAtomicRMW((uint64_t *)v1647, 11, (uint64_t)*v341, v341[4], 0, 7, 1);
                                                                                            goto LABEL_682;
                                                                                          }
                                                                                        }
                                                                                        switch(v1629)
                                                                                        {
                                                                                          case 3uLL:
                                                                                            if (*(_WORD *)v1628 != 12904
                                                                                              || *((unsigned char *)v1628 + 2) != 102)
                                                                                            {
                                                                                              goto LABEL_663;
                                                                                            }
                                                                                            v260 = (uint64_t **)*((void *)v1627 + 5);
                                                                                            v1644[0] = (llvm::hashing::detail::hash_state *)(*v1651 + 1704);
                                                                                            uint64_t v261 = llvm::Intrinsic::getDeclaration(v260, 18, (uint64_t)v1644, 1);
                                                                                            uint64_t v262 = v261;
                                                                                            if (v261) {
                                                                                              uint64_t v263 = *(void *)(v261 + 24);
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v263 = 0;
                                                                                            }
                                                                                            std::string __p = (void *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                            __src = "h2f";
                                                                                            __int16 v421 = 259;
                                                                                            goto LABEL_650;
                                                                                          case 5uLL:
                                                                                            goto LABEL_166;
                                                                                          case 6uLL:
                                                                                            goto LABEL_346;
                                                                                          case 7uLL:
                                                                                            if (*(_DWORD *)v1628 == 779641197
                                                                                              && *(_DWORD *)((char *)v1628 + 3) == 1819047214)
                                                                                            {
                                                                                              goto LABEL_664;
                                                                                            }
                                                                                            if (*(_DWORD *)v1628 == 778987885
                                                                                              && *(_DWORD *)((char *)v1628 + 3) == 1819047214)
                                                                                            {
                                                                                              goto LABEL_672;
                                                                                            }
                                                                                            if (*(_DWORD *)v1628 != 1668312944
                                                                                              || *(_DWORD *)((char *)v1628 + 3) != 1819029091)
                                                                                            {
                                                                                              goto LABEL_663;
                                                                                            }
                                                                                            v1644[0] = *((llvm::hashing::detail::hash_state **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                                            uint64_t v534 = (uint64_t **)*((void *)v1627 + 5);
                                                                                            std::string __p = *(void **)v1644[0];
                                                                                            uint64_t v535 = llvm::Intrinsic::getDeclaration(v534, 54, (uint64_t)&__p, 1);
                                                                                            if (v535) {
                                                                                              uint64_t v536 = *(void *)(v535 + 24);
                                                                                            }
                                                                                            else {
                                                                                              uint64_t v536 = 0;
                                                                                            }
                                                                                            __src = "ctpop";
                                                                                            LOWORD(NullValue) = 259;
                                                                                            ICmp = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v536, v535, (uint64_t *)v1644, 1, (uint64_t)&__src, 0);
                                                                                            int64_t v296 = (llvm::Type *)(*v1651 + 1992);
                                                                                            __src = "ctpop.trunc";
                                                                                            LOWORD(NullValue) = 259;
                                                                                            break;
                                                                                          default:
                                                                                            goto LABEL_32;
                                                                                        }
                                                                                      }
                                                                                      p_src = &__src;
                                                                                      int v298 = 38;
                                                                                      goto LABEL_410;
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                              unsigned int v126 = (char *)v1633
                                                                                   - 32
                                                                                   * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                              BOOL v127 = (llvm::Type *)**((void **)v126 + 4);
                                                                              BOOL v128 = *(unsigned __int8 **)v126;
                                                                              LOWORD(NullValue) = 257;
                                                                              BOOL v129 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 38, v128, v127, (uint64_t)&__src);
                                                                              goto LABEL_190;
                                                                            }
                                                                          }
LABEL_2693:
                                                                          v1314 = *(llvm::Type **)v1633;
                                                                          unint64_t v1315 = *(unsigned int *)(*(void *)v1633
                                                                                                  + 32);
                                                                          __src = &v1641;
                                                                          uint64_t v1640 = 0x800000000;
                                                                          llvm::SmallVectorImpl<int>::resizeImpl<false>((uint64_t)&__src, v1315);
                                                                          v1316 = (int *)__src;
                                                                          if (v1315)
                                                                          {
                                                                            for (uint64_t m = 0; m != v1315; ++m)
                                                                              v1316[m] = m;
                                                                          }
                                                                          v1318 = (llvm::PoisonValue **)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                          __int16 v1646 = 257;
                                                                          v1319 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v1318, v1316, (llvm::Type *)v1640, (uint64_t)v1644);
                                                                          if (llvm::StringRef::find((uint64_t *)&v1628, "pmovsx", 6uLL, 0) == -1)
                                                                          {
                                                                            __int16 v1646 = 257;
                                                                            int v1320 = 39;
                                                                          }
                                                                          else
                                                                          {
                                                                            __int16 v1646 = 257;
                                                                            int v1320 = 40;
                                                                          }
                                                                          ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v1647, v1320, (unsigned __int8 *)v1319, v1314, (uint64_t)v1644);
                                                                          v1350 = v1633;
                                                                          if (((llvm::CallBase::arg_end(v1633)
                                                                               - ((void)v1350
                                                                                - 32
                                                                                * (*((_DWORD *)v1350 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) != 0x60)
                                                                          {
LABEL_1538:
                                                                            v807 = __src;
                                                                            if (__src == &v1641) {
                                                                              goto LABEL_2198;
                                                                            }
                                                                            goto LABEL_2197;
                                                                          }
                                                                          v1189 = (char *)v1633
                                                                                - 32
                                                                                * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                                          v804 = (unsigned __int8 *)*((void *)v1189 + 8);
                                                                          v805 = ShuffleVector;
                                                                          goto LABEL_2488;
                                                                        }
                                                                        v1284 = v1628;
LABEL_2659:
                                                                        if (*v1284 == (llvm::CallBase *)0x6D702E3134657373
                                                                          && *((_DWORD *)v1284 + 2) == 2020832879)
                                                                        {
                                                                          goto LABEL_2693;
                                                                        }
                                                                        v1305 = *v1284;
                                                                        uint64_t v1306 = *((unsigned int *)v1284 + 2);
                                                                        if (v1305 == (llvm::CallBase *)0x6D702E3134657373
                                                                          && v1306 == 2021291631)
                                                                        {
                                                                          goto LABEL_2693;
                                                                        }
                                                                        goto LABEL_2667;
                                                                      }
                                                                      v1284 = v1628;
                                                                      if (*v1628 != (llvm::CallBase *)0x762E323135787661
                                                                        || v1628[1] != (llvm::CallBase *)0x73616364616F7262
                                                                        || *(llvm::CallBase **)((char *)v1628 + 11) != (llvm::CallBase *)0x732E747361636461)
                                                                      {
                                                                        goto LABEL_2659;
                                                                      }
                                                                    }
                                                                    v1321 = *(llvm::PoisonValue **)v1633;
                                                                    v1322 = *(llvm::PointerType ***)(*(void *)v1633 + 24);
                                                                    v1323 = (llvm::Type *)*(unsigned int *)(*(void *)v1633 + 32);
                                                                    v1324 = (unsigned __int8 *)*((void *)v1633
                                                                                               - 4
                                                                                               * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                                                    v1325 = (llvm::Type *)llvm::PointerType::get(v1322, 0);
                                                                    LOWORD(NullValue) = 257;
                                                                    v1326 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1324, v1325, (uint64_t)&__src);
                                                                    LOWORD(NullValue) = 257;
                                                                    v1327 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v1647, (llvm::Type *)v1322, (llvm::Value *)v1326, 0, 0, (uint64_t)&__src);
                                                                    uint64_t v1328 = *v6;
                                                                    v1330 = (llvm::Value *)llvm::PoisonValue::get(v1321, v1329);
                                                                    ShuffleVector = v1330;
                                                                    if (v1323)
                                                                    {
                                                                      v1331 = (uint64_t *)v1330;
                                                                      v1332 = 0;
                                                                      v1333 = (llvm::ConstantInt *)(v1328 + 1992);
                                                                      do
                                                                      {
                                                                        v1334 = (llvm::Value *)llvm::ConstantInt::get(v1333, v1332);
                                                                        LOWORD(NullValue) = 257;
                                                                        v1331 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1647, (llvm::Value *)v1331, (llvm::Value *)v1327, v1334, (const llvm::Twine *)&__src);
                                                                        ShuffleVector = (llvm::Value *)v1331;
                                                                        v1332 = (llvm::Type *)((char *)v1332 + 1);
                                                                      }
                                                                      while (v1323 != v1332);
                                                                    }
                                                                    goto LABEL_1364;
                                                                  }
                                                                  v1057 = v1628;
                                                                  if (*v1628 != (llvm::CallBase *)0x6D2E323135787661
                                                                    || v1628[1] != (llvm::CallBase *)0x687370762E6B7361
                                                                    || *((_WORD *)v1628 + 8) != 25714)
                                                                  {
                                                                    if (v36 < 0x13) {
                                                                      goto LABEL_2577;
                                                                    }
                                                                    BOOL v1281 = *v1628 == (llvm::CallBase *)0x6D2E323135787661
                                                                         && v1628[1] == (llvm::CallBase *)0x7370762E7A6B7361;
                                                                    if (!v1281
                                                                      || *(llvm::CallBase **)((char *)v1628 + 11) != (llvm::CallBase *)0x6472687370762E7ALL)
                                                                    {
                                                                      goto LABEL_2577;
                                                                    }
                                                                  }
                                                                }
                                                                BOOL v1256 = *((unsigned __int8 *)v1057 + 11) == 122;
                                                                v1257 = (uint64_t *)v1633;
                                                                int v1258 = 1;
                                                              }
                                                              InsertElement = upgradeX86ConcatShift((llvm::IRBuilderBase *)v1647, v1257, v1258, v1256, v11, v12);
                                                              goto LABEL_1586;
                                                            }
                                                          }
                                                          v1210 = (uint64_t *)v1633;
                                                          int v1211 = 1;
                                                        }
                                                        InsertElement = upgradeX86Rotate((llvm::IRBuilderBase *)v1647, v1210, v1211, v10, v11, v12);
                                                        goto LABEL_1586;
                                                      }
                                                      v1221 = (char *)v35 + v36;
                                                      BOOL v1222 = *(_WORD *)((char *)v35 + v36 - 2) != 25205
                                                           && *((_WORD *)v1221 - 1) != 30581
                                                           && *((_WORD *)v1221 - 1) != 25717
                                                           && *((_WORD *)v1221 - 1) != 29045;
                                                      if (((llvm::CallBase::arg_end(v1633)
                                                           - ((void)v1633
                                                            - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0x60)
                                                      {
                                                        uint64_t v1223 = ((void *)v1633
                                                               - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
                                                        v1224 = (void *)(v1223 + 24);
                                                        if (*(_DWORD *)(v1223 + 32) >= 0x41u) {
                                                          v1224 = (void *)*v1224;
                                                        }
                                                        int v1225 = *(_DWORD *)v1224;
                                                        goto LABEL_2851;
                                                      }
                                                      size_t v1253 = 9;
                                                      if (v1629 < 9) {
                                                        size_t v1253 = v1629;
                                                      }
                                                      v1254 = (char *)v1628 + v1253;
                                                      size_t v1255 = v1629 - v1253;
                                                      v1628 = (llvm::CallBase **)((char *)v1628 + v1253);
                                                      size_t v1629 = v1255;
                                                      if (v1255 < 2) {
                                                        goto LABEL_2533;
                                                      }
                                                      switch(*(_WORD *)v1254)
                                                      {
                                                        case 0x746C:
                                                          int v1225 = 0;
                                                          goto LABEL_2851;
                                                        case 0x656C:
                                                          int v1225 = 1;
                                                          goto LABEL_2851;
                                                        case 0x7467:
                                                          int v1225 = 2;
                                                          goto LABEL_2851;
                                                        case 0x6567:
                                                          int v1225 = 3;
                                                          goto LABEL_2851;
                                                        case 0x7165:
                                                          int v1225 = 4;
                                                          goto LABEL_2851;
                                                        case 0x656E:
                                                          int v1225 = 5;
                                                          goto LABEL_2851;
                                                      }
                                                      if (v1255 >= 5
                                                        && ((int v1285 = *(_DWORD *)v1254,
                                                             int v1286 = v1254[4],
                                                             v1285 == 1936482662)
                                                          ? (BOOL v1287 = v1286 == 101)
                                                          : (BOOL v1287 = 0),
                                                            v1287))
                                                      {
                                                        int v1225 = 6;
                                                      }
                                                      else
                                                      {
LABEL_2533:
                                                        int v1225 = 7;
                                                      }
LABEL_2851:
                                                      InsertElement = upgradeX86vpcom((uint64_t)v1647, (uint64_t)v1633, v1225, v1222);
                                                      goto LABEL_1586;
                                                    }
                                                    v1238 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                                                    v1239 = (unsigned int **)*((void *)v1238 + 4);
                                                    v1240 = *v1239;
                                                    v1241 = *(unsigned __int8 **)v1238;
                                                    v1242 = (llvm::Type *)llvm::PointerType::get(*((llvm::PointerType ***)*v1239 + 3), 0);
                                                    LOWORD(NullValue) = 257;
                                                    v1243 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v1241, v1242, (uint64_t)&__src);
                                                    v1244 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633- 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8], v1240[8]);
                                                    v1245 = (uint64_t **)*((void *)v1627 + 5);
                                                    __src = v1240;
                                                    uint64_t v1246 = llvm::Intrinsic::getDeclaration(v1245, 185, (uint64_t)&__src, 1);
                                                    uint64_t v1152 = v1246;
                                                    if (v1246) {
                                                      uint64_t v1153 = *(void *)(v1246 + 24);
                                                    }
                                                    else {
                                                      uint64_t v1153 = 0;
                                                    }
                                                    v1644[0] = ((llvm::hashing::detail::hash_state **)v1633
                                                              - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                    v1644[1] = (llvm::hashing::detail::hash_state *)v1243;
                                                    *(void *)&long long v1645 = v1244;
                                                  }
LABEL_2650:
                                                  LOWORD(NullValue) = 257;
LABEL_2651:
                                                  InsertElement = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v1153, v1152, (uint64_t *)v1644, 3, (uint64_t)&__src, 0);
                                                  goto LABEL_1586;
                                                }
                                              }
                                              v1067 = *(llvm::Type **)v1633;
                                              v1114 = (uint64_t *)*((void *)v1633
                                                                 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                                              ShuffleVector = (llvm::Value *)v1114;
                                              v1115 = (llvm::Type *)*((unsigned int *)v1067 + 8);
                                              if (v1115 != *(_DWORD *)(*v1114 + 32))
                                              {
                                                *(_OWORD *)v1644 = xmmword_261E91BF0;
                                                LOWORD(NullValue) = 257;
                                                v1114 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v1114, (uint64_t)v1114, (int *)v1644, (llvm::Type *)4, (uint64_t)&__src);
                                                ShuffleVector = (llvm::Value *)v1114;
                                              }
                                              llvm::FixedVectorType::get((uint64_t **)(*v6 + 1656), v1115);
                                              LOWORD(NullValue) = 257;
                                              v1072 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, (unsigned __int8 *)v1114, v1116, (uint64_t)&__src);
                                              ShuffleVector = v1072;
                                              v1073 = "cvtph2ps";
                                              goto LABEL_2352;
                                            }
                                          }
                                          else if (v36 < 0x14 {
                                                 || (*v35 == (llvm::CallBase *)0x6D2E323135787661
                                          }
                                                   ? (BOOL v771 = v35[1] == (llvm::CallBase *)0x6C756D702E6B7361)
                                                   : (BOOL v771 = 0),
                                                     v771 ? (BOOL v772 = *((_DWORD *)v35 + 4) == 779183150) : (BOOL v772 = 0),
                                                     !v772))
                                          {
                                            switch(v36)
                                            {
                                              case 0xCuLL:
                                                goto LABEL_1490;
                                              case 0xDuLL:
                                                if (*v122 == (llvm::CallBase *)0x7476632E32657373
                                                  && *(llvm::CallBase **)((char *)v122 + 5) == (llvm::CallBase *)0x6473326973747663)
                                                {
                                                  goto LABEL_2059;
                                                }
                                                if (*v122 == (llvm::CallBase *)0x7476632E32657373
                                                  && *(llvm::CallBase **)((char *)v122 + 5) == (llvm::CallBase *)0x6473327373747663)
                                                {
                                                  v1178 = (llvm::Value *)((void *)v1633
                                                                        - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                  LOWORD(NullValue) = 257;
                                                  ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v1178, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
                                                  v1179 = *(llvm::Type **)(*(void *)v1633 + 24);
                                                  LOWORD(NullValue) = 257;
                                                  SIToFP = llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v1647, ShuffleVector, v1179, (const llvm::Twine *)&__src);
                                                  goto LABEL_2060;
                                                }
                                                if ((*v122 != (llvm::CallBase *)0x7476632E32657373
                                                   || *(llvm::CallBase **)((char *)v122 + 5) != (llvm::CallBase *)0x6470327164747663)
                                                  && (*v122 != (llvm::CallBase *)0x7476632E32657373
                                                   || *(llvm::CallBase **)((char *)v122 + 5) != (llvm::CallBase *)0x7370327164747663))
                                                {
                                                  goto LABEL_2082;
                                                }
                                                goto LABEL_2348;
                                              case 0xEuLL:
                                                uint64_t v963 = *(uint64_t *)((char *)v122 + 6);
                                                BOOL v964 = *v122 == (llvm::CallBase *)0x737476632E657373;
                                                uint64_t v965 = 0x7373323436697374;
                                                goto LABEL_2054;
                                              case 0xFuLL:
                                                uint64_t v963 = *(uint64_t *)((char *)v122 + 7);
                                                BOOL v964 = *v122 == (llvm::CallBase *)0x7476632E32657373;
                                                uint64_t v965 = 0x6473323436697374;
LABEL_2054:
                                                if (!v964 || v963 != v965) {
                                                  goto LABEL_2082;
                                                }
                                                goto LABEL_2059;
                                              case 0x10uLL:
                                                if (*v122 != (llvm::CallBase *)0x632E323135787661
                                                  || v122[1] != (llvm::CallBase *)0x6473326973757476)
                                                {
                                                  goto LABEL_2082;
                                                }
                                                v974 = (llvm::Value *)((void *)v1633
                                                                     - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4];
                                                v975 = *(llvm::Type **)(*(void *)v1633 + 24);
                                                LOWORD(NullValue) = 257;
                                                SIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)v1647, v974, v975, (const llvm::Twine *)&__src);
                                                goto LABEL_2060;
                                              case 0x11uLL:
                                                if (*v122 != (llvm::CallBase *)0x647476632E787661
                                                  || v122[1] != (llvm::CallBase *)0x35322E64702E3271
                                                  || *((unsigned char *)v122 + 16) != 54)
                                                {
                                                  uint64_t v10 = *((unsigned __int8 *)v122 + 16);
                                                  BOOL v978 = *v122 == (llvm::CallBase *)0x647476632E787661
                                                      && v122[1] == (llvm::CallBase *)0x35322E73702E3271;
                                                  if (!v978 || v10 != 54) {
                                                    goto LABEL_2082;
                                                  }
                                                }
                                                goto LABEL_2348;
                                              default:
                                                goto LABEL_2082;
                                            }
                                          }
                                          v746 = v1633;
                                          int v747 = 1;
LABEL_1497:
                                          InsertElement = upgradePMULDQ((llvm::IRBuilderBase *)v1647, v746, v747);
LABEL_1586:
                                          AlignedLoad = InsertElement;
                                          ShuffleVector = (llvm::Value *)InsertElement;
LABEL_1587:
                                          BOOL v7 = v3;
LABEL_683:
                                          if (AlignedLoad)
                                          {
LABEL_1104:
                                            unint64_t v276 = v1633;
                                            v277 = (llvm::Value *)AlignedLoad;
                                            goto LABEL_1105;
                                          }
LABEL_1106:
                                          v322 = v1633;
LABEL_1107:
                                          llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*((void *)v322 + 5) + 40, (uint64_t)v322 + 24);
                                          goto LABEL_1108;
                                        }
LABEL_1454:
                                        v746 = v1633;
                                        int v747 = 0;
                                        goto LABEL_1497;
                                      }
                                      uint64_t v598 = 0x71642E756C756D70;
                                      if (*v122 == (llvm::CallBase *)0x756D702E32657373
                                        && *(llvm::CallBase **)((char *)v122 + 5) == (llvm::CallBase *)0x71642E756C756D70)
                                      {
                                        goto LABEL_1454;
                                      }
                                      uint64_t v600 = *(uint64_t *)((char *)v122 + 5);
                                      BOOL v601 = *v122 == (llvm::CallBase *)0x756D702E32787661;
                                    }
                                    if (v601 && v600 == v598) {
                                      goto LABEL_1454;
                                    }
                                    goto LABEL_1434;
                                  }
                                }
                              }
                              v665 = (uint64_t *)v1633;
                              int v666 = 309;
                            }
LABEL_1585:
                            InsertElement = UpgradeX86BinaryIntrinsics((llvm::IRBuilderBase *)v1647, v665, v666);
                            goto LABEL_1586;
                          }
                          BOOL v602 = *v35 == (llvm::CallBase *)0x6D2E323135787661
                              && v35[1] == (llvm::CallBase *)0x706D63752E6B7361;
                          uint64_t v603 = 46;
                          if (!v602 || *((unsigned char *)v35 + 16) != 46)
                          {
                            if (*v35 != (llvm::CallBase *)0x632E323135787661
                              || v35[1] != (llvm::CallBase *)0x6B73616D32627476
                              || *((unsigned char *)v35 + 16) != 46)
                            {
                              BOOL v607 = *v35 == (llvm::CallBase *)0x632E323135787661
                                  && v35[1] == (llvm::CallBase *)0x6B73616D32777476;
                              uint64_t v603 = 46;
                              if (!v607 || *((unsigned char *)v35 + 16) != 46)
                              {
                                uint64_t v11 = 0x6B73616D32647476;
                                BOOL v12 = (llvm::Instruction *)*((unsigned __int8 *)v35 + 16);
                                BOOL v609 = *v35 == (llvm::CallBase *)0x632E323135787661
                                    && v35[1] == (llvm::CallBase *)0x6B73616D32647476;
                                if (!v609 || v12 != 46)
                                {
                                  uint64_t v603 = (uint64_t)*v35;
                                  uint64_t v10 = *((unsigned __int8 *)v35 + 16);
                                  BOOL v611 = *v35 == (llvm::CallBase *)0x632E323135787661
                                      && v35[1] == (llvm::CallBase *)0x6B73616D32717476;
                                  if (!v611 || v10 != 46) {
                                    goto LABEL_922;
                                  }
                                }
                              }
                            }
                            v613 = (llvm::Constant ***)((char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                            v614 = *v613;
                            uint64_t v615 = llvm::Constant::getNullValue(**v613, (llvm::Type *)v603);
                            LOWORD(NullValue) = 257;
                            v478 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1647, 40, v614, v615, (uint64_t)&__src);
                            ShuffleVector = (llvm::Value *)v478;
                            uint64_t v479 = 0;
LABEL_747:
                            VectorSplat = ApplyX86MaskOn1BitsVec((llvm::IntegerType **)v1647, (llvm::Type *)v478, v479);
                            goto LABEL_682;
                          }
                          v667 = v1633;
                          uint64_t v670 = ((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
                          v671 = (void *)(v670 + 24);
                          if (*(_DWORD *)(v670 + 32) >= 0x41u) {
                            v671 = (void *)*v671;
                          }
                          int v668 = *(_DWORD *)v671;
                          int v672 = 0;
LABEL_1262:
                          VectorSplat = upgradeMaskedCompare((uint64_t)v1647, v667, v668, v672);
                          goto LABEL_682;
                        }
                        v673 = getX86MaskVec((uint64_t)v1647, *((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)), 0x10u);
                        v674 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(NullValue) = 257;
                        uint64_t v506 = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)v1647, (llvm::Value *)v673, (llvm::Value *)v674, (const llvm::Twine *)&__src);
                      }
LABEL_1253:
                      ICmp = v506;
                      ShuffleVector = (llvm::Value *)v506;
                      int64_t v296 = *(llvm::Type **)v1633;
                      LOWORD(NullValue) = 257;
                      goto LABEL_1256;
                    case 0xEuLL:
                      if (*v122 == (llvm::CallBase *)0x6B2E323135787661
                        && *(llvm::CallBase **)((char *)v122 + 6) == (llvm::CallBase *)0x772E6E646E616B2ELL)
                      {
                        v619 = getX86MaskVec((uint64_t)v1647, *((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)), 0x10u);
                        v620 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(NullValue) = 257;
                        v621 = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1647, (llvm::Constant **)v619, (const llvm::Twine *)&__src);
                        LOWORD(NullValue) = 257;
                        v622 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1647, (llvm::Value *)v621, (llvm::Value *)v620, (const llvm::Twine *)&__src);
                      }
                      else
                      {
                        if (*v122 != (llvm::CallBase *)0x6B2E323135787661
                          || *(llvm::CallBase **)((char *)v122 + 6) != (llvm::CallBase *)0x772E726F6E786B2ELL)
                        {
                          goto LABEL_865;
                        }
                        v675 = getX86MaskVec((uint64_t)v1647, *((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)), 0x10u);
                        v676 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(NullValue) = 257;
                        v677 = llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)v1647, (llvm::Constant **)v675, (const llvm::Twine *)&__src);
                        LOWORD(NullValue) = 257;
                        v622 = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)v1647, (llvm::Value *)v677, (llvm::Value *)v676, (const llvm::Twine *)&__src);
                      }
                      ICmp = v622;
                      ShuffleVector = (llvm::Value *)v622;
                      int64_t v296 = *(llvm::Type **)v1633;
                      LOWORD(NullValue) = 257;
LABEL_1256:
                      p_src = &__src;
                      goto LABEL_1257;
                    case 0x11uLL:
                      BOOL v508 = *v122 == (llvm::CallBase *)0x6B2E323135787661
                          && v122[1] == (llvm::CallBase *)0x2E7A74736574726FLL
                          && *((unsigned char *)v122 + 16) == 119;
                      if (v508
                        || (*v122 == (llvm::CallBase *)0x6B2E323135787661
                          ? (BOOL v509 = v122[1] == (llvm::CallBase *)0x2E6374736574726FLL)
                          : (BOOL v509 = 0),
                            v509 ? (BOOL v510 = *((unsigned char *)v122 + 16) == 119) : (BOOL v510 = 0),
                            v510))
                      {
                        v552 = getX86MaskVec((uint64_t)v1647, *((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)), 0x10u);
                        v553 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4], 0x10u);
                        LOWORD(NullValue) = 257;
                        ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v1647, (llvm::Value *)v552, (llvm::Value *)v553, (const llvm::Twine *)&__src);
                        v554 = (llvm::Type *)(*v1651 + 1968);
                        LOWORD(NullValue) = 257;
                        ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, (unsigned __int8 *)ShuffleVector, v554, (uint64_t)&__src);
                        v556 = (llvm::Constant *)(*v1651 + 1968);
                        if (*((unsigned char *)v1628 + 14) == 99) {
                          uint64_t v557 = llvm::Constant::getAllOnesValue(v556, v555);
                        }
                        else {
                          uint64_t v557 = llvm::Constant::getNullValue(v556, v555);
                        }
                        LOWORD(NullValue) = 257;
                        ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t)v1647, 32, (llvm::CmpInst **)ShuffleVector, v557, (uint64_t)&__src);
                        ShuffleVector = (llvm::Value *)ICmp;
                        int64_t v296 = (llvm::Type *)(*v1651 + 1992);
                        LOWORD(NullValue) = 257;
                        p_src = &__src;
                        int v298 = 39;
                        goto LABEL_410;
                      }
                      if (*v35 == (llvm::CallBase *)0x6D2E323135787661
                        && v35[1] == (llvm::CallBase *)0x706D63702E6B7361)
                      {
                        goto LABEL_1237;
                      }
                      goto LABEL_901;
                    default:
                      if (v36 < 0x10)
                      {
                        char v512 = 1;
                        char v513 = 1;
                        if (v36 >= 0xC) {
                          goto LABEL_903;
                        }
                        goto LABEL_921;
                      }
                      if (*v35 == (llvm::CallBase *)0x6D2E323135787661
                        && v35[1] == (llvm::CallBase *)0x706D63702E6B7361)
                      {
LABEL_1237:
                        v667 = v1633;
                        if (*((unsigned char *)v35 + 16) == 101) {
                          int v668 = 0;
                        }
                        else {
                          int v668 = 6;
                        }
                        goto LABEL_1261;
                      }
                      if (v36 >= 0x19)
                      {
                        if (*v35 == (llvm::CallBase *)0x6D2E323135787661
                          && v35[1] == (llvm::CallBase *)0x687370762E6B7361
                          && v35[2] == (llvm::CallBase *)0x626D717469626675
                          && *((unsigned char *)v35 + 24) == 46)
                        {
                          int v715 = llvm::Type::getPrimitiveSizeInBits(**((llvm::Type ***)v1633
                                                                     - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)));
                          if ((_BYTE)v714) {
                          if (v715 == 128)
                          }
                          {
                            int v713 = 10956;
                          }
                          else if (v715 == 256)
                          {
                            int v713 = 10957;
                          }
                          else
                          {
                            int v713 = 10958;
                          }
LABEL_1422:
                          uint64_t v738 = llvm::Intrinsic::getDeclaration(*((uint64_t ***)v1627 + 5), v713, 0, 0);
                          if (v738) {
                            uint64_t v739 = *(void *)(v738 + 24);
                          }
                          else {
                            uint64_t v739 = 0;
                          }
                          v740 = (llvm::hashing::detail::hash_state **)((char *)v1633
                                                                      - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                          v1644[0] = *v740;
                          v1644[1] = v740[4];
                          LOWORD(NullValue) = 257;
                          v478 = llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v739, v738, (uint64_t *)v1644, 2, (uint64_t)&__src, 0);
                          ShuffleVector = (llvm::Value *)v478;
                          uint64_t v479 = (unsigned __int8 *)((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[8];
                          goto LABEL_747;
                        }
                      }
                      else if (v36 < 0x15)
                      {
LABEL_901:
                        char v512 = 0;
                        goto LABEL_902;
                      }
                      if (*v35 != (llvm::CallBase *)0x6D2E323135787661
                        || v35[1] != (llvm::CallBase *)0x6C6370662E6B7361
                        || *(llvm::CallBase **)((char *)v35 + 13) != (llvm::CallBase *)0x702E7373616C6370)
                      {
                        char v512 = 0;
                        char v513 = 0;
                        goto LABEL_903;
                      }
                      uint64_t v709 = **((void **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
                      int v711 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v709);
                      if ((_BYTE)v710) {
                      if ((*(_DWORD *)(v709 + 8) & 0xFE) == 0x12)
                      }
                        uint64_t v709 = **(void **)(v709 + 16);
                      int v712 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v709);
                      if (v711 == 128 && v712 == 32)
                      {
                        int v713 = 10419;
                      }
                      else if (v711 == 256 && v712 == 32)
                      {
                        int v713 = 10420;
                      }
                      else if (v711 == 512 && v712 == 32)
                      {
                        int v713 = 10421;
                      }
                      else if (v711 == 128 && v712 == 64)
                      {
                        int v713 = 10416;
                      }
                      else if (v712 == 64 && v711 == 256)
                      {
                        int v713 = 10417;
                      }
                      else
                      {
                        int v713 = 10418;
                      }
                      goto LABEL_1422;
                  }
                }
                if (*v35 == (llvm::CallBase *)0x702E323135787661
                  && *(llvm::CallBase **)((char *)v35 + 5) == (llvm::CallBase *)0x6D74736574702E32)
                {
                  goto LABEL_685;
                }
                BOOL v377 = v36 < 0xE;
                if (v36 < 0xE)
                {
LABEL_604:
                  char v378 = 1;
LABEL_605:
                  if (*v35 != (llvm::CallBase *)0x6B2E323135787661
                    || *(llvm::CallBase **)((char *)v35 + 5) != (llvm::CallBase *)0x6B63706E756B2E32)
                  {
                    goto LABEL_609;
                  }
                  unint64_t v480 = *(llvm::Type **)v1633;
                  if ((*(_DWORD *)(*(void *)v1633 + 8) & 0xFE) == 0x12) {
                    unint64_t v480 = (llvm::Type *)**((void **)v480 + 2);
                  }
                  unsigned int v481 = llvm::Type::getPrimitiveSizeInBits(v480);
                  uint64_t v482 = getX86MaskVec((uint64_t)v1647, *((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF)), v481);
                  v483 = getX86MaskVec((uint64_t)v1647, ((unsigned __int8 **)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF))[4], v481);
                  if (v481)
                  {
                    uint64_t v484 = 0;
                    uint64_t v485 = (llvm::Type *)v481;
                    do
                    {
                      *((_DWORD *)&__src + v484) = v484;
                      ++v484;
                    }
                    while (v481 != v484);
                  }
                  else
                  {
                    uint64_t v485 = 0;
                  }
                  v549 = (llvm::Type *)(v481 >> 1);
                  __int16 v1646 = 257;
                  v550 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v482, (uint64_t)v482, (int *)&__src, v549, (uint64_t)v1644);
                  __int16 v1646 = 257;
                  v551 = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v483, (uint64_t)v483, (int *)&__src, v549, (uint64_t)v1644);
                  __int16 v1646 = 257;
                  ICmp = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)v1647, v551, (uint64_t)v550, (int *)&__src, v485, (uint64_t)v1644);
                  ShuffleVector = (llvm::Value *)ICmp;
                  int64_t v296 = *(llvm::Type **)v1633;
                  __int16 v1646 = 257;
                  p_src = v1644;
LABEL_1257:
                  int v298 = 49;
LABEL_410:
                  VectorSplat = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, v298, (unsigned __int8 *)ICmp, v296, (uint64_t)p_src);
                  goto LABEL_682;
                }
                if (*v35 == (llvm::CallBase *)0x702E323135787661
                  && *(llvm::CallBase **)((char *)v35 + 6) == (llvm::CallBase *)0x6D6E74736574702ELL)
                {
LABEL_685:
                  unint64_t v432 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                  v433 = *(llvm::Value **)v432;
                  unint64_t v434 = (llvm::Value *)*((void *)v432 + 4);
                  double v435 = (unsigned __int8 *)*((void *)v432 + 8);
                  LOWORD(NullValue) = 257;
                  ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v1647, v433, v434, (const llvm::Twine *)&__src);
                  uint64_t v437 = llvm::Constant::getNullValue(*(llvm::Constant **)v433, v436);
                  if (v1629 >= 0xD)
                  {
                    unint64_t v473 = bswap64((unint64_t)*v1628);
                    unint64_t v474 = 0x6176783531322E70;
                    if (v473 == 0x6176783531322E70
                      && (unint64_t v474 = 0x322E70746573746DLL,
                          unint64_t v473 = bswap64(*(unint64_t *)((char *)v1628 + 5)),
                          v473 == 0x322E70746573746DLL))
                    {
                      int v475 = 0;
                    }
                    else if (v473 < v474)
                    {
                      int v475 = -1;
                    }
                    else
                    {
                      int v475 = 1;
                    }
                    if (v475) {
                      __int16 v438 = 32;
                    }
                    else {
                      __int16 v438 = 33;
                    }
                  }
                  else
                  {
                    __int16 v438 = 32;
                  }
                  LOWORD(NullValue) = 257;
                  v478 = llvm::IRBuilderBase::CreateICmp((uint64_t)v1647, v438, (llvm::CmpInst **)ShuffleVector, v437, (uint64_t)&__src);
                  ShuffleVector = (llvm::Value *)v478;
                  uint64_t v479 = v435;
                  goto LABEL_747;
                }
                if (v36 < 0x16) {
                  goto LABEL_604;
                }
                if (*v35 != (llvm::CallBase *)0x6D2E323135787661
                  || v35[1] != (llvm::CallBase *)0x6F7262702E6B7361
                  || *(llvm::CallBase **)((char *)v35 + 14) != (llvm::CallBase *)0x7473616364616F72)
                {
                  char v378 = 0;
                  goto LABEL_605;
                }
                v623 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                v624 = (llvm::Type *)*(unsigned int *)(**((void **)v623 + 4) + 32);
                v625 = *(uint64_t ****)v623;
                LOWORD(NullValue) = 257;
                BOOL v129 = llvm::IRBuilderBase::CreateVectorSplat((llvm::IRBuilderBase *)v1647, v624, v625, (uint64_t)&__src);
LABEL_190:
                BOOL v130 = (llvm::Value *)v129;
                ShuffleVector = (llvm::Value *)v129;
                BOOL v131 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
                int v132 = (unsigned __int8 *)*((void *)v131 + 8);
                goto LABEL_191;
              }
              unint64_t v382 = (llvm::Value *)*((void *)v1633 - 4 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF));
              LOWORD(NullValue) = 257;
              v1644[0] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v1647, v382, (const llvm::Twine *)&__src, (const llvm::Twine *)v10);
              uint64_t v383 = (uint64_t **)*((void *)v1627 + 5);
              __src = *(void **)v1644[0];
              uint64_t v384 = llvm::Intrinsic::getDeclaration(v383, 283, (uint64_t)&__src, 1);
              if (v384) {
                uint64_t v385 = *(void *)(v384 + 24);
              }
              else {
                uint64_t v385 = 0;
              }
              LOWORD(NullValue) = 257;
              v1644[0] = (llvm::hashing::detail::hash_state *)llvm::IRBuilderBase::CreateCall((uint64_t)v1647, v385, v384, (uint64_t *)v1644, 1, (uint64_t)&__src, 0);
              LOWORD(NullValue) = 257;
              VectorSplat = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v1647, v382, v1644[0], (const llvm::Twine *)&__src, v459);
              goto LABEL_682;
            }
            if (*v35 != (llvm::CallBase *)0x6D2E323135787661
              || v35[1] != (llvm::CallBase *)0x726F74732E6B7361
              || *((unsigned char *)v35 + 16) != 101)
            {
              char v230 = 0;
              goto LABEL_328;
            }
            BOOL v309 = *((unsigned __int8 *)v35 + 17) != 117;
            v477 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
            unint64_t v307 = *(unsigned __int8 **)v477;
            int64_t v308 = (llvm::PointerType ***)*((void *)v477 + 4);
            uint64_t v305 = (uint64_t *)*((void *)v477 + 8);
LABEL_739:
            UpgradeMaskedStore((uint64_t *)v1647, v307, v308, (unsigned __int8 *)v305, v309);
            goto LABEL_1106;
          }
        }
        v202 = (uint64_t **)*((void *)v1627 + 5);
        v1644[0] = (llvm::hashing::detail::hash_state *)&v1645;
        v1644[1] = (llvm::hashing::detail::hash_state *)0x100000000;
        uint64_t v237 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(*v6 + 1992, 1);
        uint64_t v239 = llvm::ValueAsMetadata::get(v237, v238);
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v1644, v239);
        Impl = llvm::MDTuple::getImpl(v6, v1644[0], LODWORD(v1644[1]), 0, 1);
        unint64_t v240 = (char *)v1633 - 32 * (*((_DWORD *)v1633 + 5) & 0x7FFFFFF);
        uint64_t v241 = *(unsigned __int8 **)v240;
        uint64_t v242 = (llvm::PointerType ***)*((void *)v240 + 4);
        uint64_t v243 = (llvm::Type *)llvm::PointerType::get(*v242, 0);
        __src = "cast";
        LOWORD(NullValue) = 259;
        uint64_t v244 = llvm::IRBuilderBase::CreateCast((uint64_t)v1647, 49, v241, v243, (uint64_t)&__src);
        __int16 v215 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*v242) >> 3)) | 0x100;
        Element = (uint64_t *)v242;
        uint64_t v214 = (uint64_t)v244;
LABEL_340:
        AlignedStore = llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v1647, (llvm::Type **)Element, v214, v215, 0);
        int v246 = llvm::Module::getMDKindID(v202, (uint64_t *)"nontemporal", 0xBuLL);
        llvm::Instruction::setMetadata(AlignedStore, v246, Impl);
        llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*((void *)v1633 + 5) + 40, (uint64_t)v1633 + 24);
        __int16 v162 = v1644[0];
        if ((long long *)v1644[0] == &v1645) {
          goto LABEL_1108;
        }
        goto LABEL_341;
      }
      uint64_t v35 = (llvm::CallBase **)((char *)v35 + 5);
      v1628 = v35;
      size_t v1629 = v36 - 5;
      v36 -= 5;
    }
    if (v36 < 4) {
      goto LABEL_92;
    }
    goto LABEL_90;
  }
}

uint64_t *llvm::IRBuilderBase::CreateExtractElement(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3, const llvm::Twine *a4)
{
  BOOL v7 = (llvm::Value *)llvm::ConstantInt::get(**((void **)this + 8) + 2016, 0);
  return llvm::IRBuilderBase::CreateExtractElement(this, a2, v7, a3);
}

uint64_t *UpgradeMaskedStore(uint64_t *a1, unsigned __int8 *a2, llvm::PointerType ***a3, unsigned __int8 *a4, int a5)
{
  uint64_t v10 = (llvm::Type *)llvm::PointerType::get(*a3, 0);
  __int16 v16 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, a2, v10, (uint64_t)v15);
  if (a5)
  {
    __int16 v12 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*a3) >> 3));
    if (!a4) {
      goto LABEL_8;
    }
  }
  else
  {
    __int16 v12 = 0;
    if (!a4) {
      goto LABEL_8;
    }
  }
  if (a4[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)a4)) {
    return llvm::IRBuilderBase::CreateAlignedStore(a1, (llvm::Type **)a3, (uint64_t)Cast, v12 | 0x100u, 0);
  }
LABEL_8:
  X86MaskVec = getX86MaskVec((uint64_t)a1, a4, *((_DWORD *)*a3 + 8));
  return llvm::IRBuilderBase::CreateMaskedStore((uint64_t)a1, a3, Cast, v12, (uint64_t)X86MaskVec);
}

uint64_t *llvm::IRBuilderBase::CreateInsertElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, const llvm::Twine *a5)
{
  BOOL v9 = (llvm::Value *)llvm::ConstantInt::get(**((void **)this + 8) + 2016, 0);
  return llvm::IRBuilderBase::CreateInsertElement(this, a2, a3, v9, a4);
}

uint64_t *EmitX86Select(llvm::IRBuilderBase *a1, unsigned __int8 *a2, llvm::Value *a3, llvm::Value *a4)
{
  if (!a2 || a2[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a2))
  {
    X86MaskVec = getX86MaskVec((uint64_t)a1, a2, *(_DWORD *)(*(void *)a3 + 32));
    __int16 v11 = 257;
    return llvm::IRBuilderBase::CreateSelect(a1, (llvm::Value *)X86MaskVec, a3, a4, (const llvm::Twine *)v10, 0);
  }
  return (uint64_t *)a3;
}

uint64_t *ApplyX86MaskOn1BitsVec(llvm::IntegerType **a1, llvm::Type *a2, unsigned __int8 *a3)
{
  ShuffleVector = (uint64_t *)a2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned int *)(*(void *)a2 + 32);
  if (a3 && (a3[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a3)))
  {
    X86MaskVec = getX86MaskVec((uint64_t)a1, a3, v5);
    __int16 v15 = 257;
    ShuffleVector = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)a1, (llvm::Value *)ShuffleVector, (llvm::Value *)X86MaskVec, (const llvm::Twine *)v14);
  }
  if (v5 <= 7)
  {
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        v16[i] = i;
    }
    for (unsigned int j = v5; j != 8; ++j)
      v16[j] = j % v5 + v5;
    uint64_t NullValue = llvm::Constant::getNullValue((llvm::Constant *)*ShuffleVector, a2);
    __int16 v15 = 257;
    ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)a1, ShuffleVector, NullValue, v16, (llvm::Type *)8, (uint64_t)v14);
  }
  if (v5 <= 8) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = v5;
  }
  __int16 v12 = (llvm::Type *)llvm::IntegerType::get(a1[8], (llvm::LLVMContext *)v11);
  __int16 v15 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, (unsigned __int8 *)ShuffleVector, v12, (uint64_t)v14);
}

uint64_t *getX86MaskVec(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  llvm::FixedVectorType::get((uint64_t **)(**(void **)(a1 + 64) + 1920), (llvm::Type *)(*(_DWORD *)(*(void *)a2 + 8) >> 8));
  __int16 v12 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1, 49, a2, v6, (uint64_t)v11);
  if (a3 <= 4)
  {
    if (a3)
    {
      uint64_t v8 = 0;
      BOOL v9 = (llvm::Type *)a3;
      do
      {
        v13[v8] = v8;
        ++v8;
      }
      while (a3 != v8);
    }
    else
    {
      BOOL v9 = 0;
    }
    v11[0] = "extract";
    __int16 v12 = 259;
    return llvm::IRBuilderBase::CreateShuffleVector(a1, Cast, (uint64_t)Cast, v13, v9, (uint64_t)v11);
  }
  return Cast;
}

uint64_t *llvm::IRBuilderBase::CreateFAdd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  uint64_t v5 = a5;
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 84, (uint64_t *)a2, (uint64_t)a3, 0, (uint64_t)a4, a5, 0, 0);
  }
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *, void))(**((void **)this + 9) + 40))(*((void *)this + 9), 14, a2, a3, *((unsigned int *)this + 24));
  if (!result)
  {
    __int16 v15 = 257;
    uint64_t v11 = llvm::BinaryOperator::Create(14, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v14, 0);
    __int16 v12 = v11;
    int v13 = *((_DWORD *)this + 24);
    if (v5 || (uint64_t v5 = (llvm::MDNode *)*((void *)this + 11)) != 0) {
      llvm::Value::setMetadata((uint64_t)v11, 3, v5);
    }
    *((unsigned char *)v12 + 17) |= 2 * (_BYTE)v13;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v12, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateFSub(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  uint64_t v5 = a5;
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 97, (uint64_t *)a2, (uint64_t)a3, 0, (uint64_t)a4, a5, 0, 0);
  }
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *, void))(**((void **)this + 9) + 40))(*((void *)this + 9), 16, a2, a3, *((unsigned int *)this + 24));
  if (!result)
  {
    __int16 v15 = 257;
    uint64_t v11 = llvm::BinaryOperator::Create(16, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v14, 0);
    __int16 v12 = v11;
    int v13 = *((_DWORD *)this + 24);
    if (v5 || (uint64_t v5 = (llvm::MDNode *)*((void *)this + 11)) != 0) {
      llvm::Value::setMetadata((uint64_t)v11, 3, v5);
    }
    *((unsigned char *)v12 + 17) |= 2 * (_BYTE)v13;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v12, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateFMul(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  uint64_t v5 = a5;
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 90, (uint64_t *)a2, (uint64_t)a3, 0, (uint64_t)a4, a5, 0, 0);
  }
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *, void))(**((void **)this + 9) + 40))(*((void *)this + 9), 18, a2, a3, *((unsigned int *)this + 24));
  if (!result)
  {
    __int16 v15 = 257;
    uint64_t v11 = llvm::BinaryOperator::Create(18, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v14, 0);
    __int16 v12 = v11;
    int v13 = *((_DWORD *)this + 24);
    if (v5 || (uint64_t v5 = (llvm::MDNode *)*((void *)this + 11)) != 0) {
      llvm::Value::setMetadata((uint64_t)v11, 3, v5);
    }
    *((unsigned char *)v12 + 17) |= 2 * (_BYTE)v13;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v12, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateFDiv(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4, llvm::MDNode *a5)
{
  uint64_t v5 = a5;
  if (*((unsigned char *)this + 100)) {
    return llvm::IRBuilderBase::CreateConstrainedFPBinOp((uint64_t)this, 87, (uint64_t *)a2, (uint64_t)a3, 0, (uint64_t)a4, a5, 0, 0);
  }
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, llvm::Value *, void))(**((void **)this + 9) + 40))(*((void *)this + 9), 21, a2, a3, *((unsigned int *)this + 24));
  if (!result)
  {
    __int16 v15 = 257;
    uint64_t v11 = llvm::BinaryOperator::Create(21, (uint64_t *)a2, (uint64_t)a3, (const llvm::Twine *)v14, 0);
    __int16 v12 = v11;
    int v13 = *((_DWORD *)this + 24);
    if (v5 || (uint64_t v5 = (llvm::MDNode *)*((void *)this + 11)) != 0) {
      llvm::Value::setMetadata((uint64_t)v11, 3, v5);
    }
    *((unsigned char *)v12 + 17) |= 2 * (_BYTE)v13;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v12, (uint64_t)a4);
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateInsertElement(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, const llvm::Twine *a5)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(**((void **)this + 9) + 104))(*((void *)this + 9));
  if (!result)
  {
    __int16 v16 = 257;
    uint64_t v11 = (char *)operator new(0xA0uLL);
    uint64_t v12 = 0;
    int v13 = (uint64_t *)(v11 + 96);
    *((_DWORD *)v11 + 29) = *((_DWORD *)v11 + 29) & 0x38000000 | 3;
    do
    {
      uint64_t v14 = &v11[v12];
      *(void *)uint64_t v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = v13;
      v12 += 32;
    }
    while (v12 != 96);
    llvm::InsertElementInst::InsertElementInst((llvm::InsertElementInst *)(v11 + 96), a2, a3, a4, (const llvm::Twine *)v15, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, v13, (uint64_t)a5);
  }
  return result;
}

uint64_t *upgradeMaskedCompare(uint64_t a1, llvm::CallBase *a2, int a3, int a4)
{
  BOOL v6 = (llvm::CmpInst ***)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  BOOL v7 = *v6;
  __int16 v8 = 32;
  switch(a3)
  {
    case 1:
      BOOL v10 = a4 == 0;
      __int16 v11 = 36;
      __int16 v12 = 40;
      goto LABEL_8;
    case 2:
      BOOL v10 = a4 == 0;
      __int16 v11 = 37;
      __int16 v12 = 41;
      goto LABEL_8;
    case 3:
      llvm::FixedVectorType::get((uint64_t **)(**(void **)(a1 + 64) + 1920), (llvm::Type *)*((unsigned int *)**v6 + 8));
      uint64_t NullValue = (uint64_t *)llvm::Constant::getNullValue(v13, v14);
      goto LABEL_12;
    case 4:
      __int16 v8 = 33;
      goto LABEL_11;
    case 5:
      BOOL v10 = a4 == 0;
      __int16 v11 = 35;
      __int16 v12 = 39;
      goto LABEL_8;
    case 6:
      BOOL v10 = a4 == 0;
      __int16 v11 = 34;
      __int16 v12 = 38;
LABEL_8:
      if (v10) {
        __int16 v8 = v11;
      }
      else {
        __int16 v8 = v12;
      }
      goto LABEL_11;
    case 7:
      llvm::FixedVectorType::get((uint64_t **)(**(void **)(a1 + 64) + 1920), (llvm::Type *)*((unsigned int *)**v6 + 8));
      uint64_t NullValue = (uint64_t *)llvm::Constant::getAllOnesValue(v21, v22);
      goto LABEL_12;
    default:
LABEL_11:
      uint64_t v16 = (uint64_t)v6[4];
      __int16 v24 = 257;
      uint64_t NullValue = llvm::IRBuilderBase::CreateICmp(a1, v8, v7, v16, (uint64_t)v23);
LABEL_12:
      uint64_t v17 = (llvm::Type *)NullValue;
      uint64_t v18 = llvm::CallBase::arg_end(a2);
      size_t v19 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
      return ApplyX86MaskOn1BitsVec((llvm::IntegerType **)a1, v17, *(unsigned __int8 **)&v19[8 * ((unint64_t)(v18 - (void)v19) >> 5) - 8]);
  }
}

uint64_t *upgradeAbs(llvm::IRBuilderBase *a1, uint64_t *a2)
{
  v15[2] = *MEMORY[0x263EF8340];
  uint64_t v14 = *a2;
  uint64_t v4 = a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(a2[5] + 56) + 40), 1, (uint64_t)&v14, 1);
  uint64_t v6 = Declaration;
  if (Declaration) {
    uint64_t v7 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v7 = 0;
  }
  v15[0] = v4;
  v15[1] = llvm::ConstantInt::get(**((void **)a1 + 8) + 1920, 0);
  __int16 v13 = 257;
  __int16 v8 = llvm::IRBuilderBase::CreateCall((uint64_t)a1, v7, v6, v15, 2, (uint64_t)v12, 0);
  uint64_t v9 = llvm::CallBase::arg_end((llvm::CallBase *)a2);
  BOOL v10 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  if (((v9 - (void)v10) & 0x1FFFFFFFE0) == 0x60) {
    return EmitX86Select(a1, (unsigned __int8 *)v10[8], (llvm::Value *)v8, (llvm::Value *)v10[4]);
  }
  return v8;
}

uint64_t *UpgradeX86BinaryIntrinsics(llvm::IRBuilderBase *a1, uint64_t *a2, int a3)
{
  _OWORD v17[2] = *MEMORY[0x263EF8340];
  uint64_t v16 = *a2;
  uint64_t v5 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[4];
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(a2[5] + 56) + 40), a3, (uint64_t)&v16, 1);
  if (Declaration) {
    uint64_t v9 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v9 = 0;
  }
  v17[0] = v6;
  v17[1] = v7;
  __int16 v15 = 257;
  BOOL v10 = llvm::IRBuilderBase::CreateCall((uint64_t)a1, v9, Declaration, v17, 2, (uint64_t)v14, 0);
  uint64_t v11 = llvm::CallBase::arg_end((llvm::CallBase *)a2);
  __int16 v12 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  if (((v11 - (void)v12) & 0x1FFFFFFFE0) == 0x80) {
    return EmitX86Select(a1, (unsigned __int8 *)v12[12], (llvm::Value *)v10, (llvm::Value *)v12[8]);
  }
  return v10;
}

uint64_t *upgradePMULDQ(llvm::IRBuilderBase *a1, llvm::CallBase *a2, int a3)
{
  uint64_t v6 = *(llvm::Type **)a2;
  uint64_t v7 = (unsigned __int8 *)*((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  __int16 v22 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, v7, v6, (uint64_t)v21);
  uint64_t v9 = (unsigned __int8 *)((void *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  __int16 v22 = 257;
  BOOL v10 = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, v9, v6, (uint64_t)v21);
  if (a3)
  {
    uint64_t v11 = (llvm::Value *)llvm::ConstantInt::get(v6, (llvm::Type *)0x20);
    __int16 v22 = 257;
    Shl = llvm::IRBuilderBase::CreateShl(a1, (llvm::Value *)Cast, v11, (const llvm::Twine *)v21, 0, 0);
    __int16 v22 = 257;
    AShr = llvm::IRBuilderBase::CreateAShr(a1, (llvm::Value *)Shl, v11, (const llvm::Twine *)v21, 0);
    __int16 v22 = 257;
    uint64_t v14 = llvm::IRBuilderBase::CreateShl(a1, (llvm::Value *)v10, v11, (const llvm::Twine *)v21, 0, 0);
    __int16 v22 = 257;
    __int16 v15 = llvm::IRBuilderBase::CreateAShr(a1, (llvm::Value *)v14, v11, (const llvm::Twine *)v21, 0);
  }
  else
  {
    uint64_t v16 = (llvm::Value *)llvm::ConstantInt::get(v6, (llvm::Type *)0xFFFFFFFFLL);
    __int16 v22 = 257;
    AShr = llvm::IRBuilderBase::CreateAnd(a1, (llvm::Value *)Cast, v16, (const llvm::Twine *)v21);
    __int16 v22 = 257;
    __int16 v15 = llvm::IRBuilderBase::CreateAnd(a1, (llvm::Value *)v10, v16, (const llvm::Twine *)v21);
  }
  __int16 v22 = 257;
  Mul = llvm::IRBuilderBase::CreateMul(a1, (llvm::Value *)AShr, (llvm::Value *)v15, (const llvm::Twine *)v21, 0, 0);
  uint64_t v18 = llvm::CallBase::arg_end(a2);
  size_t v19 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  if (((v18 - (void)v19) & 0x1FFFFFFFE0) == 0x80) {
    return EmitX86Select(a1, *((unsigned __int8 **)v19 + 12), (llvm::Value *)Mul, *((llvm::Value **)v19 + 8));
  }
  return Mul;
}

uint64_t *llvm::IRBuilderBase::CreateSIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return (uint64_t *)llvm::IRBuilderBase::CreateConstrainedFPCast((uint64_t)this, 116, (uint64_t *)a2, (uint64_t)a3, 0, (uint64_t)a4, 0, 0, 0);
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 44, (unsigned __int8 *)a2, a3, (uint64_t)a4);
}

uint64_t *llvm::IRBuilderBase::CreateUIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return (uint64_t *)llvm::IRBuilderBase::CreateConstrainedFPCast((uint64_t)this, 119, (uint64_t *)a2, (uint64_t)a3, 0, (uint64_t)a4, 0, 0, 0);
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 43, (unsigned __int8 *)a2, a3, (uint64_t)a4);
}

uint64_t *llvm::IRBuilderBase::CreateFPExt(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((unsigned char *)this + 100)) {
    return (uint64_t *)llvm::IRBuilderBase::CreateConstrainedFPCast((uint64_t)this, 92, (uint64_t *)a2, (uint64_t)a3, 0, (uint64_t)a4, 0, 0, 0);
  }
  return llvm::IRBuilderBase::CreateCast((uint64_t)this, 46, (unsigned __int8 *)a2, a3, (uint64_t)a4);
}

uint64_t *UpgradeMaskedLoad(uint64_t *a1, unsigned __int8 *a2, llvm::PointerType ***a3, unsigned __int8 *a4, int a5)
{
  BOOL v10 = *a3;
  uint64_t v11 = (llvm::Type *)llvm::PointerType::get(*a3, 0);
  __int16 v17 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, a2, v11, (uint64_t)v16);
  if (a5)
  {
    __int16 v13 = (63 - __clz(llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*a3) >> 3));
    if (!a4) {
      goto LABEL_8;
    }
  }
  else
  {
    __int16 v13 = 0;
    if (!a4) {
      goto LABEL_8;
    }
  }
  if (a4[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)a4))
  {
    __int16 v17 = 257;
    return llvm::IRBuilderBase::CreateAlignedLoad(a1, (llvm::Type *)v10, (llvm::Value *)Cast, v13 | 0x100u, 0, (uint64_t)v16);
  }
LABEL_8:
  X86MaskVec = getX86MaskVec((uint64_t)a1, a4, *((_DWORD *)v10 + 8));
  __int16 v17 = 257;
  return llvm::IRBuilderBase::CreateMaskedLoad((uint64_t)a1, (llvm::PoisonValue *)v10, Cast, v13, (uint64_t)X86MaskVec, (uint64_t)a3, (uint64_t)v16);
}

uint64_t *upgradeX86vpcom(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = *(llvm::Constant **)a2;
  uint64_t v7 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  __int16 v8 = *(llvm::CmpInst ***)v7;
  uint64_t v9 = *(void *)(v7 + 32);
  __int16 v10 = 32;
  switch(a3)
  {
    case 1:
      BOOL v12 = a4 == 0;
      __int16 v13 = 37;
      __int16 v14 = 41;
      goto LABEL_6;
    case 2:
      BOOL v12 = a4 == 0;
      __int16 v13 = 34;
      __int16 v14 = 38;
      goto LABEL_6;
    case 3:
      BOOL v12 = a4 == 0;
      __int16 v13 = 35;
      __int16 v14 = 39;
      goto LABEL_6;
    case 4:
      goto LABEL_10;
    case 5:
      __int16 v10 = 33;
      goto LABEL_10;
    case 6:
      return (uint64_t *)llvm::Constant::getNullValue(v6, (llvm::Type *)0x20);
    case 7:
      return (uint64_t *)llvm::Constant::getAllOnesValue(v6, (llvm::Type *)0x20);
    default:
      BOOL v12 = a4 == 0;
      __int16 v13 = 36;
      __int16 v14 = 40;
LABEL_6:
      if (v12) {
        __int16 v10 = v13;
      }
      else {
        __int16 v10 = v14;
      }
LABEL_10:
      __int16 v18 = 257;
      ICmp = llvm::IRBuilderBase::CreateICmp(a1, v10, v8, v9, (uint64_t)v17);
      __int16 v18 = 257;
      return llvm::IRBuilderBase::CreateCast(a1, 40, (unsigned __int8 *)ICmp, v6, (uint64_t)v17);
  }
}

uint64_t *upgradeX86Rotate(llvm::IRBuilderBase *this, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, llvm::Instruction *a6)
{
  v25[3] = *MEMORY[0x263EF8340];
  uint64_t v9 = *a2;
  uint64_t v24 = v9;
  __int16 v10 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  uint64_t v11 = *v10;
  VectorSplat = (uint64_t *)v10[4];
  if (*VectorSplat != v9)
  {
    __int16 v13 = (llvm::Type *)*(unsigned int *)(v9 + 32);
    if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12) {
      uint64_t v9 = **(void **)(v9 + 16);
    }
    __int16 v23 = 257;
    IntCast = llvm::IRBuilderBase::CreateIntCast(this, (llvm::Value *)VectorSplat, (llvm::Type ***)v9, 0, (const llvm::Twine *)v22, a6);
    __int16 v23 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(this, v13, (uint64_t ***)IntCast, (uint64_t)v22);
  }
  if (a3) {
    int v15 = 149;
  }
  else {
    int v15 = 148;
  }
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(a2[5] + 56) + 40), v15, (uint64_t)&v24, 1);
  if (Declaration) {
    uint64_t v17 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v17 = 0;
  }
  v25[0] = v11;
  v25[1] = v11;
  v25[2] = (uint64_t)VectorSplat;
  __int16 v23 = 257;
  __int16 v18 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v17, Declaration, v25, 3, (uint64_t)v22, 0);
  uint64_t v19 = llvm::CallBase::arg_end((llvm::CallBase *)a2);
  size_t v20 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  if (((v19 - (void)v20) & 0x1FFFFFFFE0) == 0x80) {
    return EmitX86Select(this, (unsigned __int8 *)v20[12], (llvm::Value *)v18, (llvm::Value *)v20[8]);
  }
  return v18;
}

uint64_t *upgradeX86ConcatShift(llvm::IRBuilderBase *this, uint64_t *a2, int a3, int a4, uint64_t a5, llvm::Instruction *a6)
{
  v32[3] = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  uint64_t v31 = *a2;
  uint64_t v11 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  VectorSplat = (uint64_t *)v11[8];
  if (a3) {
    uint64_t v13 = *v11;
  }
  else {
    uint64_t v13 = v11[4];
  }
  if (a3) {
    uint64_t v14 = v11[4];
  }
  else {
    uint64_t v14 = *v11;
  }
  if (*VectorSplat != v10)
  {
    int v15 = (llvm::Type *)*(unsigned int *)(v10 + 32);
    if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
      uint64_t v10 = **(void **)(v10 + 16);
    }
    __int16 v30 = 257;
    IntCast = llvm::IRBuilderBase::CreateIntCast(this, (llvm::Value *)VectorSplat, (llvm::Type ***)v10, 0, (const llvm::Twine *)v29, a6);
    __int16 v30 = 257;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat(this, v15, (uint64_t ***)IntCast, (uint64_t)v29);
  }
  if (a3) {
    int v17 = 149;
  }
  else {
    int v17 = 148;
  }
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(a2[5] + 56) + 40), v17, (uint64_t)&v31, 1);
  if (Declaration) {
    uint64_t v19 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v19 = 0;
  }
  v32[0] = v14;
  v32[1] = v13;
  void v32[2] = (uint64_t)VectorSplat;
  __int16 v30 = 257;
  size_t v20 = llvm::IRBuilderBase::CreateCall((uint64_t)this, v19, Declaration, v32, 3, (uint64_t)v29, 0);
  uint64_t v21 = llvm::CallBase::arg_end((llvm::CallBase *)a2);
  uint64_t v23 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  uint64_t v24 = (llvm::Value **)&a2[-4 * v23];
  unint64_t v25 = (unint64_t)(v21 - (void)v24) >> 5;
  if (v25 >= 4)
  {
    uint64_t v26 = -v23;
    if (v25 == 5)
    {
      int v27 = v24[12];
    }
    else if (a4)
    {
      int v27 = (llvm::Value *)llvm::ConstantAggregateZero::get((llvm::ConstantAggregateZero *)*a2, v22);
      uint64_t v26 = -(uint64_t)(*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    }
    else
    {
      int v27 = *v24;
    }
    return EmitX86Select(this, (unsigned __int8 *)a2[4 * v26 + 4 * (v25 - 1)], (llvm::Value *)v20, v27);
  }
  return v20;
}

uint64_t *llvm::IRBuilderBase::CreateShuffleVector(uint64_t a1, llvm::PoisonValue **a2, int *a3, llvm::Type *a4, uint64_t a5)
{
  uint64_t v10 = llvm::PoisonValue::get(*a2, (llvm::Type *)a2);
  return llvm::IRBuilderBase::CreateShuffleVector(a1, a2, v10, a3, a4, a5);
}

uint64_t *llvm::IRBuilderBase::CreatePointerCast(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4, llvm::Instruction *a5)
{
  if (*(llvm::Type **)a2 == a3) {
    return (uint64_t *)a2;
  }
  if (*((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    __int16 v11 = 257;
    PointerCast = (uint64_t *)llvm::CastInst::CreatePointerCast(a2, a3, (llvm::Type *)v10, 0, a5);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, PointerCast, (uint64_t)a4);
  }
  a2 = (llvm::Value *)(*(uint64_t (**)(void))(**((void **)this + 9) + 128))(*((void *)this + 9));
  if (a2) {
    BOOL v7 = *((unsigned __int8 *)a2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7) {
    return (uint64_t *)a2;
  }
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)a2, (uint64_t)a4);
}

uint64_t *UpgradeX86ALIGNIntrinsics(llvm::IRBuilderBase *a1, llvm::Type *a2, void *a3, uint64_t a4, llvm::Value *a5, unsigned __int8 *a6, int a7)
{
  uint64_t v10 = (uint64_t)a2;
  uint64_t v34 = *MEMORY[0x263EF8340];
  BOOL v12 = (void *)(a4 + 24);
  if (*(_DWORD *)(a4 + 32) >= 0x41u) {
    BOOL v12 = (void *)*v12;
  }
  unsigned int v13 = *(_DWORD *)v12;
  uint64_t v14 = *(llvm::Constant **)a2;
  int v15 = (llvm::Type *)*(unsigned int *)(*(void *)a2 + 32);
  int v16 = v15 - 1;
  if (!a7) {
    int v16 = -1;
  }
  unsigned int v17 = v16 & v13;
  if ((v16 & v13) < 0x20)
  {
    if (v17 >= 0x11)
    {
      v17 -= 16;
      uint64_t NullValue = llvm::Constant::getNullValue(v14, a2);
      a3 = (void *)v10;
      uint64_t v10 = NullValue;
    }
    if (v15)
    {
      unint64_t v20 = 0;
      int32x2_t v21 = vdup_n_s32(v17);
      int8x8_t v22 = (int8x8_t)vdup_n_s32((int)v15 - 16);
      uint64_t v23 = v33;
      do
      {
        uint64_t v24 = 0;
        int32x2_t v25 = vdup_n_s32(v20);
        int32x2_t v26 = (int32x2_t)0x100000000;
        do
        {
          int32x2_t v27 = vadd_s32(v21, v26);
          int8x8_t v28 = (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, (uint32x2_t)v27);
          if (a7) {
            unsigned int v29 = -1;
          }
          else {
            unsigned int v29 = 0;
          }
          *(int32x2_t *)&v23[v24] = vadd_s32(vadd_s32(v27, v25), (int32x2_t)vbic_s8(v22, vorr_s8(v28, (int8x8_t)vdup_n_s32(v29))));
          int32x2_t v26 = vadd_s32(v26, (int32x2_t)0x200000002);
          v24 += 2;
        }
        while (v24 != 16);
        v20 += 16;
        v23 += 16;
      }
      while (v20 < (unint64_t)v15);
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v31 = "palignr";
    __int16 v32 = 259;
    ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector((uint64_t)a1, a3, v10, v33, v15, (uint64_t)&v31);
    return EmitX86Select(a1, a6, (llvm::Value *)ShuffleVector, a5);
  }
  else
  {
    return (uint64_t *)llvm::Constant::getNullValue(v14, a2);
  }
}

uint64_t *UpgradeX86PSLLDQIntrinsics(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(llvm::Type **)a2;
  BOOL v7 = (llvm::Type *)(8 * *(_DWORD *)(*(void *)a2 + 32));
  llvm::FixedVectorType::get((uint64_t **)(**(void **)(a1 + 64) + 1944), v7);
  uint64_t v9 = v8;
  *(void *)int32x2_t v25 = "cast";
  __int16 v26 = 259;
  Cast = llvm::IRBuilderBase::CreateCast(a1, 49, a2, v8, (uint64_t)v25);
  uint64_t NullValue = (uint64_t *)llvm::Constant::getNullValue(v9, v11);
  if (a3 <= 0xF)
  {
    if (v7)
    {
      unsigned int v13 = 0;
      int32x4_t v14 = vdupq_n_s32(v7 - a3);
      uint32x4_t v15 = (uint32x4_t)vdupq_n_s32(v7);
      int8x16_t v16 = (int8x16_t)vdupq_n_s32(16 - (int)v7);
      unsigned int v17 = v25;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      do
      {
        uint64_t v19 = 0;
        int32x4_t v20 = vdupq_n_s32(v13);
        int32x4_t v21 = (int32x4_t)xmmword_261E91BF0;
        do
        {
          int32x4_t v22 = vaddq_s32(v14, v21);
          *(int32x4_t *)&v17[v19] = vaddq_s32(vaddq_s32(v22, v20), (int32x4_t)vandq_s8(v16, (int8x16_t)vcgtq_u32(v15, (uint32x4_t)v22)));
          int32x4_t v21 = vaddq_s32(v21, v18);
          v19 += 4;
        }
        while (v19 != 16);
        v13 += 16;
        v17 += 16;
      }
      while (v7 != v13);
    }
    v24[16] = 257;
    uint64_t NullValue = llvm::IRBuilderBase::CreateShuffleVector(a1, NullValue, (uint64_t)Cast, v25, v7, (uint64_t)v24);
  }
  *(void *)int32x2_t v25 = "cast";
  __int16 v26 = 259;
  return llvm::IRBuilderBase::CreateCast(a1, 49, (unsigned __int8 *)NullValue, v6, (uint64_t)v25);
}

uint64_t *UpgradeX86PSRLDQIntrinsics(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(llvm::Type **)a2;
  BOOL v7 = (llvm::Type *)(8 * *(_DWORD *)(*(void *)a2 + 32));
  llvm::FixedVectorType::get((uint64_t **)(**(void **)(a1 + 64) + 1944), v7);
  uint64_t v9 = v8;
  *(void *)int32x2_t v25 = "cast";
  __int16 v26 = 259;
  Cast = llvm::IRBuilderBase::CreateCast(a1, 49, a2, v8, (uint64_t)v25);
  uint64_t NullValue = (uint64_t *)llvm::Constant::getNullValue(v9, v11);
  if (a3 <= 0xF)
  {
    if (v7)
    {
      unsigned int v13 = 0;
      int32x4_t v14 = vdupq_n_s32(a3);
      int8x16_t v15 = (int8x16_t)vdupq_n_s32((int)v7 - 16);
      int8x16_t v16 = v25;
      v17.i64[0] = 0xF0000000FLL;
      v17.i64[1] = 0xF0000000FLL;
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      do
      {
        uint64_t v19 = 0;
        int32x4_t v20 = vdupq_n_s32(v13);
        int32x4_t v21 = (int32x4_t)xmmword_261E91BF0;
        do
        {
          int32x4_t v22 = vaddq_s32(v21, v14);
          *(int32x4_t *)&v16[v19] = vaddq_s32(vaddq_s32(v22, v20), (int32x4_t)vandq_s8(v15, (int8x16_t)vcgtq_u32((uint32x4_t)v22, v17)));
          int32x4_t v21 = vaddq_s32(v21, v18);
          v19 += 4;
        }
        while (v19 != 16);
        v13 += 16;
        v16 += 16;
      }
      while (v7 != v13);
    }
    v24[16] = 257;
    uint64_t NullValue = llvm::IRBuilderBase::CreateShuffleVector(a1, Cast, (uint64_t)NullValue, v25, v7, (uint64_t)v24);
  }
  *(void *)int32x2_t v25 = "cast";
  __int16 v26 = 259;
  return llvm::IRBuilderBase::CreateCast(a1, 49, (unsigned __int8 *)NullValue, v6, (uint64_t)v25);
}

double llvm::VectorType::getInteger(uint64_t a1)
{
  unint64_t PrimitiveSizeInBits = (llvm::LLVMContext *)llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)(a1 + 24));
  if ((_BYTE)v2) {
  uint64_t v4 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)a1, PrimitiveSizeInBits);
  }
  uint64_t v5 = (llvm::Type *)(*(unsigned int *)(a1 + 32) | ((unint64_t)(*(unsigned char *)(a1 + 8) == 19) << 32));
  return llvm::VectorType::get(v4, v5);
}

uint64_t *UpgradeX86MaskedShift(llvm::IRBuilderBase *a1, uint64_t a2, int a3)
{
  void v14[2] = *MEMORY[0x263EF8340];
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a2 + 40) + 56) + 40), a3, 0, 0);
  if (Declaration) {
    uint64_t v6 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v6 = 0;
  }
  BOOL v7 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[4];
  v14[0] = v8;
  v14[1] = v9;
  unsigned char v13[16] = 257;
  uint64_t v10 = llvm::IRBuilderBase::CreateCall((uint64_t)a1, v6, Declaration, v14, 2, (uint64_t)v13, 0);
  uint64_t v11 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  return EmitX86Select(a1, *(unsigned __int8 **)(v11 + 96), (llvm::Value *)v10, *(llvm::Value **)(v11 + 64));
}

uint64_t *upgradeMaskedMove(llvm::IRBuilderBase *a1, uint64_t a2, const llvm::APInt *a3, unint64_t *a4)
{
  uint64_t v5 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  uint64_t v6 = *(llvm::Value **)v5;
  BOOL v7 = *(llvm::Value **)(v5 + 32);
  uint64_t v8 = *(llvm::Value **)(v5 + 64);
  uint64_t v9 = *(llvm::IntegerType ****)(v5 + 96);
  unsigned int v25 = 8;
  uint64_t v24 = 1;
  __int16 v23 = 257;
  uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get(*v9, (llvm::Type *)&v24, a3, a4);
  BOOL v12 = llvm::IRBuilderBase::CreateAnd(a1, (llvm::Value *)v9, v10, (const llvm::Twine *)v22);
  if (v25 >= 0x41 && v24) {
    MEMORY[0x263E50080](v24, 0x1000C8000313F17);
  }
  __int16 v23 = 257;
  uint64_t NullValue = llvm::Constant::getNullValue((llvm::Constant *)*v12, v11);
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t)a1, 33, (llvm::CmpInst **)v12, NullValue, (uint64_t)v22);
  __int16 v23 = 257;
  int8x16_t v15 = (llvm::Value *)llvm::ConstantInt::get(**((void **)a1 + 8) + 2016, 0);
  Element = llvm::IRBuilderBase::CreateExtractElement(a1, v7, v15, (const llvm::Twine *)v22);
  __int16 v23 = 257;
  uint32x4_t v17 = (llvm::Value *)llvm::ConstantInt::get(**((void **)a1 + 8) + 2016, 0);
  int32x4_t v18 = llvm::IRBuilderBase::CreateExtractElement(a1, v8, v17, (const llvm::Twine *)v22);
  __int16 v23 = 257;
  Select = llvm::IRBuilderBase::CreateSelect(a1, (llvm::Value *)ICmp, (llvm::Value *)Element, (llvm::Value *)v18, (const llvm::Twine *)v22, 0);
  __int16 v23 = 257;
  int32x4_t v20 = (llvm::Value *)llvm::ConstantInt::get(**((void **)a1 + 8) + 2016, 0);
  return llvm::IRBuilderBase::CreateInsertElement(a1, v6, (llvm::Value *)Select, v20, (const llvm::Twine *)v22);
}

uint64_t *UpgradeMaskToInt(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(llvm::Type **)a2;
  X86MaskVec = getX86MaskVec(a1, *(unsigned __int8 **)&a2[-8 * (a2[5] & 0x7FFFFFF)], *(_DWORD *)(*(void *)a2 + 32));
  uint64_t v6 = "vpmovm2";
  __int16 v7 = 259;
  return llvm::IRBuilderBase::CreateCast(a1, 40, (unsigned __int8 *)X86MaskVec, v3, (uint64_t)&v6);
}

uint64_t *llvm::IRBuilderBase::CreateFNeg(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3, llvm::MDNode *a4)
{
  uint64_t result = (uint64_t *)(*(uint64_t (**)(void, uint64_t, llvm::Value *, void))(**((void **)this + 9) + 48))(*((void *)this + 9), 12, a2, *((unsigned int *)this + 24));
  if (!result)
  {
    __int16 v13 = 257;
    uint64_t v9 = llvm::UnaryOperator::Create(12, a2, (const llvm::Twine *)v12, 0);
    uint64_t v10 = v9;
    int v11 = *((_DWORD *)this + 24);
    if (a4 || (a4 = (llvm::MDNode *)*((void *)this + 11)) != 0) {
      llvm::Value::setMetadata((uint64_t)v9, 3, a4);
    }
    *((unsigned char *)v10 + 17) |= 2 * (_BYTE)v11;
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)this, (uint64_t *)v10, (uint64_t)a3);
  }
  return result;
}

uint64_t *EmitX86ScalarSelect(llvm::IRBuilderBase *a1, unsigned __int8 *a2, llvm::Value *a3, llvm::Value *a4)
{
  if (!a2 || a2[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)a2))
  {
    llvm::FixedVectorType::get((uint64_t **)(**((void **)a1 + 8) + 1920), (llvm::Type *)(*(_DWORD *)(*(void *)a2 + 8) >> 8));
    __int16 v14 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, a2, v8, (uint64_t)v13);
    __int16 v14 = 257;
    uint64_t v10 = (llvm::Value *)llvm::ConstantInt::get(**((void **)a1 + 8) + 2016, 0);
    Element = llvm::IRBuilderBase::CreateExtractElement(a1, (llvm::Value *)Cast, v10, (const llvm::Twine *)v13);
    __int16 v14 = 257;
    return llvm::IRBuilderBase::CreateSelect(a1, (llvm::Value *)Element, a3, a4, (const llvm::Twine *)v13, 0);
  }
  return (uint64_t *)a3;
}

uint64_t *UpgradeX86VPERMT2Intrinsics(llvm::IRBuilderBase *a1, uint64_t a2, int a3, char a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(llvm::Type **)a2;
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
  if ((_BYTE)v9) {
  int v11 = *((_DWORD *)v8 + 2);
  }
  if ((v11 & 0xFE) == 0x12)
  {
    BOOL v12 = (llvm::Type *)**((void **)v8 + 2);
    int v13 = llvm::Type::getPrimitiveSizeInBits(v12);
    int v11 = *((_DWORD *)v12 + 2);
  }
  else
  {
    int v13 = llvm::Type::getPrimitiveSizeInBits(v8);
  }
  BOOL v14 = v11 < 6u && ((0x2Fu >> v11) & 1) != 0 || (v11 & 0xFD) == 4;
  BOOL v15 = PrimitiveSizeInBits == 128 && v13 == 32;
  int v16 = !v15;
  int v17 = !v14;
  if (!v15 || v17)
  {
    if ((v14 | v16) == 1)
    {
      BOOL v19 = PrimitiveSizeInBits == 128 && v13 == 64;
      int v20 = !v19;
      int v21 = !v19 || !v14;
      if (v21 == 1)
      {
        if ((v14 | v20) == 1)
        {
          BOOL v22 = PrimitiveSizeInBits == 256 && v13 == 32;
          int v23 = !v22;
          int v24 = !v22 || !v14;
          if (v24 == 1)
          {
            if ((v14 | v23) == 1)
            {
              BOOL v25 = PrimitiveSizeInBits == 256 && v13 == 64;
              int v26 = !v25;
              int v27 = !v25 || !v14;
              if (v27 == 1)
              {
                if ((v14 | v26) == 1)
                {
                  BOOL v28 = PrimitiveSizeInBits == 512 && v13 == 32;
                  int v29 = !v28;
                  int v30 = !v28 || !v14;
                  if (v30 == 1)
                  {
                    if ((v14 | v29) == 1)
                    {
                      BOOL v31 = PrimitiveSizeInBits == 512 && v13 == 64;
                      int v32 = !v31;
                      if (!v31) {
                        int v17 = 1;
                      }
                      if (v17 == 1)
                      {
                        if ((v14 | v32) == 1)
                        {
                          if (PrimitiveSizeInBits == 128 && v13 == 16)
                          {
                            int v18 = 10933;
                          }
                          else if (PrimitiveSizeInBits == 256 && v13 == 16)
                          {
                            int v18 = 10934;
                          }
                          else if (PrimitiveSizeInBits == 512 && v13 == 16)
                          {
                            int v18 = 10935;
                          }
                          else if (PrimitiveSizeInBits == 128 && v13 == 8)
                          {
                            int v18 = 10945;
                          }
                          else if (v13 == 8 && PrimitiveSizeInBits == 256)
                          {
                            int v18 = 10946;
                          }
                          else
                          {
                            int v18 = 10947;
                          }
                        }
                        else
                        {
                          int v18 = 10944;
                        }
                      }
                      else
                      {
                        int v18 = 10938;
                      }
                    }
                    else
                    {
                      int v18 = 10932;
                    }
                  }
                  else
                  {
                    int v18 = 10941;
                  }
                }
                else
                {
                  int v18 = 10943;
                }
              }
              else
              {
                int v18 = 10937;
              }
            }
            else
            {
              int v18 = 10931;
            }
          }
          else
          {
            int v18 = 10940;
          }
        }
        else
        {
          int v18 = 10942;
        }
      }
      else
      {
        int v18 = 10936;
      }
    }
    else
    {
      int v18 = 10930;
    }
  }
  else
  {
    int v18 = 10939;
  }
  uint64_t v34 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  uint64_t v35 = *v34;
  uint64_t v36 = v34[4];
  uint64_t v46 = *v34;
  uint64_t v47 = v36;
  uint64_t v48 = v34[8];
  if ((a4 & 1) == 0)
  {
    uint64_t v46 = v36;
    uint64_t v47 = v35;
  }
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a2 + 40) + 56) + 40), v18, 0, 0);
  if (Declaration) {
    uint64_t v38 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v38 = 0;
  }
  __int16 v45 = 257;
  uint64_t v40 = llvm::IRBuilderBase::CreateCall((uint64_t)a1, v38, Declaration, &v46, 3, (uint64_t)v44, 0);
  if (a3)
  {
    Cast = (uint64_t *)llvm::ConstantAggregateZero::get(v8, v39);
  }
  else
  {
    unint64_t v42 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    __int16 v45 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1, 49, v42, v8, (uint64_t)v44);
  }
  return EmitX86Select(a1, *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 96), (llvm::Value *)v40, (llvm::Value *)Cast);
}

uint64_t upgradeAVX512MaskToSelect(uint64_t a1, unint64_t a2, llvm::IRBuilderBase *a3, uint64_t a4, llvm::Value **a5)
{
  v74[4] = *MEMORY[0x263EF8340];
  if (a2 >= 0xC) {
    uint64_t v10 = 12;
  }
  else {
    uint64_t v10 = a2;
  }
  int v11 = *(llvm::Type **)a4;
  int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a4);
  if ((_BYTE)v12)
  {
    int v11 = *(llvm::Type **)a4;
  }
  uint64_t v14 = a1 + v10;
  unint64_t v15 = a2 - v10;
  int v16 = *((_DWORD *)v11 + 2);
  int v17 = v11;
  if ((v16 & 0xFE) == 0x12) {
    int v17 = (llvm::Type *)**((void **)v11 + 2);
  }
  int v18 = llvm::Type::getPrimitiveSizeInBits(v17);
  if (v15 < 5) {
    goto LABEL_9;
  }
  if (*(_DWORD *)v14 == 779641197 && *(unsigned char *)(v14 + 4) == 112)
  {
    if (PrimitiveSizeInBits == 128 && v18 == 32)
    {
      int v22 = 11304;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 64)
    {
      int v22 = 11343;
      goto LABEL_221;
    }
    BOOL v35 = v18 == 32 && PrimitiveSizeInBits == 256;
    int v36 = 10261;
    goto LABEL_112;
  }
  if (*(_DWORD *)v14 == 778987885 && *(unsigned char *)(v14 + 4) == 112)
  {
    if (PrimitiveSizeInBits == 128 && v18 == 32)
    {
      int v22 = 11306;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 64)
    {
      int v22 = 11346;
      goto LABEL_221;
    }
    BOOL v35 = v18 == 32 && PrimitiveSizeInBits == 256;
    int v36 = 10263;
    goto LABEL_112;
  }
  if (v15 < 8)
  {
LABEL_9:
    char v19 = 1;
LABEL_10:
    if (v15 == 13)
    {
      if (*(void *)v14 == 0x6432647074747663 && *(void *)(v14 + 5) == 0x3635322E71643264)
      {
        int v22 = 10245;
        goto LABEL_221;
      }
      if (*(void *)v14 == 0x6432737074747663 && *(void *)(v14 + 5) == 0x3832312E71643273)
      {
        int v22 = 11338;
        goto LABEL_221;
      }
      if (*(void *)v14 == 0x6432737074747663 && *(void *)(v14 + 5) == 0x3635322E71643273)
      {
        int v22 = 10246;
        goto LABEL_221;
      }
    }
    else if (v15 == 12)
    {
      if (*(void *)v14 == 0x7164326470747663 && *(_DWORD *)(v14 + 8) == 909455918)
      {
        int v22 = 10243;
        goto LABEL_221;
      }
      if (*(void *)v14 == 0x7370326470747663 && *(_DWORD *)(v14 + 8) == 909455918)
      {
        int v22 = 10242;
        goto LABEL_221;
      }
    }
    if (v19) {
      goto LABEL_59;
    }
    if (*(void *)v14 != 0x2E7261766D726570)
    {
      if (*(void *)v14 == 0x7762646173706264 && *(unsigned char *)(v14 + 8) == 46)
      {
        int v37 = 10409;
        BOOL v38 = PrimitiveSizeInBits == 256;
        int v39 = 10411;
        int v40 = 10410;
        goto LABEL_215;
      }
LABEL_59:
      if (v15 < 0xF
        || (*(void *)v14 == 0x687369746C756D70 ? (BOOL v30 = *(void *)(v14 + 7) == 0x2E62712E74666968) : (BOOL v30 = 0),
            !v30))
      {
        if ((v19 & 1) != 0
          || (*(void *)v14 == 0x7463696C666E6F63 ? (BOOL v31 = *(unsigned char *)(v14 + 8) == 46) : (BOOL v31 = 0), !v31))
        {
          if (v15 < 5) {
            return 0;
          }
          goto LABEL_70;
        }
        int v41 = *(unsigned __int8 *)(v14 + 9);
        if (v41 == 100 && PrimitiveSizeInBits == 128)
        {
          int v22 = 10389;
          goto LABEL_221;
        }
        if (v41 == 100 && PrimitiveSizeInBits == 256)
        {
          int v22 = 10390;
          goto LABEL_221;
        }
        if (v41 == 100 && PrimitiveSizeInBits == 512)
        {
          int v22 = 10391;
          goto LABEL_221;
        }
        if (v41 == 113 && PrimitiveSizeInBits == 128)
        {
          int v22 = 10392;
          goto LABEL_221;
        }
        BOOL v68 = PrimitiveSizeInBits == 256 && v41 == 113;
        int v69 = 10393;
LABEL_241:
        if (v68) {
          int v22 = v69;
        }
        else {
          int v22 = v69 + 1;
        }
        goto LABEL_221;
      }
      int v37 = 10788;
      BOOL v38 = PrimitiveSizeInBits == 256;
      int v39 = 10790;
      int v40 = 10789;
LABEL_215:
      if (v38) {
        int v39 = v40;
      }
      if (PrimitiveSizeInBits == 128) {
        int v22 = v37;
      }
      else {
        int v22 = v39;
      }
      goto LABEL_221;
    }
LABEL_86:
    if ((v16 & 0xFE) == 0x12) {
      int v16 = *(_DWORD *)(**((void **)v11 + 2) + 8);
    }
    BOOL v34 = v16 < 6u && ((0x2Fu >> v16) & 1) != 0 || (v16 & 0xFD) == 4;
    BOOL v43 = PrimitiveSizeInBits == 256 && v18 == 32;
    int v44 = !v43;
    int v45 = !v34;
    if (v43 && !v45)
    {
      int v22 = 10325;
      goto LABEL_221;
    }
    if ((v34 | v44) != 1)
    {
      int v22 = 10324;
      goto LABEL_221;
    }
    BOOL v46 = PrimitiveSizeInBits == 256 && v18 == 64;
    int v47 = !v46;
    int v48 = !v46 || !v34;
    if (v48 != 1)
    {
      int v22 = 10771;
      goto LABEL_221;
    }
    if ((v34 | v47) != 1)
    {
      int v22 = 10773;
      goto LABEL_221;
    }
    BOOL v49 = PrimitiveSizeInBits == 512 && v18 == 32;
    int v50 = !v49;
    int v51 = !v49 || !v34;
    if (v51 != 1)
    {
      int v22 = 10781;
      goto LABEL_221;
    }
    if ((v34 | v50) != 1)
    {
      int v22 = 10782;
      goto LABEL_221;
    }
    BOOL v52 = PrimitiveSizeInBits == 512 && v18 == 64;
    int v53 = !v52;
    if (!v52) {
      int v45 = 1;
    }
    if (v45 != 1)
    {
      int v22 = 10772;
      goto LABEL_221;
    }
    if ((v34 | v53) != 1)
    {
      int v22 = 10774;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 16)
    {
      int v22 = 10775;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 256 && v18 == 16)
    {
      int v22 = 10776;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 512 && v18 == 16)
    {
      int v22 = 10777;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 8)
    {
      int v22 = 10778;
      goto LABEL_221;
    }
    BOOL v68 = v18 == 8 && PrimitiveSizeInBits == 256;
    int v69 = 10779;
    goto LABEL_241;
  }
  if (*(void *)v14 == 0x2E622E6675687370)
  {
    int v37 = 11449;
    BOOL v38 = PrimitiveSizeInBits == 256;
    int v39 = 10792;
    int v40 = 10339;
    goto LABEL_215;
  }
  if (v15 >= 0xB && *(void *)v14 == 0x2E72682E6C756D70 && *(void *)(v14 + 3) == 0x2E77732E72682E6CLL)
  {
    int v37 = 11447;
    BOOL v38 = PrimitiveSizeInBits == 256;
    int v39 = 10785;
    int v40 = 10335;
    goto LABEL_215;
  }
  if (*(void *)v14 == 0x2E772E686C756D70)
  {
    int v37 = 11357;
    BOOL v38 = PrimitiveSizeInBits == 256;
    int v39 = 10786;
    int v40 = 10336;
    goto LABEL_215;
  }
  if (v15 >= 9)
  {
    if (*(void *)v14 == 0x772E75686C756D70 && *(unsigned char *)(v14 + 8) == 46)
    {
      int v37 = 11358;
      BOOL v38 = PrimitiveSizeInBits == 256;
      int v39 = 10787;
      int v40 = 10337;
      goto LABEL_215;
    }
    if (*(void *)v14 == 0x642E776464616D70 && *(unsigned char *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        int v22 = 11355;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        int v22 = 10333;
      }
      else
      {
        int v22 = 10784;
      }
      goto LABEL_221;
    }
    if (v15 >= 0xB && *(void *)v14 == 0x7362756464616D70 && *(void *)(v14 + 3) == 0x2E772E7362756464)
    {
      if (PrimitiveSizeInBits == 128)
      {
        int v22 = 11445;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        int v22 = 10332;
      }
      else
      {
        int v22 = 10783;
      }
      goto LABEL_221;
    }
    if (*(void *)v14 == 0x627773736B636170 && *(unsigned char *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        int v22 = 11350;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        int v22 = 10318;
      }
      else
      {
        int v22 = 10766;
      }
      goto LABEL_221;
    }
    if (*(void *)v14 == 0x776473736B636170 && *(unsigned char *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        int v22 = 11349;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        int v22 = 10317;
      }
      else
      {
        int v22 = 10765;
      }
      goto LABEL_221;
    }
    if (*(void *)v14 == 0x627773756B636170 && *(unsigned char *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        int v22 = 11351;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        int v22 = 10320;
      }
      else
      {
        int v22 = 10768;
      }
      goto LABEL_221;
    }
    if (*(void *)v14 == 0x776473756B636170 && *(unsigned char *)(v14 + 8) == 46)
    {
      if (PrimitiveSizeInBits == 128)
      {
        int v22 = 11397;
      }
      else if (PrimitiveSizeInBits == 256)
      {
        int v22 = 10319;
      }
      else
      {
        int v22 = 10767;
      }
      goto LABEL_221;
    }
    if (v15 < 0xB
      || (*(void *)v14 == 0x766C696D72657076 ? (BOOL v61 = *(void *)(v14 + 3) == 0x2E7261766C696D72) : (BOOL v61 = 0), !v61))
    {
      char v19 = 0;
      goto LABEL_10;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 32)
    {
      int v22 = 10276;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 128 && v18 == 64)
    {
      int v22 = 10274;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 256 && v18 == 32)
    {
      int v22 = 10277;
      goto LABEL_221;
    }
    if (PrimitiveSizeInBits == 256 && v18 == 64)
    {
      int v22 = 10275;
      goto LABEL_221;
    }
    BOOL v35 = v18 == 32 && PrimitiveSizeInBits == 512;
    int v36 = 10948;
LABEL_112:
    if (v35) {
      int v22 = v36 + 1;
    }
    else {
      int v22 = v36;
    }
    goto LABEL_221;
  }
  if (*(void *)v14 == 0x2E7261766D726570) {
    goto LABEL_86;
  }
LABEL_70:
  if (*(_DWORD *)v14 != 1735811440 || *(unsigned char *)(v14 + 4) != 46) {
    return 0;
  }
  int v42 = *(unsigned __int8 *)(v14 + 5);
  if (v42 == 98 && PrimitiveSizeInBits == 128)
  {
    int v22 = 11353;
  }
  else if (v42 == 98 && PrimitiveSizeInBits == 256)
  {
    int v22 = 10321;
  }
  else if (v42 == 98 && PrimitiveSizeInBits == 512)
  {
    int v22 = 10769;
  }
  else if (v42 == 119 && PrimitiveSizeInBits == 128)
  {
    int v22 = 11354;
  }
  else if (PrimitiveSizeInBits == 256 && v42 == 119)
  {
    int v22 = 10322;
  }
  else
  {
    int v22 = 10770;
  }
LABEL_221:
  __n128 v62 = (char *)(a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF));
  uint64_t v63 = (char *)llvm::CallBase::arg_end((llvm::CallBase *)a4);
  BOOL v72 = v74;
  uint64_t v73 = 0x400000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v72, v62, v63);
  LODWORD(v73) = v73 - 2;
  uint64_t Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t ***)(*(void *)(*(void *)(a4 + 40) + 56) + 40), v22, 0, 0);
  if (Declaration) {
    uint64_t v65 = *(void *)(Declaration + 24);
  }
  else {
    uint64_t v65 = 0;
  }
  v71[16] = 257;
  *a5 = (llvm::Value *)llvm::IRBuilderBase::CreateCall((uint64_t)a3, v65, Declaration, (uint64_t *)v72, v73, (uint64_t)v71, 0);
  uint64_t v66 = llvm::CallBase::arg_end((llvm::CallBase *)a4);
  uint64_t v67 = a4 - 32 * (*(_DWORD *)(a4 + 20) & 0x7FFFFFF);
  *a5 = (llvm::Value *)EmitX86Select(a3, *(unsigned __int8 **)(v67 + 32 * (((unint64_t)(v66 - v67) >> 5) - 1)), *a5, *(llvm::Value **)(v67 + 32 * (((unint64_t)(v66 - v67) >> 5) - 2)));
  if (v72 != v74) {
    free(v72);
  }
  return 1;
}

uint64_t *llvm::IRBuilderBase::CreateNeg(llvm::IRBuilderBase *this, llvm::Constant **a2, const llvm::Twine *a3)
{
  uint64_t NullValue = (llvm::Value *)llvm::Constant::getNullValue(*a2, (llvm::Type *)a2);
  return llvm::IRBuilderBase::CreateSub(this, NullValue, (llvm::Value *)a2, a3, 0, 0);
}

uint64_t *llvm::IRBuilderBase::CreateAtomicRMW(uint64_t *a1, __int16 a2, uint64_t a3, llvm::Type **a4, __int16 a5, __int16 a6, char a7)
{
  LOBYTE(v9) = a5;
  if ((a5 & 0xFF00) == 0)
  {
    unint64_t v15 = (llvm::DataLayout::getTypeSizeInBits((llvm::DataLayout *)(*(void *)(*(void *)(a1[6] + 56) + 40) + 256), *a4)+ 7) >> 3;
    if ((_BYTE)v14) {
    unint64_t v9 = 63 - __clz(v15);
    }
  }
  int v16 = (char *)operator new(0x80uLL);
  *(void *)int v16 = 0;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 8) = *a4;
  int v17 = (uint64_t *)(v16 + 64);
  *((void *)v16 + 2) = 0;
  *((void *)v16 + 3) = v16 + 64;
  *((void *)v16 + 4) = 0;
  *((void *)v16 + 5) = 0;
  *((void *)v16 + 6) = 0;
  *((void *)v16 + 7) = v16 + 64;
  *((void *)v16 + 9) = 0;
  *((void *)v16 + 10) = 0x200000041;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *((_DWORD *)v16 + 30) = 0;
  llvm::AtomicRMWInst::Init((uint64_t)(v16 + 64), a2, a3, (uint64_t)a4, v9, a6, a7);
  __int16 v20 = 257;
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>(a1, v17, (uint64_t)v19);
}

void llvm::UpgradeIntrinsicCall(llvm::CallBase *,llvm::Function *)::$_0::operator()(uint64_t a1, __n128 a2, uint64_t a3, llvm::Type *a4)
{
  v26[6] = *MEMORY[0x263EF8340];
  uint64_t v4 = **(void **)a1;
  PointerCast = **(llvm::ConstantExpr ***)(a1 + 8);
  if (*(void *)(v4 + 72) == *((void *)PointerCast + 3))
  {
LABEL_7:
    llvm::GlobalIFunc::setResolver(v4, (uint64_t)PointerCast);
    return;
  }
  uint64_t v6 = *(llvm::PoisonValue **)v4;
  if (*(void *)v4) {
    BOOL v7 = *(unsigned char *)(*(void *)v4 + 8) == 16;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    PointerCast = llvm::ConstantExpr::getPointerCast(**(llvm::ConstantExpr ***)(a1 + 8), **(llvm::Constant ***)(v4 - 32), a4, a2);
    goto LABEL_7;
  }
  unint64_t v9 = (char *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
  uint64_t v10 = (char *)llvm::CallBase::arg_end(**(llvm::CallBase ***)a1);
  int v24 = v26;
  uint64_t v25 = 0x600000000;
  llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((unsigned int *)&v24, v9, v10);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = **(void **)(a1 + 8);
  if (v12) {
    uint64_t v13 = *(void *)(v12 + 24);
  }
  else {
    uint64_t v13 = 0;
  }
  __int16 v23 = 257;
  uint64_t v14 = llvm::IRBuilderBase::CreateCall(v11, v13, v12, (uint64_t *)v24, v25, (uint64_t)v22, 0);
  inserted = (uint64_t *)llvm::PoisonValue::get(v6, v15);
  for (unsigned int i = 0; i < *((_DWORD *)v6 + 3); ++i)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    __int16 v23 = 257;
    char v19 = llvm::IRBuilderBase::CreateExtractValue(v18, v14, &i, 1, (uint64_t)v22);
    uint64_t v20 = *(void *)(a1 + 16);
    __int16 v23 = 257;
    inserted = llvm::IRBuilderBase::CreateInsertValue(v20, inserted, (uint64_t)v19, &i, 1, (uint64_t)v22);
  }
  llvm::Value::doRAUW(**(llvm::ValueAsMetadata ***)a1, (llvm::Value *)inserted, (llvm::Value *)1, v17);
  llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*(void *)(**(void **)a1 + 40) + 40, **(void **)a1 + 24);
  if (v24 != v26) {
    free(v24);
  }
}

uint64_t *llvm::MemIntrinsicBase<llvm::MemIntrinsic>::setDestAlignment(uint64_t a1, __int16 a2)
{
  uint64_t v4 = (void *)(a1 + 64);
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((void *)(a1 + 64), **(uint64_t ***)a1, 1, 75);
  *(void *)(a1 + 64) = result;
  if ((a2 & 0xFF00) != 0)
  {
    unint64_t v6 = llvm::Attribute::get(**(uint64_t ***)a1, 75, 1 << a2);
    int v7 = 0;
    uint64_t result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v6);
    *(void *)(a1 + 64) = result;
  }
  return result;
}

uint64_t *llvm::MemTransferBase<llvm::MemIntrinsic>::setSourceAlignment(uint64_t a1, __int16 a2)
{
  uint64_t v4 = (void *)(a1 + 64);
  uint64_t result = llvm::AttributeList::removeAttributeAtIndex((void *)(a1 + 64), **(uint64_t ***)a1, 2, 75);
  *(void *)(a1 + 64) = result;
  if ((a2 & 0xFF00) != 0)
  {
    unint64_t v6 = llvm::Attribute::get(**(uint64_t ***)a1, 75, 1 << a2);
    int v7 = 1;
    uint64_t result = llvm::AttributeList::addParamAttribute(v4, **(uint64_t ***)a1, &v7, 1, v6);
    *(void *)(a1 + 64) = result;
  }
  return result;
}

llvm::MDNode *llvm::UpgradeTBAANode(llvm *this, llvm::MDNode *a2)
{
  uint64_t v2 = this;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)((char *)this - 16);
  unint64_t v3 = *((void *)this - 2);
  if ((v3 & 2) != 0) {
    uint64_t v5 = (unsigned char **)*((void *)this - 4);
  }
  else {
    uint64_t v5 = (unsigned char **)&v4[-((v3 >> 2) & 0xF)];
  }
  if (!llvm::MDNode::classof(*v5)
    || ((*v4 & 2) != 0 ? (unsigned int v7 = *((_DWORD *)v2 - 6)) : (unsigned int v7 = (*v4 >> 6) & 0xF), v7 <= 2))
  {
    uint64_t v8 = *((void *)v2 + 1);
    unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 4) != 0) {
      unint64_t v9 = (void *)*v9;
    }
    if ((*v4 & 2) != 0)
    {
      if (*((_DWORD *)v2 - 6) == 3)
      {
        uint64_t v10 = (long long *)*((void *)v2 - 4);
        goto LABEL_16;
      }
    }
    else if ((*v4 & 0x3C0) == 0xC0)
    {
      uint64_t v10 = (long long *)&v4[-((*v4 >> 2) & 0xFLL)];
LABEL_16:
      long long v24 = *v10;
      Impl = llvm::MDTuple::getImpl(v9, (llvm::hashing::detail::hash_state *)&v24, 2uLL, 0, 1);
      int v21 = Impl;
      uint64_t NullValue = (llvm::ValueAsMetadata *)llvm::Constant::getNullValue((llvm::Constant *)(*v9 + 2016), v11);
      uint64_t v22 = llvm::ValueAsMetadata::get(NullValue, v13);
      if ((*v4 & 2) != 0) {
        uint64_t v14 = (void *)*((void *)v2 - 4);
      }
      else {
        uint64_t v14 = &v4[-((*v4 >> 2) & 0xFLL)];
      }
      uint64_t v23 = v14[2];
      __n128 v17 = v9;
      unint64_t v18 = 4;
      return llvm::MDTuple::getImpl(v17, (llvm::hashing::detail::hash_state *)&Impl, v18, 0, 1);
    }
    Impl = v2;
    int v21 = v2;
    unint64_t v15 = (llvm::ValueAsMetadata *)llvm::Constant::getNullValue((llvm::Constant *)(*v9 + 2016), v6);
    uint64_t v22 = llvm::ValueAsMetadata::get(v15, v16);
    __n128 v17 = v9;
    unint64_t v18 = 3;
    return llvm::MDTuple::getImpl(v17, (llvm::hashing::detail::hash_state *)&Impl, v18, 0, 1);
  }
  return v2;
}

llvm::Value *llvm::UpgradeBitCastInst(llvm *this, llvm::Value *a2, llvm::Value *a3, llvm::Type *a4, llvm::Instruction **a5)
{
  if (this != 49) {
    return 0;
  }
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  *(void *)a4 = 0;
  unint64_t v9 = *(void ***)a2;
  unsigned int v10 = *(_DWORD *)(*(void *)a2 + 8);
  char v11 = v10;
  if ((v10 & 0xFE) == 0x12) {
    char v11 = *(unsigned char *)(*v9[2] + 8);
  }
  if (v11 != 15) {
    return 0;
  }
  int v12 = *((_DWORD *)a3 + 2);
  char v13 = v12;
  if ((v12 & 0xFE) == 0x12) {
    char v13 = *(unsigned char *)(**((void **)a3 + 2) + 8);
  }
  if (v13 != 15) {
    return 0;
  }
  if ((v10 & 0xFE) == 0x12) {
    unsigned int v10 = *(_DWORD *)(*v9[2] + 8);
  }
  if ((v12 & 0xFE) == 0x12) {
    int v12 = *(_DWORD *)(**((void **)a3 + 2) + 8);
  }
  if ((v12 ^ v10) < 0x100) {
    return 0;
  }
  unint64_t v15 = (llvm::Type *)(**v9 + 2016);
  __int16 v18 = 257;
  int v16 = llvm::CastInst::Create(47, a2, v15, (const llvm::Twine *)v17, 0);
  *(void *)a4 = v16;
  __int16 v18 = 257;
  return llvm::CastInst::Create(48, v16, a3, (const llvm::Twine *)v17, 0);
}

llvm::ConstantExpr *llvm::UpgradeBitCastExpr(llvm *this, void **a2, llvm::Constant *a3, llvm::Type *a4)
{
  if (this != 49) {
    return 0;
  }
  uint64_t v5 = (void **)*a2;
  unsigned int v6 = *((_DWORD *)*a2 + 2);
  char v7 = v6;
  if ((v6 & 0xFE) == 0x12) {
    char v7 = *(unsigned char *)(*v5[2] + 8);
  }
  if (v7 != 15) {
    return 0;
  }
  int v8 = *((_DWORD *)a3 + 2);
  char v9 = v8;
  if ((v8 & 0xFE) == 0x12) {
    char v9 = *(unsigned char *)(**((void **)a3 + 2) + 8);
  }
  if (v9 != 15) {
    return 0;
  }
  if ((v6 & 0xFE) == 0x12) {
    unsigned int v6 = *(_DWORD *)(*v5[2] + 8);
  }
  if ((v8 & 0xFE) == 0x12) {
    int v8 = *(_DWORD *)(**((void **)a3 + 2) + 8);
  }
  if ((v8 ^ v6) < 0x100) {
    return 0;
  }
  FoldedCast = getFoldedCast((llvm *)0x2F, a2, (llvm::Constant ****)(**v5 + 2016), 0);
  return getFoldedCast((llvm *)0x30, (void **)FoldedCast, (llvm::Constant ****)a3, 0);
}

uint64_t llvm::UpgradeDebugInfo(llvm *this, llvm::Module *a2)
{
  if (!byte_26B41F4D0)
  {
    DebugMetadataVersionFromModule = (llvm *)llvm::getDebugMetadataVersionFromModule(this, a2);
    if (DebugMetadataVersionFromModule == 700000003
      || (int v7 = (int)DebugMetadataVersionFromModule, DebugMetadataVersionFromModule == 3))
    {
      char v16 = 0;
      int v8 = (const llvm::Module *)llvm::errs(DebugMetadataVersionFromModule);
      if (llvm::verifyModule(this, v8, (llvm::raw_ostream *)&v16, v9)) {
        llvm::report_fatal_error((llvm *)"Broken module found, compilation aborted!", (const llvm::Twine *)1);
      }
      if (v16)
      {
        int v12 = 5;
        char v13 = 1;
        char v11 = &unk_270DC2EE0;
        uint64_t v14 = this;
        llvm::LLVMContext::diagnose(*(llvm::LLVMContext **)this, (const llvm::DiagnosticInfo *)&v11);
        return llvm::StripDebugInfo(this, v10);
      }
    }
    else if (llvm::StripDebugInfo(this, v6))
    {
      int v12 = 5;
      uint64_t v2 = 1;
      char v13 = 1;
      char v11 = &unk_270DC2EB0;
      uint64_t v14 = this;
      int v15 = v7;
      llvm::LLVMContext::diagnose(*(llvm::LLVMContext **)this, (const llvm::DiagnosticInfo *)&v11);
      return v2;
    }
  }
  return 0;
}

void llvm::UpgradeARCRuntime(uint64_t **this, llvm::Module *a2)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  int v26 = this;
  llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()(&v26, "clang.arc.use", 218);
  BOOL v34 = "clang.arc.retainAutoreleasedReturnValueMarker";
  LOWORD(v38) = 259;
  Nameduint64_t Metadata = llvm::Module::getNamedMetadata((llvm::Module *)this, (const llvm::Twine *)&v34);
  if (NamedMetadata)
  {
    uint64_t v4 = (llvm::NamedMDNode *)NamedMetadata;
    uint64_t v5 = ***(void ***)(NamedMetadata + 48);
    if (v5)
    {
      unint64_t v6 = *(void *)(v5 - 16);
      int v7 = (v6 & 2) != 0 ? *(uint64_t **)(v5 - 32) : (uint64_t *)(v5 - 16 - 8 * ((v6 >> 2) & 0xF));
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (!*(unsigned char *)v8)
        {
          BOOL v34 = &v36;
          uint64_t v35 = 0x400000000;
          char v9 = *(void ***)(v8 + 8);
          unsigned int v10 = *v9;
          v32[0] = v9 + 3;
          v32[1] = v10;
          llvm::StringRef::split((unsigned int *)v32, (unsigned int *)&v34, "#", 1uLL, -1, 1);
          if (v35 == 2)
          {
            if (*(void *)v34) {
              std::string::basic_string[abi:nn180100](&__dst, *(void **)v34, *((void *)v34 + 1));
            }
            else {
              memset(&__dst, 0, sizeof(__dst));
            }
            char v11 = std::string::append(&__dst, ";");
            std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
            v31.__r_.__value_.__r.__words[2] = v12;
            v11->__r_.__value_.__l.__size_ = 0;
            v11->__r_.__value_.__r.__words[2] = 0;
            v11->__r_.__value_.__r.__words[0] = 0;
            char v13 = (void *)*((void *)v34 + 2);
            if (v13)
            {
              std::string::basic_string[abi:nn180100](&__p, v13, *((void *)v34 + 3));
              unsigned int v14 = HIBYTE(v29);
              int v15 = (void **)__p;
              std::string::size_type v16 = v28;
            }
            else
            {
              std::string::size_type v16 = 0;
              int v15 = 0;
              unsigned int v14 = 0;
              std::string __p = 0;
              std::string::size_type v28 = 0;
              uint64_t v29 = 0;
            }
            if ((v14 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = v15;
            }
            if ((v14 & 0x80u) == 0) {
              std::string::size_type v18 = v14;
            }
            else {
              std::string::size_type v18 = v16;
            }
            uint64_t v19 = std::string::append(&v31, (const std::string::value_type *)p_p, v18);
            std::string::size_type v20 = v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)int v32 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            uint64_t v33 = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v29) < 0) {
              operator delete(__p);
            }
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (v33 >= 0) {
              int v21 = (uint64_t *)v32;
            }
            else {
              int v21 = (uint64_t *)v32[0];
            }
            if (v33 >= 0) {
              unint64_t v22 = HIBYTE(v33);
            }
            else {
              unint64_t v22 = (unint64_t)v32[1];
            }
            uint64_t v23 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**this + 312), v21, v22);
            if (v24) {
              *(void *)(v23 + 16) = v23;
            }
            uint64_t v8 = v23 + 8;
            if (SHIBYTE(v33) < 0) {
              operator delete(v32[0]);
            }
          }
          llvm::Module::addModuleFlag(this, (llvm::Type *)1, (uint64_t *)"clang.arc.retainAutoreleasedReturnValueMarker", 0x2DuLL, v8);
          llvm::Module::eraseNamedMetadata((llvm::Module *)this, v4);
          if (v34 != &v36) {
            free(v34);
          }
          uint64_t v25 = 0;
          BOOL v34 = "objc_autorelease";
          LODWORD(v35) = 212;
          int v37 = 213;
          int v39 = 214;
          int v40 = "objc_autoreleaseReturnValue";
          int v41 = 215;
          int v42 = "objc_copyWeak";
          int v43 = 219;
          int v44 = "objc_destroyWeak";
          int v45 = 220;
          BOOL v46 = "objc_initWeak";
          int v47 = 221;
          int v48 = "objc_loadWeak";
          int v49 = 222;
          int v50 = "objc_loadWeakRetained";
          int v51 = 223;
          BOOL v52 = "objc_moveWeak";
          int v53 = 224;
          uint64_t v54 = "objc_release";
          int v55 = 225;
          uint64_t v56 = "objc_retain";
          int v57 = 226;
          uint64_t v58 = "objc_retainAutorelease";
          int v59 = 228;
          int v60 = "objc_retainAutoreleaseReturnValue";
          int v61 = 229;
          __n128 v62 = "objc_retainAutoreleasedReturnValue";
          int v63 = 230;
          uint64_t v64 = "objc_retainBlock";
          int v65 = 231;
          uint64_t v66 = "objc_storeStrong";
          int v67 = 233;
          BOOL v68 = "objc_storeWeak";
          int v69 = 234;
          long long v70 = "objc_unsafeClaimAutoreleasedReturnValue";
          int v71 = 239;
          BOOL v72 = "objc_retainedObject";
          int v73 = 232;
          uint64_t v74 = "objc_unretainedObject";
          int v75 = 237;
          int v76 = "objc_unretainedPointer";
          int v77 = 238;
          BOOL v78 = "objc_retain_autorelease";
          int v79 = 227;
          uint64_t v80 = "objc_sync_enter";
          int v81 = 235;
          uint64_t v82 = "objc_sync_exit";
          int v83 = 236;
          int v84 = "objc_arc_annotation_topdown_bbstart";
          int v85 = 211;
          char v86 = "objc_arc_annotation_topdown_bbend";
          int v87 = 210;
          uint64_t v88 = "objc_arc_annotation_bottomup_bbstart";
          int v89 = 209;
          uint64_t v90 = "objc_arc_annotation_bottomup_bbend";
          int v91 = 208;
          do
          {
            llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()(&v26, *(char **)((char *)&v34 + v25), *(_DWORD *)((char *)&v34 + v25 + 8));
            v25 += 16;
          }
          while (v25 != 464);
        }
      }
    }
  }
}

void llvm::UpgradeARCRuntime(llvm::Module &)::$_0::operator()(uint64_t ***a1, char *__s, int a3)
{
  v42[1] = *MEMORY[0x263EF8340];
  unint64_t v6 = *a1;
  if (__s) {
    size_t v7 = strlen(__s);
  }
  else {
    size_t v7 = 0;
  }
  uint64_t v8 = llvm::ValueSymbolTable::lookup((uint64_t)v6[14], (uint64_t *)__s, v7);
  if (v8)
  {
    uint64_t v9 = v8;
    if (!*(unsigned char *)(v8 + 16))
    {
      uint64_t Declaration = llvm::Intrinsic::getDeclaration(*a1, a3, 0, 0);
      uint64_t v10 = *(void *)(v9 + 8);
      if (!v10) {
        goto LABEL_33;
      }
      char v11 = &v33;
      do
      {
        uint64_t v12 = *(void *)(v10 + 24);
        uint64_t v10 = *(void *)(v10 + 8);
        if (v12 && *(unsigned char *)(v12 + 16) == 84)
        {
          uint64_t v13 = *(void *)(v12 - 32);
          if (!v13 || *(unsigned char *)(v13 + 16) || *(void *)(v13 + 24) != *(void *)(v12 + 72)) {
            uint64_t v13 = 0;
          }
          if (v13 == v9)
          {
            unsigned int v14 = *(uint64_t ***)(v12 + 40);
            uint64_t v15 = **v14;
            v34[0] = v35;
            v34[1] = (void *)0x200000000;
            v35[6] = v15;
            v35[7] = &v41;
            unsigned int v35[8] = v42;
            v35[9] = 0;
            int v36 = 0;
            __int16 v37 = 512;
            char v38 = 7;
            void v35[4] = 0;
            v35[5] = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            int v41 = &unk_270DC2FC0;
            v42[0] = &unk_270DC30B0;
            llvm::IRBuilderBase::SetInsertPoint((unsigned int *)v34, (uint64_t)v14, v12 + 24);
            uint64_t v16 = *(void *)(Declaration + 24);
            __n128 v17 = v11;
            std::string v31 = v11;
            uint64_t v32 = 0x200000000;
            std::string::size_type v18 = *(uint64_t **)(v16 + 16);
            if (*v18 == *(void *)v12 || llvm::CastInst::castIsValid(49, *(void *)v12, *v18))
            {
              unint64_t v19 = llvm::CallBase::arg_end((llvm::CallBase *)v12) - v12 + 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF);
              if ((v19 & 0x1FFFFFFFE0) != 0)
              {
                unint64_t v20 = 0;
                uint64_t v21 = (v19 >> 5);
                do
                {
                  Cast = *(uint64_t **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32 * v20);
                  if (v20 >= (*(_DWORD *)(v16 + 12) - 1))
                  {
                    ++v20;
                  }
                  else
                  {
                    ++v20;
                    if (!llvm::CastInst::castIsValid(49, *Cast, *(void *)(*(void *)(v16 + 16) + 8 * v20)))goto LABEL_27; {
                    uint64_t v23 = *(llvm::Type **)(*(void *)(v16 + 16) + 8 * v20);
                    }
                    __int16 v30 = 257;
                    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v34, 49, (unsigned __int8 *)Cast, v23, (uint64_t)v29);
                  }
                  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v31, (uint64_t)Cast);
                }
                while (v20 != v21);
              }
              __int16 v30 = 257;
              char v24 = llvm::IRBuilderBase::CreateCall((uint64_t)v34, v16, Declaration, (uint64_t *)v31, v32, (uint64_t)v29, 0);
              *((_WORD *)v24 + 9) = *((_WORD *)v24 + 9) & 0xFFFC | *(_WORD *)(v12 + 18) & 3;
              llvm::Value::takeName((llvm::Value *)v24, (llvm::Value *)v12);
              uint64_t v25 = *(llvm::Type **)v12;
              __int16 v30 = 257;
              int v26 = llvm::IRBuilderBase::CreateCast((uint64_t)v34, 49, (unsigned __int8 *)v24, v25, (uint64_t)v29);
              if (*(void *)(v12 + 8)) {
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, (llvm::Value *)v26, (llvm::Value *)1, v27);
              }
              llvm::iplist_impl<llvm::simple_ilist<llvm::Instruction>,llvm::SymbolTableListTraits<llvm::Instruction>>::erase(*(void *)(v12 + 40) + 40, v12 + 24);
            }
LABEL_27:
            char v11 = v17;
            if (v31 != v17) {
              free(v31);
            }
            if (v34[0] != v35) {
              free(v34[0]);
            }
          }
        }
      }
      while (v10);
      if (!*(void *)(v9 + 8)) {
LABEL_33:
      }
        llvm::iplist_impl<llvm::simple_ilist<llvm::Function>,llvm::SymbolTableListTraits<llvm::Function>>::erase(*(void *)(v9 + 40) + 24, v9 + 56);
    }
  }
}

uint64_t llvm::UpgradeModuleFlags(llvm *this, llvm::Module *a2)
{
  uint64_t v174 = *MEMORY[0x263EF8340];
  size_t v170 = "llvm.module.flags";
  __int16 v173 = 259;
  Nameduint64_t Metadata = llvm::Module::getNamedMetadata(this, (const llvm::Twine *)&v170);
  uint64_t v166 = NamedMetadata;
  if (NamedMetadata)
  {
    char v165 = 0;
    uint64_t v4 = **(void **)this;
    unsigned int v164 = 0;
    int v5 = *(_DWORD *)(*(void *)(NamedMetadata + 48) + 8);
    if (!v5) {
      goto LABEL_218;
    }
    unsigned int v6 = 0;
    int v7 = 0;
    char v8 = 0;
    char v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = v4 + 1944;
    uint64_t v158 = v4 + 1992;
    int v159 = 0;
    while (1)
    {
      uint64_t v163 = 0;
      uint64_t v14 = *(void *)(**(void **)(v166 + 48) + 8 * v6);
      uint64_t v163 = v14;
      uint64_t v15 = (void *)(v14 - 16);
      uint64_t v16 = *(void *)(v14 - 16);
      if ((v16 & 2) != 0) {
        unsigned int v17 = *(_DWORD *)(v14 - 24);
      }
      else {
        unsigned int v17 = (v16 >> 6) & 0xF;
      }
      if (v17 != 3) {
        goto LABEL_207;
      }
      uint64_t v162 = 0;
      std::string::size_type v18 = (*v15 & 2) != 0 ? *(void **)(v14 - 32) : &v15[-((*v15 >> 2) & 0xFLL)];
      uint64_t v19 = v18[1];
      if (!v19 || *(unsigned char *)v19) {
        goto LABEL_207;
      }
      v161[5] = (void **)&v165;
      uint64_t v162 = v19;
      v161[0] = (void **)this;
      v161[1] = (void **)&v162;
      v161[2] = (void **)&v163;
      v161[3] = (void **)&v166;
      v161[4] = (void **)&v164;
      unint64_t v20 = *(uint64_t **)(v19 + 8);
      uint64_t v21 = *v20;
      if (*v20 == 9)
      {
        uint64_t v38 = v20[3];
        int v39 = *((unsigned __int8 *)v20 + 32);
        if (v38 == 0x6576654C20434950 && v39 == 108)
        {
          uint64_t v66 = (*v15 & 2) != 0 ? *(uint64_t **)(v14 - 32) : &v15[-((*v15 >> 2) & 0xFLL)];
          uint64_t v69 = *v66;
          if (v69)
          {
            if (*(unsigned char *)v69 == 1)
            {
              uint64_t v70 = *(void *)(v69 + 128);
              if (*(unsigned char *)(v70 + 16) == 16)
              {
                LimitedValue = llvm::APInt::getLimitedValue((uint64_t ***)(v70 + 24), 0xFFFFFFFFFFFFFFFFLL);
                if (LimitedValue == (uint64_t *)7 || LimitedValue == (uint64_t *)1) {
                  llvm::UpgradeModuleFlags(llvm::Module &)::$_0::operator()(v161, 8u);
                }
              }
            }
          }
        }
      }
      else
      {
        if (v21 == 28)
        {
          uint64_t v31 = v20[3];
          uint64_t v32 = v20[4];
          uint64_t v33 = v20[5];
          int v34 = *((_DWORD *)v20 + 12);
          BOOL v22 = v31 == 0x76697463656A624FLL
             && v32 == 0x73616C4320432D65
             && v33 == 0x7265706F72502073
             && v34 == 1936025972;
          goto LABEL_41;
        }
        if (v21 == 30)
        {
          BOOL v22 = 0;
          uint64_t v23 = v20[3];
          uint64_t v24 = v20[4];
          uint64_t v25 = v20[5];
          uint64_t v26 = *(uint64_t *)((char *)v20 + 46);
          BOOL v30 = v23 == 0x76697463656A624FLL
             && v24 == 0x67616D4920432D65
             && v25 == 0x56206F666E492065
             && v26 == 0x6E6F697372655620;
          v7 |= v30;
LABEL_41:
          v8 |= v22;
        }
      }
      uint64_t v41 = *(void *)(v162 + 8);
      if (*(void *)v41 == 9)
      {
        uint64_t v42 = *(void *)(v41 + 24);
        int v43 = *(unsigned __int8 *)(v41 + 32);
        if (v42 == 0x6576654C20454950 && v43 == 108)
        {
          unint64_t v64 = *(void *)(v163 - 16);
          int v65 = (v64 & 2) != 0 ? *(uint64_t **)(v163 - 32) : (uint64_t *)(v163 - 16 - 8 * ((v64 >> 2) & 0xF));
          uint64_t v67 = *v65;
          if (v67)
          {
            if (*(unsigned char *)v67 == 1)
            {
              uint64_t v68 = *(void *)(v67 + 128);
              if (*(unsigned char *)(v68 + 16) == 16
                && llvm::APInt::getLimitedValue((uint64_t ***)(v68 + 24), 0xFFFFFFFFFFFFFFFFLL) == (uint64_t *)1)
              {
                llvm::UpgradeModuleFlags(llvm::Module &)::$_0::operator()(v161, 7u);
              }
            }
          }
        }
      }
      uint64_t v45 = *(void *)(v162 + 8);
      if (*(void *)v45 != 25)
      {
        if (*(void *)v45 < 0x13uLL) {
          goto LABEL_107;
        }
LABEL_65:
        uint64_t v49 = *(void *)(v45 + 24);
        uint64_t v50 = *(void *)(v45 + 32);
        uint64_t v51 = *(void *)(v45 + 35);
        if (v49 != 0x7465722D6E676973 || v50 != 0x726464612D6E7275 || v51 != 0x737365726464612DLL) {
          goto LABEL_107;
        }
        goto LABEL_73;
      }
      if (*(void *)(v45 + 24) != 0x742D68636E617262
        || *(void *)(v45 + 32) != 0x6E652D7465677261
        || *(void *)(v45 + 40) != 0x6E656D6563726F66
        || *(unsigned char *)(v45 + 48) != 116)
      {
        goto LABEL_65;
      }
LABEL_73:
      unint64_t v54 = *(void *)(v163 - 16);
      if ((v54 & 2) != 0) {
        int v55 = *(uint64_t **)(v163 - 32);
      }
      else {
        int v55 = (uint64_t *)(v163 - 16 - 8 * ((v54 >> 2) & 0xF));
      }
      uint64_t v56 = *v55;
      if (v56)
      {
        if (*(unsigned char *)v56 == 1)
        {
          uint64_t v57 = *(void *)(v56 + 128);
          if (*(unsigned char *)(v57 + 16) == 16
            && llvm::APInt::getLimitedValue((uint64_t ***)(v57 + 24), 0xFFFFFFFFFFFFFFFFLL) == (uint64_t *)1)
          {
            uint64_t v58 = (llvm::ConstantInt *)(**(void **)this + 1992);
            size_t v170 = 0;
            uint64_t v171 = 0;
            v172[0] = 0;
            int v59 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v58, (llvm::Type *)8);
            size_t v170 = (void *)llvm::ValueAsMetadata::get(v59, v60);
            int v61 = (void *)(v163 - 16);
            unint64_t v62 = *(void *)(v163 - 16);
            unsigned int v154 = v12;
            if ((v62 & 2) != 0) {
              int v63 = *(void **)(v163 - 32);
            }
            else {
              int v63 = &v61[-((v62 >> 2) & 0xF)];
            }
            uint64_t v73 = v13;
            uint64_t v171 = v63[1];
            uint64_t v74 = v11;
            if ((*v61 & 2) != 0) {
              int v75 = *(void **)(v163 - 32);
            }
            else {
              int v75 = &v61[-((*v61 >> 2) & 0xFLL)];
            }
            v172[0] = v75[2];
            uint64_t v76 = v166;
            uint64_t v77 = v164;
            Impl = llvm::MDTuple::getImpl(*(void **)this, (llvm::hashing::detail::hash_state *)&v170, 3uLL, 0, 1);
            llvm::TrackingMDRef::reset((uint64_t *)(**(void **)(v76 + 48) + 8 * v77), (uint64_t)Impl);
            char v165 = 1;
            uint64_t v11 = v74;
            uint64_t v13 = v73;
            unint64_t v12 = v154;
          }
        }
      }
LABEL_107:
      int v79 = *(uint64_t **)(v162 + 8);
      uint64_t v80 = *v79;
      if (*v79 == 30)
      {
        BOOL v81 = v79[3] == 0x76697463656A624FLL && v79[4] == 0x67616D4920432D65;
        BOOL v82 = v81 && v79[5] == 0x53206F666E492065;
        if (!v82 || *(uint64_t *)((char *)v79 + 46) != 0x6E6F697463655320) {
          goto LABEL_118;
        }
        unint64_t v93 = *(void *)(v163 - 16);
        uint64_t v94 = (v93 & 2) != 0 ? *(void *)(v163 - 32) : v163 - 16 - 8 * ((v93 >> 2) & 0xF);
        uint64_t v95 = *(void *)(v94 + 16);
        if (!v95 || *(unsigned char *)v95) {
          goto LABEL_118;
        }
        size_t v170 = v172;
        uint64_t v171 = 0x400000000;
        char v96 = *(std::string::size_type **)(v95 + 8);
        std::string::size_type v97 = *v96;
        v160.__r_.__value_.__r.__words[0] = (std::string::size_type)(v96 + 3);
        v160.__r_.__value_.__l.__size_ = v97;
        llvm::StringRef::split((unsigned int *)&v160, (unsigned int *)&v170, " ", 1uLL, -1, 1);
        if (v171 != 1)
        {
          int v156 = v7;
          uint64_t v98 = v10;
          uint64_t v99 = v11;
          memset(&v160, 0, sizeof(v160));
          if (v171)
          {
            uint64_t v100 = 16 * v171;
            BOOL v101 = (size_t *)((char *)v170 + 8);
            do
            {
              uint64_t v102 = (void *)*(v101 - 1);
              if (v102)
              {
                std::string::basic_string[abi:nn180100](&__p, v102, *v101);
                std::string::size_type v103 = HIBYTE(v169);
                BOOL v104 = (void **)__p;
                std::string::size_type v105 = v168;
              }
              else
              {
                std::string::size_type v105 = 0;
                BOOL v104 = 0;
                std::string::size_type v103 = 0;
                std::string __p = 0;
                std::string::size_type v168 = 0;
                uint64_t v169 = 0;
              }
              if ((v103 & 0x80u) == 0) {
                p_p = &__p;
              }
              else {
                p_p = v104;
              }
              if ((v103 & 0x80u) == 0) {
                std::string::size_type v107 = v103;
              }
              else {
                std::string::size_type v107 = v105;
              }
              std::string::append(&v160, (const std::string::value_type *)p_p, v107);
              if (SHIBYTE(v169) < 0) {
                operator delete(__p);
              }
              v101 += 2;
              v100 -= 16;
            }
            while (v100);
          }
          std::string __p = 0;
          std::string::size_type v168 = 0;
          uint64_t v169 = 0;
          uint64_t v108 = (void *)(v163 - 16);
          unint64_t v109 = *(void *)(v163 - 16);
          if ((v109 & 2) != 0) {
            BOOL v110 = *(void ***)(v163 - 32);
          }
          else {
            BOOL v110 = (void **)&v108[-((v109 >> 2) & 0xF)];
          }
          std::string __p = *v110;
          if ((*v108 & 2) != 0) {
            BOOL v131 = *(void **)(v163 - 32);
          }
          else {
            BOOL v131 = &v108[-((*v108 >> 2) & 0xFLL)];
          }
          std::string::size_type v168 = v131[1];
          if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v132 = &v160;
          }
          else {
            int v132 = (std::string *)v160.__r_.__value_.__r.__words[0];
          }
          if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v160.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v160.__r_.__value_.__l.__size_;
          }
          uint64_t v134 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(**(void **)this + 312), (uint64_t *)v132, size);
          if (v135) {
            *(void *)(v134 + 16) = v134;
          }
          uint64_t v169 = v134 + 8;
          uint64_t v136 = v166;
          uint64_t v137 = v164;
          uint64_t v138 = llvm::MDTuple::getImpl(*(void **)this, (llvm::hashing::detail::hash_state *)&__p, 3uLL, 0, 1);
          llvm::TrackingMDRef::reset((uint64_t *)(**(void **)(v136 + 48) + 8 * v137), (uint64_t)v138);
          char v165 = 1;
          if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v160.__r_.__value_.__l.__data_);
          }
          uint64_t v11 = v99;
          uint64_t v10 = v98;
          int v7 = v156;
        }
        if (v170 != v172) {
          free(v170);
        }
        int v79 = *(uint64_t **)(v162 + 8);
        uint64_t v80 = *v79;
        if (*v79 == 30)
        {
LABEL_118:
          uint64_t v84 = v79[3];
          uint64_t v85 = v79[4];
          uint64_t v86 = v79[5];
          uint64_t v87 = *(uint64_t *)((char *)v79 + 46);
          if (v84 != 0x76697463656A624FLL
            || v85 != 0x6272614720432D65
            || v86 != 0x6C6C6F4320656761
            || v87 != 0x6E6F697463656C6CLL)
          {
            goto LABEL_204;
          }
          unint64_t v91 = *(void *)(v163 - 16);
          uint64_t v92 = (v91 & 2) != 0 ? *(void *)(v163 - 32) : v163 - 16 - 8 * ((v91 >> 2) & 0xF);
          uint64_t v111 = *(void *)(v92 + 16);
          if (*(unsigned char *)v111 != 1) {
            goto LABEL_204;
          }
          char v112 = *(llvm::Constant **)(v111 + 128);
          if (*(void *)v112 == v13) {
            goto LABEL_206;
          }
          int v157 = v7;
          uint64_t v113 = v13;
          uint64_t UniqueInteger = llvm::Constant::getUniqueInteger(v112);
          if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u) {
            char v115 = *(unint64_t **)UniqueInteger;
          }
          else {
            char v115 = (unint64_t *)UniqueInteger;
          }
          LODWORD(v116) = v11;
          unint64_t v117 = *v115;
          BOOL v118 = *v115 >= 0x100;
          int v119 = BYTE1(*v115);
          if (v118) {
            LODWORD(v12) = v119;
          }
          unsigned int v155 = v12;
          if (v118) {
            int v120 = v117 >> 16;
          }
          else {
            int v120 = v159;
          }
          if (v118) {
            uint64_t v116 = (v117 >> 24);
          }
          else {
            uint64_t v116 = v116;
          }
          uint64_t v121 = v116;
          if (v118) {
            uint64_t v10 = 1;
          }
          else {
            uint64_t v10 = v10;
          }
          size_t v170 = 0;
          uint64_t v171 = 0;
          v172[0] = 0;
          uint64_t v122 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v158, 1);
          size_t v170 = (void *)llvm::ValueAsMetadata::get(v122, v123);
          unint64_t v124 = *(void *)(v163 - 16);
          if ((v124 & 2) != 0) {
            uint64_t v125 = *(void *)(v163 - 32);
          }
          else {
            uint64_t v125 = v163 - 16 - 8 * ((v124 >> 2) & 0xF);
          }
          int v159 = v120;
          uint64_t v171 = *(void *)(v125 + 8);
          uint64_t v13 = v113;
          unsigned int v126 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v113, v117);
          v172[0] = llvm::ValueAsMetadata::get(v126, v127);
          uint64_t v128 = v166;
          uint64_t v129 = v164;
          BOOL v130 = llvm::MDTuple::getImpl(*(void **)this, (llvm::hashing::detail::hash_state *)&v170, 3uLL, 0, 1);
          llvm::TrackingMDRef::reset((uint64_t *)(**(void **)(v128 + 48) + 8 * v129), (uint64_t)v130);
          char v165 = 1;
          int v79 = *(uint64_t **)(v162 + 8);
          uint64_t v80 = *v79;
          uint64_t v11 = v121;
          unint64_t v12 = v155;
          int v7 = v157;
        }
      }
      if (v80 == 19)
      {
        uint64_t v139 = v79[3];
        uint64_t v140 = v79[4];
        uint64_t v141 = *(uint64_t *)((char *)v79 + 35);
        BOOL v144 = v139 == 0x2E68747561727470 && v140 == 0x737265762D696261 && v141 == 0x6E6F69737265762DLL;
        goto LABEL_205;
      }
LABEL_204:
      BOOL v144 = 0;
LABEL_205:
      v9 |= v144;
LABEL_206:
      unsigned int v6 = v164;
LABEL_207:
      unsigned int v164 = ++v6;
      if (v6 == v5)
      {
        if (!(v8 & 1 | ((v7 & 1) == 0)))
        {
          llvm::Module::addModuleFlag((void **)this, (llvm::Type *)4, (uint64_t *)"Objective-C Class Properties", 0x1CuLL, 0);
          char v165 = 1;
        }
        if (v10)
        {
          char v145 = 1;
          llvm::Module::addModuleFlag((void **)this, (llvm::Type *)1, (uint64_t *)"Swift ABI Version", 0x11uLL, (llvm::Type *)v12);
          __int16 v146 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v13, v11);
          uint64_t v148 = llvm::ValueAsMetadata::get(v146, v147);
          llvm::Module::addModuleFlag((void **)this, (llvm::Type *)1, (uint64_t *)"Swift Major Version", 0x13uLL, v148);
          std::string::size_type v149 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v13, v159);
          uint64_t v151 = llvm::ValueAsMetadata::get(v149, v150);
          llvm::Module::addModuleFlag((void **)this, (llvm::Type *)1, (uint64_t *)"Swift Minor Version", 0x13uLL, v151);
          char v165 = 1;
          if (v9) {
            return v145 != 0;
          }
        }
        else if (v9)
        {
          char v145 = v165;
          return v145 != 0;
        }
LABEL_218:
        char inserted = insertMissingPtrAuthABIVersion(this);
        char v145 = v165 | inserted;
        return v145 != 0;
      }
    }
  }
  return insertMissingPtrAuthABIVersion(this);
}

uint64_t insertMissingPtrAuthABIVersion(llvm::Module *a1)
{
  __int16 v8 = 260;
  int v7 = (char *)a1 + 208;
  llvm::Triple::Triple(__p, (const llvm::Twine *)&v7);
  Archuint64_t Name = llvm::Triple::getArchName((llvm::Triple *)__p);
  if (v3 == 6
    && (*(_DWORD *)ArchName == 913142369 ? (BOOL v4 = *(unsigned __int16 *)(ArchName + 4) == 25908) : (BOOL v4 = 0), v4))
  {
    llvm::Module::setPtrAuthABIVersion((void **)a1, 0xFFFFFFFFuLL);
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  return v5;
}

uint64_t *llvm::UpgradeModuleFlags(llvm::Module &)::$_0::operator()(void ***a1, unsigned int a2)
{
  uint64_t v17[3] = *MEMORY[0x263EF8340];
  uint64_t v3 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(***a1 + 1992, a2);
  v17[0] = llvm::ValueAsMetadata::get(v3, v4);
  uint64_t v5 = (*a1[1])[1];
  uint64_t v6 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(***a1 + 312), (uint64_t *)(v5 + 24), *(void *)v5);
  if (v7) {
    *(void *)(v6 + 16) = v6;
  }
  v17[1] = v6 + 8;
  uint64_t v8 = (uint64_t)*a1[2];
  unint64_t v11 = *(void *)(v8 - 16);
  uint64_t v9 = v8 - 16;
  unint64_t v10 = v11;
  if ((v11 & 2) != 0) {
    uint64_t v12 = *(*a1[2] - 4);
  }
  else {
    uint64_t v12 = v9 - 8 * ((v10 >> 2) & 0xF);
  }
  _OWORD v17[2] = *(void *)(v12 + 16);
  uint64_t v13 = (uint64_t)*a1[3];
  uint64_t v14 = *(unsigned int *)a1[4];
  Impl = llvm::MDTuple::getImpl(**a1, (llvm::hashing::detail::hash_state *)v17, 3uLL, 0, 1);
  uint64_t result = llvm::TrackingMDRef::reset((uint64_t *)(**(void **)(v13 + 48) + 8 * v14), (uint64_t)Impl);
  *(unsigned char *)a1[5] = 1;
  return result;
}

void llvm::UpgradeFunctionAttributes(llvm *this, llvm::Function *a2)
{
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_25;
    }
  }
  else if (*((llvm **)this + 9) == (llvm *)((char *)this + 72) && (*((unsigned char *)this + 35) & 1) == 0)
  {
    goto LABEL_25;
  }
  uint64_t v3 = *((void *)this + 14);
  if (!v3 || (*(unsigned char *)(v3 + 19) & 0x40) == 0)
  {
    BOOL v4 = (char *)this + 72;
    uint64_t v5 = (char *)*((void *)this + 10);
    if (v5 != (char *)this + 72)
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v5 + 1);
        if (v5) {
          char v7 = v5 - 24;
        }
        else {
          char v7 = 0;
        }
        uint64_t v8 = v7 + 40;
        uint64_t v9 = (void *)*((void *)v7 + 6);
        while (v9 != v8)
        {
          uint64_t v10 = (uint64_t)(v9 - 3);
          BOOL v11 = v9 == 0;
          uint64_t v9 = (void *)v9[1];
          if (v11) {
            uint64_t v12 = 0;
          }
          else {
            uint64_t v12 = v10;
          }
          switch(*(unsigned char *)(v12 + 16))
          {
            case '!':
            case '\'':
            case 'T':
              uint64_t v13 = *(void *)(v12 + 64);
              if ((v13 && (*(unsigned char *)(v13 + 19) & 0x40) != 0
                 || llvm::CallBase::hasFnAttrOnCalledFunction(v12, 62))
                && !llvm::ConstrainedFPIntrinsic::classof(v12))
              {
                *(void *)(v12 + 64) = llvm::AttributeList::removeAttributeAtIndex((void *)(v12 + 64), **(uint64_t ***)v12, -1, 62);
                *(void *)(v12 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t **)(v12 + 64), **(uint64_t ***)v12, -1, 19);
              }
              break;
            default:
              continue;
          }
        }
        uint64_t v5 = v6;
      }
      while (v6 != v4);
    }
  }
LABEL_25:
  llvm::AttributeFuncs::typeIncompatible(**(void **)(*((void *)this + 3) + 16), 3, v19);
  *((void *)this + 14) = llvm::AttributeList::removeAttributesAtIndex((void *)this + 14, **(uint64_t ***)this, 0, (uint64_t)v19);
  std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v20, v21);
  uint64_t v14 = llvm::Function::args(this);
  if (v14 != v15)
  {
    uint64_t v16 = v14;
    uint64_t v17 = v15;
    do
    {
      llvm::AttributeFuncs::typeIncompatible(*(void *)v16, 3, v19);
      uint64_t v18 = *(void *)(v16 + 24);
      uint64_t v22 = *(void *)(v18 + 112);
      *(void *)(*(void *)(v16 + 24) + 112) = llvm::AttributeList::removeAttributesAtIndex(&v22, **(uint64_t ***)v18, *(_DWORD *)(v16 + 32) + 1, (uint64_t)v19);
      std::__tree<llvm::SmallString<32u>>::destroy((uint64_t)&v20, v21);
      v16 += 40;
    }
    while (v16 != v17);
  }
}

llvm::MDNode *llvm::upgradeInstructionLoopAttachment(llvm *this, llvm::MDNode *a2)
{
  uint64_t v2 = this;
  v62[8] = *MEMORY[0x263EF8340];
  int v3 = *(unsigned __int8 *)this;
  if (v3 == 4) {
    BOOL v4 = this;
  }
  else {
    BOOL v4 = 0;
  }
  if (v3 != 4) {
    return v2;
  }
  uint64_t v6 = (unint64_t *)((char *)this - 16);
  unint64_t v5 = *((void *)this - 2);
  if ((v5 & 2) != 0)
  {
    char v7 = (uint64_t *)*((void *)this - 4);
    uint64_t v8 = *((unsigned int *)this - 6);
    if (!*((_DWORD *)this - 6)) {
      return v2;
    }
  }
  else
  {
    char v7 = (uint64_t *)&v6[-((v5 >> 2) & 0xF)];
    uint64_t v8 = (v5 >> 6) & 0xF;
    if (!v8) {
      return v2;
    }
  }
  uint64_t v9 = 8 * v8 - 8;
  do
  {
    uint64_t v10 = *v7;
    if (!*v7) {
      goto LABEL_21;
    }
    if (*(unsigned char *)v10 != 4) {
      goto LABEL_20;
    }
    unint64_t v11 = *(void *)(v10 - 16);
    if ((v11 & 2) != 0)
    {
      if (!*(_DWORD *)(v10 - 24)) {
        goto LABEL_20;
      }
      uint64_t v12 = *(uint64_t **)(v10 - 32);
    }
    else
    {
      if ((v11 & 0x3C0) == 0) {
        goto LABEL_20;
      }
      uint64_t v12 = (uint64_t *)(v10 - 16 - 8 * ((v11 >> 2) & 0xF));
    }
    uint64_t v10 = *v12;
    if (!v10) {
      goto LABEL_21;
    }
    if (*(unsigned char *)v10 || (uint64_t v13 = *(void **)(v10 + 8), *v13 < 0x10uLL))
    {
LABEL_20:
      LODWORD(v10) = 0;
LABEL_21:
      if (v10) {
        break;
      }
      goto LABEL_22;
    }
    uint64_t v16 = v13[3];
    uint64_t v15 = v13[4];
    BOOL v17 = v16 == 0x6365762E6D766C6CLL && v15 == 0x2E72657A69726F74;
    LODWORD(v10) = v17;
    if (v10) {
      break;
    }
LABEL_22:
    ++v7;
    uint64_t v14 = v9;
    v9 -= 8;
  }
  while (v14);
  if (!v10) {
    return v2;
  }
  uint64_t v57 = (llvm::hashing::detail::hash_state *)v59;
  uint64_t v58 = 0x800000000;
  if ((v5 & 2) != 0) {
    unsigned int v18 = *((_DWORD *)v4 - 6);
  }
  else {
    unsigned int v18 = (v5 >> 6) & 0xF;
  }
  if (v18 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, v59, v18, 8);
    unint64_t v5 = *v6;
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v19 = (llvm::MDNode **)*((void *)v4 - 4);
    uint64_t v20 = *((unsigned int *)v4 - 6);
    if (!*((_DWORD *)v4 - 6)) {
      goto LABEL_100;
    }
    goto LABEL_41;
  }
  uint64_t v19 = (llvm::MDNode **)&v6[-((v5 >> 2) & 0xF)];
  uint64_t v20 = (v5 >> 6) & 0xF;
  if (v20)
  {
LABEL_41:
    uint64_t v21 = &v19[v20];
    do
    {
      Impl = *v19;
      if (*v19 && *(unsigned char *)Impl == 4)
      {
        uint64_t v24 = (void *)((char *)Impl - 16);
        unint64_t v23 = *((void *)Impl - 2);
        if ((v23 & 2) != 0)
        {
          if (*((_DWORD *)Impl - 6))
          {
            uint64_t v25 = (uint64_t *)*((void *)Impl - 4);
LABEL_49:
            uint64_t v26 = *v25;
            if (*v25)
            {
              if (!*(unsigned char *)v26)
              {
                __n128 v27 = *(void **)(v26 + 8);
                if (*v27 >= 0x10uLL)
                {
                  uint64_t v29 = v27[3];
                  uint64_t v28 = v27[4];
                  if (v29 == 0x6365762E6D766C6CLL && v28 == 0x2E72657A69726F74)
                  {
                    int v60 = (llvm::hashing::detail::hash_state *)v62;
                    uint64_t v61 = 0x800000000;
                    if ((*v24 & 2) != 0) {
                      unint64_t v31 = *((unsigned int *)Impl - 6);
                    }
                    else {
                      unint64_t v31 = (*v24 >> 6) & 0xFLL;
                    }
                    if (v31 >= 9) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v62, v31, 8);
                    }
                    uint64_t v32 = *((void *)Impl + 1);
                    unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
                    if ((v32 & 4) != 0) {
                      unint64_t v33 = *(void *)v33;
                    }
                    int v34 = *(unint64_t **)(v26 + 8);
                    unint64_t v37 = *v34;
                    int v36 = v34 + 3;
                    unint64_t v35 = v37;
                    if (v37 == 22
                      && (*v36 == 0x6365762E6D766C6CLL ? (BOOL v38 = v36[1] == 0x2E72657A69726F74) : (BOOL v38 = 0),
                          v38 ? (BOOL v39 = *(void *)((char *)v36 + 14) == 0x6C6C6F726E752E72) : (BOOL v39 = 0),
                          v39))
                    {
                      uint64_t v43 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(*(void *)v33 + 312), (uint64_t *)"llvm.loop.interleave.count", 0x1AuLL);
                      if (v45) {
                        *(void *)(v43 + 16) = v43;
                      }
                    }
                    else
                    {
                      uint64_t v40 = 16;
                      if (v35 < 0x10) {
                        uint64_t v40 = v35;
                      }
                      v54[0] = "llvm.loop.vectorize.";
                      void v54[2] = (char *)v36 + v40;
                      v54[3] = v35 - v40;
                      __int16 v55 = 1283;
                      llvm::Twine::str((llvm::Twine *)v54, &__p);
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        p_p = &__p;
                      }
                      else {
                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                      }
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type size = __p.__r_.__value_.__l.__size_;
                      }
                      uint64_t v43 = *llvm::StringMap<llvm::MDString,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::try_emplace<>((llvm::StringMapImpl *)(*(void *)v33 + 312), (uint64_t *)p_p, size);
                      if (v44) {
                        *(void *)(v43 + 16) = v43;
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                    }
                    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v60, v43 + 8);
                    if ((*v24 & 2) != 0) {
                      uint64_t v46 = *((unsigned int *)Impl - 6);
                    }
                    else {
                      uint64_t v46 = (*v24 >> 6) & 0xFLL;
                    }
                    if (v46 != 1)
                    {
                      uint64_t v47 = 1;
                      do
                      {
                        if ((*v24 & 2) != 0) {
                          int v48 = (void *)*((void *)Impl - 4);
                        }
                        else {
                          int v48 = &v24[-((*v24 >> 2) & 0xFLL)];
                        }
                        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v60, v48[v47++]);
                      }
                      while (v46 != v47);
                    }
                    uint64_t v49 = *((void *)Impl + 1);
                    uint64_t v50 = (void *)(v49 & 0xFFFFFFFFFFFFFFF8);
                    if ((v49 & 4) != 0) {
                      uint64_t v50 = (void *)*v50;
                    }
                    Impl = llvm::MDTuple::getImpl(v50, v60, v61, 0, 1);
                    if (v60 != (llvm::hashing::detail::hash_state *)v62) {
                      free(v60);
                    }
                  }
                }
              }
            }
          }
        }
        else if ((v23 & 0x3C0) != 0)
        {
          uint64_t v25 = &v24[-((v23 >> 2) & 0xF)];
          goto LABEL_49;
        }
      }
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v57, (uint64_t)Impl);
      ++v19;
    }
    while (v19 != v21);
  }
LABEL_100:
  uint64_t v51 = *((void *)v4 + 1);
  BOOL v52 = (void *)(v51 & 0xFFFFFFFFFFFFFFF8);
  if ((v51 & 4) != 0) {
    BOOL v52 = (void *)*v52;
  }
  uint64_t v2 = llvm::MDTuple::getImpl(v52, v57, v58, 0, 1);
  if (v57 != (llvm::hashing::detail::hash_state *)v59) {
    free(v57);
  }
  return v2;
}

void llvm::UpgradeDataLayoutString(const char **a1@<X0>, size_t a2@<X1>, const char **a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v32 = a1;
  size_t v33 = a2;
  __int16 v38 = 261;
  int v34 = a3;
  size_t v35 = a4;
  llvm::Triple::Triple(&v28, (const llvm::Twine *)&v34);
  int v6 = v29;
  if ((v29 - 25) <= 1)
  {
    if (llvm::StringRef::find((uint64_t *)&v32, "-G", 2uLL, 0) == -1)
    {
      if (!v33)
      {
        std::string::basic_string[abi:nn180100]<0>((void *)a5, "G1");
        goto LABEL_51;
      }
      if (*(unsigned char *)v32 != 71)
      {
        __int16 v38 = 773;
        int v34 = v32;
        size_t v35 = v33;
        int v36 = "-G1";
LABEL_12:
        llvm::Twine::str((llvm::Twine *)&v34, (std::string *)a5);
        goto LABEL_51;
      }
    }
    int v6 = v29;
  }
  if (v6 == 28)
  {
    unint64_t v7 = llvm::StringRef::find((uint64_t *)&v32, "-n64-", 5uLL, 0);
    if (v7 == -1)
    {
      if (v32)
      {
        std::string::basic_string[abi:nn180100]((void *)a5, v32, v33);
      }
      else
      {
        *(void *)a5 = 0;
        *(void *)(a5 + 8) = 0;
        *(void *)(a5 + 16) = 0;
      }
      goto LABEL_51;
    }
    if (v33 >= v7) {
      size_t v8 = v7;
    }
    else {
      size_t v8 = v33;
    }
    __int16 v27 = 773;
    uint64_t v24 = v32;
    size_t v25 = v8;
    uint64_t v26 = "-n32:64-";
    size_t v9 = v7 + 5;
    if (v33 < v7 + 5) {
      size_t v9 = v33;
    }
    int v34 = (const char **)&v24;
    int v36 = (char *)v32 + v9;
    unint64_t v37 = v33 - v9;
    __int16 v38 = 1282;
    goto LABEL_12;
  }
  if (v32)
  {
    std::string::basic_string[abi:nn180100]((void *)a5, v32, v33);
    int v6 = v29;
  }
  else
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
  }
  if ((v6 - 37) <= 1)
  {
    std::string::basic_string[abi:nn180100]<0>(__p, "-p270:32:32-p271:32:32-p272:64:64");
    if ((v23 & 0x80u) == 0) {
      uint64_t v10 = (char *)__p;
    }
    else {
      uint64_t v10 = (char *)__p[0];
    }
    if ((v23 & 0x80u) == 0) {
      size_t v11 = v23;
    }
    else {
      size_t v11 = (size_t)__p[1];
    }
    if (llvm::StringRef::find((uint64_t *)&v32, v10, v11, 0) == -1)
    {
      int v34 = &v36;
      size_t v35 = 0x400000000;
      operator new();
    }
    if (v30 == 15 && (v31 == 19 || !v31) && getArchPointerBitWidth(v29) != 64)
    {
      int v12 = *(char *)(a5 + 23);
      BOOL v13 = v12 < 0;
      uint64_t v14 = *(void *)a5;
      if (v12 >= 0) {
        uint64_t v14 = a5;
      }
      unint64_t v15 = *(unsigned __int8 *)(a5 + 23);
      if (v13) {
        unint64_t v15 = *(void *)(a5 + 8);
      }
      uint64_t v20 = (const char **)v14;
      unint64_t v21 = v15;
      unint64_t v16 = llvm::StringRef::find((uint64_t *)&v20, "-f80:32-", 8uLL, 0);
      if (v16 != -1)
      {
        if (v21 >= v16) {
          unint64_t v17 = v16;
        }
        else {
          unint64_t v17 = v21;
        }
        __int16 v27 = 773;
        uint64_t v24 = v20;
        size_t v25 = v17;
        uint64_t v26 = "-f80:128-";
        unint64_t v18 = v16 + 8;
        if (v21 < v16 + 8) {
          unint64_t v18 = v21;
        }
        int v34 = (const char **)&v24;
        int v36 = (char *)v20 + v18;
        unint64_t v37 = v21 - v18;
        __int16 v38 = 1282;
        llvm::Twine::str((llvm::Twine *)&v34, &v19);
        if (*(char *)(a5 + 23) < 0) {
          operator delete(*(void **)a5);
        }
        *(std::string *)a5 = v19;
      }
    }
    if ((char)v23 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_51:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

uint64_t *llvm::UpgradeAttributes(llvm *this, llvm::AttrBuilder *a2)
{
  uint64_t Attribute = llvm::AttrBuilder::getAttribute((uint64_t)this, "no-frame-pointer-elim", 21);
  if (!Attribute)
  {
    if (!llvm::AttrBuilder::getAttribute((uint64_t)this, "no-frame-pointer-elim-non-leaf", 30)) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  BOOL v4 = "none";
  if (*(_DWORD *)(Attribute + 16) == 4)
  {
    unsigned int v5 = bswap32(*(_DWORD *)(Attribute + *(unsigned int *)(Attribute + 12) + 25));
    BOOL v6 = v5 >= 0x74727565;
    int v7 = v5 > 0x74727565;
    int v8 = !v6;
    if (v7 == v8) {
      BOOL v4 = "all";
    }
  }
  size_t v9 = strlen(v4);
  uint64_t v10 = llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim", 21);
  if (llvm::AttrBuilder::getAttribute(v10, "no-frame-pointer-elim-non-leaf", 30))
  {
    if (v9 == 3 && *(_WORD *)v4 == 27745 && v4[2] == 108)
    {
      size_t v9 = 3;
LABEL_18:
      llvm::AttrBuilder::removeAttribute((uint64_t)this, "no-frame-pointer-elim-non-leaf", 30);
LABEL_19:
      int v12 = llvm::Attribute::get(*(uint64_t **)this, "frame-pointer", 0xDuLL, v4, v9);
      addAttributeImpl<llvm::StringRef>((unsigned int *)this + 2, "frame-pointer", 13, (uint64_t)v12);
      goto LABEL_20;
    }
LABEL_17:
    BOOL v4 = "non-leaf";
    size_t v9 = 8;
    goto LABEL_18;
  }
  if (v9) {
    goto LABEL_19;
  }
LABEL_20:
  uint64_t result = (uint64_t *)llvm::AttrBuilder::getAttribute((uint64_t)this, "null-pointer-is-valid", 21);
  if (result)
  {
    if (*((_DWORD *)result + 4) == 4)
    {
      int v14 = *(_DWORD *)((char *)result + *((unsigned int *)result + 3) + 25);
      uint64_t result = (uint64_t *)llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 21);
      if (v14 == 1702195828)
      {
        unint64_t v15 = llvm::Attribute::get(*(uint64_t **)this, 39, 0);
        return addAttributeImpl<llvm::Attribute::AttrKind>((unsigned int *)this + 2, 39, v15);
      }
    }
    else
    {
      return (uint64_t *)llvm::AttrBuilder::removeAttribute((uint64_t)this, "null-pointer-is-valid", 21);
    }
  }
  return result;
}

uint64_t llvm::UpgradeOperandBundles(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = (long long *)a1[1];
  if ((long long *)*a1 == v3)
  {
    int v3 = (long long *)*a1;
  }
  else
  {
    while (1)
    {
      uint64_t v4 = *(unsigned __int8 *)(v2 + 23);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        uint64_t v4 = *(void *)(v2 + 8);
      }
      if (v4 == 22)
      {
        BOOL v6 = v5 >= 0 ? (uint64_t *)v2 : *(uint64_t **)v2;
        uint64_t v7 = *v6;
        uint64_t v8 = v6[1];
        uint64_t v9 = *(uint64_t *)((char *)v6 + 14);
        BOOL v10 = v7 == 0x72612E676E616C63 && v8 == 0x6863617474612E63;
        BOOL v11 = v10 && v9 == 0x6C6C616364656863;
        if (v11 && *(void *)(v2 + 32) == *(void *)(v2 + 24)) {
          break;
        }
      }
      v2 += 48;
      if ((long long *)v2 == v3)
      {
        uint64_t v2 = a1[1];
        goto LABEL_20;
      }
    }
    if ((long long *)v2 != v3)
    {
      uint64_t v13 = v2 + 48;
      if ((long long *)(v2 + 48) != v3)
      {
        do
        {
          uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
          int v15 = (char)v14;
          if ((v14 & 0x80u) != 0) {
            uint64_t v14 = *(void *)(v13 + 8);
          }
          if (v14 != 22
            || (v15 >= 0 ? (unint64_t v16 = (uint64_t *)v13) : (unint64_t v16 = *(uint64_t **)v13),
                (v17 = *v16, uint64_t v18 = v16[1], v19 = *(uint64_t *)((char *)v16 + 14), v17 == 0x72612E676E616C63)
              ? (BOOL v20 = v18 == 0x6863617474612E63)
              : (BOOL v20 = 0),
                v20 ? (BOOL v21 = v19 == 0x6C6C616364656863) : (BOOL v21 = 0),
                !v21 || *(void *)(v13 + 32) != *(void *)(v13 + 24)))
          {
            if (*(char *)(v2 + 23) < 0) {
              operator delete(*(void **)v2);
            }
            long long v22 = *(_OWORD *)v13;
            *(void *)(v2 + 16) = *(void *)(v13 + 16);
            *(_OWORD *)uint64_t v2 = v22;
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            std::vector<llvm::jitlink::Block *>::__move_assign(v2 + 24, (__n128 *)(v13 + 24));
            v2 += 48;
          }
          v13 += 48;
        }
        while ((long long *)v13 != v3);
        int v3 = (long long *)a1[1];
      }
    }
  }
LABEL_20:
  return std::vector<llvm::OperandBundleDefT<llvm::Value *>>::erase((uint64_t)a1, v2, v3);
}

void rename(uint64_t ***this)
{
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    Valueuint64_t Name = (uint64_t *)llvm::Value::getValueName(this);
    uint64_t v5 = *ValueName;
    int v3 = ValueName + 2;
    uint64_t v2 = v5;
  }
  else
  {
    uint64_t v2 = 0;
    int v3 = &str_3_24;
  }
  __int16 v7 = 773;
  v6[0] = v3;
  v6[1] = v2;
  void v6[2] = ".old";
  llvm::Value::setName((llvm::Value *)this, (const llvm::Twine *)v6);
}

uint64_t llvm::StringSwitch<BOOL,BOOL>::Cases(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7)
{
  uint64_t v11 = llvm::StringSwitch<BOOL,BOOL>::Case(a1, a2, a3);
  uint64_t v12 = llvm::StringSwitch<BOOL,BOOL>::Case(v11, a4, a5);
  return llvm::StringSwitch<BOOL,BOOL>::Case(v12, a6, a7);
}

uint64_t llvm::StringSwitch<BOOL,BOOL>::StartsWith(uint64_t a1, const void *a2, size_t a3)
{
  if (!*(unsigned char *)(a1 + 17) && *(void *)(a1 + 8) >= a3 && (!a3 || !memcmp(*(const void **)a1, a2, a3))) {
    *(_WORD *)(a1 + 16) = 257;
  }
  return a1;
}

uint64_t UpgradeX86IntrinsicFunction(uint64_t a1, uint64_t a2, unint64_t a3, llvm::Function **a4)
{
  size_t v4 = a3 - 4;
  if (a3 < 4 || *(_DWORD *)a2 != 775305336) {
    return 0;
  }
  BOOL v10 = (void *)(a2 + 4);
  if (ShouldUpgradeX86Intrinsic((uint64_t *)(a2 + 4), a3 - 4))
  {
    *a4 = 0;
    return 1;
  }
  if (v4 != 6)
  {
    if (v4 >= 0xB
      && (*v10 == 0x74702E3134657373 ? (BOOL v14 = *(void *)(a2 + 7) == 0x74736574702E3134) : (BOOL v14 = 0), v14))
    {
      switch(a3)
      {
        case 0x10uLL:
          int v18 = *(unsigned __int8 *)(a2 + 15);
          if (v18 == 122)
          {
            uint64_t v19 = (llvm::Function *)a1;
            int v20 = 11402;
            goto LABEL_225;
          }
          if (v18 == 99)
          {
            uint64_t v19 = (llvm::Function *)a1;
            int v20 = 11400;
            goto LABEL_225;
          }
LABEL_139:
          if (!memcmp((const void *)(a2 + 4), "avx2.mpsadbw", v4))
          {
            unint64_t v16 = (llvm::Function *)a1;
            int v17 = 10316;
            goto LABEL_210;
          }
          goto LABEL_164;
        case 0x11uLL:
LABEL_39:
          if (!memcmp((const void *)(a2 + 4), "sse41.mpsadbw", v4))
          {
            unint64_t v16 = (llvm::Function *)a1;
            int v17 = 11396;
            goto LABEL_210;
          }
          if (*v10 == 0x702E70642E787661 && *(void *)(a2 + 9) == 0x3635322E73702E70)
          {
            unint64_t v16 = (llvm::Function *)a1;
            int v17 = 10247;
            goto LABEL_210;
          }
          goto LABEL_164;
        case 0x12uLL:
          if (*(_WORD *)(a2 + 15) == 31342 && *(unsigned char *)(a2 + 17) == 99)
          {
            uint64_t v19 = (llvm::Function *)a1;
            int v20 = 11401;
LABEL_225:
            return UpgradePTESTIntrinsic(v19, v20, a4);
          }
          else
          {
LABEL_160:
            if (*v10 != 0x6E692E3134657373 || *(void *)(a2 + 10) != 0x7370747265736E69) {
              goto LABEL_164;
            }
            unint64_t v16 = (llvm::Function *)a1;
            int v17 = 11395;
LABEL_210:
            return UpgradeX86IntrinsicsWith8BitMask(v16, v17, a4);
          }
        case 0x13uLL:
        case 0x14uLL:
        case 0x15uLL:
        case 0x16uLL:
        case 0x17uLL:
        case 0x18uLL:
        case 0x19uLL:
        case 0x1CuLL:
        case 0x1DuLL:
        case 0x1EuLL:
          goto LABEL_37;
        case 0x1AuLL:
LABEL_46:
          if (!memcmp((const void *)(a2 + 4), "avx512.mask.cmp.pd.128", v4))
          {
            int v34 = (llvm::Function *)a1;
            int v35 = 10464;
          }
          else if (*v10 == 0x6D2E323135787661 {
                 && *(void *)(a2 + 12) == 0x2E706D632E6B7361
          }
                 && *(void *)(a2 + 18) == 0x3635322E64702E70)
          {
            int v34 = (llvm::Function *)a1;
            int v35 = 10465;
          }
          else if (*v10 == 0x6D2E323135787661 {
                 && *(void *)(a2 + 12) == 0x2E706D632E6B7361
          }
                 && *(void *)(a2 + 18) == 0x3231352E64702E70)
          {
            int v34 = (llvm::Function *)a1;
            int v35 = 10466;
          }
          else if (*v10 == 0x6D2E323135787661 {
                 && *(void *)(a2 + 12) == 0x2E706D632E6B7361
          }
                 && *(void *)(a2 + 18) == 0x3832312E73702E70)
          {
            int v34 = (llvm::Function *)a1;
            int v35 = 10467;
          }
          else if (*v10 == 0x6D2E323135787661 {
                 && *(void *)(a2 + 12) == 0x2E706D632E6B7361
          }
                 && *(void *)(a2 + 18) == 0x3635322E73702E70)
          {
            int v34 = (llvm::Function *)a1;
            int v35 = 10468;
          }
          else
          {
            if (*v10 != 0x6D2E323135787661
              || *(void *)(a2 + 12) != 0x2E706D632E6B7361
              || *(void *)(a2 + 18) != 0x3231352E73702E70)
            {
              goto LABEL_164;
            }
            int v34 = (llvm::Function *)a1;
            int v35 = 10469;
          }
          return UpgradeX86MaskedFPCompare(v34, v35, a4);
        case 0x1BuLL:
LABEL_84:
          if (!memcmp((const void *)(a2 + 4), "avx512bf16.dpbf16ps.128", v4))
          {
            uint64_t v40 = (llvm::Function *)a1;
            int v41 = 10964;
          }
          else if (*v10 == 0x6662323135787661 {
                 && *(void *)(a2 + 12) == 0x31666270642E3631
          }
                 && *(void *)(a2 + 19) == 0x3635322E73703631)
          {
            uint64_t v40 = (llvm::Function *)a1;
            int v41 = 10965;
          }
          else
          {
            if (*v10 != 0x6662323135787661
              || *(void *)(a2 + 12) != 0x31666270642E3631
              || *(void *)(a2 + 19) != 0x3231352E73703631)
            {
              goto LABEL_164;
            }
            uint64_t v40 = (llvm::Function *)a1;
            int v41 = 10966;
          }
          return UpgradeX86BF16DPIntrinsic(v40, v41, a4);
        case 0x1FuLL:
LABEL_101:
          if (!memcmp((const void *)(a2 + 4), "avx512bf16.cvtneps2bf16.256", v4))
          {
            BOOL v21 = (llvm::Function *)a1;
            int v22 = 10962;
            goto LABEL_153;
          }
          if (*v10 == 0x6662323135787661
            && *(void *)(a2 + 12) == 0x656E7476632E3631
            && *(void *)(a2 + 20) == 0x2E36316662327370
            && *(void *)(a2 + 23) == 0x3231352E36316662)
          {
            BOOL v21 = (llvm::Function *)a1;
            int v22 = 10963;
            goto LABEL_153;
          }
          goto LABEL_164;
        case 0x20uLL:
LABEL_114:
          if (!memcmp((const void *)(a2 + 4), "avx512bf16.cvtne2ps2bf16.128", v4))
          {
            BOOL v21 = (llvm::Function *)a1;
            int v22 = 10959;
            goto LABEL_153;
          }
          if (*v10 == 0x6662323135787661
            && *(void *)(a2 + 12) == 0x656E7476632E3631
            && *(void *)(a2 + 20) == 0x3631666232737032
            && *(_DWORD *)(a2 + 28) == 909455918)
          {
            BOOL v21 = (llvm::Function *)a1;
            int v22 = 10960;
            goto LABEL_153;
          }
          if (*v10 == 0x6662323135787661
            && *(void *)(a2 + 12) == 0x656E7476632E3631
            && *(void *)(a2 + 20) == 0x3631666232737032
            && *(_DWORD *)(a2 + 28) == 842085678)
          {
            BOOL v21 = (llvm::Function *)a1;
            int v22 = 10961;
            goto LABEL_153;
          }
          goto LABEL_164;
        default:
LABEL_34:
          if (a3 == 36)
          {
            if (!memcmp((const void *)(a2 + 4), "avx512bf16.mask.cvtneps2bf16.128", v4))
            {
              BOOL v21 = (llvm::Function *)a1;
              int v22 = 10967;
LABEL_153:
              return UpgradeX86BF16Intrinsic(v21, v22, a4);
            }
          }
          else
          {
LABEL_37:
            if (v4 < 0xC) {
              return 0;
            }
          }
LABEL_164:
          BOOL v57 = *v10 == 0x637266762E706F78 && *(_DWORD *)(a2 + 12) == 1936928378;
          if (v57 && *(void *)(a1 + 96) == 2)
          {
            rename((uint64_t ***)a1);
            int v53 = *(uint64_t ***)(a1 + 40);
            int v54 = 11536;
            goto LABEL_220;
          }
          BOOL v58 = *v10 == 0x637266762E706F78 && *(_DWORD *)(a2 + 12) == 1685270138;
          if (v58 && *(void *)(a1 + 96) == 2)
          {
            rename((uint64_t ***)a1);
            int v53 = *(uint64_t ***)(a1 + 40);
            int v54 = 11535;
            goto LABEL_220;
          }
          if (*v10 == 0x726570762E706F78 && *(_DWORD *)(a2 + 12) == 845965677)
          {
            uint64_t v61 = *(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 24);
            int v62 = *(_DWORD *)(v61 + 8);
            if ((v62 & 0xFE) == 0x12) {
              int v62 = *(_DWORD *)(**(void **)(v61 + 16) + 8);
            }
            BOOL v63 = v62 < 4u || v62 == 5;
            int v64 = v62 & 0xFD;
            if (v63 || v64 == 4)
            {
              rename((uint64_t ***)a1);
              int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v61);
              if ((_BYTE)v66) {
              if ((*(_DWORD *)(v61 + 8) & 0xFE) == 0x12)
              }
                uint64_t v61 = **(void **)(v61 + 16);
              int v68 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v61);
              if (v68 == 64 && PrimitiveSizeInBits == 128)
              {
                int v54 = 11537;
              }
              else if (v68 == 32 && PrimitiveSizeInBits == 128)
              {
                int v54 = 11539;
              }
              else if (PrimitiveSizeInBits == 256 && v68 == 64)
              {
                int v54 = 11538;
              }
              else
              {
                int v54 = 11540;
              }
              int v53 = *(uint64_t ***)(a1 + 40);
              goto LABEL_220;
            }
          }
          if (v4 == 13 && *v10 == 0x6F6365722E686573 && *(void *)(a2 + 9) == 0x70667265766F6365)
          {
            int v53 = *(uint64_t ***)(a1 + 40);
            int v54 = 65;
            goto LABEL_220;
          }
          break;
      }
    }
    else
    {
      switch(a3)
      {
        case 0xEuLL:
          if (!memcmp((const void *)(a2 + 4), "sse41.dppd", v4))
          {
            unint64_t v16 = (llvm::Function *)a1;
            int v17 = 11393;
            goto LABEL_210;
          }
          if (*v10 == 0x70642E3134657373 && *(_WORD *)(a2 + 12) == 29552)
          {
            unint64_t v16 = (llvm::Function *)a1;
            int v17 = 11394;
            goto LABEL_210;
          }
          break;
        case 0xFuLL:
        case 0x13uLL:
        case 0x14uLL:
        case 0x15uLL:
        case 0x16uLL:
        case 0x17uLL:
        case 0x18uLL:
        case 0x19uLL:
        case 0x1CuLL:
        case 0x1DuLL:
        case 0x1EuLL:
          goto LABEL_37;
        case 0x10uLL:
          goto LABEL_139;
        case 0x11uLL:
          goto LABEL_39;
        case 0x12uLL:
          goto LABEL_160;
        case 0x1AuLL:
          goto LABEL_46;
        case 0x1BuLL:
          goto LABEL_84;
        case 0x1FuLL:
          goto LABEL_101;
        case 0x20uLL:
          goto LABEL_114;
        default:
          goto LABEL_34;
      }
    }
    return 0;
  }
  BOOL v11 = *(_DWORD *)v10 == 1937007730 && *(_WORD *)(a2 + 8) == 28771;
  if (v11 && *(_DWORD *)(*(void *)(a1 + 24) + 12) != 1)
  {
    if ((*(unsigned char *)(a1 + 23) & 0x10) != 0)
    {
      Valueuint64_t Name = (uint64_t *)llvm::Value::getValueName((uint64_t ***)a1);
      uint64_t v52 = *ValueName;
      uint64_t v13 = ValueName + 2;
      uint64_t v12 = v52;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = &str_3_24;
    }
    __int16 v71 = 773;
    v70[0] = v13;
    v70[1] = v12;
    v70[2] = ".old";
    llvm::Value::setName((llvm::Value *)a1, (const llvm::Twine *)v70);
    int v53 = *(uint64_t ***)(a1 + 40);
    int v54 = 11268;
LABEL_220:
    *a4 = (llvm::Function *)llvm::Intrinsic::getDeclaration(v53, v54, 0, 0);
    return 1;
  }
  return 0;
}

uint64_t llvm::StringSwitch<BOOL,BOOL>::Case(uint64_t a1, const void *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 17))
  {
    size_t v5 = *(void *)(a1 + 8);
    if (v5 == a3 && (!v5 || !memcmp(*(const void **)a1, a2, v5))) {
      *(_WORD *)(a1 + 16) = 257;
    }
  }
  return a1;
}

BOOL ShouldUpgradeX86Intrinsic(uint64_t *a1, unint64_t a2)
{
  if (a2 == 12)
  {
    if (*a1 == 0x7972726163646461 && *((_DWORD *)a1 + 2) == 842233134) {
      return 1;
    }
    if (*a1 == 0x7972726163646461 && *((_DWORD *)a1 + 2) == 875984174) {
      return 1;
    }
  }
  else if (a2 == 13)
  {
    if (*a1 == 0x7972726163646461 && *(uint64_t *)((char *)a1 + 5) == 0x3233752E78797272) {
      return 1;
    }
    if (*a1 == 0x7972726163646461 && *(uint64_t *)((char *)a1 + 5) == 0x3436752E78797272) {
      return 1;
    }
    if (*a1 == 0x6F72726F62627573 && *(uint64_t *)((char *)a1 + 5) == 0x3233752E776F7272) {
      return 1;
    }
    if (*a1 == 0x6F72726F62627573 && *(uint64_t *)((char *)a1 + 5) == 0x3436752E776F7272) {
      return 1;
    }
  }
  else if (a2 < 0xB)
  {
    if (a2 == 10)
    {
      BOOL v9 = *a1 == 0x6261702E32787661 && *((_WORD *)a1 + 4) == 11891;
      BOOL result = 1;
      if (v9) {
        return result;
      }
      int v11 = 0;
      BOOL v12 = 1;
      char v13 = 1;
      char v14 = 1;
      BOOL v15 = 1;
      char v16 = 1;
      BOOL v17 = 1;
      char v18 = 1;
      char v19 = 1;
      char v20 = 1;
      BOOL v21 = 1;
      goto LABEL_102;
    }
    int v11 = 0;
    BOOL v21 = 1;
    char v20 = 1;
    char v19 = 1;
    char v31 = 1;
    BOOL v17 = 1;
    char v16 = 1;
    BOOL v15 = 1;
    char v14 = 1;
    char v13 = 1;
    BOOL v12 = 1;
    goto LABEL_77;
  }
  if (*a1 == 0x6461702E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x2E73646461702E32) {
    return 1;
  }
  if (*a1 == 0x7573702E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x2E73627573702E32) {
    return 1;
  }
  BOOL v17 = a2 < 0xC;
  if (a2 >= 0xC)
  {
    if (*a1 == 0x6461702E32657373 && *((_DWORD *)a1 + 2) == 779318628) {
      return 1;
    }
    if (*a1 == 0x7573702E32657373 && *((_DWORD *)a1 + 2) == 779318626) {
      return 1;
    }
  }
  if (*a1 == 0x6461702E32787661 && *(uint64_t *)((char *)a1 + 3) == 0x2E73646461702E32) {
    return 1;
  }
  if (*a1 == 0x7573702E32787661 && *(uint64_t *)((char *)a1 + 3) == 0x2E73627573702E32) {
    return 1;
  }
  if (a2 < 0xC) {
    goto LABEL_64;
  }
  if (*a1 == 0x6461702E32787661 && *((_DWORD *)a1 + 2) == 779318628) {
    return 1;
  }
  if (*a1 == 0x7573702E32787661 && *((_DWORD *)a1 + 2) == 779318626) {
    return 1;
  }
  if (a2 < 0xD)
  {
LABEL_64:
    int v11 = 0;
    char v16 = 1;
    char v20 = 1;
    BOOL v28 = 1;
    goto LABEL_65;
  }
  if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x2E73646461702E32) {
    return 1;
  }
  if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x2E73627573702E32) {
    return 1;
  }
  BOOL v28 = a2 < 0x12;
  if (a2 >= 0x12)
  {
    if (*a1 == 0x6D2E323135787661 && a1[1] == 0x646461702E6B7361 && *((_WORD *)a1 + 8) == 11891) {
      return 1;
    }
    uint64_t v202 = a1[1];
    int v203 = *((unsigned __int16 *)a1 + 8);
    BOOL v204 = *a1 == 0x6D2E323135787661 && v202 == 0x627573702E6B7361;
    if (v204 && v203 == 11891) {
      return 1;
    }
    if (a2 >= 0x13)
    {
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x646461702E6B7361
        && *(uint64_t *)((char *)a1 + 11) == 0x2E7375646461702ELL)
      {
        return 1;
      }
      BOOL v219 = *a1 == 0x6D2E323135787661 && a1[1] == 0x627573702E6B7361;
      if (v219 && *(uint64_t *)((char *)a1 + 11) == 0x2E7375627573702ELL) {
        return 1;
      }
      char v20 = 0;
      int v11 = 0;
      goto LABEL_762;
    }
  }
  else if (a2 == 16)
  {
    if (*a1 == 0x61702E3365737373 && a1[1] == 0x3832312E622E7362) {
      return 1;
    }
    if (*a1 == 0x61702E3365737373 && a1[1] == 0x3832312E772E7362) {
      return 1;
    }
    BOOL v61 = *a1 == 0x61702E3365737373 && a1[1] == 0x3832312E642E7362;
    char v20 = 1;
    int v11 = 1;
    BOOL result = 1;
    if (v61) {
      return result;
    }
    goto LABEL_762;
  }
  int v11 = 0;
  char v20 = 1;
LABEL_762:
  if (*a1 == 0x6D66762E34616D66 && *(uint64_t *)((char *)a1 + 5) == 0x732E6464616D6676) {
    return 1;
  }
  char v16 = 0;
LABEL_65:
  if (*a1 == 0x616D66762E616D66 && *(uint64_t *)((char *)a1 + 3) == 0x2E6464616D66762ELL) {
    return 1;
  }
  if (*a1 == 0x736D66762E616D66 && *(uint64_t *)((char *)a1 + 3) == 0x2E6275736D66762ELL) {
    return 1;
  }
  BOOL v15 = a2 < 0xE;
  if (a2 >= 0xE)
  {
    if (*a1 == 0x736D66762E616D66 && *(uint64_t *)((char *)a1 + 6) == 0x2E6464616275736DLL) {
      return 1;
    }
LABEL_218:
    if (*a1 == 0x6D6E66762E616D66 && *((_DWORD *)a1 + 2) == 778331233) {
      return 1;
    }
    if (*a1 == 0x6D6E66762E616D66 && *((_DWORD *)a1 + 2) == 778204531) {
      return 1;
    }
    goto LABEL_226;
  }
  if (a2 >= 0xC) {
    goto LABEL_218;
  }
LABEL_226:
  if ((v20 & 1) == 0)
  {
    BOOL v65 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616D66762E6B7361;
    if (v65 && *(uint64_t *)((char *)a1 + 11) == 0x2E6464616D66762ELL) {
      return 1;
    }
  }
  BOOL v21 = a2 < 0x14;
  if (a2 <= 0x13) {
    goto LABEL_235;
  }
  if (*a1 == 0x6D2E323135787661 && a1[1] == 0x6D6E66762E6B7361 && *((_DWORD *)a1 + 4) == 778331233) {
    return 1;
  }
  BOOL v75 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D6E66762E6B7361;
  if (v75 && *((_DWORD *)a1 + 4) == 778204531) {
    return 1;
  }
  BOOL v77 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E336B7361;
  if (v77 && *((_DWORD *)a1 + 4) == 778331233) {
    return 1;
  }
  BOOL v79 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E7A6B7361;
  if (v79 && *((_DWORD *)a1 + 4) == 778331233) {
    return 1;
  }
  BOOL v81 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E336B7361;
  if (v81 && *((_DWORD *)a1 + 4) == 778204531) {
    return 1;
  }
  if (a2 < 0x15)
  {
LABEL_235:
    BOOL v12 = 1;
    char v13 = 1;
    char v14 = 1;
    char v19 = 1;
    if (v28) {
      goto LABEL_251;
    }
  }
  else
  {
    if (*a1 == 0x6D2E323135787661
      && a1[1] == 0x6E66762E336B7361
      && *(uint64_t *)((char *)a1 + 13) == 0x2E6275736D6E6676)
    {
      return 1;
    }
    BOOL v12 = a2 < 0x16;
    if (a2 < 0x16) {
      goto LABEL_314;
    }
    if (*a1 == 0x6D2E323135787661
      && a1[1] == 0x616D66762E6B7361
      && *(uint64_t *)((char *)a1 + 14) == 0x2E6275736464616DLL)
    {
      return 1;
    }
    if (a2 >= 0x17)
    {
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x6D66762E7A6B7361
        && *(uint64_t *)((char *)a1 + 15) == 0x2E6275736464616DLL)
      {
        return 1;
      }
      BOOL v231 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E336B7361;
      if (v231 && *(uint64_t *)((char *)a1 + 15) == 0x2E6275736464616DLL) {
        return 1;
      }
      BOOL v233 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D66762E336B7361;
      if (v233 && *(uint64_t *)((char *)a1 + 15) == 0x2E6464616275736DLL) {
        return 1;
      }
      char v14 = 0;
    }
    else
    {
LABEL_314:
      char v14 = 1;
    }
    char v13 = 0;
    if (v28)
    {
      char v19 = 1;
      if (v16) {
        goto LABEL_256;
      }
LABEL_252:
      if (*a1 == 0x6B2E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x6B63706E756B2E32) {
        return 1;
      }
      goto LABEL_256;
    }
  }
  if (*a1 == 0x6D2E323135787661 && a1[1] == 0x667568732E6B7361 && *((_WORD *)a1 + 8) == 26926) {
    return 1;
  }
  BOOL v69 = *a1 == 0x6D2E323135787661 && a1[1] == 0x667568732E6B7361;
  if (v69 && *((_WORD *)a1 + 8) == 26158) {
    return 1;
  }
  char v19 = 0;
LABEL_251:
  if ((v16 & 1) == 0) {
    goto LABEL_252;
  }
LABEL_256:
  if (*a1 == 0x6261702E32787661 && *((_WORD *)a1 + 4) == 11891) {
    return 1;
  }
  if (a2 >= 0x11)
  {
    if (*a1 == 0x6D2E323135787661 && a1[1] == 0x736261702E6B7361 && *((unsigned char *)a1 + 16) == 46) {
      return 1;
    }
    BOOL v209 = *a1 == 0x622E323135787661 && a1[1] == 0x7473616364616F72;
    if (v209 && *((unsigned char *)a1 + 16) == 109) {
      return 1;
    }
    char v31 = 0;
    BOOL v17 = 0;
    BOOL v15 = 0;
    LOBYTE(result) = 0;
    goto LABEL_78;
  }
  char v31 = 0;
LABEL_77:
  LOBYTE(result) = 1;
LABEL_78:
  if (a2 == 12)
  {
    if (*a1 == 0x7271732E32657373 && *((_DWORD *)a1 + 2) == 1685270132) {
      return 1;
    }
  }
  else if (a2 == 11 && *a1 == 0x747271732E657373 && *(uint64_t *)((char *)a1 + 3) == 0x73732E747271732ELL)
  {
    return 1;
  }
  if ((v19 & 1) == 0)
  {
    BOOL v34 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747271732E6B7361;
    if (v34 && *((_WORD *)a1 + 8) == 28718) {
      return 1;
    }
  }
  if (v31)
  {
    char v36 = 1;
    char v18 = 1;
    if (v12) {
      goto LABEL_123;
    }
    goto LABEL_116;
  }
  char v18 = 0;
LABEL_102:
  if (*a1 == 0x747271732E787661 && *((_WORD *)a1 + 4) == 28718) {
    return 1;
  }
  if ((v18 & 1) == 0 && *a1 == 0x7271732E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x702E747271732E32) {
    return 1;
  }
  if (*a1 == 0x747271732E657373 && *((_WORD *)a1 + 4) == 28718) {
    return 1;
  }
  char v36 = 0;
  if (v12) {
    goto LABEL_123;
  }
LABEL_116:
  if (*a1 == 0x6D2E323135787661
    && a1[1] == 0x6F7262702E6B7361
    && *(uint64_t *)((char *)a1 + 14) == 0x7473616364616F72)
  {
    return 1;
  }
LABEL_123:
  if (!v17)
  {
    if (*a1 == 0x6D63702E32657373 && *((_DWORD *)a1 + 2) == 779183472) {
      return 1;
    }
    if (*a1 == 0x6D63702E32657373 && *((_DWORD *)a1 + 2) == 779380592) {
      return 1;
    }
    if (*a1 == 0x6D63702E32787661 && *((_DWORD *)a1 + 2) == 779183472) {
      return 1;
    }
    if (*a1 == 0x6D63702E32787661 && *((_DWORD *)a1 + 2) == 779380592) {
      return 1;
    }
  }
  if ((v20 & 1) == 0)
  {
    BOOL v42 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D63702E6B7361;
    if (v42 && *(uint64_t *)((char *)a1 + 11) == 0x2E7165706D63702ELL) {
      return 1;
    }
    BOOL v44 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D63702E6B7361;
    if (v44 && *(uint64_t *)((char *)a1 + 11) == 0x2E7467706D63702ELL) {
      return 1;
    }
  }
  if (a2 >= 0xF && *a1 == 0x726570762E787661 && *(uint64_t *)((char *)a1 + 7) == 0x2E38323166326D72) {
    return 1;
  }
  switch(a2)
  {
    case 0xAuLL:
      if ((*a1 != 0x2E6464612E657373 || *((_WORD *)a1 + 4) != 29555)
        && (*a1 != 0x2E6275732E657373 || *((_WORD *)a1 + 4) != 29555)
        && (*a1 != 0x2E6C756D2E657373 || *((_WORD *)a1 + 4) != 29555)
        && (*a1 != 0x2E7669642E657373 || *((_WORD *)a1 + 4) != 29555))
      {
        goto LABEL_438;
      }
      return 1;
    case 0xBuLL:
      if (*a1 == 0x6464612E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x64732E6464612E32) {
        return 1;
      }
      if (*a1 == 0x6275732E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x64732E6275732E32) {
        return 1;
      }
      if (*a1 == 0x6C756D2E32657373 && *(uint64_t *)((char *)a1 + 3) == 0x64732E6C756D2E32) {
        return 1;
      }
      uint64_t v88 = *(uint64_t *)((char *)a1 + 3);
      BOOL v89 = *a1 == 0x7669642E32657373;
      uint64_t v90 = 0x64732E7669642E32;
LABEL_322:
      if (!v89 || v88 != v90) {
        goto LABEL_438;
      }
      return 1;
    case 0xCuLL:
      if ((*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1651734625)
        && (*a1 != 0x616D702E32657373 || *((_DWORD *)a1 + 2) != 1999532920)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1685289057)
        && (*a1 != 0x616D702E32657373 || *((_DWORD *)a1 + 2) != 1647211896)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 2004187233)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1685420129)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1651732073)
        && (*a1 != 0x696D702E32657373 || *((_DWORD *)a1 + 2) != 1999532910)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1685286505)
        && (*a1 != 0x696D702E32657373 || *((_DWORD *)a1 + 2) != 1647211886)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 2004184681)
        && (*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1685417577)
        && (*a1 != 0x6B2E323135787661 || *((_DWORD *)a1 + 2) != 1999532655))
      {
        goto LABEL_438;
      }
      return 1;
    case 0xDuLL:
      if (*a1 == 0x6B2E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x772E646E616B2E32) {
        return 1;
      }
      if (*a1 == 0x6B2E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x772E746F6E6B2E32) {
        return 1;
      }
      uint64_t v114 = *(uint64_t *)((char *)a1 + 5);
      BOOL v115 = *a1 == 0x6B2E323135787661;
      unsigned int v116 = 2020290098;
      goto LABEL_425;
    case 0xEuLL:
      if (*a1 == 0x6B2E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x772E6E646E616B2ELL) {
        return 1;
      }
      uint64_t v114 = *(uint64_t *)((char *)a1 + 6);
      BOOL v115 = *a1 == 0x6B2E323135787661;
      unsigned int v116 = 1853385518;
LABEL_425:
      uint64_t v118 = v116 | 0x772E726F00000000;
      if (!v115 || v114 != v118) {
        goto LABEL_438;
      }
      return 1;
    case 0xFuLL:
      uint64_t v88 = *(uint64_t *)((char *)a1 + 7);
      BOOL v89 = *a1 == 0x6570762E32787661;
      uint64_t v90 = 0x38323169326D7265;
      goto LABEL_322;
    case 0x11uLL:
      if (*a1 != 0x6B2E323135787661 || a1[1] != 0x2E6374736574726FLL || *((unsigned char *)a1 + 16) != 119)
      {
        BOOL v97 = *a1 == 0x6B2E323135787661 && a1[1] == 0x2E7A74736574726FLL;
        if (!v97 || *((unsigned char *)a1 + 16) != 119) {
          goto LABEL_438;
        }
      }
      return 1;
    default:
      if (v21)
      {
        if (a2 < 9)
        {
          char v87 = 1;
LABEL_449:
          BOOL v124 = 1;
          goto LABEL_467;
        }
      }
      else if (*a1 == 0x6D2E323135787661 && a1[1] == 0x756873702E6B7361 && *((_DWORD *)a1 + 4) == 778186342)
      {
        return 1;
      }
LABEL_438:
      if (*a1 == 0x616D702E32787661 && *((unsigned char *)a1 + 8) == 120) {
        return 1;
      }
      if (*a1 == 0x696D702E32787661 && *((unsigned char *)a1 + 8) == 110) {
        return 1;
      }
      BOOL v124 = a2 < 0x10;
      if (a2 >= 0x10)
      {
        if (*a1 == 0x6D2E323135787661 && a1[1] == 0x78616D702E6B7361) {
          return 1;
        }
        if (*a1 == 0x6D2E323135787661 && a1[1] == 0x6E696D702E6B7361) {
          return 1;
        }
      }
      else if (a2 < 0xF)
      {
        char v87 = 0;
        goto LABEL_449;
      }
      if (*a1 == 0x7262762E32787661 && *(uint64_t *)((char *)a1 + 7) == 0x7473616364616F72) {
        return 1;
      }
      if (*a1 == 0x7262702E32787661 && *(uint64_t *)((char *)a1 + 7) == 0x7473616364616F72) {
        return 1;
      }
      char v87 = 0;
LABEL_467:
      if (!v17 && *a1 == 0x726570762E787661 && *((_DWORD *)a1 + 2) == 778856813) {
        return 1;
      }
      if ((v36 & 1) == 0 && *a1 == 0x6873702E32657373 && *((_WORD *)a1 + 4) == 26229) {
        return 1;
      }
      if (!result)
      {
        BOOL v131 = *a1 == 0x702E323135787661 && a1[1] == 0x73616364616F7262;
        if (v131 && *((unsigned char *)a1 + 16) == 116) {
          return 1;
        }
      }
      if ((v14 & 1) == 0)
      {
        BOOL v133 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        if (v133 && *(uint64_t *)((char *)a1 + 15) == 0x732E747361636461) {
          return 1;
        }
      }
      if ((v20 & 1) == 0)
      {
        BOOL v135 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64766F6D2E6B7361;
        if (v135 && *(uint64_t *)((char *)a1 + 11) == 0x70756464766F6D2ELL) {
          return 1;
        }
      }
      if (!v21)
      {
        BOOL v211 = *a1 == 0x6D2E323135787661 && a1[1] == 0x73766F6D2E6B7361;
        if (v211 && *((_DWORD *)a1 + 4) == 1886741608) {
          return 1;
        }
        BOOL v213 = *a1 == 0x6D2E323135787661 && a1[1] == 0x73766F6D2E6B7361;
        if (v213 && *((_DWORD *)a1 + 4) == 1886741612) {
          return 1;
        }
        BOOL v215 = *a1 == 0x6D2E323135787661 && a1[1] == 0x756873702E6B7361;
        if (v215 && *((_DWORD *)a1 + 4) == 778317414) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v137 = *a1 == 0x6D2E323135787661 && a1[1] == 0x756873702E6B7361;
        if (v137 && *(uint64_t *)((char *)a1 + 13) == 0x2E772E6C66756873) {
          return 1;
        }
        BOOL v139 = *a1 == 0x6D2E323135787661 && a1[1] == 0x756873702E6B7361;
        if (v139 && *(uint64_t *)((char *)a1 + 13) == 0x2E772E6866756873) {
          return 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        BOOL v141 = *a1 == 0x6D2E323135787661 && a1[1] == 0x667568732E6B7361;
        if (v141 && *((_WORD *)a1 + 8) == 28718) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v143 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726570762E6B7361;
        if (v143 && *(uint64_t *)((char *)a1 + 13) == 0x702E6C696D726570) {
          return 1;
        }
      }
      if (!v21)
      {
        BOOL v145 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D7265702E6B7361;
        if (v145 && *((_DWORD *)a1 + 4) == 778462254) {
          return 1;
        }
        BOOL v147 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D7265702E6B7361;
        if (v147 && *((_DWORD *)a1 + 4) == 778658862) {
          return 1;
        }
      }
      if ((v20 & 1) == 0)
      {
        BOOL v221 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706E75702E6B7361;
        if (v221 && *(uint64_t *)((char *)a1 + 11) == 0x6C6B63706E75702ELL) {
          return 1;
        }
        BOOL v223 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706E75702E6B7361;
        if (v223 && *(uint64_t *)((char *)a1 + 11) == 0x686B63706E75702ELL) {
          return 1;
        }
        BOOL v225 = *a1 == 0x6D2E323135787661 && a1[1] == 0x63706E752E6B7361;
        if (v225 && *(uint64_t *)((char *)a1 + 11) == 0x2E6C6B63706E752ELL) {
          return 1;
        }
        BOOL v227 = *a1 == 0x6D2E323135787661 && a1[1] == 0x63706E752E6B7361;
        if (v227 && *(uint64_t *)((char *)a1 + 11) == 0x2E686B63706E752ELL) {
          return 1;
        }
      }
      if (!result)
      {
        BOOL v149 = *a1 == 0x6D2E323135787661 && a1[1] == 0x646E61702E6B7361;
        if (v149 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        BOOL v151 = *a1 == 0x6D2E323135787661 && a1[1] == 0x646E61702E6B7361;
        if (v151 && *((_WORD *)a1 + 8) == 11886) {
          return 1;
        }
      }
      if (!v124 && *a1 == 0x6D2E323135787661 && a1[1] == 0x2E726F702E6B7361) {
        return 1;
      }
      if (!result)
      {
        BOOL v154 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F78702E6B7361;
        if (v154 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
      }
      if (!v124 && *a1 == 0x6D2E323135787661 && a1[1] == 0x2E646E612E6B7361) {
        return 1;
      }
      if (!result)
      {
        BOOL v157 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6E646E612E6B7361;
        if (v157 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
      }
      if (a2 >= 0xF && *a1 == 0x6D2E323135787661 && *(uint64_t *)((char *)a1 + 7) == 0x2E726F2E6B73616DLL) {
        return 1;
      }
      if (!v124 && *a1 == 0x6D2E323135787661 && a1[1] == 0x2E726F782E6B7361) {
        return 1;
      }
      if (!result)
      {
        BOOL v161 = *a1 == 0x6D2E323135787661 && a1[1] == 0x646461702E6B7361;
        if (v161 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
        BOOL v163 = *a1 == 0x6D2E323135787661 && a1[1] == 0x627573702E6B7361;
        if (v163 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        BOOL v165 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v165 && *((_WORD *)a1 + 8) == 11884) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v167 = *a1 == 0x6D2E323135787661 && a1[1] == 0x647476632E6B7361;
        if (v167 && *(uint64_t *)((char *)a1 + 13) == 0x2E64703271647476) {
          return 1;
        }
      }
      if (!v12)
      {
        BOOL v169 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
        if (v169 && *(uint64_t *)((char *)a1 + 14) == 0x2E64703271647574) {
          return 1;
        }
        BOOL v171 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
        if (v171 && *(uint64_t *)((char *)a1 + 14) == 0x2E73703271647574) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v173 = *a1 == 0x6D2E323135787661 && a1[1] == 0x717476632E6B7361;
        if (v173 && *(uint64_t *)((char *)a1 + 13) == 0x2E64703271717476) {
          return 1;
        }
      }
      if (!v12)
      {
        BOOL v175 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
        if (v175 && *(uint64_t *)((char *)a1 + 14) == 0x2E64703271717574) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v177 = *a1 == 0x6D2E323135787661 && a1[1] == 0x647476632E6B7361;
        if (v177 && *(uint64_t *)((char *)a1 + 13) == 0x2E73703271647476) {
          return 1;
        }
      }
      if (a2 != 16)
      {
        if (a2 == 24)
        {
          if (*a1 != 0x6D2E323135787661 || a1[1] != 0x717476632E6B7361 || a1[2] != 0x3635322E73703271)
          {
            BOOL v237 = *a1 == 0x6D2E323135787661 && a1[1] == 0x717476632E6B7361;
            if (!v237 || a1[2] != 0x3231352E73703271)
            {
              BOOL v239 = *a1 == 0x6D2E323135787661 && a1[1] == 0x707476632E6B7361;
              if (!v239 || a1[2] != 0x3635322E71643264)
              {
                BOOL v241 = *a1 == 0x6D2E323135787661 && a1[1] == 0x707476632E6B7361;
                if (!v241 || a1[2] != 0x3635322E73703264)
                {
                  BOOL v243 = *a1 == 0x6D2E323135787661 && a1[1] == 0x707476632E6B7361;
                  if (!v243 || a1[2] != 0x3832312E64703273)
                  {
                    BOOL v245 = *a1 == 0x6D2E323135787661 && a1[1] == 0x707476632E6B7361;
                    if (!v245 || a1[2] != 0x3635322E64703273) {
                      goto LABEL_923;
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          if (a2 != 25)
          {
            if (v21)
            {
LABEL_930:
              switch(a2)
              {
                case 0xCuLL:
                  if ((*a1 != 0x6D702E3134657373 || *((_DWORD *)a1 + 2) != 1902406773)
                    && (*a1 != 0x756D702E32787661 || *((_DWORD *)a1 + 2) != 1902390892))
                  {
                    goto LABEL_973;
                  }
                  return 1;
                case 0xDuLL:
                  uint64_t v254 = 0x71642E756C756D70;
                  if (*a1 == 0x756D702E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x71642E756C756D70) {
                    return 1;
                  }
                  uint64_t v256 = *(uint64_t *)((char *)a1 + 5);
                  BOOL v257 = *a1 == 0x756D702E32787661;
LABEL_959:
                  if (!v257 || v256 != v254) {
                    goto LABEL_973;
                  }
                  return 1;
                case 0x12uLL:
                  if (*a1 != 0x702E323135787661 || a1[1] != 0x352E71642E6C756DLL || *((_WORD *)a1 + 8) != 12849) {
                    goto LABEL_973;
                  }
                  return 1;
                case 0x13uLL:
                  uint64_t v256 = *(uint64_t *)((char *)a1 + 11);
                  BOOL v257 = *a1 == 0x702E323135787661 && a1[1] == 0x2E71642E756C756DLL;
                  uint64_t v254 = 0x3231352E71642E75;
                  goto LABEL_959;
                default:
                  if (v21) {
                    goto LABEL_973;
                  }
                  BOOL v259 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
                  if (!v259 || *((_DWORD *)a1 + 4) != 779183150) {
                    goto LABEL_973;
                  }
                  return 1;
              }
            }
            goto LABEL_923;
          }
          if (*a1 != 0x6D2E323135787661
            || a1[1] != 0x747663762E6B7361
            || a1[2] != 0x32312E7370326870
            || *((unsigned char *)a1 + 24) != 56)
          {
            BOOL v182 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747663762E6B7361;
            BOOL v183 = v182 && a1[2] == 0x35322E7370326870;
            if (!v183 || *((unsigned char *)a1 + 24) != 54)
            {
              BOOL v185 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
              BOOL v186 = v185 && a1[2] == 0x35322E7370327171;
              if (!v186 || *((unsigned char *)a1 + 24) != 54)
              {
                BOOL v188 = *a1 == 0x6D2E323135787661 && a1[1] == 0x757476632E6B7361;
                BOOL v189 = v188 && a1[2] == 0x31352E7370327171;
                if (!v189 || *((unsigned char *)a1 + 24) != 50)
                {
                  BOOL v191 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747476632E6B7361;
                  BOOL v192 = v191 && a1[2] == 0x35322E7164326470;
                  if (!v192 || *((unsigned char *)a1 + 24) != 54)
                  {
                    BOOL v194 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747476632E6B7361;
                    BOOL v195 = v194 && a1[2] == 0x32312E7164327370;
                    if (!v195 || *((unsigned char *)a1 + 24) != 56)
                    {
                      BOOL v197 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747476632E6B7361;
                      BOOL v198 = v197 && a1[2] == 0x35322E7164327370;
                      if (!v198 || *((unsigned char *)a1 + 24) != 54)
                      {
LABEL_923:
                        if (*a1 != 0x6D2E323135787661
                          || a1[1] != 0x6D7265702E6B7361
                          || *((_DWORD *)a1 + 4) != 779247990)
                        {
                          goto LABEL_930;
                        }
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return 1;
      }
      if (*a1 == 0x632E323135787661 && a1[1] == 0x6473326973757476) {
        return 1;
      }
LABEL_973:
      if ((v13 & 1) == 0)
      {
        BOOL v261 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v261 && *(uint64_t *)((char *)a1 + 13) == 0x2E71642E756C756DLL) {
          return 1;
        }
      }
      if ((v14 & 1) == 0)
      {
        BOOL v263 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v263 && *(uint64_t *)((char *)a1 + 15) == 0x2E77732E72682E6CLL) {
          return 1;
        }
      }
      if (!v21)
      {
        BOOL v265 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v265 && *((_DWORD *)a1 + 4) == 779562600) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v267 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C756D702E6B7361;
        if (v267 && *(uint64_t *)((char *)a1 + 13) == 0x2E772E75686C756DLL) {
          return 1;
        }
        BOOL v269 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64616D702E6B7361;
        if (v269 && *(uint64_t *)((char *)a1 + 13) == 0x2E642E776464616DLL) {
          return 1;
        }
      }
      if ((v14 & 1) == 0)
      {
        BOOL v271 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64616D702E6B7361;
        if (v271 && *(uint64_t *)((char *)a1 + 15) == 0x2E772E7362756464) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v335 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6B6361702E6B7361;
        if (v335 && *(uint64_t *)((char *)a1 + 13) == 0x2E627773736B6361) {
          return 1;
        }
        BOOL v337 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6B6361702E6B7361;
        if (v337 && *(uint64_t *)((char *)a1 + 13) == 0x2E776473736B6361) {
          return 1;
        }
        BOOL v339 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6B6361702E6B7361;
        if (v339 && *(uint64_t *)((char *)a1 + 13) == 0x2E627773756B6361) {
          return 1;
        }
        BOOL v341 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6B6361702E6B7361;
        if (v341 && *(uint64_t *)((char *)a1 + 13) == 0x2E776473756B6361) {
          return 1;
        }
      }
      if (!result)
      {
        BOOL v343 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E706D632E6B7361;
        if (v343 && *((unsigned char *)a1 + 16) == 98) {
          return 1;
        }
        BOOL v345 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E706D632E6B7361;
        if (v345 && *((unsigned char *)a1 + 16) == 100) {
          return 1;
        }
        BOOL v347 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E706D632E6B7361;
        if (v347 && *((unsigned char *)a1 + 16) == 113) {
          return 1;
        }
        BOOL v349 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E706D632E6B7361;
        if (v349 && *((unsigned char *)a1 + 16) == 119) {
          return 1;
        }
      }
      if (!v17 && *a1 == 0x632E323135787661 && *((_DWORD *)a1 + 2) == 1882091629) {
        return 1;
      }
      if (!result)
      {
        BOOL v351 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D63752E6B7361;
        if (v351 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
        BOOL v353 = *a1 == 0x632E323135787661 && a1[1] == 0x6B73616D32627476;
        if (v353 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
        BOOL v355 = *a1 == 0x632E323135787661 && a1[1] == 0x6B73616D32777476;
        if (v355 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
        BOOL v357 = *a1 == 0x632E323135787661 && a1[1] == 0x6B73616D32647476;
        if (v357 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
        BOOL v359 = *a1 == 0x632E323135787661 && a1[1] == 0x6B73616D32717476;
        if (v359 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
      }
      if ((v14 & 1) == 0)
      {
        BOOL v274 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726570762E6B7361;
        if (v274 && *(uint64_t *)((char *)a1 + 15) == 0x2E7261766C696D72) {
          return 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        BOOL v361 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v361 && *((_WORD *)a1 + 8) == 25646) {
          return 1;
        }
        BOOL v363 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v363 && *((_WORD *)a1 + 8) == 28974) {
          return 1;
        }
        BOOL v365 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v365 && *((_WORD *)a1 + 8) == 30510) {
          return 1;
        }
        BOOL v367 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v367 && *((_WORD *)a1 + 8) == 25646) {
          return 1;
        }
        BOOL v369 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v369 && *((_WORD *)a1 + 8) == 28974) {
          return 1;
        }
        BOOL v371 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v371 && *((_WORD *)a1 + 8) == 30510) {
          return 1;
        }
        BOOL v373 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v373 && *((_WORD *)a1 + 8) == 25646) {
          return 1;
        }
        BOOL v375 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v375 && *((_WORD *)a1 + 8) == 28974) {
          return 1;
        }
        BOOL v377 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v377 && *((_WORD *)a1 + 8) == 30510) {
          return 1;
        }
      }
      if (!result)
      {
        BOOL v379 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v379 && *((unsigned char *)a1 + 16) == 105) {
          return 1;
        }
        BOOL v381 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v381 && *((unsigned char *)a1 + 16) == 105) {
          return 1;
        }
        BOOL v383 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v383 && *((unsigned char *)a1 + 16) == 105) {
          return 1;
        }
        BOOL v385 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6C73702E6B7361;
        if (v385 && *((unsigned char *)a1 + 16) == 118) {
          return 1;
        }
        BOOL v387 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617273702E6B7361;
        if (v387 && *((unsigned char *)a1 + 16) == 118) {
          return 1;
        }
        BOOL v389 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C7273702E6B7361;
        if (v389 && *((unsigned char *)a1 + 16) == 118) {
          return 1;
        }
      }
      if (!v17)
      {
        if (*a1 == 0x6D702E3134657373 && *((_DWORD *)a1 + 2) == 2020832879) {
          return 1;
        }
        if (*a1 == 0x6D702E3134657373 && *((_DWORD *)a1 + 2) == 2021291631) {
          return 1;
        }
      }
      if ((v18 & 1) == 0)
      {
        if (*a1 == 0x6F6D702E32787661 && *(uint64_t *)((char *)a1 + 3) == 0x7873766F6D702E32) {
          return 1;
        }
        if (*a1 == 0x6F6D702E32787661 && *(uint64_t *)((char *)a1 + 3) == 0x787A766F6D702E32) {
          return 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        BOOL v391 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
        if (v391 && *((_WORD *)a1 + 8) == 30835) {
          return 1;
        }
        BOOL v393 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
        if (v393 && *((_WORD *)a1 + 8) == 30842) {
          return 1;
        }
        BOOL v395 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6E637A6C2E6B7361;
        if (v395 && *((_WORD *)a1 + 8) == 11892) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v280 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726574702E6B7361;
        if (v280 && *(uint64_t *)((char *)a1 + 13) == 0x2E676F6C6E726574) {
          return 1;
        }
      }
      if (!v12)
      {
        BOOL v282 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6574702E7A6B7361;
        if (v282 && *(uint64_t *)((char *)a1 + 14) == 0x2E676F6C6E726574) {
          return 1;
        }
      }
      if (!v21)
      {
        BOOL v284 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616D70762E6B7361;
        if (v284 && *((_DWORD *)a1 + 4) == 842359908) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v286 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6D70762E7A6B7361;
        if (v286 && *(uint64_t *)((char *)a1 + 13) == 0x32356464616D7076) {
          return 1;
        }
      }
      if ((v14 & 1) == 0)
      {
        BOOL v288 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726570762E6B7361;
        if (v288 && *(uint64_t *)((char *)a1 + 15) == 0x2E72617632696D72) {
          return 1;
        }
        BOOL v290 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726570762E6B7361;
        if (v290 && *(uint64_t *)((char *)a1 + 15) == 0x2E72617632746D72) {
          return 1;
        }
      }
      if (a2 >= 0x18)
      {
        BOOL v292 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6570762E7A6B7361;
        if (v292 && a1[2] == 0x2E72617632746D72) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v294 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706470762E6B7361;
        if (v294 && *(uint64_t *)((char *)a1 + 13) == 0x2E64737562706470) {
          return 1;
        }
      }
      if (!v12)
      {
        BOOL v296 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6470762E7A6B7361;
        if (v296 && *(uint64_t *)((char *)a1 + 14) == 0x2E64737562706470) {
          return 1;
        }
        BOOL v298 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706470762E6B7361;
        if (v298 && *(uint64_t *)((char *)a1 + 14) == 0x2E73647375627064) {
          return 1;
        }
      }
      if ((v14 & 1) == 0)
      {
        BOOL v300 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6470762E7A6B7361;
        if (v300 && *(uint64_t *)((char *)a1 + 15) == 0x2E73647375627064) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v302 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706470762E6B7361;
        if (v302 && *(uint64_t *)((char *)a1 + 13) == 0x2E64737377706470) {
          return 1;
        }
      }
      if (!v12)
      {
        BOOL v304 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6470762E7A6B7361;
        if (v304 && *(uint64_t *)((char *)a1 + 14) == 0x2E64737377706470) {
          return 1;
        }
        BOOL v306 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706470762E6B7361;
        if (v306 && *(uint64_t *)((char *)a1 + 14) == 0x2E73647373777064) {
          return 1;
        }
      }
      if ((v14 & 1) == 0)
      {
        BOOL v308 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6470762E7A6B7361;
        if (v308 && *(uint64_t *)((char *)a1 + 15) == 0x2E73647373777064) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v310 = *a1 == 0x6D2E323135787661 && a1[1] == 0x737062642E6B7361;
        if (v310 && *(uint64_t *)((char *)a1 + 13) == 0x2E77626461737062) {
          return 1;
        }
      }
      if ((v20 & 1) == 0)
      {
        BOOL v312 = *a1 == 0x6D2E323135787661 && a1[1] == 0x687370762E6B7361;
        if (v312 && *(uint64_t *)((char *)a1 + 11) == 0x2E646C687370762ELL) {
          return 1;
        }
        BOOL v314 = *a1 == 0x6D2E323135787661 && a1[1] == 0x687370762E6B7361;
        if (v314 && *(uint64_t *)((char *)a1 + 11) == 0x2E6472687370762ELL) {
          return 1;
        }
      }
      if (!v21)
      {
        BOOL v316 = *a1 == 0x6D2E323135787661 && a1[1] == 0x687370762E6B7361;
        if (v316 && *((_DWORD *)a1 + 4) == 779510892) {
          return 1;
        }
        BOOL v318 = *a1 == 0x6D2E323135787661 && a1[1] == 0x687370762E6B7361;
        if (v318 && *((_DWORD *)a1 + 4) == 779510898) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v320 = *a1 == 0x6D2E323135787661 && a1[1] == 0x7370762E7A6B7361;
        if (v320 && *(uint64_t *)((char *)a1 + 13) == 0x2E76646C68737076) {
          return 1;
        }
        BOOL v322 = *a1 == 0x6D2E323135787661 && a1[1] == 0x7370762E7A6B7361;
        if (v322 && *(uint64_t *)((char *)a1 + 13) == 0x2E76647268737076) {
          return 1;
        }
      }
      if (!v15)
      {
        if (*a1 == 0x762E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x2E646C687370762ELL) {
          return 1;
        }
        if (*a1 == 0x762E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x2E6472687370762ELL) {
          return 1;
        }
      }
      if (!result)
      {
        BOOL v397 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E6464612E6B7361;
        if (v397 && *((unsigned char *)a1 + 16) == 112) {
          return 1;
        }
        BOOL v399 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E6275732E6B7361;
        if (v399 && *((unsigned char *)a1 + 16) == 112) {
          return 1;
        }
        BOOL v401 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E6C756D2E6B7361;
        if (v401 && *((unsigned char *)a1 + 16) == 112) {
          return 1;
        }
        BOOL v403 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E7669642E6B7361;
        if (v403 && *((unsigned char *)a1 + 16) == 112) {
          return 1;
        }
        BOOL v405 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E78616D2E6B7361;
        if (v405 && *((unsigned char *)a1 + 16) == 112) {
          return 1;
        }
        BOOL v407 = *a1 == 0x6D2E323135787661 && a1[1] == 0x2E6E696D2E6B7361;
        if (v407 && *((unsigned char *)a1 + 16) == 112) {
          return 1;
        }
      }
      if ((v13 & 1) == 0)
      {
        BOOL v326 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6370662E6B7361;
        if (v326 && *(uint64_t *)((char *)a1 + 13) == 0x702E7373616C6370) {
          return 1;
        }
      }
      if (a2 < 0x19) {
        goto LABEL_1257;
      }
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x687370762E6B7361
        && a1[2] == 0x626D717469626675
        && *((unsigned char *)a1 + 24) == 46)
      {
        return 1;
      }
      if (a2 >= 0x1B)
      {
        if (*a1 == 0x6D2E323135787661
          && a1[1] == 0x6C756D702E6B7361
          && a1[2] == 0x2E74666968736974
          && *(uint64_t *)((char *)a1 + 19) == 0x2E62712E74666968)
        {
          return 1;
        }
        char v331 = 0;
        if (v13) {
          break;
        }
      }
      else
      {
LABEL_1257:
        char v331 = 1;
        if (v13) {
          break;
        }
      }
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x666E6F632E6B7361
        && *(uint64_t *)((char *)a1 + 13) == 0x2E7463696C666E6FLL)
      {
        return 1;
      }
      break;
  }
  switch(a2)
  {
    case 0xCuLL:
      if (*a1 == 0x737476632E657373 && *((_DWORD *)a1 + 2) == 1936929385) {
        return 1;
      }
      goto LABEL_1611;
    case 0xDuLL:
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x6473326973747663) {
        return 1;
      }
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x6473327373747663) {
        return 1;
      }
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x6470327164747663) {
        return 1;
      }
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x7370327164747663) {
        return 1;
      }
      if (*a1 == 0x7476632E32657373 && *(uint64_t *)((char *)a1 + 5) == 0x6470327370747663) {
        return 1;
      }
      goto LABEL_1611;
    case 0xEuLL:
      uint64_t v417 = *(uint64_t *)((char *)a1 + 6);
      BOOL v418 = *a1 == 0x737476632E657373;
      uint64_t v419 = 0x7373323436697374;
      goto LABEL_1582;
    case 0xFuLL:
      uint64_t v417 = *(uint64_t *)((char *)a1 + 7);
      BOOL v418 = *a1 == 0x7476632E32657373;
      uint64_t v419 = 0x6473323436697374;
LABEL_1582:
      if (!v418 || v417 != v419) {
        goto LABEL_1611;
      }
      return 1;
    case 0x11uLL:
      if (*a1 == 0x647476632E787661 && a1[1] == 0x35322E64702E3271 && *((unsigned char *)a1 + 16) == 54) {
        return 1;
      }
      BOOL v423 = *a1 == 0x647476632E787661 && a1[1] == 0x35322E73702E3271;
      if (v423 && *((unsigned char *)a1 + 16) == 54) {
        return 1;
      }
      goto LABEL_1611;
    case 0x12uLL:
      if (*a1 == 0x2E7476632E787661 && a1[1] == 0x322E64702E327370 && *((_WORD *)a1 + 8) == 13877) {
        return 1;
      }
      goto LABEL_1611;
    case 0x17uLL:
      if (*a1 == 0x6D2E323135787661
        && a1[1] == 0x766F6D702E6B7361
        && *(uint64_t *)((char *)a1 + 15) == 0x3635322E64712E76)
      {
        return 1;
      }
      BOOL v439 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
      if (v439 && *(uint64_t *)((char *)a1 + 15) == 0x3231352E64712E76) {
        return 1;
      }
      BOOL v441 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
      if (v441 && *(uint64_t *)((char *)a1 + 15) == 0x3635322E62772E76) {
        return 1;
      }
      BOOL v443 = *a1 == 0x6D2E323135787661 && a1[1] == 0x766F6D702E6B7361;
      if (v443 && *(uint64_t *)((char *)a1 + 15) == 0x3231352E62772E76) {
        return 1;
      }
      goto LABEL_1611;
    default:
LABEL_1611:
      if ((v36 & 1) == 0 && *a1 == 0x7032687074766376 && *((_WORD *)a1 + 4) == 11891) {
        return 1;
      }
      if (!v124 && *a1 == 0x736E69762E787661 && a1[1] == 0x2E38323166747265) {
        return 1;
      }
      if (v11)
      {
        if (*a1 == 0x6E69762E32787661 && a1[1] == 0x3832316974726573) {
          return 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        BOOL v430 = *a1 == 0x6D2E323135787661 && a1[1] == 0x65736E692E6B7361;
        if (v430 && *((_WORD *)a1 + 8) == 29810) {
          return 1;
        }
      }
      if (!result)
      {
        BOOL v432 = *a1 == 0x747865762E787661 && a1[1] == 0x3832316674636172;
        if (v432 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
      }
      if (a2 == 17)
      {
        int v434 = *((unsigned __int8 *)a1 + 16);
        BOOL v435 = *a1 == 0x7865762E32787661 && a1[1] == 0x3231697463617274;
        int v436 = 56;
      }
      else
      {
        if (v21) {
          goto LABEL_1686;
        }
        int v434 = *((_DWORD *)a1 + 4);
        BOOL v435 = *a1 == 0x6D2E323135787661 && a1[1] == 0x747865762E6B7361;
        int v436 = 1952670066;
      }
      if (v435 && v434 == v436) {
        return 1;
      }
LABEL_1686:
      if (!v17 && *a1 == 0x6F6D2E6134657373 && *((_DWORD *)a1 + 2) == 779382390) {
        return 1;
      }
      if ((v36 & 1) == 0 && *a1 == 0x6E766F6D2E787661 && *((_WORD *)a1 + 4) == 11892) {
        return 1;
      }
      if (a2 >= 0xF && *a1 == 0x732E323135787661 && *(uint64_t *)((char *)a1 + 7) == 0x2E746E65726F7473) {
        return 1;
      }
      if (a2 == 13)
      {
        uint64_t v450 = *(uint64_t *)((char *)a1 + 5);
        BOOL v451 = *a1 == 0x766F6D2E32787661;
LABEL_1711:
        uint64_t v452 = 0x617164746E766F6DLL;
        goto LABEL_1712;
      }
      if (a2 == 15)
      {
        uint64_t v450 = *(uint64_t *)((char *)a1 + 7);
        BOOL v451 = *a1 == 0x6D2E323135787661;
        goto LABEL_1711;
      }
      if (a2 != 14) {
        goto LABEL_1716;
      }
      if (*a1 == 0x6F6D2E3134657373 && *(uint64_t *)((char *)a1 + 6) == 0x617164746E766F6DLL) {
        return 1;
      }
      uint64_t v450 = *(uint64_t *)((char *)a1 + 6);
      BOOL v451 = *a1 == 0x6F74732E32657373;
      uint64_t v452 = 0x71642E6C65726F74;
LABEL_1712:
      if (v451 && v450 == v452) {
        return 1;
      }
LABEL_1716:
      if ((v18 & 1) == 0 && *a1 == 0x726F74732E657373 && *(uint64_t *)((char *)a1 + 3) == 0x2E7565726F74732ELL) {
        return 1;
      }
      if (!v17 && *a1 == 0x6F74732E32657373 && *((_DWORD *)a1 + 2) == 779445618) {
        return 1;
      }
      if ((v18 & 1) == 0 && *a1 == 0x726F74732E787661 && *(uint64_t *)((char *)a1 + 3) == 0x2E7565726F74732ELL) {
        return 1;
      }
      if ((v20 & 1) == 0)
      {
        BOOL v457 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v457 && *(uint64_t *)((char *)a1 + 11) == 0x2E7565726F74732ELL) {
          return 1;
        }
        BOOL v459 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v459 && *(uint64_t *)((char *)a1 + 11) == 0x702E65726F74732ELL) {
          return 1;
        }
      }
      if (!v21)
      {
        BOOL v479 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v479 && *((_DWORD *)a1 + 4) == 778186341) {
          return 1;
        }
        BOOL v481 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v481 && *((_DWORD *)a1 + 4) == 779562597) {
          return 1;
        }
        BOOL v483 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v483 && *((_DWORD *)a1 + 4) == 778317413) {
          return 1;
        }
        BOOL v485 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
        if (v485 && *((_DWORD *)a1 + 4) == 779169381) {
          return 1;
        }
        if (a2 == 20)
        {
          BOOL v487 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F74732E6B7361;
          if (v487 && *((_DWORD *)a1 + 4) == 1936928357) {
            return 1;
          }
        }
      }
      if ((v19 & 1) == 0)
      {
        BOOL v461 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64616F6C2E6B7361;
        if (v461 && *((_WORD *)a1 + 8) == 11893) {
          return 1;
        }
      }
      if (!result)
      {
        BOOL v463 = *a1 == 0x6D2E323135787661 && a1[1] == 0x64616F6C2E6B7361;
        if (v463 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
      }
      if (a2 >= 0x18)
      {
        BOOL v465 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v465 && a1[2] == 0x2E64616F6C2E646ELL) {
          return 1;
        }
      }
      if ((v331 & 1) == 0)
      {
        BOOL v467 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        BOOL v468 = v467 && a1[2] == 0x6F74732E73736572;
        if (v468 && *(uint64_t *)((char *)a1 + 19) == 0x2E65726F74732E73) {
          return 1;
        }
      }
      if (!v21)
      {
        BOOL v489 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v489 && *((_DWORD *)a1 + 4) == 1647207534) {
          return 1;
        }
        BOOL v491 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v491 && *((_DWORD *)a1 + 4) == 1999529070) {
          return 1;
        }
        BOOL v493 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v493 && *((_DWORD *)a1 + 4) == 1680761966) {
          return 1;
        }
        BOOL v495 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v495 && *((_DWORD *)a1 + 4) == 1898865774) {
          return 1;
        }
        BOOL v497 = *a1 == 0x6D2E323135787661 && a1[1] == 0x617078652E6B7361;
        if (v497 && *((_DWORD *)a1 + 4) == 1882088558) {
          return 1;
        }
      }
      if (!v12)
      {
        BOOL v499 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v499 && *(uint64_t *)((char *)a1 + 14) == 0x622E73736572706DLL) {
          return 1;
        }
        BOOL v501 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v501 && *(uint64_t *)((char *)a1 + 14) == 0x772E73736572706DLL) {
          return 1;
        }
        BOOL v503 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v503 && *(uint64_t *)((char *)a1 + 14) == 0x642E73736572706DLL) {
          return 1;
        }
        BOOL v505 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v505 && *(uint64_t *)((char *)a1 + 14) == 0x712E73736572706DLL) {
          return 1;
        }
        BOOL v507 = *a1 == 0x6D2E323135787661 && a1[1] == 0x706D6F632E6B7361;
        if (v507 && *(uint64_t *)((char *)a1 + 14) == 0x702E73736572706DLL) {
          return 1;
        }
      }
      if (v11)
      {
        if (*a1 == 0x72632E3234657373 && a1[1] == 0x382E34362E323363) {
          return 1;
        }
      }
      if (!v124 && *a1 == 0x6F7262762E787661 && a1[1] == 0x732E747361636461) {
        return 1;
      }
      if ((v20 & 1) == 0)
      {
        BOOL v472 = *a1 == 0x762E323135787661 && a1[1] == 0x73616364616F7262;
        if (v472 && *(uint64_t *)((char *)a1 + 11) == 0x732E747361636461) {
          return 1;
        }
      }
      if (!v21)
      {
        BOOL v474 = *a1 == 0x6D2E323135787661 && a1[1] == 0x696C61702E6B7361;
        if (v474 && *((_DWORD *)a1 + 4) == 779251303) {
          return 1;
        }
      }
      if ((v20 & 1) == 0)
      {
        BOOL v476 = *a1 == 0x6D2E323135787661 && a1[1] == 0x696C61762E6B7361;
        if (v476 && *(uint64_t *)((char *)a1 + 11) == 0x2E6E67696C61762ELL) {
          return 1;
        }
      }
      if (!v17)
      {
        if (*a1 == 0x6C73702E32657373 && *((_DWORD *)a1 + 2) == 1902390892) {
          return 1;
        }
        if (*a1 == 0x7273702E32657373 && *((_DWORD *)a1 + 2) == 1902390892) {
          return 1;
        }
        if (*a1 == 0x6C73702E32787661 && *((_DWORD *)a1 + 2) == 1902390892) {
          return 1;
        }
        if (*a1 == 0x7273702E32787661 && *((_DWORD *)a1 + 2) == 1902390892) {
          return 1;
        }
      }
      if (v15)
      {
        if (a2 == 13 && *a1 == 0x62702E3134657373 && *(uint64_t *)((char *)a1 + 5) == 0x77646E656C62702ELL) {
          return 1;
        }
      }
      else
      {
        if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x71642E6C6C73702ELL) {
          return 1;
        }
        if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x71642E6C7273702ELL) {
          return 1;
        }
      }
      if (!v17 && *a1 == 0x6C622E3134657373 && *((_DWORD *)a1 + 2) == 1885630053) {
        return 1;
      }
      if ((v18 & 1) == 0 && *a1 == 0x6E656C622E787661 && *(uint64_t *)((char *)a1 + 3) == 0x702E646E656C622ELL) {
        return 1;
      }
      if (a2 == 12)
      {
        if (*a1 == 0x6C62702E32787661 && *((_DWORD *)a1 + 2) == 2003070565) {
          return 1;
        }
      }
      else if ((v16 & 1) == 0 && *a1 == 0x6C62702E32787661 && *(uint64_t *)((char *)a1 + 5) == 0x2E64646E656C6270)
      {
        return 1;
      }
      if ((v19 & 1) == 0)
      {
        BOOL v519 = *a1 == 0x6F7262762E787661 && a1[1] == 0x3166747361636461;
        if (v519 && *((_WORD *)a1 + 8) == 14386) {
          return 1;
        }
      }
      if (a2 == 19)
      {
        BOOL v521 = *a1 == 0x7262762E32787661 && a1[1] == 0x697473616364616FLL;
        if (v521 && *(uint64_t *)((char *)a1 + 11) == 0x3832316974736163) {
          return 1;
        }
      }
      if ((v331 & 1) == 0)
      {
        BOOL v524 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        BOOL v525 = v524 && a1[2] == 0x3233667473616364;
        if (v525 && *(uint64_t *)((char *)a1 + 19) == 0x2E34783233667473) {
          return 1;
        }
        BOOL v527 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        BOOL v528 = v527 && a1[2] == 0x3436667473616364;
        if (v528 && *(uint64_t *)((char *)a1 + 19) == 0x2E32783436667473) {
          return 1;
        }
        BOOL v530 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        BOOL v531 = v530 && a1[2] == 0x3233667473616364;
        if (v531 && *(uint64_t *)((char *)a1 + 19) == 0x2E38783233667473) {
          return 1;
        }
        BOOL v533 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        BOOL v534 = v533 && a1[2] == 0x3436667473616364;
        if (v534 && *(uint64_t *)((char *)a1 + 19) == 0x2E34783436667473) {
          return 1;
        }
        BOOL v536 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        BOOL v537 = v536 && a1[2] == 0x3233697473616364;
        if (v537 && *(uint64_t *)((char *)a1 + 19) == 0x2E34783233697473) {
          return 1;
        }
        BOOL v539 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        BOOL v540 = v539 && a1[2] == 0x3436697473616364;
        if (v540 && *(uint64_t *)((char *)a1 + 19) == 0x2E32783436697473) {
          return 1;
        }
        BOOL v542 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        BOOL v543 = v542 && a1[2] == 0x3233697473616364;
        if (v543 && *(uint64_t *)((char *)a1 + 19) == 0x2E38783233697473) {
          return 1;
        }
        BOOL v545 = *a1 == 0x6D2E323135787661 && a1[1] == 0x616F72622E6B7361;
        BOOL v546 = v545 && a1[2] == 0x3436697473616364;
        if (v546 && *(uint64_t *)((char *)a1 + 19) == 0x2E34783436697473) {
          return 1;
        }
      }
      if (a2 == 14)
      {
        if (*a1 == 0x6D6370762E706F78 && *(uint64_t *)((char *)a1 + 6) == 0x3635322E766F6D63) {
          return 1;
        }
      }
      else if (a2 == 10 && *a1 == 0x6D6370762E706F78 && *((_WORD *)a1 + 4) == 30319)
      {
        return 1;
      }
      if ((v19 & 1) == 0)
      {
        BOOL v549 = *a1 == 0x6D2E323135787661 && a1[1] == 0x65766F6D2E6B7361;
        if (v549 && *((_WORD *)a1 + 8) == 29486) {
          return 1;
        }
      }
      if (a2 >= 0xF && *a1 == 0x632E323135787661 && *(uint64_t *)((char *)a1 + 7) == 0x326B73616D747663) {
        return 1;
      }
      if ((v87 & 1) == 0)
      {
        if (*a1 == 0x6F6370762E706F78 && *((unsigned char *)a1 + 8) == 109) {
          return 1;
        }
        if (*a1 == 0x6F7270762E706F78 && *((unsigned char *)a1 + 8) == 116) {
          return 1;
        }
      }
      if ((v18 & 1) == 0)
      {
        if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 3) == 0x6C6F72702E323135) {
          return 1;
        }
        if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 3) == 0x726F72702E323135) {
          return 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        BOOL v556 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F72702E6B7361;
        if (v556 && *((_WORD *)a1 + 8) == 11894) {
          return 1;
        }
      }
      if (!result)
      {
        BOOL v558 = *a1 == 0x6D2E323135787661 && a1[1] == 0x726F72702E6B7361;
        if (v558 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
      }
      if ((v19 & 1) == 0)
      {
        BOOL v560 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6F72702E6B7361;
        if (v560 && *((_WORD *)a1 + 8) == 11894) {
          return 1;
        }
      }
      if (!result)
      {
        BOOL v562 = *a1 == 0x6D2E323135787661 && a1[1] == 0x6C6F72702E6B7361;
        if (v562 && *((unsigned char *)a1 + 16) == 46) {
          return 1;
        }
      }
      if (v16) {
        goto LABEL_2167;
      }
      if (*a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 5) == 0x6D74736574702E32) {
        return 1;
      }
      if (v15)
      {
LABEL_2167:
        if (v124) {
          return 0;
        }
        goto LABEL_2179;
      }
      BOOL v565 = *a1 == 0x702E323135787661 && *(uint64_t *)((char *)a1 + 6) == 0x6D6E74736574702ELL;
      BOOL result = v565;
      char v566 = v565 || v124;
      if ((v566 & 1) == 0)
      {
LABEL_2179:
        uint64_t v568 = *a1;
        uint64_t v567 = a1[1];
        return v568 == 0x6D2E323135787661 && v567 == 0x677661702E6B7361;
      }
      return result;
  }
}