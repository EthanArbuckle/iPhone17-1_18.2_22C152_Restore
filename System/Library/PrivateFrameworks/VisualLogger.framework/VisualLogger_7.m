void sub_215B22FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 209) < 0)
  {
    operator delete(*(void **)(v1 - 232));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215B230B4()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_215B23E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(unsigned char *)(v66 - 152) && *(char *)(v66 - 153) < 0) {
    operator delete(*(void **)(v66 - 176));
  }
  __cxa_guard_abort(&qword_267883880);
  sub_21582F6E4((uint64_t)&a15);
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_2157351A4((uint64_t)&a30);
  sub_2157407D4((uint64_t)&a66);
  uint64_t v68 = *a12;
  *a12 = 0;
  if (v68) {
    MEMORY[0x2166C4D20](v68, 0x1000C4072FAA15ELL);
  }
  _Unwind_Resume(a1);
}

void sub_215B24060()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_215B24E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(unsigned char *)(v66 - 152) && *(char *)(v66 - 153) < 0) {
    operator delete(*(void **)(v66 - 176));
  }
  __cxa_guard_abort(&qword_267883880);
  sub_21582F6E4((uint64_t)&a15);
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_2157351A4((uint64_t)&a30);
  sub_2157407D4((uint64_t)&a66);
  uint64_t v68 = *a12;
  *a12 = 0;
  if (v68) {
    MEMORY[0x2166C4D20](v68, 0x1000C4072FAA15ELL);
  }
  _Unwind_Resume(a1);
}

void sub_215B25020(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EC48))
  {
    sub_215973BF0(&v4);
    sub_215732BF4(__p, "cv3dapi.kit.viz.SE3");
    sub_2157371C4(&v4, (uint64_t)__p, &qword_26788EC40);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))nullsub_3, &qword_26788EC40, &dword_21572C000);
    __cxa_guard_release(&qword_26788EC48);
  }
  *a1 = qword_26788EC40;
}

void sub_215B250E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_26788EC48);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_26788EC48);
  _Unwind_Resume(a1);
}

void sub_215B25138(uint64_t a1, float32x2_t *a2)
{
  int8x16_t v6 = 0uLL;
  uint64_t v7 = 0;
  sub_215B28044(a2, (float *)v6.i32);
  int8x16_t v2 = v6;
  float32x2_t v3 = (float32x2_t)vextq_s8(v2, v2, 8uLL).u64[0];
  float v4 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v2.i8, *(float32x2_t *)v2.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1), *(float32x2_t *)v6.i8, 1), v3, v3).f32[0];
  float v5 = v4;
  if (v4 >= 0.0061)
  {
    __sincosf_stret(sqrtf(v4));
    float v4 = v5;
  }
  if (v4 >= 0.0061) {
    __sincosf_stret(sqrtf(v4));
  }
  operator new();
}

void sub_215B25528(uint64_t a1, float64x2_t *a2)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  sub_215B28358(a2, (double *)&v11);
  _V20.D[1] = *((void *)&v11 + 1);
  _D1 = *((void *)&v11 + 1);
  __asm { FMLA            D0, D1, V20.D[1] }
  double v9 = _D0 + *(double *)&v12 * *(double *)&v12;
  if (v9 >= 0.0000002635)
  {
    __sincos_stret(sqrt(v9));
    if (v9 >= 2.775e-15) {
      goto LABEL_3;
    }
  }
  else if (v9 >= 2.775e-15)
  {
LABEL_3:
    if (v9 > 9.0)
    {
      if (v9 >= 0.0000002635) {
        goto LABEL_10;
      }
LABEL_11:
      __asm { FMOV            V17.2D, #-0.5 }
      operator new();
    }
    if (v9 < 0.0000002635) {
      goto LABEL_11;
    }
LABEL_10:
    __sincos_stret(sqrt(v9));
    goto LABEL_11;
  }
  if (v9 < 0.0000002635) {
    goto LABEL_11;
  }
  goto LABEL_10;
}

uint64_t *sub_215B2598C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    MEMORY[0x2166C4D20](v2, 0x1000C4072FAA15ELL);
  }
  return a1;
}

double sub_215B259D0@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v4 = *a1;
  switch(*(unsigned char *)(*a1 + 136))
  {
    case 1:
      if (*(_DWORD *)(v4 + 128) != 2) {
        goto LABEL_18;
      }
      a3 = *(__n128 *)v4;
      *(_OWORD *)a2 = *(_OWORD *)v4;
      *(void *)(a2 + 16) = *(void *)(v4 + 16);
      return a3.n128_f64[0];
    case 2:
      if (*(_DWORD *)(v4 + 128) != 3) {
        goto LABEL_18;
      }
      *(float32x4_t *)a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v4), *(float64x2_t *)(v4 + 16));
      a3.n128_u64[0] = (unint64_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 32));
      *(void *)(a2 + 16) = a3.n128_u64[0];
      return a3.n128_f64[0];
    case 4:
      if (*(_DWORD *)(v4 + 128)) {
        goto LABEL_18;
      }
      float32x4_t v5 = *(float32x4_t *)(v4 + 16);
      float32x4_t v25 = *(float32x4_t *)v4;
      float32x4_t v26 = v5;
      int32x4_t v6 = *(int32x4_t *)(v4 + 48);
      float32x4_t v27 = *(float32x4_t *)(v4 + 32);
      int32x4_t v28 = v6;
      goto LABEL_10;
    case 5:
      if (*(_DWORD *)(v4 + 128) != 1) {
LABEL_18:
      }
        sub_215742D4C();
      float32x4_t v7 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 32)), *(float64x2_t *)(v4 + 48));
      float32x4_t v25 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v4), *(float64x2_t *)(v4 + 16));
      float32x4_t v26 = v7;
      float32x4_t v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 96)), *(float64x2_t *)(v4 + 112));
      float32x4_t v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v4 + 64)), *(float64x2_t *)(v4 + 80));
      int32x4_t v28 = (int32x4_t)v8;
LABEL_10:
      memset(v29, 0, 24);
      sub_215B28044((float32x2_t *)&v25, (float *)v29);
      int32x4_t v9 = (int32x4_t)v29[0];
      float32x2_t v10 = (float32x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
      float v11 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v9.i8, *(float32x2_t *)v9.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v29[0], 1), *(float32x2_t *)v9.i8, 1), v10, v10).f32[0];
      if (v11 < 0.0061)
      {
        float v12 = 0.5 - (float)(v11 * (float)((float)(v11 / -720.0) + 0.041667));
        float v13 = 0.16667 - (float)(v11 * (float)((float)(v11 / -5040.0) + 0.0083333));
        float v14 = 1.0 - (float)(v11 * v13);
        if (v11 >= 0.00000149) {
          goto LABEL_12;
        }
LABEL_15:
        float v15 = (float)(v11 * 0.000033069) + (float)((float)(v11 * 0.0013889) + 0.083333);
        goto LABEL_17;
      }
      float v16 = sqrtf(v11);
      float v23 = v11;
      int32x4_t v24 = (int32x4_t)v29[0];
      __float2 v17 = __sincosf_stret(v16);
      float v11 = v23;
      int32x4_t v9 = v24;
      float v14 = v17.__sinval / v16;
      float v12 = (float)(1.0 / v23) * (float)(1.0 - v17.__cosval);
      float v13 = (float)(1.0 / v23) * (float)(1.0 - (float)(v17.__sinval / v16));
      if (v23 < 0.00000149) {
        goto LABEL_15;
      }
LABEL_12:
      if (v11 <= 9.0) {
        float v15 = (float)((float)(v12 * 0.5) - v13) / v14;
      }
      else {
        float v15 = (float)(v12 + (float)(v14 * -0.5)) / (float)(v11 * v12);
      }
LABEL_17:
      float32x4_t v18 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL);
      float32x4_t v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
      float32x4_t v20 = vsubq_f32(vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL)), vmulq_f32(v19, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL), (int8x16_t)v28, 8uLL)));
      v21.i64[0] = 0xBF000000BF000000;
      v21.i64[1] = 0xBF000000BF000000;
      a3 = (__n128)vaddq_f32(vaddq_f32((float32x4_t)v28, vmulq_f32(v20, v21)), vmulq_n_f32(vsubq_f32(vmulq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL)), vmulq_f32(v19, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), (int8x16_t)v20, 8uLL))), v15));
      DWORD1(v29[1]) = a3.n128_u32[2];
      *(void *)((char *)v29 + 12) = a3.n128_u64[0];
      a3.n128_u64[0] = *(void *)&v29[0];
      *(_OWORD *)a2 = v29[0];
      *(void *)(a2 + 16) = *(void *)&v29[1];
      return a3.n128_f64[0];
    default:
      return a3.n128_f64[0];
  }
}

void sub_215B25D04(uint64_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  switch(*(unsigned char *)(*a1 + 136))
  {
    case 1:
      if (*(_DWORD *)(v3 + 128) != 2) {
        goto LABEL_19;
      }
      float64x2_t v4 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 8));
      *a2 = vcvtq_f64_f32(*(float32x2_t *)v3);
      a2[1] = v4;
      float64x2_t v5 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 16));
      goto LABEL_18;
    case 2:
      if (*(_DWORD *)(v3 + 128) != 3) {
        goto LABEL_19;
      }
      float64x2_t v10 = *(float64x2_t *)(v3 + 16);
      *a2 = *(float64x2_t *)v3;
      a2[1] = v10;
      float64x2_t v5 = *(float64x2_t *)(v3 + 32);
      goto LABEL_18;
    case 4:
      if (*(_DWORD *)(v3 + 128)) {
        goto LABEL_19;
      }
      float64x2_t v6 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 8));
      float64x2_t v39 = vcvtq_f64_f32(*(float32x2_t *)v3);
      float64x2_t v40 = v6;
      float64x2_t v7 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 24));
      float64x2_t v41 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 16));
      float64x2_t v42 = v7;
      float64x2_t v8 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 40));
      float64x2_t v43 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 32));
      float64x2_t v44 = v8;
      float64x2_t v9 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 56));
      float64x2_t v45 = vcvtq_f64_f32(*(float32x2_t *)(v3 + 48));
      float64x2_t v46 = v9;
      goto LABEL_10;
    case 5:
      if (*(_DWORD *)(v3 + 128) != 1) {
LABEL_19:
      }
        sub_215742D4C();
      float64x2_t v11 = *(float64x2_t *)(v3 + 80);
      float64x2_t v43 = *(float64x2_t *)(v3 + 64);
      float64x2_t v44 = v11;
      float64x2_t v12 = *(float64x2_t *)(v3 + 112);
      float64x2_t v45 = *(float64x2_t *)(v3 + 96);
      float64x2_t v46 = v12;
      float64x2_t v13 = *(float64x2_t *)(v3 + 16);
      float64x2_t v39 = *(float64x2_t *)v3;
      float64x2_t v40 = v13;
      float64x2_t v14 = *(float64x2_t *)(v3 + 48);
      float64x2_t v41 = *(float64x2_t *)(v3 + 32);
      float64x2_t v42 = v14;
LABEL_10:
      memset(v47, 0, sizeof(v47));
      sub_215B28358(&v39, (double *)v47);
      v15.f64[0] = *(float64_t *)&v47[1];
      _Q17 = (float64x2_t)v47[0];
      float64x2_t v17 = (float64x2_t)vextq_s8((int8x16_t)_Q17, (int8x16_t)_Q17, 8uLL);
      _Q0 = vmulq_f64(_Q17, _Q17);
      _Q1.f64[0] = *((float64_t *)v47 + 1);
      __asm { FMLA            D0, D1, V17.D[1] }
      double v24 = _Q0.f64[0] + v15.f64[0] * v15.f64[0];
      if (v24 < 0.0000002635)
      {
        _Q0.f64[0] = 0.5 - v24 * (v24 / -720.0 + 0.0416666667);
        _Q1.f64[0] = 0.166666667 - v24 * (v24 / -5040.0 + 0.00833333333);
        double v25 = 1.0 - v24 * _Q1.f64[0];
        if (v24 >= 2.775e-15) {
          goto LABEL_12;
        }
LABEL_15:
        _Q0.f64[0] = v24 * 0.0000330687831 + v24 * 0.00138888889 + 0.0833333333;
        goto LABEL_17;
      }
      double v26 = sqrt(v24);
      float64x2_t v37 = (float64x2_t)v47[0];
      float64_t v38 = *(double *)&v47[1];
      float64x2_t v36 = v17;
      __double2 v27 = __sincos_stret(v26);
      float64x2_t v17 = v36;
      _Q17 = v37;
      v15.f64[0] = v38;
      double v25 = v27.__sinval / v26;
      _Q0.f64[0] = 1.0 / v24 * (1.0 - v27.__cosval);
      _Q1.f64[0] = 1.0 / v24 * (1.0 - v27.__sinval / v26);
      if (v24 < 2.775e-15) {
        goto LABEL_15;
      }
LABEL_12:
      if (v24 <= 9.0) {
        _Q0.f64[0] = (_Q0.f64[0] * 0.5 - _Q1.f64[0]) / v25;
      }
      else {
        _Q0.f64[0] = (_Q0.f64[0] + v25 * -0.5) / (v24 * _Q0.f64[0]);
      }
LABEL_17:
      _Q1.f64[0] = v46.f64[0];
      v28.f64[0] = v17.f64[0];
      v28.f64[1] = v15.f64[0];
      float64x2_t v29 = (float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)_Q1, 8uLL);
      float64x2_t v30 = vsubq_f64(vmulq_laneq_f64(_Q17, v45, 1), vmulq_f64(v17, v45));
      __asm { FMOV            V6.2D, #-0.5 }
      float64x2_t v32 = vaddq_f64(_Q1, vmulq_f64(v30, _Q6));
      _Q1.f64[1] = v45.f64[0];
      v15.f64[1] = _Q17.f64[0];
      float64x2_t v33 = vsubq_f64(vmulq_f64(v28, _Q1), vmulq_f64(v15, v29));
      float64x2_t v34 = (float64x2_t)vextq_s8((int8x16_t)v33, (int8x16_t)v30, 8uLL);
      v30.f64[1] = v33.f64[0];
      *(float64x2_t *)((char *)&v47[1] + 8) = vaddq_f64(vaddq_f64(v45, vmulq_f64(v33, _Q6)), vmulq_n_f64(vsubq_f64(vmulq_f64(v28, v30), vmulq_f64(v15, v34)), _Q0.f64[0]));
      *((void *)&v47[2] + 1) = *(_OWORD *)&vaddq_f64(v32, vmulq_f64(_Q0, vsubq_f64(vmulq_laneq_f64(_Q17, v33, 1), vmulq_f64(v17, v33))));
      float64x2_t v35 = (float64x2_t)v47[1];
      *a2 = (float64x2_t)v47[0];
      a2[1] = v35;
      float64x2_t v5 = (float64x2_t)v47[2];
LABEL_18:
      a2[2] = v5;
      return;
    default:
      return;
  }
}

float64x2_t sub_215B26044@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t result@<Q0>)
{
  uint64_t v8 = *a1;
  switch(*(unsigned char *)(*a1 + 136))
  {
    case 1:
      if (*(_DWORD *)(v8 + 128) != 2) {
        goto LABEL_17;
      }
      v5.i32[0] = *(_DWORD *)(v8 + 8);
      v3.i64[0] = *(void *)v8;
      int32x4_t v9 = v3;
      v9.i32[2] = v5.i32[0];
      LODWORD(v10) = HIDWORD(*(void *)v8);
      v6.i64[0] = *(void *)(v8 + 12);
      v6.i32[2] = *(_DWORD *)(v8 + 20);
      float v11 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v3.i8, *(float32x2_t *)v3.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8, 1), *(float32x2_t *)v8, 1), v5, v5).f32[0];
      if (v11 >= 0.0061)
      {
        float v24 = sqrtf(v11);
        float32x4_t v55 = v6;
        __int32 v51 = *(_DWORD *)(v8 + 8);
        int32x4_t v53 = v9;
        float v47 = v11;
        __int32 v49 = v3.i32[0];
        __float2 v25 = __sincosf_stret(v24);
        float cosval = v25.__cosval;
        v3.i32[0] = v49;
        v5.i32[0] = v51;
        int32x4_t v9 = v53;
        float32x4_t v6 = v55;
        float v14 = v25.__sinval / v24;
        float v12 = (float)(1.0 / v47) * (float)(1.0 - v25.__cosval);
        float v13 = (float)(1.0 / v47) * (float)(1.0 - (float)(v25.__sinval / v24));
      }
      else
      {
        float v12 = 0.5 - (float)(v11 * (float)((float)(v11 / -720.0) + 0.041667));
        float v13 = 0.16667 - (float)(v11 * (float)((float)(v11 / -5040.0) + 0.0083333));
        float v14 = 1.0 - (float)(v11 * v13);
        float cosval = 1.0 - (float)(v11 * v12);
      }
      float v26 = (float)(*(float *)v3.i32 * (float)(*(float *)v3.i32 * v12)) + cosval;
      float v27 = (float)(v10 * (float)(v10 * v12)) + cosval;
      float v28 = (float)(v5.f32[0] * (float)(v5.f32[0] * v12)) + cosval;
      float v29 = v10 * (float)(*(float *)v3.i32 * v12);
      float v30 = v5.f32[0] * (float)(*(float *)v3.i32 * v12);
      float v31 = v5.f32[0] * (float)(v10 * v12);
      float v32 = *(float *)v3.i32 * v14;
      float v33 = v10 * v14;
      float v34 = v5.f32[0] * v14;
      goto LABEL_16;
    case 2:
      if (*(_DWORD *)(v8 + 128) != 3) {
        goto LABEL_17;
      }
      *(float32x2_t *)v4.i8 = vcvt_f32_f64(*(float64x2_t *)v8);
      v5.f32[0] = *(double *)(v8 + 16);
      int32x4_t v9 = v4;
      v9.i32[2] = v5.i32[0];
      *(float32x2_t *)v6.f32 = vcvt_f32_f64(*(float64x2_t *)(v8 + 24));
      float32_t v18 = *(double *)(v8 + 40);
      v6.f32[2] = v18;
      float v19 = vmla_f32(vmla_lane_f32(vmul_f32(*(float32x2_t *)v4.i8, *(float32x2_t *)v4.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1), *(float32x2_t *)v4.i8, 1), v5, v5).f32[0];
      if (v19 >= 0.0061)
      {
        float v35 = sqrtf(v19);
        float32x4_t v56 = v6;
        uint64_t v52 = v4.i64[0];
        int32x4_t v54 = v9;
        float v48 = v19;
        float32_t v50 = *(double *)(v8 + 16);
        __float2 v36 = __sincosf_stret(v35);
        float v21 = v36.__cosval;
        v5.f32[0] = v50;
        v4.i64[0] = v52;
        int32x4_t v9 = v54;
        float32x4_t v6 = v56;
        float v20 = v36.__sinval / v35;
        float v12 = (float)(1.0 / v48) * (float)(1.0 - v36.__cosval);
        float v13 = (float)(1.0 / v48) * (float)(1.0 - (float)(v36.__sinval / v35));
      }
      else
      {
        float v12 = 0.5 - (float)(v19 * (float)((float)(v19 / -720.0) + 0.041667));
        float v13 = 0.16667 - (float)(v19 * (float)((float)(v19 / -5040.0) + 0.0083333));
        float v20 = 1.0 - (float)(v19 * v13);
        float v21 = 1.0 - (float)(v19 * v12);
      }
      float v37 = vmuls_lane_f32(v12, *(float32x2_t *)v4.i8, 1);
      float v26 = (float)((float)(v12 * *(float *)v4.i32) * *(float *)v4.i32) + v21;
      float v27 = vmuls_lane_f32(v37, *(float32x2_t *)v4.i8, 1) + v21;
      float v28 = (float)((float)(v12 * v5.f32[0]) * v5.f32[0]) + v21;
      float v29 = vmuls_lane_f32(v12 * *(float *)v4.i32, *(float32x2_t *)v4.i8, 1);
      float v30 = (float)(v12 * *(float *)v4.i32) * v5.f32[0];
      float v31 = v37 * v5.f32[0];
      float v32 = v20 * *(float *)v4.i32;
      float v33 = vmuls_lane_f32(v20, *(float32x2_t *)v4.i8, 1);
      float v34 = v20 * v5.f32[0];
LABEL_16:
      float v38 = v29 - v34;
      float v39 = v30 + v33;
      float v40 = v29 + v34;
      float v41 = v31 - v32;
      float v42 = v30 - v33;
      float v43 = v31 + v32;
      float32x4_t v44 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL), (int8x16_t)v9, 8uLL);
      float32x4_t v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL);
      float32x4_t v46 = vsubq_f32(vmulq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL)), vmulq_f32(v45, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v6, (int8x16_t)v6, 0xCuLL), (int8x16_t)v6, 8uLL)));
      *(float *)a2 = v26;
      *(float *)(a2 + 4) = v40;
      *(float *)(a2 + 8) = v42;
      *(_DWORD *)(a2 + 12) = 0;
      *(float *)(a2 + 16) = v38;
      *(float *)(a2 + 20) = v27;
      *(float *)(a2 + 24) = v43;
      *(_DWORD *)(a2 + 28) = 0;
      *(float *)(a2 + 32) = v39;
      *(float *)(a2 + 36) = v41;
      *(float *)(a2 + 40) = v28;
      result = (float64x2_t)vaddq_f32(vaddq_f32(v6, vmulq_n_f32(v46, v12)), vmulq_n_f32(vsubq_f32(vmulq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL)), vmulq_f32(v45, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v46, (int8x16_t)v46, 0xCuLL), (int8x16_t)v46, 8uLL))), v13));
      *(_DWORD *)(a2 + 44) = 0;
      *(_DWORD *)(a2 + 56) = LODWORD(result.f64[1]);
      *(float64_t *)(a2 + 48) = result.f64[0];
      *(_DWORD *)(a2 + 60) = 1065353216;
      break;
    case 4:
      if (*(_DWORD *)(v8 + 128)) {
        goto LABEL_17;
      }
      long long v16 = *(_OWORD *)(v8 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v8;
      *(_OWORD *)(a2 + 16) = v16;
      result = *(float64x2_t *)(v8 + 32);
      long long v17 = *(_OWORD *)(v8 + 48);
      *(float64x2_t *)(a2 + 32) = result;
      *(_OWORD *)(a2 + 48) = v17;
      break;
    case 5:
      if (*(_DWORD *)(v8 + 128) != 1) {
LABEL_17:
      }
        sub_215742D4C();
      float32x4_t v22 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 32)), *(float64x2_t *)(v8 + 48));
      *(float32x4_t *)a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v8), *(float64x2_t *)(v8 + 16));
      *(float32x4_t *)(a2 + 16) = v22;
      result = *(float64x2_t *)(v8 + 112);
      float32x4_t v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 96)), result);
      *(float32x4_t *)(a2 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v8 + 64)), *(float64x2_t *)(v8 + 80));
      *(float32x4_t *)(a2 + 48) = v23;
      break;
    default:
      return result;
  }
  return result;
}

float64x2_t sub_215B26488@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>, float64x2_t result@<Q0>, float64x2_t a4@<Q2>)
{
  uint64_t v6 = *a1;
  switch(*(unsigned char *)(*a1 + 136))
  {
    case 1:
      if (*(_DWORD *)(v6 + 128) != 2) {
        goto LABEL_17;
      }
      _Q26 = vcvtq_f64_f32(*(float32x2_t *)v6);
      v8.f64[0] = *(float *)(v6 + 8);
      float64x2_t v9 = (float64x2_t)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL);
      float64x2_t v10 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 12));
      v4.f64[0] = *(float *)(v6 + 20);
      float64x2_t v11 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
      _Q0 = vmulq_f64(_Q26, _Q26);
      _D1 = _Q26.f64[1];
      __asm { FMLA            D0, D1, V26.D[1] }
      double v18 = _Q0.f64[0] + v8.f64[0] * v8.f64[0];
      if (v18 >= 0.0000002635)
      {
        double v33 = sqrt(v18);
        float64_t v73 = *(float *)(v6 + 8);
        float64x2_t v69 = v9;
        float64x2_t v71 = _Q26;
        float64x2_t v65 = v10;
        float64x2_t v67 = v4;
        float64x2_t v63 = v11;
        __double2 v34 = __sincos_stret(v33);
        double cosval = v34.__cosval;
        float64x2_t v11 = v63;
        float64x2_t v10 = v65;
        float64x2_t v4 = v67;
        float64x2_t v9 = v69;
        _Q26 = v71;
        v8.f64[0] = v73;
        double v19 = v34.__sinval / v33;
        a4.f64[0] = 1.0 / v18 * (1.0 - v34.__cosval);
        _Q0.f64[0] = 1.0 / v18 * (1.0 - v34.__sinval / v33);
      }
      else
      {
        a4.f64[0] = 0.5 - v18 * (v18 / -720.0 + 0.0416666667);
        _Q0.f64[0] = 0.166666667 - v18 * (v18 / -5040.0 + 0.00833333333);
        double v19 = 1.0 - v18 * _Q0.f64[0];
        double cosval = 1.0 - v18 * a4.f64[0];
      }
      double v35 = vmuld_lane_f64(a4.f64[0], _Q26, 1);
      double v36 = a4.f64[0] * _Q26.f64[0] * _Q26.f64[0] + cosval;
      double v37 = vmuld_lane_f64(v35, _Q26, 1) + cosval;
      double v38 = a4.f64[0] * v8.f64[0] * v8.f64[0] + cosval;
      double v39 = vmuld_lane_f64(a4.f64[0] * _Q26.f64[0], _Q26, 1);
      double v40 = a4.f64[0] * _Q26.f64[0] * v8.f64[0];
      double v41 = v35 * v8.f64[0];
      double v42 = v19 * _Q26.f64[0];
      double v43 = vmuld_lane_f64(v19, _Q26, 1);
      double v44 = v19 * v8.f64[0];
      goto LABEL_16;
    case 2:
      if (*(_DWORD *)(v6 + 128) != 3) {
        goto LABEL_17;
      }
      v8.f64[0] = *(float64_t *)(v6 + 16);
      _Q26 = *(float64x2_t *)v6;
      float64x2_t v9 = (float64x2_t)vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL);
      v4.f64[0] = *(float64_t *)(v6 + 40);
      float64x2_t v10 = *(float64x2_t *)(v6 + 24);
      float64x2_t v11 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL);
      _D9 = *(double *)(v6 + 8);
      _Q0 = vmulq_f64(_Q26, _Q26);
      __asm { FMLA            D0, D9, V26.D[1] }
      double v26 = _Q0.f64[0] + v8.f64[0] * v8.f64[0];
      if (v26 >= 0.0000002635)
      {
        double v45 = sqrt(v26);
        float64_t v74 = *(double *)(v6 + 16);
        float64x2_t v70 = v9;
        float64x2_t v72 = *(float64x2_t *)v6;
        float64x2_t v66 = *(float64x2_t *)(v6 + 24);
        float64x2_t v68 = v4;
        float64x2_t v64 = v11;
        __double2 v46 = __sincos_stret(v45);
        double v28 = v46.__cosval;
        float64x2_t v11 = v64;
        float64x2_t v10 = v66;
        float64x2_t v4 = v68;
        float64x2_t v9 = v70;
        _Q26 = v72;
        v8.f64[0] = v74;
        double v27 = v46.__sinval / v45;
        a4.f64[0] = 1.0 / v26 * (1.0 - v46.__cosval);
        _Q0.f64[0] = 1.0 / v26 * (1.0 - v46.__sinval / v45);
      }
      else
      {
        a4.f64[0] = 0.5 - v26 * (v26 / -720.0 + 0.0416666667);
        _Q0.f64[0] = 0.166666667 - v26 * (v26 / -5040.0 + 0.00833333333);
        double v27 = 1.0 - v26 * _Q0.f64[0];
        double v28 = 1.0 - v26 * a4.f64[0];
      }
      double v36 = _Q26.f64[0] * (_Q26.f64[0] * a4.f64[0]) + v28;
      double v37 = _D9 * (_D9 * a4.f64[0]) + v28;
      double v38 = v8.f64[0] * (v8.f64[0] * a4.f64[0]) + v28;
      double v39 = _D9 * (_Q26.f64[0] * a4.f64[0]);
      double v40 = v8.f64[0] * (_Q26.f64[0] * a4.f64[0]);
      double v41 = v8.f64[0] * (_D9 * a4.f64[0]);
      double v42 = _Q26.f64[0] * v27;
      double v43 = _D9 * v27;
      double v44 = v8.f64[0] * v27;
LABEL_16:
      double v47 = v39 - v44;
      double v48 = v40 + v43;
      double v49 = v39 + v44;
      double v50 = v41 - v42;
      double v51 = v40 - v43;
      v52.f64[0] = v9.f64[0];
      v52.f64[1] = v8.f64[0];
      v53.f64[0] = v4.f64[0];
      v53.f64[1] = v10.f64[0];
      double v54 = v41 + v42;
      v55.f64[0] = v10.f64[0];
      v55.f64[1] = v11.f64[0];
      v8.f64[1] = _Q26.f64[0];
      v56.f64[0] = v11.f64[0];
      v56.f64[1] = v4.f64[0];
      float64x2_t v57 = vsubq_f64(vmulq_f64(v52, v53), vmulq_f64(v8, v56));
      float64x2_t v58 = vsubq_f64(vmulq_f64(_Q26, v11), vmulq_f64(v9, v10));
      float64x2_t v59 = vaddq_f64(v55, vmulq_n_f64(v57, a4.f64[0]));
      float64x2_t v60 = vaddq_f64(v4, vmulq_f64(v58, a4));
      float64x2_t v61 = (float64x2_t)vextq_s8((int8x16_t)v57, (int8x16_t)v58, 8uLL);
      v58.f64[1] = v57.f64[0];
      float64x2_t v62 = vmulq_f64(vsubq_f64(vmulq_laneq_f64(_Q26, v57, 1), vmulq_f64(v9, v57)), _Q0);
      *(double *)a2 = v36;
      *(double *)(a2 + 8) = v49;
      *(double *)(a2 + 16) = v51;
      result = vaddq_f64(v59, vmulq_n_f64(vsubq_f64(vmulq_f64(v52, v58), vmulq_f64(v8, v61)), _Q0.f64[0]));
      *(void *)(a2 + 24) = 0;
      *(double *)(a2 + 32) = v47;
      *(double *)(a2 + 40) = v37;
      *(double *)(a2 + 48) = v54;
      *(void *)(a2 + 56) = 0;
      *(double *)(a2 + 64) = v48;
      *(double *)(a2 + 72) = v50;
      *(double *)(a2 + 80) = v38;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 112) = *(_OWORD *)&vaddq_f64(v60, v62);
      *(float64x2_t *)(a2 + 96) = result;
      *(void *)(a2 + 120) = 0x3FF0000000000000;
      break;
    case 4:
      if (*(_DWORD *)(v6 + 128)) {
        goto LABEL_17;
      }
      float64x2_t v21 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 8));
      *(float64x2_t *)a2 = vcvtq_f64_f32(*(float32x2_t *)v6);
      *(float64x2_t *)(a2 + 16) = v21;
      float64x2_t v22 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 24));
      *(float64x2_t *)(a2 + 32) = vcvtq_f64_f32(*(float32x2_t *)(v6 + 16));
      *(float64x2_t *)(a2 + 48) = v22;
      float64x2_t v23 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 40));
      *(float64x2_t *)(a2 + 64) = vcvtq_f64_f32(*(float32x2_t *)(v6 + 32));
      *(float64x2_t *)(a2 + 80) = v23;
      result = vcvtq_f64_f32(*(float32x2_t *)(v6 + 48));
      float64x2_t v24 = vcvtq_f64_f32(*(float32x2_t *)(v6 + 56));
      *(float64x2_t *)(a2 + 96) = result;
      *(float64x2_t *)(a2 + 112) = v24;
      break;
    case 5:
      if (*(_DWORD *)(v6 + 128) != 1) {
LABEL_17:
      }
        sub_215742D4C();
      long long v29 = *(_OWORD *)(v6 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(v6 + 64);
      *(_OWORD *)(a2 + 80) = v29;
      long long v30 = *(_OWORD *)(v6 + 112);
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(v6 + 96);
      *(_OWORD *)(a2 + 112) = v30;
      long long v31 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a2 = *(_OWORD *)v6;
      *(_OWORD *)(a2 + 16) = v31;
      result = *(float64x2_t *)(v6 + 32);
      long long v32 = *(_OWORD *)(v6 + 48);
      *(float64x2_t *)(a2 + 32) = result;
      *(_OWORD *)(a2 + 48) = v32;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_215B2690C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  int v3 = *(unsigned __int8 *)(*a1 + 136);
  int v5 = v3 != 5 && v3 != 2;
  uint64_t v6 = *a2;
  int v7 = *(unsigned __int8 *)(*a2 + 136);
  int v9 = v7 == 5 || v7 == 2;
  if (v5 == v9 || ((v3 & 0xFE) != 4) == ((v7 & 0xFE) == 4)) {
    return 0;
  }
  uint64_t result = 0;
  switch(v3)
  {
    case 1:
      if (*(_DWORD *)(v2 + 128) != 2 || *(_DWORD *)(v6 + 128) != 2) {
        goto LABEL_72;
      }
      if (*(float *)v2 != *(float *)v6
        || *(float *)(v2 + 4) != *(float *)(v6 + 4)
        || *(float *)(v2 + 8) != *(float *)(v6 + 8)
        || *(float *)(v2 + 12) != *(float *)(v6 + 12)
        || *(float *)(v2 + 16) != *(float *)(v6 + 16)
        || *(float *)(v2 + 20) != *(float *)(v6 + 20))
      {
        return 0;
      }
      goto LABEL_33;
    case 2:
      if (*(_DWORD *)(v2 + 128) != 3 || *(_DWORD *)(v6 + 128) != 3) {
        goto LABEL_72;
      }
      if (*(double *)v2 != *(double *)v6
        || *(double *)(v2 + 8) != *(double *)(v6 + 8)
        || *(double *)(v2 + 16) != *(double *)(v6 + 16)
        || *(double *)(v2 + 24) != *(double *)(v6 + 24)
        || *(double *)(v2 + 32) != *(double *)(v6 + 32)
        || *(double *)(v2 + 40) != *(double *)(v6 + 40))
      {
        return 0;
      }
      goto LABEL_33;
    case 4:
      if (*(_DWORD *)(v2 + 128) || *(_DWORD *)(v6 + 128)) {
        goto LABEL_72;
      }
      if (*(float *)v2 != *(float *)v6
        || *(float *)(v2 + 4) != *(float *)(v6 + 4)
        || *(float *)(v2 + 8) != *(float *)(v6 + 8)
        || *(float *)(v2 + 12) != *(float *)(v6 + 12)
        || *(float *)(v2 + 16) != *(float *)(v6 + 16)
        || *(float *)(v2 + 20) != *(float *)(v6 + 20)
        || *(float *)(v2 + 24) != *(float *)(v6 + 24)
        || *(float *)(v2 + 28) != *(float *)(v6 + 28)
        || *(float *)(v2 + 32) != *(float *)(v6 + 32)
        || *(float *)(v2 + 36) != *(float *)(v6 + 36)
        || *(float *)(v2 + 40) != *(float *)(v6 + 40)
        || *(float *)(v2 + 44) != *(float *)(v6 + 44)
        || *(float *)(v2 + 48) != *(float *)(v6 + 48)
        || *(float *)(v2 + 52) != *(float *)(v6 + 52)
        || *(float *)(v2 + 56) != *(float *)(v6 + 56)
        || *(float *)(v2 + 60) != *(float *)(v6 + 60))
      {
        return 0;
      }
      goto LABEL_33;
    case 5:
      if (*(_DWORD *)(v2 + 128) != 1 || *(_DWORD *)(v6 + 128) != 1) {
LABEL_72:
      }
        sub_215742D4C();
      if (*(double *)v2 != *(double *)v6
        || *(double *)(v2 + 8) != *(double *)(v6 + 8)
        || *(double *)(v2 + 16) != *(double *)(v6 + 16)
        || *(double *)(v2 + 24) != *(double *)(v6 + 24)
        || *(double *)(v2 + 32) != *(double *)(v6 + 32)
        || *(double *)(v2 + 40) != *(double *)(v6 + 40)
        || *(double *)(v2 + 48) != *(double *)(v6 + 48)
        || *(double *)(v2 + 56) != *(double *)(v6 + 56)
        || *(double *)(v2 + 64) != *(double *)(v6 + 64)
        || *(double *)(v2 + 72) != *(double *)(v6 + 72)
        || *(double *)(v2 + 80) != *(double *)(v6 + 80)
        || *(double *)(v2 + 88) != *(double *)(v6 + 88)
        || *(double *)(v2 + 96) != *(double *)(v6 + 96)
        || *(double *)(v2 + 104) != *(double *)(v6 + 104)
        || *(double *)(v2 + 112) != *(double *)(v6 + 112)
        || *(double *)(v2 + 120) != *(double *)(v6 + 120))
      {
        return 0;
      }
LABEL_33:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_215B26CE8(void *a1)
{
}

void sub_215B271C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 - 73) < 0) {
    operator delete(*(void **)(v15 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_215B27248(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_215B2725C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 73) < 0)
  {
    operator delete(*(void **)(v1 - 96));
    sub_215742CF0(v1 - 128);
    _Unwind_Resume(a1);
  }
  sub_215742CF0(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_215B272BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC38, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_26788EC38)) {
      operator new();
    }
  }
  operator new();
}

void sub_215B273F4(_Unwind_Exception *a1)
{
}

void sub_215B2740C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_215B27430(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_215B2690C((uint64_t *)a1, (uint64_t *)a2);
  if (!result) {
    return result;
  }
  int v5 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned char *)(a1 + 32)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if ((*(unsigned char *)(a1 + 32) != 0) != (v5 != 0)) {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 31);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      uint64_t v8 = *(void *)(a1 + 16);
    }
    uint64_t v9 = *(unsigned __int8 *)(a2 + 31);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 16);
    }
    if (v8 != v9) {
      return 0;
    }
    float64x2_t v11 = (const void **)(a1 + 8);
    if (v10 >= 0) {
      float v12 = (unsigned __int8 *)(a2 + 8);
    }
    else {
      float v12 = *(unsigned __int8 **)(a2 + 8);
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v11, v12, *(void *)(a1 + 16))) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a1 + 31))
    {
      while (*(unsigned __int8 *)v11 == *v12)
      {
        float64x2_t v11 = (const void **)((char *)v11 + 1);
        ++v12;
        if (!--v7) {
          goto LABEL_24;
        }
      }
      return 0;
    }
  }
LABEL_24:
  uint64_t result = (*(unsigned char *)(a1 + 64) != 0) == (*(unsigned char *)(a2 + 64) != 0);
  if (!*(unsigned char *)(a1 + 64) || !*(unsigned char *)(a2 + 64)) {
    return result;
  }
  uint64_t v13 = *(unsigned __int8 *)(a1 + 63);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    uint64_t v14 = *(void *)(a1 + 48);
  }
  uint64_t v15 = *(unsigned __int8 *)(a2 + 63);
  int v16 = (char)v15;
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 48);
  }
  if (v14 != v15) {
    return 0;
  }
  long long v17 = (const void **)(a1 + 40);
  if (v16 >= 0) {
    double v18 = (unsigned __int8 *)(a2 + 40);
  }
  else {
    double v18 = *(unsigned __int8 **)(a2 + 40);
  }
  if ((v13 & 0x80) != 0) {
    return memcmp(*v17, v18, *(void *)(a1 + 48)) == 0;
  }
  if (!*(unsigned char *)(a1 + 63)) {
    return 1;
  }
  uint64_t v19 = v13 - 1;
  do
  {
    int v21 = *(unsigned __int8 *)v17;
    long long v17 = (const void **)((char *)v17 + 1);
    int v20 = v21;
    int v23 = *v18++;
    int v22 = v23;
    BOOL v25 = v19-- != 0;
    uint64_t result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

void sub_215B275E8(void *a1, uint64_t a2)
{
  sub_215731D94(a1, (uint64_t)"Transform3{src: ", 16);
  if (*(unsigned char *)(a2 + 32))
  {
    char v18 = 34;
    float64x2_t v4 = sub_215731D94(a1, (uint64_t)&v18, 1);
    int v5 = *(char *)(a2 + 31);
    if (v5 >= 0) {
      uint64_t v6 = a2 + 8;
    }
    else {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    if (v5 >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a2 + 31);
    }
    else {
      uint64_t v7 = *(void *)(a2 + 16);
    }
    uint64_t v8 = sub_215731D94(v4, v6, v7);
    char v19 = 34;
    uint64_t v9 = &v19;
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v9 = "world";
    uint64_t v8 = a1;
    uint64_t v10 = 5;
  }
  sub_215731D94(v8, (uint64_t)v9, v10);
  sub_215731D94(a1, (uint64_t)", dst: ", 7);
  if (*(unsigned char *)(a2 + 64))
  {
    char v20 = 34;
    float64x2_t v11 = sub_215731D94(a1, (uint64_t)&v20, 1);
    int v12 = *(char *)(a2 + 63);
    if (v12 >= 0) {
      uint64_t v13 = a2 + 40;
    }
    else {
      uint64_t v13 = *(void *)(a2 + 40);
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 63);
    }
    else {
      uint64_t v14 = *(void *)(a2 + 48);
    }
    uint64_t v15 = sub_215731D94(v11, v13, v14);
    char v21 = 34;
    int v16 = &v21;
    uint64_t v17 = 1;
  }
  else
  {
    int v16 = "world";
    uint64_t v15 = a1;
    uint64_t v17 = 5;
  }
  sub_215731D94(v15, (uint64_t)v16, v17);
  sub_215731D94(a1, (uint64_t)", transform:", 12);
  operator new();
}

void sub_215B277CC(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

__n128 sub_215B277F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

__n128 sub_215B27808(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[1];
  long long v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = (__n128)a3[4];
  long long v7 = a3[5];
  long long v8 = a3[7];
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_OWORD *)(a2 + 112) = v8;
  *(__n128 *)(a2 + 64) = result;
  *(_OWORD *)(a2 + 80) = v7;
  return result;
}

__n128 sub_215B2782C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_215B27840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_215B27854(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v11 = a2;
  int v12 = "{";
  uint64_t v13 = a2;
  uint64_t v14 = "{";
  uint64_t v15 = "{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_7;
  }
  int v16 = &v11;
  ((void (*)(uint64_t **))off_26C67B078[v3])(&v16);
  sub_2157D208C((uint64_t)&v11, a2, a3);
  uint64_t v11 = a2;
  int v12 = ",";
  uint64_t v13 = a2;
  uint64_t v14 = ",";
  uint64_t v15 = ",";
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    goto LABEL_7;
  }
  int v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_26C67B078[v6])(&v16, a2);
  sub_2157D208C((uint64_t)&v11, a2, a3 + 1);
  uint64_t v11 = a2;
  int v12 = ",";
  uint64_t v13 = a2;
  uint64_t v14 = ",";
  uint64_t v15 = ",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_7;
  }
  int v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_26C67B078[v7])(&v16, a2);
  sub_2157D208C((uint64_t)&v11, a2, a3 + 2);
  uint64_t v11 = a2;
  int v12 = ",";
  uint64_t v13 = a2;
  uint64_t v14 = ",";
  uint64_t v15 = ",";
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_7;
  }
  int v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_26C67B078[v8])(&v16, a2);
  sub_2157D208C((uint64_t)&v11, a2, a3 + 3);
  uint64_t v11 = a2;
  int v12 = "}";
  uint64_t v13 = a2;
  uint64_t v14 = "}";
  uint64_t v15 = "}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_7:
  }
    sub_215742D4C();
  int v16 = &v11;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C67B078[v9])(&v16, a2);
}

_DWORD *sub_215B279EC(_DWORD ***a1)
{
  return sub_21583358C(**a1, (char *)(*a1)[1]);
}

void sub_215B279F8(uint64_t *a1, uint64_t a2)
{
  v19[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  *(void *)((char *)v19 + 7) = *(void *)(a2 + 15);
  long long v4 = *(void **)a2;
  v19[0] = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = v4;
  *(void *)uint64_t v15 = v19[0];
  *(void *)&v15[7] = *(void *)((char *)v19 + 7);
  char v16 = v5;
  memset(v19, 0, 15);
  uint64_t v6 = __p;
  uint64_t v7 = *(const char **)(v2 + 24);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  uint64_t v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v6 = operator new(v11 + 1);
    __p[1] = v9;
    unint64_t v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v6) = 0;
    uint64_t v10 = *(unsigned int *)(v3 + 24);
    if (v10 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v10 = *(unsigned int *)(v3 + 24);
  if (v10 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26C67B048[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_21573A150((void *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0) {
    goto LABEL_15;
  }
}

void sub_215B27BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B27BF8(uint64_t a1, void **a2)
{
  uint64_t v3 = *(const void **)(*(void *)a1 + 32);
  char v5 = a2[1];
  long long v4 = a2[2];
  if (v5 < (void *)v4)
  {
    size_t v6 = strlen(*(const char **)(*(void *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v14 = v6 | 7;
      }
      uint64_t v15 = v14 + 1;
      size_t v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *char v5 = v8;
    }
    else
    {
      *((unsigned char *)v5 + 23) = v6;
      size_t v8 = v5;
      if (!v6) {
        goto LABEL_19;
      }
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((unsigned char *)v8 + v7) = 0;
    char v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a2) >> 3);
  uint64_t v11 = 2 * v10;
  if (2 * v10 <= v9 + 1) {
    uint64_t v11 = v9 + 1;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AD8();
    }
    char v13 = (char *)operator new(24 * v12);
  }
  else
  {
    char v13 = 0;
  }
  uint64_t v17 = &v13[24 * v9];
  size_t v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v24 = v18 | 7;
    }
    uint64_t v25 = v24 + 1;
    char v20 = operator new(v24 + 1);
    *((void *)v17 + 1) = v19;
    *((void *)v17 + 2) = v25 | 0x8000000000000000;
    *(void *)uint64_t v17 = v20;
  }
  else
  {
    v17[23] = v18;
    char v20 = v17;
    if (!v18)
    {
      char v21 = &v13[24 * v12];
      *uint64_t v17 = 0;
      char v16 = v17 + 24;
      int v22 = (void **)*a2;
      int v23 = (void **)a2[1];
      if (v23 == *a2) {
        goto LABEL_36;
      }
      do
      {
LABEL_30:
        long long v26 = *(_OWORD *)(v23 - 3);
        *((void *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      int v23 = (void **)*a2;
      double v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  char v21 = &v13[24 * v12];
  *((unsigned char *)v20 + v19) = 0;
  char v16 = v17 + 24;
  int v22 = (void **)*a2;
  int v23 = (void **)a2[1];
  if (v23 != *a2) {
    goto LABEL_30;
  }
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23) {
    operator delete(v23);
  }
LABEL_39:
  a2[1] = v16;
}

void sub_215B27E8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B27EA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_215B27EAC(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v11 = a2;
  unint64_t v12 = "{";
  uint64_t v13 = a2;
  uint64_t v14 = "{";
  uint64_t v15 = "{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_7;
  }
  char v16 = &v11;
  ((void (*)(uint64_t **))off_26C67B078[v3])(&v16);
  sub_2157CFFD4((uint64_t)&v11, a2, a3);
  uint64_t v11 = a2;
  unint64_t v12 = ",";
  uint64_t v13 = a2;
  uint64_t v14 = ",";
  uint64_t v15 = ",";
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    goto LABEL_7;
  }
  char v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_26C67B078[v6])(&v16, a2);
  sub_2157CFFD4((uint64_t)&v11, a2, a3 + 1);
  uint64_t v11 = a2;
  unint64_t v12 = ",";
  uint64_t v13 = a2;
  uint64_t v14 = ",";
  uint64_t v15 = ",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_7;
  }
  char v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_26C67B078[v7])(&v16, a2);
  sub_2157CFFD4((uint64_t)&v11, a2, a3 + 2);
  uint64_t v11 = a2;
  unint64_t v12 = ",";
  uint64_t v13 = a2;
  uint64_t v14 = ",";
  uint64_t v15 = ",";
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_7;
  }
  char v16 = &v11;
  ((void (*)(uint64_t **, uint64_t))off_26C67B078[v8])(&v16, a2);
  sub_2157CFFD4((uint64_t)&v11, a2, a3 + 3);
  uint64_t v11 = a2;
  unint64_t v12 = "}";
  uint64_t v13 = a2;
  uint64_t v14 = "}";
  uint64_t v15 = "}";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_7:
  }
    sub_215742D4C();
  char v16 = &v11;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C67B078[v9])(&v16, a2);
}

void sub_215B28044(float32x2_t *a1, float *a2)
{
  float v4 = (float)(a1[3].f32[0] - a1[4].f32[1]) * 0.5;
  *a2 = v4;
  float v5 = (float)(a1[4].f32[0] - a1[1].f32[0]) * 0.5;
  a2[1] = v5;
  float v6 = (float)(a1->f32[1] - a1[2].f32[0]) * 0.5;
  a2[2] = v6;
  float v7 = a1->f32[0];
  float v8 = a1[2].f32[1];
  float v9 = a1[5].f32[0];
  float v10 = -1.0;
  float v11 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
  float v12 = (float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6);
  if (v11 >= -1.0 || (float)(v11 + 1.0) <= -0.00001)
  {
    BOOL v14 = v11 > 1.0;
    if ((float)(v11 + -1.0) >= 0.00001) {
      BOOL v14 = 0;
    }
    if (v11 <= 0.99 && !v14)
    {
      if (v11 <= -0.99)
      {
        float v10 = (float)((float)((float)(a1->f32[0] + v8) + v9) + -1.0) * 0.5;
        goto LABEL_17;
      }
      float v16 = acosf(v11) / sqrtf(v12);
    }
    else
    {
      float v16 = (float)(v12 * (float)((float)(v12 * (float)((float)((float)(v12 * 5.0) / 112.0) + 0.075)) + 0.16667)) + 1.0;
    }
    *a2 = v4 * v16;
    a2[1] = v5 * v16;
    a2[2] = v6 * v16;
    return;
  }
LABEL_17:
  float v17 = asinf(sqrtf(v12));
  float v18 = (float)((float)(3.1416 - v17) * (float)(3.1416 - v17)) / (float)(1.0 - v10);
  float v19 = (float)(v7 - v10) * v18;
  float v20 = (float)(v8 - v10) * v18;
  float v21 = (float)(v9 - v10) * v18;
  if (v19 <= v20)
  {
    float v26 = v18 * 0.5;
    if (v20 <= v21)
    {
      float v33 = sqrtf(v21);
      if (v6 < 0.0) {
        float v33 = -v33;
      }
      a2[2] = v33;
      v34.i32[0] = a1[1].i32[0];
      v34.i32[1] = a1[3].i32[0];
      *(float32x2_t *)a2 = vmul_n_f32(vmul_n_f32(vadd_f32(a1[4], v34), v26), 1.0 / v33);
    }
    else
    {
      float v27 = sqrtf(v20);
      if (v5 < 0.0) {
        float v27 = -v27;
      }
      a2[1] = v27;
      float v28 = 1.0 / v27;
      float v29 = a1[4].f32[1] + a1[3].f32[0];
      *a2 = v28 * (float)(v26 * (float)(a1[2].f32[0] + a1->f32[1]));
      a2[2] = v28 * (float)(v26 * v29);
    }
  }
  else
  {
    float v22 = v18 * 0.5;
    float v23 = v22 * (float)(a1[4].f32[0] + a1[1].f32[0]);
    if (v19 <= v21)
    {
      float v30 = sqrtf(v21);
      if (v6 < 0.0) {
        float v30 = -v30;
      }
      a2[2] = v30;
      float v31 = 1.0 / v30;
      float v32 = v31 * (float)(v22 * (float)(a1[4].f32[1] + a1[3].f32[0]));
      *a2 = v31 * v23;
      a2[1] = v32;
    }
    else
    {
      float v24 = sqrtf(v19);
      if (v4 < 0.0) {
        float v24 = -v24;
      }
      *a2 = v24;
      float v25 = 1.0 / v24;
      a2[1] = v25 * (float)(v22 * (float)(a1[2].f32[0] + a1->f32[1]));
      a2[2] = v25 * v23;
    }
  }
}

void sub_215B28358(float64x2_t *a1, double *a2)
{
  double v4 = (a1[3].f64[0] - a1[4].f64[1]) * 0.5;
  *a2 = v4;
  double v5 = (a1[4].f64[0] - a1[1].f64[0]) * 0.5;
  a2[1] = v5;
  double v6 = (a1->f64[1] - a1[2].f64[0]) * 0.5;
  a2[2] = v6;
  double v7 = a1->f64[0];
  double v8 = a1[2].f64[1];
  double v9 = a1[5].f64[0];
  double v10 = -1.0;
  double v11 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  double v12 = v4 * v4 + v5 * v5 + v6 * v6;
  if (v11 >= -1.0 || v11 + 1.0 <= -0.00001)
  {
    BOOL v13 = v11 > 1.0;
    if (v11 + -1.0 >= 0.00001) {
      BOOL v13 = 0;
    }
    if (v11 > 0.99 || v13)
    {
      double v15 = v12 * (v12 * (v12 * 5.0 / 112.0 + 0.075) + 0.166666667) + 1.0;
      *a2 = v4 * v15;
      a2[1] = v5 * v15;
LABEL_12:
      a2[2] = v6 * v15;
      return;
    }
    if (v11 > -0.99)
    {
      double v15 = acos(v11) / sqrt(v12);
      *a2 = v4 * v15;
      a2[1] = v5 * v15;
      goto LABEL_12;
    }
    double v10 = (a1->f64[0] + v8 + v9 + -1.0) * 0.5;
  }
  long double v16 = asin(sqrt(v12));
  double v17 = (3.14159265 - v16) * (3.14159265 - v16) / (1.0 - v10);
  double v18 = (v7 - v10) * v17;
  double v19 = (v8 - v10) * v17;
  double v20 = (v9 - v10) * v17;
  if (v18 <= v19)
  {
    double v25 = v17 * 0.5;
    if (v19 <= v20)
    {
      double v32 = sqrt(v20);
      if (v6 < 0.0) {
        double v32 = -v32;
      }
      a2[2] = v32;
      v33.f64[0] = a1[1].f64[0];
      v33.f64[1] = a1[3].f64[0];
      *(float64x2_t *)a2 = vmulq_n_f64(vmulq_n_f64(vaddq_f64(a1[4], v33), v25), 1.0 / v32);
    }
    else
    {
      double v26 = sqrt(v19);
      if (v5 < 0.0) {
        double v26 = -v26;
      }
      a2[1] = v26;
      double v27 = 1.0 / v26;
      float64_t v28 = a1[4].f64[1] + a1[3].f64[0];
      *a2 = v27 * (v25 * (a1[2].f64[0] + a1->f64[1]));
      a2[2] = v27 * (v25 * v28);
    }
  }
  else
  {
    double v21 = v17 * 0.5;
    double v22 = v21 * (a1[4].f64[0] + a1[1].f64[0]);
    if (v18 <= v20)
    {
      double v29 = sqrt(v20);
      if (v6 < 0.0) {
        double v29 = -v29;
      }
      a2[2] = v29;
      double v30 = 1.0 / v29;
      double v31 = v30 * (v21 * (a1[4].f64[1] + a1[3].f64[0]));
      *a2 = v30 * v22;
      a2[1] = v31;
    }
    else
    {
      double v23 = sqrt(v18);
      if (v4 < 0.0) {
        double v23 = -v23;
      }
      *a2 = v23;
      double v24 = 1.0 / v23;
      a2[1] = v24 * (v21 * (a1[2].f64[0] + a1->f64[1]));
      a2[2] = v24 * v22;
    }
  }
}

double sub_215B2866C(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)a1 = *(unsigned char *)(*a2 + 136);
  *(void *)&long long v2 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  uint64_t v3 = (long long *)*a2;
  switch(*(unsigned char *)(*a2 + 136))
  {
    case 1:
      if (*((_DWORD *)v3 + 32) != 2) {
        goto LABEL_10;
      }
      *(_DWORD *)(a1 + 104) = 2;
      long long v2 = *v3;
      uint64_t v4 = *((void *)v3 + 2);
      *(_OWORD *)(a1 + 8) = *v3;
      *(void *)(a1 + 24) = v4;
      break;
    case 2:
      if (*((_DWORD *)v3 + 32) != 3) {
        goto LABEL_10;
      }
      *(_DWORD *)(a1 + 104) = 3;
      long long v2 = *v3;
      long long v16 = v3[1];
      long long v17 = v3[2];
      *(_OWORD *)(a1 + 8) = *v3;
      *(_OWORD *)(a1 + 24) = v16;
      *(_OWORD *)(a1 + 40) = v17;
      break;
    case 4:
      if (*((_DWORD *)v3 + 32)) {
        goto LABEL_10;
      }
      LODWORD(v2) = *(_DWORD *)v3;
      int v5 = *((_DWORD *)v3 + 1);
      int v6 = *((_DWORD *)v3 + 4);
      int v7 = *((_DWORD *)v3 + 5);
      int v8 = *((_DWORD *)v3 + 8);
      int v9 = *((_DWORD *)v3 + 9);
      int v10 = *((_DWORD *)v3 + 12);
      int v11 = *((_DWORD *)v3 + 13);
      int v12 = *((_DWORD *)v3 + 2);
      int v13 = *((_DWORD *)v3 + 6);
      int v14 = *((_DWORD *)v3 + 10);
      int v15 = *((_DWORD *)v3 + 14);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v3;
      *(_DWORD *)(a1 + 12) = v6;
      *(_DWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 20) = v10;
      *(_DWORD *)(a1 + 24) = v5;
      *(_DWORD *)(a1 + 28) = v7;
      *(_DWORD *)(a1 + 32) = v9;
      *(_DWORD *)(a1 + 36) = v11;
      *(_DWORD *)(a1 + 40) = v12;
      *(_DWORD *)(a1 + 44) = v13;
      *(_DWORD *)(a1 + 48) = v14;
      *(_DWORD *)(a1 + 52) = v15;
      break;
    case 5:
      if (*((_DWORD *)v3 + 32) != 1) {
LABEL_10:
      }
        sub_215742D4C();
      *(void *)&long long v2 = *(void *)v3;
      uint64_t v18 = *((void *)v3 + 1);
      uint64_t v19 = *((void *)v3 + 4);
      uint64_t v20 = *((void *)v3 + 5);
      uint64_t v21 = *((void *)v3 + 8);
      uint64_t v22 = *((void *)v3 + 9);
      uint64_t v23 = *((void *)v3 + 12);
      uint64_t v24 = *((void *)v3 + 13);
      uint64_t v25 = *((void *)v3 + 2);
      uint64_t v26 = *((void *)v3 + 6);
      uint64_t v27 = *((void *)v3 + 10);
      uint64_t v28 = *((void *)v3 + 14);
      *(void *)(a1 + 8) = *(void *)v3;
      *(void *)(a1 + 16) = v19;
      *(_DWORD *)(a1 + 104) = 1;
      *(void *)(a1 + 24) = v21;
      *(void *)(a1 + 32) = v23;
      *(void *)(a1 + 40) = v18;
      *(void *)(a1 + 48) = v20;
      *(void *)(a1 + 56) = v22;
      *(void *)(a1 + 64) = v24;
      *(void *)(a1 + 72) = v25;
      *(void *)(a1 + 80) = v26;
      *(void *)(a1 + 88) = v27;
      *(void *)(a1 + 96) = v28;
      break;
    default:
      return *(double *)&v2;
  }
  return *(double *)&v2;
}

uint64_t *sub_215B287D4(uint64_t *a1, unsigned char *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EC50))
  {
    sub_215B28A94();
  }
  uint64_t v24 = 0;
  size_t v25 = 0;
  uint64_t v26 = 0;
  sub_215A9B3F0(a1, (uint64_t)&v24);
  uint64_t v4 = qword_26788EC60;
  if (!qword_26788EC60) {
    goto LABEL_41;
  }
  int v5 = SHIBYTE(v26);
  int v6 = v24;
  if (v26 >= 0) {
    int v7 = &v24;
  }
  else {
    int v7 = (void **)v24;
  }
  if (v26 >= 0) {
    size_t v8 = HIBYTE(v26);
  }
  else {
    size_t v8 = v25;
  }
  int v9 = &qword_26788EC60;
  do
  {
    while (1)
    {
      int v10 = *(char *)(v4 + 55);
      int v11 = v10 >= 0 ? (const void *)(v4 + 32) : *(const void **)(v4 + 32);
      size_t v12 = v10 >= 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
      size_t v13 = v8 >= v12 ? v12 : v8;
      int v14 = memcmp(v11, v7, v13);
      if (v14) {
        break;
      }
      if (v12 >= v8) {
        goto LABEL_24;
      }
LABEL_10:
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        goto LABEL_25;
      }
    }
    if (v14 < 0) {
      goto LABEL_10;
    }
LABEL_24:
    int v9 = (uint64_t *)v4;
    uint64_t v4 = *(void *)v4;
  }
  while (v4);
LABEL_25:
  if (v9 == &qword_26788EC60) {
    goto LABEL_41;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    long long v16 = v9 + 4;
  }
  else {
    long long v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= v8) {
    size_t v18 = v8;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v7, v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_41:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_215AEDCD0(", expected [Algebra|Affine][F|D]", &v22, &v23);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  if (v8 < v17) {
    goto LABEL_41;
  }
LABEL_37:
  *a2 = *((unsigned char *)v9 + 56);
  if (v5 < 0) {
    operator delete(v6);
  }
  return a1;
}

void sub_215B28A04(_Unwind_Exception *a1)
{
}

void sub_215B28A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0) {
        operator delete(a22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void sub_215B28A94()
{
  qword_26788EC60 = 0;
  qword_26788EC68 = 0;
  qword_26788EC58 = (uint64_t)&qword_26788EC60;
  operator new();
}

void sub_215B28FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, int a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B2906C(uint64_t a1)
{
  return a1;
}

uint64_t sub_215B29098(uint64_t result)
{
  switch(*(unsigned char *)(result + 8))
  {
    case 2:
      if (*(_DWORD *)(result + 112) == 3) {
        operator new();
      }
      return result;
    case 3:
      __break(1u);
      return result;
    case 4:
      if (!*(_DWORD *)(result + 112))
      {
        __asm { FMOV            V0.4S, #1.0 }
        operator new();
      }
      return result;
    case 5:
      if (*(_DWORD *)(result + 112) == 1)
      {
        __asm { FMOV            V0.2D, #1.0 }
        operator new();
      }
      return result;
    default:
      if (*(_DWORD *)(result + 112) == 2) {
        operator new();
      }
      return result;
  }
  sub_215742D4C();
}

void sub_215B294F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a31 && a30 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v32 - 104))
  {
    if (*(char *)(v32 - 105) < 0) {
      operator delete(*(void **)(v32 - 128));
    }
  }
  MEMORY[0x2166C4D20](v31, 0x1000C4072FAA15ELL);
  _Unwind_Resume(a1);
}

uint64_t sub_215B29584(unsigned __int8 *a1, unsigned __int8 *a2)
{
  v19[0] = a1 + 8;
  v19[1] = a1 + 120;
  uint64_t v20 = a1 + 152;
  v17[0] = a2 + 8;
  v17[1] = a2 + 120;
  size_t v18 = a2 + 152;
  uint64_t result = sub_215B29988((uint64_t)&v21, v19, v17);
  if (result)
  {
    uint64_t v3 = v20;
    if (v20[24]) {
      BOOL v4 = v18[24] == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      return (v20[24] != 0) == (v18[24] != 0);
    }
    else
    {
      uint64_t v5 = v20[23];
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v20[23];
      }
      else {
        uint64_t v6 = *((void *)v20 + 1);
      }
      uint64_t v7 = v18[23];
      int v8 = (char)v7;
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *((void *)v18 + 1);
      }
      if (v6 == v7)
      {
        if (v8 >= 0) {
          int v9 = v18;
        }
        else {
          int v9 = *(unsigned __int8 **)v18;
        }
        if ((v5 & 0x80) != 0)
        {
          return memcmp(*(const void **)v20, v9, *((void *)v20 + 1)) == 0;
        }
        else if (v20[23])
        {
          uint64_t v10 = v5 - 1;
          do
          {
            int v12 = *v3++;
            int v11 = v12;
            int v14 = *v9++;
            int v13 = v14;
            BOOL v16 = v10-- != 0;
            uint64_t result = v11 == v13;
          }
          while (v11 == v13 && v16);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_215B296B8(uint64_t a1, float *a2, float *a3)
{
  BOOL result = *a2 == *a3;
  if (*a2 == *a3)
  {
    float v4 = a2[1];
    float v5 = a3[1];
    BOOL result = v4 == v5;
    if (v4 == v5)
    {
      float v6 = a2[2];
      float v7 = a3[2];
      BOOL result = v6 == v7;
      if (v6 == v7) {
        BOOL result = a2[3] == a3[3];
      }
    }
  }
  if (result)
  {
    float v8 = a2[4];
    float v9 = a3[4];
    BOOL result = v8 == v9;
    if (v8 == v9)
    {
      float v10 = a2[5];
      float v11 = a3[5];
      BOOL result = v10 == v11;
      if (v10 == v11)
      {
        float v12 = a2[6];
        float v13 = a3[6];
        BOOL result = v12 == v13;
        if (v12 == v13) {
          BOOL result = a2[7] == a3[7];
        }
      }
    }
    if (result)
    {
      float v14 = a2[8];
      float v15 = a3[8];
      BOOL result = v14 == v15;
      if (v14 == v15)
      {
        float v16 = a2[9];
        float v17 = a3[9];
        BOOL result = v16 == v17;
        if (v16 == v17)
        {
          float v18 = a2[10];
          float v19 = a3[10];
          BOOL result = v18 == v19;
          if (v18 == v19) {
            return a2[11] == a3[11];
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_215B297A8(uint64_t a1, double *a2, double *a3)
{
  BOOL result = *a2 == *a3;
  if (*a2 == *a3)
  {
    double v4 = a2[1];
    double v5 = a3[1];
    BOOL result = v4 == v5;
    if (v4 == v5)
    {
      double v6 = a2[2];
      double v7 = a3[2];
      BOOL result = v6 == v7;
      if (v6 == v7) {
        BOOL result = a2[3] == a3[3];
      }
    }
  }
  if (result)
  {
    double v8 = a2[4];
    double v9 = a3[4];
    BOOL result = v8 == v9;
    if (v8 == v9)
    {
      double v10 = a2[5];
      double v11 = a3[5];
      BOOL result = v10 == v11;
      if (v10 == v11)
      {
        double v12 = a2[6];
        double v13 = a3[6];
        BOOL result = v12 == v13;
        if (v12 == v13) {
          BOOL result = a2[7] == a3[7];
        }
      }
    }
    if (result)
    {
      double v14 = a2[8];
      double v15 = a3[8];
      BOOL result = v14 == v15;
      if (v14 == v15)
      {
        double v16 = a2[9];
        double v17 = a3[9];
        BOOL result = v16 == v17;
        if (v16 == v17)
        {
          double v18 = a2[10];
          double v19 = a3[10];
          BOOL result = v18 == v19;
          if (v18 == v19) {
            return a2[11] == a3[11];
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_215B29898(uint64_t a1, float *a2, float *a3)
{
  BOOL result = *a2 == *a3;
  if (*a2 == *a3)
  {
    float v4 = a2[1];
    float v5 = a3[1];
    BOOL result = v4 == v5;
    if (v4 == v5) {
      BOOL result = a2[2] == a3[2];
    }
  }
  if (result)
  {
    float v6 = a2[3];
    float v7 = a3[3];
    BOOL result = v6 == v7;
    if (v6 == v7)
    {
      float v8 = a2[4];
      float v9 = a3[4];
      BOOL result = v8 == v9;
      if (v8 == v9) {
        return a2[5] == a3[5];
      }
    }
  }
  return result;
}

BOOL sub_215B29910(uint64_t a1, double *a2, double *a3)
{
  BOOL result = *a2 == *a3;
  if (*a2 == *a3)
  {
    double v4 = a2[1];
    double v5 = a3[1];
    BOOL result = v4 == v5;
    if (v4 == v5) {
      BOOL result = a2[2] == a3[2];
    }
  }
  if (result)
  {
    double v6 = a2[3];
    double v7 = a3[3];
    BOOL result = v6 == v7;
    if (v6 == v7)
    {
      double v8 = a2[4];
      double v9 = a3[4];
      BOOL result = v8 == v9;
      if (v8 == v9) {
        return a2[5] == a3[5];
      }
    }
  }
  return result;
}

uint64_t sub_215B29988(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v3 = (uint64_t)*a2;
  uint64_t v4 = (uint64_t)*a3;
  if (**a2 != **a3) {
    return 0;
  }
  uint64_t v7 = *(unsigned int *)(v3 + 104);
  int v8 = *(_DWORD *)(v4 + 104);
  BOOL v10 = v8 == v7 && v8 != -1;
  if (v7 != -1 && v10)
  {
    double v30 = &v29;
    if (((uint64_t (*)(char **, uint64_t, uint64_t))off_26C67B0F0[v7])(&v30, v3 + 8, v4 + 8)) {
      goto LABEL_19;
    }
    return 0;
  }
  BOOL v12 = v8 == -1;
  if (v7 != -1) {
    BOOL v12 = v10;
  }
  if (!v12) {
    return 0;
  }
LABEL_19:
  double v14 = a2[1];
  double v15 = a3[1];
  if (v14[24]) {
    BOOL v16 = v15[24] == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16) {
    return (v14[24] != 0) == (v15[24] != 0);
  }
  uint64_t v17 = v14[23];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v14[23];
  }
  else {
    uint64_t v18 = *((void *)v14 + 1);
  }
  uint64_t v19 = v15[23];
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *((void *)v15 + 1);
  }
  if (v18 != v19) {
    return 0;
  }
  if (v20 >= 0) {
    char v21 = a3[1];
  }
  else {
    char v21 = *(unsigned __int8 **)v15;
  }
  if ((v17 & 0x80) != 0) {
    return memcmp(*(const void **)v14, v21, *((void *)v14 + 1)) == 0;
  }
  if (!v14[23]) {
    return 1;
  }
  uint64_t v22 = v17 - 1;
  do
  {
    int v24 = *v14++;
    int v23 = v24;
    int v26 = *v21++;
    int v25 = v26;
    BOOL v28 = v22-- != 0;
    uint64_t result = v23 == v25;
  }
  while (v23 == v25 && v28);
  return result;
}

uint64_t sub_215B29B28(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v10 = a2;
  double v11 = "{";
  uint64_t v12 = a2;
  double v13 = "{";
  double v14 = "{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_6;
  }
  double v15 = &v10;
  ((void (*)(uint64_t **))off_26C67B158[v3])(&v15);
  sub_2157CFFD4((uint64_t)&v10, a2, a3);
  uint64_t v10 = a2;
  double v11 = ",";
  uint64_t v12 = a2;
  double v13 = ",";
  double v14 = ",";
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    goto LABEL_6;
  }
  double v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_26C67B158[v6])(&v15, a2);
  sub_2157CFFD4((uint64_t)&v10, a2, a3 + 1);
  uint64_t v10 = a2;
  double v11 = ",";
  uint64_t v12 = a2;
  double v13 = ",";
  double v14 = ",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_6;
  }
  double v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_26C67B158[v7])(&v15, a2);
  sub_2157CFFD4((uint64_t)&v10, a2, a3 + 2);
  uint64_t v10 = a2;
  double v11 = "}";
  uint64_t v12 = a2;
  double v13 = "}";
  double v14 = "}";
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
LABEL_6:
  }
    sub_215742D4C();
  double v15 = &v10;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C67B158[v8])(&v15, a2);
}

void sub_215B29C7C()
{
}

void sub_215B29D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    if (*(unsigned char *)(a10 + 408))
    {
      if (*(char *)(a10 + 407) < 0) {
        operator delete(*(void **)(a10 + 384));
      }
    }
    double v11 = sub_215956690((uint64_t *)a10);
    MEMORY[0x2166C4D20](v11, 0x10B2C40FBB7FC15);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B29D6C()
{
}

void sub_215B29E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  MEMORY[0x2166C4D20](v15, 0x10B2C40FBB7FC15);
  _Unwind_Resume(a1);
}

uint64_t sub_215B29E7C(float ***a1, float ***a2)
{
  long long v2 = *a1;
  uint64_t v3 = *a2;
  double v5 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v6 = **a2;
  if ((char *)v4 - (char *)v5 != (char *)(*a2)[1] - (char *)v6) {
    return 0;
  }
  if (v5 != v4)
  {
    while (*v5 == *v6 && v5[1] == v6[1] && v5[2] == v6[2])
    {
      v5 += 3;
      v6 += 3;
      if (v5 == v4) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  uint64_t v8 = v2[4];
  uint64_t v7 = v2[5];
  double v9 = v3[4];
  if ((char *)v7 - (char *)v8 != (char *)v3[5] - (char *)v9) {
    return 0;
  }
  if (v8 != v7)
  {
    while (*v8 == *v9 && v8[1] == v9[1] && v8[2] == v9[2])
    {
      v8 += 3;
      v9 += 3;
      if (v8 == v7) {
        goto LABEL_13;
      }
    }
    return 0;
  }
LABEL_13:
  if (*((_DWORD *)v2 + 16) != *((_DWORD *)v3 + 16)) {
    return 0;
  }
  double v11 = v2[9];
  uint64_t v10 = v2[10];
  uint64_t v12 = v3[9];
  if ((char *)v10 - (char *)v11 != (char *)v3[10] - (char *)v12) {
    return 0;
  }
  if (v11 != v10)
  {
    while (*v11 == *v12 && v11[1] == v12[1] && v11[2] == v12[2])
    {
      v11 += 3;
      v12 += 3;
      if (v11 == v10) {
        goto LABEL_20;
      }
    }
    return 0;
  }
LABEL_20:
  if (*((_DWORD *)v2 + 26) != *((_DWORD *)v3 + 26)) {
    return 0;
  }
  double v14 = v2[14];
  double v13 = v2[15];
  uint64_t v15 = (char *)v3[14];
  if ((char *)v13 - (char *)v14 != (char *)v3[15] - v15) {
    return 0;
  }
  if (v14 != v13)
  {
    while (*(_DWORD *)v14 == *(_DWORD *)v15
         && *((_DWORD *)v14 + 1) == *((_DWORD *)v15 + 1)
         && *((_DWORD *)v14 + 2) == *((_DWORD *)v15 + 2))
    {
      v14 += 3;
      v15 += 12;
      if (v14 == v13) {
        goto LABEL_27;
      }
    }
    return 0;
  }
LABEL_27:
  uint64_t v17 = v2[18];
  BOOL v16 = v2[19];
  uint64_t v18 = (char *)v3[18];
  if ((char *)v16 - (char *)v17 != (char *)v3[19] - v18) {
    return 0;
  }
  if (v17 != v16)
  {
    while (*(_DWORD *)v17 == *(_DWORD *)v18 && *((_DWORD *)v17 + 1) == *((_DWORD *)v18 + 1))
    {
      v17 += 2;
      v18 += 8;
      if (v17 == v16) {
        goto LABEL_35;
      }
    }
    return 0;
  }
LABEL_35:
  char v21 = v2[22];
  int v20 = v2[23];
  uint64_t v22 = v3[22];
  if ((char *)v20 - (char *)v21 != (char *)v3[23] - (char *)v22) {
    return 0;
  }
  if (v21 != v20)
  {
    while (*v21 == *v22 && v21[1] == v22[1])
    {
      v21 += 2;
      v22 += 2;
      if (v21 == v20) {
        goto LABEL_40;
      }
    }
    return 0;
  }
LABEL_40:
  double v51 = *a2;
  float64x2_t v52 = *a1;
  int v25 = v2 + 26;
  int v23 = v2[26];
  int v24 = v25[1];
  uint64_t v27 = v3 + 26;
  int v26 = v3[26];
  if ((char *)v24 - (char *)v23 != (char *)v27[1] - (char *)v26) {
    return 0;
  }
  if (v23 != v24)
  {
    while (*(_DWORD *)v23 == *(_DWORD *)v26
         && *((_DWORD *)v23 + 1) == *((_DWORD *)v26 + 1)
         && *((_DWORD *)v23 + 2) == *((_DWORD *)v26 + 2))
    {
      v23 += 3;
      v26 += 3;
      if (v23 == v24) {
        goto LABEL_46;
      }
    }
    return 0;
  }
LABEL_46:
  BOOL v28 = v52[30];
  size_t v29 = (char *)v52[31] - (char *)v28;
  double v30 = v51[30];
  if (v29 != (char *)v51[31] - (char *)v30) {
    return 0;
  }
  if (memcmp(v28, v30, v29)) {
    return 0;
  }
  if (*((_DWORD *)v52 + 68) != *((_DWORD *)v51 + 68)) {
    return 0;
  }
  uint64_t v31 = v52[35];
  size_t v32 = (char *)v52[36] - (char *)v31;
  float64x2_t v33 = v51[35];
  if (v32 != (char *)v51[36] - (char *)v33) {
    return 0;
  }
  if (memcmp(v31, v33, v32)) {
    return 0;
  }
  if (*((_DWORD *)v52 + 78) != *((_DWORD *)v51 + 78)) {
    return 0;
  }
  double v35 = v52[40];
  float32x2_t v34 = v52[41];
  double v36 = v51[40];
  if ((char *)v34 - (char *)v35 != (char *)v51[41] - (char *)v36) {
    return 0;
  }
  if (v35 != v34)
  {
    while (*v35 == *v36)
    {
      ++v35;
      ++v36;
      if (v35 == v34) {
        goto LABEL_56;
      }
    }
    return 0;
  }
LABEL_56:
  if (*((_DWORD *)v52 + 88) != *((_DWORD *)v51 + 88)) {
    return 0;
  }
  if (*((unsigned char *)v52 + 380) && *((unsigned char *)v51 + 380))
  {
    if (*((float *)v52 + 89) != *((float *)v51 + 89)
      || *((float *)v52 + 90) != *((float *)v51 + 90)
      || *((float *)v52 + 91) != *((float *)v51 + 91)
      || *((float *)v52 + 92) != *((float *)v51 + 92)
      || *((float *)v52 + 93) != *((float *)v51 + 93)
      || *((float *)v52 + 94) != *((float *)v51 + 94))
    {
      return 0;
    }
    goto LABEL_69;
  }
  if ((*((unsigned char *)v52 + 380) != 0) != (*((unsigned char *)v51 + 380) != 0)) {
    return 0;
  }
LABEL_69:
  uint64_t result = (*((unsigned char *)v52 + 408) != 0) == (*((unsigned char *)v51 + 408) != 0);
  if (*((unsigned char *)v52 + 408) && *((unsigned char *)v51 + 408))
  {
    uint64_t v38 = *((unsigned __int8 *)v52 + 407);
    if ((v38 & 0x80u) == 0) {
      double v39 = (float *)*((unsigned __int8 *)v52 + 407);
    }
    else {
      double v39 = v52[49];
    }
    char v40 = *((unsigned char *)v51 + 407);
    double v41 = v51[49];
    if (v40 >= 0) {
      double v41 = (float *)*((unsigned __int8 *)v51 + 407);
    }
    if (v39 != v41) {
      return 0;
    }
    double v42 = (const void **)(v52 + 48);
    if (v40 >= 0) {
      double v43 = (float *)(v51 + 48);
    }
    else {
      double v43 = v51[48];
    }
    if ((v38 & 0x80) != 0)
    {
      return memcmp(*v42, v43, (size_t)v52[49]) == 0;
    }
    else if (*((unsigned char *)v52 + 407))
    {
      uint64_t v44 = v38 - 1;
      do
      {
        int v46 = *(unsigned __int8 *)v42;
        double v42 = (const void **)((char *)v42 + 1);
        int v45 = v46;
        int v48 = *(unsigned __int8 *)v43;
        double v43 = (float *)((char *)v43 + 1);
        int v47 = v48;
        BOOL v50 = v44-- != 0;
        uint64_t result = v45 == v47;
      }
      while (v45 == v47 && v50);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_215B2A3C0(void *a1)
{
}

void sub_215B2A6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B2A70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x2166C4D20](v4, 0x10B2C40EED050F3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B2A738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B2A74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B2A760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a12);
    _Unwind_Resume(a1);
  }
  sub_215742CF0((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_215B2A7AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    int v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C67B170[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_215B2A83C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    unint64_t v3 = (unint64_t)(a1[2] - v2) >> 3;
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C67B180[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_215B2A8C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    unint64_t v3 = (unint64_t)(a1[2] - v2) >> 3;
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C67B190[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_215B2A944(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    int v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C67B1A0[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t sub_215B2A9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_215B2AECC((uint64_t *)a1, (uint64_t **)a2) + 4;
  sub_215B2AECC(v4, (uint64_t **)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  sub_215B2AECC((uint64_t *)(a1 + 72), (uint64_t **)(a2 + 72));
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  sub_215B2B080((uint64_t *)(a1 + 112), (uint64_t **)(a2 + 112));
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  uint64_t v5 = *(unsigned int *)(a2 + 172);
  if (v5 == -1) {
    sub_215742D4C();
  }
  v42[0] = &v43;
  unint64_t v6 = ((uint64_t (*)(void *, uint64_t))off_26C67B1F0[v5])(v42, a2 + 168);
  *(void *)(a1 + 168) = v6;
  *(void *)(a1 + 160) = 0;
  uint64_t v8 = *(char **)(a2 + 144);
  int v7 = *(char **)(a2 + 152);
  unint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if ((v9 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    int v40 = v9 >> 3;
    if (HIDWORD(v6) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    double v41 = &v40;
    uint64_t v10 = ((uint64_t (*)(int **, uint64_t))off_26C67B200[HIDWORD(v6)])(&v41, a1 + 168);
    *(void *)(a1 + 144) = v10;
    *(void *)(a1 + 152) = v10;
    *(void *)(a1 + 160) = v10 + 8 * v11;
    if (v9 - 8 < 0x18) {
      goto LABEL_10;
    }
    if ((unint64_t)(v10 - (void)v8) < 0x20) {
      goto LABEL_10;
    }
    unint64_t v12 = ((v9 - 8) >> 3) + 1;
    uint64_t v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
    double v14 = &v8[v13];
    uint64_t v15 = (void *)(v10 + v13);
    BOOL v16 = (_OWORD *)(v10 + 16);
    uint64_t v17 = (long long *)(v8 + 16);
    uint64_t v18 = v12 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v19 = *v17;
      *(v16 - 1) = *(v17 - 1);
      *BOOL v16 = v19;
      v16 += 2;
      v17 += 2;
      v18 -= 4;
    }
    while (v18);
    uint64_t v8 = v14;
    uint64_t v10 = (uint64_t)v15;
    if (v12 != (v12 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_10:
      uint64_t v15 = (void *)v10;
      do
      {
        uint64_t v20 = *(void *)v8;
        v8 += 8;
        *v15++ = v20;
      }
      while (v8 != v7);
    }
    *(void *)(a1 + 152) = v15;
  }
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  uint64_t v21 = *(unsigned int *)(a2 + 204);
  if (v21 == -1) {
    sub_215742D4C();
  }
  v42[0] = &v43;
  unint64_t v22 = ((uint64_t (*)(void *, uint64_t))off_26C67B210[v21])(v42, a2 + 200);
  *(void *)(a1 + 200) = v22;
  *(void *)(a1 + 192) = 0;
  int v24 = *(char **)(a2 + 176);
  int v23 = *(char **)(a2 + 184);
  unint64_t v25 = v23 - v24;
  if (v23 != v24)
  {
    if ((v25 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    int v40 = v25 >> 3;
    if (HIDWORD(v22) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    double v41 = &v40;
    uint64_t v26 = ((uint64_t (*)(int **, uint64_t))off_26C67B220[HIDWORD(v22)])(&v41, a1 + 200);
    *(void *)(a1 + 176) = v26;
    *(void *)(a1 + 184) = v26;
    *(void *)(a1 + 192) = v26 + 8 * v27;
    if (v25 - 8 < 0x18) {
      goto LABEL_22;
    }
    if ((unint64_t)(v26 - (void)v24) < 0x20) {
      goto LABEL_22;
    }
    unint64_t v28 = ((v25 - 8) >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    double v30 = &v24[v29];
    uint64_t v31 = (void *)(v26 + v29);
    size_t v32 = (_OWORD *)(v26 + 16);
    float64x2_t v33 = (long long *)(v24 + 16);
    uint64_t v34 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v35 = *v33;
      *(v32 - 1) = *(v33 - 1);
      *size_t v32 = v35;
      v32 += 2;
      v33 += 2;
      v34 -= 4;
    }
    while (v34);
    int v24 = v30;
    uint64_t v26 = (uint64_t)v31;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_22:
      uint64_t v31 = (void *)v26;
      do
      {
        uint64_t v36 = *(void *)v24;
        v24 += 8;
        *v31++ = v36;
      }
      while (v24 != v23);
    }
    *(void *)(a1 + 184) = v31;
  }
  sub_215B2B080((uint64_t *)(a1 + 208), (uint64_t **)(a2 + 208));
  sub_2159BADC8((void *)(a1 + 240), a2 + 240);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  sub_2159BADC8((void *)(a1 + 280), a2 + 280);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  sub_2159BB61C((void *)(a1 + 320), a2 + 320);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(unsigned char *)(a1 + 356) = 0;
  *(unsigned char *)(a1 + 380) = 0;
  if (*(unsigned char *)(a2 + 380))
  {
    uint64_t v37 = *(void *)(a2 + 356);
    *(_DWORD *)(a1 + 364) = *(_DWORD *)(a2 + 364);
    *(void *)(a1 + 356) = v37;
    uint64_t v38 = *(void *)(a2 + 368);
    *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
    *(void *)(a1 + 368) = v38;
    *(unsigned char *)(a1 + 380) = 1;
  }
  return a1;
}

void sub_215B2AD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  sub_2159A067C(v16);
  sub_2159A067C(v15);
  sub_215B2A7AC(v14);
  sub_215B2A83C(v13);
  sub_215B2A8C0(v12);
  sub_215B2A7AC(v11);
  sub_215B2A944(v10);
  sub_215B2A944(a9);
  sub_215B2A944(v9);
  _Unwind_Resume(a1);
}

void sub_215B2AD98()
{
}

void sub_215B2ADA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  sub_215B2A944(a9);
  sub_215B2A944(v9);
  _Unwind_Resume(a1);
}

void sub_215B2ADBC(_Unwind_Exception *a1)
{
  sub_215B2A944(v1);
  _Unwind_Resume(a1);
}

void sub_215B2ADD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v18 = *v16;
  if (*v16)
  {
    *(void *)(v14 + 184) = v18;
    unint64_t v19 = (unint64_t)(*(void *)(v14 + 192) - v18) >> 3;
    a12 = v18;
    a13 = v19;
    uint64_t v20 = *(unsigned int *)(v14 + 204);
    if (v20 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C67B180[v20])(&a14, v17);
  }
  sub_215B2A8C0(v15);
  JUMPOUT(0x215B2AEA4);
}

void sub_215B2AE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v20 = *v17;
  if (*v17)
  {
    *(void *)(v14 + 152) = v20;
    unint64_t v21 = (unint64_t)(*(void *)(v14 + 160) - v20) >> 3;
    a12 = v20;
    a13 = v21;
    uint64_t v22 = *(unsigned int *)(v14 + 172);
    if (v22 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C67B190[v22])(&a14, v18);
  }
  sub_215B2A7AC(v16);
  sub_215B2A944(v15);
  sub_215B2A944(a9);
  sub_215B2A944((uint64_t *)v14);
  _Unwind_Resume(a1);
}

uint64_t *sub_215B2AECC(uint64_t *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v2 = *((unsigned int *)a2 + 7);
  if (v2 == -1) {
    sub_215742D4C();
  }
  BOOL v16 = &v17;
  unint64_t v5 = ((uint64_t (*)(char **, uint64_t **))off_26C67B1B0[v2])(&v16, a2 + 3);
  a1[3] = v5;
  a1[2] = 0;
  int v7 = *a2;
  unint64_t v6 = a2[1];
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 2) >= 0x1555555555555556) {
      sub_215738AC0();
    }
    int v14 = -1431655765 * (((char *)v6 - (char *)v7) >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    uint64_t v15 = &v14;
    uint64_t v8 = ((uint64_t (*)(int **, uint64_t *))off_26C67B1C0[HIDWORD(v5)])(&v15, a1 + 3);
    uint64_t v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v8 + 12 * v10;
    uint64_t v11 = v8;
    do
    {
      uint64_t v12 = *v7;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v7 + 2);
      *(void *)uint64_t v11 = v12;
      v11 += 12;
      int v7 = (uint64_t *)((char *)v7 + 12);
      v9 += 12;
    }
    while (v7 != v6);
    a1[1] = v8 + v9;
  }
  return a1;
}

void sub_215B2AFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v17 = *(void *)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    int v18 = -1431655765 * ((unint64_t)(*(void *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    uint64_t v19 = *(unsigned int *)(v14 + 28);
    if (v19 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C67B1A0[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B2B070()
{
  return 0;
}

uint64_t sub_215B2B078()
{
  return 0x100000000;
}

uint64_t *sub_215B2B080(uint64_t *a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v2 = *((unsigned int *)a2 + 7);
  if (v2 == -1) {
    sub_215742D4C();
  }
  BOOL v16 = &v17;
  unint64_t v5 = ((uint64_t (*)(char **, uint64_t **))off_26C67B1D0[v2])(&v16, a2 + 3);
  a1[3] = v5;
  a1[2] = 0;
  int v7 = *a2;
  unint64_t v6 = a2[1];
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 2) >= 0x1555555555555556) {
      sub_215738AC0();
    }
    int v14 = -1431655765 * (((char *)v6 - (char *)v7) >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    uint64_t v15 = &v14;
    uint64_t v8 = ((uint64_t (*)(int **, uint64_t *))off_26C67B1E0[HIDWORD(v5)])(&v15, a1 + 3);
    uint64_t v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v8 + 12 * v10;
    uint64_t v11 = v8;
    do
    {
      uint64_t v12 = *v7;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v7 + 2);
      *(void *)uint64_t v11 = v12;
      v11 += 12;
      int v7 = (uint64_t *)((char *)v7 + 12);
      v9 += 12;
    }
    while (v7 != v6);
    a1[1] = v8 + v9;
  }
  return a1;
}

void sub_215B2B1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v17 = *(void *)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    int v18 = -1431655765 * ((unint64_t)(*(void *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    uint64_t v19 = *(unsigned int *)(v14 + 28);
    if (v19 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C67B170[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B2B224()
{
  return 0;
}

uint64_t sub_215B2B22C()
{
  return 0x100000000;
}

uint64_t sub_215B2B234()
{
  return 0;
}

uint64_t sub_215B2B23C()
{
  return 0x100000000;
}

void *sub_215B2B244(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_215B2B274(unsigned int **a1)
{
  uint64_t v1 = (**a1 + 511) & 0x1FFFFFE00;
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x263EF8960], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  return address;
}

uint64_t sub_215B2B2FC()
{
  return 0;
}

uint64_t sub_215B2B304()
{
  return 0x100000000;
}

void *sub_215B2B30C(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_215B2B33C(unsigned int **a1)
{
  uint64_t v1 = (**a1 + 511) & 0x1FFFFFE00;
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x263EF8960], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  return address;
}

void sub_215B2B3C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B2B400(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    if (*(unsigned char *)(v1 + 408) && *(char *)(v1 + 407) < 0) {
      operator delete(*(void **)(v1 + 384));
    }
    sub_215956690((uint64_t *)v1);
    JUMPOUT(0x2166C4D20);
  }
  return result;
}

uint64_t sub_215B2B470(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3viz7TriMesh7PrivateEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

BOOL sub_215B2B4E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v7 = v2;
    uint64_t v8 = v3;
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v7 = *a2;
    uint64_t v8 = 0;
  }
  BOOL v5 = sub_215AB69D4(v4, &v7);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v5;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return v5;
}

void sub_215B2B5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_215B2B604(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 64);
  std::mutex::lock((std::mutex *)(v3 + 32));
  uint64_t v4 = sub_215AB64CC(v3, a2);
  std::mutex::unlock((std::mutex *)(v3 + 32));
  return v4;
}

void sub_215B2B658(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2B66C(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_215B2B674(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_215B2B67C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 40);
  *a2 = *(void *)(result + 32);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_215B2B698@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 40);
  *a2 = *(void *)(result + 32);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

std::__shared_weak_count *sub_215B2B6B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(std::__shared_weak_count **)(a1 + 24);
  if (result && (uint64_t result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(void *)(a1 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

std::__shared_weak_count *sub_215B2B704@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(std::__shared_weak_count **)(a1 + 24);
  if (result && (uint64_t result = std::__shared_weak_count::lock(result)) != 0)
  {
    *a2 = *(void *)(a1 + 16);
    a2[1] = result;
  }
  else
  {
    *a2 = 0;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_215B2B754(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_215B2B75C(uint64_t a1)
{
  return a1 + 72;
}

void sub_215B2B764(uint64_t a1, void *a2)
{
}

void sub_215B2B76C(uint64_t a1, void *a2)
{
}

uint64_t sub_215B2B774(uint64_t a1, unint64_t a2)
{
  return sub_215AF4BA0(*(void *)(a1 + 32), a2);
}

uint64_t sub_215B2B77C(uint64_t a1, unint64_t a2)
{
  return sub_215AF4BA0(*(void *)(a1 + 24), a2);
}

uint64_t sub_215B2B784(uint64_t a1, unint64_t a2)
{
  return sub_215AF4C44(*(void *)(a1 + 32), a2);
}

uint64_t sub_215B2B78C(uint64_t a1, unint64_t a2)
{
  return sub_215AF4C44(*(void *)(a1 + 24), a2);
}

uint64_t **sub_215B2B794(uint64_t a1, char *a2, size_t a3)
{
  return sub_215AF5048(*(void *)(a1 + 32), a2, a3);
}

uint64_t **sub_215B2B79C(uint64_t a1, char *a2, size_t a3)
{
  return sub_215AF5048(*(void *)(a1 + 24), a2, a3);
}

unint64_t sub_215B2B7A4(uint64_t a1, const void *a2, size_t a3)
{
  return sub_215AF5110(*(void *)(a1 + 32), a2, a3);
}

unint64_t sub_215B2B7AC(uint64_t a1, const void *a2, size_t a3)
{
  return sub_215AF5110(*(void *)(a1 + 24), a2, a3);
}

uint64_t sub_215B2B7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  BOOL v5 = (std::mutex *)(v4 + 32);
  std::mutex::lock((std::mutex *)(v4 + 32));
  unint64_t v6 = *(void **)(v4 + 96);
  for (i = *(void **)(v4 + 104); v6 != i; v6 += 2)
    (*(void (**)(void, uint64_t))(*(void *)*v6 + 16))(*v6, a2);
  std::mutex::unlock(v5);
  return a1;
}

void sub_215B2B848(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B2B85C(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x88uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_26C67B548;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  *((void *)v4 + 3) = &unk_26C67B418;
  *((void *)v4 + 4) = &unk_26C67B4C0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *((void *)v4 + 9) = &unk_26C6777A0;
  *((void *)v4 + 10) = &unk_26C6777E0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_215AB66DC((uint64_t **)__p, (uint64_t *)&v9, (void *)v4 + 11);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  v4[104] = 0;
  v4[128] = 0;
  *a2 = v4 + 24;
  a2[1] = v4;
  BOOL v5 = operator new(0x28uLL);
  v5[1] = 0;
  v5[2] = 0;
  *BOOL v5 = &unk_26C674130;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  LOBYTE(__p[0]) = 0;
  char v8 = 0;
  if (*(unsigned char *)(a1 + 24))
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    uint64_t v7 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    char v8 = 1;
  }
  sub_215AF413C(v5 + 3);
}

void sub_215B2BBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if (!v16)
    {
LABEL_3:
      sub_215733368(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v16);
  sub_215733368(v15);
  _Unwind_Resume(a1);
}

void sub_215B2BC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (a15 && a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v21);
  sub_215733368(v18);
  _Unwind_Resume(a1);
}

void sub_215B2BC84(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215B2BC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    sub_215733368(v16);
    uint64_t v18 = (std::__shared_weak_count *)v15[2].__vftable;
    if (!v18)
    {
LABEL_3:
      std::__shared_weak_count::~__shared_weak_count(v15);
      operator delete(v19);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_215733368(v16);
    uint64_t v18 = (std::__shared_weak_count *)v15[2].__vftable;
    if (!v18) {
      goto LABEL_3;
    }
  }
  std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v20);
  _Unwind_Resume(a1);
}

void sub_215B2BCF4(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2BD08(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B2BD84(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_215B2BDF4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215B2BE80(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215B2BF0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v1 = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(void *)(v1 + 32);

  sub_215AF5508(v3, 2, 0);
}

uint64_t sub_215B2BF94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 104);

  return v3();
}

uint64_t sub_215B2C038(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 104);

  return v3();
}

BOOL sub_215B2C0DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *a2;
    BOOL v5 = (std::__shared_weak_count *)a2[1];
    uint64_t v10 = v5;
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v11 = 0;
    uint64_t v6 = *(void *)(v3 + 64);
    uint64_t v12 = v4;
    uint64_t v13 = 0;
    goto LABEL_7;
  }
  uint64_t v4 = *a2;
  BOOL v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = v5;
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v11 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  BOOL v8 = sub_215AB69D4(v6, &v12);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v8;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  return v8;
}

void sub_215B2C294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

uint64_t sub_215B2C2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v5 = *(void *)(v3 + 64);
  std::mutex::lock((std::mutex *)(v5 + 32));
  uint64_t v6 = sub_215AB64CC(v5, a2);
  std::mutex::unlock((std::mutex *)(v5 + 32));
  return v6;
}

void sub_215B2C35C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2C370(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return v1 + 48;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return *(void *)(a1 + 16) + 48;
}

uint64_t sub_215B2C3F0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return v1 + 48;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return *(void *)(a1 + 16) + 48;
}

uint64_t sub_215B2C470@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!v3)
  {
    uint64_t v4 = result;
    uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
    if (result) {
      abort();
    }
    uint64_t v3 = *(void *)(v4 + 16);
  }
  uint64_t v6 = *(void *)(v3 + 32);
  uint64_t v5 = *(void *)(v3 + 40);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_215B2C4F8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!v3)
  {
    uint64_t v4 = result;
    uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
    if (result) {
      abort();
    }
    uint64_t v3 = *(void *)(v4 + 16);
  }
  uint64_t v6 = *(void *)(v3 + 32);
  uint64_t v5 = *(void *)(v3 + 40);
  *a2 = v6;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

std::__shared_weak_count *sub_215B2C580@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result) {
      goto LABEL_8;
    }
  }
  else
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result) {
      goto LABEL_8;
    }
  }
  uint64_t result = std::__shared_weak_count::lock(result);
  if (result)
  {
    *a2 = *(void *)(v3 + 16);
    a2[1] = result;
    return result;
  }
LABEL_8:
  *a2 = 0;
  a2[1] = result;
  return result;
}

std::__shared_weak_count *sub_215B2C634@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result) {
      goto LABEL_8;
    }
  }
  else
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t result = *(std::__shared_weak_count **)(v3 + 24);
    if (!result) {
      goto LABEL_8;
    }
  }
  uint64_t result = std::__shared_weak_count::lock(result);
  if (result)
  {
    *a2 = *(void *)(v3 + 16);
    a2[1] = result;
    return result;
  }
LABEL_8:
  *a2 = 0;
  a2[1] = result;
  return result;
}

void sub_215B2C6E8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v5 = *(void *)(v3 + 64);
  std::mutex::lock((std::mutex *)(v5 + 32));
  sub_215AB71A8(a2, (uint64_t *)(v5 + 96));

  std::mutex::unlock((std::mutex *)(v5 + 32));
}

void sub_215B2C790(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2C7A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 112);

  return v3();
}

uint64_t sub_215B2C840(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 112);

  return v3();
}

uint64_t sub_215B2C8DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 120);

  return v3();
}

uint64_t sub_215B2C980(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 120);

  return v3();
}

uint64_t sub_215B2CA24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 128);

  return v3();
}

uint64_t sub_215B2CAC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 128);

  return v3();
}

uint64_t **sub_215B2CB6C(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v7 = *(void *)(v5 + 32);

  return sub_215AF5048(v7, a2, a3);
}

uint64_t **sub_215B2CC04(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  uint64_t v7 = *(void *)(v5 + 32);

  return sub_215AF5048(v7, a2, a3);
}

unint64_t sub_215B2CC9C(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v7 = *(void *)(v5 + 32);

  return sub_215AF5110(v7, a2, a3);
}

unint64_t sub_215B2CD34(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  uint64_t v7 = *(void *)(v5 + 32);

  return sub_215AF5110(v7, a2, a3);
}

uint64_t sub_215B2CDCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v1 = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(v1 + 32) + 64);

  return v3();
}

uint64_t sub_215B2CE84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v1 = *(void *)(a1 + 8);
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(v1 + 32) + 64);

  return v3();
}

uint64_t sub_215B2CF3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v4 = *(void *)(a1 + 16);
  }
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = (std::mutex *)(v5 + 32);
  std::mutex::lock((std::mutex *)(v5 + 32));
  uint64_t v7 = *(void **)(v5 + 96);
  for (i = *(void **)(v5 + 104); v7 != i; v7 += 2)
    (*(void (**)(void, uint64_t))(*(void *)*v7 + 16))(*v7, a2);
  std::mutex::unlock(v6);
  return a1;
}

void sub_215B2D01C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B2D030(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v5 = *(void *)(v3 + 64);
  std::mutex::lock((std::mutex *)(v5 + 32));
  sub_215AB71A8(&v41, (uint64_t *)(v5 + 96));
  std::mutex::unlock((std::mutex *)(v5 + 32));
  uint64_t v6 = v41;
  uint64_t v7 = v42;
  if (v41 == v42)
  {
    int v10 = 1;
    if (v41) {
      goto LABEL_42;
    }
    goto LABEL_50;
  }
  while (1)
  {
    if (*(void *)v6)
    {
      BOOL v8 = __dynamic_cast(*(const void **)v6, (const struct __class_type_info *)&unk_26C678E58, (const struct __class_type_info *)&unk_26C678B50, -2);
      if (v8) {
        break;
      }
    }
LABEL_6:
    v6 += 16;
    if (v6 == v7)
    {
      int v10 = 1;
      goto LABEL_41;
    }
  }
  double v39 = v8;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v6 + 1);
  int v40 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v8 + 40))(&v28);
  if (v38)
  {
    if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_6;
  }
  long long v17 = v28;
  uint64_t v11 = sub_215741BFC(&__p, &v29);
  *(_OWORD *)a2 = v17;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  if (v27)
  {
    *(unsigned char *)(a2 + 40) = 0;
    int v12 = v20;
    if (v20)
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)v11;
      *(void *)(a2 + 32) = *((void *)v11 + 2);
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      *(void *)uint64_t v11 = 0;
      *(unsigned char *)(a2 + 40) = 1;
    }
    *(unsigned char *)(a2 + 48) = 0;
    *(unsigned char *)(a2 + 104) = 0;
    if (v26)
    {
      uint64_t v13 = v23;
      *(void *)(a2 + 64) = v22;
      *(_OWORD *)(a2 + 48) = v21;
      long long v21 = 0uLL;
      *(void *)(a2 + 72) = v13;
      *(_OWORD *)(a2 + 80) = v24;
      *(void *)(a2 + 96) = v25;
      uint64_t v22 = 0;
      long long v24 = 0uLL;
      uint64_t v25 = 0;
      *(unsigned char *)(a2 + 104) = 1;
    }
    *(unsigned char *)(a2 + 112) = 1;
    *(unsigned char *)(a2 + 120) = 0;
    if (v12 && v19 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    *(unsigned char *)(a2 + 120) = 0;
  }
  if (!v38 && v37)
  {
    if (v36)
    {
      if (v35 < 0) {
        operator delete(v34);
      }
      if (v33 < 0) {
        operator delete(v32);
      }
    }
    if (v31 && v30 < 0) {
      operator delete((void *)v29);
    }
  }
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  int v10 = 0;
LABEL_41:
  uint64_t v6 = v41;
  if (v41)
  {
LABEL_42:
    uint64_t v14 = v42;
    uint64_t v15 = v6;
    if (v42 != v6)
    {
      do
      {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)v14 - 1);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v6);
      uint64_t v15 = v41;
    }
    double v42 = v6;
    operator delete(v15);
  }
LABEL_50:
  if (v10) {
    *(unsigned char *)(a2 + 120) = 1;
  }
}

void sub_215B2D404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_2157407D4((uint64_t)va);
  sub_215733368(v16 - 120);
  sub_2157361F0((void **)(v16 - 104));
  _Unwind_Resume(a1);
}

void sub_215B2D428(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B2D43C(_Unwind_Exception *a1)
{
  sub_215733368(v1 - 120);
  sub_2157361F0((void **)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_215B2D45C(uint64_t a1)
{
  sub_215B2D574(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B2D494(uint64_t a1)
{
  return sub_215B2D574(a1 - 8);
}

void sub_215B2D49C(uint64_t a1)
{
  sub_215B2D574(a1 - 8);

  JUMPOUT(0x2166C4D20);
}

void sub_215B2D4D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C67B548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215B2D4F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C67B548;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B2D54C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_215B2D574(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B418;
  *(void *)(a1 + 8) = &unk_26C67B4C0;
  if (*(unsigned char *)(a1 + 104) && *(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v2) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v2) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_7:
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (!v4) {
      return a1;
    }
    goto LABEL_10;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4) {
LABEL_10:
  }
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t sub_215B2D6A0@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3) {
    BOOL v4 = a3[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, (uint64_t)a3, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B2D9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B2DA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_215B2DA34(int a1, uint64_t a2, double result)
{
  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24)) {
        goto LABEL_14;
      }
      sub_215B61968(v5, a2);
      sub_215B2DBE8(&v7, (uint64_t)v5);
      double v4 = *(double *)&v8;
      sub_215B61CEC(v5);
      goto LABEL_4;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1) {
        goto LABEL_14;
      }
      goto LABEL_9;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2) {
        goto LABEL_14;
      }
LABEL_9:
      sub_215B2DBE8(&v7, a2);
      uint64_t result = *(double *)&v8;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3) {
LABEL_14:
      }
        sub_215742D4C();
      sub_215B2DD60((uint64_t *)a2, v5);
      sub_215B2DBE8(&v7, (uint64_t)v5);
      uint64_t result = *(double *)&v8;
      v5[0] = &off_26C67D770;
      uint64_t v3 = v6;
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        double v4 = result;
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
LABEL_4:
        uint64_t result = v4;
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_215B2DBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B2DBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_215B2DBE8(uint64_t *a1, uint64_t a2)
{
  double v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a2, 0);
  unsigned int v8 = sub_215B63D78(a2);
  unsigned int v9 = sub_215B63EFC(a2);
  size_t result = sub_215B64080(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  *a1 = v7;
  a1[1] = v14;
  a1[2] = (result << 32) | 1;
  if (HIDWORD(v14) * result == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B2DD60(uint64_t *a1@<X0>, void *a2@<X8>)
{
  double v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a1) == 0)
  {
LABEL_6:
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a2 = &off_26C67D770;
  a2[1] = v7;
  a2[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a2[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B2DEDC(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2DEF0(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, char a5)
{
  int v6 = a2;
  char v14 = a5;
  *(void *)a1 = &unk_26C67B598;
  *(_DWORD *)(a1 + 8) = a2;
  uint64_t v8 = a1 + 16;
  sub_215B2D6A0(a2, a3, a4, a1 + 16);
  if (*a4) {
    BOOL v10 = a4[1] == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  }
  else
  {
    sub_215B2DA34(v6, v8, v9);
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v12;
  }
  if (!sub_215B2E9E8(a1))
  {
    sub_215B2EC30(a1, v16);
    sub_215B2ED6C(a1, v15);
    v17[0] = v15;
    v17[1] = &v14;
    sub_215B597A0(v17);
    sub_215B621C0(v16);
  }
  return a1;
}

void sub_215B2DFD8(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B2DFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215B621C0((uint64_t *)va);
  sub_215B2E01C(v6);
  _Unwind_Resume(a1);
}

void sub_215B2E008(_Unwind_Exception *a1)
{
  sub_215B2E01C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2E01C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B598;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B2E094(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_215B2E0F0(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(void *)a1 = &unk_26C67B598;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B2D6A0(0, 1, a2, a1 + 16);
  if (*a2) {
    BOOL v7 = a2[1] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v14, v6);
    sub_215B2DBE8(v15, (uint64_t)v14);
    uint64_t v8 = v15[1];
    uint64_t v9 = v15[2];
    sub_215B61CEC(v14);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
  }
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  if (!sub_215B2E9E8(a1))
  {
    sub_215B2EC30(a1, v15);
    sub_215B2ED6C(a1, v14);
    v13[0] = (size_t)&v11;
    v13[1] = (size_t)v14;
    sub_21584F0C8(v13);
    sub_215B621C0(v15);
  }
  return a1;
}

void sub_215B2E20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v7);
  _Unwind_Resume(a1);
}

void sub_215B2E228(_Unwind_Exception *a1)
{
  sub_215B621C0((void *)(v2 - 56));
  sub_215B2E01C(v1);
  _Unwind_Resume(a1);
}

void sub_215B2E244(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B2E258(_Unwind_Exception *a1)
{
  sub_215B2E01C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2E26C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67B598;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  BOOL v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  *(void *)(a1 + 48) = v13 | ((unint64_t)v14 << 32);
  *(void *)(a1 + 56) = (v15 << 32) | 1;
  uint64_t v16 = *(void *)(a2 + 8);
  if (!v16)
  {
    uint64_t v20 = 0;
    goto LABEL_26;
  }
  long long v17 = *(std::__shared_weak_count **)(v16 + 8);
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      uint64_t v18 = *(uint64_t **)(a2 + 8);
      if (v18) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v20 = 0;
      if (!*(_DWORD *)(a1 + 48)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v20 == 0) == (*(_DWORD *)(a1 + 52) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  uint64_t v18 = *(uint64_t **)(a2 + 8);
  if (!v18) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v20 = *v18;
  char v19 = (std::__shared_weak_count *)v18[1];
  if (!v19
    || (atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 48)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (*(_DWORD *)(a1 + 48)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v20) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B2E598(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B2E5B4(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      BOOL v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        uint64_t v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            BOOL v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      BOOL v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B2E854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B2E878(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B2E9E8(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      BOOL v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          BOOL v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      BOOL v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B2EC30(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_215B61F80(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3) {
      sub_215742D4C();
    }
    sub_215B2DD60((uint64_t *)(a1 + 16), v6);
    sub_215B61E3C(a2, (uint64_t)v6);
    v6[0] = &off_26C67D770;
    uint64_t v5 = v7;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    sub_215B61E3C(a2, v3);
  }
}

void sub_215B2ED58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B2ED6C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (sub_215B2E9E8(a1))
  {
    if (*(_DWORD *)(a1 + 52)) {
      BOOL v4 = *(_DWORD *)(a1 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a2 = 0;
    a2[1] = v5;
    a2[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
        unsigned int v14 = &off_26C67D770;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        BOOL v10 = *(std::__shared_weak_count **)(a1 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a1 + 16);
            if (v13)
            {
              unsigned int v14 = &off_26C67D770;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unsigned int v14 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B2DBE8(a2, (uint64_t)&v14);
        unsigned int v14 = &off_26C67D770;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B2EFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B2F000(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B2DD60(v4, v7);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B2F12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2F140@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v5 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, v4, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B2F490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B2F4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_215B2F4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a2, 0);
  unsigned int v8 = sub_215B63D78(a2);
  unsigned int v9 = sub_215B63EFC(a2);
  size_t result = sub_215B64080(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  HIDWORD(v15) = v14;
  LODWORD(v15) = 2;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 16) = HIDWORD(v14);
  *(void *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = result;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = (result << 32) | 2;
  if (HIDWORD(v14) * result == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B2F6C4(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &off_26C67D770;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B2F840(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

void *sub_215B2F854(uint64_t a1, unsigned char *a2)
{
  size_t result = (void *)sub_215B303A4(a1);
  if ((result & 1) == 0)
  {
    sub_215B305EC(v21, a1);
    sub_215B30728((uint64_t)&v14, a1);
    v22[0] = &v14;
    v22[1] = a2;
    if (v18 == 1)
    {
      sub_215B5993C(v22);
    }
    else if (v15 && v16 && v17)
    {
      int v5 = v16 - 1;
      uint64_t v6 = v19;
      uint64_t v7 = v14;
      int v8 = v17 - 1;
      if (v17 != 1)
      {
        uint64_t v9 = v20;
        if (v16 == 1)
        {
          do
          {
            *uint64_t v7 = *a2;
            v7[1] = *a2;
            v7 += v9;
            --v8;
          }
          while (v8);
        }
        else
        {
          int v10 = 0;
          uint64_t v11 = v14 + 1;
          do
          {
            unint64_t v12 = v11;
            int v13 = v5;
            do
            {
              *(v12 - 1) = *a2;
              *unint64_t v12 = *a2;
              v12 += v6;
              --v13;
            }
            while (v13);
            *(v12 - 1) = *a2;
            *unint64_t v12 = *a2;
            v7 += v9;
            ++v10;
            v11 += v9;
          }
          while (v10 != v8);
        }
      }
      for (; v5; --v5)
      {
        *uint64_t v7 = *a2;
        v7[1] = *a2;
        v7 += v6;
      }
      *uint64_t v7 = *a2;
      v7[1] = *a2;
    }
    return sub_215B621C0(v21);
  }
  return result;
}

void sub_215B2F9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2F9B8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B628;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B2FA30(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)a1 = &unk_26C67B628;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B2F140(0, 5, a2, a1 + 16);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v16, v6);
    sub_215B2F4D4((uint64_t)v17, (uint64_t)v16);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_215B61CEC(v16);
  }
  long long v12 = a3[1];
  v14[0] = *a3;
  v14[1] = v12;
  v14[2] = a3[2];
  if (!sub_215B303A4(a1))
  {
    sub_215B305EC(v16, a1);
    sub_215B30728((uint64_t)v17, a1);
    v15[0] = (size_t)v14;
    v15[1] = (size_t)v17;
    sub_2158A24F4(v15);
    sub_215B621C0(v16);
  }
  return a1;
}

void sub_215B2FB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v10);
  _Unwind_Resume(a1);
}

void sub_215B2FB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215B621C0((uint64_t *)va);
  sub_215B2F9B8(v10);
  _Unwind_Resume(a1);
}

void sub_215B2FBA0(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B2FBB4(_Unwind_Exception *a1)
{
  sub_215B2F9B8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B2FBC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67B628;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  int v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 2;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x200000001;
  *(_DWORD *)(a1 + 68) = v15;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = (v15 << 32) | 2;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  long long v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      long long v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  long long v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B2FF54(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B2FF70(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B30210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B30234(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B303A4(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B305EC(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_215B61F80(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_215742D4C();
    }
    sub_215B2F6C4(v7, v4);
    sub_215B61E3C(a1, (uint64_t)v7);
    v7[0] = &off_26C67D770;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_215B61E3C(a1, (uint64_t)v4);
  }
}

void sub_215B30714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B30728(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B303A4(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        unsigned int v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          size_t v15 = std::__shared_weak_count::lock(v14);
          unint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B2F4D4(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        unsigned int v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B309BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B309E0(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B2F6C4(v7, v4);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B30B08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B30B1C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v5 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, v4, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B30E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B30E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_215B30EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a1, 0);
  unsigned int v8 = sub_215B63D78(a1);
  unsigned int v9 = sub_215B63EFC(a1);
  size_t result = sub_215B64080(a1);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  HIDWORD(v15) = v14;
  LODWORD(v15) = 3;
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v15;
  *(_DWORD *)(a2 + 16) = HIDWORD(v14);
  *(void *)(a2 + 20) = 0x300000001;
  *(_DWORD *)(a2 + 28) = result;
  *(void *)(a2 + 32) = v14;
  *(void *)(a2 + 40) = (result << 32) | 3;
  if (HIDWORD(v14) * result == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B310A0(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &off_26C67D770;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B3121C(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

void *sub_215B31230(uint64_t a1, unsigned char *a2)
{
  size_t result = (void *)sub_215B31EE0(a1);
  if ((result & 1) == 0)
  {
    sub_215B32128(v21, a1);
    sub_215B32264((uint64_t)&v14, a1);
    v22[0] = &v14;
    v22[1] = a2;
    if (v18 == 1)
    {
      sub_215B5993C(v22);
    }
    else if (v15 && v16 && v17)
    {
      int v5 = v16 - 1;
      uint64_t v6 = v19;
      uint64_t v7 = v14;
      int v8 = v17 - 1;
      if (v17 != 1)
      {
        uint64_t v9 = v20;
        if (v16 == 1)
        {
          do
          {
            *uint64_t v7 = *a2;
            v7[1] = *a2;
            void v7[2] = *a2;
            v7 += v9;
            --v8;
          }
          while (v8);
        }
        else
        {
          int v10 = 0;
          uint64_t v11 = v14 + 2;
          do
          {
            unint64_t v12 = v11;
            int v13 = v5;
            do
            {
              *(v12 - 2) = *a2;
              *(v12 - 1) = *a2;
              *unint64_t v12 = *a2;
              v12 += v6;
              --v13;
            }
            while (v13);
            *(v12 - 2) = *a2;
            *(v12 - 1) = *a2;
            *unint64_t v12 = *a2;
            v7 += v9;
            ++v10;
            v11 += v9;
          }
          while (v10 != v8);
        }
      }
      for (; v5; --v5)
      {
        *uint64_t v7 = *a2;
        v7[1] = *a2;
        void v7[2] = *a2;
        v7 += v6;
      }
      *uint64_t v7 = *a2;
      v7[1] = *a2;
      void v7[2] = *a2;
    }
    return sub_215B621C0(v21);
  }
  return result;
}

void sub_215B313A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B313BC(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B6B8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B31434(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26C67B6B8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B30B1C(0, 21, a2, a1 + 16);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    uint64_t v11 = sub_215B61968(v36, v6);
    sub_215B30EB0((uint64_t)v11, (uint64_t)&v32);
    long long v12 = v34;
    *uint64_t v7 = v33;
    *(_OWORD *)(a1 + 64) = v12;
    *(void *)(a1 + 80) = v35;
    sub_215B61CEC(v36);
  }
  long long v13 = a3[1];
  long long v29 = *a3;
  long long v30 = v13;
  long long v31 = a3[2];
  if (!sub_215B31EE0(a1))
  {
    sub_215B32128(v36, a1);
    sub_215B32264((uint64_t)&v32, a1);
    v37[0] = (size_t)&v29;
    v37[1] = (size_t)&v32;
    if (DWORD1(v30) == 1 && HIDWORD(v33) == 1)
    {
      sub_2158A2610(v37);
    }
    else if (DWORD2(v29) && HIDWORD(v29) && v30)
    {
      int v14 = HIDWORD(v29) - 1;
      uint64_t v15 = DWORD2(v30);
      uint64_t v16 = v34;
      int v17 = (unsigned char *)v29;
      int v18 = v32;
      int v19 = v30 - 1;
      if (v30 != 1)
      {
        uint64_t v20 = DWORD1(v34);
        uint64_t v21 = HIDWORD(v30);
        if (HIDWORD(v29) == 1)
        {
          do
          {
            *int v18 = *v17;
            v18[1] = v17[1];
            v18[2] = v17[2];
            v17 += v21;
            v18 += v20;
            --v19;
          }
          while (v19);
        }
        else
        {
          int v22 = 0;
          uint64_t v23 = v32 + 2;
          long long v24 = (unsigned char *)(v29 + 2);
          do
          {
            uint64_t v25 = v24;
            char v26 = v23;
            int v27 = v14;
            do
            {
              *(v26 - 2) = *(v25 - 2);
              *(v26 - 1) = *(v25 - 1);
              *char v26 = *v25;
              v26 += v16;
              v25 += v15;
              --v27;
            }
            while (v27);
            *(v26 - 2) = *(v25 - 2);
            *(v26 - 1) = *(v25 - 1);
            *char v26 = *v25;
            v17 += v21;
            v18 += v20;
            ++v22;
            v23 += v20;
            v24 += v21;
          }
          while (v22 != v19);
        }
      }
      for (; v14; --v14)
      {
        *int v18 = *v17;
        v18[1] = v17[1];
        v18[2] = v17[2];
        v17 += v15;
        v18 += v16;
      }
      *int v18 = *v17;
      v18[1] = v17[1];
      v18[2] = v17[2];
    }
    sub_215B621C0(v36);
  }
  return a1;
}

void sub_215B316A4(_Unwind_Exception *a1)
{
  sub_215B61CEC((void *)(v2 - 88));
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B316C0(_Unwind_Exception *a1)
{
  sub_215B621C0((void *)(v2 - 88));
  sub_215B313BC(v1);
  _Unwind_Resume(a1);
}

void sub_215B316DC(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B316F0(_Unwind_Exception *a1)
{
  sub_215B313BC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B31704(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67B6B8;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  int v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  long long v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    uint64_t v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 3;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x300000001;
  *(_DWORD *)(a1 + 68) = v15;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = (v15 << 32) | 3;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  int v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      int v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  int v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B31A90(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B31AAC(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        int v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B31D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B31D70(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B31EE0(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B32128(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_215B61F80(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_215742D4C();
    }
    sub_215B310A0(v7, v4);
    sub_215B61E3C(a1, (uint64_t)v7);
    v7[0] = &off_26C67D770;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_215B61E3C(a1, (uint64_t)v4);
  }
}

void sub_215B32250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B32264(uint64_t a1, uint64_t a2)
{
  if (sub_215B31EE0(a2))
  {
    sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        uint64_t v4 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v11 = &off_26C67D770;
        uint64_t v12 = v5;
        unsigned int v13 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          int v8 = std::__shared_weak_count::lock(v7);
          uint64_t v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              uint64_t v11 = &off_26C67D770;
              uint64_t v12 = v10;
              unsigned int v13 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v12 = 0;
        unsigned int v13 = 0;
        uint64_t v11 = &off_26C67D770;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_215B30EB0((uint64_t)&v11, a1);
        uint64_t v11 = &off_26C67D770;
        uint64_t v6 = v13;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B32484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B324A8(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B310A0(v7, v4);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B325D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B325E4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v5 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, v4, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B32934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3294C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_215B32978(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a2, 0);
  unsigned int v8 = sub_215B63D78(a2);
  unsigned int v9 = sub_215B63EFC(a2);
  size_t result = sub_215B64080(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  HIDWORD(v15) = v14;
  LODWORD(v15) = 4;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 16) = HIDWORD(v14);
  *(void *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = result;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = (result << 32) | 4;
  if (HIDWORD(v14) * result == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B32B68(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &off_26C67D770;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B32CE4(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

void *sub_215B32CF8(uint64_t a1, uint64_t a2)
{
  size_t result = (void *)sub_215B33814(a1);
  if ((result & 1) == 0)
  {
    sub_215B33A5C(v12, a1);
    sub_215B33B98((uint64_t)&v5, a1);
    v13[0] = &v5;
    v13[1] = a2;
    if (v9 == 1)
    {
      sub_215B5993C(v13);
    }
    else
    {
      uint64_t v14 = a2;
      if (v6 && v7)
      {
        if (v8)
        {
          uint64_t v15 = &v14;
          v16[0] = 0;
          v16[1] = v6 - 1;
          v16[2] = v9;
          void v16[3] = v7 - 1;
          v16[4] = v10;
          v16[5] = v8 - 1;
          v16[6] = v11;
          v17[0] = 0;
          v17[1] = 0;
          sub_215B59C20(v16, (uint64_t)v17, (unsigned char ***)&v15, v5);
        }
      }
    }
    return sub_215B621C0(v12);
  }
  return result;
}

void sub_215B32DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B32DE4(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B748;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B32E5C(uint64_t a1, int a2, uint64_t a3, long long *a4)
{
  *(void *)a1 = &unk_26C67B748;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v7 = a1 + 16;
  sub_215B325E4(0, a2, a3, a1 + 16);
  int v8 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v9 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    long long v10 = *(_OWORD *)a3;
    long long v11 = *(_OWORD *)(a3 + 16);
    *(void *)(a1 + 80) = *(void *)(a3 + 32);
    *int v8 = v10;
    *(_OWORD *)(a1 + 64) = v11;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v22, v7);
    sub_215B32978((uint64_t)v18, (uint64_t)v22);
    long long v12 = v20;
    *int v8 = v19;
    *(_OWORD *)(a1 + 64) = v12;
    *(void *)(a1 + 80) = v21;
    sub_215B61CEC(v22);
  }
  long long v13 = a4[1];
  long long v15 = *a4;
  long long v16 = v13;
  long long v17 = a4[2];
  if (!sub_215B33814(a1))
  {
    sub_215B33A5C(v22, a1);
    sub_215B33B98((uint64_t)v18, a1);
    v23[0] = (size_t)&v15;
    v23[1] = (size_t)v18;
    if (DWORD1(v16) == 1 && HIDWORD(v19) == 1)
    {
      sub_2158A2610(v23);
    }
    else
    {
      char v24 = 0;
      if (DWORD2(v15) && HIDWORD(v15) && v16)
      {
        uint64_t v25 = &v24;
        sub_2158A6EF0((uint64_t)&v25, (uint64_t)&v15, (uint64_t)v18);
      }
    }
    sub_215B621C0(v22);
  }
  return a1;
}

void sub_215B32FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v14);
  _Unwind_Resume(a1);
}

void sub_215B32FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B621C0((uint64_t *)va);
  sub_215B32DE4(v14);
  _Unwind_Resume(a1);
}

void sub_215B33010(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B33024(_Unwind_Exception *a1)
{
  sub_215B32DE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B33038(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67B748;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  BOOL v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  long long v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 4;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x400000001;
  *(_DWORD *)(a1 + 68) = v15;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = (v15 << 32) | 4;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  int v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      long long v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  long long v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  long long v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B333C4(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B333E0(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        BOOL v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B33680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B336A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B33814(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B33A5C(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_215B61F80(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_215742D4C();
    }
    sub_215B32B68(v7, v4);
    sub_215B61E3C(a1, (uint64_t)v7);
    v7[0] = &off_26C67D770;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_215B61E3C(a1, (uint64_t)v4);
  }
}

void sub_215B33B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B33B98(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B33814(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        unsigned int v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          size_t v15 = std::__shared_weak_count::lock(v14);
          unint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B32978(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        unsigned int v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B33E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B33E50(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B32B68(v7, v4);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B33F78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B33F8C@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3) {
    BOOL v4 = a3[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, (uint64_t)a3, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B342DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B342F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_215B34320(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a2, 0);
  unsigned int v8 = sub_215B63D78(a2);
  unsigned int v9 = sub_215B63EFC(a2);
  size_t result = sub_215B64080(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  *a1 = v7;
  a1[1] = v14;
  a1[2] = ((unint64_t)(result >> 1) << 32) | 1;
  if (HIDWORD(v14) * (result >> 1) == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B3449C(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &off_26C67D770;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B34618(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

void *sub_215B3462C(uint64_t a1, _WORD *a2)
{
  size_t result = (void *)sub_215B350D0(a1);
  if ((result & 1) == 0)
  {
    sub_215B35318(v20, a1);
    sub_215B35454((uint64_t *)&v15, a1);
    v21[0] = &v15;
    v21[1] = a2;
    uint64_t v5 = v18;
    if (v18 == 1)
    {
      sub_215B59DDC((uint64_t)v21);
      return sub_215B621C0(v20);
    }
    if (!v16 || !v17) {
      return sub_215B621C0(v20);
    }
    int v6 = v16 - 1;
    uint64_t v7 = v15;
    int v8 = v17 - 1;
    if (v17 != 1)
    {
      uint64_t v9 = v19;
      if (v16 == 1)
      {
        do
        {
          *uint64_t v7 = *a2;
          v7 += v9;
          --v8;
        }
        while (v8);
LABEL_17:
        *uint64_t v7 = *a2;
        return sub_215B621C0(v20);
      }
      int v10 = 0;
      uint64_t v11 = 2 * v19;
      do
      {
        unint64_t v12 = v7;
        int v13 = v6;
        do
        {
          *unint64_t v12 = *a2;
          v12 += v5;
          --v13;
        }
        while (v13);
        *unint64_t v12 = *a2;
        uint64_t v7 = (_WORD *)((char *)v7 + v11);
        ++v10;
      }
      while (v10 != v8);
    }
    if (v6)
    {
      uint64_t v14 = 2 * v5;
      do
      {
        *uint64_t v7 = *a2;
        uint64_t v7 = (_WORD *)((char *)v7 + v14);
        --v6;
      }
      while (v6);
    }
    goto LABEL_17;
  }
  return result;
}

void sub_215B34750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B34764(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B7D8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B347DC(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(void *)a1 = &unk_26C67B7D8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B33F8C(0, 2, a2, a1 + 16);
  if (*a2) {
    BOOL v7 = a2[1] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B34320(v14, (uint64_t)v13);
    uint64_t v8 = v14[1];
    uint64_t v9 = v14[2];
    sub_215B61CEC(v13);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
  }
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  if (!sub_215B350D0(a1))
  {
    sub_215B35318(v14, a1);
    sub_215B35454(v13, a1);
    sub_21584FC70((uint64_t *)&v11, (uint64_t)v13);
    sub_215B621C0(v14);
  }
  return a1;
}

void sub_215B348F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v5);
  _Unwind_Resume(a1);
}

void sub_215B3490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B621C0((uint64_t *)va);
  sub_215B34764(v8);
  _Unwind_Resume(a1);
}

void sub_215B34928(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3493C(_Unwind_Exception *a1)
{
  sub_215B34764(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B34950(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67B7D8;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  int v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  *(void *)(a1 + 48) = v13 | ((unint64_t)v14 << 32);
  *(void *)(a1 + 56) = ((unint64_t)(v15 >> 1) << 32) | 1;
  uint64_t v16 = *(void *)(a2 + 8);
  if (!v16)
  {
    uint64_t v20 = 0;
    goto LABEL_26;
  }
  int v17 = *(std::__shared_weak_count **)(v16 + 8);
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      unsigned int v18 = *(uint64_t **)(a2 + 8);
      if (v18) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v20 = 0;
      if (!*(_DWORD *)(a1 + 48)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v20 == 0) == (*(_DWORD *)(a1 + 52) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  unsigned int v18 = *(uint64_t **)(a2 + 8);
  if (!v18) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v20 = *v18;
  unsigned int v19 = (std::__shared_weak_count *)v18[1];
  if (!v19
    || (atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 48)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (*(_DWORD *)(a1 + 48)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v20) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B34C80(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B34C9C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      int v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        uint64_t v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            int v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B34F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B34F60(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B350D0(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      int v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          int v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B35318(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_215B61F80(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_215742D4C();
    }
    sub_215B3449C(v7, v4);
    sub_215B61E3C(a1, (uint64_t)v7);
    v7[0] = &off_26C67D770;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_215B61E3C(a1, (uint64_t)v4);
  }
}

void sub_215B35440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B35454(uint64_t *a1, uint64_t a2)
{
  if (sub_215B350D0(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        unsigned int v14 = &off_26C67D770;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        int v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              unsigned int v14 = &off_26C67D770;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unsigned int v14 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B34320(a1, (uint64_t)&v14);
        unsigned int v14 = &off_26C67D770;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B356C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B356EC(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B3449C(v7, v4);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B35814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B35828@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v5 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, v4, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B35B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B35B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_215B35BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a1, 0);
  unsigned int v8 = sub_215B63D78(a1);
  unsigned int v9 = sub_215B63EFC(a1);
  size_t result = sub_215B64080(a1);
  size_t v11 = result >> 1;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 3;
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v16;
  *(_DWORD *)(a2 + 16) = HIDWORD(v15);
  *(void *)(a2 + 20) = 0x300000001;
  *(_DWORD *)(a2 + 28) = v11;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = ((unint64_t)(result >> 1) << 32) | 3;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B35DB4(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &off_26C67D770;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B35F30(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

void *sub_215B35F44(uint64_t a1, uint64_t a2)
{
  size_t result = (void *)sub_215B36C14(a1);
  if ((result & 1) == 0)
  {
    sub_215B36E5C(v14, a1);
    sub_215B36F98((uint64_t)&v7, a1);
    v15[0] = &v7;
    v15[1] = a2;
    if (v11 == 1)
    {
      if (v12 == v8)
      {
        sub_215B5A19C((uint64_t)v15);
      }
      else
      {
        char v17 = 0;
        uint64_t v16 = v8;
        v18[0] = &v17;
        v18[1] = &v16;
        v18[2] = a2;
        if (v8 && v9 && v10)
        {
          LODWORD(v19) = 0;
          HIDWORD(v19) = v8 - 1;
          int v20 = 1;
          int v21 = v9 - 1;
          unsigned int v24 = v13;
          unint64_t v5 = v7;
          v25[0] = 0;
          v25[1] = 0;
          int v22 = v12;
          unsigned int v23 = v10 - 1;
          if (v10 != 1)
          {
            unsigned int v6 = 0;
            do
            {
              sub_215B5A588((uint64_t)&v19, v25, (uint64_t)v18, v5);
              v5 += 2 * v24;
              ++v6;
            }
            while (v6 < v23);
          }
          sub_215B5A588((uint64_t)&v19, v25, (uint64_t)v18, v5);
        }
      }
    }
    else
    {
      v18[0] = a2;
      if (v8 && v9 && v10)
      {
        unsigned int v19 = v18;
        sub_215B5A7A4(&v19, (uint64_t)&v7);
      }
    }
    return sub_215B621C0(v14);
  }
  return result;
}

void sub_215B360A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B360B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B360C8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B868;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B36140(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26C67B868;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B35828(0, 22, a2, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *unint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    int v11 = sub_215B61968(v38, v6);
    sub_215B35BBC((uint64_t)v11, (uint64_t)&v34);
    long long v12 = v36;
    *unint64_t v7 = v35;
    *(_OWORD *)(a1 + 64) = v12;
    *(void *)(a1 + 80) = v37;
    sub_215B61CEC(v38);
  }
  long long v13 = a3[1];
  long long v31 = *a3;
  long long v32 = v13;
  long long v33 = a3[2];
  if (!sub_215B36C14(a1))
  {
    sub_215B36E5C(v38, a1);
    sub_215B36F98((uint64_t)&v34, a1);
    v39[0] = (uint64_t)&v31;
    v39[1] = (uint64_t)&v34;
    if (DWORD1(v32) == 1 && HIDWORD(v35) == 1)
    {
      sub_2158530CC(v39);
LABEL_27:
      sub_215B621C0(v38);
      return a1;
    }
    if (!DWORD2(v31) || !HIDWORD(v31) || !v32) {
      goto LABEL_27;
    }
    int v14 = HIDWORD(v31) - 1;
    uint64_t v15 = DWORD2(v32);
    uint64_t v16 = v36;
    char v17 = (_WORD *)v31;
    unsigned int v18 = v34;
    int v19 = v32 - 1;
    if (v32 != 1)
    {
      uint64_t v20 = DWORD1(v36);
      uint64_t v21 = HIDWORD(v32);
      if (HIDWORD(v31) == 1)
      {
        do
        {
          *unsigned int v18 = *v17;
          v18[1] = v17[1];
          v18[2] = v17[2];
          v17 += v21;
          v18 += v20;
          --v19;
        }
        while (v19);
LABEL_26:
        *unsigned int v18 = *v17;
        v18[1] = v17[1];
        v18[2] = v17[2];
        goto LABEL_27;
      }
      int v22 = 0;
      unsigned int v23 = v34 + 2;
      unsigned int v24 = (_WORD *)(v31 + 4);
      uint64_t v25 = 2 * HIDWORD(v32);
      uint64_t v26 = 2 * DWORD2(v32);
      do
      {
        int v27 = v24;
        long long v28 = v23;
        int v29 = v14;
        do
        {
          *(v28 - 2) = *(v27 - 2);
          *(v28 - 1) = *(v27 - 1);
          *long long v28 = *v27;
          v28 += v16;
          int v27 = (_WORD *)((char *)v27 + v26);
          --v29;
        }
        while (v29);
        *(v28 - 2) = *(v27 - 2);
        *(v28 - 1) = *(v27 - 1);
        *long long v28 = *v27;
        v17 += v21;
        v18 += v20;
        ++v22;
        v23 += v20;
        unsigned int v24 = (_WORD *)((char *)v24 + v25);
      }
      while (v22 != v19);
    }
    for (; v14; --v14)
    {
      *unsigned int v18 = *v17;
      v18[1] = v17[1];
      v18[2] = v17[2];
      v17 += v15;
      v18 += v16;
    }
    goto LABEL_26;
  }
  return a1;
}

void sub_215B363D0(_Unwind_Exception *a1)
{
  sub_215B61CEC((void *)(v2 - 88));
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B363EC(_Unwind_Exception *a1)
{
  sub_215B621C0((void *)(v2 - 88));
  sub_215B360C8(v1);
  _Unwind_Resume(a1);
}

void sub_215B36408(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3641C(_Unwind_Exception *a1)
{
  sub_215B360C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B36430(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67B868;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  unint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  long long v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    int v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 3;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x300000001;
  *(_DWORD *)(a1 + 68) = v15 >> 1;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = ((unint64_t)(v15 >> 1) << 32) | 3;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  unsigned int v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      int v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  int v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B367C4(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B367E0(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        unint64_t v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B36A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B36AA4(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B36C14(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B36E5C(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_215B61F80(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_215742D4C();
    }
    sub_215B35DB4(v7, v4);
    sub_215B61E3C(a1, (uint64_t)v7);
    v7[0] = &off_26C67D770;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_215B61E3C(a1, (uint64_t)v4);
  }
}

void sub_215B36F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B36F98(uint64_t a1, uint64_t a2)
{
  if (sub_215B36C14(a2))
  {
    sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        uint64_t v4 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v11 = &off_26C67D770;
        uint64_t v12 = v5;
        unsigned int v13 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          int v8 = std::__shared_weak_count::lock(v7);
          uint64_t v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              uint64_t v11 = &off_26C67D770;
              uint64_t v12 = v10;
              unsigned int v13 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v12 = 0;
        unsigned int v13 = 0;
        uint64_t v11 = &off_26C67D770;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_215B35BBC((uint64_t)&v11, a1);
        uint64_t v11 = &off_26C67D770;
        uint64_t v6 = v13;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B371B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B371DC(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B35DB4(v7, v4);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B37304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B37318@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v5 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, v4, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B37668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B37680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B376AC(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24)) {
        goto LABEL_13;
      }
      sub_215B61968(v8, a2);
      sub_215B3786C((uint64_t)v10, (uint64_t)v8);
      long long v4 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v4;
      *(void *)(a3 + 32) = v13;
      sub_215B61CEC(v8);
      return;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1) {
        goto LABEL_13;
      }
      goto LABEL_8;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2) {
        goto LABEL_13;
      }
LABEL_8:
      sub_215B3786C((uint64_t)v10, a2);
      long long v5 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v5;
      *(void *)(a3 + 32) = v13;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3) {
LABEL_13:
      }
        sub_215742D4C();
      sub_215B37A64((uint64_t *)a2, v8);
      sub_215B3786C((uint64_t)v10, (uint64_t)v8);
      long long v6 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v6;
      *(void *)(a3 + 32) = v13;
      v8[0] = &off_26C67D770;
      uint64_t v7 = v9;
      if (v9)
      {
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      return;
  }
}

void sub_215B37834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B37848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_215B3786C(uint64_t a1, uint64_t a2)
{
  long long v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    long long v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a2, 0);
  unsigned int v8 = sub_215B63D78(a2);
  unsigned int v9 = sub_215B63EFC(a2);
  size_t result = sub_215B64080(a2);
  size_t v11 = result >> 1;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 4;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v15);
  *(void *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v11;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 4;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B37A64(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  long long v5 = std::__shared_weak_count::lock(v4);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a1) == 0)
  {
LABEL_6:
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a2 = &off_26C67D770;
  a2[1] = v7;
  a2[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a2[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B37BE0(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B37BF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, __int16 a5)
{
  int v6 = a2;
  __int16 v14 = a5;
  *(void *)a1 = &unk_26C67B8F8;
  *(_DWORD *)(a1 + 8) = a2;
  uint64_t v8 = a1 + 16;
  sub_215B37318(a2, a3, a4, a1 + 16);
  unsigned int v9 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a4 + 24)) {
    BOOL v10 = *(_DWORD *)(a4 + 28) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    long long v11 = *(_OWORD *)a4;
    long long v12 = *(_OWORD *)(a4 + 16);
    *(void *)(a1 + 80) = *(void *)(a4 + 32);
    *unsigned int v9 = v11;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    sub_215B376AC(v6, v8, (uint64_t)v9);
  }
  if (!sub_215B38764(a1))
  {
    sub_215B389AC(a1, v16);
    sub_215B38AE8(a1, (uint64_t)v15);
    v17[0] = v15;
    v17[1] = &v14;
    sub_215B5A8CC((uint64_t)v17);
    sub_215B621C0(v16);
  }
  return a1;
}

void sub_215B37CE0(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B37CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B621C0((uint64_t *)va);
  sub_215B37D24(v8);
  _Unwind_Resume(a1);
}

void sub_215B37D10(_Unwind_Exception *a1)
{
  sub_215B37D24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B37D24(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B8F8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B37D9C(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26C67B8F8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B37318(0, 38, a2, a1 + 16);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v21, v6);
    sub_215B3786C((uint64_t)v17, (uint64_t)v21);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_215B61CEC(v21);
  }
  long long v12 = a3[1];
  long long v14 = *a3;
  long long v15 = v12;
  long long v16 = a3[2];
  if (!sub_215B38764(a1))
  {
    sub_215B389AC(a1, v21);
    sub_215B38AE8(a1, (uint64_t)v17);
    v22[0] = (uint64_t)&v14;
    v22[1] = (uint64_t)v17;
    if (DWORD1(v15) == 1 && HIDWORD(v18) == 1)
    {
      sub_2158530CC(v22);
    }
    else
    {
      char v23 = 0;
      if (DWORD2(v14) && HIDWORD(v14) && v15)
      {
        unsigned int v24 = &v23;
        sub_2158A7430((uint64_t)&v24, (uint64_t)&v14, (uint64_t)v17);
      }
    }
    sub_215B621C0(v21);
  }
  return a1;
}

void sub_215B37F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v14);
  _Unwind_Resume(a1);
}

void sub_215B37F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B621C0((uint64_t *)va);
  sub_215B37D24(v14);
  _Unwind_Resume(a1);
}

void sub_215B37F58(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B37F6C(_Unwind_Exception *a1)
{
  sub_215B37D24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B37F80(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67B8F8;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  long long v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  long long v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 4;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x400000001;
  *(_DWORD *)(a1 + 68) = v15 >> 1;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = ((unint64_t)(v15 >> 1) << 32) | 4;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  long long v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      long long v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  long long v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B38314(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B38330(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        long long v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B385D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B385F4(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B38764(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B389AC(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_215B61F80(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3) {
      sub_215742D4C();
    }
    sub_215B37A64((uint64_t *)(a1 + 16), v6);
    sub_215B61E3C(a2, (uint64_t)v6);
    v6[0] = &off_26C67D770;
    uint64_t v5 = v7;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    sub_215B61E3C(a2, v3);
  }
}

void sub_215B38AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B38AE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B38764(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        unsigned int v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          size_t v15 = std::__shared_weak_count::lock(v14);
          unint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3786C(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        unsigned int v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B38D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B38D9C(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B37A64(v4, v7);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B38EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B38EDC@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3) {
    BOOL v4 = a3[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, (uint64_t)a3, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B3922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B39244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B39270(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    int v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  int v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &off_26C67D770;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unint64_t v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unint64_t v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B393EC(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

void *sub_215B39400(uint64_t a1, _WORD *a2)
{
  size_t result = (void *)sub_215B39EA8(a1);
  if ((result & 1) == 0)
  {
    sub_215B3A0F0(v20, a1);
    sub_215B3A22C((uint64_t *)&v15, a1);
    v21[0] = &v15;
    v21[1] = a2;
    if (v18 == 1)
    {
      sub_215B5ABB0(v21, v5);
    }
    else if (v16 && v17)
    {
      int v6 = v16 - 1;
      uint64_t v7 = v15;
      uint64_t v8 = 2 * v18;
      int v9 = v17 - 1;
      if (v17 != 1)
      {
        uint64_t v10 = v19;
        if (v16 == 1)
        {
          do
          {
            *uint64_t v7 = *a2;
            v7 += v10;
            --v9;
          }
          while (v9);
        }
        else
        {
          int v11 = 0;
          uint64_t v12 = 2 * v19;
          do
          {
            unsigned int v13 = v7;
            int v14 = v6;
            do
            {
              *unsigned int v13 = *a2;
              unsigned int v13 = (_WORD *)((char *)v13 + v8);
              --v14;
            }
            while (v14);
            *unsigned int v13 = *a2;
            uint64_t v7 = (_WORD *)((char *)v7 + v12);
            ++v11;
          }
          while (v11 != v9);
        }
      }
      for (; v6; --v6)
      {
        *uint64_t v7 = *a2;
        uint64_t v7 = (_WORD *)((char *)v7 + v8);
      }
      *uint64_t v7 = *a2;
    }
    return sub_215B621C0(v20);
  }
  return result;
}

void sub_215B39520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B39534(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B988;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B395AC(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(void *)a1 = &unk_26C67B988;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B38EDC(0, 3, a2, a1 + 16);
  if (*a2) {
    BOOL v7 = a2[1] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v14, v6);
    sub_215B34320(v15, (uint64_t)v14);
    uint64_t v8 = v15[1];
    uint64_t v9 = v15[2];
    sub_215B61CEC(v14);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
  }
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  if (!sub_215B39EA8(a1))
  {
    sub_215B3A0F0(v15, a1);
    sub_215B3A22C(v14, a1);
    v13[0] = (uint64_t)&v11;
    v13[1] = (uint64_t)v14;
    sub_2158A12BC(v13);
    sub_215B621C0(v15);
  }
  return a1;
}

void sub_215B396C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v7);
  _Unwind_Resume(a1);
}

void sub_215B396E4(_Unwind_Exception *a1)
{
  sub_215B621C0((void *)(v2 - 56));
  sub_215B39534(v1);
  _Unwind_Resume(a1);
}

void sub_215B39700(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B39714(_Unwind_Exception *a1)
{
  sub_215B39534(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B39728(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67B988;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  __n128 v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  *(void *)(a1 + 48) = v13 | ((unint64_t)v14 << 32);
  *(void *)(a1 + 56) = ((unint64_t)(v15 >> 1) << 32) | 1;
  uint64_t v16 = *(void *)(a2 + 8);
  if (!v16)
  {
    uint64_t v20 = 0;
    goto LABEL_26;
  }
  int v17 = *(std::__shared_weak_count **)(v16 + 8);
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      unsigned int v18 = *(uint64_t **)(a2 + 8);
      if (v18) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v20 = 0;
      if (!*(_DWORD *)(a1 + 48)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v20 == 0) == (*(_DWORD *)(a1 + 52) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  unsigned int v18 = *(uint64_t **)(a2 + 8);
  if (!v18) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v20 = *v18;
  unsigned int v19 = (std::__shared_weak_count *)v18[1];
  if (!v19
    || (atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 48)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (*(_DWORD *)(a1 + 48)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v20) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B39A58(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B39A74(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        __n128 v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B39D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B39D38(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B39EA8(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B3A0F0(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_215B61F80(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_215742D4C();
    }
    sub_215B39270(v7, v4);
    sub_215B61E3C(a1, (uint64_t)v7);
    v7[0] = &off_26C67D770;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_215B61E3C(a1, (uint64_t)v4);
  }
}

void sub_215B3A218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3A22C(uint64_t *a1, uint64_t a2)
{
  if (sub_215B39EA8(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        unsigned int v14 = &off_26C67D770;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              unsigned int v14 = &off_26C67D770;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unsigned int v14 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B34320(a1, (uint64_t)&v14);
        unsigned int v14 = &off_26C67D770;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B3A4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3A4C4(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B39270(v7, v4);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B3A5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3A600@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v5 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, v4, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B3A950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3A968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_215B3A994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    BOOL v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a2, 0);
  unsigned int v8 = sub_215B63D78(a2);
  unsigned int v9 = sub_215B63EFC(a2);
  size_t result = sub_215B64080(a2);
  size_t v11 = result >> 1;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 2;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v15);
  *(void *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v11;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = ((unint64_t)(result >> 1) << 32) | 2;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B3AB8C(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &off_26C67D770;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B3AD08(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

void *sub_215B3AD1C(uint64_t a1, _WORD *a2)
{
  size_t result = (void *)sub_215B3B944(a1);
  if ((result & 1) == 0)
  {
    sub_215B3BB8C(v25, a1);
    sub_215B3BCC8((uint64_t)&v18, a1);
    v26[0] = &v18;
    v26[1] = a2;
    if (v22 == 1)
    {
      if (v23 == v19)
      {
        sub_215B5AF70(v26, v5);
      }
      else
      {
        char v28 = 0;
        uint64_t v27 = v19;
        v29[0] = &v28;
        v29[1] = &v27;
        _OWORD v29[2] = a2;
        if (v19 && v20 && v21)
        {
          v30[0] = 0;
          v30[1] = v19 - 1;
          v30[2] = 1;
          v30[3] = v20 - 1;
          unsigned int v32 = v24;
          unint64_t v15 = (unint64_t)v18;
          v33[0] = 0;
          v33[1] = 0;
          v30[4] = v23;
          unsigned int v31 = v21 - 1;
          if (v21 != 1)
          {
            unsigned int v16 = 0;
            do
            {
              v5.n128_u64[0] = sub_215B5B35C((uint64_t)v30, v33, (uint64_t)v29, v15, v5);
              v15 += 2 * v32;
              ++v16;
            }
            while (v16 < v31);
          }
          sub_215B5B35C((uint64_t)v30, v33, (uint64_t)v29, v15, v5);
        }
      }
    }
    else if (v19 && v20 && v21)
    {
      int v6 = v20 - 1;
      uint64_t v7 = v18;
      uint64_t v8 = 2 * v23;
      int v9 = v21 - 1;
      if (v21 != 1)
      {
        uint64_t v10 = v24;
        if (v20 == 1)
        {
          uint64_t v17 = 2 * v24;
          do
          {
            *uint64_t v7 = *a2;
            v7[1] = *a2;
            uint64_t v7 = (_WORD *)((char *)v7 + v17);
            --v9;
          }
          while (v9);
        }
        else
        {
          int v11 = 0;
          uint64_t v12 = v18 + 1;
          do
          {
            unint64_t v13 = v12;
            int v14 = v6;
            do
            {
              *(v13 - 1) = *a2;
              *unint64_t v13 = *a2;
              unint64_t v13 = (_WORD *)((char *)v13 + v8);
              --v14;
            }
            while (v14);
            *(v13 - 1) = *a2;
            *unint64_t v13 = *a2;
            v7 += v10;
            ++v11;
            v12 += v10;
          }
          while (v11 != v9);
        }
      }
      for (; v6; --v6)
      {
        *uint64_t v7 = *a2;
        v7[1] = *a2;
        uint64_t v7 = (_WORD *)((char *)v7 + v8);
      }
      *uint64_t v7 = *a2;
      v7[1] = *a2;
    }
    return sub_215B621C0(v25);
  }
  return result;
}

void sub_215B3AF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3AF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3AF50(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BA18;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B3AFC8(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)a1 = &unk_26C67BA18;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B3A600(0, 7, a2, a1 + 16);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v16, v6);
    sub_215B3A994((uint64_t)v17, (uint64_t)v16);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_215B61CEC(v16);
  }
  long long v12 = a3[1];
  v14[0] = *a3;
  v14[1] = v12;
  v14[2] = a3[2];
  if (!sub_215B3B944(a1))
  {
    sub_215B3BB8C(v16, a1);
    sub_215B3BCC8((uint64_t)v17, a1);
    v15[0] = (uint64_t)v14;
    v15[1] = (uint64_t)v17;
    sub_2158A3B98(v15);
    sub_215B621C0(v16);
  }
  return a1;
}

void sub_215B3B100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v10);
  _Unwind_Resume(a1);
}

void sub_215B3B11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215B621C0((uint64_t *)va);
  sub_215B3AF50(v10);
  _Unwind_Resume(a1);
}

void sub_215B3B138(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3B14C(_Unwind_Exception *a1)
{
  sub_215B3AF50(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3B160(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67BA18;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  __n128 v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 2;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x200000001;
  *(_DWORD *)(a1 + 68) = v15 >> 1;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = ((unint64_t)(v15 >> 1) << 32) | 2;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  long long v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      long long v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  long long v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B3B4F4(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3B510(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        __n128 v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B3B7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B3B7D4(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B3B944(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B3BB8C(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_215B61F80(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_215742D4C();
    }
    sub_215B3AB8C(v7, v4);
    sub_215B61E3C(a1, (uint64_t)v7);
    v7[0] = &off_26C67D770;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_215B61E3C(a1, (uint64_t)v4);
  }
}

void sub_215B3BCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3BCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B3B944(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        unsigned int v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          size_t v15 = std::__shared_weak_count::lock(v14);
          unint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3A994(a1, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        unsigned int v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B3BF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B3BF80(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B3AB8C(v7, v4);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B3C0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3C0BC@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v5 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, v4, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B3C40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3C424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B3C450(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24)) {
        goto LABEL_13;
      }
      sub_215B61968(v8, a2);
      sub_215B3786C((uint64_t)v10, (uint64_t)v8);
      long long v4 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v4;
      *(void *)(a3 + 32) = v13;
      sub_215B61CEC(v8);
      return;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1) {
        goto LABEL_13;
      }
      goto LABEL_8;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2) {
        goto LABEL_13;
      }
LABEL_8:
      sub_215B3786C((uint64_t)v10, a2);
      long long v5 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v5;
      *(void *)(a3 + 32) = v13;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3) {
LABEL_13:
      }
        sub_215742D4C();
      sub_215B3C610((uint64_t *)a2, v8);
      sub_215B3786C((uint64_t)v10, (uint64_t)v8);
      long long v6 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v6;
      *(void *)(a3 + 32) = v13;
      v8[0] = &off_26C67D770;
      uint64_t v7 = v9;
      if (v9)
      {
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      return;
  }
}

void sub_215B3C5D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3C5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3C610(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
  {
    long long v6 = 0;
    goto LABEL_6;
  }
  long long v5 = std::__shared_weak_count::lock(v4);
  long long v6 = v5;
  if (!v5 || (uint64_t v7 = *a1) == 0)
  {
LABEL_6:
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a2 = &off_26C67D770;
  a2[1] = v7;
  a2[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unint64_t v8 = (uint64_t *)a2[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unint64_t v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B3C78C(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3C7A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, __int16 a5)
{
  int v6 = a2;
  __int16 v15 = a5;
  *(void *)a1 = &unk_26C67BAA8;
  *(_DWORD *)(a1 + 8) = a2;
  uint64_t v8 = a1 + 16;
  sub_215B3C0BC(a2, a3, a4, a1 + 16);
  unint64_t v9 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a4 + 24)) {
    BOOL v10 = *(_DWORD *)(a4 + 28) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    long long v11 = *(_OWORD *)a4;
    long long v12 = *(_OWORD *)(a4 + 16);
    *(void *)(a1 + 80) = *(void *)(a4 + 32);
    *unint64_t v9 = v11;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    sub_215B3C450(v6, v8, (uint64_t)v9);
  }
  if (!sub_215B3D2C4(a1))
  {
    sub_215B3D50C(a1, v17);
    sub_215B3D648(a1, (uint64_t)v16);
    v18[0] = (uint64_t)v16;
    v18[1] = (uint64_t)&v15;
    sub_215B5B578(v18, v13);
    sub_215B621C0(v17);
  }
  return a1;
}

void sub_215B3C88C(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B621C0((uint64_t *)va);
  sub_215B3C8D0(v8);
  _Unwind_Resume(a1);
}

void sub_215B3C8BC(_Unwind_Exception *a1)
{
  sub_215B3C8D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3C8D0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BAA8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B3C948(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)a1 = &unk_26C67BAA8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B3C0BC(0, 31, a2, a1 + 16);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v16, v6);
    sub_215B3786C((uint64_t)v17, (uint64_t)v16);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_215B61CEC(v16);
  }
  long long v12 = a3[1];
  v14[0] = *a3;
  v14[1] = v12;
  v14[2] = a3[2];
  if (!sub_215B3D2C4(a1))
  {
    sub_215B3D50C(a1, v16);
    sub_215B3D648(a1, (uint64_t)v17);
    v15[0] = v14;
    v15[1] = v17;
    sub_2158A79C0(v15);
    sub_215B621C0(v16);
  }
  return a1;
}

void sub_215B3CA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v10);
  _Unwind_Resume(a1);
}

void sub_215B3CA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215B621C0((uint64_t *)va);
  sub_215B3C8D0(v10);
  _Unwind_Resume(a1);
}

void sub_215B3CAB8(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3CACC(_Unwind_Exception *a1)
{
  sub_215B3C8D0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3CAE0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67BAA8;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  long long v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 4;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x400000001;
  *(_DWORD *)(a1 + 68) = v15 >> 1;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = ((unint64_t)(v15 >> 1) << 32) | 4;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  long long v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      long long v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  long long v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B3CE74(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3CE90(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        long long v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B3D130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B3D154(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B3D2C4(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B3D50C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_215B61F80(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3) {
      sub_215742D4C();
    }
    sub_215B3C610((uint64_t *)(a1 + 16), v6);
    sub_215B61E3C(a2, (uint64_t)v6);
    v6[0] = &off_26C67D770;
    uint64_t v5 = v7;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    sub_215B61E3C(a2, v3);
  }
}

void sub_215B3D634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3D648(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B3D2C4(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        unsigned int v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          size_t v15 = std::__shared_weak_count::lock(v14);
          unint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3786C(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        unsigned int v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B3D8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B3D8FC(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B3C610(v4, v7);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B3DA28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3DA3C@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  if (*a3) {
    BOOL v4 = a3[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, (uint64_t)a3, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B3DD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3DDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_215B3DDD0(uint64_t *a1, uint64_t a2)
{
  BOOL v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a2, 0);
  unsigned int v8 = sub_215B63D78(a2);
  unsigned int v9 = sub_215B63EFC(a2);
  size_t result = sub_215B64080(a2);
  uint64_t v11 = v8;
  unint64_t v12 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v12;
  }
  *a1 = v7;
  a1[1] = v14;
  a1[2] = ((unint64_t)(result >> 2) << 32) | 1;
  if (HIDWORD(v14) * (result >> 2) == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B3DF4C(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a2) == 0)
  {
LABEL_6:
    a1[1] = 0;
    a1[2] = 0;
    *a1 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a1 = &off_26C67D770;
  a1[1] = v7;
  a1[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a1[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B3E0C8(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

void *sub_215B3E0DC(uint64_t a1, _DWORD *a2)
{
  size_t result = (void *)sub_215B3EB80(a1);
  if ((result & 1) == 0)
  {
    sub_215B3EDC8(v20, a1);
    sub_215B3EF04((uint64_t *)&v15, a1);
    v21[0] = &v15;
    v21[1] = a2;
    uint64_t v5 = v18;
    if (v18 == 1)
    {
      sub_215B5B8D8((uint64_t)v21);
      return sub_215B621C0(v20);
    }
    if (!v16 || !v17) {
      return sub_215B621C0(v20);
    }
    int v6 = v16 - 1;
    uint64_t v7 = v15;
    int v8 = v17 - 1;
    if (v17 != 1)
    {
      uint64_t v9 = v19;
      if (v16 == 1)
      {
        do
        {
          *uint64_t v7 = *a2;
          v7 += v9;
          --v8;
        }
        while (v8);
LABEL_17:
        *uint64_t v7 = *a2;
        return sub_215B621C0(v20);
      }
      int v10 = 0;
      uint64_t v11 = 4 * v19;
      do
      {
        unint64_t v12 = v7;
        int v13 = v6;
        do
        {
          *unint64_t v12 = *a2;
          v12 += v5;
          --v13;
        }
        while (v13);
        *unint64_t v12 = *a2;
        uint64_t v7 = (_DWORD *)((char *)v7 + v11);
        ++v10;
      }
      while (v10 != v8);
    }
    if (v6)
    {
      uint64_t v14 = 4 * v5;
      do
      {
        *uint64_t v7 = *a2;
        uint64_t v7 = (_DWORD *)((char *)v7 + v14);
        --v6;
      }
      while (v6);
    }
    goto LABEL_17;
  }
  return result;
}

void sub_215B3E200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B621C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3E214(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BB38;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B3E28C(uint64_t a1, _DWORD *a2, long long *a3)
{
  *(void *)a1 = &unk_26C67BB38;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B3DA3C(0, 4, a2, a1 + 16);
  if (*a2) {
    BOOL v7 = a2[1] == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B3DDD0(v14, (uint64_t)v13);
    uint64_t v8 = v14[1];
    uint64_t v9 = v14[2];
    sub_215B61CEC(v13);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v9;
  }
  long long v11 = *a3;
  uint64_t v12 = *((void *)a3 + 2);
  if (!sub_215B3EB80(a1))
  {
    sub_215B3EDC8(v14, a1);
    sub_215B3EF04(v13, a1);
    sub_21585114C((uint64_t)&v11, (uint64_t)v13);
    sub_215B621C0(v14);
  }
  return a1;
}

void sub_215B3E3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v5);
  _Unwind_Resume(a1);
}

void sub_215B3E3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B621C0((uint64_t *)va);
  sub_215B3E214(v8);
  _Unwind_Resume(a1);
}

void sub_215B3E3D8(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3E3EC(_Unwind_Exception *a1)
{
  sub_215B3E214(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3E400(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67BB38;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  int v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  *(void *)(a1 + 48) = v13 | ((unint64_t)v14 << 32);
  *(void *)(a1 + 56) = ((unint64_t)(v15 >> 2) << 32) | 1;
  uint64_t v16 = *(void *)(a2 + 8);
  if (!v16)
  {
    uint64_t v20 = 0;
    goto LABEL_26;
  }
  int v17 = *(std::__shared_weak_count **)(v16 + 8);
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      unsigned int v18 = *(uint64_t **)(a2 + 8);
      if (v18) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v20 = 0;
      if (!*(_DWORD *)(a1 + 48)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v20 == 0) == (*(_DWORD *)(a1 + 52) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  unsigned int v18 = *(uint64_t **)(a2 + 8);
  if (!v18) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v20 = *v18;
  unsigned int v19 = (std::__shared_weak_count *)v18[1];
  if (!v19
    || (atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 48)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  if (*(_DWORD *)(a1 + 48)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v20) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B3E730(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3E74C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      int v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        uint64_t v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            int v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B3E9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B3EA10(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B3EB80(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      int v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          int v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B3EDC8(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 40);
  if (v5 == 2)
  {
    sub_215B61F80(a1, (uint64_t)v4);
  }
  else if (v5 > 1)
  {
    if (v5 != 3) {
      sub_215742D4C();
    }
    sub_215B3DF4C(v7, v4);
    sub_215B61E3C(a1, (uint64_t)v7);
    v7[0] = &off_26C67D770;
    uint64_t v6 = v8;
    if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    sub_215B61E3C(a1, (uint64_t)v4);
  }
}

void sub_215B3EEF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3EF04(uint64_t *a1, uint64_t a2)
{
  if (sub_215B3EB80(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        unsigned int v14 = &off_26C67D770;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        int v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              unsigned int v14 = &off_26C67D770;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unsigned int v14 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B3DDD0(a1, (uint64_t)&v14);
        unsigned int v14 = &off_26C67D770;
        uint64_t v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B3F178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3F19C(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B3DF4C(v7, v4);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B3F2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3F2D8@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v5 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, v4, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B3F628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3F640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B3F66C(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24)) {
        goto LABEL_13;
      }
      sub_215B61968(v8, a2);
      sub_215B3F82C((uint64_t)v10, (uint64_t)v8);
      long long v4 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v4;
      *(void *)(a3 + 32) = v13;
      sub_215B61CEC(v8);
      return;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1) {
        goto LABEL_13;
      }
      goto LABEL_8;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2) {
        goto LABEL_13;
      }
LABEL_8:
      sub_215B3F82C((uint64_t)v10, a2);
      long long v5 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v5;
      *(void *)(a3 + 32) = v13;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3) {
LABEL_13:
      }
        sub_215742D4C();
      sub_215B3FA24((uint64_t *)a2, v8);
      sub_215B3F82C((uint64_t)v10, (uint64_t)v8);
      long long v6 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v6;
      *(void *)(a3 + 32) = v13;
      v8[0] = &off_26C67D770;
      uint64_t v7 = v9;
      if (v9)
      {
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      return;
  }
}

void sub_215B3F7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B3F808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_215B3F82C(uint64_t a1, uint64_t a2)
{
  long long v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    long long v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a2, 0);
  unsigned int v8 = sub_215B63D78(a2);
  unsigned int v9 = sub_215B63EFC(a2);
  size_t result = sub_215B64080(a2);
  size_t v11 = result >> 2;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 2;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v15);
  *(void *)(a1 + 20) = 0x200000001;
  *(_DWORD *)(a1 + 28) = v11;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 2;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B3FA24(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  long long v5 = std::__shared_weak_count::lock(v4);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a1) == 0)
  {
LABEL_6:
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a2 = &off_26C67D770;
  a2[1] = v7;
  a2[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a2[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B3FBA0(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3FBB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5)
{
  int v6 = a2;
  float v14 = a5;
  *(void *)a1 = &unk_26C67BBC8;
  *(_DWORD *)(a1 + 8) = a2;
  uint64_t v8 = a1 + 16;
  sub_215B3F2D8(a2, a3, a4, a1 + 16);
  unsigned int v9 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a4 + 24)) {
    BOOL v10 = *(_DWORD *)(a4 + 28) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    long long v11 = *(_OWORD *)a4;
    long long v12 = *(_OWORD *)(a4 + 16);
    *(void *)(a1 + 80) = *(void *)(a4 + 32);
    *unsigned int v9 = v11;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    sub_215B3F66C(v6, v8, (uint64_t)v9);
  }
  if (!sub_215B406D8(a1))
  {
    sub_215B40920(a1, v16);
    sub_215B40A5C(a1, (uint64_t)v15);
    v17[0] = (uint64_t)v15;
    v17[1] = (uint64_t)&v14;
    sub_215B5BCDC(v17);
    sub_215B621C0(v16);
  }
  return a1;
}

void sub_215B3FCA0(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3FCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B621C0((uint64_t *)va);
  sub_215B3FCE4(v8);
  _Unwind_Resume(a1);
}

void sub_215B3FCD0(_Unwind_Exception *a1)
{
  sub_215B3FCE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3FCE4(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BBC8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B3FD5C(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)a1 = &unk_26C67BBC8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B3F2D8(0, 8, a2, a1 + 16);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v16, v6);
    sub_215B3F82C((uint64_t)v17, (uint64_t)v16);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_215B61CEC(v16);
  }
  long long v12 = a3[1];
  v14[0] = *a3;
  v14[1] = v12;
  v14[2] = a3[2];
  if (!sub_215B406D8(a1))
  {
    sub_215B40920(a1, v16);
    sub_215B40A5C(a1, (uint64_t)v17);
    v15[0] = (uint64_t)v14;
    v15[1] = (uint64_t)v17;
    sub_2158A4CE8(v15);
    sub_215B621C0(v16);
  }
  return a1;
}

void sub_215B3FE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v10);
  _Unwind_Resume(a1);
}

void sub_215B3FEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_215B621C0((uint64_t *)va);
  sub_215B3FCE4(v10);
  _Unwind_Resume(a1);
}

void sub_215B3FECC(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B3FEE0(_Unwind_Exception *a1)
{
  sub_215B3FCE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B3FEF4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67BBC8;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  long long v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 2;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x200000001;
  *(_DWORD *)(a1 + 68) = v15 >> 2;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = ((unint64_t)(v15 >> 2) << 32) | 2;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  long long v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      long long v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  long long v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B40288(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B402A4(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        long long v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            uint64_t v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B40544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B40568(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B406D8(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      uint64_t v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          uint64_t v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B40920(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_215B61F80(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3) {
      sub_215742D4C();
    }
    sub_215B3FA24((uint64_t *)(a1 + 16), v6);
    sub_215B61E3C(a2, (uint64_t)v6);
    v6[0] = &off_26C67D770;
    uint64_t v5 = v7;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    sub_215B61E3C(a2, v3);
  }
}

void sub_215B40A48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B40A5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B406D8(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        unsigned int v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          size_t v15 = std::__shared_weak_count::lock(v14);
          unint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3F82C(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        unsigned int v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B40CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B40D10(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B3FA24(v4, v7);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B40E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B40E50@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a3 + 24;
  if (*(_DWORD *)(a3 + 24)) {
    BOOL v5 = *(_DWORD *)(a3 + 28) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    if ((a2 - 1) > 0x25) {
      int v6 = 0;
    }
    else {
      int v6 = dword_215EDC450[a2 - 1] | *(_DWORD *)&a8[4 * a2 - 4];
    }
    strcpy((char *)operator new(0x68uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp:51");
    sub_215B62F3C((uint64_t)&v7, v4, v6);
  }
  if (result == 3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 24) = 3;
  }
  else
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = &off_26C67D770;
    *(_DWORD *)(a4 + 24) = 0;
  }
  return result;
}

void sub_215B411A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B411B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B411E4(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a1)
  {
    case 0:
      if (*(_DWORD *)(a2 + 24)) {
        goto LABEL_13;
      }
      sub_215B61968(v8, a2);
      sub_215B413A4((uint64_t)v10, (uint64_t)v8);
      long long v4 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v4;
      *(void *)(a3 + 32) = v13;
      sub_215B61CEC(v8);
      return;
    case 1:
      if (*(_DWORD *)(a2 + 24) != 1) {
        goto LABEL_13;
      }
      goto LABEL_8;
    case 2:
      if (*(_DWORD *)(a2 + 24) != 2) {
        goto LABEL_13;
      }
LABEL_8:
      sub_215B413A4((uint64_t)v10, a2);
      long long v5 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v5;
      *(void *)(a3 + 32) = v13;
      break;
    case 3:
      if (*(_DWORD *)(a2 + 24) != 3) {
LABEL_13:
      }
        sub_215742D4C();
      sub_215B4159C((uint64_t *)a2, v8);
      sub_215B413A4((uint64_t)v10, (uint64_t)v8);
      long long v6 = v12;
      *(_OWORD *)a3 = v11;
      *(_OWORD *)(a3 + 16) = v6;
      *(void *)(a3 + 32) = v13;
      v8[0] = &off_26C67D770;
      uint64_t v7 = v9;
      if (v9)
      {
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      break;
    default:
      return;
  }
}

void sub_215B4136C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B41380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

size_t sub_215B413A4(uint64_t a1, uint64_t a2)
{
  long long v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    long long v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 733, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t v7 = sub_215B617B8(a2, 0);
  unsigned int v8 = sub_215B63D78(a2);
  unsigned int v9 = sub_215B63EFC(a2);
  size_t result = sub_215B64080(a2);
  size_t v11 = result >> 2;
  uint64_t v12 = v8;
  unint64_t v13 = v8 | ((unint64_t)v9 << 32);
  if (v9) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v13;
  }
  HIDWORD(v16) = v15;
  LODWORD(v16) = 4;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v15);
  *(void *)(a1 + 20) = 0x400000001;
  *(_DWORD *)(a1 + 28) = v11;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = ((unint64_t)(result >> 2) << 32) | 4;
  if (HIDWORD(v15) * v11 == -1)
  {
    size_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8);
    if (result) {
LABEL_17:
    }
      abort();
  }
  return result;
}

void sub_215B4159C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  long long v5 = std::__shared_weak_count::lock(v4);
  uint64_t v6 = v5;
  if (!v5 || (uint64_t v7 = *a1) == 0)
  {
LABEL_6:
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_26C67D770;
    if (!v6) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  *a2 = &off_26C67D770;
  a2[1] = v7;
  a2[2] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_7:
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_9:
  unsigned int v8 = (uint64_t *)a2[1];
  if (!v8) {
    goto LABEL_14;
  }
  uint64_t v10 = *v8;
  unsigned int v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_14:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 218, (uint64_t)"", 0, (uint64_t)"Attempt to access an expired PixelBuffer. Note that an image buffer  created by an ImageView does not keep the buffer alive.", 124, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
}

void sub_215B41718(_Unwind_Exception *a1)
{
  sub_215B62EA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B4172C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5)
{
  int v6 = a2;
  float v14 = a5;
  *(void *)a1 = &unk_26C67BC58;
  *(_DWORD *)(a1 + 8) = a2;
  uint64_t v8 = a1 + 16;
  sub_215B40E50(a2, a3, a4, a1 + 16);
  unsigned int v9 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a4 + 24)) {
    BOOL v10 = *(_DWORD *)(a4 + 28) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    long long v11 = *(_OWORD *)a4;
    long long v12 = *(_OWORD *)(a4 + 16);
    *(void *)(a1 + 80) = *(void *)(a4 + 32);
    *unsigned int v9 = v11;
    *(_OWORD *)(a1 + 64) = v12;
  }
  else
  {
    sub_215B411E4(v6, v8, (uint64_t)v9);
  }
  if (!sub_215B4229C(a1))
  {
    sub_215B424E4(a1, v16);
    sub_215B42620(a1, (uint64_t)v15);
    v17[0] = (uint64_t)v15;
    v17[1] = (uint64_t)&v14;
    sub_215B5C550(v17);
    sub_215B621C0(v16);
  }
  return a1;
}

void sub_215B41818(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B4182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B621C0((uint64_t *)va);
  sub_215B4185C(v8);
  _Unwind_Resume(a1);
}

void sub_215B41848(_Unwind_Exception *a1)
{
  sub_215B4185C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B4185C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BC58;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B418D4(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26C67BC58;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B40E50(0, 32, a2, a1 + 16);
  uint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)(a2 + 24)) {
    BOOL v8 = *(_DWORD *)(a2 + 28) == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 80) = *(void *)(a2 + 32);
    *uint64_t v7 = v9;
    *(_OWORD *)(a1 + 64) = v10;
  }
  else
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v21, v6);
    sub_215B413A4((uint64_t)v17, (uint64_t)v21);
    long long v11 = v19;
    *uint64_t v7 = v18;
    *(_OWORD *)(a1 + 64) = v11;
    *(void *)(a1 + 80) = v20;
    sub_215B61CEC(v21);
  }
  long long v12 = a3[1];
  long long v14 = *a3;
  long long v15 = v12;
  long long v16 = a3[2];
  if (!sub_215B4229C(a1))
  {
    sub_215B424E4(a1, v21);
    sub_215B42620(a1, (uint64_t)v17);
    v22[0] = (uint64_t)&v14;
    v22[1] = (uint64_t)v17;
    if (DWORD1(v15) == 1 && HIDWORD(v18) == 1)
    {
      sub_215854ED0(v22);
    }
    else
    {
      char v23 = 0;
      if (DWORD2(v14) && HIDWORD(v14) && v15)
      {
        unsigned int v24 = &v23;
        sub_2158A81CC((uint64_t)&v24, (uint64_t)&v14, (uint64_t)v17);
      }
    }
    sub_215B621C0(v21);
  }
  return a1;
}

void sub_215B41A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  sub_215B2E094(v14);
  _Unwind_Resume(a1);
}

void sub_215B41A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B621C0((uint64_t *)va);
  sub_215B4185C(v14);
  _Unwind_Resume(a1);
}

void sub_215B41A90(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B41AA4(_Unwind_Exception *a1)
{
  sub_215B4185C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B41AB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67BC58;
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v6 = *v4;
  long long v5 = (std::__shared_weak_count *)v4[1];
  if (!v5
    || (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    char v4 = *(uint64_t **)(a2 + 8);
    if (v6) {
      goto LABEL_5;
    }
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  char v4 = *(uint64_t **)(a2 + 8);
  if (!v6) {
    goto LABEL_9;
  }
LABEL_5:
  int v7 = *((_DWORD *)v4 + 4);
  if (v7 == 2) {
    int v8 = 2;
  }
  else {
    int v8 = v7 == 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = off_26C67D770;
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  long long v10 = *(uint64_t **)(a2 + 8);
  if (v10)
  {
    uint64_t v12 = *v10;
    long long v11 = (std::__shared_weak_count *)v10[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/include/Kit/CoreVideo/PixelBufferRef.h", 677, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_36;
  }
LABEL_17:
  unsigned int v13 = sub_215B63D78(a2);
  unsigned int v14 = sub_215B63EFC(a2);
  size_t v15 = sub_215B64080(a2);
  unint64_t v16 = v13 | ((unint64_t)v14 << 32);
  LODWORD(v23) = 4;
  HIDWORD(v23) = v16;
  *(void *)(a1 + 48) = v23;
  *(_DWORD *)(a1 + 56) = v14;
  *(void *)(a1 + 60) = 0x400000001;
  *(_DWORD *)(a1 + 68) = v15 >> 2;
  *(void *)(a1 + 72) = v16;
  *(void *)(a1 + 80) = ((unint64_t)(v15 >> 2) << 32) | 4;
  uint64_t v17 = *(void *)(a2 + 8);
  if (!v17)
  {
    uint64_t v21 = 0;
    goto LABEL_26;
  }
  long long v18 = *(std::__shared_weak_count **)(v17 + 8);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      long long v19 = *(uint64_t **)(a2 + 8);
      if (v19) {
        goto LABEL_21;
      }
LABEL_32:
      uint64_t v21 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_33;
      }
LABEL_27:
      if ((v21 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
        return a1;
      }
LABEL_34:
      if (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 109, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))return a1; {
LABEL_36:
      }
      abort();
    }
  }
  long long v19 = *(uint64_t **)(a2 + 8);
  if (!v19) {
    goto LABEL_32;
  }
LABEL_21:
  uint64_t v21 = *v19;
  uint64_t v20 = (std::__shared_weak_count *)v19[1];
  if (!v20
    || (atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_26:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (*(_DWORD *)(a1 + 72)) {
    goto LABEL_27;
  }
LABEL_33:
  if (v21) {
    goto LABEL_34;
  }
  return a1;
}

void sub_215B41E4C(_Unwind_Exception *a1)
{
  sub_215B2E094(v1);
  _Unwind_Resume(a1);
}

void sub_215B41E68(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      int v8 = &off_26C67D770;
      uint64_t v9 = v3;
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      char v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        long long v5 = std::__shared_weak_count::lock(v4);
        uint64_t v6 = v5;
        if (v5)
        {
          uint64_t v7 = *(void *)(a1 + 16);
          if (v7)
          {
            int v8 = &off_26C67D770;
            uint64_t v9 = v7;
            long long v10 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
LABEL_4:
            sub_215B64204((uint64_t)&v8, (int)&v11);
          }
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      int v8 = &off_26C67D770;
      if (!v6) {
        goto LABEL_4;
      }
      goto LABEL_11;
    default:
      sub_215742D4C();
  }
}

void sub_215B42108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B4212C(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
      *a2 = off_26C67D770;
      a2[1] = v5;
      a2[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      return;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *(void *)(a1 + 16);
          if (v9)
          {
            *a2 = off_26C67D770;
            a2[1] = v9;
            a2[2] = v7;
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_11;
          }
        }
      }
      else
      {
        int v8 = 0;
      }
      a2[1] = 0;
      a2[2] = 0;
      *a2 = off_26C67D770;
      if (!v8) {
        return;
      }
LABEL_11:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      sub_215742D4C();
  }
}

BOOL sub_215B4229C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0:
    case 1:
    case 2:
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v9 = *(uint64_t **)(a1 + 24);
      long long v10 = v2;
      if (v2) {
        atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_4;
    case 3:
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7 && *(void *)(a1 + 16))
        {
          uint64_t v9 = *(uint64_t **)(a1 + 16);
          long long v10 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = 0;
      }
      uint64_t v9 = 0;
      long long v10 = 0;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_19:
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_4:
      if (v9)
      {
        uint64_t v4 = *v9;
        uint64_t v3 = (std::__shared_weak_count *)v9[1];
        if (v3)
        {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
        return v4 == 0;
      }
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v4 == 0;
    default:
      sub_215742D4C();
  }
}

void sub_215B424E4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  unsigned int v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    sub_215B61F80(a2, v3);
  }
  else if (v4 > 1)
  {
    if (v4 != 3) {
      sub_215742D4C();
    }
    sub_215B4159C((uint64_t *)(a1 + 16), v6);
    sub_215B61E3C(a2, (uint64_t)v6);
    v6[0] = &off_26C67D770;
    uint64_t v5 = v7;
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    sub_215B61E3C(a2, v3);
  }
}

void sub_215B4260C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B42620(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B4229C(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        long long v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        unsigned int v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          size_t v15 = std::__shared_weak_count::lock(v14);
          unint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              long long v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        long long v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B413A4(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        unsigned int v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B428B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B428D4(void *a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 40);
  switch(v5)
  {
    case 2:
LABEL_4:
      sub_215B61968(a1, (uint64_t)v4);
      return;
    case 1:
      sub_215B61AAC(a1, (uint64_t)v4);
      break;
    case 0:
      goto LABEL_4;
    case 3:
      sub_215B4159C(v4, v7);
      sub_215B61968(a1, (uint64_t)v7);
      v7[0] = &off_26C67D770;
      uint64_t v6 = v8;
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
      break;
    default:
      sub_215742D4C();
  }
}

void sub_215B42A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B42A14(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67BCE8;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x20) {
    uint64_t v4 = 32;
  }
  else {
    uint64_t v4 = v4;
  }
  *(void *)&long long v9 = *(void *)a2;
  *((void *)&v9 + 1) = v3 | (v4 << 32);
  *(void *)a1 = &unk_26C67B598;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v5 = a1 + 16;
  sub_215B2D6A0(0, 1, &v9, a1 + 16);
  if (v9 && DWORD1(v9))
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v10, v5);
    sub_215B2DBE8(v11, (uint64_t)v10);
    uint64_t v6 = v11[1];
    uint64_t v7 = v11[2];
    sub_215B61CEC(v10);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = v9;
  }
  *(void *)a1 = &unk_26C67BCE8;
  return a1;
}

void sub_215B42B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_215B61CEC(&a16);
  uint64_t v19 = *(unsigned int *)(v16 + 40);
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v19])(&a15, v17);
  }
  *(_DWORD *)(v16 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_215B42B64(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B598;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B42BDC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (sub_215B2E9E8(a1))
  {
    if (*(_DWORD *)(a1 + 52)) {
      BOOL v4 = *(_DWORD *)(a1 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a2 = 0;
    a2[1] = v5;
    a2[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
        unsigned int v14 = &off_26C67D770;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a1 + 16);
            if (v13)
            {
              unsigned int v14 = &off_26C67D770;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unsigned int v14 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B2DBE8(a2, (uint64_t)&v14);
        unsigned int v14 = &off_26C67D770;
        long long v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B42E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B42E70(void *a1, uint64_t a2)
{
  if (sub_215B2E9E8(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v16 = &off_26C67D770;
        uint64_t v17 = v8;
        long long v18 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v16 = &off_26C67D770;
              uint64_t v17 = v13;
              long long v18 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v17 = 0;
        long long v18 = 0;
        uint64_t v16 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B2DBE8(&v14, (uint64_t)&v16);
        *a1 = v14;
        *(_OWORD *)(a1 + 1) = v15;
        uint64_t v16 = &off_26C67D770;
        long long v9 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B430F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B43118()
{
  return 1;
}

uint64_t (***sub_215B43120())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B4319C(uint64_t a1)
{
  sub_215B2F000(v4, a1);
  sub_215B42E70(&v3, a1);
  sub_215B42E70(&v2, a1);
  operator new();
}

void sub_215B43278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x2166C4D20](v8, 0x10A3C40A1F8E8FFLL);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B432A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B432B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B432CC(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B432D8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C678, 0);
  if (!v5)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 1);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(v22 + 16);
    long long v15 = *(_OWORD *)v22;
    v16[0] = v11;
    *(void *)&long long v22 = 0;
    MEMORY[0x2166C4D20](v10, 0xC400A2AC0F1, v12);
    sub_215B42BDC(a1, (uint64_t *)&v22);
    v21[0] = (size_t)&v15;
    v21[1] = (size_t)&v22;
    sub_21584F0C8(v21);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_215B2F000(v21, (uint64_t)v5);
  sub_215B42E70(&v19, v6);
  long long v22 = v19;
  uint64_t v23 = v20;
  *(void *)&long long v15 = &unk_26C67BCE8;
  if (HIDWORD(v20) <= 0x20) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v7 = HIDWORD(v20);
  }
  v24[0] = *((void *)&v19 + 1);
  v24[1] = v20 | (unint64_t)(v7 << 32);
  sub_215B2E0F0((uint64_t)&v15, v24, &v22);
  *(void *)&long long v15 = &unk_26C67BCE8;
  sub_215B61CEC(v21);
  uint64_t v8 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v18;
      *(_OWORD *)(a1 + 48) = v18;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v22, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_12;
  }
  *(void *)&long long v22 = a1 + 16;
  ((void (*)(long long *))off_26C67C8D8[v8])(&v22);
LABEL_12:
  uint64_t v14 = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26C67B598;
  if (v14 != -1) {
    ((void (*)(long long *, void *))off_26C67C898[v14])(&v22, v16);
  }
  return result;
}

void sub_215B43524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[a14])(&a20, v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B43588(uint64_t a1)
{
  sub_215B42BDC(a1, v2);
  return v2[0];
}

void sub_215B435B0(uint64_t a1, int a2)
{
  if (a2 != 1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B42BDC(a1, (uint64_t *)&v3);
  operator new();
}

void sub_215B4365C(uint64_t a1, int a2)
{
  if (a2 != 1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B42E70(&v3, a1);
  operator new();
}

long long *sub_215B43708()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC78, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC78))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EC80))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC88, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EC88))
    {
LABEL_13:
      if (byte_26788EF5F < 0)
      {
        sub_215738B0C(&xmmword_26788EF30, (void *)qword_26788EF48, unk_26788EF50);
      }
      else
      {
        xmmword_26788EF30 = *(_OWORD *)&qword_26788EF48;
        unk_26788EF40 = unk_26788EF58;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788EF30, &dword_21572C000);
      __cxa_guard_release(&qword_26788EC80);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC90, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788EC90))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray8u>]", &qword_26788EF60);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788EF60, &dword_21572C000);
      __cxa_guard_release(&qword_26788EC90);
    }
    if ((atomic_load_explicit(&byte_26788EC98, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire((__guard *)&byte_26788EC98))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECA0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788ECA0))
      {
        if (byte_26788EF78[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788EF78, *(unint64_t *)&byte_26788EF78[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788EF78;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788EF90);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788EF90, &dword_21572C000);
        __cxa_guard_release(&qword_26788ECA0);
      }
      if (byte_26788EFA7 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788EF90, *((unint64_t *)&xmmword_26788EF90 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788EF90;
        uint64_t v12 = unk_26788EFA0;
      }
      sub_21584EB54(v11, (std::string *)&qword_26788EF48);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788EF48, &dword_21572C000);
      __cxa_guard_release(&qword_26788EC88);
      goto LABEL_13;
    }
    if (byte_26788EF77 >= 0) {
      size_t v1 = byte_26788EF77;
    }
    else {
      size_t v1 = unk_26788EF68;
    }
    if (byte_26788EF77 >= 0) {
      long long v2 = &qword_26788EF60;
    }
    else {
      long long v2 = (uint64_t *)qword_26788EF60;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788EF78[8] = v1;
      *(void *)&byte_26788EF78[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788EF78 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788EF78;
      byte_26788EF78[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788EF78, &dword_21572C000);
    __cxa_guard_release((__guard *)&byte_26788EC98);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788EF47 < 0)
  {
    sub_215738B0C(&xmmword_26788EF18, (void *)xmmword_26788EF30, *((unint64_t *)&xmmword_26788EF30 + 1));
  }
  else
  {
    xmmword_26788EF18 = xmmword_26788EF30;
    unk_26788EF28 = unk_26788EF40;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788EF18, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC78);
LABEL_2:
  if (byte_26788EF2F >= 0) {
    return &xmmword_26788EF18;
  }
  else {
    return (long long *)xmmword_26788EF18;
  }
}

void sub_215B43B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788EC88);
  __cxa_guard_abort(&qword_26788EC80);
  __cxa_guard_abort(&qword_26788EC78);
  _Unwind_Resume(a1);
}

void sub_215B43C2C(_Unwind_Exception *a1)
{
}

void sub_215B43C44()
{
}

void sub_215B43C8C(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B2EC30(a1, &v2);
    operator new();
  }
  sub_215B2F000(&v2, a1);
  operator new();
}

void sub_215B43DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B43E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B43E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B43E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B43E74()
{
  return 65792;
}

uint64_t sub_215B43E84(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67BD78;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x10) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = v4;
  }
  *(void *)&long long v9 = *(void *)a2;
  *((void *)&v9 + 1) = v3 | (v4 << 32);
  *(void *)a1 = &unk_26C67B7D8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v5 = a1 + 16;
  sub_215B33F8C(0, 2, &v9, a1 + 16);
  if (v9 && DWORD1(v9))
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v10, v5);
    sub_215B34320(v11, (uint64_t)v10);
    uint64_t v6 = v11[1];
    uint64_t v7 = v11[2];
    sub_215B61CEC(v10);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = v9;
  }
  *(void *)a1 = &unk_26C67BD78;
  return a1;
}

void sub_215B43F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_215B61CEC(&a16);
  uint64_t v19 = *(unsigned int *)(v16 + 40);
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v19])(&a15, v17);
  }
  *(_DWORD *)(v16 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_215B43FD4(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B7D8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B4404C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (sub_215B350D0(a1))
  {
    if (*(_DWORD *)(a1 + 52)) {
      BOOL v4 = *(_DWORD *)(a1 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a2 = 0;
    a2[1] = v5;
    a2[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
        uint64_t v14 = &off_26C67D770;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a1 + 16);
            if (v13)
            {
              uint64_t v14 = &off_26C67D770;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B34320(a2, (uint64_t)&v14);
        uint64_t v14 = &off_26C67D770;
        long long v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B442BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B442E0(void *a1, uint64_t a2)
{
  if (sub_215B350D0(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v16 = &off_26C67D770;
        uint64_t v17 = v8;
        long long v18 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v16 = &off_26C67D770;
              uint64_t v17 = v13;
              long long v18 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v17 = 0;
        long long v18 = 0;
        uint64_t v16 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B34320(&v14, (uint64_t)&v16);
        *a1 = v14;
        *(_OWORD *)(a1 + 1) = v15;
        uint64_t v16 = &off_26C67D770;
        long long v9 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B44564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B44588()
{
  return 2;
}

uint64_t (***sub_215B44590())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B4460C(uint64_t a1)
{
  sub_215B356EC(v4, a1);
  sub_215B442E0(&v3, a1);
  sub_215B442E0(&v2, a1);
  operator new();
}

void sub_215B446E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x2166C4D20](v8, 0x10A3C40A1F8E8FFLL);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B44714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B44728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4473C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B44748(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C690, 0);
  if (!v5)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 2);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(v22 + 16);
    long long v15 = *(_OWORD *)v22;
    v16[0] = v11;
    *(void *)&long long v22 = 0;
    MEMORY[0x2166C4D20](v10, 0xC400A2AC0F1, v12);
    sub_215B4404C(a1, (uint64_t *)&v22);
    sub_21584FC70((uint64_t *)&v15, (uint64_t)&v22);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_215B356EC(v21, (uint64_t)v5);
  sub_215B442E0(&v19, v6);
  long long v22 = v19;
  uint64_t v23 = v20;
  *(void *)&long long v15 = &unk_26C67BD78;
  if (HIDWORD(v20) <= 0x10) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = HIDWORD(v20);
  }
  v24[0] = *((void *)&v19 + 1);
  v24[1] = v20 | (unint64_t)(v7 << 32);
  sub_215B347DC((uint64_t)&v15, v24, &v22);
  *(void *)&long long v15 = &unk_26C67BD78;
  sub_215B61CEC(v21);
  uint64_t v8 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v18;
      *(_OWORD *)(a1 + 48) = v18;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v22, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_12;
  }
  *(void *)&long long v22 = a1 + 16;
  ((void (*)(long long *))off_26C67C8D8[v8])(&v22);
LABEL_12:
  uint64_t v14 = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26C67B7D8;
  if (v14 != -1) {
    ((void (*)(long long *, void *))off_26C67C898[v14])(&v22, v16);
  }
  return result;
}

void sub_215B4498C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[a14])(&a20, v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B449F0(uint64_t a1)
{
  sub_215B4404C(a1, v2);
  return v2[0];
}

void sub_215B44A18(uint64_t a1, int a2)
{
  if (a2 != 2
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4404C(a1, (uint64_t *)&v3);
  operator new();
}

void sub_215B44AC4(uint64_t a1, int a2)
{
  if (a2 != 2
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B442E0(&v3, a1);
  operator new();
}

long long *sub_215B44B70()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECA8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788ECA8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788ECB0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECB8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ECB8))
    {
LABEL_13:
      if (byte_26788EFEF < 0)
      {
        sub_215738B0C(&xmmword_26788EFC0, (void *)qword_26788EFD8, unk_26788EFE0);
      }
      else
      {
        xmmword_26788EFC0 = *(_OWORD *)&qword_26788EFD8;
        unk_26788EFD0 = unk_26788EFE8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788EFC0, &dword_21572C000);
      __cxa_guard_release(&qword_26788ECB0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECC0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788ECC0))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16u>]", &qword_26788EFF0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788EFF0, &dword_21572C000);
      __cxa_guard_release(&qword_26788ECC0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECC8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ECC8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECD0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788ECD0))
      {
        if (byte_26788F008[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F008, *(unint64_t *)&byte_26788F008[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F008;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F020);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F020, &dword_21572C000);
        __cxa_guard_release(&qword_26788ECD0);
      }
      if (byte_26788F037 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F020, *((unint64_t *)&xmmword_26788F020 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788F020;
        uint64_t v12 = unk_26788F030;
      }
      sub_21584F6EC(v11, (std::string *)&qword_26788EFD8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788EFD8, &dword_21572C000);
      __cxa_guard_release(&qword_26788ECB8);
      goto LABEL_13;
    }
    if (byte_26788F007 >= 0) {
      size_t v1 = byte_26788F007;
    }
    else {
      size_t v1 = unk_26788EFF8;
    }
    if (byte_26788F007 >= 0) {
      long long v2 = &qword_26788EFF0;
    }
    else {
      long long v2 = (uint64_t *)qword_26788EFF0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F008[8] = v1;
      *(void *)&byte_26788F008[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F008 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F008;
      byte_26788F008[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F008, &dword_21572C000);
    __cxa_guard_release(&qword_26788ECC8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788EFD7 < 0)
  {
    sub_215738B0C(&xmmword_26788EFA8, (void *)xmmword_26788EFC0, *((unint64_t *)&xmmword_26788EFC0 + 1));
  }
  else
  {
    xmmword_26788EFA8 = xmmword_26788EFC0;
    unk_26788EFB8 = unk_26788EFD0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788EFA8, &dword_21572C000);
  __cxa_guard_release(&qword_26788ECA8);
LABEL_2:
  if (byte_26788EFBF >= 0) {
    return &xmmword_26788EFA8;
  }
  else {
    return (long long *)xmmword_26788EFA8;
  }
}

void sub_215B44FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788ECB8);
  __cxa_guard_abort(&qword_26788ECB0);
  __cxa_guard_abort(&qword_26788ECA8);
  _Unwind_Resume(a1);
}

void sub_215B45094(_Unwind_Exception *a1)
{
}

void sub_215B450AC()
{
}

void sub_215B450F4(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B35318(&v2, a1);
    operator new();
  }
  sub_215B356EC(&v2, a1);
  operator new();
}

void sub_215B45248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B4527C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B45290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B452C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B452D8()
{
  return 65792;
}

void sub_215B452E4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215B452F0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67BE08;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x10) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = v4;
  }
  *(void *)&long long v9 = *(void *)a2;
  *((void *)&v9 + 1) = v3 | (v4 << 32);
  *(void *)a1 = &unk_26C67B988;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v5 = a1 + 16;
  sub_215B38EDC(0, 3, &v9, a1 + 16);
  if (v9 && DWORD1(v9))
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v10, v5);
    sub_215B34320(v11, (uint64_t)v10);
    uint64_t v6 = v11[1];
    uint64_t v7 = v11[2];
    sub_215B61CEC(v10);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = v9;
  }
  *(void *)a1 = &unk_26C67BE08;
  return a1;
}

void sub_215B453F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_215B61CEC(&a16);
  uint64_t v19 = *(unsigned int *)(v16 + 40);
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v19])(&a15, v17);
  }
  *(_DWORD *)(v16 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_215B45440(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B988;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B454B8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (sub_215B39EA8(a1))
  {
    if (*(_DWORD *)(a1 + 52)) {
      BOOL v4 = *(_DWORD *)(a1 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a2 = 0;
    a2[1] = v5;
    a2[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
        uint64_t v14 = &off_26C67D770;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a1 + 16);
            if (v13)
            {
              uint64_t v14 = &off_26C67D770;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B34320(a2, (uint64_t)&v14);
        uint64_t v14 = &off_26C67D770;
        long long v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B45728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4574C(void *a1, uint64_t a2)
{
  if (sub_215B39EA8(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v16 = &off_26C67D770;
        uint64_t v17 = v8;
        long long v18 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v16 = &off_26C67D770;
              uint64_t v17 = v13;
              long long v18 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v17 = 0;
        long long v18 = 0;
        uint64_t v16 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B34320(&v14, (uint64_t)&v16);
        *a1 = v14;
        *(_OWORD *)(a1 + 1) = v15;
        uint64_t v16 = &off_26C67D770;
        long long v9 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B459D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B459F4()
{
  return 3;
}

uint64_t (***sub_215B459FC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B45A78(uint64_t a1)
{
  sub_215B3A4C4(v4, a1);
  sub_215B4574C(&v3, a1);
  sub_215B4574C(&v2, a1);
  operator new();
}

void sub_215B45B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x2166C4D20](v8, 0x10A3C40A1F8E8FFLL);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B45B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B45B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B45BA8(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B45BB4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C6A8, 0);
  if (!v5)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 3);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(v22 + 16);
    long long v15 = *(_OWORD *)v22;
    v16[0] = v11;
    *(void *)&long long v22 = 0;
    MEMORY[0x2166C4D20](v10, 0xC400A2AC0F1, v12);
    sub_215B454B8(a1, (uint64_t *)&v22);
    v21[0] = (uint64_t)&v15;
    v21[1] = (uint64_t)&v22;
    *(void *)&double result = sub_2158A12BC(v21);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_215B3A4C4(v21, (uint64_t)v5);
  sub_215B4574C(&v19, v6);
  long long v22 = v19;
  uint64_t v23 = v20;
  *(void *)&long long v15 = &unk_26C67BE08;
  if (HIDWORD(v20) <= 0x10) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = HIDWORD(v20);
  }
  v24[0] = *((void *)&v19 + 1);
  v24[1] = v20 | (unint64_t)(v7 << 32);
  sub_215B395AC((uint64_t)&v15, v24, &v22);
  *(void *)&long long v15 = &unk_26C67BE08;
  sub_215B61CEC(v21);
  uint64_t v8 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v18;
      *(_OWORD *)(a1 + 48) = v18;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v22, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_12;
  }
  *(void *)&long long v22 = a1 + 16;
  ((void (*)(long long *))off_26C67C8D8[v8])(&v22);
LABEL_12:
  uint64_t v14 = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26C67B988;
  if (v14 != -1) {
    ((void (*)(long long *, void *))off_26C67C898[v14])(&v22, v16);
  }
  return result;
}

void sub_215B45E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[a14])(&a20, v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B45E64(uint64_t a1)
{
  sub_215B454B8(a1, v2);
  return v2[0];
}

void sub_215B45E8C(uint64_t a1, int a2)
{
  if (a2 != 3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B454B8(a1, (uint64_t *)&v3);
  operator new();
}

void sub_215B45F38(uint64_t a1, int a2)
{
  if (a2 != 3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4574C(&v3, a1);
  operator new();
}

long long *sub_215B45FE4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECD8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788ECD8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788ECE0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECE8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ECE8))
    {
LABEL_13:
      if (byte_26788F07F < 0)
      {
        sub_215738B0C(&xmmword_26788F050, (void *)qword_26788F068, unk_26788F070);
      }
      else
      {
        xmmword_26788F050 = *(_OWORD *)&qword_26788F068;
        unk_26788F060 = unk_26788F078;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F050, &dword_21572C000);
      __cxa_guard_release(&qword_26788ECE0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECF0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788ECF0))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray16f>]", &qword_26788F080);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F080, &dword_21572C000);
      __cxa_guard_release(&qword_26788ECF0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ECF8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ECF8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED00, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788ED00))
      {
        if (byte_26788F098[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F098, *(unint64_t *)&byte_26788F098[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F098;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F0B0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F0B0, &dword_21572C000);
        __cxa_guard_release(&qword_26788ED00);
      }
      if (byte_26788F0C7 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F0B0, *((unint64_t *)&xmmword_26788F0B0 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788F0B0;
        uint64_t v12 = unk_26788F0C0;
      }
      sub_2158502B4(v11, (std::string *)&qword_26788F068);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F068, &dword_21572C000);
      __cxa_guard_release(&qword_26788ECE8);
      goto LABEL_13;
    }
    if (byte_26788F097 >= 0) {
      size_t v1 = byte_26788F097;
    }
    else {
      size_t v1 = unk_26788F088;
    }
    if (byte_26788F097 >= 0) {
      long long v2 = &qword_26788F080;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F080;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F098[8] = v1;
      *(void *)&byte_26788F098[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F098 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F098;
      byte_26788F098[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F098, &dword_21572C000);
    __cxa_guard_release(&qword_26788ECF8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F067 < 0)
  {
    sub_215738B0C(&xmmword_26788F038, (void *)xmmword_26788F050, *((unint64_t *)&xmmword_26788F050 + 1));
  }
  else
  {
    xmmword_26788F038 = xmmword_26788F050;
    unk_26788F048 = unk_26788F060;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F038, &dword_21572C000);
  __cxa_guard_release(&qword_26788ECD8);
LABEL_2:
  if (byte_26788F04F >= 0) {
    return &xmmword_26788F038;
  }
  else {
    return (long long *)xmmword_26788F038;
  }
}

void sub_215B4646C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788ECE8);
  __cxa_guard_abort(&qword_26788ECE0);
  __cxa_guard_abort(&qword_26788ECD8);
  _Unwind_Resume(a1);
}

void sub_215B46508(_Unwind_Exception *a1)
{
}

void sub_215B46520()
{
}

void sub_215B46568(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B3A0F0(&v2, a1);
    operator new();
  }
  sub_215B3A4C4(&v2, a1);
  operator new();
}

void sub_215B466BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B466F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B46704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B46738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B4674C()
{
  return 65792;
}

void sub_215B46758(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215B46764(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67BE98;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  LODWORD(v4) = *(_DWORD *)(a2 + 12);
  if (v4 <= 8) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = v4;
  }
  *(void *)&long long v9 = *(void *)a2;
  *((void *)&v9 + 1) = v3 | (v4 << 32);
  *(void *)a1 = &unk_26C67BB38;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v5 = a1 + 16;
  sub_215B3DA3C(0, 4, &v9, a1 + 16);
  if (v9 && DWORD1(v9))
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v10, v5);
    sub_215B3DDD0(v11, (uint64_t)v10);
    uint64_t v6 = v11[1];
    uint64_t v7 = v11[2];
    sub_215B61CEC(v10);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = v9;
  }
  *(void *)a1 = &unk_26C67BE98;
  return a1;
}

void sub_215B46868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_215B61CEC(&a16);
  uint64_t v19 = *(unsigned int *)(v16 + 40);
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v19])(&a15, v17);
  }
  *(_DWORD *)(v16 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_215B468B4(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BB38;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B4692C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (sub_215B3EB80(a1))
  {
    if (*(_DWORD *)(a1 + 52)) {
      BOOL v4 = *(_DWORD *)(a1 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a2 = 0;
    a2[1] = v5;
    a2[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
        uint64_t v14 = &off_26C67D770;
        uint64_t v15 = v8;
        uint64_t v16 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a1 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a1 + 16);
            if (v13)
            {
              uint64_t v14 = &off_26C67D770;
              uint64_t v15 = v13;
              uint64_t v16 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v14 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B3DDD0(a2, (uint64_t)&v14);
        uint64_t v14 = &off_26C67D770;
        long long v9 = v16;
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B46B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B46BC0(void *a1, uint64_t a2)
{
  if (sub_215B3EB80(a2))
  {
    if (*(_DWORD *)(a2 + 52)) {
      BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 48);
    if (v4) {
      unint64_t v5 = 0;
    }
    uint64_t v6 = 0x100000000;
    if (v5 > 0x100000000) {
      uint64_t v6 = v5;
    }
    *a1 = 0;
    a1[1] = v5;
    a1[2] = (v5 != 0) | (unint64_t)(v6 << 32);
    if (HIDWORD(v5) * v6 == -1
      && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v8 = *(void *)(a2 + 24);
        uint64_t v7 = *(std::__shared_weak_count **)(a2 + 32);
        uint64_t v16 = &off_26C67D770;
        uint64_t v17 = v8;
        long long v18 = v7;
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
        if (v10)
        {
          uint64_t v11 = std::__shared_weak_count::lock(v10);
          uint64_t v12 = v11;
          if (v11)
          {
            uint64_t v13 = *(void *)(a2 + 16);
            if (v13)
            {
              uint64_t v16 = &off_26C67D770;
              uint64_t v17 = v13;
              long long v18 = v11;
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_25;
            }
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v17 = 0;
        long long v18 = 0;
        uint64_t v16 = &off_26C67D770;
        if (!v12) {
          goto LABEL_14;
        }
LABEL_25:
        if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_14:
        sub_215B3DDD0(&v14, (uint64_t)&v16);
        *a1 = v14;
        *(_OWORD *)(a1 + 1) = v15;
        uint64_t v16 = &off_26C67D770;
        long long v9 = v18;
        if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B46E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B46E68()
{
  return 4;
}

uint64_t (***sub_215B46E70())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B46EEC(uint64_t a1)
{
  sub_215B3F19C(v4, a1);
  sub_215B46BC0(&v3, a1);
  sub_215B46BC0(&v2, a1);
  operator new();
}

void sub_215B46FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x2166C4D20](v8, 0x10A3C40A1F8E8FFLL);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B46FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B47008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4701C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B47028(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C6C0, 0);
  if (!v5)
  {
    (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 4);
    uint64_t v10 = v22;
    uint64_t v11 = *(void *)(v22 + 16);
    long long v15 = *(_OWORD *)v22;
    v16[0] = v11;
    *(void *)&long long v22 = 0;
    MEMORY[0x2166C4D20](v10, 0xC400A2AC0F1, v12);
    sub_215B4692C(a1, (uint64_t *)&v22);
    *(float *)&double result = sub_21585114C((uint64_t)&v15, (uint64_t)&v22);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_215B3F19C(v21, (uint64_t)v5);
  sub_215B46BC0(&v19, v6);
  long long v22 = v19;
  uint64_t v23 = v20;
  *(void *)&long long v15 = &unk_26C67BE98;
  if (HIDWORD(v20) <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = HIDWORD(v20);
  }
  v24[0] = *((void *)&v19 + 1);
  v24[1] = v20 | (unint64_t)(v7 << 32);
  sub_215B3E28C((uint64_t)&v15, v24, &v22);
  *(void *)&long long v15 = &unk_26C67BE98;
  sub_215B61CEC(v21);
  uint64_t v8 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v18;
      *(_OWORD *)(a1 + 48) = v18;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v22, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_12;
  }
  *(void *)&long long v22 = a1 + 16;
  ((void (*)(long long *))off_26C67C8D8[v8])(&v22);
LABEL_12:
  uint64_t v14 = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26C67BB38;
  if (v14 != -1) {
    ((void (*)(long long *, void *))off_26C67C898[v14])(&v22, v16);
  }
  return result;
}

void sub_215B4726C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[a14])(&a20, v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B472D0(uint64_t a1)
{
  sub_215B4692C(a1, v2);
  return v2[0];
}

void sub_215B472F8(uint64_t a1, int a2)
{
  if (a2 != 4
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4692C(a1, (uint64_t *)&v3);
  operator new();
}

void sub_215B473A4(uint64_t a1, int a2)
{
  if (a2 != 4
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B46BC0(&v3, a1);
  operator new();
}

long long *sub_215B47450()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED08, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788ED08))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788ED10))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED18, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ED18))
    {
LABEL_13:
      if (byte_26788F10F < 0)
      {
        sub_215738B0C(&xmmword_26788F0E0, (void *)qword_26788F0F8, unk_26788F100);
      }
      else
      {
        xmmword_26788F0E0 = *(_OWORD *)&qword_26788F0F8;
        unk_26788F0F0 = unk_26788F108;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F0E0, &dword_21572C000);
      __cxa_guard_release(&qword_26788ED10);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED20, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788ED20))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Gray32f>]", &qword_26788F110);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F110, &dword_21572C000);
      __cxa_guard_release(&qword_26788ED20);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED28, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ED28))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED30, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788ED30))
      {
        if (byte_26788F128[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F128, *(unint64_t *)&byte_26788F128[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F128;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F140);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F140, &dword_21572C000);
        __cxa_guard_release(&qword_26788ED30);
      }
      if (byte_26788F157 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F140, *((unint64_t *)&xmmword_26788F140 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788F140;
        uint64_t v12 = unk_26788F150;
      }
      sub_215850BC8(v11, (std::string *)&qword_26788F0F8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F0F8, &dword_21572C000);
      __cxa_guard_release(&qword_26788ED18);
      goto LABEL_13;
    }
    if (byte_26788F127 >= 0) {
      size_t v1 = byte_26788F127;
    }
    else {
      size_t v1 = unk_26788F118;
    }
    if (byte_26788F127 >= 0) {
      long long v2 = &qword_26788F110;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F110;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F128[8] = v1;
      *(void *)&byte_26788F128[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F128 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F128;
      byte_26788F128[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F128, &dword_21572C000);
    __cxa_guard_release(&qword_26788ED28);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F0F7 < 0)
  {
    sub_215738B0C(&xmmword_26788F0C8, (void *)xmmword_26788F0E0, *((unint64_t *)&xmmword_26788F0E0 + 1));
  }
  else
  {
    xmmword_26788F0C8 = xmmword_26788F0E0;
    unk_26788F0D8 = unk_26788F0F0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F0C8, &dword_21572C000);
  __cxa_guard_release(&qword_26788ED08);
LABEL_2:
  if (byte_26788F0DF >= 0) {
    return &xmmword_26788F0C8;
  }
  else {
    return (long long *)xmmword_26788F0C8;
  }
}

void sub_215B478D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788ED18);
  __cxa_guard_abort(&qword_26788ED10);
  __cxa_guard_abort(&qword_26788ED08);
  _Unwind_Resume(a1);
}

void sub_215B47974(_Unwind_Exception *a1)
{
}

void sub_215B4798C()
{
}

void sub_215B479D4(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B3EDC8(&v2, a1);
    operator new();
  }
  sub_215B3F19C(&v2, a1);
  operator new();
}

void sub_215B47B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B47B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B47B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B47BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B47BB8()
{
  return 65792;
}

void sub_215B47BC4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215B47BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67BF28;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20) {
    uint64_t v4 = 32;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)uint64_t v14 = 2;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)uint64_t v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67B628;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B2F140(0, 5, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B2F4D4((uint64_t)v14, (uint64_t)v13);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67BF28;
  return a1;
}

void sub_215B47D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B47D94(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B47DB0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B628;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B47E28(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B303A4(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        uint64_t v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              uint64_t v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        uint64_t v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B2F4D4(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B480B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B480DC(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_215B303A4(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)uint64_t v21 = 2;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 2);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        uint64_t v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &off_26C67D770;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &off_26C67D770;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B2F4D4((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &off_26C67D770;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B48390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B483B4()
{
  return 5;
}

uint64_t (***sub_215B483BC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B48438(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B309E0(v4, a1);
  sub_215B480DC((uint64_t)v3, a1);
  sub_215B480DC((uint64_t)&v2, a1);
  operator new();
}

void sub_215B4857C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B485A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B485C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B485D4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B485E0(uint64_t a1, uint64_t *lpsrc)
{
  v36[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C6D8, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v30, lpsrc, 5);
    uint64_t v10 = *(void *)&v30[0];
    long long v12 = *(_OWORD *)(*(void *)&v30[0] + 16);
    long long v11 = *(_OWORD *)(*(void *)&v30[0] + 32);
    long long v21 = **(_OWORD **)&v30[0];
    long long v22 = v12;
    long long v23 = v11;
    *(void *)&v30[0] = 0;
    MEMORY[0x2166C4D20](v10, 0xC400A2AC0F1, v13, v14, v15, v16);
    sub_215B47E28(a1, (uint64_t)v30);
    *(void *)&v27[0] = &v21;
    *((void *)&v27[0] + 1) = v30;
    sub_2158A24F4((size_t *)v27);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_215B309E0(v29, (uint64_t)v5);
  sub_215B480DC((uint64_t)v27, v6);
  v30[0] = v27[0];
  v30[1] = v27[1];
  v30[2] = v28;
  *(void *)&long long v21 = &unk_26C67BF28;
  if (HIDWORD(v28) <= 0x20) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v7 = HIDWORD(v28);
  }
  *(void *)&v31[1] = v28;
  v31[0] = 2;
  LODWORD(v36[0]) = 1;
  *(void *)((char *)v36 + 4) = DWORD2(v28) | (unint64_t)(v7 << 32);
  uint64_t v32 = v36[0];
  int v33 = v7;
  uint64_t v34 = v28;
  uint64_t v35 = *(void *)((char *)v36 + 4);
  sub_215B2FA30((uint64_t)&v21, (uint64_t)v31, v30);
  *(void *)&long long v21 = &unk_26C67BF28;
  sub_215B61CEC(v29);
  uint64_t v8 = DWORD2(v23);
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v24;
      long long v20 = v25;
      *(_OWORD *)(a1 + 48) = v24;
      *(_OWORD *)(a1 + 64) = v20;
      *(void *)(a1 + 80) = v26;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26C67C898[v9])(v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_11;
  }
  *(void *)&v30[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26C67C8D8[v8])(v30);
LABEL_11:
  uint64_t v18 = DWORD2(v23);
  double result = *(double *)&v24;
  long long v19 = v25;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v26;
  *(void *)&long long v21 = &unk_26C67B628;
  if (v18 != -1) {
    ((void (*)(_OWORD *, long long *))off_26C67C898[v18])(v30, &v22);
  }
  return result;
}

void sub_215B488A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4892C(uint64_t a1)
{
  sub_215B47E28(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B48954(uint64_t a1, int a2)
{
  if (a2 != 5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B47E28(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B48A00(uint64_t a1, int a2)
{
  if (a2 != 5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B480DC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B48AAC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED38, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788ED38))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788ED40))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED48, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ED48))
    {
LABEL_13:
      if (byte_26788F19F < 0)
      {
        sub_215738B0C(&xmmword_26788F170, (void *)qword_26788F188, unk_26788F190);
      }
      else
      {
        xmmword_26788F170 = *(_OWORD *)&qword_26788F188;
        unk_26788F180 = unk_26788F198;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F170, &dword_21572C000);
      __cxa_guard_release(&qword_26788ED40);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED50, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788ED50))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two8u>]", &qword_26788F1A0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F1A0, &dword_21572C000);
      __cxa_guard_release(&qword_26788ED50);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED58, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ED58))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED60, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788ED60))
      {
        if (byte_26788F1B8[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F1B8, *(unint64_t *)&byte_26788F1B8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F1B8;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F1D0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F1D0, &dword_21572C000);
        __cxa_guard_release(&qword_26788ED60);
      }
      if (byte_26788F1E7 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F1D0, *((unint64_t *)&xmmword_26788F1D0 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F1D0;
        uint64_t v12 = unk_26788F1E0;
      }
      sub_215851790(v11, (std::string *)&qword_26788F188);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F188, &dword_21572C000);
      __cxa_guard_release(&qword_26788ED48);
      goto LABEL_13;
    }
    if (byte_26788F1B7 >= 0) {
      size_t v1 = byte_26788F1B7;
    }
    else {
      size_t v1 = unk_26788F1A8;
    }
    if (byte_26788F1B7 >= 0) {
      long long v2 = &qword_26788F1A0;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F1A0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F1B8[8] = v1;
      *(void *)&byte_26788F1B8[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F1B8 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F1B8;
      byte_26788F1B8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F1B8, &dword_21572C000);
    __cxa_guard_release(&qword_26788ED58);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F187 < 0)
  {
    sub_215738B0C(&xmmword_26788F158, (void *)xmmword_26788F170, *((unint64_t *)&xmmword_26788F170 + 1));
  }
  else
  {
    xmmword_26788F158 = xmmword_26788F170;
    unk_26788F168 = unk_26788F180;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F158, &dword_21572C000);
  __cxa_guard_release(&qword_26788ED38);
LABEL_2:
  if (byte_26788F16F >= 0) {
    return &xmmword_26788F158;
  }
  else {
    return (long long *)xmmword_26788F158;
  }
}

void sub_215B48F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788ED48);
  __cxa_guard_abort(&qword_26788ED40);
  __cxa_guard_abort(&qword_26788ED38);
  _Unwind_Resume(a1);
}

void sub_215B48FD0(_Unwind_Exception *a1)
{
}

void sub_215B48FE8()
{
}

void sub_215B49030(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B305EC(&v2, a1);
    operator new();
  }
  sub_215B309E0(&v2, a1);
  operator new();
}

void sub_215B49184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B491B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B491CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B49200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B49214()
{
  return 65792;
}

void sub_215B49220(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215B4922C(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67BFB8;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)uint64_t v14 = 2;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)long long v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67BA18;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B3A600(0, 7, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B3A994((uint64_t)v14, (uint64_t)v13);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67BFB8;
  return a1;
}

void sub_215B493A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B493F0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4940C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BA18;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B49484(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B3B944(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        long long v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        uint64_t v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              uint64_t v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        uint64_t v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3A994(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B49714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B49738(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_215B3B944(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)uint64_t v21 = 2;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 2);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &off_26C67D770;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &off_26C67D770;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3A994((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &off_26C67D770;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B499EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B49A10()
{
  return 7;
}

uint64_t (***sub_215B49A18())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B49A94(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B3BF80(v4, a1);
  sub_215B49738((uint64_t)v3, a1);
  sub_215B49738((uint64_t)&v2, a1);
  operator new();
}

void sub_215B49BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B49C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B49C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B49C30(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B49C3C(uint64_t a1, uint64_t *lpsrc)
{
  v36[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C6F0, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v30, lpsrc, 7);
    uint64_t v10 = *(void *)&v30[0];
    long long v12 = *(_OWORD *)(*(void *)&v30[0] + 16);
    long long v11 = *(_OWORD *)(*(void *)&v30[0] + 32);
    long long v21 = **(_OWORD **)&v30[0];
    long long v22 = v12;
    long long v23 = v11;
    *(void *)&v30[0] = 0;
    MEMORY[0x2166C4D20](v10, 0xC400A2AC0F1, v13, v14, v15, v16);
    sub_215B49484(a1, (uint64_t)v30);
    *(void *)&v27[0] = &v21;
    *((void *)&v27[0] + 1) = v30;
    *(void *)&double result = sub_2158A3B98((uint64_t *)v27);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_215B3BF80(v29, (uint64_t)v5);
  sub_215B49738((uint64_t)v27, v6);
  v30[0] = v27[0];
  v30[1] = v27[1];
  v30[2] = v28;
  *(void *)&long long v21 = &unk_26C67BFB8;
  if (HIDWORD(v28) <= 0x10) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = HIDWORD(v28);
  }
  *(void *)&v31[1] = v28;
  v31[0] = 2;
  LODWORD(v36[0]) = 1;
  *(void *)((char *)v36 + 4) = DWORD2(v28) | (unint64_t)(v7 << 32);
  uint64_t v32 = v36[0];
  int v33 = v7;
  uint64_t v34 = v28;
  uint64_t v35 = *(void *)((char *)v36 + 4);
  sub_215B3AFC8((uint64_t)&v21, (uint64_t)v31, v30);
  *(void *)&long long v21 = &unk_26C67BFB8;
  sub_215B61CEC(v29);
  uint64_t v8 = DWORD2(v23);
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v24;
      long long v20 = v25;
      *(_OWORD *)(a1 + 48) = v24;
      *(_OWORD *)(a1 + 64) = v20;
      *(void *)(a1 + 80) = v26;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26C67C898[v9])(v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_11;
  }
  *(void *)&v30[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26C67C8D8[v8])(v30);
LABEL_11:
  uint64_t v18 = DWORD2(v23);
  double result = *(double *)&v24;
  long long v19 = v25;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v26;
  *(void *)&long long v21 = &unk_26C67BA18;
  if (v18 != -1) {
    ((void (*)(_OWORD *, long long *))off_26C67C898[v18])(v30, &v22);
  }
  return result;
}

void sub_215B49F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B49F88(uint64_t a1)
{
  sub_215B49484(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B49FB0(uint64_t a1, int a2)
{
  if (a2 != 7
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B49484(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B4A05C(uint64_t a1, int a2)
{
  if (a2 != 7
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B49738((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B4A108()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED68, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788ED68))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788ED70))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED78, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ED78))
    {
LABEL_13:
      if (byte_26788F22F < 0)
      {
        sub_215738B0C(&xmmword_26788F200, (void *)qword_26788F218, unk_26788F220);
      }
      else
      {
        xmmword_26788F200 = *(_OWORD *)&qword_26788F218;
        unk_26788F210 = unk_26788F228;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F200, &dword_21572C000);
      __cxa_guard_release(&qword_26788ED70);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED80, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788ED80))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two16f>]", &qword_26788F230);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F230, &dword_21572C000);
      __cxa_guard_release(&qword_26788ED80);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED88, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788ED88))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED90, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788ED90))
      {
        if (byte_26788F248[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F248, *(unint64_t *)&byte_26788F248[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F248;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F260);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F260, &dword_21572C000);
        __cxa_guard_release(&qword_26788ED90);
      }
      if (byte_26788F277 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F260, *((unint64_t *)&xmmword_26788F260 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F260;
        uint64_t v12 = unk_26788F270;
      }
      sub_215853C6C(v11, (std::string *)&qword_26788F218);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F218, &dword_21572C000);
      __cxa_guard_release(&qword_26788ED78);
      goto LABEL_13;
    }
    if (byte_26788F247 >= 0) {
      size_t v1 = byte_26788F247;
    }
    else {
      size_t v1 = unk_26788F238;
    }
    if (byte_26788F247 >= 0) {
      long long v2 = &qword_26788F230;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F230;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F248[8] = v1;
      *(void *)&byte_26788F248[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F248 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F248;
      byte_26788F248[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F248, &dword_21572C000);
    __cxa_guard_release(&qword_26788ED88);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F217 < 0)
  {
    sub_215738B0C(&xmmword_26788F1E8, (void *)xmmword_26788F200, *((unint64_t *)&xmmword_26788F200 + 1));
  }
  else
  {
    xmmword_26788F1E8 = xmmword_26788F200;
    unk_26788F1F8 = unk_26788F210;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F1E8, &dword_21572C000);
  __cxa_guard_release(&qword_26788ED68);
LABEL_2:
  if (byte_26788F1FF >= 0) {
    return &xmmword_26788F1E8;
  }
  else {
    return (long long *)xmmword_26788F1E8;
  }
}

void sub_215B4A590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788ED78);
  __cxa_guard_abort(&qword_26788ED70);
  __cxa_guard_abort(&qword_26788ED68);
  _Unwind_Resume(a1);
}

void sub_215B4A62C(_Unwind_Exception *a1)
{
}

void sub_215B4A644()
{
}

void sub_215B4A68C(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B3BB8C(&v2, a1);
    operator new();
  }
  sub_215B3BF80(&v2, a1);
  operator new();
}

void sub_215B4A7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B4A814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B4A828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B4A85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B4A870()
{
  return 65792;
}

void sub_215B4A87C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215B4A888(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67C048;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 8) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)uint64_t v14 = 2;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)long long v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67BBC8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B3F2D8(0, 8, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B3F82C((uint64_t)v14, (uint64_t)v13);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67C048;
  return a1;
}

void sub_215B4AA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B4AA4C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4AA68(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BBC8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B4AAE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B406D8(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 2;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 2);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        long long v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        uint64_t v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              uint64_t v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        uint64_t v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3F82C(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B4AD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B4AD94(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_215B406D8(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)uint64_t v21 = 2;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 2 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x1FFFFFFFFLL | ((unint64_t)(v7 >> 1) << 33);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 2);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &off_26C67D770;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &off_26C67D770;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3F82C((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &off_26C67D770;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B4B048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B4B06C()
{
  return 8;
}

uint64_t (***sub_215B4B074())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B4B0F0(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B40D10(v4, a1);
  sub_215B4AD94((uint64_t)v3, a1);
  sub_215B4AD94((uint64_t)&v2, a1);
  operator new();
}

void sub_215B4B234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4B260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4B278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4B28C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B4B298(uint64_t a1, uint64_t *lpsrc)
{
  v36[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C708, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v30, lpsrc, 8);
    uint64_t v10 = *(void *)&v30[0];
    long long v12 = *(_OWORD *)(*(void *)&v30[0] + 16);
    long long v11 = *(_OWORD *)(*(void *)&v30[0] + 32);
    long long v21 = **(_OWORD **)&v30[0];
    long long v22 = v12;
    long long v23 = v11;
    *(void *)&v30[0] = 0;
    MEMORY[0x2166C4D20](v10, 0xC400A2AC0F1, v13, v14, v15, v16);
    sub_215B4AAE0(a1, (uint64_t)v30);
    *(void *)&v27[0] = &v21;
    *((void *)&v27[0] + 1) = v30;
    *(float *)&double result = sub_2158A4CE8((uint64_t *)v27);
    return result;
  }
  uint64_t v6 = (uint64_t)v5;
  sub_215B40D10(v29, (uint64_t)v5);
  sub_215B4AD94((uint64_t)v27, v6);
  v30[0] = v27[0];
  v30[1] = v27[1];
  v30[2] = v28;
  *(void *)&long long v21 = &unk_26C67C048;
  if (HIDWORD(v28) <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = HIDWORD(v28);
  }
  *(void *)&v31[1] = v28;
  v31[0] = 2;
  LODWORD(v36[0]) = 1;
  *(void *)((char *)v36 + 4) = DWORD2(v28) | (unint64_t)(v7 << 32);
  uint64_t v32 = v36[0];
  int v33 = v7;
  uint64_t v34 = v28;
  uint64_t v35 = *(void *)((char *)v36 + 4);
  sub_215B3FD5C((uint64_t)&v21, (uint64_t)v31, v30);
  *(void *)&long long v21 = &unk_26C67C048;
  sub_215B61CEC(v29);
  uint64_t v8 = DWORD2(v23);
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v24;
      long long v20 = v25;
      *(_OWORD *)(a1 + 48) = v24;
      *(_OWORD *)(a1 + 64) = v20;
      *(void *)(a1 + 80) = v26;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26C67C898[v9])(v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_11;
  }
  *(void *)&v30[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26C67C8D8[v8])(v30);
LABEL_11:
  uint64_t v18 = DWORD2(v23);
  double result = *(double *)&v24;
  long long v19 = v25;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v26;
  *(void *)&long long v21 = &unk_26C67BBC8;
  if (v18 != -1) {
    ((void (*)(_OWORD *, long long *))off_26C67C898[v18])(v30, &v22);
  }
  return result;
}

void sub_215B4B560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4B5E4(uint64_t a1)
{
  sub_215B4AAE0(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B4B60C(uint64_t a1, int a2)
{
  if (a2 != 8
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4AAE0(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B4B6B8(uint64_t a1, int a2)
{
  if (a2 != 8
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4AD94((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B4B764()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788ED98, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788ED98))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EDA0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDA8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EDA8))
    {
LABEL_13:
      if (byte_26788F2BF < 0)
      {
        sub_215738B0C(&xmmword_26788F290, (void *)qword_26788F2A8, unk_26788F2B0);
      }
      else
      {
        xmmword_26788F290 = *(_OWORD *)&qword_26788F2A8;
        unk_26788F2A0 = unk_26788F2B8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F290, &dword_21572C000);
      __cxa_guard_release(&qword_26788EDA0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDB0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788EDB0))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Two32f>]", &qword_26788F2C0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F2C0, &dword_21572C000);
      __cxa_guard_release(&qword_26788EDB0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDB8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EDB8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDC0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788EDC0))
      {
        if (byte_26788F2D8[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F2D8, *(unint64_t *)&byte_26788F2D8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F2D8;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F2F0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F2F0, &dword_21572C000);
        __cxa_guard_release(&qword_26788EDC0);
      }
      if (byte_26788F307 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F2F0, *((unint64_t *)&xmmword_26788F2F0 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F2F0;
        uint64_t v12 = unk_26788F300;
      }
      sub_2158547F4(v11, (std::string *)&qword_26788F2A8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F2A8, &dword_21572C000);
      __cxa_guard_release(&qword_26788EDA8);
      goto LABEL_13;
    }
    if (byte_26788F2D7 >= 0) {
      size_t v1 = byte_26788F2D7;
    }
    else {
      size_t v1 = unk_26788F2C8;
    }
    if (byte_26788F2D7 >= 0) {
      long long v2 = &qword_26788F2C0;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F2C0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F2D8[8] = v1;
      *(void *)&byte_26788F2D8[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F2D8 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F2D8;
      byte_26788F2D8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F2D8, &dword_21572C000);
    __cxa_guard_release(&qword_26788EDB8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F2A7 < 0)
  {
    sub_215738B0C(&xmmword_26788F278, (void *)xmmword_26788F290, *((unint64_t *)&xmmword_26788F290 + 1));
  }
  else
  {
    xmmword_26788F278 = xmmword_26788F290;
    unk_26788F288 = unk_26788F2A0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F278, &dword_21572C000);
  __cxa_guard_release(&qword_26788ED98);
LABEL_2:
  if (byte_26788F28F >= 0) {
    return &xmmword_26788F278;
  }
  else {
    return (long long *)xmmword_26788F278;
  }
}

void sub_215B4BBEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788EDA8);
  __cxa_guard_abort(&qword_26788EDA0);
  __cxa_guard_abort(&qword_26788ED98);
  _Unwind_Resume(a1);
}

void sub_215B4BC88(_Unwind_Exception *a1)
{
}

void sub_215B4BCA0()
{
}

void sub_215B4BCE8(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B40920(a1, &v2);
    operator new();
  }
  sub_215B40D10(&v2, a1);
  operator new();
}

void sub_215B4BE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B4BE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B4BE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B4BEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B4BED0()
{
  return 65792;
}

uint64_t sub_215B4BEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67C0D8;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20) {
    uint64_t v4 = 32;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)uint64_t v14 = 3;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)long long v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67B6B8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B30B1C(0, 21, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B30EB0((uint64_t)v13, (uint64_t)v14);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67C0D8;
  return a1;
}

void sub_215B4C05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B4C0A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4C0C0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B6B8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B4C138(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_215B31EE0(a1))
  {
    sub_215B59AFC(a2, 0, (_DWORD *)(a1 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a1 + 24);
        char v4 = *(std::__shared_weak_count **)(a1 + 32);
        long long v11 = &off_26C67D770;
        uint64_t v12 = v5;
        uint64_t v13 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        unint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
        if (v7)
        {
          long long v8 = std::__shared_weak_count::lock(v7);
          long long v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a1 + 16);
            if (v10)
            {
              long long v11 = &off_26C67D770;
              uint64_t v12 = v10;
              uint64_t v13 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          long long v9 = 0;
        }
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        long long v11 = &off_26C67D770;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_215B30EB0((uint64_t)&v11, a2);
        long long v11 = &off_26C67D770;
        uint64_t v6 = v13;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B4C354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4C378(uint64_t a1, uint64_t a2)
{
  if (sub_215B31EE0(a2))
  {
    sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        char v4 = *(std::__shared_weak_count **)(a2 + 32);
        long long v15 = &off_26C67D770;
        uint64_t v16 = v5;
        uint64_t v17 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          long long v8 = std::__shared_weak_count::lock(v7);
          long long v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              long long v15 = &off_26C67D770;
              uint64_t v16 = v10;
              uint64_t v17 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          long long v9 = 0;
        }
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        long long v15 = &off_26C67D770;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_215B30EB0((uint64_t)&v15, (uint64_t)&v11);
        *(void *)a1 = v11;
        *(_OWORD *)(a1 + 8) = v12;
        *(_OWORD *)(a1 + 24) = v13;
        *(void *)(a1 + 40) = v14;
        long long v15 = &off_26C67D770;
        uint64_t v6 = v17;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B4C5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B4C5DC()
{
  return 21;
}

uint64_t (***sub_215B4C5E4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B4C660(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B324A8(v4, a1);
  sub_215B4C378((uint64_t)v3, a1);
  sub_215B4C378((uint64_t)&v2, a1);
  operator new();
}

void sub_215B4C7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4C7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4C7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4C7FC(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B4C808(uint64_t a1, uint64_t *lpsrc)
{
  v47[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C720, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_215B324A8(v38, (uint64_t)v5);
    sub_215B4C378((uint64_t)v36, v6);
    long long v39 = v36[0];
    long long v40 = v36[1];
    long long v41 = v37;
    *(void *)&long long v30 = &unk_26C67C0D8;
    if (HIDWORD(v37) <= 0x20) {
      uint64_t v7 = 32;
    }
    else {
      uint64_t v7 = HIDWORD(v37);
    }
    *(void *)&v42[1] = v37;
    v42[0] = 3;
    LODWORD(v47[0]) = 1;
    *(void *)((char *)v47 + 4) = DWORD2(v37) | (unint64_t)(v7 << 32);
    uint64_t v43 = v47[0];
    int v44 = v7;
    uint64_t v45 = v37;
    uint64_t v46 = *(void *)((char *)v47 + 4);
    sub_215B31434((uint64_t)&v30, (uint64_t)v42, &v39);
    *(void *)&long long v30 = &unk_26C67C0D8;
    sub_215B61CEC(v38);
    uint64_t v8 = DWORD2(v32);
    *(_DWORD *)(a1 + 8) = DWORD2(v30);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v33;
        long long v29 = v34;
        *(_OWORD *)(a1 + 48) = v33;
        *(_OWORD *)(a1 + 64) = v29;
        *(void *)(a1 + 80) = v35;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v39, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v39 = a1 + 16;
    ((void (*)(long long *))off_26C67C8D8[v8])(&v39);
LABEL_13:
    uint64_t v13 = DWORD2(v32);
    double result = *(double *)&v33;
    long long v14 = v34;
    *(_OWORD *)(a1 + 48) = v33;
    *(_OWORD *)(a1 + 64) = v14;
    *(void *)(a1 + 80) = v35;
    *(void *)&long long v30 = &unk_26C67B6B8;
    if (v13 != -1) {
      ((void (*)(long long *, long long *))off_26C67C898[v13])(&v39, &v31);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v39, lpsrc, 21);
  long long v11 = *(_OWORD *)(v39 + 16);
  long long v10 = *(_OWORD *)(v39 + 32);
  long long v30 = *(_OWORD *)v39;
  long long v31 = v11;
  long long v32 = v10;
  *(void *)&long long v39 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B4C138(a1, (uint64_t)&v39);
  *(void *)&v36[0] = &v30;
  *((void *)&v36[0] + 1) = &v39;
  if (DWORD1(v31) == 1 && DWORD1(v40) == 1)
  {
    sub_2158A2610((size_t *)v36);
  }
  else if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    int v15 = HIDWORD(v30) - 1;
    uint64_t v16 = DWORD2(v31);
    uint64_t v17 = DWORD2(v40);
    uint64_t v18 = (unsigned char *)v30;
    uint64_t v19 = (unsigned char *)v39;
    int v20 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v21 = HIDWORD(v40);
      uint64_t v22 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *uint64_t v19 = *v18;
          v19[1] = v18[1];
          v19[2] = v18[2];
          v18 += v22;
          v19 += v21;
          --v20;
        }
        while (v20);
      }
      else
      {
        int v23 = 0;
        long long v24 = (unsigned char *)(v39 + 2);
        long long v25 = (unsigned char *)(v30 + 2);
        do
        {
          uint64_t v26 = v25;
          uint64_t v27 = v24;
          int v28 = v15;
          do
          {
            *(v27 - 2) = *(v26 - 2);
            *(v27 - 1) = *(v26 - 1);
            *uint64_t v27 = *v26;
            v27 += v17;
            v26 += v16;
            --v28;
          }
          while (v28);
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = *v26;
          v18 += v22;
          v19 += v21;
          ++v23;
          v24 += v21;
          v25 += v22;
        }
        while (v23 != v20);
      }
    }
    for (; v15; --v15)
    {
      *uint64_t v19 = *v18;
      v19[1] = v18[1];
      v19[2] = v18[2];
      v18 += v16;
      v19 += v17;
    }
    *uint64_t v19 = *v18;
    v19[1] = v18[1];
    v19[2] = v18[2];
  }
  return result;
}

void sub_215B4CBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4CC80(uint64_t a1)
{
  sub_215B4C138(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B4CCA8(uint64_t a1, int a2)
{
  if (a2 != 21
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4C138(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B4CD54(uint64_t a1, int a2)
{
  if (a2 != 21
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4C378((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B4CE00()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDC8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EDC8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EDD0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDD8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EDD8))
    {
LABEL_13:
      if (byte_26788F34F < 0)
      {
        sub_215738B0C(&xmmword_26788F320, (void *)qword_26788F338, unk_26788F340);
      }
      else
      {
        xmmword_26788F320 = *(_OWORD *)&qword_26788F338;
        unk_26788F330 = unk_26788F348;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F320, &dword_21572C000);
      __cxa_guard_release(&qword_26788EDD0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDE0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788EDE0))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb8u>]", &qword_26788F350);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F350, &dword_21572C000);
      __cxa_guard_release(&qword_26788EDE0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDE8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EDE8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDF0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788EDF0))
      {
        if (byte_26788F368[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F368, *(unint64_t *)&byte_26788F368[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F368;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F380);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F380, &dword_21572C000);
        __cxa_guard_release(&qword_26788EDF0);
      }
      if (byte_26788F397 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F380, *((unint64_t *)&xmmword_26788F380 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F380;
        uint64_t v12 = unk_26788F390;
      }
      sub_21585B698(v11, (std::string *)&qword_26788F338);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F338, &dword_21572C000);
      __cxa_guard_release(&qword_26788EDD8);
      goto LABEL_13;
    }
    if (byte_26788F367 >= 0) {
      size_t v1 = byte_26788F367;
    }
    else {
      size_t v1 = unk_26788F358;
    }
    if (byte_26788F367 >= 0) {
      long long v2 = &qword_26788F350;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F350;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F368[8] = v1;
      *(void *)&byte_26788F368[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F368 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F368;
      byte_26788F368[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F368, &dword_21572C000);
    __cxa_guard_release(&qword_26788EDE8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F337 < 0)
  {
    sub_215738B0C(&xmmword_26788F308, (void *)xmmword_26788F320, *((unint64_t *)&xmmword_26788F320 + 1));
  }
  else
  {
    xmmword_26788F308 = xmmword_26788F320;
    unk_26788F318 = unk_26788F330;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F308, &dword_21572C000);
  __cxa_guard_release(&qword_26788EDC8);
LABEL_2:
  if (byte_26788F31F >= 0) {
    return &xmmword_26788F308;
  }
  else {
    return (long long *)xmmword_26788F308;
  }
}

void sub_215B4D288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788EDD8);
  __cxa_guard_abort(&qword_26788EDD0);
  __cxa_guard_abort(&qword_26788EDC8);
  _Unwind_Resume(a1);
}

void sub_215B4D324(_Unwind_Exception *a1)
{
}

void sub_215B4D33C()
{
}

void sub_215B4D384(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B32128(&v2, a1);
    operator new();
  }
  sub_215B324A8(&v2, a1);
  operator new();
}

void sub_215B4D4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B4D50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B4D520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B4D554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B4D568()
{
  return 65792;
}

void sub_215B4D574(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215B4D580(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67C168;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)long long v14 = 3;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)long long v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)long long v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67B868;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B35828(0, 22, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B35BBC((uint64_t)v13, (uint64_t)v14);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67C168;
  return a1;
}

void sub_215B4D6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B4D744(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4D760(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B868;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B4D7D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (sub_215B36C14(a1))
  {
    sub_215B59AFC(a2, 0, (_DWORD *)(a1 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a1 + 24);
        char v4 = *(std::__shared_weak_count **)(a1 + 32);
        long long v11 = &off_26C67D770;
        uint64_t v12 = v5;
        uint64_t v13 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        unint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
        if (v7)
        {
          long long v8 = std::__shared_weak_count::lock(v7);
          long long v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a1 + 16);
            if (v10)
            {
              long long v11 = &off_26C67D770;
              uint64_t v12 = v10;
              uint64_t v13 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          long long v9 = 0;
        }
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        long long v11 = &off_26C67D770;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_215B35BBC((uint64_t)&v11, a2);
        long long v11 = &off_26C67D770;
        uint64_t v6 = v13;
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B4D9F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4DA18(uint64_t a1, uint64_t a2)
{
  if (sub_215B36C14(a2))
  {
    sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v5 = *(void *)(a2 + 24);
        char v4 = *(std::__shared_weak_count **)(a2 + 32);
        long long v15 = &off_26C67D770;
        uint64_t v16 = v5;
        uint64_t v17 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_8;
      case 3:
        unint64_t v7 = *(std::__shared_weak_count **)(a2 + 24);
        if (v7)
        {
          long long v8 = std::__shared_weak_count::lock(v7);
          long long v9 = v8;
          if (v8)
          {
            uint64_t v10 = *(void *)(a2 + 16);
            if (v10)
            {
              long long v15 = &off_26C67D770;
              uint64_t v16 = v10;
              uint64_t v17 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_18;
            }
          }
        }
        else
        {
          long long v9 = 0;
        }
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        long long v15 = &off_26C67D770;
        if (!v9) {
          goto LABEL_8;
        }
LABEL_18:
        if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
LABEL_8:
        sub_215B35BBC((uint64_t)&v15, (uint64_t)&v11);
        *(void *)a1 = v11;
        *(_OWORD *)(a1 + 8) = v12;
        *(_OWORD *)(a1 + 24) = v13;
        *(void *)(a1 + 40) = v14;
        long long v15 = &off_26C67D770;
        uint64_t v6 = v17;
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B4DC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215B62EA4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B4DC7C()
{
  return 22;
}

uint64_t (***sub_215B4DC84())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B4DD00(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B371DC(v4, a1);
  sub_215B4DA18((uint64_t)v3, a1);
  sub_215B4DA18((uint64_t)&v2, a1);
  operator new();
}

void sub_215B4DE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4DE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4DE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4DE9C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_215B4DEA8(uint64_t a1, uint64_t *lpsrc)
{
  v47[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C738, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_215B371DC(v38, (uint64_t)v5);
    sub_215B4DA18((uint64_t)v36, v6);
    long long v39 = v36[0];
    long long v40 = v36[1];
    long long v41 = v37;
    *(void *)&long long v30 = &unk_26C67C168;
    if (HIDWORD(v37) <= 0x10) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = HIDWORD(v37);
    }
    *(void *)&v42[1] = v37;
    v42[0] = 3;
    LODWORD(v47[0]) = 1;
    *(void *)((char *)v47 + 4) = DWORD2(v37) | (unint64_t)(v7 << 32);
    uint64_t v43 = v47[0];
    int v44 = v7;
    uint64_t v45 = v37;
    uint64_t v46 = *(void *)((char *)v47 + 4);
    sub_215B36140((uint64_t)&v30, (uint64_t)v42, &v39);
    *(void *)&long long v30 = &unk_26C67C168;
    sub_215B61CEC(v38);
    uint64_t v8 = DWORD2(v32);
    *(_DWORD *)(a1 + 8) = DWORD2(v30);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        long long v29 = v34;
        *(_OWORD *)(a1 + 48) = v33;
        *(_OWORD *)(a1 + 64) = v29;
        *(void *)(a1 + 80) = v35;
        return;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v39, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v39 = a1 + 16;
    ((void (*)(long long *))off_26C67C8D8[v8])(&v39);
LABEL_13:
    uint64_t v12 = DWORD2(v32);
    long long v13 = v34;
    *(_OWORD *)(a1 + 48) = v33;
    *(_OWORD *)(a1 + 64) = v13;
    *(void *)(a1 + 80) = v35;
    *(void *)&long long v30 = &unk_26C67B868;
    if (v12 != -1) {
      ((void (*)(long long *, long long *))off_26C67C898[v12])(&v39, &v31);
    }
    return;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v39, lpsrc, 22);
  long long v11 = *(_OWORD *)(v39 + 16);
  long long v10 = *(_OWORD *)(v39 + 32);
  long long v30 = *(_OWORD *)v39;
  long long v31 = v11;
  long long v32 = v10;
  *(void *)&long long v39 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B4D7D8(a1, (uint64_t)&v39);
  *(void *)&v36[0] = &v30;
  *((void *)&v36[0] + 1) = &v39;
  if (DWORD1(v31) == 1 && DWORD1(v40) == 1)
  {
    sub_2158530CC((uint64_t *)v36);
    return;
  }
  if (DWORD2(v30) && HIDWORD(v30) && v31)
  {
    int v14 = HIDWORD(v30) - 1;
    uint64_t v15 = DWORD2(v31);
    uint64_t v16 = DWORD2(v40);
    uint64_t v17 = (_WORD *)v30;
    uint64_t v18 = (_WORD *)v39;
    int v19 = v31 - 1;
    if (v31 != 1)
    {
      uint64_t v20 = HIDWORD(v40);
      uint64_t v21 = HIDWORD(v31);
      if (HIDWORD(v30) == 1)
      {
        do
        {
          *uint64_t v18 = *v17;
          v18[1] = v17[1];
          uint64_t v18[2] = v17[2];
          v17 += v21;
          v18 += v20;
          --v19;
        }
        while (v19);
LABEL_29:
        *uint64_t v18 = *v17;
        v18[1] = v17[1];
        uint64_t v18[2] = v17[2];
        return;
      }
      int v22 = 0;
      uint64_t v23 = 2 * DWORD2(v40);
      long long v24 = (_WORD *)(v39 + 4);
      long long v25 = (_WORD *)(v30 + 4);
      do
      {
        uint64_t v26 = v25;
        uint64_t v27 = v24;
        int v28 = v14;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = *v26;
          uint64_t v27 = (_WORD *)((char *)v27 + v23);
          v26 += v15;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = *v26;
        v17 += v21;
        v18 += v20;
        ++v22;
        v24 += v20;
        v25 += v21;
      }
      while (v22 != v19);
    }
    for (; v14; --v14)
    {
      *uint64_t v18 = *v17;
      v18[1] = v17[1];
      uint64_t v18[2] = v17[2];
      v17 += v15;
      v18 += v16;
    }
    goto LABEL_29;
  }
}

void sub_215B4E2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4E340(uint64_t a1)
{
  sub_215B4D7D8(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B4E368(uint64_t a1, int a2)
{
  if (a2 != 22
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4D7D8(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B4E414(uint64_t a1, int a2)
{
  if (a2 != 22
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4DA18((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B4E4C0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EDF8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EDF8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EE00))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE08, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EE08))
    {
LABEL_13:
      if (byte_26788F3DF < 0)
      {
        sub_215738B0C(&xmmword_26788F3B0, (void *)qword_26788F3C8, unk_26788F3D0);
      }
      else
      {
        xmmword_26788F3B0 = *(_OWORD *)&qword_26788F3C8;
        unk_26788F3C0 = unk_26788F3D8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F3B0, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE00);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE10, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788EE10))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgb16u>]", &qword_26788F3E0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F3E0, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE10);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE18, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EE18))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE20, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788EE20))
      {
        if (byte_26788F3F8[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F3F8, *(unint64_t *)&byte_26788F3F8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F3F8;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F410);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F410, &dword_21572C000);
        __cxa_guard_release(&qword_26788EE20);
      }
      if (byte_26788F427 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F410, *((unint64_t *)&xmmword_26788F410 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F410;
        uint64_t v12 = unk_26788F420;
      }
      sub_21585BD4C(v11, (std::string *)&qword_26788F3C8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F3C8, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE08);
      goto LABEL_13;
    }
    if (byte_26788F3F7 >= 0) {
      size_t v1 = byte_26788F3F7;
    }
    else {
      size_t v1 = unk_26788F3E8;
    }
    if (byte_26788F3F7 >= 0) {
      long long v2 = &qword_26788F3E0;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F3E0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F3F8[8] = v1;
      *(void *)&byte_26788F3F8[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F3F8 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F3F8;
      byte_26788F3F8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F3F8, &dword_21572C000);
    __cxa_guard_release(&qword_26788EE18);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F3C7 < 0)
  {
    sub_215738B0C(&xmmword_26788F398, (void *)xmmword_26788F3B0, *((unint64_t *)&xmmword_26788F3B0 + 1));
  }
  else
  {
    xmmword_26788F398 = xmmword_26788F3B0;
    unk_26788F3A8 = unk_26788F3C0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F398, &dword_21572C000);
  __cxa_guard_release(&qword_26788EDF8);
LABEL_2:
  if (byte_26788F3AF >= 0) {
    return &xmmword_26788F398;
  }
  else {
    return (long long *)xmmword_26788F398;
  }
}

void sub_215B4E948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788EE08);
  __cxa_guard_abort(&qword_26788EE00);
  __cxa_guard_abort(&qword_26788EDF8);
  _Unwind_Resume(a1);
}

void sub_215B4E9E4(_Unwind_Exception *a1)
{
}

void sub_215B4E9FC()
{
}

void sub_215B4EA44(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B36E5C(&v2, a1);
    operator new();
  }
  sub_215B371DC(&v2, a1);
  operator new();
}

void sub_215B4EB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B4EBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B4EBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B4EC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B4EC28()
{
  return 65792;
}

void sub_215B4EC34(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215B4EC40(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67C1F8;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20) {
    uint64_t v4 = 32;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)int v14 = 4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)long long v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)int v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67B748;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B325E4(0, 25, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B32978((uint64_t)v14, (uint64_t)v13);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67C1F8;
  return a1;
}

void sub_215B4EDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B4EE04(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4EE20(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B748;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B4EE98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B33814(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        long long v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        uint64_t v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        int v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              uint64_t v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        uint64_t v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B32978(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        long long v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B4F128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B4F14C(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_215B33814(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)uint64_t v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &off_26C67D770;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        int v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &off_26C67D770;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B32978((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &off_26C67D770;
        long long v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B4F400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B4F424()
{
  return 25;
}

uint64_t (***sub_215B4F42C())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B4F4A8(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B33E50(v4, a1);
  sub_215B4F14C((uint64_t)v3, a1);
  sub_215B4F14C((uint64_t)&v2, a1);
  operator new();
}

void sub_215B4F5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4F61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4F634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B4F648(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B4F654(uint64_t a1, uint64_t *lpsrc)
{
  v32[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C750, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_215B33E50(v25, (uint64_t)v5);
    sub_215B4F14C((uint64_t)v23, v6);
    long long v26 = v23[0];
    long long v27 = v23[1];
    long long v28 = v24;
    *(void *)&long long v17 = &unk_26C67C1F8;
    if (HIDWORD(v24) <= 0x20) {
      uint64_t v7 = 32;
    }
    else {
      uint64_t v7 = HIDWORD(v24);
    }
    *(void *)&v29[1] = v24;
    v29[0] = 4;
    LODWORD(v32[0]) = 1;
    *(void *)((char *)v32 + 4) = DWORD2(v24) | (unint64_t)(v7 << 32);
    *(void *)&void v29[3] = v32[0];
    v29[5] = v7;
    uint64_t v30 = v24;
    uint64_t v31 = *(void *)((char *)v32 + 4);
    sub_215B32E5C((uint64_t)&v17, 25, (uint64_t)v29, &v26);
    *(void *)&long long v17 = &unk_26C67C1F8;
    sub_215B61CEC(v25);
    uint64_t v8 = DWORD2(v19);
    *(_DWORD *)(a1 + 8) = DWORD2(v17);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v20;
        long long v16 = v21;
        *(_OWORD *)(a1 + 48) = v20;
        *(_OWORD *)(a1 + 64) = v16;
        *(void *)(a1 + 80) = v22;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v26, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v26 = a1 + 16;
    ((void (*)(long long *))off_26C67C8D8[v8])(&v26);
LABEL_13:
    uint64_t v14 = DWORD2(v19);
    double result = *(double *)&v20;
    long long v15 = v21;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v15;
    *(void *)(a1 + 80) = v22;
    *(void *)&long long v17 = &unk_26C67B748;
    if (v14 != -1) {
      ((void (*)(long long *, long long *))off_26C67C898[v14])(&v26, &v18);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v26, lpsrc, 25);
  uint64_t v10 = v26;
  long long v12 = *(_OWORD *)(v26 + 16);
  long long v11 = *(_OWORD *)(v26 + 32);
  long long v17 = *(_OWORD *)v26;
  long long v18 = v12;
  long long v19 = v11;
  *(void *)&long long v26 = 0;
  MEMORY[0x2166C4D20](v10);
  sub_215B4EE98(a1, (uint64_t)&v26);
  *(void *)&v23[0] = &v17;
  *((void *)&v23[0] + 1) = &v26;
  if (DWORD1(v18) == 1 && DWORD1(v27) == 1)
  {
    sub_2158A2610((size_t *)v23);
  }
  else
  {
    LOBYTE(v25[0]) = 0;
    if (DWORD2(v17) && HIDWORD(v17) && v18)
    {
      *(void *)long long v29 = v25;
      sub_2158A6EF0((uint64_t)v29, (uint64_t)&v17, (uint64_t)&v26);
    }
  }
  return result;
}

void sub_215B4F95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B4F9E0(uint64_t a1)
{
  sub_215B4EE98(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B4FA08(uint64_t a1, int a2)
{
  if (a2 != 25
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4EE98(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B4FAB4(uint64_t a1, int a2)
{
  if (a2 != 25
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B4F14C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B4FB60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE28, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EE28))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EE30))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE38, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EE38))
    {
LABEL_13:
      if (byte_26788F46F < 0)
      {
        sub_215738B0C(&xmmword_26788F440, (void *)qword_26788F458, unk_26788F460);
      }
      else
      {
        xmmword_26788F440 = *(_OWORD *)&qword_26788F458;
        unk_26788F450 = unk_26788F468;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F440, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE30);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE40, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788EE40))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Bgra8u>]", &qword_26788F470);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F470, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE40);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE48, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EE48))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE50, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788EE50))
      {
        if (byte_26788F488[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F488, *(unint64_t *)&byte_26788F488[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F488;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F4A0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F4A0, &dword_21572C000);
        __cxa_guard_release(&qword_26788EE50);
      }
      if (byte_26788F4B7 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F4A0, *((unint64_t *)&xmmword_26788F4A0 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F4A0;
        uint64_t v12 = unk_26788F4B0;
      }
      sub_21585D348(v11, (std::string *)&qword_26788F458);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F458, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE38);
      goto LABEL_13;
    }
    if (byte_26788F487 >= 0) {
      size_t v1 = byte_26788F487;
    }
    else {
      size_t v1 = unk_26788F478;
    }
    if (byte_26788F487 >= 0) {
      long long v2 = &qword_26788F470;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F470;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F488[8] = v1;
      *(void *)&byte_26788F488[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F488 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F488;
      byte_26788F488[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F488, &dword_21572C000);
    __cxa_guard_release(&qword_26788EE48);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F457 < 0)
  {
    sub_215738B0C(&xmmword_26788F428, (void *)xmmword_26788F440, *((unint64_t *)&xmmword_26788F440 + 1));
  }
  else
  {
    xmmword_26788F428 = xmmword_26788F440;
    unk_26788F438 = unk_26788F450;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F428, &dword_21572C000);
  __cxa_guard_release(&qword_26788EE28);
LABEL_2:
  if (byte_26788F43F >= 0) {
    return &xmmword_26788F428;
  }
  else {
    return (long long *)xmmword_26788F428;
  }
}

void sub_215B4FFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788EE38);
  __cxa_guard_abort(&qword_26788EE30);
  __cxa_guard_abort(&qword_26788EE28);
  _Unwind_Resume(a1);
}

void sub_215B50084(_Unwind_Exception *a1)
{
}

void sub_215B5009C()
{
}

void sub_215B500E4(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B33A5C(&v2, a1);
    operator new();
  }
  sub_215B33E50(&v2, a1);
  operator new();
}

void sub_215B50238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B5026C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B50280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B502B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B502C8()
{
  return 65792;
}

void sub_215B502D4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215B502E0(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67C288;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)uint64_t v14 = 4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)long long v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67BAA8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B3C0BC(0, 31, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B3786C((uint64_t)v14, (uint64_t)v13);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67C288;
  return a1;
}

void sub_215B5045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B504A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B504C0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BAA8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B50538(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B3D2C4(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        long long v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        uint64_t v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              uint64_t v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        uint64_t v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3786C(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        long long v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B507C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B507EC(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_215B3D2C4(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)uint64_t v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &off_26C67D770;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &off_26C67D770;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3786C((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &off_26C67D770;
        long long v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B50AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B50AC4()
{
  return 31;
}

uint64_t (***sub_215B50ACC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B50B48(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B3D8FC(v4, a1);
  sub_215B507EC((uint64_t)v3, a1);
  sub_215B507EC((uint64_t)&v2, a1);
  operator new();
}

void sub_215B50C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B50CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B50CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B50CE4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B50CF0(uint64_t a1, uint64_t *lpsrc)
{
  _OWORD v36[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C768, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v30, lpsrc, 31);
    uint64_t v10 = *(void *)&v30[0];
    long long v12 = *(_OWORD *)(*(void *)&v30[0] + 16);
    long long v11 = *(_OWORD *)(*(void *)&v30[0] + 32);
    long long v21 = **(_OWORD **)&v30[0];
    long long v22 = v12;
    long long v23 = v11;
    *(void *)&v30[0] = 0;
    MEMORY[0x2166C4D20](v10, 0xC400A2AC0F1, v13, v14, v15, v16);
    sub_215B50538(a1, (uint64_t)v30);
    *(void *)&v27[0] = &v21;
    *((void *)&v27[0] + 1) = v30;
    return sub_2158A79C0(v27);
  }
  uint64_t v6 = (uint64_t)v5;
  sub_215B3D8FC(v29, (uint64_t)v5);
  sub_215B507EC((uint64_t)v27, v6);
  v30[0] = v27[0];
  v30[1] = v27[1];
  v30[2] = v28;
  *(void *)&long long v21 = &unk_26C67C288;
  if (HIDWORD(v28) <= 0x10) {
    uint64_t v7 = 16;
  }
  else {
    uint64_t v7 = HIDWORD(v28);
  }
  *(void *)&v31[1] = v28;
  v31[0] = 4;
  LODWORD(v36[0]) = 1;
  *(void *)((char *)v36 + 4) = DWORD2(v28) | (unint64_t)(v7 << 32);
  uint64_t v32 = v36[0];
  int v33 = v7;
  uint64_t v34 = v28;
  uint64_t v35 = *(void *)((char *)v36 + 4);
  sub_215B3C948((uint64_t)&v21, (uint64_t)v31, v30);
  *(void *)&long long v21 = &unk_26C67C288;
  sub_215B61CEC(v29);
  uint64_t v8 = DWORD2(v23);
  *(_DWORD *)(a1 + 8) = DWORD2(v21);
  uint64_t v9 = *(unsigned int *)(a1 + 40);
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      double result = *(double *)&v24;
      long long v20 = v25;
      *(_OWORD *)(a1 + 48) = v24;
      *(_OWORD *)(a1 + 64) = v20;
      *(void *)(a1 + 80) = v26;
      return result;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26C67C898[v9])(v30, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_11;
  }
  *(void *)&v30[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26C67C8D8[v8])(v30);
LABEL_11:
  uint64_t v18 = DWORD2(v23);
  double result = *(double *)&v24;
  long long v19 = v25;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v26;
  *(void *)&long long v21 = &unk_26C67BAA8;
  if (v18 != -1) {
    ((void (*)(_OWORD *, long long *))off_26C67C898[v18])(v30, &v22);
  }
  return result;
}

void sub_215B50FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B5103C(uint64_t a1)
{
  sub_215B50538(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B51064(uint64_t a1, int a2)
{
  if (a2 != 31
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B50538(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B51110(uint64_t a1, int a2)
{
  if (a2 != 31
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B507EC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B511BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE58, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EE58))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EE60))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE68, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EE68))
    {
LABEL_13:
      if (byte_26788F4FF < 0)
      {
        sub_215738B0C(&xmmword_26788F4D0, (void *)qword_26788F4E8, unk_26788F4F0);
      }
      else
      {
        xmmword_26788F4D0 = *(_OWORD *)&qword_26788F4E8;
        unk_26788F4E0 = unk_26788F4F8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F4D0, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE60);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE70, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788EE70))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba16f>]", &qword_26788F500);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F500, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE70);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE78, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EE78))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE80, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788EE80))
      {
        if (byte_26788F518[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F518, *(unint64_t *)&byte_26788F518[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F518;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F530);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F530, &dword_21572C000);
        __cxa_guard_release(&qword_26788EE80);
      }
      if (byte_26788F547 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F530, *((unint64_t *)&xmmword_26788F530 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F530;
        uint64_t v12 = unk_26788F540;
      }
      sub_21586006C(v11, (std::string *)&qword_26788F4E8);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F4E8, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE68);
      goto LABEL_13;
    }
    if (byte_26788F517 >= 0) {
      size_t v1 = byte_26788F517;
    }
    else {
      size_t v1 = unk_26788F508;
    }
    if (byte_26788F517 >= 0) {
      long long v2 = &qword_26788F500;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F500;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F518[8] = v1;
      *(void *)&byte_26788F518[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F518 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F518;
      byte_26788F518[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F518, &dword_21572C000);
    __cxa_guard_release(&qword_26788EE78);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F4E7 < 0)
  {
    sub_215738B0C(&xmmword_26788F4B8, (void *)xmmword_26788F4D0, *((unint64_t *)&xmmword_26788F4D0 + 1));
  }
  else
  {
    xmmword_26788F4B8 = xmmword_26788F4D0;
    unk_26788F4C8 = unk_26788F4E0;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F4B8, &dword_21572C000);
  __cxa_guard_release(&qword_26788EE58);
LABEL_2:
  if (byte_26788F4CF >= 0) {
    return &xmmword_26788F4B8;
  }
  else {
    return (long long *)xmmword_26788F4B8;
  }
}

void sub_215B51644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788EE68);
  __cxa_guard_abort(&qword_26788EE60);
  __cxa_guard_abort(&qword_26788EE58);
  _Unwind_Resume(a1);
}

void sub_215B516E0(_Unwind_Exception *a1)
{
}

void sub_215B516F8()
{
}

void sub_215B51740(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B3D50C(a1, &v2);
    operator new();
  }
  sub_215B3D8FC(&v2, a1);
  operator new();
}

void sub_215B51898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B518CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B518E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B51914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B51928()
{
  return 65792;
}

uint64_t sub_215B51938(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67C318;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 8) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)uint64_t v14 = 4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)long long v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67BC58;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B40E50(0, 32, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B413A4((uint64_t)v14, (uint64_t)v13);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67C318;
  return a1;
}

void sub_215B51AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B51AFC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B51B18(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BC58;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B51B90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B4229C(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        long long v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        uint64_t v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              uint64_t v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        uint64_t v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B413A4(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B51E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B51E44(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_215B4229C(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)uint64_t v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &off_26C67D770;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &off_26C67D770;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B413A4((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &off_26C67D770;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B520F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B5211C()
{
  return 32;
}

uint64_t (***sub_215B52124())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B521A0(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B428D4(v4, a1);
  sub_215B51E44((uint64_t)v3, a1);
  sub_215B51E44((uint64_t)&v2, a1);
  operator new();
}

void sub_215B522E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B52310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B52328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B5233C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B52348(uint64_t a1, uint64_t *lpsrc)
{
  v32[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C780, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_215B428D4(v25, (uint64_t)v5);
    sub_215B51E44((uint64_t)v23, v6);
    long long v26 = v23[0];
    long long v27 = v23[1];
    long long v28 = v24;
    *(void *)&long long v17 = &unk_26C67C318;
    if (HIDWORD(v24) <= 8) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = HIDWORD(v24);
    }
    *(void *)&v29[1] = v24;
    v29[0] = 4;
    LODWORD(v32[0]) = 1;
    *(void *)((char *)v32 + 4) = DWORD2(v24) | (unint64_t)(v7 << 32);
    *(void *)&void v29[3] = v32[0];
    v29[5] = v7;
    uint64_t v30 = v24;
    uint64_t v31 = *(void *)((char *)v32 + 4);
    sub_215B418D4((uint64_t)&v17, (uint64_t)v29, &v26);
    *(void *)&long long v17 = &unk_26C67C318;
    sub_215B61CEC(v25);
    uint64_t v8 = DWORD2(v19);
    *(_DWORD *)(a1 + 8) = DWORD2(v17);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v20;
        long long v16 = v21;
        *(_OWORD *)(a1 + 48) = v20;
        *(_OWORD *)(a1 + 64) = v16;
        *(void *)(a1 + 80) = v22;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v26, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v26 = a1 + 16;
    ((void (*)(long long *))off_26C67C8D8[v8])(&v26);
LABEL_13:
    uint64_t v14 = DWORD2(v19);
    double result = *(double *)&v20;
    long long v15 = v21;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v15;
    *(void *)(a1 + 80) = v22;
    *(void *)&long long v17 = &unk_26C67BC58;
    if (v14 != -1) {
      ((void (*)(long long *, long long *))off_26C67C898[v14])(&v26, &v18);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v26, lpsrc, 32);
  uint64_t v10 = v26;
  long long v12 = *(_OWORD *)(v26 + 16);
  long long v11 = *(_OWORD *)(v26 + 32);
  long long v17 = *(_OWORD *)v26;
  long long v18 = v12;
  long long v19 = v11;
  *(void *)&long long v26 = 0;
  MEMORY[0x2166C4D20](v10);
  sub_215B51B90(a1, (uint64_t)&v26);
  *(void *)&v23[0] = &v17;
  *((void *)&v23[0] + 1) = &v26;
  if (DWORD1(v18) == 1 && DWORD1(v27) == 1)
  {
    sub_215854ED0((uint64_t *)v23);
  }
  else
  {
    LOBYTE(v25[0]) = 0;
    if (DWORD2(v17) && HIDWORD(v17) && v18)
    {
      *(void *)long long v29 = v25;
      *(float *)&double result = sub_2158A81CC((uint64_t)v29, (uint64_t)&v17, (uint64_t)&v26);
    }
  }
  return result;
}

void sub_215B5264C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B526D0(uint64_t a1)
{
  sub_215B51B90(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B526F8(uint64_t a1, int a2)
{
  if (a2 != 32
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B51B90(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B527A4(uint64_t a1, int a2)
{
  if (a2 != 32
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B51E44((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B52850()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE88, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EE88))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EE90))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EE98, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EE98))
    {
LABEL_13:
      if (byte_26788F58F < 0)
      {
        sub_215738B0C(&xmmword_26788F560, (void *)qword_26788F578, unk_26788F580);
      }
      else
      {
        xmmword_26788F560 = *(_OWORD *)&qword_26788F578;
        unk_26788F570 = unk_26788F588;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F560, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE90);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEA0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788EEA0))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Rgba32f>]", &qword_26788F590);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F590, &dword_21572C000);
      __cxa_guard_release(&qword_26788EEA0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEA8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EEA8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEB0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788EEB0))
      {
        if (byte_26788F5A8[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F5A8, *(unint64_t *)&byte_26788F5A8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F5A8;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F5C0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F5C0, &dword_21572C000);
        __cxa_guard_release(&qword_26788EEB0);
      }
      if (byte_26788F5D7 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F5C0, *((unint64_t *)&xmmword_26788F5C0 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F5C0;
        uint64_t v12 = unk_26788F5D0;
      }
      sub_2158606F8(v11, (std::string *)&qword_26788F578);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F578, &dword_21572C000);
      __cxa_guard_release(&qword_26788EE98);
      goto LABEL_13;
    }
    if (byte_26788F5A7 >= 0) {
      size_t v1 = byte_26788F5A7;
    }
    else {
      size_t v1 = unk_26788F598;
    }
    if (byte_26788F5A7 >= 0) {
      long long v2 = &qword_26788F590;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F590;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F5A8[8] = v1;
      *(void *)&byte_26788F5A8[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F5A8 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F5A8;
      byte_26788F5A8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F5A8, &dword_21572C000);
    __cxa_guard_release(&qword_26788EEA8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F577 < 0)
  {
    sub_215738B0C(&xmmword_26788F548, (void *)xmmword_26788F560, *((unint64_t *)&xmmword_26788F560 + 1));
  }
  else
  {
    xmmword_26788F548 = xmmword_26788F560;
    unk_26788F558 = unk_26788F570;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F548, &dword_21572C000);
  __cxa_guard_release(&qword_26788EE88);
LABEL_2:
  if (byte_26788F55F >= 0) {
    return &xmmword_26788F548;
  }
  else {
    return (long long *)xmmword_26788F548;
  }
}

void sub_215B52CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788EE98);
  __cxa_guard_abort(&qword_26788EE90);
  __cxa_guard_abort(&qword_26788EE88);
  _Unwind_Resume(a1);
}

void sub_215B52D74(_Unwind_Exception *a1)
{
}

void sub_215B52D8C()
{
}

void sub_215B52DD4(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B424E4(a1, &v2);
    operator new();
  }
  sub_215B428D4(&v2, a1);
  operator new();
}

void sub_215B52F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B52F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B52F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B52FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B52FBC()
{
  return 65792;
}

uint64_t sub_215B52FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67C3A8;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20) {
    uint64_t v4 = 32;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)uint64_t v14 = 4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)long long v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67B748;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B325E4(0, 37, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B32978((uint64_t)v14, (uint64_t)v13);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67C3A8;
  return a1;
}

void sub_215B53148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B53190(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B531AC(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B748;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B53224(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B33814(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        long long v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        uint64_t v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              uint64_t v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        uint64_t v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B32978(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B534B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B534D8(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_215B33814(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)uint64_t v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &off_26C67D770;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &off_26C67D770;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B32978((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &off_26C67D770;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B5378C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B537B0()
{
  return 37;
}

uint64_t (***sub_215B537B8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B53834(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B33E50(v4, a1);
  sub_215B534D8((uint64_t)v3, a1);
  sub_215B534D8((uint64_t)&v2, a1);
  operator new();
}

void sub_215B5397C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B539A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B539C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B539D4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B539E0(uint64_t a1, uint64_t *lpsrc)
{
  v32[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C798, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_215B33E50(v25, (uint64_t)v5);
    sub_215B534D8((uint64_t)v23, v6);
    long long v26 = v23[0];
    long long v27 = v23[1];
    long long v28 = v24;
    *(void *)&long long v17 = &unk_26C67C3A8;
    if (HIDWORD(v24) <= 0x20) {
      uint64_t v7 = 32;
    }
    else {
      uint64_t v7 = HIDWORD(v24);
    }
    *(void *)&v29[1] = v24;
    v29[0] = 4;
    LODWORD(v32[0]) = 1;
    *(void *)((char *)v32 + 4) = DWORD2(v24) | (unint64_t)(v7 << 32);
    *(void *)&void v29[3] = v32[0];
    v29[5] = v7;
    uint64_t v30 = v24;
    uint64_t v31 = *(void *)((char *)v32 + 4);
    sub_215B32E5C((uint64_t)&v17, 37, (uint64_t)v29, &v26);
    *(void *)&long long v17 = &unk_26C67C3A8;
    sub_215B61CEC(v25);
    uint64_t v8 = DWORD2(v19);
    *(_DWORD *)(a1 + 8) = DWORD2(v17);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v20;
        long long v16 = v21;
        *(_OWORD *)(a1 + 48) = v20;
        *(_OWORD *)(a1 + 64) = v16;
        *(void *)(a1 + 80) = v22;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v26, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v26 = a1 + 16;
    ((void (*)(long long *))off_26C67C8D8[v8])(&v26);
LABEL_13:
    uint64_t v14 = DWORD2(v19);
    double result = *(double *)&v20;
    long long v15 = v21;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v15;
    *(void *)(a1 + 80) = v22;
    *(void *)&long long v17 = &unk_26C67B748;
    if (v14 != -1) {
      ((void (*)(long long *, long long *))off_26C67C898[v14])(&v26, &v18);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v26, lpsrc, 37);
  uint64_t v10 = v26;
  long long v12 = *(_OWORD *)(v26 + 16);
  long long v11 = *(_OWORD *)(v26 + 32);
  long long v17 = *(_OWORD *)v26;
  long long v18 = v12;
  long long v19 = v11;
  *(void *)&long long v26 = 0;
  MEMORY[0x2166C4D20](v10);
  sub_215B53224(a1, (uint64_t)&v26);
  *(void *)&v23[0] = &v17;
  *((void *)&v23[0] + 1) = &v26;
  if (DWORD1(v18) == 1 && DWORD1(v27) == 1)
  {
    sub_2158A2610((size_t *)v23);
  }
  else
  {
    LOBYTE(v25[0]) = 0;
    if (DWORD2(v17) && HIDWORD(v17) && v18)
    {
      *(void *)long long v29 = v25;
      sub_2158A6EF0((uint64_t)v29, (uint64_t)&v17, (uint64_t)&v26);
    }
  }
  return result;
}

void sub_215B53CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B53D6C(uint64_t a1)
{
  sub_215B53224(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B53D94(uint64_t a1, int a2)
{
  if (a2 != 37
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B53224(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B53E40(uint64_t a1, int a2)
{
  if (a2 != 37
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B534D8((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B53EEC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEB8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EEB8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EEC0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEC8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EEC8))
    {
LABEL_13:
      if (byte_26788F61F < 0)
      {
        sub_215738B0C(&xmmword_26788F5F0, (void *)qword_26788F608, unk_26788F610);
      }
      else
      {
        xmmword_26788F5F0 = *(_OWORD *)&qword_26788F608;
        unk_26788F600 = unk_26788F618;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F5F0, &dword_21572C000);
      __cxa_guard_release(&qword_26788EEC0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EED0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788EED0))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb8u>]", &qword_26788F620);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F620, &dword_21572C000);
      __cxa_guard_release(&qword_26788EED0);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EED8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EED8))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEE0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788EEE0))
      {
        if (byte_26788F638[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F638, *(unint64_t *)&byte_26788F638[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F638;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F650);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F650, &dword_21572C000);
        __cxa_guard_release(&qword_26788EEE0);
      }
      if (byte_26788F667 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F650, *((unint64_t *)&xmmword_26788F650 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F650;
        uint64_t v12 = unk_26788F660;
      }
      sub_215862C64(v11, (std::string *)&qword_26788F608);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F608, &dword_21572C000);
      __cxa_guard_release(&qword_26788EEC8);
      goto LABEL_13;
    }
    if (byte_26788F637 >= 0) {
      size_t v1 = byte_26788F637;
    }
    else {
      size_t v1 = unk_26788F628;
    }
    if (byte_26788F637 >= 0) {
      long long v2 = &qword_26788F620;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F620;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F638[8] = v1;
      *(void *)&byte_26788F638[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F638 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F638;
      byte_26788F638[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F638, &dword_21572C000);
    __cxa_guard_release(&qword_26788EED8);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F607 < 0)
  {
    sub_215738B0C(&xmmword_26788F5D8, (void *)xmmword_26788F5F0, *((unint64_t *)&xmmword_26788F5F0 + 1));
  }
  else
  {
    xmmword_26788F5D8 = xmmword_26788F5F0;
    unk_26788F5E8 = unk_26788F600;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F5D8, &dword_21572C000);
  __cxa_guard_release(&qword_26788EEB8);
LABEL_2:
  if (byte_26788F5EF >= 0) {
    return &xmmword_26788F5D8;
  }
  else {
    return (long long *)xmmword_26788F5D8;
  }
}

void sub_215B54374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788EEC8);
  __cxa_guard_abort(&qword_26788EEC0);
  __cxa_guard_abort(&qword_26788EEB8);
  _Unwind_Resume(a1);
}

void sub_215B54410(_Unwind_Exception *a1)
{
}

void sub_215B54428()
{
}

void sub_215B54470(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B33A5C(&v2, a1);
    operator new();
  }
  sub_215B33E50(&v2, a1);
  operator new();
}

void sub_215B545C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B545F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B5460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B54640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B54654()
{
  return 65792;
}

void sub_215B54660(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215B5466C(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67C438;
  uint64_t v3 = *(unsigned int *)(a2 + 32);
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = v4;
  }
  *(_DWORD *)uint64_t v14 = 4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(_DWORD *)&v14[4] = v5;
  *(void *)long long v11 = *(void *)v14;
  *(_DWORD *)&v11[8] = HIDWORD(v5);
  *(_DWORD *)uint64_t v14 = 1;
  *(void *)&v14[4] = v3 | (v4 << 32);
  *(void *)&v11[12] = *(void *)v14;
  *(_DWORD *)&v11[20] = v4;
  *(void *)&v11[24] = v5;
  uint64_t v12 = *(void *)&v14[4];
  *(void *)a1 = &unk_26C67B8F8;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v6 = a1 + 16;
  sub_215B37318(0, 38, (uint64_t)v11, a1 + 16);
  unint64_t v7 = (_OWORD *)(a1 + 48);
  if (*(_DWORD *)&v11[24] && *(_DWORD *)&v11[28])
  {
    if (*(_DWORD *)(a1 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v13, v6);
    sub_215B3786C((uint64_t)v14, (uint64_t)v13);
    long long v8 = v15;
    *unint64_t v7 = *(_OWORD *)&v14[8];
    *(_OWORD *)(a1 + 64) = v8;
    *(void *)(a1 + 80) = v16;
    sub_215B61CEC(v13);
  }
  else
  {
    long long v9 = *(_OWORD *)&v11[16];
    *unint64_t v7 = *(_OWORD *)v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v12;
  }
  *(void *)a1 = &unk_26C67C438;
  return a1;
}

void sub_215B547E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *(unsigned int *)(v18 + 40);
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v19);
  }
  *(_DWORD *)(v18 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B54830(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B5484C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B8F8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B548C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (sub_215B38764(a1))
  {
    if (*(_DWORD *)(a1 + 76)) {
      BOOL v4 = *(_DWORD *)(a1 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a1 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    LODWORD(v18) = 4;
    *(void *)((char *)&v18 + 4) = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(DWORD1(v18), 4);
    LODWORD(v18) = 1;
    *(void *)((char *)&v18 + 4) = v8;
    uint64_t v10 = v18;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = v9;
    *(_DWORD *)(a2 + 16) = HIDWORD(v5);
    *(void *)(a2 + 20) = v10;
    *(_DWORD *)(a2 + 28) = v7;
    *(void *)(a2 + 32) = v5;
    *(void *)(a2 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a1 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a1 + 24);
        long long v11 = *(std::__shared_weak_count **)(a1 + 32);
        *(void *)&long long v18 = &off_26C67D770;
        *((void *)&v18 + 1) = v12;
        uint64_t v19 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a1 + 16);
            if (v17)
            {
              *(void *)&long long v18 = &off_26C67D770;
              *((void *)&v18 + 1) = v17;
              uint64_t v19 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        *((void *)&v18 + 1) = 0;
        uint64_t v19 = 0;
        *(void *)&long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3786C(a2, (uint64_t)&v18);
        *(void *)&long long v18 = &off_26C67D770;
        uint64_t v13 = v19;
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B54B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B54B78(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (sub_215B38764(a2))
  {
    if (*(_DWORD *)(a2 + 76)) {
      BOOL v4 = *(_DWORD *)(a2 + 72) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    unint64_t v5 = *(void *)(a2 + 72);
    if (v4) {
      unint64_t v5 = 0;
    }
    *(_DWORD *)uint64_t v21 = 4;
    *(void *)&v21[4] = v5;
    uint64_t v6 = 4 * (v5 != 0);
    LODWORD(v7) = v6 * v5;
    if (HIDWORD(v5)) {
      unint64_t v7 = v7;
    }
    else {
      unint64_t v7 = 0;
    }
    unint64_t v8 = v6 & 0x3FFFFFFFFLL | ((unint64_t)(v7 >> 2) << 34);
    unint64_t v9 = __PAIR64__(*(unsigned int *)&v21[4], 4);
    *(_DWORD *)uint64_t v21 = 1;
    *(void *)&v21[4] = v8;
    uint64_t v10 = *(void *)v21;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = v9;
    *(_DWORD *)(a1 + 16) = HIDWORD(v5);
    *(void *)(a1 + 20) = v10;
    *(_DWORD *)(a1 + 28) = v7;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v8;
  }
  else
  {
    switch(*(_DWORD *)(a2 + 40))
    {
      case 0:
      case 1:
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        long long v11 = *(std::__shared_weak_count **)(a2 + 32);
        long long v18 = &off_26C67D770;
        uint64_t v19 = v12;
        uint64_t v20 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_14;
      case 3:
        uint64_t v14 = *(std::__shared_weak_count **)(a2 + 24);
        if (v14)
        {
          long long v15 = std::__shared_weak_count::lock(v14);
          uint64_t v16 = v15;
          if (v15)
          {
            uint64_t v17 = *(void *)(a2 + 16);
            if (v17)
            {
              long long v18 = &off_26C67D770;
              uint64_t v19 = v17;
              uint64_t v20 = v15;
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_24;
            }
          }
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        long long v18 = &off_26C67D770;
        if (!v16) {
          goto LABEL_14;
        }
LABEL_24:
        if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
LABEL_14:
        sub_215B3786C((uint64_t)v21, (uint64_t)&v18);
        *(void *)a1 = *(void *)v21;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)&v21[8];
        *(_OWORD *)(a1 + 24) = v22;
        *(void *)(a1 + 40) = v23;
        long long v18 = &off_26C67D770;
        uint64_t v13 = v20;
        if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        break;
      default:
        sub_215742D4C();
    }
  }
}

void sub_215B54E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B54E50()
{
  return 38;
}

uint64_t (***sub_215B54E58())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EC70, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EC70))
  {
    return off_26ACF2410;
  }
  __cxa_atexit((void (*)(void *))nullsub_300, off_26ACF2410, &dword_21572C000);
  __cxa_guard_release(&qword_26788EC70);
  return off_26ACF2410;
}

void sub_215B54ED4(uint64_t a1)
{
  v4[16] = *MEMORY[0x263EF8340];
  sub_215B38D9C(v4, a1);
  sub_215B54B78((uint64_t)v3, a1);
  sub_215B54B78((uint64_t)&v2, a1);
  operator new();
}

void sub_215B55018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C40ED729E16);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B55044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B5505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215B61CEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B55070(uint64_t a1@<X0>, void *a2@<X8>)
{
}

double sub_215B5507C(uint64_t a1, uint64_t *lpsrc)
{
  v32[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *lpsrc;
  unint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67C7B0, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    sub_215B38D9C(v25, (uint64_t)v5);
    sub_215B54B78((uint64_t)v23, v6);
    long long v26 = v23[0];
    long long v27 = v23[1];
    long long v28 = v24;
    *(void *)&long long v17 = &unk_26C67C438;
    if (HIDWORD(v24) <= 0x10) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = HIDWORD(v24);
    }
    *(void *)&v29[1] = v24;
    v29[0] = 4;
    LODWORD(v32[0]) = 1;
    *(void *)((char *)v32 + 4) = DWORD2(v24) | (unint64_t)(v7 << 32);
    *(void *)&void v29[3] = v32[0];
    v29[5] = v7;
    uint64_t v30 = v24;
    uint64_t v31 = *(void *)((char *)v32 + 4);
    sub_215B37D9C((uint64_t)&v17, (uint64_t)v29, &v26);
    *(void *)&long long v17 = &unk_26C67C438;
    sub_215B61CEC(v25);
    uint64_t v8 = DWORD2(v19);
    *(_DWORD *)(a1 + 8) = DWORD2(v17);
    uint64_t v9 = *(unsigned int *)(a1 + 40);
    if (v9 == -1)
    {
      if (v8 == -1)
      {
        double result = *(double *)&v20;
        long long v16 = v21;
        *(_OWORD *)(a1 + 48) = v20;
        *(_OWORD *)(a1 + 64) = v16;
        *(void *)(a1 + 80) = v22;
        return result;
      }
    }
    else if (v8 == -1)
    {
      ((void (*)(long long *, uint64_t))off_26C67C898[v9])(&v26, a1 + 16);
      *(_DWORD *)(a1 + 40) = -1;
      goto LABEL_13;
    }
    *(void *)&long long v26 = a1 + 16;
    ((void (*)(long long *))off_26C67C8D8[v8])(&v26);
LABEL_13:
    uint64_t v14 = DWORD2(v19);
    double result = *(double *)&v20;
    long long v15 = v21;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v15;
    *(void *)(a1 + 80) = v22;
    *(void *)&long long v17 = &unk_26C67B8F8;
    if (v14 != -1) {
      ((void (*)(long long *, long long *))off_26C67C898[v14])(&v26, &v18);
    }
    return result;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v26, lpsrc, 38);
  uint64_t v10 = v26;
  long long v12 = *(_OWORD *)(v26 + 16);
  long long v11 = *(_OWORD *)(v26 + 32);
  long long v17 = *(_OWORD *)v26;
  long long v18 = v12;
  long long v19 = v11;
  *(void *)&long long v26 = 0;
  MEMORY[0x2166C4D20](v10);
  sub_215B548C4(a1, (uint64_t)&v26);
  *(void *)&v23[0] = &v17;
  *((void *)&v23[0] + 1) = &v26;
  if (DWORD1(v18) == 1 && DWORD1(v27) == 1)
  {
    sub_2158530CC((uint64_t *)v23);
  }
  else
  {
    LOBYTE(v25[0]) = 0;
    if (DWORD2(v17) && HIDWORD(v17) && v18)
    {
      *(void *)long long v29 = v25;
      sub_2158A7430((uint64_t)v29, (uint64_t)&v17, (uint64_t)&v26);
    }
  }
  return result;
}

void sub_215B55380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B55404(uint64_t a1)
{
  sub_215B548C4(a1, (uint64_t)v2);
  return v2[0];
}

void sub_215B5542C(uint64_t a1, int a2)
{
  if (a2 != 38
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 325, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B548C4(a1, (uint64_t)&v3);
  operator new();
}

void sub_215B554D8(uint64_t a1, int a2)
{
  if (a2 != 38
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/CVImage.cpp", 331, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B54B78((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B55584()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEE8, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788EEE8))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788EEF0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EEF8, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EEF8))
    {
LABEL_13:
      if (byte_26788F6AF < 0)
      {
        sub_215738B0C(&xmmword_26788F680, (void *)qword_26788F698, unk_26788F6A0);
      }
      else
      {
        xmmword_26788F680 = *(_OWORD *)&qword_26788F698;
        unk_26788F690 = unk_26788F6A8;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F680, &dword_21572C000);
      __cxa_guard_release(&qword_26788EEF0);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EF00, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788EF00))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cv::CVImageBuffer<img::Format::Argb16u>]", &qword_26788F6B0);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F6B0, &dword_21572C000);
      __cxa_guard_release(&qword_26788EF00);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EF08, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788EF08))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788EF10, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788EF10))
      {
        if (byte_26788F6C8[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788F6C8, *(unint64_t *)&byte_26788F6C8[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788F6C8;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788F6E0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F6E0, &dword_21572C000);
        __cxa_guard_release(&qword_26788EF10);
      }
      if (byte_26788F6F7 < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788F6E0, *((unint64_t *)&xmmword_26788F6E0 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788F6E0;
        uint64_t v12 = unk_26788F6F0;
      }
      sub_215863318(v11, (std::string *)&qword_26788F698);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788F698, &dword_21572C000);
      __cxa_guard_release(&qword_26788EEF8);
      goto LABEL_13;
    }
    if (byte_26788F6C7 >= 0) {
      size_t v1 = byte_26788F6C7;
    }
    else {
      size_t v1 = unk_26788F6B8;
    }
    if (byte_26788F6C7 >= 0) {
      long long v2 = &qword_26788F6B0;
    }
    else {
      long long v2 = (uint64_t *)qword_26788F6B0;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      uint64_t v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788F6C8[8] = v1;
      *(void *)&byte_26788F6C8[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788F6C8 = v8;
    }
    else
    {
      uint64_t v8 = byte_26788F6C8;
      byte_26788F6C8[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788F6C8, &dword_21572C000);
    __cxa_guard_release(&qword_26788EF08);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788F697 < 0)
  {
    sub_215738B0C(&xmmword_26788F668, (void *)xmmword_26788F680, *((unint64_t *)&xmmword_26788F680 + 1));
  }
  else
  {
    xmmword_26788F668 = xmmword_26788F680;
    unk_26788F678 = unk_26788F690;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788F668, &dword_21572C000);
  __cxa_guard_release(&qword_26788EEE8);
LABEL_2:
  if (byte_26788F67F >= 0) {
    return &xmmword_26788F668;
  }
  else {
    return (long long *)xmmword_26788F668;
  }
}

void sub_215B55A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788EEF8);
  __cxa_guard_abort(&qword_26788EEF0);
  __cxa_guard_abort(&qword_26788EEE8);
  _Unwind_Resume(a1);
}

void sub_215B55AA8(_Unwind_Exception *a1)
{
}

void sub_215B55AC0()
{
}

void sub_215B55B08(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_215B389AC(a1, &v2);
    operator new();
  }
  sub_215B38D9C(&v2, a1);
  operator new();
}

void sub_215B55C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B61CEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B61CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B55C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B55CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215B621C0(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215B621C0(&a9);
  _Unwind_Resume(a1);
}

void sub_215B55CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B55CF0()
{
  return 65792;
}

void *sub_215B55D00@<X0>(_DWORD *a1@<X1>, __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  LODWORD(a3) = *a1;
  BOOL v4 = *a1 != 0;
  if (*a1 <= 0x10u) {
    LODWORD(a3) = 16;
  }
  __int16 v5 = *a2;
  if (a1[1]) {
    a3 = a3;
  }
  else {
    a3 = 16;
  }
  *(void *)&long long v9 = *(void *)a1;
  *((void *)&v9 + 1) = v4 | (a3 << 32);
  __int16 v10 = v5;
  *(void *)uint64_t v3 = &unk_26C67B7D8;
  *(_DWORD *)(v3 + 8) = 0;
  sub_215B33F8C(0, 2, &v9, v3 + 16);
  if (v9 && DWORD1(v9))
  {
    if (*(_DWORD *)(v3 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v11, v3 + 16);
    sub_215B34320(v12, (uint64_t)v11);
    uint64_t v6 = v12[1];
    uint64_t v7 = v12[2];
    sub_215B61CEC(v11);
    *(void *)(v3 + 48) = v6;
    *(void *)(v3 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(v3 + 48) = v9;
  }
  double result = sub_215B3462C(v3, &v10);
  *(void *)uint64_t v3 = &unk_26C67BD78;
  return result;
}

void sub_215B55E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_215B61CEC(&a16);
  uint64_t v19 = *v17;
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v19])(&a15, v16);
  }
  *long long v17 = -1;
  _Unwind_Resume(a1);
}

void *sub_215B55EB0@<X0>(_DWORD *a1@<X1>, __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  LODWORD(a3) = *a1;
  BOOL v4 = *a1 != 0;
  if (*a1 <= 0x10u) {
    LODWORD(a3) = 16;
  }
  __int16 v5 = *a2;
  if (a1[1]) {
    a3 = a3;
  }
  else {
    a3 = 16;
  }
  *(void *)&long long v9 = *(void *)a1;
  *((void *)&v9 + 1) = v4 | (a3 << 32);
  __int16 v10 = v5;
  *(void *)uint64_t v3 = &unk_26C67B988;
  *(_DWORD *)(v3 + 8) = 0;
  sub_215B38EDC(0, 3, &v9, v3 + 16);
  if (v9 && DWORD1(v9))
  {
    if (*(_DWORD *)(v3 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v11, v3 + 16);
    sub_215B34320(v12, (uint64_t)v11);
    uint64_t v6 = v12[1];
    uint64_t v7 = v12[2];
    sub_215B61CEC(v11);
    *(void *)(v3 + 48) = v6;
    *(void *)(v3 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(v3 + 48) = v9;
  }
  double result = sub_215B39400(v3, &v10);
  *(void *)uint64_t v3 = &unk_26C67BE08;
  return result;
}

void sub_215B55FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_215B61CEC(&a16);
  uint64_t v19 = *v17;
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v19])(&a15, v16);
  }
  *long long v17 = -1;
  _Unwind_Resume(a1);
}

void *sub_215B56060@<X0>(_DWORD *a1@<X1>, int *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  LODWORD(a3) = *a1;
  BOOL v4 = *a1 != 0;
  if (*a1 <= 8u) {
    LODWORD(a3) = 8;
  }
  int v5 = *a2;
  if (a1[1]) {
    a3 = a3;
  }
  else {
    a3 = 8;
  }
  *(void *)&long long v9 = *(void *)a1;
  *((void *)&v9 + 1) = v4 | (a3 << 32);
  int v10 = v5;
  *(void *)uint64_t v3 = &unk_26C67BB38;
  *(_DWORD *)(v3 + 8) = 0;
  sub_215B3DA3C(0, 4, &v9, v3 + 16);
  if (v9 && DWORD1(v9))
  {
    if (*(_DWORD *)(v3 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v11, v3 + 16);
    sub_215B3DDD0(v12, (uint64_t)v11);
    uint64_t v6 = v12[1];
    uint64_t v7 = v12[2];
    sub_215B61CEC(v11);
    *(void *)(v3 + 48) = v6;
    *(void *)(v3 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(v3 + 48) = v9;
  }
  double result = sub_215B3E0DC(v3, &v10);
  *(void *)uint64_t v3 = &unk_26C67BE98;
  return result;
}

void sub_215B5618C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  sub_215B61CEC(&a16);
  uint64_t v19 = *v17;
  if (v19 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v19])(&a15, v16);
  }
  *long long v17 = -1;
  _Unwind_Resume(a1);
}

void *sub_215B56210@<X0>(_DWORD *a1@<X1>, char *a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = 2 * (*a1 != 0);
  LODWORD(a3) = v4 * *a1;
  if (a3 <= 0x20) {
    LODWORD(a3) = 32;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = HIDWORD(*(void *)a1);
  char v7 = *a2;
  if (a1[1]) {
    a3 = a3;
  }
  else {
    a3 = 32;
  }
  *(_DWORD *)uint64_t v16 = 2;
  *(_DWORD *)&v16[4] = v5;
  *(void *)uint64_t v12 = *(void *)v16;
  *(_DWORD *)&v12[8] = v6;
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)&v16[4] = v4 & 0x1FFFFFFFFLL | ((unint64_t)(a3 >> 1) << 33);
  *(void *)&v12[12] = *(void *)v16;
  *(_DWORD *)&v12[20] = a3;
  *(void *)&v12[24] = v5;
  uint64_t v13 = *(void *)&v16[4];
  v14[0] = v7;
  *(void *)uint64_t v3 = &unk_26C67B628;
  *(_DWORD *)(v3 + 8) = 0;
  sub_215B2F140(0, 5, (uint64_t)v12, v3 + 16);
  uint64_t v8 = (_OWORD *)(v3 + 48);
  if (*(_DWORD *)&v12[24] && *(_DWORD *)&v12[28])
  {
    if (*(_DWORD *)(v3 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v15, v3 + 16);
    sub_215B2F4D4((uint64_t)v16, (uint64_t)v15);
    long long v9 = v17;
    *uint64_t v8 = *(_OWORD *)&v16[8];
    *(_OWORD *)(v3 + 64) = v9;
    *(void *)(v3 + 80) = v18;
    sub_215B61CEC(v15);
  }
  else
  {
    long long v10 = *(_OWORD *)&v12[16];
    *uint64_t v8 = *(_OWORD *)v12;
    *(_OWORD *)(v3 + 64) = v10;
    *(void *)(v3 + 80) = v13;
  }
  double result = sub_215B2F854(v3, v14);
  *(void *)uint64_t v3 = &unk_26C67BF28;
  return result;
}

void sub_215B563C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *v19;
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v18);
  }
  *uint64_t v19 = -1;
  _Unwind_Resume(a1);
}

void *sub_215B56460@<X0>(_DWORD *a1@<X1>, __int16 *a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = 2 * (*a1 != 0);
  LODWORD(a3) = v4 * *a1;
  if (a3 <= 0x10) {
    LODWORD(a3) = 16;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = HIDWORD(*(void *)a1);
  __int16 v7 = *a2;
  if (a1[1]) {
    a3 = a3;
  }
  else {
    a3 = 16;
  }
  *(_DWORD *)uint64_t v16 = 2;
  *(_DWORD *)&v16[4] = v5;
  *(void *)uint64_t v12 = *(void *)v16;
  *(_DWORD *)&v12[8] = v6;
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)&v16[4] = v4 & 0x1FFFFFFFFLL | ((unint64_t)(a3 >> 1) << 33);
  *(void *)&v12[12] = *(void *)v16;
  *(_DWORD *)&v12[20] = a3;
  *(void *)&v12[24] = v5;
  uint64_t v13 = *(void *)&v16[4];
  __int16 v14 = v7;
  *(void *)uint64_t v3 = &unk_26C67BA18;
  *(_DWORD *)(v3 + 8) = 0;
  sub_215B3A600(0, 7, (uint64_t)v12, v3 + 16);
  uint64_t v8 = (_OWORD *)(v3 + 48);
  if (*(_DWORD *)&v12[24] && *(_DWORD *)&v12[28])
  {
    if (*(_DWORD *)(v3 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v15, v3 + 16);
    sub_215B3A994((uint64_t)v16, (uint64_t)v15);
    long long v9 = v17;
    *uint64_t v8 = *(_OWORD *)&v16[8];
    *(_OWORD *)(v3 + 64) = v9;
    *(void *)(v3 + 80) = v18;
    sub_215B61CEC(v15);
  }
  else
  {
    long long v10 = *(_OWORD *)&v12[16];
    *uint64_t v8 = *(_OWORD *)v12;
    *(_OWORD *)(v3 + 64) = v10;
    *(void *)(v3 + 80) = v13;
  }
  double result = sub_215B3AD1C(v3, &v14);
  *(void *)uint64_t v3 = &unk_26C67BFB8;
  return result;
}

void sub_215B56610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *v19;
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v18);
  }
  *uint64_t v19 = -1;
  _Unwind_Resume(a1);
}

void *sub_215B566B0@<X0>(_DWORD *a1@<X1>, char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*a1) {
    uint64_t v4 = 3;
  }
  else {
    uint64_t v4 = 0;
  }
  LODWORD(v5) = v4 * *a1;
  if (v5 <= 0x20) {
    LODWORD(v5) = 32;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = HIDWORD(*(void *)a1);
  char v8 = *a2;
  if (a1[1]) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 32;
  }
  *(void *)uint64_t v13 = __PAIR64__(v6, 3);
  *(_DWORD *)&v13[8] = v7;
  *(_DWORD *)long long v17 = 1;
  *(void *)&v17[4] = v4 | (v5 << 32);
  *(void *)&v13[12] = *(void *)v17;
  *(_DWORD *)&v13[20] = v5;
  *(void *)&v13[24] = v6;
  uint64_t v14 = *(void *)&v17[4];
  v15[0] = v8;
  *(void *)a3 = &unk_26C67B6B8;
  *(_DWORD *)(a3 + 8) = 0;
  sub_215B30B1C(0, 21, (uint64_t)v13, a3 + 16);
  long long v9 = (_OWORD *)(a3 + 48);
  if (*(_DWORD *)&v13[24] && *(_DWORD *)&v13[28])
  {
    if (*(_DWORD *)(a3 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v16, a3 + 16);
    sub_215B30EB0((uint64_t)v16, (uint64_t)v17);
    long long v10 = v18;
    *long long v9 = *(_OWORD *)&v17[8];
    *(_OWORD *)(a3 + 64) = v10;
    *(void *)(a3 + 80) = v19;
    sub_215B61CEC(v16);
  }
  else
  {
    long long v11 = *(_OWORD *)&v13[16];
    *long long v9 = *(_OWORD *)v13;
    *(_OWORD *)(a3 + 64) = v11;
    *(void *)(a3 + 80) = v14;
  }
  double result = sub_215B31230(a3, v15);
  *(void *)a3 = &unk_26C67C0D8;
  return result;
}

void sub_215B56858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *v19;
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v18);
  }
  *uint64_t v19 = -1;
  _Unwind_Resume(a1);
}

void *sub_215B568F8@<X0>(_DWORD *a1@<X1>, __int16 *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*a1) {
    uint64_t v4 = 3;
  }
  else {
    uint64_t v4 = 0;
  }
  LODWORD(v5) = v4 * *a1;
  if (v5 <= 0x10) {
    LODWORD(v5) = 16;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = HIDWORD(*(void *)a1);
  __int16 v8 = *a2;
  if (a1[1]) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = 16;
  }
  *(void *)uint64_t v13 = __PAIR64__(v6, 3);
  *(_DWORD *)&v13[8] = v7;
  *(_DWORD *)long long v17 = 1;
  *(void *)&v17[4] = v4 | (v5 << 32);
  *(void *)&v13[12] = *(void *)v17;
  *(_DWORD *)&v13[20] = v5;
  *(void *)&v13[24] = v6;
  uint64_t v14 = *(void *)&v17[4];
  __int16 v15 = v8;
  *(void *)a3 = &unk_26C67B868;
  *(_DWORD *)(a3 + 8) = 0;
  sub_215B35828(0, 22, (uint64_t)v13, a3 + 16);
  long long v9 = (_OWORD *)(a3 + 48);
  if (*(_DWORD *)&v13[24] && *(_DWORD *)&v13[28])
  {
    if (*(_DWORD *)(a3 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v16, a3 + 16);
    sub_215B35BBC((uint64_t)v16, (uint64_t)v17);
    long long v10 = v18;
    *long long v9 = *(_OWORD *)&v17[8];
    *(_OWORD *)(a3 + 64) = v10;
    *(void *)(a3 + 80) = v19;
    sub_215B61CEC(v16);
  }
  else
  {
    long long v11 = *(_OWORD *)&v13[16];
    *long long v9 = *(_OWORD *)v13;
    *(_OWORD *)(a3 + 64) = v11;
    *(void *)(a3 + 80) = v14;
  }
  double result = sub_215B35F44(a3, (uint64_t)&v15);
  *(void *)a3 = &unk_26C67C168;
  return result;
}

void sub_215B56AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *v19;
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v18);
  }
  *uint64_t v19 = -1;
  _Unwind_Resume(a1);
}

void *sub_215B56B40@<X0>(_DWORD *a1@<X1>, char *a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = 4 * (*a1 != 0);
  LODWORD(a3) = v4 * *a1;
  if (a3 <= 0x20) {
    LODWORD(a3) = 32;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = HIDWORD(*(void *)a1);
  char v7 = *a2;
  if (a1[1]) {
    a3 = a3;
  }
  else {
    a3 = 32;
  }
  *(_DWORD *)uint64_t v16 = 4;
  *(_DWORD *)&v16[4] = v5;
  *(void *)uint64_t v12 = *(void *)v16;
  *(_DWORD *)&v12[8] = v6;
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)&v16[4] = v4 & 0x3FFFFFFFFLL | ((unint64_t)(a3 >> 2) << 34);
  *(void *)&v12[12] = *(void *)v16;
  *(_DWORD *)&v12[20] = a3;
  *(void *)&v12[24] = v5;
  uint64_t v13 = *(void *)&v16[4];
  v14[0] = v7;
  *(void *)uint64_t v3 = &unk_26C67B748;
  *(_DWORD *)(v3 + 8) = 0;
  sub_215B325E4(0, 25, (uint64_t)v12, v3 + 16);
  __int16 v8 = (_OWORD *)(v3 + 48);
  if (*(_DWORD *)&v12[24] && *(_DWORD *)&v12[28])
  {
    if (*(_DWORD *)(v3 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v15, v3 + 16);
    sub_215B32978((uint64_t)v16, (uint64_t)v15);
    long long v9 = v17;
    *__int16 v8 = *(_OWORD *)&v16[8];
    *(_OWORD *)(v3 + 64) = v9;
    *(void *)(v3 + 80) = v18;
    sub_215B61CEC(v15);
  }
  else
  {
    long long v10 = *(_OWORD *)&v12[16];
    *__int16 v8 = *(_OWORD *)v12;
    *(_OWORD *)(v3 + 64) = v10;
    *(void *)(v3 + 80) = v13;
  }
  double result = sub_215B32CF8(v3, (uint64_t)v14);
  *(void *)uint64_t v3 = &unk_26C67C1F8;
  return result;
}

void sub_215B56CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *v19;
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v18);
  }
  *uint64_t v19 = -1;
  _Unwind_Resume(a1);
}

void *sub_215B56D90@<X0>(_DWORD *a1@<X1>, char *a2@<X2>, unint64_t a3@<X8>)
{
  uint64_t v3 = a3;
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = 4 * (*a1 != 0);
  LODWORD(a3) = v4 * *a1;
  if (a3 <= 0x20) {
    LODWORD(a3) = 32;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = HIDWORD(*(void *)a1);
  char v7 = *a2;
  if (a1[1]) {
    a3 = a3;
  }
  else {
    a3 = 32;
  }
  *(_DWORD *)uint64_t v16 = 4;
  *(_DWORD *)&v16[4] = v5;
  *(void *)uint64_t v12 = *(void *)v16;
  *(_DWORD *)&v12[8] = v6;
  *(_DWORD *)uint64_t v16 = 1;
  *(void *)&v16[4] = v4 & 0x3FFFFFFFFLL | ((unint64_t)(a3 >> 2) << 34);
  *(void *)&v12[12] = *(void *)v16;
  *(_DWORD *)&v12[20] = a3;
  *(void *)&v12[24] = v5;
  uint64_t v13 = *(void *)&v16[4];
  v14[0] = v7;
  *(void *)uint64_t v3 = &unk_26C67B748;
  *(_DWORD *)(v3 + 8) = 0;
  sub_215B325E4(0, 37, (uint64_t)v12, v3 + 16);
  __int16 v8 = (_OWORD *)(v3 + 48);
  if (*(_DWORD *)&v12[24] && *(_DWORD *)&v12[28])
  {
    if (*(_DWORD *)(v3 + 40)) {
      sub_215742D4C();
    }
    sub_215B61968(v15, v3 + 16);
    sub_215B32978((uint64_t)v16, (uint64_t)v15);
    long long v9 = v17;
    *__int16 v8 = *(_OWORD *)&v16[8];
    *(_OWORD *)(v3 + 64) = v9;
    *(void *)(v3 + 80) = v18;
    sub_215B61CEC(v15);
  }
  else
  {
    long long v10 = *(_OWORD *)&v12[16];
    *__int16 v8 = *(_OWORD *)v12;
    *(_OWORD *)(v3 + 64) = v10;
    *(void *)(v3 + 80) = v13;
  }
  double result = sub_215B32CF8(v3, (uint64_t)v14);
  *(void *)uint64_t v3 = &unk_26C67C3A8;
  return result;
}

void sub_215B56F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  sub_215B61CEC(&a18);
  uint64_t v21 = *v19;
  if (v21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v21])(&a17, v18);
  }
  *uint64_t v19 = -1;
  _Unwind_Resume(a1);
}

void *sub_215B56FE0(void *a1)
{
  *a1 = &unk_26C67C4C8;
  sub_215B61CEC(a1 + 1);
  return a1;
}

void sub_215B57024(void *a1)
{
  *a1 = &unk_26C67C4C8;
  sub_215B61CEC(a1 + 1);

  JUMPOUT(0x2166C4D20);
}

void *sub_215B57088(void *a1)
{
  *a1 = &unk_26C67C4E8;
  sub_215B621C0(a1 + 1);
  return a1;
}

void sub_215B570CC(void *a1)
{
  *a1 = &unk_26C67C4E8;
  sub_215B621C0(a1 + 1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B57130(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B598;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_215B571BC(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B7D8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_215B57248(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B988;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_215B572D4(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BB38;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40A1F8E8FFLL);
}

uint64_t sub_215B57360(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B628;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

uint64_t sub_215B573EC(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BA18;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

uint64_t sub_215B57478(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BBC8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

uint64_t sub_215B57504(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B6B8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

uint64_t sub_215B57590(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B868;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

uint64_t sub_215B5761C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B748;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

uint64_t sub_215B576A8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BAA8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

uint64_t sub_215B57734(uint64_t a1)
{
  *(void *)a1 = &unk_26C67BC58;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

uint64_t sub_215B577C0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B748;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

uint64_t sub_215B5784C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67B8F8;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40ED729E16);
}

void sub_215B578D8(uint64_t a1, void *a2)
{
  *a2 = &off_26C67D770;
  uint64_t v2 = (std::__shared_weak_count *)a2[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *sub_215B57970(uint64_t a1, void *a2)
{
  return sub_215B61CEC(a2);
}

void *sub_215B57978(uint64_t a1, void *a2)
{
  return sub_215B621C0(a2);
}

void sub_215B57980(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_215B57990(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26C67C898[v5])(&v8, v4);
LABEL_7:
    *(void *)uint64_t v4 = &off_26C67D770;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return;
  }
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

__n128 sub_215B57A94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_26C67C898[v5])(&v7, v4);
LABEL_7:
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t v4 = &unk_26C67D730;
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }

  sub_215B61BF0(a2, a3);
  return result;
}

__n128 sub_215B57B48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_26C67C898[v5])(&v7, v4);
LABEL_7:
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t v4 = &unk_26C67D750;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }

  sub_215B620C4(a2, a3);
  return result;
}

__n128 sub_215B57BFC(__n128 **a1, __n128 *a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (*a1)[1].n128_u32[2];
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 3)
  {
    ((void (*)(char *, __n128 *))off_26C67C898[v5])(&v8, v4);
LABEL_8:
    __n128 result = *a3;
    __n128 *v4 = *a3;
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    v4[1].n128_u32[2] = 3;
    return result;
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  char v7 = (std::__shared_weak_count *)a2->n128_u64[1];
  *a2 = result;
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
  return result;
}

uint64_t sub_215B57CA0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B57D1C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B57DA8()
{
  return 1;
}

uint64_t sub_215B57DB0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_215B57DB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 2, a1 + 32, 2, a1 + 40, 1);
}

uint64_t sub_215B57DD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B57E64(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B57EE0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B57F6C()
{
  return 2;
}

uint64_t sub_215B57F74(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_215B57F7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_215B57F98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B58028(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B580A4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B58130()
{
  return 3;
}

uint64_t sub_215B58138(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_215B58140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 2, a1 + 32, 2, a1 + 40, 2);
}

uint64_t sub_215B5815C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B581EC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B58268(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B582F4()
{
  return 4;
}

uint64_t sub_215B582FC(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_215B58304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 2, a1 + 32, 2, a1 + 40, 4);
}

uint64_t sub_215B58320(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B583B0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B5842C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B584B8()
{
  return 5;
}

uint64_t sub_215B584C0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B584C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_215B584E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B58574(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B585F0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B5867C()
{
  return 7;
}

uint64_t sub_215B58684(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B5868C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_215B586A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B58738(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B587B4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B58840()
{
  return 8;
}

uint64_t sub_215B58848(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B58850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_215B5886C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B588FC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B58978(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B58A04()
{
  return 21;
}

uint64_t sub_215B58A0C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B58A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_215B58A30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B58AC0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B58B3C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B58BC8()
{
  return 22;
}

uint64_t sub_215B58BD0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B58BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_215B58BF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B58C84(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B58D00(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B58D8C()
{
  return 25;
}

uint64_t sub_215B58D94(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B58D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_215B58DB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B58E48(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B58EC4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B58F50()
{
  return 31;
}

uint64_t sub_215B58F58(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B58F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_215B58F7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B5900C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B59088(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B59114()
{
  return 32;
}

uint64_t sub_215B5911C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B59124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 4);
}

uint64_t sub_215B59140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B591D0(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B5924C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B592D8()
{
  return 37;
}

uint64_t sub_215B592E0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B592E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_215B59304(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B59394(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B59410(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B5949C()
{
  return 38;
}

uint64_t sub_215B594A4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B594AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 2);
}

uint64_t sub_215B594C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B59558(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 != 875836534)
        {
          if (a1 == 1094862674) {
            return result;
          }
          int v3 = 1111970369;
          goto LABEL_37;
        }
      }
      else if (a1 != 875704422 && a1 != 875704438 && a1 != 875836518)
      {
        goto LABEL_39;
      }
      return 2;
    }
    if (a1 > 843264055)
    {
      int v4 = -843264056;
LABEL_23:
      unsigned int v5 = a1 + v4;
      if (v5 > 0x30 || ((1 << v5) & 0x1400000000001) == 0) {
        goto LABEL_39;
      }
      return result;
    }
    if (a1 != 24 && a1 != 32)
    {
      int v3 = 842285639;
      goto LABEL_37;
    }
  }
  else
  {
    if (a1 <= 1647392358)
    {
      if (a1 > 1278226741)
      {
        if (a1 > 1380410944)
        {
          if (a1 == 1380410945) {
            return result;
          }
          int v3 = 1380411457;
        }
        else
        {
          if (a1 == 1278226742) {
            return result;
          }
          int v3 = 1380401729;
        }
        goto LABEL_37;
      }
      int v4 = -1278226488;
      goto LABEL_23;
    }
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032) {
          return result;
        }
        int v3 = 1751411059;
      }
      else
      {
        if (a1 == 1717855600) {
          return result;
        }
        int v3 = 1717856627;
      }
LABEL_37:
      if (a1 == v3) {
        return result;
      }
LABEL_39:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 396, (uint64_t)"", 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_215E1ABD8);
      abort();
    }
    if (a1 != 1647392359 && a1 != 1647589490)
    {
      int v3 = 1647719521;
      goto LABEL_37;
    }
  }
  return result;
}

void *sub_215B597A0(void *result)
{
  uint64_t v1 = (char **)*result;
  uint64_t v2 = *(unsigned int *)(*result + 16);
  if (v2 == 1)
  {
    uint64_t v3 = *((unsigned int *)v1 + 5);
    size_t v4 = *((unsigned int *)v1 + 2);
    unsigned int v5 = (unsigned __int8 *)result[1];
    if (v3 == v4)
    {
      size_t v6 = (*((_DWORD *)v1 + 3) * v3);
      char v7 = *v1;
      int v8 = *v5;
      return memset(v7, v8, v6);
    }
    int v20 = *((_DWORD *)v1 + 3);
    if (v4) {
      BOOL v21 = v20 == 0;
    }
    else {
      BOOL v21 = 1;
    }
    if (!v21)
    {
      uint64_t v22 = *v1;
      int v23 = v20 - 1;
      if (v20 != 1)
      {
        do
        {
          memset(v22, *v5, v4);
          v22 += v3;
          --v23;
        }
        while (v23);
      }
      int v8 = *v5;
      char v7 = v22;
      size_t v6 = v4;
      return memset(v7, v8, v6);
    }
  }
  else
  {
    int v9 = *((_DWORD *)v1 + 2);
    int v10 = *((_DWORD *)v1 + 3);
    if (v9) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t v12 = (unsigned char *)result[1];
      int v13 = v9 - 1;
      uint64_t v14 = *v1;
      int v15 = v10 - 1;
      if (v15)
      {
        uint64_t v16 = *((unsigned int *)v1 + 5);
        if (v13)
        {
          for (int i = 0; i != v15; ++i)
          {
            int v18 = v13;
            uint64_t v19 = v14;
            do
            {
              *uint64_t v19 = *v12;
              v19 += v2;
              --v18;
            }
            while (v18);
            *uint64_t v19 = *v12;
            v14 += v16;
          }
        }
        else
        {
          do
          {
            *uint64_t v14 = *v12;
            v14 += v16;
            --v15;
          }
          while (v15);
        }
      }
      for (; v13; --v13)
      {
        *uint64_t v14 = *v12;
        v14 += v2;
      }
      *uint64_t v14 = *v12;
    }
  }
  return result;
}

void *sub_215B5993C(void *result)
{
  uint64_t v1 = (char **)*result;
  size_t v2 = *(unsigned int *)(*result + 8);
  uint64_t v3 = *(unsigned int *)(*result + 24);
  if (v3 == *(_DWORD *)(*result + 20) * v2)
  {
    uint64_t v4 = *((unsigned int *)v1 + 7);
    int v5 = *((_DWORD *)v1 + 3);
    size_t v6 = (unsigned __int8 *)result[1];
    size_t v7 = (v5 * v2);
    if (v4 == v5 * v3)
    {
      size_t v8 = (*((_DWORD *)v1 + 4) * v7);
      int v9 = *v1;
      int v10 = *v6;
LABEL_34:
      return memset(v9, v10, v8);
    }
    int v23 = *((_DWORD *)v1 + 4);
    if (v2) {
      BOOL v24 = v5 == 0;
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24 && v23 != 0)
    {
      long long v26 = *v1;
      int v27 = v23 - 1;
      if (v23 != 1)
      {
        do
        {
          memset(v26, *v6, v7);
          v26 += v4;
          --v27;
        }
        while (v27);
      }
      int v10 = *v6;
      int v9 = v26;
      size_t v8 = v7;
      goto LABEL_34;
    }
  }
  else
  {
    int v12 = *((_DWORD *)v1 + 3);
    int v11 = *((_DWORD *)v1 + 4);
    if (v2) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13 && v11 != 0)
    {
      int v15 = (unsigned __int8 *)result[1];
      int v16 = v12 - 1;
      long long v17 = *v1;
      int v18 = v11 - 1;
      if (v11 != 1)
      {
        uint64_t v19 = *((unsigned int *)v1 + 7);
        if (v12 == 1)
        {
          do
          {
            memset(v17, *v15, v2);
            v17 += v19;
            --v18;
          }
          while (v18);
        }
        else
        {
          int v20 = 0;
          do
          {
            int v21 = v16;
            uint64_t v22 = v17;
            do
            {
              memset(v22, *v15, v2);
              v22 += v3;
              --v21;
            }
            while (v21);
            memset(v22, *v15, v2);
            v17 += v19;
            ++v20;
          }
          while (v20 != v18);
        }
      }
      for (; v16; --v16)
      {
        memset(v17, *v15, v2);
        v17 += v3;
      }
      int v10 = *v15;
      int v9 = v17;
      size_t v8 = v2;
      goto LABEL_34;
    }
  }
  return result;
}

uint64_t sub_215B59AFC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (a3[1]) {
    BOOL v4 = *a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  unint64_t v5 = *(void *)a3;
  if (v4) {
    unint64_t v5 = 0;
  }
  if (v5) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 0;
  }
  LODWORD(v7) = v6 * v5;
  if (HIDWORD(v5)) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = 0;
  }
  LODWORD(v9) = 1;
  *(void *)((char *)&v9 + 4) = v6 | (v7 << 32);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = __PAIR64__(v5, 3);
  *(_DWORD *)(a1 + 16) = HIDWORD(v5);
  *(void *)(a1 + 20) = v9;
  *(_DWORD *)(a1 + 28) = v7;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)((char *)&v9 + 4);
  if (v7 * HIDWORD(v5) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

_DWORD *sub_215B59C20(_DWORD *result, uint64_t a2, unsigned char ***a3, unsigned char *a4)
{
  if (result[5])
  {
    unsigned int v4 = 0;
    do
    {
      *(void *)a2 = a4;
      unint64_t v5 = a4;
      if (result[3])
      {
        unsigned int v6 = 0;
        unint64_t v5 = a4;
        do
        {
          *(void *)a2 = v5;
          *unint64_t v5 = ***a3;
          *(unsigned char *)(*(void *)a2 + 1) = ***a3;
          *(unsigned char *)(*(void *)a2 + 2) = ***a3;
          *(unsigned char *)(*(void *)a2 + 3) = ***a3;
          v5 += result[4];
          ++v6;
        }
        while (v6 < result[3]);
      }
      *(void *)a2 = v5;
      *unint64_t v5 = ***a3;
      *(unsigned char *)(*(void *)a2 + 1) = ***a3;
      *(unsigned char *)(*(void *)a2 + 2) = ***a3;
      *(unsigned char *)(*(void *)a2 + 3) = ***a3;
      a4 += result[6];
      ++v4;
    }
    while (v4 < result[5]);
  }
  *(void *)a2 = a4;
  if (result[3])
  {
    unsigned int v7 = 0;
    do
    {
      *(void *)a2 = a4;
      *a4 = ***a3;
      *(unsigned char *)(*(void *)a2 + 1) = ***a3;
      *(unsigned char *)(*(void *)a2 + 2) = ***a3;
      *(unsigned char *)(*(void *)a2 + 3) = ***a3;
      a4 += result[4];
      ++v7;
    }
    while (v7 < result[3]);
  }
  *(void *)a2 = a4;
  *a4 = ***a3;
  *(unsigned char *)(*(void *)a2 + 1) = ***a3;
  *(unsigned char *)(*(void *)a2 + 2) = ***a3;
  *(unsigned char *)(*(void *)a2 + 3) = ***a3;
  return result;
}

uint64_t sub_215B59DDC(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  size_t v2 = *(const __int16 **)(result + 8);
  uint64_t v3 = *(unsigned int *)(*(void *)result + 8);
  int v5 = *(_DWORD *)(*(void *)result + 16);
  int v4 = *(_DWORD *)(*(void *)result + 20);
  if (v4 == v5 * v3)
  {
    uint64_t v6 = (*(_DWORD *)(v1 + 12) * v3);
    unint64_t v7 = *(void *)v1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
        abort();
      }
    }
    else if (!v6)
    {
      return result;
    }
    unint64_t v12 = v6 - (v6 != 0) + 1;
    if (v12 < 0x10) {
      goto LABEL_19;
    }
    uint64_t v13 = 2 * v6;
    if (!v6) {
      uint64_t v13 = 2;
    }
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      uint64_t v14 = (__int16 *)v7;
LABEL_20:
      unint64_t v15 = v6 + 1;
      do
      {
        *v14++ = *v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    uint64_t v14 = (__int16 *)(v7 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF0;
    int16x8_t v16 = vld1q_dup_s16(v2);
    long long v17 = (int16x8_t *)(v7 + 16);
    unint64_t v18 = v12 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17[-1] = v16;
      *long long v17 = v16;
      v17 += 2;
      v18 -= 16;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_20;
    }
  }
  else
  {
    char v20 = 0;
    uint64_t v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    void v21[2] = v2;
    int v9 = *(_DWORD *)(v1 + 12);
    if (v3) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      uint64_t v22[2] = v5;
      void v22[3] = v9 - 1;
      v22[4] = v4;
      unint64_t v11 = *(void *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_215B59F78((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_215B59F78(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  int v7 = *(_DWORD *)(result + 8);
  *(void *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    uint64_t v8 = result;
    for (unsigned int i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(void *)a2 = v4;
      BOOL v10 = *(const __int16 **)(a3 + 16);
      uint64_t v11 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
          if (result) {
            goto LABEL_39;
          }
        }
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          BOOL v13 = v4 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v4 + 2 * v11;
          unint64_t v12 = (__int16 *)v4;
          if (v13)
          {
            unint64_t v12 = (__int16 *)(v4 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            int16x8_t v14 = vld1q_dup_s16(v10);
            unint64_t v15 = (int16x8_t *)(v4 + 16);
            unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = v14;
              *unint64_t v15 = v14;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            BOOL v17 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v17) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          unint64_t v12 = (__int16 *)v4;
        }
        unint64_t v18 = v11 + 1;
        do
        {
          *v12++ = *v10;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v8 + 16);
    }
  }
  *(void *)a2 = v4;
  uint64_t v19 = *(uint64_t **)(a3 + 8);
  char v20 = *(const __int16 **)(a3 + 16);
  uint64_t v21 = *v19;
  if (!v4)
  {
    if (v21)
    {
      uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
LABEL_39:
      }
        abort();
    }
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v4 < (unint64_t)(v20 + 1) ? (BOOL v22 = (unint64_t)v20 >= v4 + 2 * v21) : (BOOL v22 = 1), !v22))
    {
      int v23 = (__int16 *)v4;
      uint64_t v24 = v21;
LABEL_36:
      unint64_t v28 = v24 + 1;
      do
      {
        *v23++ = *v20;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    int v23 = (__int16 *)(v4 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v24 = v21 & 0xF;
    int16x8_t v25 = vld1q_dup_s16(v20);
    long long v26 = (int16x8_t *)(v4 + 16);
    unint64_t v27 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *long long v26 = v25;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return result;
}

uint64_t sub_215B5A19C(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  size_t v2 = *(const __int16 **)(result + 8);
  int v3 = *(_DWORD *)(*(void *)result + 12);
  int v5 = *(_DWORD *)(*(void *)result + 24);
  int v4 = *(_DWORD *)(*(void *)result + 28);
  if (v4 == v5 * v3)
  {
    uint64_t v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    unint64_t v7 = *(void *)v1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
        abort();
      }
    }
    else if (!v6)
    {
      return result;
    }
    unint64_t v14 = v6 - (v6 != 0) + 1;
    if (v14 < 0x10) {
      goto LABEL_22;
    }
    uint64_t v15 = 2 * v6;
    if (!v6) {
      uint64_t v15 = 2;
    }
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      unint64_t v16 = (__int16 *)v7;
LABEL_23:
      unint64_t v17 = v6 + 1;
      do
      {
        *v16++ = *v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    unint64_t v16 = (__int16 *)(v7 + 2 * (v14 & 0xFFFFFFFFFFFFFFF0));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF0;
    int16x8_t v18 = vld1q_dup_s16(v2);
    uint64_t v19 = (int16x8_t *)(v7 + 16);
    unint64_t v20 = v14 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v19[-1] = v18;
      *uint64_t v19 = v18;
      v19 += 2;
      v20 -= 16;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_23;
    }
  }
  else
  {
    char v22 = 0;
    int v9 = *(_DWORD *)(v1 + 8);
    uint64_t v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    void v23[2] = v2;
    int v10 = *(_DWORD *)(v1 + 16);
    if (v3) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      void v24[2] = *(_DWORD *)(v1 + 20);
      v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      unint64_t v13 = *(void *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_215B5A35C((BOOL)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_215B5A35C(BOOL result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v7 = *(unsigned int *)(result + 16);
  unint64_t v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(void *)a2 = a4;
  *(void *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    int v9 = (unsigned int *)result;
    for (unsigned int i = 0; i < v9[5]; ++i)
    {
      *(void *)a2 = v4;
      BOOL v11 = *(const __int16 **)(a3 + 16);
      uint64_t v12 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
          if (result) {
            goto LABEL_39;
          }
        }
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          BOOL v14 = v4 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v4 + 2 * v12;
          unint64_t v13 = (__int16 *)v4;
          if (v14)
          {
            unint64_t v13 = (__int16 *)(v4 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            int16x8_t v15 = vld1q_dup_s16(v11);
            unint64_t v16 = (int16x8_t *)(v4 + 16);
            unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = v15;
              *unint64_t v16 = v15;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            BOOL v18 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v18) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          unint64_t v13 = (__int16 *)v4;
        }
        unint64_t v19 = v12 + 1;
        do
        {
          *v13++ = *v11;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 2 * v9[6];
    }
  }
  *(void *)a2 = v4;
  unint64_t v20 = *(uint64_t **)(a3 + 8);
  uint64_t v21 = *(const __int16 **)(a3 + 16);
  uint64_t v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
LABEL_39:
      }
        abort();
    }
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v4 < (unint64_t)(v21 + 1) ? (BOOL v23 = (unint64_t)v21 >= v4 + 2 * v22) : (BOOL v23 = 1), !v23))
    {
      uint64_t v24 = (__int16 *)v4;
      uint64_t v25 = v22;
LABEL_36:
      unint64_t v29 = v25 + 1;
      do
      {
        *v24++ = *v21;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    uint64_t v24 = (__int16 *)(v4 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v25 = v22 & 0xF;
    int16x8_t v26 = vld1q_dup_s16(v21);
    unint64_t v27 = (int16x8_t *)(v4 + 16);
    unint64_t v28 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v27[-1] = v26;
      *unint64_t v27 = v26;
      v27 += 2;
      v28 -= 16;
    }
    while (v28);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return result;
}

uint64_t sub_215B5A588(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    uint64_t v7 = result;
    for (unsigned int i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      int v9 = *(const __int16 **)(a3 + 16);
      uint64_t v10 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
          if (result) {
            goto LABEL_39;
          }
        }
      }
      if (v10 >= 1)
      {
        if ((unint64_t)v10 >= 0x10)
        {
          BOOL v12 = v4 >= (unint64_t)(v9 + 1) || (unint64_t)v9 >= v4 + 2 * v10;
          BOOL v11 = (__int16 *)v4;
          if (v12)
          {
            BOOL v11 = (__int16 *)(v4 + 2 * (v10 & 0xFFFFFFFFFFFFFFF0));
            int16x8_t v13 = vld1q_dup_s16(v9);
            BOOL v14 = (int16x8_t *)(v4 + 16);
            unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = v13;
              *BOOL v14 = v13;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            BOOL v16 = v10 == (v10 & 0x7FFFFFFFFFFFFFF0);
            v10 &= 0xFu;
            if (v16) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          BOOL v11 = (__int16 *)v4;
        }
        unint64_t v17 = v10 + 1;
        do
        {
          *v11++ = *v9;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v4 += 2 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  BOOL v18 = *(uint64_t **)(a3 + 8);
  unint64_t v19 = *(const __int16 **)(a3 + 16);
  uint64_t v20 = *v18;
  if (!v4)
  {
    if (v20)
    {
      uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
LABEL_39:
      }
        abort();
    }
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v4 < (unint64_t)(v19 + 1) ? (BOOL v21 = (unint64_t)v19 >= v4 + 2 * v20) : (BOOL v21 = 1), !v21))
    {
      uint64_t v22 = (__int16 *)v4;
      uint64_t v23 = v20;
LABEL_36:
      unint64_t v27 = v23 + 1;
      do
      {
        *v22++ = *v19;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    uint64_t v22 = (__int16 *)(v4 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v23 = v20 & 0xF;
    int16x8_t v24 = vld1q_dup_s16(v19);
    uint64_t v25 = (int16x8_t *)(v4 + 16);
    unint64_t v26 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = v24;
      *uint64_t v25 = v24;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return result;
}

void **sub_215B5A7A4(void **result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  int v3 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && v3 != 0)
  {
    int v6 = v2 - 1;
    uint64_t v7 = *(unsigned int *)(a2 + 24);
    unint64_t v8 = *(_WORD **)a2;
    int v9 = v3 - 1;
    if (v3 == 1)
    {
      BOOL v11 = (_WORD *)**result;
      if (!v6)
      {
LABEL_19:
        *unint64_t v8 = *v11;
        v8[1] = *v11;
        void v8[2] = *v11;
        return result;
      }
    }
    else
    {
      uint64_t v10 = *(unsigned int *)(a2 + 28);
      BOOL v11 = (_WORD *)**result;
      if (!v6)
      {
        do
        {
          *unint64_t v8 = *v11;
          v8[1] = *v11;
          void v8[2] = *v11;
          v8 += v10;
          --v9;
        }
        while (v9);
        goto LABEL_19;
      }
      int v12 = 0;
      int16x8_t v13 = (void **)(v8 + 2);
      do
      {
        uint64_t result = v13;
        int v14 = v6;
        do
        {
          *((_WORD *)result - 2) = *v11;
          *((_WORD *)result - 1) = *v11;
          *(_WORD *)uint64_t result = *v11;
          uint64_t result = (void **)((char *)result + 2 * v7);
          --v14;
        }
        while (v14);
        *((_WORD *)result - 2) = *v11;
        *((_WORD *)result - 1) = *v11;
        *(_WORD *)uint64_t result = *v11;
        v8 += v10;
        ++v12;
        int16x8_t v13 = (void **)((char *)v13 + 2 * v10);
      }
      while (v12 != v9);
    }
    do
    {
      *unint64_t v8 = *v11;
      v8[1] = *v11;
      void v8[2] = *v11;
      v8 += v7;
      --v6;
    }
    while (v6);
    goto LABEL_19;
  }
  return result;
}

_DWORD *sub_215B5A8CC(uint64_t a1)
{
  uint64_t result = *(_DWORD **)a1;
  int v3 = result[5];
  if (v3 == 1)
  {
    if (result[6] == result[2])
    {
      return (_DWORD *)sub_215B5A19C(a1);
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 8);
      return (_DWORD *)sub_215B5A9AC((uint64_t)result, v10);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 8);
    int v5 = result[2];
    int v4 = result[3];
    int v6 = result[4];
    if (v5) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && v6 != 0)
    {
      int v12 = &v11;
      v14[0] = 0;
      v14[1] = v5 - 1;
      unsigned char v14[2] = v3;
      _OWORD v14[3] = v4 - 1;
      int v9 = result[7];
      v14[4] = result[6];
      v14[5] = v6 - 1;
      v14[6] = v9;
      int16x8_t v13 = *(_WORD **)result;
      return sub_215B5AA70(v14, &v12, &v13);
    }
  }
  return result;
}

uint64_t sub_215B5A9AC(uint64_t result, uint64_t a2)
{
  char v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  uint64_t v3 = *(unsigned int *)(result + 8);
  int v2 = *(_DWORD *)(result + 12);
  uint64_t v11 = v3;
  uint64_t v13[2] = a2;
  int v4 = *(_DWORD *)(result + 16);
  if (v3) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    int v7 = *(_DWORD *)(result + 24);
    unsigned char v14[2] = *(_DWORD *)(result + 20);
    _OWORD v14[3] = v2 - 1;
    unsigned int v8 = *(_DWORD *)(result + 28);
    unint64_t v9 = *(void *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    unsigned int v15 = v4 - 1;
    unsigned int v16 = v8;
    if (v4 != 1)
    {
      unsigned int v10 = 0;
      do
      {
        sub_215B5A588((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 2 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_215B5A588((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

_DWORD *sub_215B5AA70(_DWORD *result, void **a2, _WORD **a3)
{
  uint64_t v3 = *a3;
  int v4 = result[5];
  if (!v4)
  {
    int v5 = result[3];
    int v6 = (_WORD *)**a2;
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  int v5 = result[3];
  int v6 = (_WORD *)**a2;
  uint64_t v7 = result[6];
  if (v5)
  {
    int v8 = 0;
    unint64_t v9 = v3 + 2;
    uint64_t v10 = 2 * result[4];
    do
    {
      uint64_t v11 = v9;
      int v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *uint64_t v11 = *v6;
        v11[1] = *v6;
        uint64_t v11 = (_WORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *uint64_t v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    uint64_t v13 = 2 * result[4];
    do
    {
      *uint64_t v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      uint64_t v3 = (_WORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *uint64_t v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *uint64_t v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  v3[3] = *v6;
  return result;
}

void sub_215B5ABB0(void *a1, __n128 a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (const __int16 *)a1[1];
  uint64_t v4 = *(unsigned int *)(*a1 + 8);
  int v6 = *(_DWORD *)(*a1 + 16);
  int v5 = *(_DWORD *)(*a1 + 20);
  if (v5 == v6 * v4)
  {
    uint64_t v7 = (*(_DWORD *)(v2 + 12) * v4);
    unint64_t v8 = *(void *)v2;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
    }
    else if (!v7)
    {
      return;
    }
    unint64_t v13 = v7 - (v7 != 0) + 1;
    if (v13 < 0x10) {
      goto LABEL_19;
    }
    uint64_t v14 = 2 * v7;
    if (!v7) {
      uint64_t v14 = 2;
    }
    if (v8 < (unint64_t)(v3 + 1) && v8 + v14 > (unint64_t)v3)
    {
LABEL_19:
      unsigned int v15 = (__int16 *)v8;
LABEL_20:
      unint64_t v16 = v7 + 1;
      do
      {
        *v15++ = *v3;
        --v16;
      }
      while (v16 > 1);
      return;
    }
    unsigned int v15 = (__int16 *)(v8 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v13 & 0xFFFFFFFFFFFFFFF0;
    int16x8_t v17 = vld1q_dup_s16(v3);
    BOOL v18 = (int16x8_t *)(v8 + 16);
    unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v18[-1] = v17;
      *BOOL v18 = v17;
      v18 += 2;
      v19 -= 16;
    }
    while (v19);
    if (v13 != (v13 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_20;
    }
  }
  else
  {
    char v21 = 0;
    uint64_t v20 = v4;
    v22[0] = &v21;
    v22[1] = &v20;
    uint64_t v22[2] = v3;
    int v10 = *(_DWORD *)(v2 + 12);
    if (v4) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      v23[0] = 0;
      v23[1] = v4 - 1;
      void v23[2] = v6;
      void v23[3] = v10 - 1;
      v23[4] = v5;
      unint64_t v12 = *(void *)v2;
      v24[0] = 0;
      v24[1] = 0;
      sub_215B5AD4C(v23, (uint64_t)v24, (uint64_t)v22, v12, a2);
    }
  }
}

unsigned __int16 sub_215B5AD4C@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5 = a4;
  int v8 = a1[2];
  *(void *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v8;
  if (a1[3])
  {
    for (unsigned int i = 0; i < a1[3]; ++i)
    {
      *(void *)a2 = v5;
      BOOL v11 = *(const __int16 **)(a3 + 16);
      uint64_t v12 = **(void **)(a3 + 8);
      if (!v5
        && v12
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_39;
      }
      if (v12 >= 1)
      {
        if ((unint64_t)v12 >= 0x10)
        {
          BOOL v14 = v5 >= (unint64_t)(v11 + 1) || (unint64_t)v11 >= v5 + 2 * v12;
          unint64_t v13 = (__int16 *)v5;
          if (v14)
          {
            unint64_t v13 = (__int16 *)(v5 + 2 * (v12 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v11);
            unsigned int v15 = (__n128 *)(v5 + 16);
            unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v15[-1] = a5;
              *unsigned int v15 = a5;
              v15 += 2;
              v16 -= 16;
            }
            while (v16);
            BOOL v17 = v12 == (v12 & 0x7FFFFFFFFFFFFFF0);
            v12 &= 0xFu;
            if (v17) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          unint64_t v13 = (__int16 *)v5;
        }
        unint64_t v18 = v12 + 1;
        do
        {
          a5.n128_u16[0] = *v11;
          *v13++ = *v11;
          --v18;
        }
        while (v18 > 1);
      }
LABEL_3:
      v5 += 2 * a1[4];
    }
  }
  *(void *)a2 = v5;
  unint64_t v19 = *(uint64_t **)(a3 + 8);
  uint64_t v20 = *(const __int16 **)(a3 + 16);
  uint64_t v21 = *v19;
  if (!v5
    && v21
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_39:
    abort();
  }
  if (v21 >= 1)
  {
    if ((unint64_t)v21 < 0x10
      || (v5 < (unint64_t)(v20 + 1) ? (BOOL v22 = (unint64_t)v20 >= v5 + 2 * v21) : (BOOL v22 = 1), !v22))
    {
      uint64_t v23 = (__int16 *)v5;
      uint64_t v24 = v21;
LABEL_36:
      unint64_t v27 = v24 + 1;
      do
      {
        a5.n128_u16[0] = *v20;
        *v23++ = *v20;
        --v27;
      }
      while (v27 > 1);
      return a5.n128_u16[0];
    }
    uint64_t v23 = (__int16 *)(v5 + 2 * (v21 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v24 = v21 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v20);
    uint64_t v25 = (__n128 *)(v5 + 16);
    unint64_t v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v25[-1] = a5;
      *uint64_t v25 = a5;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return a5.n128_u16[0];
}

void sub_215B5AF70(void *a1, __n128 a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (const __int16 *)a1[1];
  int v4 = *(_DWORD *)(*a1 + 12);
  unsigned int v6 = *(_DWORD *)(*a1 + 24);
  unsigned int v5 = *(_DWORD *)(*a1 + 28);
  if (v5 == v6 * v4)
  {
    uint64_t v7 = (*(_DWORD *)(v2 + 8) * v4 * *(_DWORD *)(v2 + 16));
    unint64_t v8 = *(void *)v2;
    if (v7) {
      BOOL v9 = v8 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
    }
    else if (!v7)
    {
      return;
    }
    unint64_t v15 = v7 - (v7 != 0) + 1;
    if (v15 < 0x10) {
      goto LABEL_22;
    }
    uint64_t v16 = 2 * v7;
    if (!v7) {
      uint64_t v16 = 2;
    }
    if (v8 < (unint64_t)(v3 + 1) && v8 + v16 > (unint64_t)v3)
    {
LABEL_22:
      BOOL v17 = (__int16 *)v8;
LABEL_23:
      unint64_t v18 = v7 + 1;
      do
      {
        *v17++ = *v3;
        --v18;
      }
      while (v18 > 1);
      return;
    }
    BOOL v17 = (__int16 *)(v8 + 2 * (v15 & 0xFFFFFFFFFFFFFFF0));
    v7 -= v15 & 0xFFFFFFFFFFFFFFF0;
    int16x8_t v19 = vld1q_dup_s16(v3);
    uint64_t v20 = (int16x8_t *)(v8 + 16);
    unint64_t v21 = v15 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v20[-1] = v19;
      *uint64_t v20 = v19;
      v20 += 2;
      v21 -= 16;
    }
    while (v21);
    if (v15 != (v15 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_23;
    }
  }
  else
  {
    char v23 = 0;
    int v10 = *(_DWORD *)(v2 + 8);
    uint64_t v22 = (v10 * v4);
    v24[0] = &v23;
    v24[1] = &v22;
    void v24[2] = v3;
    int v11 = *(_DWORD *)(v2 + 16);
    if (v4) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12 && v11 != 0)
    {
      v25[0] = 0;
      v25[1] = v10 - 1;
      unint64_t v25[2] = *(_DWORD *)(v2 + 20);
      void v25[3] = v4 - 1;
      v25[4] = v6;
      v25[5] = v11 - 1;
      v25[6] = v5;
      unint64_t v14 = *(void *)v2;
      memset(v26, 0, sizeof(v26));
      sub_215B5B130(v25, (uint64_t)v26, (uint64_t)v24, v14, a2);
    }
  }
}

unsigned __int16 sub_215B5B130@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5 = a4;
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[2] | (unint64_t)(v8 << 32);
  *(void *)a2 = a4;
  *(void *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v8;
  if (a1[5])
  {
    for (unsigned int i = 0; i < a1[5]; ++i)
    {
      *(void *)a2 = v5;
      BOOL v12 = *(const __int16 **)(a3 + 16);
      uint64_t v13 = **(void **)(a3 + 8);
      if (!v5
        && v13
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_39;
      }
      if (v13 >= 1)
      {
        if ((unint64_t)v13 >= 0x10)
        {
          BOOL v15 = v5 >= (unint64_t)(v12 + 1) || (unint64_t)v12 >= v5 + 2 * v13;
          unint64_t v14 = (__int16 *)v5;
          if (v15)
          {
            unint64_t v14 = (__int16 *)(v5 + 2 * (v13 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v12);
            uint64_t v16 = (__n128 *)(v5 + 16);
            unint64_t v17 = v13 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v16[-1] = a5;
              *uint64_t v16 = a5;
              v16 += 2;
              v17 -= 16;
            }
            while (v17);
            BOOL v18 = v13 == (v13 & 0x7FFFFFFFFFFFFFF0);
            v13 &= 0xFu;
            if (v18) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          unint64_t v14 = (__int16 *)v5;
        }
        unint64_t v19 = v13 + 1;
        do
        {
          a5.n128_u16[0] = *v12;
          *v14++ = *v12;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v5 += 2 * a1[6];
    }
  }
  *(void *)a2 = v5;
  uint64_t v20 = *(uint64_t **)(a3 + 8);
  unint64_t v21 = *(const __int16 **)(a3 + 16);
  uint64_t v22 = *v20;
  if (!v5
    && v22
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_39:
    abort();
  }
  if (v22 >= 1)
  {
    if ((unint64_t)v22 < 0x10
      || (v5 < (unint64_t)(v21 + 1) ? (BOOL v23 = (unint64_t)v21 >= v5 + 2 * v22) : (BOOL v23 = 1), !v23))
    {
      uint64_t v24 = (__int16 *)v5;
      uint64_t v25 = v22;
LABEL_36:
      unint64_t v28 = v25 + 1;
      do
      {
        a5.n128_u16[0] = *v21;
        *v24++ = *v21;
        --v28;
      }
      while (v28 > 1);
      return a5.n128_u16[0];
    }
    uint64_t v24 = (__int16 *)(v5 + 2 * (v22 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v25 = v22 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v21);
    unint64_t v26 = (__n128 *)(v5 + 16);
    unint64_t v27 = v22 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = a5;
      *unint64_t v26 = a5;
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return a5.n128_u16[0];
}

unsigned __int16 sub_215B5B35C@<H0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, __n128 a5@<Q0>)
{
  unint64_t v5 = a4;
  *a2 = a4;
  if (*(_DWORD *)(a1 + 12))
  {
    for (unsigned int i = 0; i < *(_DWORD *)(a1 + 12); ++i)
    {
      *a2 = v5;
      int v10 = *(const __int16 **)(a3 + 16);
      uint64_t v11 = **(void **)(a3 + 8);
      if (!v5
        && v11
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_39;
      }
      if (v11 >= 1)
      {
        if ((unint64_t)v11 >= 0x10)
        {
          BOOL v13 = v5 >= (unint64_t)(v10 + 1) || (unint64_t)v10 >= v5 + 2 * v11;
          BOOL v12 = (__int16 *)v5;
          if (v13)
          {
            BOOL v12 = (__int16 *)(v5 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
            a5 = (__n128)vld1q_dup_s16(v10);
            unint64_t v14 = (__n128 *)(v5 + 16);
            unint64_t v15 = v11 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v14[-1] = a5;
              *unint64_t v14 = a5;
              v14 += 2;
              v15 -= 16;
            }
            while (v15);
            BOOL v16 = v11 == (v11 & 0x7FFFFFFFFFFFFFF0);
            v11 &= 0xFu;
            if (v16) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          BOOL v12 = (__int16 *)v5;
        }
        unint64_t v17 = v11 + 1;
        do
        {
          a5.n128_u16[0] = *v10;
          *v12++ = *v10;
          --v17;
        }
        while (v17 > 1);
      }
LABEL_3:
      v5 += 2 * *(unsigned int *)(a1 + 16);
    }
  }
  *a2 = v5;
  BOOL v18 = *(uint64_t **)(a3 + 8);
  unint64_t v19 = *(const __int16 **)(a3 + 16);
  uint64_t v20 = *v18;
  if (!v5
    && v20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_39:
    abort();
  }
  if (v20 >= 1)
  {
    if ((unint64_t)v20 < 0x10
      || (v5 < (unint64_t)(v19 + 1) ? (BOOL v21 = (unint64_t)v19 >= v5 + 2 * v20) : (BOOL v21 = 1), !v21))
    {
      uint64_t v22 = (__int16 *)v5;
      uint64_t v23 = v20;
LABEL_36:
      unint64_t v26 = v23 + 1;
      do
      {
        a5.n128_u16[0] = *v19;
        *v22++ = *v19;
        --v26;
      }
      while (v26 > 1);
      return a5.n128_u16[0];
    }
    uint64_t v22 = (__int16 *)(v5 + 2 * (v20 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v23 = v20 & 0xF;
    a5 = (__n128)vld1q_dup_s16(v19);
    uint64_t v24 = (__n128 *)(v5 + 16);
    unint64_t v25 = v20 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24[-1] = a5;
      *uint64_t v24 = a5;
      v24 += 2;
      v25 -= 16;
    }
    while (v25);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF0)) {
      goto LABEL_36;
    }
  }
  return a5.n128_u16[0];
}

unsigned __int16 sub_215B5B578@<H0>(uint64_t *a1@<X0>, __n128 a2@<Q0>)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(v3 + 20);
  if (v4 == 1)
  {
    if (*(_DWORD *)(v3 + 24) == *(_DWORD *)(v3 + 8))
    {
      sub_215B5AF70(a1, a2);
    }
    else
    {
      uint64_t v12 = a1[1];
      a2.n128_u16[0] = sub_215B5B658(v3, v12, a2);
    }
  }
  else
  {
    uint64_t v14 = a1[1];
    int v6 = *(_DWORD *)(v3 + 8);
    int v5 = *(_DWORD *)(v3 + 12);
    int v7 = *(_DWORD *)(v3 + 16);
    if (v6) {
      BOOL v8 = v5 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8 && v7 != 0)
    {
      unint64_t v15 = (__int16 **)&v14;
      v16[0] = 0;
      v16[1] = v6 - 1;
      v16[2] = v4;
      void v16[3] = v5 - 1;
      int v10 = *(_DWORD *)(v3 + 28);
      v16[4] = *(_DWORD *)(v3 + 24);
      v16[5] = v7 - 1;
      v16[6] = v10;
      uint64_t v11 = *(__int16 **)v3;
      v17[0] = 0;
      v17[1] = 0;
      a2.n128_u16[0] = sub_215B5B71C(v16, (uint64_t)v17, &v15, v11);
    }
  }
  return a2.n128_u16[0];
}

unsigned __int16 sub_215B5B658@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 a3@<Q0>)
{
  char v14 = 0;
  v15[0] = &v14;
  v15[1] = &v13;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v13 = v4;
  unsigned char v15[2] = a2;
  int v5 = *(_DWORD *)(a1 + 16);
  if (v4) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v5 != 0)
  {
    v16[0] = 0;
    v16[1] = v4 - 1;
    int v8 = *(_DWORD *)(a1 + 24);
    v16[2] = *(_DWORD *)(a1 + 20);
    void v16[3] = v3 - 1;
    unsigned int v9 = *(_DWORD *)(a1 + 28);
    unint64_t v10 = *(void *)a1;
    v19[0] = 0;
    v19[1] = 0;
    v16[4] = v8;
    unsigned int v17 = v5 - 1;
    unsigned int v18 = v9;
    if (v5 != 1)
    {
      unsigned int v11 = 0;
      do
      {
        a3.n128_u64[0] = sub_215B5B35C((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
        v10 += 2 * v18;
        ++v11;
      }
      while (v11 < v17);
    }
    a3.n128_u16[0] = sub_215B5B35C((uint64_t)v16, v19, (uint64_t)v15, v10, a3);
  }
  return a3.n128_u16[0];
}

__int16 sub_215B5B71C@<H0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, __int16 ***a3@<X2>, __int16 *a4@<X3>)
{
  if (a1[5])
  {
    unsigned int v4 = 0;
    do
    {
      *(void *)a2 = a4;
      int v5 = a4;
      if (a1[3])
      {
        unsigned int v6 = 0;
        int v5 = a4;
        do
        {
          *(void *)a2 = v5;
          *int v5 = ***a3;
          *(_WORD *)(*(void *)a2 + 2) = ***a3;
          *(_WORD *)(*(void *)a2 + 4) = ***a3;
          *(_WORD *)(*(void *)a2 + 6) = ***a3;
          v5 += a1[4];
          ++v6;
        }
        while (v6 < a1[3]);
      }
      *(void *)a2 = v5;
      *int v5 = ***a3;
      *(_WORD *)(*(void *)a2 + 2) = ***a3;
      *(_WORD *)(*(void *)a2 + 4) = ***a3;
      *(_WORD *)(*(void *)a2 + 6) = ***a3;
      a4 += a1[6];
      ++v4;
    }
    while (v4 < a1[5]);
  }
  *(void *)a2 = a4;
  if (a1[3])
  {
    unsigned int v7 = 0;
    do
    {
      *(void *)a2 = a4;
      *a4 = ***a3;
      *(_WORD *)(*(void *)a2 + 2) = ***a3;
      *(_WORD *)(*(void *)a2 + 4) = ***a3;
      *(_WORD *)(*(void *)a2 + 6) = ***a3;
      a4 += a1[4];
      ++v7;
    }
    while (v7 < a1[3]);
  }
  *(void *)a2 = a4;
  *a4 = ***a3;
  *(_WORD *)(*(void *)a2 + 2) = ***a3;
  *(_WORD *)(*(void *)a2 + 4) = ***a3;
  int v8 = **a3;
  __int16 result = *v8;
  *(_WORD *)(*(void *)a2 + 6) = *v8;
  return result;
}

uint64_t sub_215B5B8D8(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(const float **)(result + 8);
  uint64_t v3 = *(unsigned int *)(*(void *)result + 8);
  int v5 = *(_DWORD *)(*(void *)result + 16);
  int v4 = *(_DWORD *)(*(void *)result + 20);
  if (v4 == v5 * v3)
  {
    uint64_t v6 = (*(_DWORD *)(v1 + 12) * v3);
    unint64_t v7 = *(void *)v1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      __int16 result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
        abort();
      }
    }
    else if (!v6)
    {
      return result;
    }
    unint64_t v12 = v6 - (v6 != 0) + 1;
    if (v12 < 0x10) {
      goto LABEL_19;
    }
    uint64_t v13 = 4 * v6;
    if (!v6) {
      uint64_t v13 = 4;
    }
    if (v7 < (unint64_t)(v2 + 1) && v7 + v13 > (unint64_t)v2)
    {
LABEL_19:
      char v14 = (_DWORD *)v7;
LABEL_20:
      unint64_t v15 = v6 + 1;
      do
      {
        *v14++ = *(_DWORD *)v2;
        --v15;
      }
      while (v15 > 1);
      return result;
    }
    char v14 = (_DWORD *)(v7 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v12 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v16 = vld1q_dup_f32(v2);
    unsigned int v17 = (float32x4_t *)(v7 + 16);
    unint64_t v18 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17[-1] = v16;
      *unsigned int v17 = v16;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_20;
    }
  }
  else
  {
    char v20 = 0;
    uint64_t v19 = v3;
    v21[0] = &v20;
    v21[1] = &v19;
    void v21[2] = v2;
    int v9 = *(_DWORD *)(v1 + 12);
    if (v3) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10)
    {
      v22[0] = 0;
      v22[1] = v3 - 1;
      uint64_t v22[2] = v5;
      void v22[3] = v9 - 1;
      v22[4] = v4;
      unint64_t v11 = *(void *)v1;
      v23[0] = 0;
      v23[1] = 0;
      return sub_215B5BA74((uint64_t)v22, (uint64_t)v23, (uint64_t)v21, v11);
    }
  }
  return result;
}

uint64_t sub_215B5BA74(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  int v7 = *(_DWORD *)(result + 8);
  *(void *)a2 = a4;
  *(_DWORD *)(a2 + 8) = v7;
  if (*(_DWORD *)(result + 12))
  {
    uint64_t v8 = result;
    for (unsigned int i = 0; i < *(_DWORD *)(v8 + 12); ++i)
    {
      *(void *)a2 = v4;
      BOOL v10 = *(const float **)(a3 + 16);
      uint64_t v11 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v11)
        {
          __int16 result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
          if (result) {
            goto LABEL_37;
          }
        }
      }
      if (v11 >= 1)
      {
        uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v13 = (v11 & 0x3FFFFFFFFFFFFFFFLL) - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v13 >= 0x10)
        {
          uint64_t v15 = -4;
          if (!v12) {
            uint64_t v15 = 0;
          }
          if (v4 >= (unint64_t)(v10 + 1)
            || (v16 = v4 + v15 + 4 * v11 + 4, char v14 = (_DWORD *)v4, (unint64_t)v10 >= v16))
          {
            char v14 = (_DWORD *)(v4 + 4 * (v13 & 0xFFFFFFFFFFFFFFF8));
            v12 -= v13 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v17 = vld1q_dup_f32(v10);
            unint64_t v18 = (float32x4_t *)(v4 + 16);
            unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v18[-1] = v17;
              *unint64_t v18 = v17;
              v18 += 2;
              v19 -= 8;
            }
            while (v19);
            if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          char v14 = (_DWORD *)v4;
        }
        unint64_t v20 = v12 + 1;
        do
        {
          *v14++ = *(_DWORD *)v10;
          --v20;
        }
        while (v20 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v8 + 16);
    }
  }
  *(void *)a2 = v4;
  BOOL v21 = *(uint64_t **)(a3 + 8);
  uint64_t v22 = *(const float **)(a3 + 16);
  uint64_t v23 = *v21;
  if (!v4)
  {
    if (v23)
    {
      __int16 result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
LABEL_37:
      }
        abort();
    }
  }
  if (v23 >= 1)
  {
    uint64_t v24 = v23 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v25 = (v23 & 0x3FFFFFFFFFFFFFFFLL) - ((v23 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v25 < 0x10) {
      goto LABEL_29;
    }
    uint64_t v26 = 4 * v23;
    if (!v24) {
      uint64_t v26 = 4;
    }
    if (v4 < (unint64_t)(v22 + 1) && (unint64_t)v22 < v4 + v26)
    {
LABEL_29:
      unint64_t v27 = (_DWORD *)v4;
LABEL_30:
      unint64_t v28 = v24 + 1;
      do
      {
        *v27++ = *(_DWORD *)v22;
        --v28;
      }
      while (v28 > 1);
      return result;
    }
    unint64_t v27 = (_DWORD *)(v4 + 4 * (v25 & 0xFFFFFFFFFFFFFFF8));
    v24 -= v25 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v29 = vld1q_dup_f32(v22);
    uint64_t v30 = (float32x4_t *)(v4 + 16);
    unint64_t v31 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v30[-1] = v29;
      *uint64_t v30 = v29;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v25 != (v25 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_30;
    }
  }
  return result;
}

float sub_215B5BCDC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*(_DWORD *)(v2 + 20) == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8)) {
      sub_215B5BDFC((uint64_t)a1);
    }
    else {
      sub_215B5C22C(v2, a1[1]);
    }
    return result;
  }
  int v4 = *(_DWORD *)(v2 + 12);
  int v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8)) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 && v5 != 0)
  {
    uint64_t v8 = (_DWORD *)a1[1];
    int v9 = v4 - 1;
    uint64_t v10 = *(unsigned int *)(v2 + 24);
    uint64_t v11 = *(_DWORD **)v2;
    int v12 = v5 - 1;
    if (v12)
    {
      uint64_t v13 = *(unsigned int *)(v2 + 28);
      if (!v9)
      {
        do
        {
          *uint64_t v11 = *v8;
          v11[1] = *v8;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_22:
        *uint64_t v11 = *v8;
        float result = *(float *)v8;
        v11[1] = *v8;
        return result;
      }
      int v14 = 0;
      uint64_t v15 = v11 + 1;
      do
      {
        unint64_t v16 = v15;
        int v17 = v9;
        do
        {
          *(v16 - 1) = *v8;
          *unint64_t v16 = *v8;
          v16 += v10;
          --v17;
        }
        while (v17);
        *(v16 - 1) = *v8;
        *unint64_t v16 = *v8;
        v11 += v13;
        ++v14;
        v15 += v13;
      }
      while (v14 != v12);
    }
    for (; v9; --v9)
    {
      *uint64_t v11 = *v8;
      v11[1] = *v8;
      v11 += v10;
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_215B5BDFC(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(const float **)(result + 8);
  int v3 = *(_DWORD *)(*(void *)result + 12);
  int v5 = *(_DWORD *)(*(void *)result + 24);
  int v4 = *(_DWORD *)(*(void *)result + 28);
  if (v4 == v5 * v3)
  {
    uint64_t v6 = (*(_DWORD *)(v1 + 8) * v3 * *(_DWORD *)(v1 + 16));
    unint64_t v7 = *(void *)v1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      float result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
        abort();
      }
    }
    else if (!v6)
    {
      return result;
    }
    unint64_t v14 = v6 - (v6 != 0) + 1;
    if (v14 < 0x10) {
      goto LABEL_22;
    }
    uint64_t v15 = 4 * v6;
    if (!v6) {
      uint64_t v15 = 4;
    }
    if (v7 < (unint64_t)(v2 + 1) && v7 + v15 > (unint64_t)v2)
    {
LABEL_22:
      unint64_t v16 = (_DWORD *)v7;
LABEL_23:
      unint64_t v17 = v6 + 1;
      do
      {
        *v16++ = *(_DWORD *)v2;
        --v17;
      }
      while (v17 > 1);
      return result;
    }
    unint64_t v16 = (_DWORD *)(v7 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
    v6 -= v14 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v18 = vld1q_dup_f32(v2);
    unint64_t v19 = (float32x4_t *)(v7 + 16);
    unint64_t v20 = v14 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v19[-1] = v18;
      *unint64_t v19 = v18;
      v19 += 2;
      v20 -= 8;
    }
    while (v20);
    if (v14 != (v14 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_23;
    }
  }
  else
  {
    char v22 = 0;
    int v9 = *(_DWORD *)(v1 + 8);
    uint64_t v21 = (v9 * v3);
    v23[0] = &v22;
    v23[1] = &v21;
    void v23[2] = v2;
    int v10 = *(_DWORD *)(v1 + 16);
    if (v3) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11 && v10 != 0)
    {
      v24[0] = 0;
      v24[1] = v9 - 1;
      void v24[2] = *(_DWORD *)(v1 + 20);
      void v24[3] = v3 - 1;
      v24[4] = v5;
      v24[5] = v10 - 1;
      v24[6] = v4;
      unint64_t v13 = *(void *)v1;
      memset(v25, 0, sizeof(v25));
      return sub_215B5BFBC((BOOL)v24, (uint64_t)v25, (uint64_t)v23, v13);
    }
  }
  return result;
}

BOOL sub_215B5BFBC(BOOL result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v7 = *(unsigned int *)(result + 16);
  unint64_t v8 = *(unsigned int *)(result + 8) | (unint64_t)(v7 << 32);
  *(void *)a2 = a4;
  *(void *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = v7;
  if (*(_DWORD *)(result + 20))
  {
    int v9 = (unsigned int *)result;
    for (unsigned int i = 0; i < v9[5]; ++i)
    {
      *(void *)a2 = v4;
      BOOL v11 = *(const float **)(a3 + 16);
      uint64_t v12 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v12)
        {
          float result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
          if (result) {
            goto LABEL_37;
          }
        }
      }
      if (v12 >= 1)
      {
        uint64_t v13 = v12 & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v14 = (v12 & 0x3FFFFFFFFFFFFFFFLL) - ((v12 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v14 >= 0x10)
        {
          uint64_t v16 = -4;
          if (!v13) {
            uint64_t v16 = 0;
          }
          if (v4 >= (unint64_t)(v11 + 1)
            || (v17 = v4 + v16 + 4 * v12 + 4, uint64_t v15 = (_DWORD *)v4, (unint64_t)v11 >= v17))
          {
            uint64_t v15 = (_DWORD *)(v4 + 4 * (v14 & 0xFFFFFFFFFFFFFFF8));
            v13 -= v14 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v18 = vld1q_dup_f32(v11);
            unint64_t v19 = (float32x4_t *)(v4 + 16);
            unint64_t v20 = v14 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v19[-1] = v18;
              *unint64_t v19 = v18;
              v19 += 2;
              v20 -= 8;
            }
            while (v20);
            if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          uint64_t v15 = (_DWORD *)v4;
        }
        unint64_t v21 = v13 + 1;
        do
        {
          *v15++ = *(_DWORD *)v11;
          --v21;
        }
        while (v21 > 1);
      }
LABEL_3:
      v4 += 4 * v9[6];
    }
  }
  *(void *)a2 = v4;
  char v22 = *(uint64_t **)(a3 + 8);
  uint64_t v23 = *(const float **)(a3 + 16);
  uint64_t v24 = *v22;
  if (!v4)
  {
    if (v24)
    {
      float result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
LABEL_37:
      }
        abort();
    }
  }
  if (v24 >= 1)
  {
    uint64_t v25 = v24 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v26 = (v24 & 0x3FFFFFFFFFFFFFFFLL) - ((v24 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v26 < 0x10) {
      goto LABEL_29;
    }
    uint64_t v27 = 4 * v24;
    if (!v25) {
      uint64_t v27 = 4;
    }
    if (v4 < (unint64_t)(v23 + 1) && (unint64_t)v23 < v4 + v27)
    {
LABEL_29:
      unint64_t v28 = (_DWORD *)v4;
LABEL_30:
      unint64_t v29 = v25 + 1;
      do
      {
        *v28++ = *(_DWORD *)v23;
        --v29;
      }
      while (v29 > 1);
      return result;
    }
    unint64_t v28 = (_DWORD *)(v4 + 4 * (v26 & 0xFFFFFFFFFFFFFFF8));
    v25 -= v26 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v30 = vld1q_dup_f32(v23);
    unint64_t v31 = (float32x4_t *)(v4 + 16);
    unint64_t v32 = v26 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v31[-1] = v30;
      *unint64_t v31 = v30;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v26 != (v26 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_30;
    }
  }
  return result;
}

uint64_t sub_215B5C22C(uint64_t result, uint64_t a2)
{
  char v12 = 0;
  v13[0] = &v12;
  v13[1] = &v11;
  uint64_t v3 = *(unsigned int *)(result + 8);
  int v2 = *(_DWORD *)(result + 12);
  uint64_t v11 = v3;
  uint64_t v13[2] = a2;
  int v4 = *(_DWORD *)(result + 16);
  if (v3) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    v14[0] = 0;
    v14[1] = v3 - 1;
    int v7 = *(_DWORD *)(result + 24);
    unsigned char v14[2] = *(_DWORD *)(result + 20);
    _OWORD v14[3] = v2 - 1;
    unsigned int v8 = *(_DWORD *)(result + 28);
    unint64_t v9 = *(void *)result;
    v17[0] = 0;
    v17[1] = 0;
    v14[4] = v7;
    unsigned int v15 = v4 - 1;
    unsigned int v16 = v8;
    if (v4 != 1)
    {
      unsigned int v10 = 0;
      do
      {
        sub_215B5C2F0((uint64_t)v14, v17, (uint64_t)v13, v9);
        v9 += 4 * v16;
        ++v10;
      }
      while (v10 < v15);
    }
    return sub_215B5C2F0((uint64_t)v14, v17, (uint64_t)v13, v9);
  }
  return result;
}

uint64_t sub_215B5C2F0(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  *a2 = a4;
  if (*(_DWORD *)(result + 12))
  {
    uint64_t v7 = result;
    for (unsigned int i = 0; i < *(_DWORD *)(v7 + 12); ++i)
    {
      *a2 = v4;
      unint64_t v9 = *(const float **)(a3 + 16);
      uint64_t v10 = **(void **)(a3 + 8);
      if (!v4)
      {
        if (v10)
        {
          float result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
          if (result) {
            goto LABEL_37;
          }
        }
      }
      if (v10 >= 1)
      {
        uint64_t v11 = v10 & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v12 = (v10 & 0x3FFFFFFFFFFFFFFFLL) - ((v10 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
        if (v12 >= 0x10)
        {
          uint64_t v14 = -4;
          if (!v11) {
            uint64_t v14 = 0;
          }
          if (v4 >= (unint64_t)(v9 + 1)
            || (v15 = v4 + v14 + 4 * v10 + 4, uint64_t v13 = (_DWORD *)v4, (unint64_t)v9 >= v15))
          {
            uint64_t v13 = (_DWORD *)(v4 + 4 * (v12 & 0xFFFFFFFFFFFFFFF8));
            v11 -= v12 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v16 = vld1q_dup_f32(v9);
            unint64_t v17 = (float32x4_t *)(v4 + 16);
            unint64_t v18 = v12 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v17[-1] = v16;
              *unint64_t v17 = v16;
              v17 += 2;
              v18 -= 8;
            }
            while (v18);
            if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_3;
            }
          }
        }
        else
        {
          uint64_t v13 = (_DWORD *)v4;
        }
        unint64_t v19 = v11 + 1;
        do
        {
          *v13++ = *(_DWORD *)v9;
          --v19;
        }
        while (v19 > 1);
      }
LABEL_3:
      v4 += 4 * *(unsigned int *)(v7 + 16);
    }
  }
  *a2 = v4;
  unint64_t v20 = *(uint64_t **)(a3 + 8);
  unint64_t v21 = *(const float **)(a3 + 16);
  uint64_t v22 = *v20;
  if (!v4)
  {
    if (v22)
    {
      float result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
      if (result) {
LABEL_37:
      }
        abort();
    }
  }
  if (v22 >= 1)
  {
    uint64_t v23 = v22 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v24 = (v22 & 0x3FFFFFFFFFFFFFFFLL) - ((v22 & 0x3FFFFFFFFFFFFFFFLL) != 0) + 1;
    if (v24 < 0x10) {
      goto LABEL_29;
    }
    uint64_t v25 = 4 * v22;
    if (!v23) {
      uint64_t v25 = 4;
    }
    if (v4 < (unint64_t)(v21 + 1) && (unint64_t)v21 < v4 + v25)
    {
LABEL_29:
      unint64_t v26 = (_DWORD *)v4;
LABEL_30:
      unint64_t v27 = v23 + 1;
      do
      {
        *v26++ = *(_DWORD *)v21;
        --v27;
      }
      while (v27 > 1);
      return result;
    }
    unint64_t v26 = (_DWORD *)(v4 + 4 * (v24 & 0xFFFFFFFFFFFFFFF8));
    v23 -= v24 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v28 = vld1q_dup_f32(v21);
    unint64_t v29 = (float32x4_t *)(v4 + 16);
    unint64_t v30 = v24 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v29[-1] = v28;
      *unint64_t v29 = v28;
      v29 += 2;
      v30 -= 8;
    }
    while (v30);
    if (v24 != (v24 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_30;
    }
  }
  return result;
}

void sub_215B5C550(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(v2 + 20);
  if (v3 == 1)
  {
    if (*(_DWORD *)(v2 + 24) == *(_DWORD *)(v2 + 8))
    {
      sub_215B5BDFC((uint64_t)a1);
    }
    else
    {
      uint64_t v10 = a1[1];
      sub_215B5C22C(v2, v10);
    }
  }
  else
  {
    uint64_t v11 = a1[1];
    int v5 = *(_DWORD *)(v2 + 8);
    int v4 = *(_DWORD *)(v2 + 12);
    int v6 = *(_DWORD *)(v2 + 16);
    if (v5) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && v6 != 0)
    {
      unint64_t v12 = &v11;
      v14[0] = 0;
      v14[1] = v5 - 1;
      unsigned char v14[2] = v3;
      _OWORD v14[3] = v4 - 1;
      int v9 = *(_DWORD *)(v2 + 28);
      v14[4] = *(_DWORD *)(v2 + 24);
      _DWORD v14[5] = v6 - 1;
      v14[6] = v9;
      uint64_t v13 = *(_DWORD **)v2;
      sub_215B5C630(v14, &v12, &v13);
    }
  }
}

float sub_215B5C630(_DWORD *a1, void **a2, _DWORD **a3)
{
  int v3 = *a3;
  int v4 = a1[5];
  if (!v4)
  {
    int v5 = a1[3];
    int v6 = (_DWORD *)**a2;
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  int v5 = a1[3];
  int v6 = (_DWORD *)**a2;
  uint64_t v7 = a1[6];
  if (v5)
  {
    int v8 = 0;
    int v9 = v3 + 2;
    uint64_t v10 = 4 * a1[4];
    do
    {
      uint64_t v11 = v9;
      int v12 = v5;
      do
      {
        *(v11 - 2) = *v6;
        *(v11 - 1) = *v6;
        *uint64_t v11 = *v6;
        v11[1] = *v6;
        uint64_t v11 = (_DWORD *)((char *)v11 + v10);
        --v12;
      }
      while (v12);
      *(v11 - 2) = *v6;
      *(v11 - 1) = *v6;
      *uint64_t v11 = *v6;
      v11[1] = *v6;
      v3 += v7;
      ++v8;
      v9 += v7;
    }
    while (v8 != v4);
LABEL_9:
    uint64_t v13 = 4 * a1[4];
    do
    {
      *int v3 = *v6;
      v3[1] = *v6;
      v3[2] = *v6;
      v3[3] = *v6;
      int v3 = (_DWORD *)((char *)v3 + v13);
      --v5;
    }
    while (v5);
    goto LABEL_13;
  }
  do
  {
    *int v3 = *v6;
    v3[1] = *v6;
    v3[2] = *v6;
    v3[3] = *v6;
    v3 += v7;
    --v4;
  }
  while (v4);
LABEL_13:
  *int v3 = *v6;
  v3[1] = *v6;
  v3[2] = *v6;
  float result = *(float *)v6;
  v3[3] = *v6;
  return result;
}

void sub_215B5C774()
{
}

void sub_215B5C788(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      *(void *)int v48 = &unk_26C66BCE0;
      if (a3 <= 0x20) {
        unsigned int v3 = 32;
      }
      else {
        unsigned int v3 = a3;
      }
      long long v40 = &unk_26C67BCE8;
      if (HIDWORD(a3)) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 32;
      }
      *(void *)BOOL v50 = a3;
      *(void *)&v50[8] = (a3 != 0) | (unint64_t)(v4 << 32);
      sub_215B2DEF0((uint64_t)&v40, 0, 1, v50, 0);
      long long v40 = &unk_26C67BCE8;
      operator new();
    case 2:
      char v38 = &unk_26C66BD18;
      *(void *)&long long v39 = a3;
      if (a3 <= 0x10) {
        unsigned int v21 = 16;
      }
      else {
        unsigned int v21 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 16;
      }
      *((void *)&v39 + 1) = (a3 != 0) | (unint64_t)(v22 << 32);
      LOWORD(v37) = 0;
      long long v40 = &unk_26C67B7D8;
      int v41 = 0;
      sub_215B33F8C(0, 2, &v39, (uint64_t)v42);
      if (v39 && DWORD1(v39))
      {
        if (v43) {
          sub_215742D4C();
        }
        sub_215B61968(v48, (uint64_t)v42);
        sub_215B34320((uint64_t *)v50, (uint64_t)v48);
        uint64_t v24 = *(void *)&v50[8];
        uint64_t v23 = *(void *)&v50[16];
        sub_215B61CEC(v48);
        *(void *)&long long v44 = v24;
        *((void *)&v44 + 1) = v23;
      }
      else
      {
        long long v44 = v39;
      }
      sub_215B3462C((uint64_t)&v40, &v37);
      long long v40 = &unk_26C67BD78;
      operator new();
    case 3:
      char v38 = &unk_26C66BD50;
      *(void *)&long long v39 = a3;
      if (a3 <= 0x10) {
        unsigned int v9 = 16;
      }
      else {
        unsigned int v9 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 16;
      }
      *((void *)&v39 + 1) = (a3 != 0) | (unint64_t)(v10 << 32);
      LOWORD(v37) = 0;
      long long v40 = &unk_26C67B988;
      int v41 = 0;
      sub_215B38EDC(0, 3, &v39, (uint64_t)v42);
      if (v39 && DWORD1(v39))
      {
        if (v43) {
          sub_215742D4C();
        }
        sub_215B61968(v48, (uint64_t)v42);
        sub_215B34320((uint64_t *)v50, (uint64_t)v48);
        uint64_t v12 = *(void *)&v50[8];
        uint64_t v11 = *(void *)&v50[16];
        sub_215B61CEC(v48);
        *(void *)&long long v44 = v12;
        *((void *)&v44 + 1) = v11;
      }
      else
      {
        long long v44 = v39;
      }
      sub_215B39400((uint64_t)&v40, &v37);
      long long v40 = &unk_26C67BE08;
      operator new();
    case 4:
      char v38 = &unk_26C66BD88;
      *(void *)&long long v39 = a3;
      if (a3 <= 8) {
        unsigned int v27 = 8;
      }
      else {
        unsigned int v27 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 8;
      }
      *((void *)&v39 + 1) = (a3 != 0) | (unint64_t)(v28 << 32);
      int v37 = 0;
      long long v40 = &unk_26C67BB38;
      int v41 = 0;
      sub_215B3DA3C(0, 4, &v39, (uint64_t)v42);
      if (v39 && DWORD1(v39))
      {
        if (v43) {
          sub_215742D4C();
        }
        sub_215B61968(v48, (uint64_t)v42);
        sub_215B3DDD0((uint64_t *)v50, (uint64_t)v48);
        uint64_t v30 = *(void *)&v50[8];
        uint64_t v29 = *(void *)&v50[16];
        sub_215B61CEC(v48);
        *(void *)&long long v44 = v30;
        *((void *)&v44 + 1) = v29;
      }
      else
      {
        long long v44 = v39;
      }
      sub_215B3E0DC((uint64_t)&v40, &v37);
      long long v40 = &unk_26C67BE98;
      operator new();
    case 5:
      char v38 = &unk_26C66BDC0;
      uint64_t v17 = 2 * (a3 != 0);
      LODWORD(v18) = v17 * a3;
      if ((v17 * a3) <= 0x20) {
        LODWORD(v18) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v18 = v18;
      }
      else {
        unint64_t v18 = 32;
      }
      *(_DWORD *)BOOL v50 = 2;
      *(_DWORD *)&v50[4] = a3;
      *(void *)int v48 = *(void *)v50;
      *(_DWORD *)BOOL v50 = 1;
      *(void *)&v50[4] = v17 & 0x1FFFFFFFFLL | ((unint64_t)(v18 >> 1) << 33);
      *(void *)&v48[12] = *(void *)v50;
      *(_DWORD *)&v48[8] = HIDWORD(a3);
      *(_DWORD *)&v48[20] = v18;
      *(void *)&v48[24] = a3;
      uint64_t v49 = *(void *)&v50[4];
      char v47 = 0;
      long long v40 = &unk_26C67B628;
      int v41 = 0;
      sub_215B2F140(0, 5, (uint64_t)v48, (uint64_t)v42);
      if (*(_DWORD *)&v48[24] && *(_DWORD *)&v48[28])
      {
        if (v43) {
          sub_215742D4C();
        }
        sub_215B61968(&v39, (uint64_t)v42);
        sub_215B2F4D4((uint64_t)v50, (uint64_t)&v39);
        long long v44 = *(_OWORD *)&v50[8];
        long long v45 = v51;
        uint64_t v46 = v52;
        sub_215B61CEC(&v39);
      }
      else
      {
        long long v44 = *(_OWORD *)v48;
        long long v45 = *(_OWORD *)&v48[16];
        uint64_t v46 = v49;
      }
      sub_215B2F854((uint64_t)&v40, &v47);
      long long v40 = &unk_26C67BF28;
      operator new();
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 33:
    case 34:
    case 35:
    case 36:
    case 39:
    case 40:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageBuffer.h", 974, (uint64_t)"", 0, (uint64_t)"The buffer does not support the given format", 44, (void (*)(void **))sub_215E1ABD8);
      abort();
    case 7:
      char v38 = &unk_26C66BDF8;
      uint64_t v31 = 2 * (a3 != 0);
      LODWORD(v32) = v31 * a3;
      if ((v31 * a3) <= 0x10) {
        LODWORD(v32) = 16;
      }
      if (HIDWORD(a3)) {
        unint64_t v32 = v32;
      }
      else {
        unint64_t v32 = 16;
      }
      *(_DWORD *)BOOL v50 = 2;
      *(_DWORD *)&v50[4] = a3;
      *(void *)int v48 = *(void *)v50;
      *(_DWORD *)BOOL v50 = 1;
      *(void *)&v50[4] = v31 & 0x1FFFFFFFFLL | ((unint64_t)(v32 >> 1) << 33);
      *(void *)&v48[12] = *(void *)v50;
      *(_DWORD *)&v48[8] = HIDWORD(a3);
      *(_DWORD *)&v48[20] = v32;
      *(void *)&v48[24] = a3;
      uint64_t v49 = *(void *)&v50[4];
      LOWORD(v37) = 0;
      long long v40 = &unk_26C67BA18;
      int v41 = 0;
      sub_215B3A600(0, 7, (uint64_t)v48, (uint64_t)v42);
      if (*(_DWORD *)&v48[24] && *(_DWORD *)&v48[28])
      {
        if (v43) {
          sub_215742D4C();
        }
        sub_215B61968(&v39, (uint64_t)v42);
        sub_215B3A994((uint64_t)v50, (uint64_t)&v39);
        long long v44 = *(_OWORD *)&v50[8];
        long long v45 = v51;
        uint64_t v46 = v52;
        sub_215B61CEC(&v39);
      }
      else
      {
        long long v44 = *(_OWORD *)v48;
        long long v45 = *(_OWORD *)&v48[16];
        uint64_t v46 = v49;
      }
      sub_215B3AD1C((uint64_t)&v40, &v37);
      long long v40 = &unk_26C67BFB8;
      operator new();
    case 8:
      *(void *)&long long v39 = &unk_26C66BE30;
      uint64_t v19 = 2 * (a3 != 0);
      LODWORD(v20) = v19 * a3;
      if ((v19 * a3) <= 8) {
        LODWORD(v20) = 8;
      }
      long long v40 = &unk_26C67C048;
      if (HIDWORD(a3)) {
        unint64_t v20 = v20;
      }
      else {
        unint64_t v20 = 8;
      }
      *(void *)&v50[4] = a3;
      *(_DWORD *)BOOL v50 = 2;
      *(_DWORD *)int v48 = 1;
      *(void *)&v48[4] = v19 & 0x1FFFFFFFFLL | ((unint64_t)(v20 >> 1) << 33);
      *(void *)&v50[12] = *(void *)v48;
      *(_DWORD *)&v50[20] = v20;
      *(void *)&long long v51 = a3;
      *((void *)&v51 + 1) = *(void *)&v48[4];
      sub_215B3FBB4((uint64_t)&v40, 0, 8, (uint64_t)v50, 0.0);
      long long v40 = &unk_26C67C048;
      operator new();
    case 21:
      char v38 = &unk_26C66BE68;
      if (a3) {
        uint64_t v7 = 3;
      }
      else {
        uint64_t v7 = 0;
      }
      LODWORD(v8) = v7 * a3;
      if ((v7 * a3) <= 0x20) {
        LODWORD(v8) = 32;
      }
      if (HIDWORD(a3)) {
        uint64_t v8 = v8;
      }
      else {
        uint64_t v8 = 32;
      }
      *(_DWORD *)BOOL v50 = 3;
      *(_DWORD *)&v50[4] = a3;
      *(void *)int v48 = *(void *)v50;
      *(_DWORD *)BOOL v50 = 1;
      *(void *)&v50[4] = v7 | (v8 << 32);
      *(void *)&v48[12] = *(void *)v50;
      *(_DWORD *)&v48[8] = HIDWORD(a3);
      *(_DWORD *)&v48[20] = v8;
      *(void *)&v48[24] = a3;
      uint64_t v49 = *(void *)&v50[4];
      char v47 = 0;
      long long v40 = &unk_26C67B6B8;
      int v41 = 0;
      sub_215B30B1C(0, 21, (uint64_t)v48, (uint64_t)v42);
      if (*(_DWORD *)&v48[24] && *(_DWORD *)&v48[28])
      {
        if (v43) {
          sub_215742D4C();
        }
        sub_215B61968(&v39, (uint64_t)v42);
        sub_215B30EB0((uint64_t)&v39, (uint64_t)v50);
        long long v44 = *(_OWORD *)&v50[8];
        long long v45 = v51;
        uint64_t v46 = v52;
        sub_215B61CEC(&v39);
      }
      else
      {
        long long v44 = *(_OWORD *)v48;
        long long v45 = *(_OWORD *)&v48[16];
        uint64_t v46 = v49;
      }
      sub_215B31230((uint64_t)&v40, &v47);
      long long v40 = &unk_26C67C0D8;
      operator new();
    case 22:
      char v38 = &unk_26C66BEA0;
      if (a3) {
        uint64_t v13 = 3;
      }
      else {
        uint64_t v13 = 0;
      }
      LODWORD(v14) = v13 * a3;
      if ((v13 * a3) <= 0x10) {
        LODWORD(v14) = 16;
      }
      if (HIDWORD(a3)) {
        uint64_t v14 = v14;
      }
      else {
        uint64_t v14 = 16;
      }
      *(_DWORD *)BOOL v50 = 3;
      *(_DWORD *)&v50[4] = a3;
      *(void *)int v48 = *(void *)v50;
      *(_DWORD *)BOOL v50 = 1;
      *(void *)&v50[4] = v13 | (v14 << 32);
      *(void *)&v48[12] = *(void *)v50;
      *(_DWORD *)&v48[8] = HIDWORD(a3);
      *(_DWORD *)&v48[20] = v14;
      *(void *)&v48[24] = a3;
      uint64_t v49 = *(void *)&v50[4];
      LOWORD(v37) = 0;
      long long v40 = &unk_26C67B868;
      int v41 = 0;
      sub_215B35828(0, 22, (uint64_t)v48, (uint64_t)v42);
      if (*(_DWORD *)&v48[24] && *(_DWORD *)&v48[28])
      {
        if (v43) {
          sub_215742D4C();
        }
        sub_215B61968(&v39, (uint64_t)v42);
        sub_215B35BBC((uint64_t)&v39, (uint64_t)v50);
        long long v44 = *(_OWORD *)&v50[8];
        long long v45 = v51;
        uint64_t v46 = v52;
        sub_215B61CEC(&v39);
      }
      else
      {
        long long v44 = *(_OWORD *)v48;
        long long v45 = *(_OWORD *)&v48[16];
        uint64_t v46 = v49;
      }
      sub_215B35F44((uint64_t)&v40, (uint64_t)&v37);
      long long v40 = &unk_26C67C168;
      operator new();
    case 25:
      char v38 = &unk_26C66BED8;
      uint64_t v15 = 4 * (a3 != 0);
      LODWORD(v16) = v15 * a3;
      if ((v15 * a3) <= 0x20) {
        LODWORD(v16) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v16 = v16;
      }
      else {
        unint64_t v16 = 32;
      }
      *(_DWORD *)BOOL v50 = 4;
      *(_DWORD *)&v50[4] = a3;
      *(void *)int v48 = *(void *)v50;
      *(_DWORD *)BOOL v50 = 1;
      *(void *)&v50[4] = v15 & 0x3FFFFFFFFLL | ((unint64_t)(v16 >> 2) << 34);
      *(void *)&v48[12] = *(void *)v50;
      *(_DWORD *)&v48[8] = HIDWORD(a3);
      *(_DWORD *)&v48[20] = v16;
      *(void *)&v48[24] = a3;
      uint64_t v49 = *(void *)&v50[4];
      char v47 = 0;
      long long v40 = &unk_26C67B748;
      int v41 = 0;
      sub_215B325E4(0, 25, (uint64_t)v48, (uint64_t)v42);
      if (*(_DWORD *)&v48[24] && *(_DWORD *)&v48[28])
      {
        if (v43) {
          sub_215742D4C();
        }
        sub_215B61968(&v39, (uint64_t)v42);
        sub_215B32978((uint64_t)v50, (uint64_t)&v39);
        long long v44 = *(_OWORD *)&v50[8];
        long long v45 = v51;
        uint64_t v46 = v52;
        sub_215B61CEC(&v39);
      }
      else
      {
        long long v44 = *(_OWORD *)v48;
        long long v45 = *(_OWORD *)&v48[16];
        uint64_t v46 = v49;
      }
      sub_215B32CF8((uint64_t)&v40, (uint64_t)&v47);
      long long v40 = &unk_26C67C1F8;
      operator new();
    case 31:
      *(void *)&long long v39 = &unk_26C66BF10;
      uint64_t v25 = 4 * (a3 != 0);
      LODWORD(v26) = v25 * a3;
      if ((v25 * a3) <= 0x10) {
        LODWORD(v26) = 16;
      }
      long long v40 = &unk_26C67C288;
      if (HIDWORD(a3)) {
        unint64_t v26 = v26;
      }
      else {
        unint64_t v26 = 16;
      }
      *(void *)&v50[4] = a3;
      *(_DWORD *)BOOL v50 = 4;
      *(_DWORD *)int v48 = 1;
      *(void *)&v48[4] = v25 & 0x3FFFFFFFFLL | ((unint64_t)(v26 >> 2) << 34);
      *(void *)&v50[12] = *(void *)v48;
      *(_DWORD *)&v50[20] = v26;
      *(void *)&long long v51 = a3;
      *((void *)&v51 + 1) = *(void *)&v48[4];
      sub_215B3C7A0((uint64_t)&v40, 0, 31, (uint64_t)v50, 0);
      long long v40 = &unk_26C67C288;
      operator new();
    case 32:
      *(void *)&long long v39 = &unk_26C66BF48;
      uint64_t v35 = 4 * (a3 != 0);
      LODWORD(v36) = v35 * a3;
      if ((v35 * a3) <= 8) {
        LODWORD(v36) = 8;
      }
      long long v40 = &unk_26C67C318;
      if (HIDWORD(a3)) {
        unint64_t v36 = v36;
      }
      else {
        unint64_t v36 = 8;
      }
      *(void *)&v50[4] = a3;
      *(_DWORD *)BOOL v50 = 4;
      *(_DWORD *)int v48 = 1;
      *(void *)&v48[4] = v35 & 0x3FFFFFFFFLL | ((unint64_t)(v36 >> 2) << 34);
      *(void *)&v50[12] = *(void *)v48;
      *(_DWORD *)&v50[20] = v36;
      *(void *)&long long v51 = a3;
      *((void *)&v51 + 1) = *(void *)&v48[4];
      sub_215B4172C((uint64_t)&v40, 0, 32, (uint64_t)v50, 0.0);
      long long v40 = &unk_26C67C318;
      operator new();
    case 37:
      char v38 = &unk_26C66BF80;
      uint64_t v33 = 4 * (a3 != 0);
      LODWORD(v34) = v33 * a3;
      if ((v33 * a3) <= 0x20) {
        LODWORD(v34) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v34 = v34;
      }
      else {
        unint64_t v34 = 32;
      }
      *(_DWORD *)BOOL v50 = 4;
      *(_DWORD *)&v50[4] = a3;
      *(void *)int v48 = *(void *)v50;
      *(_DWORD *)BOOL v50 = 1;
      *(void *)&v50[4] = v33 & 0x3FFFFFFFFLL | ((unint64_t)(v34 >> 2) << 34);
      *(void *)&v48[12] = *(void *)v50;
      *(_DWORD *)&v48[8] = HIDWORD(a3);
      *(_DWORD *)&v48[20] = v34;
      *(void *)&v48[24] = a3;
      uint64_t v49 = *(void *)&v50[4];
      char v47 = 0;
      long long v40 = &unk_26C67B748;
      int v41 = 0;
      sub_215B325E4(0, 37, (uint64_t)v48, (uint64_t)v42);
      if (*(_DWORD *)&v48[24] && *(_DWORD *)&v48[28])
      {
        if (v43) {
          sub_215742D4C();
        }
        sub_215B61968(&v39, (uint64_t)v42);
        sub_215B32978((uint64_t)v50, (uint64_t)&v39);
        long long v44 = *(_OWORD *)&v50[8];
        long long v45 = v51;
        uint64_t v46 = v52;
        sub_215B61CEC(&v39);
      }
      else
      {
        long long v44 = *(_OWORD *)v48;
        long long v45 = *(_OWORD *)&v48[16];
        uint64_t v46 = v49;
      }
      sub_215B32CF8((uint64_t)&v40, (uint64_t)&v47);
      long long v40 = &unk_26C67C3A8;
      operator new();
    case 38:
      *(void *)&long long v39 = &unk_26C66BFB8;
      uint64_t v5 = 4 * (a3 != 0);
      LODWORD(v6) = v5 * a3;
      if ((v5 * a3) <= 0x10) {
        LODWORD(v6) = 16;
      }
      long long v40 = &unk_26C67C438;
      if (HIDWORD(a3)) {
        unint64_t v6 = v6;
      }
      else {
        unint64_t v6 = 16;
      }
      *(void *)&v50[4] = a3;
      *(_DWORD *)BOOL v50 = 4;
      *(_DWORD *)int v48 = 1;
      *(void *)&v48[4] = v5 & 0x3FFFFFFFFLL | ((unint64_t)(v6 >> 2) << 34);
      *(void *)&v50[12] = *(void *)v48;
      *(_DWORD *)&v50[20] = v6;
      *(void *)&long long v51 = a3;
      *((void *)&v51 + 1) = *(void *)&v48[4];
      sub_215B37BF4((uint64_t)&v40, 0, 38, (uint64_t)v50, 0);
      long long v40 = &unk_26C67C438;
      operator new();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215B5E350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21)
{
  sub_215B61CEC(&a13);
  if (a21 != -1) {
    ((void (*)(char *, uint64_t))off_26C67C898[a21])(&a11, v21);
  }
  _Unwind_Resume(a1);
}

void sub_215B5EBF4(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v33[2] = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      v33[0] = &unk_26C66BCE0;
      if (HIDWORD(a3)) {
        uint64_t v3 = a3 << 32;
      }
      else {
        uint64_t v3 = 0;
      }
      *(void *)uint64_t v29 = a3;
      *(void *)&v29[8] = v3 | (a3 != 0);
      sub_215B42A14((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 2:
      v33[0] = &unk_26C66BD18;
      if (HIDWORD(a3)) {
        uint64_t v4 = a3 << 32;
      }
      else {
        uint64_t v4 = 0;
      }
      *(void *)uint64_t v29 = a3;
      *(void *)&v29[8] = v4 | (a3 != 0);
      sub_215B43E84((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 3:
      v33[0] = &unk_26C66BD50;
      if (HIDWORD(a3)) {
        uint64_t v5 = a3 << 32;
      }
      else {
        uint64_t v5 = 0;
      }
      *(void *)uint64_t v29 = a3;
      *(void *)&v29[8] = v5 | (a3 != 0);
      sub_215B452F0((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 4:
      v33[0] = &unk_26C66BD88;
      if (HIDWORD(a3)) {
        uint64_t v6 = a3 << 32;
      }
      else {
        uint64_t v6 = 0;
      }
      *(void *)uint64_t v29 = a3;
      *(void *)&v29[8] = v6 | (a3 != 0);
      sub_215B46764((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 5:
      uint64_t v7 = 2 * (a3 != 0);
      LODWORD(v8) = v7 * a3;
      if (HIDWORD(a3)) {
        unint64_t v8 = v8;
      }
      else {
        unint64_t v8 = 0;
      }
      *(_DWORD *)uint64_t v29 = 2;
      *(void *)&v29[4] = a3;
      uint64_t v28 = &unk_26C66BDC0;
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v7 & 0x1FFFFFFFFLL | ((unint64_t)(v8 >> 1) << 33);
      *(void *)&v29[12] = v33[0];
      int v30 = v8;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B47BD0((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 33:
    case 34:
    case 35:
    case 36:
    case 39:
    case 40:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageBuffer.h", 974, (uint64_t)"", 0, (uint64_t)"The buffer does not support the given format", 44, (void (*)(void **))sub_215E1ABD8);
      abort();
    case 7:
      uint64_t v9 = 2 * (a3 != 0);
      LODWORD(v10) = v9 * a3;
      if (HIDWORD(a3)) {
        unint64_t v10 = v10;
      }
      else {
        unint64_t v10 = 0;
      }
      *(_DWORD *)uint64_t v29 = 2;
      *(void *)&v29[4] = a3;
      uint64_t v28 = &unk_26C66BDF8;
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v9 & 0x1FFFFFFFFLL | ((unint64_t)(v10 >> 1) << 33);
      *(void *)&v29[12] = v33[0];
      int v30 = v10;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B4922C((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 8:
      uint64_t v11 = 2 * (a3 != 0);
      LODWORD(v12) = v11 * a3;
      if (HIDWORD(a3)) {
        unint64_t v12 = v12;
      }
      else {
        unint64_t v12 = 0;
      }
      *(_DWORD *)uint64_t v29 = 2;
      *(void *)&v29[4] = a3;
      uint64_t v28 = &unk_26C66BE30;
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v11 & 0x1FFFFFFFFLL | ((unint64_t)(v12 >> 1) << 33);
      *(void *)&v29[12] = v33[0];
      int v30 = v12;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B4A888((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 21:
      if (a3) {
        uint64_t v13 = 3;
      }
      else {
        uint64_t v13 = 0;
      }
      LODWORD(v14) = v13 * a3;
      if (HIDWORD(a3)) {
        uint64_t v14 = v14;
      }
      else {
        uint64_t v14 = 0;
      }
      *(void *)uint64_t v29 = __PAIR64__(a3, 3);
      uint64_t v28 = &unk_26C66BE68;
      *(_DWORD *)&v29[8] = HIDWORD(a3);
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v13 | (v14 << 32);
      *(void *)&v29[12] = v33[0];
      int v30 = v14;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B4BEE0((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 22:
      if (a3) {
        uint64_t v15 = 3;
      }
      else {
        uint64_t v15 = 0;
      }
      LODWORD(v16) = v15 * a3;
      if (HIDWORD(a3)) {
        uint64_t v16 = v16;
      }
      else {
        uint64_t v16 = 0;
      }
      *(void *)uint64_t v29 = __PAIR64__(a3, 3);
      uint64_t v28 = &unk_26C66BEA0;
      *(_DWORD *)&v29[8] = HIDWORD(a3);
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v15 | (v16 << 32);
      *(void *)&v29[12] = v33[0];
      int v30 = v16;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B4D580((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 25:
      uint64_t v17 = 4 * (a3 != 0);
      LODWORD(v18) = v17 * a3;
      if (HIDWORD(a3)) {
        unint64_t v18 = v18;
      }
      else {
        unint64_t v18 = 0;
      }
      *(_DWORD *)uint64_t v29 = 4;
      *(void *)&v29[4] = a3;
      uint64_t v28 = &unk_26C66BED8;
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v18 >> 2) << 34);
      *(void *)&v29[12] = v33[0];
      int v30 = v18;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B4EC40((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 31:
      uint64_t v19 = 4 * (a3 != 0);
      LODWORD(v20) = v19 * a3;
      if (HIDWORD(a3)) {
        unint64_t v20 = v20;
      }
      else {
        unint64_t v20 = 0;
      }
      *(_DWORD *)uint64_t v29 = 4;
      *(void *)&v29[4] = a3;
      uint64_t v28 = &unk_26C66BF10;
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v19 & 0x3FFFFFFFFLL | ((unint64_t)(v20 >> 2) << 34);
      *(void *)&v29[12] = v33[0];
      int v30 = v20;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B502E0((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 32:
      uint64_t v25 = 4 * (a3 != 0);
      LODWORD(v26) = v25 * a3;
      if (HIDWORD(a3)) {
        unint64_t v26 = v26;
      }
      else {
        unint64_t v26 = 0;
      }
      *(_DWORD *)uint64_t v29 = 4;
      *(void *)&v29[4] = a3;
      uint64_t v28 = &unk_26C66BF48;
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v25 & 0x3FFFFFFFFLL | ((unint64_t)(v26 >> 2) << 34);
      *(void *)&v29[12] = v33[0];
      int v30 = v26;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B51938((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 37:
      uint64_t v21 = 4 * (a3 != 0);
      LODWORD(v22) = v21 * a3;
      if (HIDWORD(a3)) {
        unint64_t v22 = v22;
      }
      else {
        unint64_t v22 = 0;
      }
      *(_DWORD *)uint64_t v29 = 4;
      *(void *)&v29[4] = a3;
      uint64_t v28 = &unk_26C66BF80;
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v21 & 0x3FFFFFFFFLL | ((unint64_t)(v22 >> 2) << 34);
      *(void *)&v29[12] = v33[0];
      int v30 = v22;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B52FCC((uint64_t)&v27, (uint64_t)v29);
      operator new();
    case 38:
      uint64_t v23 = 4 * (a3 != 0);
      LODWORD(v24) = v23 * a3;
      if (HIDWORD(a3)) {
        unint64_t v24 = v24;
      }
      else {
        unint64_t v24 = 0;
      }
      *(_DWORD *)uint64_t v29 = 4;
      *(void *)&v29[4] = a3;
      uint64_t v28 = &unk_26C66BFB8;
      LODWORD(v33[0]) = 1;
      *(void *)((char *)v33 + 4) = v23 & 0x3FFFFFFFFLL | ((unint64_t)(v24 >> 2) << 34);
      *(void *)&v29[12] = v33[0];
      int v30 = v24;
      uint64_t v31 = a3;
      uint64_t v32 = *(void *)((char *)v33 + 4);
      sub_215B5466C((uint64_t)&v27, (uint64_t)v29);
      operator new();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215B5FFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B60558(uint64_t a1, int a2)
{
  int v2 = a2;
  v4[0] = 0;
  v4[1] = 0;
  value = v4;
  sub_215DD8470();
}

void sub_215B60828(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215B6083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_215733368((uint64_t)&a12);
  sub_215733368((uint64_t)&a9);
  sub_215733368(v12);
  _Unwind_Resume(a1);
}

void sub_215B60888(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215B6089C(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215B608B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215B608C8(_Unwind_Exception *a1)
{
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215B608DC(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  CFDictionaryRef v5 = *(CFDictionaryRef *)a1;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v5) {
      goto LABEL_12;
    }
  }
  else if (!v5)
  {
    goto LABEL_12;
  }
  uint64_t v6 = (const void *)*MEMORY[0x263F04130];
  value = 0;
  if (v6 && CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)a1, v6, (const void **)&value))
  {
    uint64_t v7 = value;
    if (value)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(v7) == TypeID)
      {
        CFRetain(v7);
        operator new();
      }
    }
    LOBYTE(v9) = 0;
    char v10 = 0;
  }
LABEL_12:
  *a2 = 0;
  a2[16] = 0;
}

void sub_215B60BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_215733368((uint64_t)va);
  sub_215B60C50((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_215B60C14(void *a1)
{
  __cxa_begin_catch(a1);
  CFRelease(v1);
  __cxa_rethrow();
}

void sub_215B60C28(_Unwind_Exception *a1)
{
}

void sub_215B60C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B60C50(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 16))
  {
    int v2 = *(std::__shared_weak_count **)(result + 8);
    if (v2)
    {
      if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
        return v1;
      }
    }
  }
  return result;
}

BOOL sub_215B60CD4(const void **a1, uint64_t a2)
{
  CFDictionaryRef v5 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v5) {
        goto LABEL_4;
      }
LABEL_9:
      uint64_t v8 = *a1;
      goto LABEL_10;
    }
  }
  if (!v5) {
    goto LABEL_9;
  }
LABEL_4:
  CFTypeRef v7 = *(CFTypeRef *)a2;
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  if (v6
    && (atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v8 = *a1;
    if (v7) {
      return CFEqual(v8, *(CFTypeRef *)a2) != 0;
    }
  }
  else
  {
    uint64_t v8 = *a1;
    if (v7) {
      return CFEqual(v8, *(CFTypeRef *)a2) != 0;
    }
  }
LABEL_10:
  char v10 = (std::__shared_weak_count *)a1[1];
  if (v10
    && (atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v8) {
      return 0;
    }
  }
  else if (v8)
  {
    return 0;
  }
  CFTypeRef v12 = *(CFTypeRef *)a2;
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 8);
  if (!v11) {
    return v12 == 0;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  if (atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v12 == 0;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return v12 == 0;
}

void sub_215B60EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215B60FE8(&v5, v3);
}

void sub_215B60FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B60FE8(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215B6105C(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215B61074(_Unwind_Exception *a1)
{
}

void sub_215B6108C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215B610C4(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215B610E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14__CFDictionaryEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215B6115C(uint64_t a1, uint64_t a2)
{
  int v2 = *(atomic_ullong **)(a2 + 8);
  v3[0] = *(CFTypeRef *)a2;
  v3[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit(v2 + 1, 1uLL, memory_order_relaxed);
  }
  sub_215B6127C(&v4, v3);
}

void sub_215B61268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B6127C(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  operator new();
}

void sub_215B612F0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215B61308(_Unwind_Exception *a1)
{
}

uint64_t sub_215B6131C(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
    {
LABEL_4:
      unsigned int v7 = *a3;
      sub_215DD0808(&v7);
    }
  }
  else if (v5)
  {
    goto LABEL_4;
  }
  return 0;
}

void sub_215B61498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B614AC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4
    && (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v5) {
LABEL_4:
    }
      sub_215DD0928(a3);
  }
  else if (v5)
  {
    goto LABEL_4;
  }
  return 0;
}

void sub_215B61620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B61634(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    CFTypeRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 233, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__CVBuffer ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    unsigned int v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return CVPixelBufferGetPixelFormatType(v8);
}

uint64_t sub_215B617B8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 250, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_15;
  }
LABEL_6:
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v7 = v10;
  if (atomic_load_explicit((atomic_ullong *volatile)(v10 + 104), memory_order_acquire) != -1)
  {
    CFTypeRef v12 = &v10;
    uint64_t v11 = &v12;
    std::__call_once((std::once_flag::_State_type *)(v10 + 104), &v11, (void (__cdecl *)(void *))sub_215B65980);
  }
  if (a2 >= (unint64_t)((uint64_t)(*(void *)(v7 + 120) - *(void *)(v7 + 112)) >> 3)
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 251, (uint64_t)"idx < p_->GetCachedBaseAddress().size()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_15:
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v10 = v8;
  if (atomic_load_explicit((atomic_ullong *volatile)(v8 + 104), memory_order_acquire) != -1)
  {
    CFTypeRef v12 = &v10;
    uint64_t v11 = &v12;
    std::__call_once((std::once_flag::_State_type *)(v8 + 104), &v11, (void (__cdecl *)(void *))sub_215B65980);
  }
  return *(void *)(*(void *)(v8 + 112) + 8 * a2);
}

void *sub_215B61968(void *a1, uint64_t a2)
{
  CFTypeRef v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &off_26C67D770;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    CFTypeRef v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26C67D730;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_215B66728(a1[1]);
  }
  return a1;
}

void sub_215B61A54(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_215B61AAC(void *a1, uint64_t a2)
{
  CFTypeRef v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &off_26C67D770;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    CFTypeRef v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26C67D730;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_215B66728(a1[1]);
  }
  return a1;
}

void sub_215B61B98(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B61BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v6) {
      sub_215B6694C(*(void *)(a1 + 8));
    }
  }
  long long v7 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v7;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_215B61CEC(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2)
  {
    uint64_t v4 = *v2;
    CFTypeRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    if (v4) {
LABEL_5:
    }
      sub_215B6694C(a1[1]);
  }
LABEL_6:
  *a1 = &off_26C67D770;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_215B61E04(void *a1)
{
  sub_215B61CEC(a1);

  JUMPOUT(0x2166C4D20);
}

void *sub_215B61E3C(void *a1, uint64_t a2)
{
  CFTypeRef v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &off_26C67D770;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    CFTypeRef v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26C67D750;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_215B6683C(a1[1]);
  }
  return a1;
}

void sub_215B61F28(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_215B61F80(void *a1, uint64_t a2)
{
  CFTypeRef v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *a1 = &off_26C67D770;
  a1[1] = v3;
  a1[2] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    CFTypeRef v3 = (uint64_t *)a1[1];
  }
  *a1 = &unk_26C67D750;
  if (v3)
  {
    uint64_t v6 = *v3;
    uint64_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6) {
          return a1;
        }
        goto LABEL_7;
      }
    }
    if (v6) {
LABEL_7:
    }
      sub_215B6683C(a1[1]);
  }
  return a1;
}

void sub_215B6206C(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B620C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v6) {
      sub_215B66A60(*(void *)(a1 + 8));
    }
  }
  long long v7 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v7;
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void *sub_215B621C0(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2)
  {
    uint64_t v4 = *v2;
    CFTypeRef v3 = (std::__shared_weak_count *)v2[1];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if (!v4) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
    if (v4) {
LABEL_5:
    }
      sub_215B66A60(a1[1]);
  }
LABEL_6:
  *a1 = &off_26C67D770;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_215B622D8(void *a1)
{
  sub_215B621C0(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215B62310(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215B62384(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215B6239C(_Unwind_Exception *a1)
{
}

void sub_215B623B0(int a1, CFTypeRef cf, int a3)
{
  if (a3)
  {
    if (cf) {
      CFRetain(cf);
    }
    operator new();
  }
  operator new();
}

void sub_215B62648(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215B6265C()
{
}

void sub_215B62688()
{
}

void sub_215B6269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_215B626B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v7 = a3;
  CVPixelBufferRef pixelBufferOut = 0;
  sub_215B60EC4((uint64_t)v5, a5);
}

void sub_215B62D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_215B62E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215733368(v14 - 112);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B62E68()
{
  if (*(char *)(v0 - 113) < 0) {
    operator delete(*(void **)(v0 - 136));
  }
  JUMPOUT(0x215B62E8CLL);
}

void sub_215B62E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void *sub_215B62EA4(void *result)
{
  uint64_t v1 = result;
  *float result = off_26C67D770;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B62F3C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_215B63048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B6305C(unsigned int *a1, OSType a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  LOBYTE(v21[0]) = 0;
  char v23 = 0;
  if (!*(unsigned char *)(a5 + 32))
  {
LABEL_8:
    OSType pixelFormatType = a2;
    if (sub_215B59558(a2) >= 2)
    {
      int v16 = 0;
      sub_2158C2354(&v15, "MakeViewPixelBuffer");
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      v17.__r_.__value_.__l.__size_ = (std::string::size_type)" cannot be used to create a planar view CVPixelBufferRef, "
                                                              "but given format is planar ";
      v17.__r_.__value_.__r.__words[2] = (std::string::size_type)&v15;
      unint64_t v18 = " cannot be used to create a planar view CVPixelBufferRef, but given format is planar ";
      uint64_t v19 = " cannot be used to create a planar view CVPixelBufferRef, but given format is planar ";
      if (v16 != -1)
      {
        unint64_t v20 = &v17;
        ((void (*)(std::string **, CVPixelBufferRef *))off_26C67D8D8[v16])(&v20, &v15);
        sub_2157FCC44();
      }
      sub_215742D4C();
    }
    CVPixelBufferRef v13 = 0;
    if ((a4 & 0xFF00000000) != 0)
    {
      if (v23) {
        goto LABEL_13;
      }
LABEL_18:
      if (CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], *a1, a1[1], a2, a3, a4, 0, 0, 0, &v13))
      {
        int v16 = 0;
        sub_2158C2354(&v15, "MakeViewPixelBuffer");
        v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
        v17.__r_.__value_.__l.__size_ = (std::string::size_type)" for format ";
        v17.__r_.__value_.__r.__words[2] = (std::string::size_type)&v15;
        unint64_t v18 = " for format ";
        uint64_t v19 = " for format ";
        if (v16 != -1)
        {
          unint64_t v20 = &v17;
          ((void (*)(std::string **, CVPixelBufferRef *))off_26C67D890[v16])(&v20, &v15);
          sub_2157FCC44();
        }
        sub_215742D4C();
      }
      CVPixelBufferRef v15 = v13;
      operator new();
    }
    int v10 = *a1;
    int v11 = sub_2158B5EB4(a2);
    int v12 = sub_2158BA804(a2);
    if ((v12 - 1) > 2)
    {
      LODWORD(a4) = v11 * v10;
      if (!v23) {
        goto LABEL_18;
      }
    }
    else
    {
      LODWORD(a4) = v11 * v10 * dword_215EDC8B8[(char)(v12 - 1)];
      if (!v23) {
        goto LABEL_18;
      }
    }
LABEL_13:
    operator new();
  }
  uint64_t v9 = *(void *)(a5 + 24);
  if (v9)
  {
    if (v9 == a5)
    {
      unint64_t v22 = v21;
      (*(void (**)(uint64_t, void *))(*(void *)a5 + 24))(a5, v21);
      goto LABEL_7;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  unint64_t v22 = (void *)v9;
LABEL_7:
  char v23 = 1;
  goto LABEL_8;
}

void sub_215B6381C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_215733368((uint64_t)va);
  sub_215B639EC(v17 - 112);
  _Unwind_Resume(a1);
}

void sub_215B63838(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (v2) {
      CFRelease(v2);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_215B6385C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  sub_215B639EC(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215B63868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215B638E0(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 - 80))
  {
    uint64_t v3 = *(void *)(v1 - 88);
    if (v3 == v1 - 112)
    {
      (*(void (**)(uint64_t))(*(void *)(v1 - 112) + 32))(v1 - 112);
      _Unwind_Resume(a1);
    }
    if (v3)
    {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_215B639BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_215742CF0((uint64_t)va);
  sub_215B639EC(v17 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_215B639EC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return a1;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 != a1)
  {
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  return a1;
}

void sub_215B63A84()
{
  long long v0 = xmmword_215EDC590;
  strcpy((char *)operator new(0x30uLL), "Failed to create CVPixelBuffer with bytes: ");
  int v1 = 1;
  sub_215B64684();
}

void sub_215B63BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B63BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x215B63BCCLL);
}

uint64_t sub_215B63C00(uint64_t result)
{
  if (*(unsigned char *)(result + 32))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C65A5B0;
    __cxa_throw(exception, (struct type_info *)&unk_26C6566F8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_215B63C5C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    (**(void (***)(uint64_t))a1)(a1);
    return a1;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_215B63CD0(void *a1)
{
  *a1 = &off_26C67D770;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

size_t sub_215B63D78(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 203, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__CVBuffer ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    int v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return CVPixelBufferGetWidth(v8);
}

size_t sub_215B63EFC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 213, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__CVBuffer ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    int v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return CVPixelBufferGetHeight(v8);
}

size_t sub_215B64080(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *v2;
    uint64_t v3 = (std::__shared_weak_count *)v2[1];
    if (v3
      && (atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      if (v4) {
        goto LABEL_6;
      }
    }
    else if (v4)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 223, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v5 = *(__CVBuffer ***)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = *v5;
    int v7 = (std::__shared_weak_count *)v5[1];
    if (v7
      && (atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v8 = v6;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  return CVPixelBufferGetBytesPerRow(v8);
}

void sub_215B64204(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/CoreVideo/src/PixelBufferRef.cpp", 256, (uint64_t)"IsValid()", 9, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = *(__CVBuffer **)v7;
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(v8);

  sub_215DCA030(a2, IOSurface, 1);
}

_DWORD *sub_215B6435C(_DWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  v25[1] = *MEMORY[0x263EF8340];
  *a1 = a2;
  uint64_t v6 = (std::string *)(a1 + 2);
  *(void *)&long long v17 = a3;
  *((void *)&v17 + 1) = a4;
  sub_215B64A60();
  uint64_t v7 = qword_26788F708;
  if (!qword_26788F708) {
    goto LABEL_11;
  }
  uint64_t v8 = &qword_26788F708;
  do
  {
    int v9 = *(_DWORD *)(v7 + 32);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      int v11 = (uint64_t *)v7;
    }
    else {
      int v11 = (uint64_t *)(v7 + 8);
    }
    if (!v10) {
      uint64_t v8 = (uint64_t *)v7;
    }
    uint64_t v7 = *v11;
  }
  while (*v11);
  if (v8 != &qword_26788F708 && *((_DWORD *)v8 + 8) <= a2)
  {
    sub_215B64A60();
    long long v20 = v17;
    uint64_t v21 = ": ";
    uint64_t v22 = 2;
    uint64_t v14 = v8[5];
    CVPixelBufferRef v13 = v8 + 5;
    uint64_t v12 = v14;
    uint64_t v15 = *((unsigned __int8 *)v13 + 23);
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = v13[1];
    }
    else {
      uint64_t v12 = (uint64_t)v13;
    }
    uint64_t v23 = v12;
    uint64_t v24 = v15;
    sub_2157430CC((uint64_t)&v20, (uint64_t)v25, 0, 0, v6);
  }
  else
  {
LABEL_11:
    sub_215B64A60();
    LODWORD(v22) = 0;
    sub_215AE92E0((uint64_t)v19, (uint64_t)&v20, (uint64_t)&v17);
    if (v22 == -1) {
      sub_215742D4C();
    }
    v19[0] = &v18;
    ((void (*)(void *, long long *))off_26C67D7F8[v22])(v19, &v20);
    if (v22 != -1) {
      ((void (*)(void *, long long *))off_26C67D7C8[v22])(v19, &v20);
    }
  }
  return a1;
}

void sub_215B644EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

void sub_215B64538()
{
  v0[6] = 0;
  sub_2158385C4(v0, "Failed to create CVPixelBuffer: ");
  sub_215B64684();
}

void sub_215B64644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B64660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_215742CF0((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x215B64650);
}

void sub_215B64684()
{
}

void sub_215B649D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  uint64_t v27 = a10;
  a10 = 0;
  if (!v27) {
    _Unwind_Resume(exception_object);
  }
  sub_215E15464((uint64_t)&a10, v27);
  _Unwind_Resume(exception_object);
}

void sub_215B64A60()
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F6F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F6F8))
  {
    LODWORD(v0) = 0;
    int v1 = operator new(0x48uLL);
    long long v2 = xmmword_215E975C0;
    strcpy((char *)v1, "kCVReturnSuccess: Function executed successfully without errors.");
    int v3 = -6660;
    uint64_t v4 = operator new(0x38uLL);
    long long v5 = xmmword_215EDC5A0;
    strcpy((char *)v4, "kCVReturnError: Function executed with unknown error.");
    int v6 = -6661;
    uint64_t v7 = operator new(0x78uLL);
    long long v8 = xmmword_215EDC5B0;
    strcpy((char *)v7, "kCVReturnInvalidArgument: At least one of the arguments passed in is not valid. Either out of range or the wrong type.");
    int v9 = -6662;
    BOOL v10 = operator new(0x78uLL);
    long long v11 = xmmword_215EDC5C0;
    strcpy((char *)v10, "kCVReturnAllocationFailed: The allocation for a buffer or buffer pool failed. Most likely because of lack of resources.");
    int v12 = -6663;
    HIBYTE(v13[2]) = 20;
    strcpy((char *)v13, "kCVReturnUnsupported");
    int v14 = -6670;
    uint64_t v15 = operator new(0x58uLL);
    long long v16 = xmmword_215EDC5D0;
    strcpy((char *)v15, "kCVReturnInvalidDisplay: A CVDisplayLink cannot be created for the given DisplayRef.");
    int v17 = -6671;
    char v18 = operator new(0x58uLL);
    long long v19 = xmmword_215EDC5E0;
    strcpy((char *)v18, "kCVReturnDisplayLinkAlreadyRunning: The CVDisplayLink is already started and running.");
    int v20 = -6672;
    uint64_t v21 = operator new(0x48uLL);
    long long v22 = xmmword_215E9AD20;
    strcpy((char *)v21, "kCVReturnDisplayLinkNotRunning: The CVDisplayLink has not been started.");
    int v23 = -6673;
    uint64_t v24 = operator new(0x48uLL);
    long long v25 = xmmword_215EDC5F0;
    strcpy((char *)v24, "kCVReturnDisplayLinkCallbacksNotSet: The output callback is not set.");
    sub_215B6548C((uint64_t)&v26, -6680, "kCVReturnInvalidPixelFormat: The requested pixelformat is not supported for the CVBuffer type.");
    int v29 = -6681;
    int v30 = operator new(0x68uLL);
    long long v31 = xmmword_215EDC600;
    strcpy((char *)v30, "kCVReturnInvalidSize: The requested size (most likely too big) is not supported for the CVBuffer type.");
    sub_215B6548C((uint64_t)&v32, -6682, "kCVReturnInvalidPixelBufferAttributes: A CVBuffer cannot be created with the given attributes.");
    int v35 = -6683;
    unint64_t v36 = operator new(0xA0uLL);
    long long v37 = xmmword_215EDC610;
    strcpy((char *)v36, "kCVReturnPixelBufferNotOpenGLCompatible: The Buffer cannot be used with OpenGL as either its size, pixelformat or attributes are not supported by OpenGL.");
    int v38 = -6684;
    long long v39 = operator new(0x98uLL);
    long long v40 = xmmword_215EDC620;
    strcpy((char *)v39, "kCVReturnPixelBufferNotMetalCompatible: The Buffer cannot be used with Metal as either its size, pixelformat or attributes are not supported by Metal.");
    int v41 = -6689;
    double v42 = operator new(0xB8uLL);
    long long v43 = xmmword_215EDC630;
    strcpy((char *)v42, "kCVReturnWouldExceedAllocationThreshold: The allocation request failed because it would have exceeded a specified allocation threshold (see kCVPixelBufferPoolAllocationThresholdKey).");
    int v44 = -6690;
    long long v45 = operator new(0xA0uLL);
    long long v46 = xmmword_215EDC640;
    strcpy((char *)v45, "kCVReturnPoolAllocationFailed: The allocation for the buffer pool failed. Most likely because of lack of resources. Check if your parameters are in range.");
    int v47 = -6691;
    int v48 = operator new(0x60uLL);
    long long v49 = xmmword_215EDC650;
    strcpy((char *)v48, "kCVReturnInvalidPoolAttributes: A CVBufferPool cannot be created with the given attributes.");
    int v50 = -6692;
    std::string __p = operator new(0x88uLL);
    long long v52 = xmmword_215EDC660;
    strcpy((char *)__p, "kCVReturnRetry: a scan hasn't completely traversed the CVBufferPool due to a concurrent operation. The client can retry the scan.");
    sub_215B65544(&v0, 18);
    if (SHIBYTE(v52) < 0)
    {
      operator delete(__p);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
      {
LABEL_6:
        if ((SHIBYTE(v46) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_25;
      }
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v48);
    if ((SHIBYTE(v46) & 0x80000000) == 0)
    {
LABEL_7:
      if ((SHIBYTE(v43) & 0x80000000) == 0) {
        goto LABEL_8;
      }
      goto LABEL_26;
    }
LABEL_25:
    operator delete(v45);
    if ((SHIBYTE(v43) & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v40) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v42);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v37) & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v39);
    if ((SHIBYTE(v37) & 0x80000000) == 0)
    {
LABEL_10:
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_29;
    }
LABEL_28:
    operator delete(v36);
    if ((v34 & 0x80000000) == 0)
    {
LABEL_11:
      if ((SHIBYTE(v31) & 0x80000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_30;
    }
LABEL_29:
    operator delete(v33);
    if ((SHIBYTE(v31) & 0x80000000) == 0)
    {
LABEL_12:
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_31;
    }
LABEL_30:
    operator delete(v30);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v25) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v27);
    if ((SHIBYTE(v25) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v22) & 0x80000000) == 0) {
        goto LABEL_15;
      }
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v24);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(v19) & 0x80000000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_34;
    }
LABEL_33:
    operator delete(v21);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_35;
    }
LABEL_34:
    operator delete(v18);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v13[2]) & 0x80000000) == 0) {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
LABEL_35:
    operator delete(v15);
    if ((SHIBYTE(v13[2]) & 0x80000000) == 0)
    {
LABEL_18:
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_19;
      }
      goto LABEL_37;
    }
LABEL_36:
    operator delete(v13[0]);
    if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
LABEL_19:
      if ((SHIBYTE(v8) & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_38;
    }
LABEL_37:
    operator delete(v10);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
    {
LABEL_20:
      if ((SHIBYTE(v5) & 0x80000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_39;
    }
LABEL_38:
    operator delete(v7);
    if ((SHIBYTE(v5) & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v2) & 0x80000000) == 0)
      {
LABEL_22:
        __cxa_atexit((void (*)(void *))sub_215B6572C, &qword_26788F700, &dword_21572C000);
        __cxa_guard_release(&qword_26788F6F8);
        return;
      }
LABEL_40:
      operator delete(v1);
      goto LABEL_22;
    }
LABEL_39:
    operator delete(v4);
    if ((SHIBYTE(v2) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_40;
  }
}

void sub_215B65248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (SLOBYTE(STACK[0x247]) < 0)
  {
    operator delete((void *)STACK[0x230]);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x207]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a84 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a82 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a80 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a78 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a76 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a74 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a65 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a67);
  if ((a65 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a58 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a60);
  if ((a58 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a51 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a53);
  if ((a51 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a44 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a46);
  if ((a44 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a37 & 0x80000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a39);
  if ((a37 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a30 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a32);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a23 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a25);
  if ((a23 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a16 & 0x80000000) == 0)
    {
LABEL_38:
      __cxa_guard_abort(&qword_26788F6F8);
      _Unwind_Resume(a1);
    }
LABEL_37:
    operator delete(a11);
    __cxa_guard_abort(&qword_26788F6F8);
    _Unwind_Resume(a1);
  }
LABEL_36:
  operator delete(a18);
  if ((a16 & 0x80000000) == 0) {
    goto LABEL_38;
  }
  goto LABEL_37;
}

uint64_t sub_215B6548C(uint64_t a1, int a2, char *__s)
{
  *(_DWORD *)a1 = a2;
  long long v5 = (void *)(a1 + 8);
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    long long v5 = operator new(v8 + 1);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v9 | 0x8000000000000000;
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    *(unsigned char *)(a1 + 31) = v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memmove(v5, __s, v7);
LABEL_9:
  *((unsigned char *)v5 + v7) = 0;
  return a1;
}

uint64_t *sub_215B65544(uint64_t *result, uint64_t a2)
{
  qword_26788F710 = 0;
  qword_26788F708 = 0;
  qword_26788F700 = (uint64_t)&qword_26788F708;
  if (a2)
  {
    long long v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = &result[4 * a2];
    int v5 = *(_DWORD *)result;
LABEL_6:
    size_t v7 = &qword_26788F708;
LABEL_10:
    if (v3)
    {
      BOOL v10 = v7 + 1;
      if (v7[1]) {
        goto LABEL_27;
      }
    }
    else
    {
LABEL_20:
      BOOL v10 = &qword_26788F708;
      size_t v7 = &qword_26788F708;
    }
LABEL_21:
    CVPixelBufferRef v13 = (char *)operator new(0x40uLL);
    *((_DWORD *)v13 + 8) = v5;
    int v14 = v13 + 40;
    if (*((char *)v2 + 31) < 0)
    {
      sub_215738B0C(v14, (void *)v2[1], v2[2]);
    }
    else
    {
      long long v15 = *(_OWORD *)(v2 + 1);
      *((void *)v13 + 7) = v2[3];
      *(_OWORD *)int v14 = v15;
    }
    *(void *)CVPixelBufferRef v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v7;
    *BOOL v10 = (uint64_t)v13;
    if (*(void *)qword_26788F700)
    {
      qword_26788F700 = *(void *)qword_26788F700;
      CVPixelBufferRef v13 = (char *)*v10;
    }
    float result = sub_21573B048((uint64_t *)qword_26788F708, (uint64_t *)v13);
    ++qword_26788F710;
LABEL_27:
    while (1)
    {
      v2 += 4;
      if (v2 == v4) {
        break;
      }
      uint64_t v3 = qword_26788F708;
      int v5 = *(_DWORD *)v2;
      if ((uint64_t *)qword_26788F700 == &qword_26788F708) {
        goto LABEL_6;
      }
      uint64_t v6 = qword_26788F708;
      if (qword_26788F708)
      {
        do
        {
          size_t v7 = (uint64_t *)v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        uint64_t v8 = &qword_26788F708;
        do
        {
          size_t v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          uint64_t v8 = v7;
        }
        while (v9);
      }
      if (*((_DWORD *)v7 + 8) < v5) {
        goto LABEL_10;
      }
      if (!qword_26788F708) {
        goto LABEL_20;
      }
      uint64_t v11 = qword_26788F708;
      while (1)
      {
        while (1)
        {
          size_t v7 = (uint64_t *)v11;
          int v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v5) {
            break;
          }
          uint64_t v11 = *v7;
          BOOL v10 = v7;
          if (!*v7) {
            goto LABEL_21;
          }
        }
        if (v12 >= v5) {
          break;
        }
        uint64_t v11 = v7[1];
        if (!v11)
        {
          BOOL v10 = v7 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_215B656F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_215B65758((char *)qword_26788F708);
  _Unwind_Resume(a1);
}

void sub_215B65718(_Unwind_Exception *a1)
{
  sub_215B65758(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B6572C(uint64_t a1)
{
  return a1;
}

void sub_215B65758(char *a1)
{
  if (a1)
  {
    sub_215B65758(*(void *)a1);
    sub_215B65758(*((void *)a1 + 1));
    if (a1[63] < 0)
    {
      operator delete(*((void **)a1 + 5));
      long long v2 = a1;
    }
    else
    {
      long long v2 = a1;
    }
    operator delete(v2);
  }
}

uint64_t sub_215B657D4(void *a1, uint64_t a2)
{
  uint64_t v6 = a2;
  uint64_t v3 = a1[3];
  if (!v3) {
    sub_21573D7DC();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v6);
  uint64_t v4 = (void *)a1[3];
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return MEMORY[0x2166C4D20](a1, 0x1020C40A5B76CDFLL);
}

void sub_215B658B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215B658E8(uint64_t a1)
{
  int v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215B6590C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP11__IOSurfaceEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215B65980(CVPixelBufferRef ****a1)
{
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(****a1);
  sub_215B62310(&v2, IOSurface);
}

void sub_215B65B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  operator delete(v15);
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (a14)
  {
    if (!atomic_fetch_add(&a14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  _Unwind_Resume(a1);
}

void sub_215B65C1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C67D820;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215B65C3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C67D820;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215B65C90(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 64));
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_215B65D2C()
{
}

void sub_215B65F18(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215B65F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215B65F80(void *a1, unsigned int *a2)
{
  int v10 = 0;
  sub_2158D7060((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  int v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C67D7F8[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C67D7C8[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    unint64_t v3 = __p;
  }
  else {
    unint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  float result = sub_215731D94(a1, (uint64_t)v3, v4);
  uint64_t v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215B6606C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B66088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B6609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_215B660B0(void **a1)
{
  uint64_t v1 = (_DWORD *)**a1;
  uint64_t v2 = (const char *)(*a1)[1];
  uint64_t v3 = v1[6];
  if (v3 != -1) {
    ((void (*)(char *, _DWORD *))off_26C67D7C8[v3])(&v9, v1);
  }
  v1[6] = -1;
  size_t result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v5 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    *((void *)v1 + 1) = v5;
    *((void *)v1 + 2) = v8 | 0x8000000000000000;
    *(void *)uint64_t v1 = v6;
  }
  else
  {
    *((unsigned char *)v1 + 23) = result;
    uint64_t v6 = v1;
    if (!result) {
      goto LABEL_11;
    }
  }
  size_t result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((unsigned char *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_215B661A0(uint64_t *a1, uint64_t a2)
{
  void v19[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  *(void *)((char *)v19 + 7) = *(void *)(a2 + 15);
  uint64_t v4 = *(void **)a2;
  v19[0] = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v14 = v4;
  *(void *)long long v15 = v19[0];
  *(void *)&v15[7] = *(void *)((char *)v19 + 7);
  char v16 = v5;
  memset(v19, 0, 15);
  uint64_t v6 = __p;
  uint64_t v7 = *(const char **)(v2 + 24);
  size_t v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  char v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v6 = operator new(v11 + 1);
    __p[1] = v9;
    unint64_t v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((unsigned char *)v9 + (void)v6) = 0;
    uint64_t v10 = *(unsigned int *)(v3 + 24);
    if (v10 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v10 = *(unsigned int *)(v3 + 24);
  if (v10 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26C67D7C8[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_21573A150((void *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0) {
    goto LABEL_15;
  }
}

void sub_215B6635C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B663A0(uint64_t a1, void **a2)
{
  uint64_t v3 = *(const void **)(*(void *)a1 + 32);
  char v5 = a2[1];
  uint64_t v4 = a2[2];
  if (v5 < (void *)v4)
  {
    size_t v6 = strlen(*(const char **)(*(void *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7) {
      sub_215731CD8();
    }
    size_t v7 = v6;
    if (v6 >= 0x17)
    {
      uint64_t v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v14 = v6 | 7;
      }
      uint64_t v15 = v14 + 1;
      size_t v8 = operator new(v14 + 1);
      v5[1] = v7;
      void v5[2] = v15 | 0x8000000000000000;
      *char v5 = v8;
    }
    else
    {
      *((unsigned char *)v5 + 23) = v6;
      size_t v8 = v5;
      if (!v6) {
        goto LABEL_19;
      }
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((unsigned char *)v8 + v7) = 0;
    char v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a2) >> 3);
  uint64_t v11 = 2 * v10;
  if (2 * v10 <= v9 + 1) {
    uint64_t v11 = v9 + 1;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AD8();
    }
    char v13 = (char *)operator new(24 * v12);
  }
  else
  {
    char v13 = 0;
  }
  int v17 = &v13[24 * v9];
  size_t v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7) {
    sub_215731CD8();
  }
  size_t v19 = v18;
  if (v18 >= 0x17)
  {
    uint64_t v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17) {
      uint64_t v24 = v18 | 7;
    }
    uint64_t v25 = v24 + 1;
    int v20 = operator new(v24 + 1);
    *((void *)v17 + 1) = v19;
    *((void *)v17 + 2) = v25 | 0x8000000000000000;
    *(void *)int v17 = v20;
  }
  else
  {
    v17[23] = v18;
    int v20 = v17;
    if (!v18)
    {
      uint64_t v21 = &v13[24 * v12];
      *int v17 = 0;
      char v16 = v17 + 24;
      long long v22 = (void **)*a2;
      int v23 = (void **)a2[1];
      if (v23 == *a2) {
        goto LABEL_36;
      }
      do
      {
LABEL_30:
        long long v26 = *(_OWORD *)(v23 - 3);
        *((void *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      int v23 = (void **)*a2;
      uint64_t v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0) {
          operator delete(*(v27 - 3));
        }
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  uint64_t v21 = &v13[24 * v12];
  *((unsigned char *)v20 + v19) = 0;
  char v16 = v17 + 24;
  long long v22 = (void **)*a2;
  int v23 = (void **)a2[1];
  if (v23 != *a2) {
    goto LABEL_30;
  }
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23) {
    operator delete(v23);
  }
LABEL_39:
  a2[1] = v16;
}

void sub_215B66634(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B6664C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_215B66658(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215B66690(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215B666B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP10__CVBufferEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215B66728(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 24) + 1;
  *(void *)(a1 + 24) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(void *)(a1 + 32))
      {
LABEL_5:
        char v5 = v2;
        goto LABEL_7;
      }
      CVPixelBufferLockFlags v6 = 1;
    }
    else
    {
      if (v4 != 2 || *(void *)(a1 + 32)) {
        goto LABEL_5;
      }
      CVPixelBufferLockFlags v6 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v6);
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(void *)(a1 + 32))
  {
    CVPixelBufferLockFlags v7 = 0;
    int v8 = 2;
  }
  else
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    CVPixelBufferLockFlags v7 = 1;
    int v8 = 1;
  }
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v7);
  *(_DWORD *)(a1 + 16) = v8;
  char v5 = v2;

LABEL_7:
  std::mutex::unlock(v5);
}

void sub_215B66814(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B66828(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B6683C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32) + 1;
  *(void *)(a1 + 32) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      CVPixelBufferLockFlags v7 = 1;
      if (*(void *)(a1 + 24) && !v3) {
        goto LABEL_7;
      }
    }
    else
    {
      if (v4 != 2 || v3 != 0) {
        goto LABEL_7;
      }
      CVPixelBufferLockFlags v7 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v7);
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
  }
  if (v3)
  {
    CVPixelBufferLockFlags v8 = 0;
    int v9 = 2;
    goto LABEL_19;
  }
  if (!*(void *)(a1 + 24))
  {
LABEL_7:
    CVPixelBufferLockFlags v6 = v2;
    goto LABEL_9;
  }
  CVPixelBufferLockFlags v8 = 1;
  int v9 = 1;
LABEL_19:
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v8);
  *(_DWORD *)(a1 + 16) = v9;
  CVPixelBufferLockFlags v6 = v2;

LABEL_9:
  std::mutex::unlock(v6);
}

void sub_215B66924(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B66938(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B6694C(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 24) - 1;
  *(void *)(a1 + 24) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      if (v3 && !*(void *)(a1 + 32))
      {
LABEL_5:
        char v5 = v2;
        goto LABEL_7;
      }
      CVPixelBufferLockFlags v6 = 1;
    }
    else
    {
      if (v4 != 2 || *(void *)(a1 + 32)) {
        goto LABEL_5;
      }
      CVPixelBufferLockFlags v6 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v6);
    *(_DWORD *)(a1 + 16) = 0;
  }
  if (*(void *)(a1 + 32))
  {
    CVPixelBufferLockFlags v7 = 0;
    int v8 = 2;
  }
  else
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    CVPixelBufferLockFlags v7 = 1;
    int v8 = 1;
  }
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v7);
  *(_DWORD *)(a1 + 16) = v8;
  char v5 = v2;

LABEL_7:
  std::mutex::unlock(v5);
}

void sub_215B66A38(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B66A4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B66A60(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32) - 1;
  *(void *)(a1 + 32) = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    if (v4 == 1)
    {
      CVPixelBufferLockFlags v7 = 1;
      if (*(void *)(a1 + 24) && !v3) {
        goto LABEL_7;
      }
    }
    else
    {
      if (v4 != 2 || v3 != 0) {
        goto LABEL_7;
      }
      CVPixelBufferLockFlags v7 = 0;
    }
    CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)a1, v7);
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
  }
  if (v3)
  {
    CVPixelBufferLockFlags v8 = 0;
    int v9 = 2;
    goto LABEL_19;
  }
  if (!*(void *)(a1 + 24))
  {
LABEL_7:
    CVPixelBufferLockFlags v6 = v2;
    goto LABEL_9;
  }
  CVPixelBufferLockFlags v8 = 1;
  int v9 = 1;
LABEL_19:
  CVPixelBufferLockBaseAddress(*(CVPixelBufferRef *)a1, v8);
  *(_DWORD *)(a1 + 16) = v9;
  CVPixelBufferLockFlags v6 = v2;

LABEL_9:
  std::mutex::unlock(v6);
}

void sub_215B66B48(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B66B5C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_215B66B70(uint64_t a1, int a2, _DWORD *a3)
{
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(a3, v4);
}

void sub_215B66E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B66E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215B66E58(int a1, uint64_t a2)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_21;
    }
    uint64_t v7 = *(void *)(a2 + 8);
    CVPixelBufferLockFlags v6 = *(std::__shared_weak_count **)(a2 + 16);
    v11[0] = &unk_26C684900;
    v11[1] = v7;
    unint64_t v12 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B67050(&v17, (uint64_t)v11);
    uint64_t v2 = v18;
    v11[0] = &unk_26C684900;
    char v5 = v12;
    if (v12) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return v2;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v4 = *(void *)(a2 + 8);
        uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
        v15[0] = &unk_26C684900;
        v15[1] = v4;
        char v16 = v3;
        if (v3) {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B67050(&v17, (uint64_t)v15);
        uint64_t v2 = v18;
        v15[0] = &unk_26C684900;
        char v5 = v16;
        if (!v16) {
          return v2;
        }
LABEL_18:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return v2;
      }
LABEL_21:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_21;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    CVPixelBufferLockFlags v8 = *(std::__shared_weak_count **)(a2 + 16);
    v13[0] = &unk_26C684900;
    v13[1] = v9;
    uint64_t v14 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B67050(&v17, (uint64_t)v13);
    uint64_t v2 = v18;
    v13[0] = &unk_26C684900;
    char v5 = v14;
    if (v14) {
      goto LABEL_18;
    }
  }
  return v2;
}

void sub_215B67014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B67028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B6703C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B67050(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    char v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_37;
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v31[0] = &unk_26C684900;
  v31[1] = v8;
  uint64_t v32 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B9464C((uint64_t)v31);
  v31[0] = &unk_26C684900;
  uint64_t v9 = v32;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    unint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v29 = *(void *)(a2 + 8);
    int v30 = v10;
    if (v10) {
      goto LABEL_11;
    }
LABEL_15:
    char v28 = &unk_26C684900;
    goto LABEL_16;
  }
  unint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = *(void *)(a2 + 8);
  int v30 = v10;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  char v28 = &unk_26C684900;
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_16:
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v25 = &unk_26C684900;
  uint64_t v26 = v12;
  uint64_t v27 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_215DC9948((uint64_t)&v25, 0);
  v33[0] = &unk_26C684900;
  v33[1] = v26;
  char v34 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = sub_215DCB044((uint64_t)v33);
  unsigned int v15 = sub_215DCB310((uint64_t)v33);
  unsigned int v16 = sub_215DCB5DC((uint64_t)v33);
  unsigned int v17 = sub_215DCB8A8((uint64_t)v33);
  v33[0] = &unk_26C684900;
  uint64_t v18 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v14;
  unint64_t v20 = v14 | ((unint64_t)v15 << 32);
  unint64_t v21 = v16 | ((unint64_t)v17 << 32);
  uint64_t v25 = &unk_26C684900;
  long long v22 = v27;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v15) {
    BOOL v23 = v19 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v20;
  }
  *a1 = v13;
  a1[1] = v24;
  a1[2] = v21;
  if (v17 * HIDWORD(v24) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_37:
    abort();
  }
}

void sub_215B67434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B67448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6745C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_215B67478(uint64_t a1)
{
  *(void *)a1 = &unk_26C67D9B0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B674F0(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_215B6754C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67D9B0;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    char v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  unint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  char v28 = v9;
  uint64_t v29 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v35[0] = &unk_26C684900;
  v35[1] = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B9464C((uint64_t)v35);
  v35[0] = &unk_26C684900;
  uint64_t v13 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    unsigned int v14 = v29;
    uint64_t v33 = v28;
    char v34 = v29;
    if (v29) {
      goto LABEL_22;
    }
LABEL_26:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_27;
  }
  unsigned int v14 = v29;
  uint64_t v33 = v28;
  char v34 = v29;
  if (!v29) {
    goto LABEL_26;
  }
LABEL_22:
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_27:
  v30[0] = &unk_26C684900;
  v30[1] = v28;
  long long v31 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v15 = sub_215DCB044((uint64_t)v30);
  unsigned int v16 = sub_215DCB310((uint64_t)v30);
  unsigned int v17 = sub_215DCB5DC((uint64_t)v30);
  unsigned int v18 = sub_215DCB8A8((uint64_t)v30);
  unsigned int v19 = v18;
  v30[0] = &unk_26C684900;
  unint64_t v20 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    *(void *)(a1 + 48) = v15 | ((unint64_t)v16 << 32);
    *(void *)(a1 + 56) = v17 | ((unint64_t)v19 << 32);
    unint64_t v21 = v29;
    if (!v29) {
      goto LABEL_33;
    }
  }
  else
  {
    *(void *)(a1 + 48) = v15 | ((unint64_t)v16 << 32);
    *(void *)(a1 + 56) = v17 | ((unint64_t)v18 << 32);
    unint64_t v21 = v29;
    if (!v29) {
      goto LABEL_33;
    }
  }
  if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    uint64_t v22 = *(void *)(a2 + 8);
    if (v22) {
      goto LABEL_34;
    }
LABEL_44:
    uint64_t v26 = 0;
    goto LABEL_45;
  }
LABEL_33:
  uint64_t v22 = *(void *)(a2 + 8);
  if (!v22) {
    goto LABEL_44;
  }
LABEL_34:
  BOOL v23 = *(std::__shared_weak_count **)(v22 + 8);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      unint64_t v24 = *(uint64_t **)(a2 + 8);
      if (v24) {
        goto LABEL_37;
      }
LABEL_51:
      uint64_t v26 = 0;
      if (!*(_DWORD *)(a1 + 48)) {
        goto LABEL_52;
      }
      goto LABEL_46;
    }
  }
  unint64_t v24 = *(uint64_t **)(a2 + 8);
  if (!v24) {
    goto LABEL_51;
  }
LABEL_37:
  uint64_t v26 = *v24;
  uint64_t v25 = (std::__shared_weak_count *)v24[1];
  if (!v25
    || (atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_45:
    if (!*(_DWORD *)(a1 + 48)) {
      goto LABEL_52;
    }
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (!*(_DWORD *)(a1 + 48))
  {
LABEL_52:
    if (!v26) {
      return a1;
    }
    goto LABEL_53;
  }
LABEL_46:
  if ((v26 == 0) == (*(_DWORD *)(a1 + 52) == 0)) {
    return a1;
  }
LABEL_53:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B67B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_215DCAD80(&a18);
  sub_215DCAD80(&a9);
  sub_215B674F0(v18);
  _Unwind_Resume(a1);
}

void sub_215B67B70(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  char v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B67C14(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    char v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          unsigned int v16 = &unk_26C684900;
          uint64_t v17 = v7;
          uint64_t v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          unsigned int v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B67050(a1, (uint64_t)v14);
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          unsigned int v16 = &unk_26C684900;
          unint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B67E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B67E94(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a3 + 24);
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(v3, v4);
}

void sub_215B68138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B68150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215B6817C(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v14[0] = &unk_26C684900;
    v14[1] = v9;
    unsigned int v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B683A4((uint64_t)v20, (uint64_t)v14);
    long long v10 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = v23;
    v14[0] = &unk_26C684900;
    uint64_t v7 = v15;
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(void *)(a2 + 8);
        int v4 = *(std::__shared_weak_count **)(a2 + 16);
        v18[0] = &unk_26C684900;
        v18[1] = v5;
        unsigned int v19 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B683A4((uint64_t)v20, (uint64_t)v18);
        long long v6 = v22;
        *(_OWORD *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v6;
        *(void *)(a3 + 32) = v23;
        v18[0] = &unk_26C684900;
        uint64_t v7 = v19;
        if (!v19) {
          return;
        }
LABEL_18:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
LABEL_20:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_20;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
    v16[0] = &unk_26C684900;
    v16[1] = v12;
    uint64_t v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B683A4((uint64_t)v20, (uint64_t)v16);
    long long v13 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v23;
    v16[0] = &unk_26C684900;
    uint64_t v7 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_215B68368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6837C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B68390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B683A4(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26C684900;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B9464C((uint64_t)v33);
  v33[0] = &unk_26C684900;
  uint64_t v9 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    long long v10 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v10;
    if (v10) {
      goto LABEL_11;
    }
LABEL_15:
    int v30 = &unk_26C684900;
    goto LABEL_16;
  }
  long long v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v10;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  int v30 = &unk_26C684900;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_16:
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26C684900;
  uint64_t v28 = v12;
  uint64_t v29 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_215DC9948((uint64_t)&v27, 0);
  *(void *)&long long v35 = &unk_26C684900;
  *((void *)&v35 + 1) = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = sub_215DCB044((uint64_t)&v35);
  unsigned int v15 = sub_215DCB310((uint64_t)&v35);
  unsigned int v16 = sub_215DCB5DC((uint64_t)&v35);
  unsigned int v17 = sub_215DCB8A8((uint64_t)&v35);
  *(void *)&long long v35 = &unk_26C684900;
  uint64_t v18 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v14;
  unint64_t v20 = v14 | ((unint64_t)v15 << 32);
  unint64_t v21 = v16 | ((unint64_t)v17 << 32);
  uint64_t v27 = &unk_26C684900;
  long long v22 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v15) {
    BOOL v23 = v19 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v20;
  }
  *(void *)((char *)&v35 + 4) = v24;
  LODWORD(v35) = 2;
  uint64_t v25 = v35;
  LODWORD(v35) = 1;
  *(void *)((char *)&v35 + 4) = v21;
  uint64_t v26 = v35;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 16) = HIDWORD(v24);
  *(void *)(a1 + 20) = v26;
  *(_DWORD *)(a1 + 28) = v17;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v21;
  if (HIDWORD(v24) * v17 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B68808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6881C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B68830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B6884C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DA40;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B688C4(uint64_t a1, uint64_t a2)
{
  size_t v37[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67DA40;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v28 = v9;
  uint64_t v29 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v35[0] = &unk_26C684900;
  v35[1] = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B9464C((uint64_t)v35);
  v35[0] = &unk_26C684900;
  uint64_t v13 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    unsigned int v14 = v29;
    uint64_t v33 = v28;
    char v34 = v29;
    if (v29) {
      goto LABEL_22;
    }
LABEL_26:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_27;
  }
  unsigned int v14 = v29;
  uint64_t v33 = v28;
  char v34 = v29;
  if (!v29) {
    goto LABEL_26;
  }
LABEL_22:
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_27:
  v30[0] = &unk_26C684900;
  v30[1] = v28;
  uint64_t v31 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v15 = sub_215DCB044((uint64_t)v30);
  unsigned int v16 = sub_215DCB310((uint64_t)v30);
  unsigned int v17 = sub_215DCB5DC((uint64_t)v30);
  unsigned int v18 = sub_215DCB8A8((uint64_t)v30);
  v30[0] = &unk_26C684900;
  uint64_t v19 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = v17 | ((unint64_t)v18 << 32);
  unint64_t v21 = v15 | ((unint64_t)v16 << 32);
  LODWORD(v37[0]) = 2;
  HIDWORD(v37[0]) = v21;
  *(void *)(a1 + 48) = v37[0];
  *(_DWORD *)(a1 + 56) = v16;
  LODWORD(v37[0]) = 1;
  *(void *)((char *)v37 + 4) = v20;
  *(void *)(a1 + 60) = v37[0];
  *(_DWORD *)(a1 + 68) = v18;
  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v20;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v22 = *(void *)(a2 + 8);
    if (v22) {
      goto LABEL_35;
    }
LABEL_43:
    uint64_t v26 = 0;
    goto LABEL_44;
  }
  uint64_t v22 = *(void *)(a2 + 8);
  if (!v22) {
    goto LABEL_43;
  }
LABEL_35:
  BOOL v23 = *(std::__shared_weak_count **)(v22 + 8);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      unint64_t v24 = *(uint64_t **)(a2 + 8);
      if (v24) {
        goto LABEL_38;
      }
LABEL_50:
      uint64_t v26 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_51;
      }
      goto LABEL_45;
    }
  }
  unint64_t v24 = *(uint64_t **)(a2 + 8);
  if (!v24) {
    goto LABEL_50;
  }
LABEL_38:
  uint64_t v26 = *v24;
  uint64_t v25 = (std::__shared_weak_count *)v24[1];
  if (!v25
    || (atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_44:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_51:
    if (!v26) {
      return a1;
    }
    goto LABEL_52;
  }
LABEL_45:
  if ((v26 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_52:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B68EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B68F28(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B68FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          unint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          uint64_t v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B683A4(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B69250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B6926C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a3 + 24);
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(v3, v4);
}

void sub_215B69510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B69528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215B69554(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v14[0] = &unk_26C684900;
    v14[1] = v9;
    unint64_t v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6977C((uint64_t)v20, (uint64_t)v14);
    long long v10 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = v23;
    v14[0] = &unk_26C684900;
    uint64_t v7 = v15;
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(void *)(a2 + 8);
        int v4 = *(std::__shared_weak_count **)(a2 + 16);
        v18[0] = &unk_26C684900;
        v18[1] = v5;
        uint64_t v19 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B6977C((uint64_t)v20, (uint64_t)v18);
        long long v6 = v22;
        *(_OWORD *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v6;
        *(void *)(a3 + 32) = v23;
        v18[0] = &unk_26C684900;
        uint64_t v7 = v19;
        if (!v19) {
          return;
        }
LABEL_18:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
LABEL_20:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_20;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
    v16[0] = &unk_26C684900;
    v16[1] = v12;
    uint64_t v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6977C((uint64_t)v20, (uint64_t)v16);
    long long v13 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v23;
    v16[0] = &unk_26C684900;
    uint64_t v7 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_215B69740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B69754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B69768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6977C(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26C684900;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B9464C((uint64_t)v33);
  v33[0] = &unk_26C684900;
  uint64_t v9 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    long long v10 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v10;
    if (v10) {
      goto LABEL_11;
    }
LABEL_15:
    int v30 = &unk_26C684900;
    goto LABEL_16;
  }
  long long v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v10;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  int v30 = &unk_26C684900;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_16:
  uint64_t v12 = *(void *)(a2 + 8);
  BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26C684900;
  uint64_t v28 = v12;
  uint64_t v29 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_215DC9948((uint64_t)&v27, 0);
  *(void *)&long long v35 = &unk_26C684900;
  *((void *)&v35 + 1) = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = sub_215DCB044((uint64_t)&v35);
  unsigned int v15 = sub_215DCB310((uint64_t)&v35);
  unsigned int v16 = sub_215DCB5DC((uint64_t)&v35);
  unsigned int v17 = sub_215DCB8A8((uint64_t)&v35);
  *(void *)&long long v35 = &unk_26C684900;
  unsigned int v18 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v14;
  unint64_t v20 = v14 | ((unint64_t)v15 << 32);
  unint64_t v21 = v16 | ((unint64_t)v17 << 32);
  uint64_t v27 = &unk_26C684900;
  long long v22 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v15) {
    BOOL v23 = v19 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v20;
  }
  *(void *)((char *)&v35 + 4) = v24;
  LODWORD(v35) = 3;
  uint64_t v25 = v35;
  LODWORD(v35) = 1;
  *(void *)((char *)&v35 + 4) = v21;
  uint64_t v26 = v35;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 16) = HIDWORD(v24);
  *(void *)(a1 + 20) = v26;
  *(_DWORD *)(a1 + 28) = v17;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v21;
  if (HIDWORD(v24) * v17 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B69BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B69BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B69C08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B69C24(uint64_t a1, unsigned char *a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if (!v3) {
    return;
  }
  uint64_t v6 = *v3;
  uint64_t v5 = (std::__shared_weak_count *)v3[1];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  uint64_t v7 = a1 + 16;
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8 == 2)
  {
    sub_215DC9BAC(v25, v7);
    goto LABEL_12;
  }
  if (v8 > 1) {
LABEL_29:
  }
    sub_215742D4C();
  sub_215DC9A68(v25, v7);
LABEL_12:
  sub_215B6A740((uint64_t)&v18, a1);
  v26[0] = &v18;
  v26[1] = a2;
  if (v22 == 1)
  {
    sub_215B5993C(v26);
  }
  else if (v19 && v20 && v21)
  {
    int v9 = v20 - 1;
    uint64_t v10 = v23;
    uint64_t v11 = v18;
    int v12 = v21 - 1;
    if (v21 != 1)
    {
      uint64_t v13 = v24;
      if (v20 == 1)
      {
        do
        {
          *uint64_t v11 = *a2;
          v11[1] = *a2;
          void v11[2] = *a2;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
      else
      {
        int v14 = 0;
        unsigned int v15 = v18 + 2;
        do
        {
          unsigned int v16 = v15;
          int v17 = v9;
          do
          {
            *(v16 - 2) = *a2;
            *(v16 - 1) = *a2;
            *unsigned int v16 = *a2;
            v16 += v10;
            --v17;
          }
          while (v17);
          *(v16 - 2) = *a2;
          *(v16 - 1) = *a2;
          *unsigned int v16 = *a2;
          v11 += v13;
          ++v14;
          v15 += v13;
        }
        while (v14 != v12);
      }
    }
    for (; v9; --v9)
    {
      *uint64_t v11 = *a2;
      v11[1] = *a2;
      void v11[2] = *a2;
      v11 += v10;
    }
    *uint64_t v11 = *a2;
    v11[1] = *a2;
    void v11[2] = *a2;
  }
  sub_215DC9DEC(v25);
}

void sub_215B69E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC9DEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B69E50(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DAD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B69EC8(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    goto LABEL_20;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if (!v3) {
    return;
  }
  uint64_t v6 = *v3;
  uint64_t v5 = (std::__shared_weak_count *)v3[1];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  uint64_t v7 = a1 + 16;
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8 != 2)
  {
    if (v8 <= 1)
    {
      sub_215DC9A68(v11, v7);
      goto LABEL_12;
    }
LABEL_20:
    sub_215742D4C();
  }
  sub_215DC9BAC(v11, v7);
LABEL_12:
  sub_215B6A740((uint64_t)v9, a1);
  v12[0] = (size_t)a2;
  v12[1] = (size_t)v9;
  if (a2[5] == 1 && v10 == 1)
  {
    sub_2158A2610(v12);
  }
  else
  {
    char v13 = 0;
    if (a2[2] && a2[3])
    {
      if (a2[4])
      {
        int v14 = &v13;
        sub_2158A57D4((uint64_t)&v14, (uint64_t)a2, (uint64_t)v9);
      }
    }
  }
  sub_215DC9DEC(v11);
}

void sub_215B6A024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC9DEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B6A038(uint64_t a1, uint64_t a2)
{
  size_t v37[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67DAD0;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  int v9 = *(void **)(a2 + 8);
  int v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v28 = v9;
  uint64_t v29 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v35[0] = &unk_26C684900;
  v35[1] = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B9464C((uint64_t)v35);
  v35[0] = &unk_26C684900;
  char v13 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    int v14 = v29;
    uint64_t v33 = v28;
    char v34 = v29;
    if (v29) {
      goto LABEL_22;
    }
LABEL_26:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_27;
  }
  int v14 = v29;
  uint64_t v33 = v28;
  char v34 = v29;
  if (!v29) {
    goto LABEL_26;
  }
LABEL_22:
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_27:
  v30[0] = &unk_26C684900;
  v30[1] = v28;
  uint64_t v31 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v15 = sub_215DCB044((uint64_t)v30);
  unsigned int v16 = sub_215DCB310((uint64_t)v30);
  unsigned int v17 = sub_215DCB5DC((uint64_t)v30);
  unsigned int v18 = sub_215DCB8A8((uint64_t)v30);
  v30[0] = &unk_26C684900;
  int v19 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = v17 | ((unint64_t)v18 << 32);
  unint64_t v21 = v15 | ((unint64_t)v16 << 32);
  LODWORD(v37[0]) = 3;
  HIDWORD(v37[0]) = v21;
  *(void *)(a1 + 48) = v37[0];
  *(_DWORD *)(a1 + 56) = v16;
  LODWORD(v37[0]) = 1;
  *(void *)((char *)v37 + 4) = v20;
  *(void *)(a1 + 60) = v37[0];
  *(_DWORD *)(a1 + 68) = v18;
  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v20;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v22 = *(void *)(a2 + 8);
    if (v22) {
      goto LABEL_35;
    }
LABEL_43:
    uint64_t v26 = 0;
    goto LABEL_44;
  }
  uint64_t v22 = *(void *)(a2 + 8);
  if (!v22) {
    goto LABEL_43;
  }
LABEL_35:
  unsigned int v23 = *(std::__shared_weak_count **)(v22 + 8);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      unsigned int v24 = *(uint64_t **)(a2 + 8);
      if (v24) {
        goto LABEL_38;
      }
LABEL_50:
      uint64_t v26 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_51;
      }
      goto LABEL_45;
    }
  }
  unsigned int v24 = *(uint64_t **)(a2 + 8);
  if (!v24) {
    goto LABEL_50;
  }
LABEL_38:
  uint64_t v26 = *v24;
  uint64_t v25 = (std::__shared_weak_count *)v24[1];
  if (!v25
    || (atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_44:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_51:
    if (!v26) {
      return a1;
    }
    goto LABEL_52;
  }
LABEL_45:
  if ((v26 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_52:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B6A634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B6A69C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B6A740(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v13 = &unk_26C684900;
          uint64_t v14 = v7;
          unsigned int v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            uint64_t v8 = v15;
          }
          v11[0] = &unk_26C684900;
          v11[1] = v7;
          uint64_t v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6977C(a1, (uint64_t)v11);
          v11[0] = &unk_26C684900;
          uint64_t v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v13 = &unk_26C684900;
          uint64_t v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_215B6A950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B6A96C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a3 + 24);
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(v3, v4);
}

void sub_215B6AC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6AC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215B6AC54(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v14[0] = &unk_26C684900;
    v14[1] = v9;
    unsigned int v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6AE7C((uint64_t)v20, (uint64_t)v14);
    long long v10 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = v23;
    v14[0] = &unk_26C684900;
    uint64_t v7 = v15;
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(void *)(a2 + 8);
        int v4 = *(std::__shared_weak_count **)(a2 + 16);
        v18[0] = &unk_26C684900;
        v18[1] = v5;
        int v19 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B6AE7C((uint64_t)v20, (uint64_t)v18);
        long long v6 = v22;
        *(_OWORD *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v6;
        *(void *)(a3 + 32) = v23;
        v18[0] = &unk_26C684900;
        uint64_t v7 = v19;
        if (!v19) {
          return;
        }
LABEL_18:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
LABEL_20:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_20;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v11 = *(std::__shared_weak_count **)(a2 + 16);
    v16[0] = &unk_26C684900;
    v16[1] = v12;
    unsigned int v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6AE7C((uint64_t)v20, (uint64_t)v16);
    long long v13 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v23;
    v16[0] = &unk_26C684900;
    uint64_t v7 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_215B6AE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6AE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6AE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6AE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26C684900;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B9464C((uint64_t)v33);
  v33[0] = &unk_26C684900;
  uint64_t v9 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    long long v10 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v10;
    if (v10) {
      goto LABEL_11;
    }
LABEL_15:
    int v30 = &unk_26C684900;
    goto LABEL_16;
  }
  long long v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v10;
  if (!v10) {
    goto LABEL_15;
  }
LABEL_11:
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  int v30 = &unk_26C684900;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_16:
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26C684900;
  uint64_t v28 = v12;
  uint64_t v29 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_215DC9948((uint64_t)&v27, 0);
  *(void *)&long long v35 = &unk_26C684900;
  *((void *)&v35 + 1) = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v14 = sub_215DCB044((uint64_t)&v35);
  unsigned int v15 = sub_215DCB310((uint64_t)&v35);
  unsigned int v16 = sub_215DCB5DC((uint64_t)&v35);
  unsigned int v17 = sub_215DCB8A8((uint64_t)&v35);
  *(void *)&long long v35 = &unk_26C684900;
  unsigned int v18 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v14;
  unint64_t v20 = v14 | ((unint64_t)v15 << 32);
  unint64_t v21 = v16 | ((unint64_t)v17 << 32);
  uint64_t v27 = &unk_26C684900;
  long long v22 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v15) {
    BOOL v23 = v19 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = v20;
  }
  *(void *)((char *)&v35 + 4) = v24;
  LODWORD(v35) = 4;
  uint64_t v25 = v35;
  LODWORD(v35) = 1;
  *(void *)((char *)&v35 + 4) = v21;
  uint64_t v26 = v35;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 16) = HIDWORD(v24);
  *(void *)(a1 + 20) = v26;
  *(_DWORD *)(a1 + 28) = v17;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v21;
  if (HIDWORD(v24) * v17 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B6B2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6B2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6B308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6B324(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    goto LABEL_19;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if (!v3) {
    return;
  }
  uint64_t v6 = *v3;
  uint64_t v5 = (std::__shared_weak_count *)v3[1];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  uint64_t v7 = a1 + 16;
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8 == 2)
  {
    sub_215DC9BAC(v16, v7);
    goto LABEL_12;
  }
  if (v8 > 1) {
LABEL_19:
  }
    sub_215742D4C();
  sub_215DC9A68(v16, v7);
LABEL_12:
  sub_215B6BDA0((uint64_t)&v9, a1);
  v17[0] = &v9;
  v17[1] = a2;
  if (v13 == 1)
  {
    sub_215B5993C(v17);
  }
  else
  {
    uint64_t v18 = a2;
    if (v10 && v11)
    {
      if (v12)
      {
        uint64_t v19 = &v18;
        v20[0] = 0;
        v20[1] = v10 - 1;
        v20[2] = v13;
        void v20[3] = v11 - 1;
        v20[4] = v14;
        v20[5] = v12 - 1;
        v20[6] = v15;
        v21[0] = 0;
        v21[1] = 0;
        sub_215B59C20(v20, (uint64_t)v21, (unsigned char ***)&v19, v9);
      }
    }
  }
  sub_215DC9DEC(v16);
}

void sub_215B6B49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC9DEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B6B4B0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DB60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void sub_215B6B528(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    goto LABEL_20;
  }
  uint64_t v3 = *(uint64_t **)(a1 + 24);
  if (!v3) {
    return;
  }
  uint64_t v6 = *v3;
  uint64_t v5 = (std::__shared_weak_count *)v3[1];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6) {
      return;
    }
  }
  else if (!v6)
  {
    return;
  }
  uint64_t v7 = a1 + 16;
  unsigned int v8 = *(_DWORD *)(a1 + 40);
  if (v8 != 2)
  {
    if (v8 <= 1)
    {
      sub_215DC9A68(v11, v7);
      goto LABEL_12;
    }
LABEL_20:
    sub_215742D4C();
  }
  sub_215DC9BAC(v11, v7);
LABEL_12:
  sub_215B6BDA0((uint64_t)v9, a1);
  v12[0] = (size_t)a2;
  v12[1] = (size_t)v9;
  if (a2[5] == 1 && v10 == 1)
  {
    sub_2158A2610(v12);
  }
  else
  {
    char v13 = 0;
    if (a2[2] && a2[3])
    {
      if (a2[4])
      {
        int v14 = &v13;
        sub_2158A6EF0((uint64_t)&v14, (uint64_t)a2, (uint64_t)v9);
      }
    }
  }
  sub_215DC9DEC(v11);
}

void sub_215B6B684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC9DEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B6B698(uint64_t a1, uint64_t a2)
{
  size_t v37[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67DB60;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  int v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v28 = v9;
  uint64_t v29 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    int v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v35[0] = &unk_26C684900;
  v35[1] = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B9464C((uint64_t)v35);
  v35[0] = &unk_26C684900;
  char v13 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    int v14 = v29;
    uint64_t v33 = v28;
    char v34 = v29;
    if (v29) {
      goto LABEL_22;
    }
LABEL_26:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_27;
  }
  int v14 = v29;
  uint64_t v33 = v28;
  char v34 = v29;
  if (!v29) {
    goto LABEL_26;
  }
LABEL_22:
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_27:
  v30[0] = &unk_26C684900;
  v30[1] = v28;
  uint64_t v31 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v15 = sub_215DCB044((uint64_t)v30);
  unsigned int v16 = sub_215DCB310((uint64_t)v30);
  unsigned int v17 = sub_215DCB5DC((uint64_t)v30);
  unsigned int v18 = sub_215DCB8A8((uint64_t)v30);
  v30[0] = &unk_26C684900;
  uint64_t v19 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  unint64_t v20 = v17 | ((unint64_t)v18 << 32);
  unint64_t v21 = v15 | ((unint64_t)v16 << 32);
  LODWORD(v37[0]) = 4;
  HIDWORD(v37[0]) = v21;
  *(void *)(a1 + 48) = v37[0];
  *(_DWORD *)(a1 + 56) = v16;
  LODWORD(v37[0]) = 1;
  *(void *)((char *)v37 + 4) = v20;
  *(void *)(a1 + 60) = v37[0];
  *(_DWORD *)(a1 + 68) = v18;
  *(void *)(a1 + 72) = v21;
  *(void *)(a1 + 80) = v20;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    uint64_t v22 = *(void *)(a2 + 8);
    if (v22) {
      goto LABEL_35;
    }
LABEL_43:
    uint64_t v26 = 0;
    goto LABEL_44;
  }
  uint64_t v22 = *(void *)(a2 + 8);
  if (!v22) {
    goto LABEL_43;
  }
LABEL_35:
  BOOL v23 = *(std::__shared_weak_count **)(v22 + 8);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      unint64_t v24 = *(uint64_t **)(a2 + 8);
      if (v24) {
        goto LABEL_38;
      }
LABEL_50:
      uint64_t v26 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_51;
      }
      goto LABEL_45;
    }
  }
  unint64_t v24 = *(uint64_t **)(a2 + 8);
  if (!v24) {
    goto LABEL_50;
  }
LABEL_38:
  uint64_t v26 = *v24;
  uint64_t v25 = (std::__shared_weak_count *)v24[1];
  if (!v25
    || (atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_44:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_51;
    }
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_51:
    if (!v26) {
      return a1;
    }
    goto LABEL_52;
  }
LABEL_45:
  if ((v26 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_52:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B6BC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B6BCFC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B6BDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          unint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          uint64_t v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6AE7C(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B6C024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B6C040(uint64_t a1, int a2, _DWORD *a3)
{
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(a3, v4);
}

void sub_215B6C2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6C2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215B6C328(int a1, uint64_t a2)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_21;
    }
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
    v11[0] = &unk_26C684900;
    v11[1] = v7;
    unint64_t v12 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6C520(&v17, (uint64_t)v11);
    uint64_t v2 = v18;
    v11[0] = &unk_26C684900;
    uint64_t v5 = v12;
    if (v12) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return v2;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v4 = *(void *)(a2 + 8);
        uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
        v15[0] = &unk_26C684900;
        v15[1] = v4;
        unint64_t v16 = v3;
        if (v3) {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B6C520(&v17, (uint64_t)v15);
        uint64_t v2 = v18;
        v15[0] = &unk_26C684900;
        uint64_t v5 = v16;
        if (!v16) {
          return v2;
        }
LABEL_18:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return v2;
      }
LABEL_21:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_21;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v13[0] = &unk_26C684900;
    v13[1] = v9;
    unint64_t v14 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6C520(&v17, (uint64_t)v13);
    uint64_t v2 = v18;
    v13[0] = &unk_26C684900;
    uint64_t v5 = v14;
    if (v14) {
      goto LABEL_18;
    }
  }
  return v2;
}

void sub_215B6C4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B6C50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6C520(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_49;
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26C684900;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_215DCBB74((uint64_t)v33);
  uint64_t v10 = &v36;
  if (v9 > 1647589489)
  {
    if (v9 == 1647719521)
    {
      uint64_t v11 = 0;
      goto LABEL_17;
    }
    if (v9 == 1647589490)
    {
      uint64_t v11 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    if (v9 == 1278226742)
    {
      uint64_t v11 = 3;
      goto LABEL_17;
    }
    if (v9 == 1647392359)
    {
      uint64_t v11 = 2;
LABEL_17:
      uint64_t v10 = (std::__shared_weak_count **)((char *)v35 + 4 * v11);
    }
  }
  if ((char *)v10 - (char *)v35 == 16
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v33[0] = &unk_26C684900;
  unint64_t v12 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v13;
    if (v13) {
      goto LABEL_23;
    }
LABEL_27:
    int v30 = &unk_26C684900;
    goto LABEL_28;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v13;
  if (!v13) {
    goto LABEL_27;
  }
LABEL_23:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  int v30 = &unk_26C684900;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_28:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26C684900;
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_215DC9948((uint64_t)&v27, 0);
  v35[0] = &unk_26C684900;
  v35[1] = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_215DCB044((uint64_t)v35);
  unsigned int v18 = sub_215DCB310((uint64_t)v35);
  size_t v19 = sub_215DCB5DC((uint64_t)v35);
  size_t v20 = sub_215DCB8A8((uint64_t)v35) << 31;
  v35[0] = &unk_26C684900;
  unint64_t v21 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v27 = &unk_26C684900;
  unint64_t v24 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *a1 = v16;
  a1[1] = v26;
  a1[2] = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v20) * HIDWORD(v26) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_49:
    abort();
  }
}

void sub_215B6C9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B6C9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6CA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_215B6CA28(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DBF0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B6CAA0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67DBF0;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  int v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  int v30 = v9;
  uint64_t v31 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v37[0] = &unk_26C684900;
  v37[1] = v30;
  int v38 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = sub_215DCBB74((uint64_t)v37);
  unint64_t v14 = &v36;
  if (v13 > 1647589489)
  {
    if (v13 == 1647719521)
    {
      uint64_t v15 = 0;
      goto LABEL_28;
    }
    if (v13 == 1647589490)
    {
      uint64_t v15 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    if (v13 == 1278226742)
    {
      uint64_t v15 = 3;
      goto LABEL_28;
    }
    if (v13 == 1647392359)
    {
      uint64_t v15 = 2;
LABEL_28:
      unint64_t v14 = (std::__shared_weak_count **)((char *)&v34 + 4 * v15);
    }
  }
  if ((char *)v14 - (char *)&v34 == 16
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v37[0] = &unk_26C684900;
  uint64_t v16 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = v31;
    long long v35 = v30;
    unint64_t v36 = v31;
    if (v31) {
      goto LABEL_34;
    }
LABEL_38:
    char v34 = &unk_26C684900;
    goto LABEL_39;
  }
  unsigned int v17 = v31;
  long long v35 = v30;
  unint64_t v36 = v31;
  if (!v31) {
    goto LABEL_38;
  }
LABEL_34:
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v18 = v36;
  char v34 = &unk_26C684900;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_39:
  v32[0] = &unk_26C684900;
  v32[1] = v30;
  uint64_t v33 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = sub_215DCB044((uint64_t)v32);
  unsigned int v20 = sub_215DCB310((uint64_t)v32);
  size_t v21 = sub_215DCB5DC((uint64_t)v32);
  size_t v22 = sub_215DCB8A8((uint64_t)v32);
  v32[0] = &unk_26C684900;
  unint64_t v23 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  *(void *)(a1 + 48) = v19 | ((unint64_t)v20 << 32);
  *(void *)(a1 + 56) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    uint64_t v24 = *(void *)(a2 + 8);
    if (v24) {
      goto LABEL_47;
    }
LABEL_55:
    uint64_t v28 = 0;
    goto LABEL_56;
  }
  uint64_t v24 = *(void *)(a2 + 8);
  if (!v24) {
    goto LABEL_55;
  }
LABEL_47:
  BOOL v25 = *(std::__shared_weak_count **)(v24 + 8);
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      unint64_t v26 = *(uint64_t **)(a2 + 8);
      if (v26) {
        goto LABEL_50;
      }
LABEL_62:
      uint64_t v28 = 0;
      if (!*(_DWORD *)(a1 + 48)) {
        goto LABEL_63;
      }
      goto LABEL_57;
    }
  }
  unint64_t v26 = *(uint64_t **)(a2 + 8);
  if (!v26) {
    goto LABEL_62;
  }
LABEL_50:
  uint64_t v28 = *v26;
  uint64_t v27 = (std::__shared_weak_count *)v26[1];
  if (!v27
    || (atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_56:
    if (!*(_DWORD *)(a1 + 48)) {
      goto LABEL_63;
    }
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (!*(_DWORD *)(a1 + 48))
  {
LABEL_63:
    if (!v28) {
      return a1;
    }
    goto LABEL_64;
  }
LABEL_57:
  if ((v28 == 0) == (*(_DWORD *)(a1 + 52) == 0)) {
    return a1;
  }
LABEL_64:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B6D114(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B6D128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215DCAD80(&a9);
  sub_215B674F0(v9);
  _Unwind_Resume(a1);
}

void sub_215B6D144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_215DCAD80(&a18);
  sub_215DCAD80(&a9);
  sub_215B674F0(v18);
  _Unwind_Resume(a1);
}

void sub_215B6D17C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  char v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B6D220(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26C684900;
          uint64_t v17 = v7;
          uint64_t v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6C520(a1, (uint64_t)v14);
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26C684900;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B6D484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B6D4A0(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a3 + 24);
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(v3, v4);
}

void sub_215B6D744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6D75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215B6D788(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v14[0] = &unk_26C684900;
    v14[1] = v9;
    uint64_t v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6D9B0((uint64_t)v20, (uint64_t)v14);
    long long v10 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = v23;
    v14[0] = &unk_26C684900;
    uint64_t v7 = v15;
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(void *)(a2 + 8);
        int v4 = *(std::__shared_weak_count **)(a2 + 16);
        v18[0] = &unk_26C684900;
        v18[1] = v5;
        unsigned int v19 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B6D9B0((uint64_t)v20, (uint64_t)v18);
        long long v6 = v22;
        *(_OWORD *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v6;
        *(void *)(a3 + 32) = v23;
        v18[0] = &unk_26C684900;
        uint64_t v7 = v19;
        if (!v19) {
          return;
        }
LABEL_18:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
LABEL_20:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_20;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
    v16[0] = &unk_26C684900;
    v16[1] = v12;
    uint64_t v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6D9B0((uint64_t)v20, (uint64_t)v16);
    long long v13 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v23;
    v16[0] = &unk_26C684900;
    uint64_t v7 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_215B6D974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6D988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6D99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6D9B0(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26C684900;
  v35[1] = v8;
  unint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_215DCBB74((uint64_t)v35);
  long long v10 = (char *)v38;
  if (v9 > 1647589489)
  {
    if (v9 == 1647719521)
    {
      uint64_t v11 = 0;
      goto LABEL_17;
    }
    if (v9 == 1647589490)
    {
      uint64_t v11 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    if (v9 == 1278226742)
    {
      uint64_t v11 = 3;
      goto LABEL_17;
    }
    if (v9 == 1647392359)
    {
      uint64_t v11 = 2;
LABEL_17:
      long long v10 = (char *)&v38[-2] + 4 * v11;
    }
  }
  if (v10 - (char *)&v37 == 16
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v35[0] = &unk_26C684900;
  uint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_23;
    }
LABEL_27:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_28;
  }
  long long v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_27;
  }
LABEL_23:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_28:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26C684900;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_215DC9948((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26C684900;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_215DCB044((uint64_t)&v37);
  unsigned int v18 = sub_215DCB310((uint64_t)&v37);
  size_t v19 = sub_215DCB5DC((uint64_t)&v37);
  size_t v20 = sub_215DCB8A8((uint64_t)&v37) << 31;
  *(void *)&long long v37 = &unk_26C684900;
  long long v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26C684900;
  uint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 3;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B6DEF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6DF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6DF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B6DF38(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DC80;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B6DFB0(uint64_t a1, uint64_t a2)
{
  v40[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67DC80;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = v9;
  uint64_t v32 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v38[0] = &unk_26C684900;
  v38[1] = v31;
  long long v39 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = sub_215DCBB74((uint64_t)v38);
  unint64_t v14 = &v37;
  if (v13 > 1647589489)
  {
    if (v13 == 1647719521)
    {
      uint64_t v15 = 0;
      goto LABEL_28;
    }
    if (v13 == 1647589490)
    {
      uint64_t v15 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    if (v13 == 1278226742)
    {
      uint64_t v15 = 3;
      goto LABEL_28;
    }
    if (v13 == 1647392359)
    {
      uint64_t v15 = 2;
LABEL_28:
      unint64_t v14 = (std::__shared_weak_count **)((char *)&v35 + 4 * v15);
    }
  }
  if ((char *)v14 - (char *)&v35 == 16
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v38[0] = &unk_26C684900;
  uint64_t v16 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = v32;
    unint64_t v36 = v31;
    long long v37 = v32;
    if (v32) {
      goto LABEL_34;
    }
LABEL_38:
    long long v35 = &unk_26C684900;
    goto LABEL_39;
  }
  unsigned int v17 = v32;
  unint64_t v36 = v31;
  long long v37 = v32;
  if (!v32) {
    goto LABEL_38;
  }
LABEL_34:
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v18 = v37;
  long long v35 = &unk_26C684900;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_39:
  v33[0] = &unk_26C684900;
  v33[1] = v31;
  char v34 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = sub_215DCB044((uint64_t)v33);
  unsigned int v20 = sub_215DCB310((uint64_t)v33);
  size_t v21 = sub_215DCB5DC((uint64_t)v33);
  size_t v22 = sub_215DCB8A8((uint64_t)v33);
  v33[0] = &unk_26C684900;
  unint64_t v23 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v19 | ((unint64_t)v20 << 32);
  LODWORD(v40[0]) = 3;
  HIDWORD(v40[0]) = v24;
  *(void *)(a1 + 48) = v40[0];
  *(_DWORD *)(a1 + 56) = v20;
  LODWORD(v40[0]) = 1;
  *(void *)((char *)v40 + 4) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  *(void *)(a1 + 60) = v40[0];
  *(_DWORD *)(a1 + 68) = v22 >> 1;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    uint64_t v25 = *(void *)(a2 + 8);
    if (v25) {
      goto LABEL_47;
    }
LABEL_55:
    uint64_t v29 = 0;
    goto LABEL_56;
  }
  uint64_t v25 = *(void *)(a2 + 8);
  if (!v25) {
    goto LABEL_55;
  }
LABEL_47:
  unint64_t v26 = *(std::__shared_weak_count **)(v25 + 8);
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      uint64_t v27 = *(uint64_t **)(a2 + 8);
      if (v27) {
        goto LABEL_50;
      }
LABEL_62:
      uint64_t v29 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_63;
      }
      goto LABEL_57;
    }
  }
  uint64_t v27 = *(uint64_t **)(a2 + 8);
  if (!v27) {
    goto LABEL_62;
  }
LABEL_50:
  uint64_t v29 = *v27;
  uint64_t v28 = (std::__shared_weak_count *)v27[1];
  if (!v28
    || (atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_56:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_63;
    }
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_63:
    if (!v29) {
      return a1;
    }
    goto LABEL_64;
  }
LABEL_57:
  if ((v29 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_64:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B6E684(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B6E698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B6E6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B6E6EC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B6E790(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v13 = &unk_26C684900;
          uint64_t v14 = v7;
          uint64_t v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            uint64_t v8 = v15;
          }
          v11[0] = &unk_26C684900;
          v11[1] = v7;
          uint64_t v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6D9B0(a1, (uint64_t)v11);
          v11[0] = &unk_26C684900;
          uint64_t v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v13 = &unk_26C684900;
          uint64_t v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_215B6E9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B6E9BC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a3 + 24);
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(v3, v4);
}

void sub_215B6EC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6EC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215B6ECA4(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v14[0] = &unk_26C684900;
    v14[1] = v9;
    uint64_t v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6EECC((uint64_t)v20, (uint64_t)v14);
    long long v10 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = v23;
    v14[0] = &unk_26C684900;
    uint64_t v7 = v15;
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(void *)(a2 + 8);
        int v4 = *(std::__shared_weak_count **)(a2 + 16);
        v18[0] = &unk_26C684900;
        v18[1] = v5;
        unsigned int v19 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B6EECC((uint64_t)v20, (uint64_t)v18);
        long long v6 = v22;
        *(_OWORD *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v6;
        *(void *)(a3 + 32) = v23;
        v18[0] = &unk_26C684900;
        uint64_t v7 = v19;
        if (!v19) {
          return;
        }
LABEL_18:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
LABEL_20:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_20;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v11 = *(std::__shared_weak_count **)(a2 + 16);
    v16[0] = &unk_26C684900;
    v16[1] = v12;
    unsigned int v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B6EECC((uint64_t)v20, (uint64_t)v16);
    long long v13 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v23;
    v16[0] = &unk_26C684900;
    uint64_t v7 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_215B6EE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6EEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6EEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6EECC(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26C684900;
  v35[1] = v8;
  unint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_215DCBB74((uint64_t)v35);
  long long v10 = (char *)v38;
  if (v9 > 1647589489)
  {
    if (v9 == 1647719521)
    {
      uint64_t v11 = 0;
      goto LABEL_17;
    }
    if (v9 == 1647589490)
    {
      uint64_t v11 = 1;
      goto LABEL_17;
    }
  }
  else
  {
    if (v9 == 1278226742)
    {
      uint64_t v11 = 3;
      goto LABEL_17;
    }
    if (v9 == 1647392359)
    {
      uint64_t v11 = 2;
LABEL_17:
      long long v10 = (char *)&v38[-2] + 4 * v11;
    }
  }
  if (v10 - (char *)&v37 == 16
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v35[0] = &unk_26C684900;
  uint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_23;
    }
LABEL_27:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_28;
  }
  long long v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_27;
  }
LABEL_23:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_28:
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26C684900;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_215DC9948((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26C684900;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_215DCB044((uint64_t)&v37);
  unsigned int v18 = sub_215DCB310((uint64_t)&v37);
  size_t v19 = sub_215DCB5DC((uint64_t)&v37);
  size_t v20 = sub_215DCB8A8((uint64_t)&v37) << 31;
  *(void *)&long long v37 = &unk_26C684900;
  long long v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26C684900;
  unint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 4;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B6F410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6F424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B6F438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B6F454(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DD10;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B6F4CC(uint64_t a1, uint64_t a2)
{
  v40[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67DD10;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = v9;
  uint64_t v32 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v38[0] = &unk_26C684900;
  v38[1] = v31;
  long long v39 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = sub_215DCBB74((uint64_t)v38);
  uint64_t v14 = &v37;
  if (v13 > 1647589489)
  {
    if (v13 == 1647719521)
    {
      uint64_t v15 = 0;
      goto LABEL_28;
    }
    if (v13 == 1647589490)
    {
      uint64_t v15 = 1;
      goto LABEL_28;
    }
  }
  else
  {
    if (v13 == 1278226742)
    {
      uint64_t v15 = 3;
      goto LABEL_28;
    }
    if (v13 == 1647392359)
    {
      uint64_t v15 = 2;
LABEL_28:
      uint64_t v14 = (std::__shared_weak_count **)((char *)&v35 + 4 * v15);
    }
  }
  if ((char *)v14 - (char *)&v35 == 16
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 113, (uint64_t)"Contains(pf::formats::U16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v38[0] = &unk_26C684900;
  uint64_t v16 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = v32;
    unint64_t v36 = v31;
    long long v37 = v32;
    if (v32) {
      goto LABEL_34;
    }
LABEL_38:
    long long v35 = &unk_26C684900;
    goto LABEL_39;
  }
  unsigned int v17 = v32;
  unint64_t v36 = v31;
  long long v37 = v32;
  if (!v32) {
    goto LABEL_38;
  }
LABEL_34:
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v18 = v37;
  long long v35 = &unk_26C684900;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_39:
  v33[0] = &unk_26C684900;
  v33[1] = v31;
  char v34 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = sub_215DCB044((uint64_t)v33);
  unsigned int v20 = sub_215DCB310((uint64_t)v33);
  size_t v21 = sub_215DCB5DC((uint64_t)v33);
  size_t v22 = sub_215DCB8A8((uint64_t)v33);
  v33[0] = &unk_26C684900;
  unint64_t v23 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v19 | ((unint64_t)v20 << 32);
  LODWORD(v40[0]) = 4;
  HIDWORD(v40[0]) = v24;
  *(void *)(a1 + 48) = v40[0];
  *(_DWORD *)(a1 + 56) = v20;
  LODWORD(v40[0]) = 1;
  *(void *)((char *)v40 + 4) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  *(void *)(a1 + 60) = v40[0];
  *(_DWORD *)(a1 + 68) = v22 >> 1;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    uint64_t v25 = *(void *)(a2 + 8);
    if (v25) {
      goto LABEL_47;
    }
LABEL_55:
    uint64_t v29 = 0;
    goto LABEL_56;
  }
  uint64_t v25 = *(void *)(a2 + 8);
  if (!v25) {
    goto LABEL_55;
  }
LABEL_47:
  unint64_t v26 = *(std::__shared_weak_count **)(v25 + 8);
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      uint64_t v27 = *(uint64_t **)(a2 + 8);
      if (v27) {
        goto LABEL_50;
      }
LABEL_62:
      uint64_t v29 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_63;
      }
      goto LABEL_57;
    }
  }
  uint64_t v27 = *(uint64_t **)(a2 + 8);
  if (!v27) {
    goto LABEL_62;
  }
LABEL_50:
  uint64_t v29 = *v27;
  uint64_t v28 = (std::__shared_weak_count *)v27[1];
  if (!v28
    || (atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_56:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_63;
    }
    goto LABEL_57;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_63:
    if (!v29) {
      return a1;
    }
    goto LABEL_64;
  }
LABEL_57:
  if ((v29 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_64:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B6FBA0(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B6FBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B6FBD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B6FC08(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B6FCAC(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          size_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          unsigned int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6EECC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B6FF30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B6FF4C(uint64_t a1, int a2, _DWORD *a3)
{
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(a3, v4);
}

void sub_215B701F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B70208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215B70234(int a1, uint64_t a2)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_21;
    }
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
    v11[0] = &unk_26C684900;
    v11[1] = v7;
    unint64_t v12 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B7042C(&v17, (uint64_t)v11);
    uint64_t v2 = v18;
    v11[0] = &unk_26C684900;
    uint64_t v5 = v12;
    if (v12) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return v2;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v4 = *(void *)(a2 + 8);
        uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
        v15[0] = &unk_26C684900;
        v15[1] = v4;
        unint64_t v16 = v3;
        if (v3) {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B7042C(&v17, (uint64_t)v15);
        uint64_t v2 = v18;
        v15[0] = &unk_26C684900;
        uint64_t v5 = v16;
        if (!v16) {
          return v2;
        }
LABEL_18:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return v2;
      }
LABEL_21:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_21;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v13[0] = &unk_26C684900;
    v13[1] = v9;
    unint64_t v14 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B7042C(&v17, (uint64_t)v13);
    uint64_t v2 = v18;
    v13[0] = &unk_26C684900;
    uint64_t v5 = v14;
    if (v14) {
      goto LABEL_18;
    }
  }
  return v2;
}

void sub_215B703F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B70404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B70418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7042C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_51;
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26C684900;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_215DCBB74((uint64_t)v33);
  uint64_t v10 = (char *)&v36 + 4;
  if (v9 <= 1380411456)
  {
    if (v9 == 843264104)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226536)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380411457:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1751410032:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1751411059:
        uint64_t v11 = 3;
LABEL_19:
        uint64_t v10 = (char *)v35 + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)v35 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v33[0] = &unk_26C684900;
  unint64_t v12 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v30 = &unk_26C684900;
    goto LABEL_30;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = &unk_26C684900;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26C684900;
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_215DC9948((uint64_t)&v27, 0);
  v35[0] = &unk_26C684900;
  v35[1] = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_215DCB044((uint64_t)v35);
  unsigned int v18 = sub_215DCB310((uint64_t)v35);
  size_t v19 = sub_215DCB5DC((uint64_t)v35);
  size_t v20 = sub_215DCB8A8((uint64_t)v35) << 31;
  v35[0] = &unk_26C684900;
  size_t v21 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v27 = &unk_26C684900;
  unint64_t v24 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *a1 = v16;
  a1[1] = v26;
  a1[2] = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v20) * HIDWORD(v26) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_51:
    abort();
  }
}

void sub_215B70908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B7091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B70930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_215B7094C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DDA0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B709C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67DDA0;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  int v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v37[0] = &unk_26C684900;
  v37[1] = v30;
  int v38 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = sub_215DCBB74((uint64_t)v37);
  unint64_t v14 = (char *)&v36 + 4;
  if (v13 <= 1380411456)
  {
    if (v13 == 843264104)
    {
      uint64_t v15 = 1;
      goto LABEL_30;
    }
    if (v13 == 1278226536)
    {
      uint64_t v15 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    switch(v13)
    {
      case 1380411457:
        uint64_t v15 = 2;
        goto LABEL_30;
      case 1751410032:
        uint64_t v15 = 4;
        goto LABEL_30;
      case 1751411059:
        uint64_t v15 = 3;
LABEL_30:
        unint64_t v14 = (char *)&v34 + 4 * v15;
        break;
    }
  }
  if (v14 - (char *)&v34 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v37[0] = &unk_26C684900;
  uint64_t v16 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = v31;
    long long v35 = v30;
    unint64_t v36 = v31;
    if (v31) {
      goto LABEL_36;
    }
LABEL_40:
    char v34 = &unk_26C684900;
    goto LABEL_41;
  }
  unsigned int v17 = v31;
  long long v35 = v30;
  unint64_t v36 = v31;
  if (!v31) {
    goto LABEL_40;
  }
LABEL_36:
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v18 = v36;
  char v34 = &unk_26C684900;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_41:
  v32[0] = &unk_26C684900;
  v32[1] = v30;
  uint64_t v33 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = sub_215DCB044((uint64_t)v32);
  unsigned int v20 = sub_215DCB310((uint64_t)v32);
  size_t v21 = sub_215DCB5DC((uint64_t)v32);
  size_t v22 = sub_215DCB8A8((uint64_t)v32);
  v32[0] = &unk_26C684900;
  unint64_t v23 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  *(void *)(a1 + 48) = v19 | ((unint64_t)v20 << 32);
  *(void *)(a1 + 56) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    uint64_t v24 = *(void *)(a2 + 8);
    if (v24) {
      goto LABEL_49;
    }
LABEL_57:
    uint64_t v28 = 0;
    goto LABEL_58;
  }
  uint64_t v24 = *(void *)(a2 + 8);
  if (!v24) {
    goto LABEL_57;
  }
LABEL_49:
  BOOL v25 = *(std::__shared_weak_count **)(v24 + 8);
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      unint64_t v26 = *(uint64_t **)(a2 + 8);
      if (v26) {
        goto LABEL_52;
      }
LABEL_64:
      uint64_t v28 = 0;
      if (!*(_DWORD *)(a1 + 48)) {
        goto LABEL_65;
      }
      goto LABEL_59;
    }
  }
  unint64_t v26 = *(uint64_t **)(a2 + 8);
  if (!v26) {
    goto LABEL_64;
  }
LABEL_52:
  uint64_t v28 = *v26;
  uint64_t v27 = (std::__shared_weak_count *)v26[1];
  if (!v27
    || (atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_58:
    if (!*(_DWORD *)(a1 + 48)) {
      goto LABEL_65;
    }
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (!*(_DWORD *)(a1 + 48))
  {
LABEL_65:
    if (!v28) {
      return a1;
    }
    goto LABEL_66;
  }
LABEL_59:
  if ((v28 == 0) == (*(_DWORD *)(a1 + 52) == 0)) {
    return a1;
  }
LABEL_66:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B71050(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B71064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215DCAD80(&a9);
  sub_215B674F0(v9);
  _Unwind_Resume(a1);
}

void sub_215B71080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_215DCAD80(&a18);
  sub_215DCAD80(&a9);
  sub_215B674F0(v18);
  _Unwind_Resume(a1);
}

void sub_215B710B8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  char v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B7115C(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26C684900;
          uint64_t v17 = v7;
          uint64_t v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B7042C(a1, (uint64_t)v14);
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26C684900;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B713C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B713DC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a3 + 24);
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(v3, v4);
}

void sub_215B71680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B71698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215B716C4(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v14[0] = &unk_26C684900;
    v14[1] = v9;
    uint64_t v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B718EC((uint64_t)v20, (uint64_t)v14);
    long long v10 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = v23;
    v14[0] = &unk_26C684900;
    uint64_t v7 = v15;
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(void *)(a2 + 8);
        int v4 = *(std::__shared_weak_count **)(a2 + 16);
        v18[0] = &unk_26C684900;
        v18[1] = v5;
        unsigned int v19 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B718EC((uint64_t)v20, (uint64_t)v18);
        long long v6 = v22;
        *(_OWORD *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v6;
        *(void *)(a3 + 32) = v23;
        v18[0] = &unk_26C684900;
        uint64_t v7 = v19;
        if (!v19) {
          return;
        }
LABEL_18:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
LABEL_20:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_20;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
    v16[0] = &unk_26C684900;
    v16[1] = v12;
    uint64_t v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B718EC((uint64_t)v20, (uint64_t)v16);
    long long v13 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v23;
    v16[0] = &unk_26C684900;
    uint64_t v7 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_215B718B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B718C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B718D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B718EC(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26C684900;
  v35[1] = v8;
  unint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_215DCBB74((uint64_t)v35);
  long long v10 = (char *)v38 + 4;
  if (v9 <= 1380411456)
  {
    if (v9 == 843264104)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226536)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380411457:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1751410032:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1751411059:
        uint64_t v11 = 3;
LABEL_19:
        long long v10 = (char *)&v38[-2] + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)&v37 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v35[0] = &unk_26C684900;
  uint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_30;
  }
  long long v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26C684900;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_215DC9948((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26C684900;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_215DCB044((uint64_t)&v37);
  unsigned int v18 = sub_215DCB310((uint64_t)&v37);
  size_t v19 = sub_215DCB5DC((uint64_t)&v37);
  size_t v20 = sub_215DCB8A8((uint64_t)&v37) << 31;
  *(void *)&long long v37 = &unk_26C684900;
  long long v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26C684900;
  uint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 2;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B71E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B71E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B71E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B71E8C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DE30;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B71F04(uint64_t a1, uint64_t a2)
{
  v40[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67DE30;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = v9;
  uint64_t v32 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v38[0] = &unk_26C684900;
  v38[1] = v31;
  long long v39 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = sub_215DCBB74((uint64_t)v38);
  unint64_t v14 = (char *)&v37 + 4;
  if (v13 <= 1380411456)
  {
    if (v13 == 843264104)
    {
      uint64_t v15 = 1;
      goto LABEL_30;
    }
    if (v13 == 1278226536)
    {
      uint64_t v15 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    switch(v13)
    {
      case 1380411457:
        uint64_t v15 = 2;
        goto LABEL_30;
      case 1751410032:
        uint64_t v15 = 4;
        goto LABEL_30;
      case 1751411059:
        uint64_t v15 = 3;
LABEL_30:
        unint64_t v14 = (char *)&v35 + 4 * v15;
        break;
    }
  }
  if (v14 - (char *)&v35 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v38[0] = &unk_26C684900;
  uint64_t v16 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = v32;
    unint64_t v36 = v31;
    long long v37 = v32;
    if (v32) {
      goto LABEL_36;
    }
LABEL_40:
    long long v35 = &unk_26C684900;
    goto LABEL_41;
  }
  unsigned int v17 = v32;
  unint64_t v36 = v31;
  long long v37 = v32;
  if (!v32) {
    goto LABEL_40;
  }
LABEL_36:
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v18 = v37;
  long long v35 = &unk_26C684900;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_41:
  v33[0] = &unk_26C684900;
  v33[1] = v31;
  char v34 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = sub_215DCB044((uint64_t)v33);
  unsigned int v20 = sub_215DCB310((uint64_t)v33);
  size_t v21 = sub_215DCB5DC((uint64_t)v33);
  size_t v22 = sub_215DCB8A8((uint64_t)v33);
  v33[0] = &unk_26C684900;
  unint64_t v23 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v19 | ((unint64_t)v20 << 32);
  LODWORD(v40[0]) = 2;
  HIDWORD(v40[0]) = v24;
  *(void *)(a1 + 48) = v40[0];
  *(_DWORD *)(a1 + 56) = v20;
  LODWORD(v40[0]) = 1;
  *(void *)((char *)v40 + 4) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  *(void *)(a1 + 60) = v40[0];
  *(_DWORD *)(a1 + 68) = v22 >> 1;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    uint64_t v25 = *(void *)(a2 + 8);
    if (v25) {
      goto LABEL_49;
    }
LABEL_57:
    uint64_t v29 = 0;
    goto LABEL_58;
  }
  uint64_t v25 = *(void *)(a2 + 8);
  if (!v25) {
    goto LABEL_57;
  }
LABEL_49:
  unint64_t v26 = *(std::__shared_weak_count **)(v25 + 8);
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      uint64_t v27 = *(uint64_t **)(a2 + 8);
      if (v27) {
        goto LABEL_52;
      }
LABEL_64:
      uint64_t v29 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_65;
      }
      goto LABEL_59;
    }
  }
  uint64_t v27 = *(uint64_t **)(a2 + 8);
  if (!v27) {
    goto LABEL_64;
  }
LABEL_52:
  uint64_t v29 = *v27;
  uint64_t v28 = (std::__shared_weak_count *)v27[1];
  if (!v28
    || (atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_58:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_65;
    }
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_65:
    if (!v29) {
      return a1;
    }
    goto LABEL_66;
  }
LABEL_59:
  if ((v29 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_66:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B725F0(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B72604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B72620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B72658(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B726FC(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          size_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          unsigned int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B718EC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B72980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B7299C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a3 + 24);
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(v3, v4);
}

void sub_215B72C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B72C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215B72C84(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v14[0] = &unk_26C684900;
    v14[1] = v9;
    unint64_t v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B72EAC((uint64_t)v20, (uint64_t)v14);
    long long v10 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = v23;
    v14[0] = &unk_26C684900;
    uint64_t v7 = v15;
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(void *)(a2 + 8);
        int v4 = *(std::__shared_weak_count **)(a2 + 16);
        v18[0] = &unk_26C684900;
        v18[1] = v5;
        unsigned int v19 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B72EAC((uint64_t)v20, (uint64_t)v18);
        long long v6 = v22;
        *(_OWORD *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v6;
        *(void *)(a3 + 32) = v23;
        v18[0] = &unk_26C684900;
        uint64_t v7 = v19;
        if (!v19) {
          return;
        }
LABEL_18:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
LABEL_20:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_20;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
    v16[0] = &unk_26C684900;
    v16[1] = v12;
    uint64_t v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B72EAC((uint64_t)v20, (uint64_t)v16);
    long long v13 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v23;
    v16[0] = &unk_26C684900;
    uint64_t v7 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_215B72E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B72E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B72E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B72EAC(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26C684900;
  v35[1] = v8;
  unint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_215DCBB74((uint64_t)v35);
  long long v10 = (char *)v38 + 4;
  if (v9 <= 1380411456)
  {
    if (v9 == 843264104)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226536)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380411457:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1751410032:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1751411059:
        uint64_t v11 = 3;
LABEL_19:
        long long v10 = (char *)&v38[-2] + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)&v37 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v35[0] = &unk_26C684900;
  uint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_30;
  }
  long long v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26C684900;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_215DC9948((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26C684900;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_215DCB044((uint64_t)&v37);
  unsigned int v18 = sub_215DCB310((uint64_t)&v37);
  size_t v19 = sub_215DCB5DC((uint64_t)&v37);
  size_t v20 = sub_215DCB8A8((uint64_t)&v37) << 31;
  *(void *)&long long v37 = &unk_26C684900;
  long long v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26C684900;
  unint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 4;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 1);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B73408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7341C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B73430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B7344C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DEC0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B734C4(uint64_t a1, uint64_t a2)
{
  v40[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67DEC0;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = v9;
  uint64_t v32 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v38[0] = &unk_26C684900;
  v38[1] = v31;
  long long v39 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = sub_215DCBB74((uint64_t)v38);
  unint64_t v14 = (char *)&v37 + 4;
  if (v13 <= 1380411456)
  {
    if (v13 == 843264104)
    {
      uint64_t v15 = 1;
      goto LABEL_30;
    }
    if (v13 == 1278226536)
    {
      uint64_t v15 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    switch(v13)
    {
      case 1380411457:
        uint64_t v15 = 2;
        goto LABEL_30;
      case 1751410032:
        uint64_t v15 = 4;
        goto LABEL_30;
      case 1751411059:
        uint64_t v15 = 3;
LABEL_30:
        unint64_t v14 = (char *)&v35 + 4 * v15;
        break;
    }
  }
  if (v14 - (char *)&v35 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 115, (uint64_t)"Contains(pf::formats::F16(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v38[0] = &unk_26C684900;
  uint64_t v16 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = v32;
    unint64_t v36 = v31;
    long long v37 = v32;
    if (v32) {
      goto LABEL_36;
    }
LABEL_40:
    long long v35 = &unk_26C684900;
    goto LABEL_41;
  }
  unsigned int v17 = v32;
  unint64_t v36 = v31;
  long long v37 = v32;
  if (!v32) {
    goto LABEL_40;
  }
LABEL_36:
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v18 = v37;
  long long v35 = &unk_26C684900;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_41:
  v33[0] = &unk_26C684900;
  v33[1] = v31;
  char v34 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = sub_215DCB044((uint64_t)v33);
  unsigned int v20 = sub_215DCB310((uint64_t)v33);
  size_t v21 = sub_215DCB5DC((uint64_t)v33);
  size_t v22 = sub_215DCB8A8((uint64_t)v33);
  v33[0] = &unk_26C684900;
  unint64_t v23 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v19 | ((unint64_t)v20 << 32);
  LODWORD(v40[0]) = 4;
  HIDWORD(v40[0]) = v24;
  *(void *)(a1 + 48) = v40[0];
  *(_DWORD *)(a1 + 56) = v20;
  LODWORD(v40[0]) = 1;
  *(void *)((char *)v40 + 4) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  *(void *)(a1 + 60) = v40[0];
  *(_DWORD *)(a1 + 68) = v22 >> 1;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = (v22 << 31) & 0xFFFFFFFF00000000 | (v21 >> 1);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    uint64_t v25 = *(void *)(a2 + 8);
    if (v25) {
      goto LABEL_49;
    }
LABEL_57:
    uint64_t v29 = 0;
    goto LABEL_58;
  }
  uint64_t v25 = *(void *)(a2 + 8);
  if (!v25) {
    goto LABEL_57;
  }
LABEL_49:
  unint64_t v26 = *(std::__shared_weak_count **)(v25 + 8);
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      uint64_t v27 = *(uint64_t **)(a2 + 8);
      if (v27) {
        goto LABEL_52;
      }
LABEL_64:
      uint64_t v29 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_65;
      }
      goto LABEL_59;
    }
  }
  uint64_t v27 = *(uint64_t **)(a2 + 8);
  if (!v27) {
    goto LABEL_64;
  }
LABEL_52:
  uint64_t v29 = *v27;
  uint64_t v28 = (std::__shared_weak_count *)v27[1];
  if (!v28
    || (atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_58:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_65;
    }
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_65:
    if (!v29) {
      return a1;
    }
    goto LABEL_66;
  }
LABEL_59:
  if ((v29 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_66:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B73BB0(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B73BC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B73BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B73C18(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B73CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          size_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          unsigned int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B72EAC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B73F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B73F5C(uint64_t a1, int a2, _DWORD *a3)
{
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(a3, v4);
}

void sub_215B74200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B74218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215B74244(int a1, uint64_t a2)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_21;
    }
    uint64_t v7 = *(void *)(a2 + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
    v11[0] = &unk_26C684900;
    v11[1] = v7;
    unint64_t v12 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B7443C(&v17, (uint64_t)v11);
    uint64_t v2 = v18;
    v11[0] = &unk_26C684900;
    uint64_t v5 = v12;
    if (v12) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return v2;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v4 = *(void *)(a2 + 8);
        uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
        v15[0] = &unk_26C684900;
        v15[1] = v4;
        unint64_t v16 = v3;
        if (v3) {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B7443C(&v17, (uint64_t)v15);
        uint64_t v2 = v18;
        v15[0] = &unk_26C684900;
        uint64_t v5 = v16;
        if (!v16) {
          return v2;
        }
LABEL_18:
        if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return v2;
      }
LABEL_21:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_21;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v13[0] = &unk_26C684900;
    v13[1] = v9;
    unint64_t v14 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B7443C(&v17, (uint64_t)v13);
    uint64_t v2 = v18;
    v13[0] = &unk_26C684900;
    uint64_t v5 = v14;
    if (v14) {
      goto LABEL_18;
    }
  }
  return v2;
}

void sub_215B74400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B74414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B74428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7443C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_51;
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v33[0] = &unk_26C684900;
  v33[1] = v8;
  char v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_215DCBB74((uint64_t)v33);
  uint64_t v10 = (char *)&v36 + 4;
  if (v9 <= 1380410944)
  {
    if (v9 == 843264102)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226534)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380410945:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1717855600:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1717856627:
        uint64_t v11 = 3;
LABEL_19:
        uint64_t v10 = (char *)v35 + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)v35 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v33[0] = &unk_26C684900;
  unint64_t v12 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v31 = *(void *)(a2 + 8);
    uint64_t v32 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v30 = &unk_26C684900;
    goto LABEL_30;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = *(void *)(a2 + 8);
  uint64_t v32 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v30 = &unk_26C684900;
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v27 = &unk_26C684900;
  uint64_t v28 = v15;
  uint64_t v29 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_215DC9948((uint64_t)&v27, 0);
  v35[0] = &unk_26C684900;
  v35[1] = v28;
  unint64_t v36 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_215DCB044((uint64_t)v35);
  unsigned int v18 = sub_215DCB310((uint64_t)v35);
  size_t v19 = sub_215DCB5DC((uint64_t)v35);
  size_t v20 = sub_215DCB8A8((uint64_t)v35) << 30;
  v35[0] = &unk_26C684900;
  size_t v21 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v27 = &unk_26C684900;
  unint64_t v24 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *a1 = v16;
  a1[1] = v26;
  a1[2] = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  if (HIDWORD(v20) * HIDWORD(v26) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
LABEL_51:
    abort();
  }
}

void sub_215B74918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B7492C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B74940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_215B7495C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DF50;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B749D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C67DF50;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  int v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v37[0] = &unk_26C684900;
  v37[1] = v30;
  int v38 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = sub_215DCBB74((uint64_t)v37);
  unint64_t v14 = (char *)&v36 + 4;
  if (v13 <= 1380410944)
  {
    if (v13 == 843264102)
    {
      uint64_t v15 = 1;
      goto LABEL_30;
    }
    if (v13 == 1278226534)
    {
      uint64_t v15 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    switch(v13)
    {
      case 1380410945:
        uint64_t v15 = 2;
        goto LABEL_30;
      case 1717855600:
        uint64_t v15 = 4;
        goto LABEL_30;
      case 1717856627:
        uint64_t v15 = 3;
LABEL_30:
        unint64_t v14 = (char *)&v34 + 4 * v15;
        break;
    }
  }
  if (v14 - (char *)&v34 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v37[0] = &unk_26C684900;
  uint64_t v16 = v38;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = v31;
    long long v35 = v30;
    unint64_t v36 = v31;
    if (v31) {
      goto LABEL_36;
    }
LABEL_40:
    char v34 = &unk_26C684900;
    goto LABEL_41;
  }
  unsigned int v17 = v31;
  long long v35 = v30;
  unint64_t v36 = v31;
  if (!v31) {
    goto LABEL_40;
  }
LABEL_36:
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v18 = v36;
  char v34 = &unk_26C684900;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_41:
  v32[0] = &unk_26C684900;
  v32[1] = v30;
  uint64_t v33 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = sub_215DCB044((uint64_t)v32);
  unsigned int v20 = sub_215DCB310((uint64_t)v32);
  size_t v21 = sub_215DCB5DC((uint64_t)v32);
  size_t v22 = sub_215DCB8A8((uint64_t)v32);
  v32[0] = &unk_26C684900;
  unint64_t v23 = v33;
  if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  *(void *)(a1 + 48) = v19 | ((unint64_t)v20 << 32);
  *(void *)(a1 + 56) = (v22 << 30) & 0xFFFFFFFF00000000 | (v21 >> 2);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    uint64_t v24 = *(void *)(a2 + 8);
    if (v24) {
      goto LABEL_49;
    }
LABEL_57:
    uint64_t v28 = 0;
    goto LABEL_58;
  }
  uint64_t v24 = *(void *)(a2 + 8);
  if (!v24) {
    goto LABEL_57;
  }
LABEL_49:
  BOOL v25 = *(std::__shared_weak_count **)(v24 + 8);
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      unint64_t v26 = *(uint64_t **)(a2 + 8);
      if (v26) {
        goto LABEL_52;
      }
LABEL_64:
      uint64_t v28 = 0;
      if (!*(_DWORD *)(a1 + 48)) {
        goto LABEL_65;
      }
      goto LABEL_59;
    }
  }
  unint64_t v26 = *(uint64_t **)(a2 + 8);
  if (!v26) {
    goto LABEL_64;
  }
LABEL_52:
  uint64_t v28 = *v26;
  uint64_t v27 = (std::__shared_weak_count *)v26[1];
  if (!v27
    || (atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_58:
    if (!*(_DWORD *)(a1 + 48)) {
      goto LABEL_65;
    }
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (!*(_DWORD *)(a1 + 48))
  {
LABEL_65:
    if (!v28) {
      return a1;
    }
    goto LABEL_66;
  }
LABEL_59:
  if ((v28 == 0) == (*(_DWORD *)(a1 + 52) == 0)) {
    return a1;
  }
LABEL_66:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B75060(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B75074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215DCAD80(&a9);
  sub_215B674F0(v9);
  _Unwind_Resume(a1);
}

void sub_215B75090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  sub_215DCAD80(&a18);
  sub_215DCAD80(&a9);
  sub_215B674F0(v18);
  _Unwind_Resume(a1);
}

void sub_215B750C8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  char v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B7516C(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  char v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26C684900;
          uint64_t v17 = v7;
          uint64_t v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          uint64_t v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B7443C(a1, (uint64_t)v14);
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26C684900;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B753D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B753EC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a3 + 24);
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(v3, v4);
}

void sub_215B75690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B756A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215B756D4(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v14[0] = &unk_26C684900;
    v14[1] = v9;
    uint64_t v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B758FC((uint64_t)v20, (uint64_t)v14);
    long long v10 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = v23;
    v14[0] = &unk_26C684900;
    uint64_t v7 = v15;
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(void *)(a2 + 8);
        int v4 = *(std::__shared_weak_count **)(a2 + 16);
        v18[0] = &unk_26C684900;
        v18[1] = v5;
        unsigned int v19 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B758FC((uint64_t)v20, (uint64_t)v18);
        long long v6 = v22;
        *(_OWORD *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v6;
        *(void *)(a3 + 32) = v23;
        v18[0] = &unk_26C684900;
        uint64_t v7 = v19;
        if (!v19) {
          return;
        }
LABEL_18:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
LABEL_20:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_20;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
    v16[0] = &unk_26C684900;
    v16[1] = v12;
    uint64_t v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B758FC((uint64_t)v20, (uint64_t)v16);
    long long v13 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v23;
    v16[0] = &unk_26C684900;
    uint64_t v7 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_215B758C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B758D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B758E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B758FC(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26C684900;
  v35[1] = v8;
  unint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_215DCBB74((uint64_t)v35);
  long long v10 = (char *)v38 + 4;
  if (v9 <= 1380410944)
  {
    if (v9 == 843264102)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226534)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380410945:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1717855600:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1717856627:
        uint64_t v11 = 3;
LABEL_19:
        long long v10 = (char *)&v38[-2] + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)&v37 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v35[0] = &unk_26C684900;
  uint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_30;
  }
  long long v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26C684900;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_215DC9948((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26C684900;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_215DCB044((uint64_t)&v37);
  unsigned int v18 = sub_215DCB310((uint64_t)&v37);
  size_t v19 = sub_215DCB5DC((uint64_t)&v37);
  size_t v20 = sub_215DCB8A8((uint64_t)&v37) << 30;
  *(void *)&long long v37 = &unk_26C684900;
  long long v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26C684900;
  uint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 2;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B75E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B75E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B75E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B75E9C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DFE0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B75F14(uint64_t a1, uint64_t a2)
{
  v40[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67DFE0;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = v9;
  uint64_t v32 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v38[0] = &unk_26C684900;
  v38[1] = v31;
  long long v39 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = sub_215DCBB74((uint64_t)v38);
  unint64_t v14 = (char *)&v37 + 4;
  if (v13 <= 1380410944)
  {
    if (v13 == 843264102)
    {
      uint64_t v15 = 1;
      goto LABEL_30;
    }
    if (v13 == 1278226534)
    {
      uint64_t v15 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    switch(v13)
    {
      case 1380410945:
        uint64_t v15 = 2;
        goto LABEL_30;
      case 1717855600:
        uint64_t v15 = 4;
        goto LABEL_30;
      case 1717856627:
        uint64_t v15 = 3;
LABEL_30:
        unint64_t v14 = (char *)&v35 + 4 * v15;
        break;
    }
  }
  if (v14 - (char *)&v35 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v38[0] = &unk_26C684900;
  uint64_t v16 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = v32;
    unint64_t v36 = v31;
    long long v37 = v32;
    if (v32) {
      goto LABEL_36;
    }
LABEL_40:
    long long v35 = &unk_26C684900;
    goto LABEL_41;
  }
  unsigned int v17 = v32;
  unint64_t v36 = v31;
  long long v37 = v32;
  if (!v32) {
    goto LABEL_40;
  }
LABEL_36:
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v18 = v37;
  long long v35 = &unk_26C684900;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_41:
  v33[0] = &unk_26C684900;
  v33[1] = v31;
  char v34 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = sub_215DCB044((uint64_t)v33);
  unsigned int v20 = sub_215DCB310((uint64_t)v33);
  size_t v21 = sub_215DCB5DC((uint64_t)v33);
  size_t v22 = sub_215DCB8A8((uint64_t)v33);
  v33[0] = &unk_26C684900;
  unint64_t v23 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v19 | ((unint64_t)v20 << 32);
  LODWORD(v40[0]) = 2;
  HIDWORD(v40[0]) = v24;
  *(void *)(a1 + 48) = v40[0];
  *(_DWORD *)(a1 + 56) = v20;
  LODWORD(v40[0]) = 1;
  *(void *)((char *)v40 + 4) = (v22 << 30) & 0xFFFFFFFF00000000 | (v21 >> 2);
  *(void *)(a1 + 60) = v40[0];
  *(_DWORD *)(a1 + 68) = v22 >> 2;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = (v22 << 30) & 0xFFFFFFFF00000000 | (v21 >> 2);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    uint64_t v25 = *(void *)(a2 + 8);
    if (v25) {
      goto LABEL_49;
    }
LABEL_57:
    uint64_t v29 = 0;
    goto LABEL_58;
  }
  uint64_t v25 = *(void *)(a2 + 8);
  if (!v25) {
    goto LABEL_57;
  }
LABEL_49:
  unint64_t v26 = *(std::__shared_weak_count **)(v25 + 8);
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      uint64_t v27 = *(uint64_t **)(a2 + 8);
      if (v27) {
        goto LABEL_52;
      }
LABEL_64:
      uint64_t v29 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_65;
      }
      goto LABEL_59;
    }
  }
  uint64_t v27 = *(uint64_t **)(a2 + 8);
  if (!v27) {
    goto LABEL_64;
  }
LABEL_52:
  uint64_t v29 = *v27;
  uint64_t v28 = (std::__shared_weak_count *)v27[1];
  if (!v28
    || (atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_58:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_65;
    }
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_65:
    if (!v29) {
      return a1;
    }
    goto LABEL_66;
  }
LABEL_59:
  if ((v29 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_66:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B76600(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B76614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B76630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B76668(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B7670C(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          size_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          unsigned int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B758FC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B76990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B769AC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = (_DWORD *)(a3 + 24);
  if ((a2 - 1) > 0x25) {
    int v4 = 0;
  }
  else {
    int v4 = dword_215EDDF04[a2 - 1] | *(_DWORD *)&a8_1[4 * a2 - 4];
  }
  strcpy((char *)operator new(0x78uLL), "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp:47");
  sub_215DCA324(v3, v4);
}

void sub_215B76C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B76C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_215B76C94(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1 == 2)
  {
    if (*(_DWORD *)(a2 + 24) != 2) {
      goto LABEL_20;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
    v14[0] = &unk_26C684900;
    v14[1] = v9;
    unint64_t v15 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B76EBC((uint64_t)v20, (uint64_t)v14);
    long long v10 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v10;
    *(void *)(a3 + 32) = v23;
    v14[0] = &unk_26C684900;
    uint64_t v7 = v15;
    if (v15) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a1 != 1)
    {
      if (a1) {
        return;
      }
      if (!*(_DWORD *)(a2 + 24))
      {
        uint64_t v5 = *(void *)(a2 + 8);
        int v4 = *(std::__shared_weak_count **)(a2 + 16);
        v18[0] = &unk_26C684900;
        v18[1] = v5;
        unsigned int v19 = v4;
        if (v4) {
          atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_215B76EBC((uint64_t)v20, (uint64_t)v18);
        long long v6 = v22;
        *(_OWORD *)a3 = v21;
        *(_OWORD *)(a3 + 16) = v6;
        *(void *)(a3 + 32) = v23;
        v18[0] = &unk_26C684900;
        uint64_t v7 = v19;
        if (!v19) {
          return;
        }
LABEL_18:
        if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
LABEL_20:
      sub_215742D4C();
    }
    if (*(_DWORD *)(a2 + 24) != 1) {
      goto LABEL_20;
    }
    uint64_t v12 = *(void *)(a2 + 8);
    BOOL v11 = *(std::__shared_weak_count **)(a2 + 16);
    v16[0] = &unk_26C684900;
    v16[1] = v12;
    uint64_t v17 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_215B76EBC((uint64_t)v20, (uint64_t)v16);
    long long v13 = v22;
    *(_OWORD *)a3 = v21;
    *(_OWORD *)(a3 + 16) = v13;
    *(void *)(a3 + 32) = v23;
    v16[0] = &unk_26C684900;
    uint64_t v7 = v17;
    if (v17) {
      goto LABEL_18;
    }
  }
}

void sub_215B76E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B76E94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B76EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B76EBC(uint64_t a1, uint64_t a2)
{
  v38[1] = *MEMORY[0x263EF8340];
  int v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6) {
        goto LABEL_6;
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 166, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 16);
  v35[0] = &unk_26C684900;
  v35[1] = v8;
  unint64_t v36 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = sub_215DCBB74((uint64_t)v35);
  long long v10 = (char *)v38 + 4;
  if (v9 <= 1380410944)
  {
    if (v9 == 843264102)
    {
      uint64_t v11 = 1;
      goto LABEL_19;
    }
    if (v9 == 1278226534)
    {
      uint64_t v11 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    switch(v9)
    {
      case 1380410945:
        uint64_t v11 = 2;
        goto LABEL_19;
      case 1717855600:
        uint64_t v11 = 4;
        goto LABEL_19;
      case 1717856627:
        uint64_t v11 = 3;
LABEL_19:
        long long v10 = (char *)&v38[-2] + 4 * v11;
        break;
    }
  }
  if (v10 - (char *)&v37 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v35[0] = &unk_26C684900;
  uint64_t v12 = v36;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v13 = *(std::__shared_weak_count **)(a2 + 16);
    uint64_t v33 = *(void *)(a2 + 8);
    char v34 = v13;
    if (v13) {
      goto LABEL_25;
    }
LABEL_29:
    uint64_t v32 = &unk_26C684900;
    goto LABEL_30;
  }
  long long v13 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v33 = *(void *)(a2 + 8);
  char v34 = v13;
  if (!v13) {
    goto LABEL_29;
  }
LABEL_25:
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v32 = &unk_26C684900;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_30:
  uint64_t v15 = *(void *)(a2 + 8);
  unint64_t v14 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v29 = &unk_26C684900;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = sub_215DC9948((uint64_t)&v29, 0);
  *(void *)&long long v37 = &unk_26C684900;
  *((void *)&v37 + 1) = v30;
  v38[0] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v17 = sub_215DCB044((uint64_t)&v37);
  unsigned int v18 = sub_215DCB310((uint64_t)&v37);
  size_t v19 = sub_215DCB5DC((uint64_t)&v37);
  size_t v20 = sub_215DCB8A8((uint64_t)&v37) << 30;
  *(void *)&long long v37 = &unk_26C684900;
  long long v21 = (std::__shared_weak_count *)v38[0];
  if (v38[0] && !atomic_fetch_add((atomic_ullong *volatile)(v38[0] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = v17;
  unint64_t v23 = v17 | ((unint64_t)v18 << 32);
  uint64_t v29 = &unk_26C684900;
  unint64_t v24 = v31;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (v18) {
    BOOL v25 = v22 == 0;
  }
  else {
    BOOL v25 = 1;
  }
  if (v25) {
    unint64_t v26 = 0;
  }
  else {
    unint64_t v26 = v23;
  }
  *(void *)((char *)&v37 + 4) = v26;
  LODWORD(v37) = 4;
  uint64_t v27 = v37;
  LODWORD(v37) = 1;
  *(void *)((char *)&v37 + 4) = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  uint64_t v28 = v37;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 16) = HIDWORD(v26);
  *(void *)(a1 + 20) = v28;
  *(_DWORD *)(a1 + 28) = HIDWORD(v20);
  *(void *)(a1 + 32) = v26;
  *(void *)(a1 + 40) = v20 & 0xFFFFFFFF00000000 | (v19 >> 2);
  if (HIDWORD(v26) * HIDWORD(v20) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B77418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7742C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B77440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B7745C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67E070;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t sub_215B774D4(uint64_t a1, uint64_t a2)
{
  v40[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E070;
  char v4 = *(uint64_t **)(a2 + 8);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6) {
        goto LABEL_5;
      }
    }
    else
    {
      char v4 = *(uint64_t **)(a2 + 8);
      if (v6)
      {
LABEL_5:
        int v7 = *((_DWORD *)v4 + 4);
        goto LABEL_8;
      }
    }
  }
  int v7 = 0;
LABEL_8:
  *(_DWORD *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(void *)(a1 + 24) = v4;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v31 = v9;
  uint64_t v32 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v9)
  {
    uint64_t v12 = *v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[1];
    if (v11
      && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v12) {
        goto LABEL_17;
      }
    }
    else if (v12)
    {
      goto LABEL_17;
    }
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 156, (uint64_t)"ref.IsValid()", 13, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
LABEL_17:
  v38[0] = &unk_26C684900;
  v38[1] = v31;
  long long v39 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = sub_215DCBB74((uint64_t)v38);
  unint64_t v14 = (char *)&v37 + 4;
  if (v13 <= 1380410944)
  {
    if (v13 == 843264102)
    {
      uint64_t v15 = 1;
      goto LABEL_30;
    }
    if (v13 == 1278226534)
    {
      uint64_t v15 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    switch(v13)
    {
      case 1380410945:
        uint64_t v15 = 2;
        goto LABEL_30;
      case 1717855600:
        uint64_t v15 = 4;
        goto LABEL_30;
      case 1717856627:
        uint64_t v15 = 3;
LABEL_30:
        unint64_t v14 = (char *)&v35 + 4 * v15;
        break;
    }
  }
  if (v14 - (char *)&v35 == 20
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 117, (uint64_t)"Contains(pf::formats::F32(), ref.Format())", 42, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  v38[0] = &unk_26C684900;
  uint64_t v16 = v39;
  if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    unsigned int v17 = v32;
    unint64_t v36 = v31;
    long long v37 = v32;
    if (v32) {
      goto LABEL_36;
    }
LABEL_40:
    long long v35 = &unk_26C684900;
    goto LABEL_41;
  }
  unsigned int v17 = v32;
  unint64_t v36 = v31;
  long long v37 = v32;
  if (!v32) {
    goto LABEL_40;
  }
LABEL_36:
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  unsigned int v18 = v37;
  long long v35 = &unk_26C684900;
  if (v37 && !atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_41:
  v33[0] = &unk_26C684900;
  v33[1] = v31;
  char v34 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v19 = sub_215DCB044((uint64_t)v33);
  unsigned int v20 = sub_215DCB310((uint64_t)v33);
  size_t v21 = sub_215DCB5DC((uint64_t)v33);
  size_t v22 = sub_215DCB8A8((uint64_t)v33);
  v33[0] = &unk_26C684900;
  unint64_t v23 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = v19 | ((unint64_t)v20 << 32);
  LODWORD(v40[0]) = 4;
  HIDWORD(v40[0]) = v24;
  *(void *)(a1 + 48) = v40[0];
  *(_DWORD *)(a1 + 56) = v20;
  LODWORD(v40[0]) = 1;
  *(void *)((char *)v40 + 4) = (v22 << 30) & 0xFFFFFFFF00000000 | (v21 >> 2);
  *(void *)(a1 + 60) = v40[0];
  *(_DWORD *)(a1 + 68) = v22 >> 2;
  *(void *)(a1 + 72) = v24;
  *(void *)(a1 + 80) = (v22 << 30) & 0xFFFFFFFF00000000 | (v21 >> 2);
  if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
    uint64_t v25 = *(void *)(a2 + 8);
    if (v25) {
      goto LABEL_49;
    }
LABEL_57:
    uint64_t v29 = 0;
    goto LABEL_58;
  }
  uint64_t v25 = *(void *)(a2 + 8);
  if (!v25) {
    goto LABEL_57;
  }
LABEL_49:
  unint64_t v26 = *(std::__shared_weak_count **)(v25 + 8);
  if (v26)
  {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      uint64_t v27 = *(uint64_t **)(a2 + 8);
      if (v27) {
        goto LABEL_52;
      }
LABEL_64:
      uint64_t v29 = 0;
      if (!*(_DWORD *)(a1 + 72)) {
        goto LABEL_65;
      }
      goto LABEL_59;
    }
  }
  uint64_t v27 = *(uint64_t **)(a2 + 8);
  if (!v27) {
    goto LABEL_64;
  }
LABEL_52:
  uint64_t v29 = *v27;
  uint64_t v28 = (std::__shared_weak_count *)v27[1];
  if (!v28
    || (atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
LABEL_58:
    if (!*(_DWORD *)(a1 + 72)) {
      goto LABEL_65;
    }
    goto LABEL_59;
  }
  ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
  std::__shared_weak_count::__release_weak(v28);
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_65:
    if (!v29) {
      return a1;
    }
    goto LABEL_66;
  }
LABEL_59:
  if ((v29 == 0) == (*(_DWORD *)(a1 + 76) == 0)) {
    return a1;
  }
LABEL_66:
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 105, (uint64_t)"(buffer == nullptr) == extent.IsEmpty()", 39, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  return a1;
}

void sub_215B77BC0(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B77BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B77BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va1);
  sub_215DCAD80((uint64_t *)va);
  sub_215B674F0(v2);
  _Unwind_Resume(a1);
}

void sub_215B77C28(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 40) >= 3u) {
    sub_215742D4C();
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_215B77CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          size_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          unsigned int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B76EBC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B77F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B77F6C(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26C67E100;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x20) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = v4;
  }
  *(void *)&long long v17 = *(void *)a2;
  uint64_t v7 = v17;
  *((void *)&v17 + 1) = v5 | (v6 << 32);
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  *(void *)a1 = &unk_26C67D9B0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B66B70(0, 1, &v17);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  if (v7 && HIDWORD(v7))
  {
    *(void *)(a1 + 48) = sub_215B66E58(0, v8);
    *(void *)(a1 + 56) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = v17;
  }
  long long v18 = v15;
  uint64_t v19 = v16;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  uint64_t v10 = *(uint64_t **)(a1 + 24);
  if (v10)
  {
    uint64_t v12 = *v10;
    BOOL v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12) {
          goto LABEL_23;
        }
        goto LABEL_16;
      }
    }
    if (v12)
    {
LABEL_16:
      unsigned int v13 = *(_DWORD *)(a1 + 40);
      if (v13 < 2)
      {
        sub_215DC9A68(v21, v8);
LABEL_22:
        sub_215B67C14(v20, a1);
        v22[0] = (size_t)&v18;
        v22[1] = (size_t)v20;
        sub_21584F0C8(v22);
        sub_215DC9DEC(v21);
        goto LABEL_23;
      }
      if (v13 == 2)
      {
        sub_215DC9BAC(v21, v8);
        goto LABEL_22;
      }
LABEL_24:
      sub_215742D4C();
    }
  }
LABEL_23:
  *(void *)a1 = &unk_26C67E100;
  return a1;
}

void sub_215B78174(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B78188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215DC9DEC((void *)(v14 - 88));
  *(void *)uint64_t v11 = v13;
  uint64_t v16 = *(unsigned int *)(v11 + 40);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v16])(va, v12);
  }
  *(_DWORD *)(v11 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_215B781D8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67D9B0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B78250(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6754C((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E100;
  return a1;
}

void sub_215B7832C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B78340(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26C684900;
          uint64_t v17 = v7;
          long long v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          long long v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B67050(a1, (uint64_t)v14);
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26C684900;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B785A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B785C0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v18 = &unk_26C684900;
          uint64_t v19 = v7;
          long long v20 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v19;
            uint64_t v8 = v20;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          long long v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B67050(&v16, (uint64_t)v14);
          *(void *)a1 = v16;
          *(_OWORD *)(a1 + 8) = v17;
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v18 = &unk_26C684900;
          uint64_t v10 = v20;
          if (v20)
          {
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B78834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B78850()
{
  return 1;
}

uint64_t (***sub_215B78858())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B788D4(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B785C0((uint64_t)v5, a1);
      sub_215B785C0((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B7899C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x2166C4D20](v8, 0x10A3C40EE3858B8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B789C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B789DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B789F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

size_t *sub_215B78A54(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67EC40, 0);
  if (!v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v23, lpsrc, 1);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(void *)(v23[0] + 16);
    long long v15 = *(_OWORD *)v23[0];
    v16[0] = v10;
    v23[0] = 0;
    MEMORY[0x2166C4D20](v9, 0xC400A2AC0F1, v11);
    sub_215B78340(v23, a1);
    *(void *)&long long v21 = &v15;
    *((void *)&v21 + 1) = v23;
    return sub_21584F0C8((size_t *)&v21);
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_215742D4C();
    }
LABEL_5:
    sub_215DC9474(v23, v7);
    goto LABEL_8;
  }
  sub_215DC95B8(v23, v7);
LABEL_8:
  sub_215B785C0((uint64_t)&v21, v6);
  long long v19 = v21;
  uint64_t v20 = v22;
  sub_215B77F6C((uint64_t)&v15, (uint64_t)&v21 + 8, &v19);
  size_t result = sub_215DC97F8(v23);
  uint64_t v13 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v14 = *(unsigned int *)(a1 + 40);
  if (v14 == -1)
  {
    if (v13 == -1) {
      goto LABEL_13;
    }
  }
  else if (v13 == -1)
  {
    size_t result = (size_t *)((uint64_t (*)(size_t *, uint64_t))off_26C67EED8[v14])(result, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  v23[0] = a1 + 16;
  size_t result = (size_t *)((uint64_t (*)(size_t *))off_26C67EF08[v13])(result);
LABEL_13:
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26C67D9B0;
  if (v17 != -1) {
    return (size_t *)((uint64_t (*)(uint64_t *, void *))off_26C67EED8[v17])(v23, v16);
  }
  return result;
}

void sub_215B78C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[a14])(v15 - 80, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B78CDC(uint64_t a1)
{
  sub_215B78340(v2, a1);
  return v2[0];
}

void sub_215B78D08(uint64_t a1, int a2)
{
  if (a2 != 1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B78340((uint64_t *)&v3, a1);
  operator new();
}

void sub_215B78DB4(uint64_t a1, int a2)
{
  if (a2 != 1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B785C0((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B78E60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F720, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F720))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F728, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F728))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F730, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F730))
    {
LABEL_13:
      if (byte_26788FA97 < 0)
      {
        sub_215738B0C(&xmmword_26788FA68, (void *)qword_26788FA80, unk_26788FA88);
      }
      else
      {
        xmmword_26788FA68 = *(_OWORD *)&qword_26788FA80;
        unk_26788FA78 = unk_26788FA90;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FA68, &dword_21572C000);
      __cxa_guard_release(&qword_26788F728);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F738, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F738))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray8u>]", &qword_26788FA98);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FA98, &dword_21572C000);
      __cxa_guard_release(&qword_26788F738);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F740, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F740))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F748, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F748))
      {
        if (byte_26788FAB0[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FAB0, *(unint64_t *)&byte_26788FAB0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FAB0;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FAC8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FAC8, &dword_21572C000);
        __cxa_guard_release(&qword_26788F748);
      }
      if (byte_26788FADF < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FAC8, *((unint64_t *)&xmmword_26788FAC8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788FAC8;
        uint64_t v12 = unk_26788FAD8;
      }
      sub_21584EB54(v11, (std::string *)&qword_26788FA80);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FA80, &dword_21572C000);
      __cxa_guard_release(&qword_26788F730);
      goto LABEL_13;
    }
    if (byte_26788FAAF >= 0) {
      size_t v1 = byte_26788FAAF;
    }
    else {
      size_t v1 = unk_26788FAA0;
    }
    if (byte_26788FAAF >= 0) {
      uint64_t v2 = &qword_26788FA98;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FA98;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FAB0[8] = v1;
      *(void *)&byte_26788FAB0[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FAB0 = v8;
    }
    else
    {
      int v8 = byte_26788FAB0;
      byte_26788FAB0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FAB0, &dword_21572C000);
    __cxa_guard_release(&qword_26788F740);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FA7F < 0)
  {
    sub_215738B0C(&xmmword_26788FA50, (void *)xmmword_26788FA68, *((unint64_t *)&xmmword_26788FA68 + 1));
  }
  else
  {
    xmmword_26788FA50 = xmmword_26788FA68;
    unk_26788FA60 = unk_26788FA78;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FA50, &dword_21572C000);
  __cxa_guard_release(&qword_26788F720);
LABEL_2:
  if (byte_26788FA67 >= 0) {
    return &xmmword_26788FA50;
  }
  else {
    return (long long *)xmmword_26788FA50;
  }
}

void sub_215B792E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F730);
  __cxa_guard_abort(&qword_26788F728);
  __cxa_guard_abort(&qword_26788F720);
  _Unwind_Resume(a1);
}

void sub_215B79384(_Unwind_Exception *a1)
{
}

void sub_215B7939C()
{
}

void sub_215B793E4(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B79584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B795B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B795CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B79600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B79614()
{
  return 65792;
}

void *sub_215B79620@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B79684(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26C67E190;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v4;
  }
  *(void *)&long long v17 = *(void *)a2;
  uint64_t v7 = v17;
  *((void *)&v17 + 1) = v5 | (v6 << 32);
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  *(void *)a1 = &unk_26C67DBF0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B6C040(0, 2, &v17);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  if (v7 && HIDWORD(v7))
  {
    *(void *)(a1 + 48) = sub_215B6C328(0, v8);
    *(void *)(a1 + 56) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = v17;
  }
  long long v18 = v15;
  uint64_t v19 = v16;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  uint64_t v10 = *(uint64_t **)(a1 + 24);
  if (v10)
  {
    uint64_t v12 = *v10;
    uint64_t v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12) {
          goto LABEL_23;
        }
        goto LABEL_16;
      }
    }
    if (v12)
    {
LABEL_16:
      unsigned int v13 = *(_DWORD *)(a1 + 40);
      if (v13 < 2)
      {
        sub_215DC9A68(v21, v8);
LABEL_22:
        sub_215B6D220(v20, a1);
        sub_21584FC70((uint64_t *)&v18, (uint64_t)v20);
        sub_215DC9DEC(v21);
        goto LABEL_23;
      }
      if (v13 == 2)
      {
        sub_215DC9BAC(v21, v8);
        goto LABEL_22;
      }
LABEL_24:
      sub_215742D4C();
    }
  }
LABEL_23:
  *(void *)a1 = &unk_26C67E190;
  return a1;
}

void sub_215B79884(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B79898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215DC9DEC((void *)(v14 - 72));
  *(void *)uint64_t v11 = v13;
  uint64_t v16 = *(unsigned int *)(v11 + 40);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v16])(va, v12);
  }
  *(_DWORD *)(v11 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_215B798E8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DBF0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B79960(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6CAA0((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E190;
  return a1;
}

void sub_215B79A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B79A50(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26C684900;
          uint64_t v17 = v7;
          long long v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          long long v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6C520(a1, (uint64_t)v14);
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26C684900;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B79CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B79CD0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v18 = &unk_26C684900;
          uint64_t v19 = v7;
          uint64_t v20 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v19;
            uint64_t v8 = v20;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          long long v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6C520(&v16, (uint64_t)v14);
          *(void *)a1 = v16;
          *(_OWORD *)(a1 + 8) = v17;
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v18 = &unk_26C684900;
          uint64_t v10 = v20;
          if (v20)
          {
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B79F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B79F60()
{
  return 2;
}

uint64_t (***sub_215B79F68())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B79FE4(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B79CD0((uint64_t)v5, a1);
      sub_215B79CD0((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B7A0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x2166C4D20](v8, 0x10A3C40EE3858B8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7A0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7A0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B7A100@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

uint64_t *sub_215B7A164(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67EC58, 0);
  if (!v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v23, lpsrc, 2);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(void *)(v23[0] + 16);
    long long v15 = *(_OWORD *)v23[0];
    v16[0] = v10;
    v23[0] = 0;
    MEMORY[0x2166C4D20](v9, 0xC400A2AC0F1, v11);
    sub_215B79A50(v23, a1);
    return sub_21584FC70((uint64_t *)&v15, (uint64_t)v23);
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_215742D4C();
    }
LABEL_5:
    sub_215DC9474(v23, v7);
    goto LABEL_8;
  }
  sub_215DC95B8(v23, v7);
LABEL_8:
  sub_215B79CD0((uint64_t)&v21, v6);
  long long v19 = v21;
  uint64_t v20 = v22;
  sub_215B79684((uint64_t)&v15, (uint64_t)&v21 + 8, &v19);
  size_t result = sub_215DC97F8(v23);
  uint64_t v13 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v14 = *(unsigned int *)(a1 + 40);
  if (v14 == -1)
  {
    if (v13 == -1) {
      goto LABEL_13;
    }
  }
  else if (v13 == -1)
  {
    size_t result = (uint64_t *)((uint64_t (*)(uint64_t *, uint64_t))off_26C67EED8[v14])(result, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  v23[0] = a1 + 16;
  size_t result = (uint64_t *)((uint64_t (*)(uint64_t *))off_26C67EF08[v13])(result);
LABEL_13:
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26C67DBF0;
  if (v17 != -1) {
    return (uint64_t *)((uint64_t (*)(uint64_t *, void *))off_26C67EED8[v17])(v23, v16);
  }
  return result;
}

void sub_215B7A380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[a14])(v15 - 80, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B7A3E4(uint64_t a1)
{
  sub_215B79A50(v2, a1);
  return v2[0];
}

void sub_215B7A410(uint64_t a1, int a2)
{
  if (a2 != 2
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B79A50((uint64_t *)&v3, a1);
  operator new();
}

void sub_215B7A4BC(uint64_t a1, int a2)
{
  if (a2 != 2
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B79CD0((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B7A568()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F750, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F750))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F758, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F758))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F760, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F760))
    {
LABEL_13:
      if (byte_26788FB27 < 0)
      {
        sub_215738B0C(&xmmword_26788FAF8, (void *)qword_26788FB10, unk_26788FB18);
      }
      else
      {
        xmmword_26788FAF8 = *(_OWORD *)&qword_26788FB10;
        unk_26788FB08 = unk_26788FB20;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FAF8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F758);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F768, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F768))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray16u>]", &qword_26788FB28);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FB28, &dword_21572C000);
      __cxa_guard_release(&qword_26788F768);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F770, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F770))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F778, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F778))
      {
        if (byte_26788FB40[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FB40, *(unint64_t *)&byte_26788FB40[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FB40;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FB58);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FB58, &dword_21572C000);
        __cxa_guard_release(&qword_26788F778);
      }
      if (byte_26788FB6F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FB58, *((unint64_t *)&xmmword_26788FB58 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788FB58;
        uint64_t v12 = unk_26788FB68;
      }
      sub_21584F6EC(v11, (std::string *)&qword_26788FB10);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FB10, &dword_21572C000);
      __cxa_guard_release(&qword_26788F760);
      goto LABEL_13;
    }
    if (byte_26788FB3F >= 0) {
      size_t v1 = byte_26788FB3F;
    }
    else {
      size_t v1 = unk_26788FB30;
    }
    if (byte_26788FB3F >= 0) {
      uint64_t v2 = &qword_26788FB28;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FB28;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FB40[8] = v1;
      *(void *)&byte_26788FB40[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FB40 = v8;
    }
    else
    {
      int v8 = byte_26788FB40;
      byte_26788FB40[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FB40, &dword_21572C000);
    __cxa_guard_release(&qword_26788F770);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FB0F < 0)
  {
    sub_215738B0C(&xmmword_26788FAE0, (void *)xmmword_26788FAF8, *((unint64_t *)&xmmword_26788FAF8 + 1));
  }
  else
  {
    xmmword_26788FAE0 = xmmword_26788FAF8;
    unk_26788FAF0 = unk_26788FB08;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FAE0, &dword_21572C000);
  __cxa_guard_release(&qword_26788F750);
LABEL_2:
  if (byte_26788FAF7 >= 0) {
    return &xmmword_26788FAE0;
  }
  else {
    return (long long *)xmmword_26788FAE0;
  }
}

void sub_215B7A9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F760);
  __cxa_guard_abort(&qword_26788F758);
  __cxa_guard_abort(&qword_26788F750);
  _Unwind_Resume(a1);
}

void sub_215B7AA8C(_Unwind_Exception *a1)
{
}

void sub_215B7AAA4()
{
}

void sub_215B7AAEC(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B7AC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B7ACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B7ACD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B7AD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B7AD1C()
{
  return 65792;
}

void *sub_215B7AD28@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B7AD8C(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26C67E220;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v4;
  }
  *(void *)&long long v17 = *(void *)a2;
  uint64_t v7 = v17;
  *((void *)&v17 + 1) = v5 | (v6 << 32);
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  *(void *)a1 = &unk_26C67DDA0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B6FF4C(0, 3, &v17);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  if (v7 && HIDWORD(v7))
  {
    *(void *)(a1 + 48) = sub_215B70234(0, v8);
    *(void *)(a1 + 56) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = v17;
  }
  long long v18 = v15;
  uint64_t v19 = v16;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  uint64_t v10 = *(uint64_t **)(a1 + 24);
  if (v10)
  {
    uint64_t v12 = *v10;
    uint64_t v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12) {
          goto LABEL_23;
        }
        goto LABEL_16;
      }
    }
    if (v12)
    {
LABEL_16:
      unsigned int v13 = *(_DWORD *)(a1 + 40);
      if (v13 < 2)
      {
        sub_215DC9A68(v21, v8);
LABEL_22:
        sub_215B7115C(v20, a1);
        v22[0] = (uint64_t)&v18;
        v22[1] = (uint64_t)v20;
        sub_2158A12BC(v22);
        sub_215DC9DEC(v21);
        goto LABEL_23;
      }
      if (v13 == 2)
      {
        sub_215DC9BAC(v21, v8);
        goto LABEL_22;
      }
LABEL_24:
      sub_215742D4C();
    }
  }
LABEL_23:
  *(void *)a1 = &unk_26C67E220;
  return a1;
}

void sub_215B7AF94(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B7AFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215DC9DEC((void *)(v14 - 88));
  *(void *)uint64_t v11 = v13;
  uint64_t v16 = *(unsigned int *)(v11 + 40);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v16])(va, v12);
  }
  *(_DWORD *)(v11 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_215B7AFF8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DDA0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B7B070(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B709C4((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E220;
  return a1;
}

void sub_215B7B14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7B160(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26C684900;
          uint64_t v17 = v7;
          long long v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          long long v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B7042C(a1, (uint64_t)v14);
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26C684900;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B7B3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B7B3E0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v18 = &unk_26C684900;
          uint64_t v19 = v7;
          uint64_t v20 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v19;
            uint64_t v8 = v20;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          long long v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B7042C(&v16, (uint64_t)v14);
          *(void *)a1 = v16;
          *(_OWORD *)(a1 + 8) = v17;
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v18 = &unk_26C684900;
          uint64_t v10 = v20;
          if (v20)
          {
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B7B654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B7B670()
{
  return 3;
}

uint64_t (***sub_215B7B678())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B7B6F4(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B7B3E0((uint64_t)v5, a1);
      sub_215B7B3E0((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B7B7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x2166C4D20](v8, 0x10A3C40EE3858B8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7B7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7B7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B7B810@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B7B874(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67EC70, 0);
  if (!v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v23, lpsrc, 3);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(void *)(v23[0] + 16);
    long long v15 = *(_OWORD *)v23[0];
    v16[0] = v10;
    v23[0] = 0;
    MEMORY[0x2166C4D20](v9, 0xC400A2AC0F1, v11);
    sub_215B7B160(v23, a1);
    *(void *)&long long v21 = &v15;
    *((void *)&v21 + 1) = v23;
    sub_2158A12BC((uint64_t *)&v21);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_215742D4C();
    }
LABEL_5:
    sub_215DC9474(v23, v7);
    goto LABEL_8;
  }
  sub_215DC95B8(v23, v7);
LABEL_8:
  sub_215B7B3E0((uint64_t)&v21, v6);
  long long v19 = v21;
  uint64_t v20 = v22;
  sub_215B7AD8C((uint64_t)&v15, (uint64_t)&v21 + 8, &v19);
  unint64_t v12 = sub_215DC97F8(v23);
  uint64_t v13 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v14 = *(unsigned int *)(a1 + 40);
  if (v14 == -1)
  {
    if (v13 == -1) {
      goto LABEL_13;
    }
  }
  else if (v13 == -1)
  {
    ((void (*)(void *, uint64_t))off_26C67EED8[v14])(v12, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  v23[0] = a1 + 16;
  ((void (*)(void *))off_26C67EF08[v13])(v12);
LABEL_13:
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26C67DDA0;
  if (v17 != -1) {
    ((void (*)(uint64_t *, void *))off_26C67EED8[v17])(v23, v16);
  }
}

void sub_215B7BA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[a14])(v15 - 80, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B7BAFC(uint64_t a1)
{
  sub_215B7B160(v2, a1);
  return v2[0];
}

void sub_215B7BB28(uint64_t a1, int a2)
{
  if (a2 != 3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B7B160((uint64_t *)&v3, a1);
  operator new();
}

void sub_215B7BBD4(uint64_t a1, int a2)
{
  if (a2 != 3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B7B3E0((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B7BC80()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F780, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F780))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F788, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F788))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F790, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F790))
    {
LABEL_13:
      if (byte_26788FBB7 < 0)
      {
        sub_215738B0C(&xmmword_26788FB88, (void *)qword_26788FBA0, unk_26788FBA8);
      }
      else
      {
        xmmword_26788FB88 = *(_OWORD *)&qword_26788FBA0;
        unk_26788FB98 = unk_26788FBB0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FB88, &dword_21572C000);
      __cxa_guard_release(&qword_26788F788);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F798, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F798))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray16f>]", &qword_26788FBB8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FBB8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F798);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7A0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F7A0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7A8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F7A8))
      {
        if (byte_26788FBD0[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FBD0, *(unint64_t *)&byte_26788FBD0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FBD0;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FBE8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FBE8, &dword_21572C000);
        __cxa_guard_release(&qword_26788F7A8);
      }
      if (byte_26788FBFF < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FBE8, *((unint64_t *)&xmmword_26788FBE8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788FBE8;
        uint64_t v12 = unk_26788FBF8;
      }
      sub_2158502B4(v11, (std::string *)&qword_26788FBA0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FBA0, &dword_21572C000);
      __cxa_guard_release(&qword_26788F790);
      goto LABEL_13;
    }
    if (byte_26788FBCF >= 0) {
      size_t v1 = byte_26788FBCF;
    }
    else {
      size_t v1 = unk_26788FBC0;
    }
    if (byte_26788FBCF >= 0) {
      uint64_t v2 = &qword_26788FBB8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FBB8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FBD0[8] = v1;
      *(void *)&byte_26788FBD0[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FBD0 = v8;
    }
    else
    {
      int v8 = byte_26788FBD0;
      byte_26788FBD0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FBD0, &dword_21572C000);
    __cxa_guard_release(&qword_26788F7A0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FB9F < 0)
  {
    sub_215738B0C(&xmmword_26788FB70, (void *)xmmword_26788FB88, *((unint64_t *)&xmmword_26788FB88 + 1));
  }
  else
  {
    xmmword_26788FB70 = xmmword_26788FB88;
    unk_26788FB80 = unk_26788FB98;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FB70, &dword_21572C000);
  __cxa_guard_release(&qword_26788F780);
LABEL_2:
  if (byte_26788FB87 >= 0) {
    return &xmmword_26788FB70;
  }
  else {
    return (long long *)xmmword_26788FB70;
  }
}

void sub_215B7C108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F790);
  __cxa_guard_abort(&qword_26788F788);
  __cxa_guard_abort(&qword_26788F780);
  _Unwind_Resume(a1);
}

void sub_215B7C1A4(_Unwind_Exception *a1)
{
}

void sub_215B7C1BC()
{
}

void sub_215B7C204(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B7C3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B7C3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B7C3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B7C420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B7C434()
{
  return 65792;
}

void *sub_215B7C440@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B7C4A4(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26C67E2B0;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  if (v4 <= 8) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = v4;
  }
  *(void *)&long long v17 = *(void *)a2;
  uint64_t v7 = v17;
  *((void *)&v17 + 1) = v5 | (v6 << 32);
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  *(void *)a1 = &unk_26C67DF50;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B73F5C(0, 4, &v17);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  if (v7 && HIDWORD(v7))
  {
    *(void *)(a1 + 48) = sub_215B74244(0, v8);
    *(void *)(a1 + 56) = v9;
  }
  else
  {
    *(_OWORD *)(a1 + 48) = v17;
  }
  long long v18 = v15;
  uint64_t v19 = v16;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  uint64_t v10 = *(uint64_t **)(a1 + 24);
  if (v10)
  {
    uint64_t v12 = *v10;
    uint64_t v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (!v12) {
          goto LABEL_23;
        }
        goto LABEL_16;
      }
    }
    if (v12)
    {
LABEL_16:
      unsigned int v13 = *(_DWORD *)(a1 + 40);
      if (v13 < 2)
      {
        sub_215DC9A68(v21, v8);
LABEL_22:
        sub_215B7516C(v20, a1);
        sub_21585114C((uint64_t)&v18, (uint64_t)v20);
        sub_215DC9DEC(v21);
        goto LABEL_23;
      }
      if (v13 == 2)
      {
        sub_215DC9BAC(v21, v8);
        goto LABEL_22;
      }
LABEL_24:
      sub_215742D4C();
    }
  }
LABEL_23:
  *(void *)a1 = &unk_26C67E2B0;
  return a1;
}

void sub_215B7C6A4(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B7C6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215DC9DEC((void *)(v14 - 72));
  *(void *)uint64_t v11 = v13;
  uint64_t v16 = *(unsigned int *)(v11 + 40);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v16])(va, v12);
  }
  *(_DWORD *)(v11 + 40) = -1;
  _Unwind_Resume(a1);
}

uint64_t sub_215B7C708(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DF50;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B7C780(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B749D4((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E2B0;
  return a1;
}

void sub_215B7C85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7C870(uint64_t *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v16 = &unk_26C684900;
          uint64_t v17 = v7;
          long long v18 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v17;
            uint64_t v8 = v18;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          long long v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B7443C(a1, (uint64_t)v14);
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v16 = &unk_26C684900;
          uint64_t v10 = v18;
          if (v18)
          {
            if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *a1 = 0;
  a1[1] = v12;
  a1[2] = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B7CAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B7CAF0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_29;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v18 = &unk_26C684900;
          uint64_t v19 = v7;
          uint64_t v20 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v19;
            uint64_t v8 = v20;
          }
          v14[0] = &unk_26C684900;
          v14[1] = v7;
          long long v15 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B7443C(&v16, (uint64_t)v14);
          *(void *)a1 = v16;
          *(_OWORD *)(a1 + 8) = v17;
          v14[0] = &unk_26C684900;
          uint64_t v9 = v15;
          if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v18 = &unk_26C684900;
          uint64_t v10 = v20;
          if (v20)
          {
            if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_29:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 52)) {
    BOOL v11 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 48);
  if (v11) {
    unint64_t v12 = 0;
  }
  uint64_t v13 = 0x100000000;
  if (v12 > 0x100000000) {
    uint64_t v13 = v12;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = (v12 != 0) | (unint64_t)(v13 << 32);
  if (HIDWORD(v12) * v13 == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
}

void sub_215B7CD64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B7CD80()
{
  return 4;
}

uint64_t (***sub_215B7CD88())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B7CE04(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B7CAF0((uint64_t)v5, a1);
      sub_215B7CAF0((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B7CECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MEMORY[0x2166C4D20](v8, 0x10A3C40EE3858B8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7CEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7CF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B7CF20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B7CF84(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67EC88, 0);
  if (!v5)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v23, lpsrc, 4);
    uint64_t v9 = v23[0];
    uint64_t v10 = *(void *)(v23[0] + 16);
    long long v15 = *(_OWORD *)v23[0];
    v16[0] = v10;
    v23[0] = 0;
    MEMORY[0x2166C4D20](v9, 0xC400A2AC0F1, v11);
    sub_215B7C870(v23, a1);
    sub_21585114C((uint64_t)&v15, (uint64_t)v23);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_215742D4C();
    }
LABEL_5:
    sub_215DC9474(v23, v7);
    goto LABEL_8;
  }
  sub_215DC95B8(v23, v7);
LABEL_8:
  sub_215B7CAF0((uint64_t)&v21, v6);
  long long v19 = v21;
  uint64_t v20 = v22;
  sub_215B7C4A4((uint64_t)&v15, (uint64_t)&v21 + 8, &v19);
  unint64_t v12 = sub_215DC97F8(v23);
  uint64_t v13 = v17;
  *(_DWORD *)(a1 + 8) = DWORD2(v15);
  uint64_t v14 = *(unsigned int *)(a1 + 40);
  if (v14 == -1)
  {
    if (v13 == -1) {
      goto LABEL_13;
    }
  }
  else if (v13 == -1)
  {
    ((void (*)(void *, uint64_t))off_26C67EED8[v14])(v12, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  v23[0] = a1 + 16;
  ((void (*)(void *))off_26C67EF08[v13])(v12);
LABEL_13:
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)&long long v15 = &unk_26C67DF50;
  if (v17 != -1) {
    ((void (*)(uint64_t *, void *))off_26C67EED8[v17])(v23, v16);
  }
}

void sub_215B7D1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[a14])(v15 - 80, v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B7D204(uint64_t a1)
{
  sub_215B7C870(v2, a1);
  return v2[0];
}

void sub_215B7D230(uint64_t a1, int a2)
{
  if (a2 != 4
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B7C870((uint64_t *)&v3, a1);
  operator new();
}

void sub_215B7D2DC(uint64_t a1, int a2)
{
  if (a2 != 4
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B7CAF0((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B7D388()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7B0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F7B0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F7B8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7C0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F7C0))
    {
LABEL_13:
      if (byte_26788FC47 < 0)
      {
        sub_215738B0C(&xmmword_26788FC18, (void *)qword_26788FC30, unk_26788FC38);
      }
      else
      {
        xmmword_26788FC18 = *(_OWORD *)&qword_26788FC30;
        unk_26788FC28 = unk_26788FC40;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FC18, &dword_21572C000);
      __cxa_guard_release(&qword_26788F7B8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7C8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F7C8))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Gray32f>]", &qword_26788FC48);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FC48, &dword_21572C000);
      __cxa_guard_release(&qword_26788F7C8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7D0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F7D0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7D8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F7D8))
      {
        if (byte_26788FC60[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FC60, *(unint64_t *)&byte_26788FC60[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FC60;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FC78);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FC78, &dword_21572C000);
        __cxa_guard_release(&qword_26788F7D8);
      }
      if (byte_26788FC8F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FC78, *((unint64_t *)&xmmword_26788FC78 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788FC78;
        uint64_t v12 = unk_26788FC88;
      }
      sub_215850BC8(v11, (std::string *)&qword_26788FC30);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FC30, &dword_21572C000);
      __cxa_guard_release(&qword_26788F7C0);
      goto LABEL_13;
    }
    if (byte_26788FC5F >= 0) {
      size_t v1 = byte_26788FC5F;
    }
    else {
      size_t v1 = unk_26788FC50;
    }
    if (byte_26788FC5F >= 0) {
      uint64_t v2 = &qword_26788FC48;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FC48;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FC60[8] = v1;
      *(void *)&byte_26788FC60[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FC60 = v8;
    }
    else
    {
      int v8 = byte_26788FC60;
      byte_26788FC60[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FC60, &dword_21572C000);
    __cxa_guard_release(&qword_26788F7D0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FC2F < 0)
  {
    sub_215738B0C(&xmmword_26788FC00, (void *)xmmword_26788FC18, *((unint64_t *)&xmmword_26788FC18 + 1));
  }
  else
  {
    xmmword_26788FC00 = xmmword_26788FC18;
    unk_26788FC10 = unk_26788FC28;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FC00, &dword_21572C000);
  __cxa_guard_release(&qword_26788F7B0);
LABEL_2:
  if (byte_26788FC17 >= 0) {
    return &xmmword_26788FC00;
  }
  else {
    return (long long *)xmmword_26788FC00;
  }
}

void sub_215B7D810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F7C0);
  __cxa_guard_abort(&qword_26788F7B8);
  __cxa_guard_abort(&qword_26788F7B0);
  _Unwind_Resume(a1);
}

void sub_215B7D8AC(_Unwind_Exception *a1)
{
}

void sub_215B7D8C4()
{
}

void sub_215B7D90C(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B7DAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B7DAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B7DAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B7DB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B7DB3C()
{
  return 65792;
}

void *sub_215B7DB48@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B7DBAC(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E340;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x20) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = v4;
  }
  *(_DWORD *)unint64_t v24 = 2;
  uint64_t v7 = *(void *)(a2 + 24);
  *(_DWORD *)&v24[4] = v7;
  *(void *)long long v19 = *(void *)v24;
  *(_DWORD *)&v19[8] = HIDWORD(v7);
  *(_DWORD *)unint64_t v24 = 1;
  *(void *)&v24[4] = v5 | (v6 << 32);
  *(void *)&v19[12] = *(void *)v24;
  *(_DWORD *)&v19[20] = v6;
  *(void *)&v19[24] = v7;
  uint64_t v20 = *(void *)&v24[4];
  long long v17 = a3[1];
  long long v18 = a3[2];
  long long v16 = *a3;
  *(void *)a1 = &unk_26C67DA40;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B67E94(0, 5, (uint64_t)v19);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B6817C(0, v8, (uint64_t)v9);
  }
  else
  {
    long long v10 = *(_OWORD *)&v19[16];
    *uint64_t v9 = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 80) = v20;
  }
  v21[0] = v16;
  v21[1] = v17;
  void v21[2] = v18;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  uint64_t v11 = *(uint64_t **)(a1 + 24);
  if (v11)
  {
    uint64_t v13 = *v11;
    uint64_t v12 = (std::__shared_weak_count *)v11[1];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (!v13) {
          goto LABEL_23;
        }
        goto LABEL_16;
      }
    }
    if (v13)
    {
LABEL_16:
      unsigned int v14 = *(_DWORD *)(a1 + 40);
      if (v14 < 2)
      {
        sub_215DC9A68(v22, v8);
LABEL_22:
        sub_215B68FCC((uint64_t)v24, a1);
        v23[0] = (size_t)v21;
        v23[1] = (size_t)v24;
        sub_2158A24F4(v23);
        sub_215DC9DEC(v22);
        goto LABEL_23;
      }
      if (v14 == 2)
      {
        sub_215DC9BAC(v22, v8);
        goto LABEL_22;
      }
LABEL_24:
      sub_215742D4C();
    }
  }
LABEL_23:
  *(void *)a1 = &unk_26C67E340;
  return a1;
}

void sub_215B7DE34(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B7DE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_215DC9DEC(&a27);
  *(void *)uint64_t v27 = v29;
  uint64_t v32 = *(unsigned int *)(v27 + 40);
  if (v32 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[v32])(v30 - 120, v28);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B7DE98(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B7DEB0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DA40;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B7DF28(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B688C4((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E340;
  return a1;
}

void sub_215B7E004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7E018(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          long long v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B683A4(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B7E29C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B7E2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            uint64_t v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B683A4((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)unint64_t v23 = 2;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 2);
  *(_DWORD *)unint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B7E55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B7E578()
{
  return 5;
}

uint64_t (***sub_215B7E580())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B7E5FC(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B7E2B8((uint64_t)v5, a1);
      sub_215B7E2B8((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B7E6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7E6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7E70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B7E720@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

size_t *sub_215B7E784(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ECA0, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v27, lpsrc, 5);
    uint64_t v9 = *(void *)&v27[0];
    long long v11 = *(_OWORD *)(*(void *)&v27[0] + 16);
    long long v10 = *(_OWORD *)(*(void *)&v27[0] + 32);
    long long v20 = **(_OWORD **)&v27[0];
    long long v21 = v11;
    long long v22 = v10;
    *(void *)&v27[0] = 0;
    MEMORY[0x2166C4D20](v9, 0xC400A2AC0F1, v12, v13, v14, v15);
    sub_215B7E018((uint64_t)v27, a1);
    *(void *)&v26[0] = &v20;
    *((void *)&v26[0] + 1) = v27;
    return sub_2158A24F4((size_t *)v26);
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_215742D4C();
    }
LABEL_5:
    sub_215DC9474(v28, v7);
    goto LABEL_8;
  }
  sub_215DC95B8(v28, v7);
LABEL_8:
  sub_215B7E2B8((uint64_t)v27, v6);
  v26[0] = v27[0];
  v26[1] = v27[1];
  void v26[2] = v27[2];
  sub_215B7DBAC((uint64_t)&v20, (uint64_t)v27 + 8, v26);
  size_t result = sub_215DC97F8(v28);
  uint64_t v17 = DWORD2(v22);
  *(_DWORD *)(a1 + 8) = DWORD2(v20);
  uint64_t v18 = *(unsigned int *)(a1 + 40);
  if (v18 == -1)
  {
    if (v17 == -1) {
      goto LABEL_13;
    }
  }
  else if (v17 == -1)
  {
    size_t result = (size_t *)((uint64_t (*)(_OWORD *, uint64_t))off_26C67EED8[v18])(v27, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  *(void *)&v27[0] = a1 + 16;
  size_t result = (size_t *)((uint64_t (*)(_OWORD *))off_26C67EF08[v17])(v27);
LABEL_13:
  long long v19 = v24;
  *(_OWORD *)(a1 + 48) = v23;
  *(_OWORD *)(a1 + 64) = v19;
  *(void *)(a1 + 80) = v25;
  *(void *)&long long v20 = &unk_26C67DA40;
  if (DWORD2(v22) != -1) {
    return (size_t *)((uint64_t (*)(_OWORD *, long long *))off_26C67EED8[DWORD2(v22)])(v27, &v21);
  }
  return result;
}

void sub_215B7E9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B7EA2C(uint64_t a1)
{
  sub_215B7E018((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B7EA58(uint64_t a1, int a2)
{
  if (a2 != 5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B7E018((uint64_t)&v3, a1);
  operator new();
}

void sub_215B7EB04(uint64_t a1, int a2)
{
  if (a2 != 5
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B7E2B8((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B7EBB0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F7E0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F7E8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7F0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F7F0))
    {
LABEL_13:
      if (byte_26788FCD7 < 0)
      {
        sub_215738B0C(&xmmword_26788FCA8, (void *)qword_26788FCC0, unk_26788FCC8);
      }
      else
      {
        xmmword_26788FCA8 = *(_OWORD *)&qword_26788FCC0;
        unk_26788FCB8 = unk_26788FCD0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FCA8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F7E8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F7F8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F7F8))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Two8u>]", &qword_26788FCD8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FCD8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F7F8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F800, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F800))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F808, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F808))
      {
        if (byte_26788FCF0[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FCF0, *(unint64_t *)&byte_26788FCF0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FCF0;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FD08);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FD08, &dword_21572C000);
        __cxa_guard_release(&qword_26788F808);
      }
      if (byte_26788FD1F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FD08, *((unint64_t *)&xmmword_26788FD08 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788FD08;
        uint64_t v12 = unk_26788FD18;
      }
      sub_215851790(v11, (std::string *)&qword_26788FCC0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FCC0, &dword_21572C000);
      __cxa_guard_release(&qword_26788F7F0);
      goto LABEL_13;
    }
    if (byte_26788FCEF >= 0) {
      size_t v1 = byte_26788FCEF;
    }
    else {
      size_t v1 = unk_26788FCE0;
    }
    if (byte_26788FCEF >= 0) {
      uint64_t v2 = &qword_26788FCD8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FCD8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FCF0[8] = v1;
      *(void *)&byte_26788FCF0[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FCF0 = v8;
    }
    else
    {
      int v8 = byte_26788FCF0;
      byte_26788FCF0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FCF0, &dword_21572C000);
    __cxa_guard_release(&qword_26788F800);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FCBF < 0)
  {
    sub_215738B0C(&xmmword_26788FC90, (void *)xmmword_26788FCA8, *((unint64_t *)&xmmword_26788FCA8 + 1));
  }
  else
  {
    xmmword_26788FC90 = xmmword_26788FCA8;
    unk_26788FCA0 = unk_26788FCB8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FC90, &dword_21572C000);
  __cxa_guard_release(&qword_26788F7E0);
LABEL_2:
  if (byte_26788FCA7 >= 0) {
    return &xmmword_26788FC90;
  }
  else {
    return (long long *)xmmword_26788FC90;
  }
}

void sub_215B7F038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F7F0);
  __cxa_guard_abort(&qword_26788F7E8);
  __cxa_guard_abort(&qword_26788F7E0);
  _Unwind_Resume(a1);
}

void sub_215B7F0D4(_Unwind_Exception *a1)
{
}

void sub_215B7F0EC()
{
}

void sub_215B7F134(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B7F2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B7F308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B7F31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B7F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B7F364()
{
  return 65792;
}

void *sub_215B7F370@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B7F3D4(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E3D0;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v4;
  }
  *(_DWORD *)long long v24 = 2;
  uint64_t v7 = *(void *)(a2 + 24);
  *(_DWORD *)&v24[4] = v7;
  *(void *)long long v19 = *(void *)v24;
  *(_DWORD *)&v19[8] = HIDWORD(v7);
  *(_DWORD *)long long v24 = 1;
  *(void *)&v24[4] = v5 | (v6 << 32);
  *(void *)&v19[12] = *(void *)v24;
  *(_DWORD *)&v19[20] = v6;
  *(void *)&v19[24] = v7;
  uint64_t v20 = *(void *)&v24[4];
  long long v17 = a3[1];
  long long v18 = a3[2];
  long long v16 = *a3;
  *(void *)a1 = &unk_26C67DE30;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B713DC(0, 7, (uint64_t)v19);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B716C4(0, v8, (uint64_t)v9);
  }
  else
  {
    long long v10 = *(_OWORD *)&v19[16];
    *uint64_t v9 = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 80) = v20;
  }
  v21[0] = v16;
  v21[1] = v17;
  void v21[2] = v18;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  long long v11 = *(uint64_t **)(a1 + 24);
  if (v11)
  {
    uint64_t v13 = *v11;
    uint64_t v12 = (std::__shared_weak_count *)v11[1];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (!v13) {
          goto LABEL_23;
        }
        goto LABEL_16;
      }
    }
    if (v13)
    {
LABEL_16:
      unsigned int v14 = *(_DWORD *)(a1 + 40);
      if (v14 < 2)
      {
        sub_215DC9A68(v22, v8);
LABEL_22:
        sub_215B726FC((uint64_t)v24, a1);
        v23[0] = (uint64_t)v21;
        v23[1] = (uint64_t)v24;
        sub_2158A3B98(v23);
        sub_215DC9DEC(v22);
        goto LABEL_23;
      }
      if (v14 == 2)
      {
        sub_215DC9BAC(v22, v8);
        goto LABEL_22;
      }
LABEL_24:
      sub_215742D4C();
    }
  }
LABEL_23:
  *(void *)a1 = &unk_26C67E3D0;
  return a1;
}

void sub_215B7F65C(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B7F674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_215DC9DEC(&a27);
  *(void *)uint64_t v27 = v29;
  uint64_t v32 = *(unsigned int *)(v27 + 40);
  if (v32 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[v32])(v30 - 120, v28);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B7F6C0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B7F6D8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DE30;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B7F750(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B71F04((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E3D0;
  return a1;
}

void sub_215B7F82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7F840(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B718EC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B7FAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B7FAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            uint64_t v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B718EC((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)long long v23 = 2;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 2);
  *(_DWORD *)long long v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B7FD84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B7FDA0()
{
  return 7;
}

uint64_t (***sub_215B7FDA8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B7FE24(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B7FAE0((uint64_t)v5, a1);
      sub_215B7FAE0((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B7FEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7FF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B7FF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B7FF48@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B7FFAC(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ECB8, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v26, lpsrc, 7);
    uint64_t v9 = *(void *)&v26[0];
    long long v11 = *(_OWORD *)(*(void *)&v26[0] + 16);
    long long v10 = *(_OWORD *)(*(void *)&v26[0] + 32);
    long long v19 = **(_OWORD **)&v26[0];
    long long v20 = v11;
    long long v21 = v10;
    *(void *)&v26[0] = 0;
    MEMORY[0x2166C4D20](v9, 0xC400A2AC0F1, v12, v13, v14, v15);
    sub_215B7F840((uint64_t)v26, a1);
    *(void *)&v25[0] = &v19;
    *((void *)&v25[0] + 1) = v26;
    sub_2158A3B98((uint64_t *)v25);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_215742D4C();
    }
LABEL_5:
    sub_215DC9474(v27, v7);
    goto LABEL_8;
  }
  sub_215DC95B8(v27, v7);
LABEL_8:
  sub_215B7FAE0((uint64_t)v26, v6);
  v25[0] = v26[0];
  v25[1] = v26[1];
  void v25[2] = v26[2];
  sub_215B7F3D4((uint64_t)&v19, (uint64_t)v26 + 8, v25);
  sub_215DC97F8(v27);
  uint64_t v16 = DWORD2(v21);
  *(_DWORD *)(a1 + 8) = DWORD2(v19);
  uint64_t v17 = *(unsigned int *)(a1 + 40);
  if (v17 == -1)
  {
    if (v16 == -1) {
      goto LABEL_13;
    }
  }
  else if (v16 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26C67EED8[v17])(v26, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  *(void *)&v26[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26C67EF08[v16])(v26);
LABEL_13:
  long long v18 = v23;
  *(_OWORD *)(a1 + 48) = v22;
  *(_OWORD *)(a1 + 64) = v18;
  *(void *)(a1 + 80) = v24;
  *(void *)&long long v19 = &unk_26C67DE30;
  if (DWORD2(v21) != -1) {
    ((void (*)(_OWORD *, long long *))off_26C67EED8[DWORD2(v21)])(v26, &v20);
  }
}

void sub_215B801F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B80254(uint64_t a1)
{
  sub_215B7F840((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B80280(uint64_t a1, int a2)
{
  if (a2 != 7
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B7F840((uint64_t)&v3, a1);
  operator new();
}

void sub_215B8032C(uint64_t a1, int a2)
{
  if (a2 != 7
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B7FAE0((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B803D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F810, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F810))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F818, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F818))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F820, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F820))
    {
LABEL_13:
      if (byte_26788FD67 < 0)
      {
        sub_215738B0C(&xmmword_26788FD38, (void *)qword_26788FD50, unk_26788FD58);
      }
      else
      {
        xmmword_26788FD38 = *(_OWORD *)&qword_26788FD50;
        unk_26788FD48 = unk_26788FD60;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FD38, &dword_21572C000);
      __cxa_guard_release(&qword_26788F818);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F828, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F828))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Two16f>]", &qword_26788FD68);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FD68, &dword_21572C000);
      __cxa_guard_release(&qword_26788F828);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F830, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F830))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F838, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F838))
      {
        if (byte_26788FD80[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FD80, *(unint64_t *)&byte_26788FD80[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FD80;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FD98);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FD98, &dword_21572C000);
        __cxa_guard_release(&qword_26788F838);
      }
      if (byte_26788FDAF < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FD98, *((unint64_t *)&xmmword_26788FD98 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788FD98;
        uint64_t v12 = unk_26788FDA8;
      }
      sub_215853C6C(v11, (std::string *)&qword_26788FD50);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FD50, &dword_21572C000);
      __cxa_guard_release(&qword_26788F820);
      goto LABEL_13;
    }
    if (byte_26788FD7F >= 0) {
      size_t v1 = byte_26788FD7F;
    }
    else {
      size_t v1 = unk_26788FD70;
    }
    if (byte_26788FD7F >= 0) {
      uint64_t v2 = &qword_26788FD68;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FD68;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FD80[8] = v1;
      *(void *)&byte_26788FD80[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FD80 = v8;
    }
    else
    {
      int v8 = byte_26788FD80;
      byte_26788FD80[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FD80, &dword_21572C000);
    __cxa_guard_release(&qword_26788F830);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FD4F < 0)
  {
    sub_215738B0C(&xmmword_26788FD20, (void *)xmmword_26788FD38, *((unint64_t *)&xmmword_26788FD38 + 1));
  }
  else
  {
    xmmword_26788FD20 = xmmword_26788FD38;
    unk_26788FD30 = unk_26788FD48;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FD20, &dword_21572C000);
  __cxa_guard_release(&qword_26788F810);
LABEL_2:
  if (byte_26788FD37 >= 0) {
    return &xmmword_26788FD20;
  }
  else {
    return (long long *)xmmword_26788FD20;
  }
}

void sub_215B80860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F820);
  __cxa_guard_abort(&qword_26788F818);
  __cxa_guard_abort(&qword_26788F810);
  _Unwind_Resume(a1);
}

void sub_215B808FC(_Unwind_Exception *a1)
{
}

void sub_215B80914()
{
}

void sub_215B8095C(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B80AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B80B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B80B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B80B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B80B8C()
{
  return 65792;
}

void *sub_215B80B98@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B80BFC(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E460;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  if (v4 <= 8) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = v4;
  }
  *(_DWORD *)uint64_t v24 = 2;
  uint64_t v7 = *(void *)(a2 + 24);
  *(_DWORD *)&v24[4] = v7;
  *(void *)long long v19 = *(void *)v24;
  *(_DWORD *)&v19[8] = HIDWORD(v7);
  *(_DWORD *)uint64_t v24 = 1;
  *(void *)&v24[4] = v5 | (v6 << 32);
  *(void *)&v19[12] = *(void *)v24;
  *(_DWORD *)&v19[20] = v6;
  *(void *)&v19[24] = v7;
  uint64_t v20 = *(void *)&v24[4];
  long long v17 = a3[1];
  long long v18 = a3[2];
  long long v16 = *a3;
  *(void *)a1 = &unk_26C67DFE0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B753EC(0, 8, (uint64_t)v19);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B756D4(0, v8, (uint64_t)v9);
  }
  else
  {
    long long v10 = *(_OWORD *)&v19[16];
    *uint64_t v9 = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 80) = v20;
  }
  v21[0] = v16;
  v21[1] = v17;
  void v21[2] = v18;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  long long v11 = *(uint64_t **)(a1 + 24);
  if (v11)
  {
    uint64_t v13 = *v11;
    uint64_t v12 = (std::__shared_weak_count *)v11[1];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (!v13) {
          goto LABEL_23;
        }
        goto LABEL_16;
      }
    }
    if (v13)
    {
LABEL_16:
      unsigned int v14 = *(_DWORD *)(a1 + 40);
      if (v14 < 2)
      {
        sub_215DC9A68(v22, v8);
LABEL_22:
        sub_215B7670C((uint64_t)v24, a1);
        v23[0] = (uint64_t)v21;
        v23[1] = (uint64_t)v24;
        sub_2158A4CE8(v23);
        sub_215DC9DEC(v22);
        goto LABEL_23;
      }
      if (v14 == 2)
      {
        sub_215DC9BAC(v22, v8);
        goto LABEL_22;
      }
LABEL_24:
      sub_215742D4C();
    }
  }
LABEL_23:
  *(void *)a1 = &unk_26C67E460;
  return a1;
}

void sub_215B80E84(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B80E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_215DC9DEC(&a27);
  *(void *)uint64_t v27 = v29;
  uint64_t v32 = *(unsigned int *)(v27 + 40);
  if (v32 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[v32])(v30 - 120, v28);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B80EE8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B80F00(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DFE0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B80F78(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B75F14((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E460;
  return a1;
}

void sub_215B81054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B81068(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B758FC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 2;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 2);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B812EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B81308(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            uint64_t v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B758FC((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)long long v23 = 2;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 2 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 2);
  *(_DWORD *)long long v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B815AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B815C8()
{
  return 8;
}

uint64_t (***sub_215B815D0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B8164C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B81308((uint64_t)v5, a1);
      sub_215B81308((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B8171C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B81748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8175C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B81770@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B817D4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ECD0, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v26, lpsrc, 8);
    uint64_t v9 = *(void *)&v26[0];
    long long v11 = *(_OWORD *)(*(void *)&v26[0] + 16);
    long long v10 = *(_OWORD *)(*(void *)&v26[0] + 32);
    long long v19 = **(_OWORD **)&v26[0];
    long long v20 = v11;
    long long v21 = v10;
    *(void *)&v26[0] = 0;
    MEMORY[0x2166C4D20](v9, 0xC400A2AC0F1, v12, v13, v14, v15);
    sub_215B81068((uint64_t)v26, a1);
    *(void *)&v25[0] = &v19;
    *((void *)&v25[0] + 1) = v26;
    sub_2158A4CE8((uint64_t *)v25);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_215742D4C();
    }
LABEL_5:
    sub_215DC9474(v27, v7);
    goto LABEL_8;
  }
  sub_215DC95B8(v27, v7);
LABEL_8:
  sub_215B81308((uint64_t)v26, v6);
  v25[0] = v26[0];
  v25[1] = v26[1];
  void v25[2] = v26[2];
  sub_215B80BFC((uint64_t)&v19, (uint64_t)v26 + 8, v25);
  sub_215DC97F8(v27);
  uint64_t v16 = DWORD2(v21);
  *(_DWORD *)(a1 + 8) = DWORD2(v19);
  uint64_t v17 = *(unsigned int *)(a1 + 40);
  if (v17 == -1)
  {
    if (v16 == -1) {
      goto LABEL_13;
    }
  }
  else if (v16 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26C67EED8[v17])(v26, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  *(void *)&v26[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26C67EF08[v16])(v26);
LABEL_13:
  long long v18 = v23;
  *(_OWORD *)(a1 + 48) = v22;
  *(_OWORD *)(a1 + 64) = v18;
  *(void *)(a1 + 80) = v24;
  *(void *)&long long v19 = &unk_26C67DFE0;
  if (DWORD2(v21) != -1) {
    ((void (*)(_OWORD *, long long *))off_26C67EED8[DWORD2(v21)])(v26, &v20);
  }
}

void sub_215B81A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B81A7C(uint64_t a1)
{
  sub_215B81068((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B81AA8(uint64_t a1, int a2)
{
  if (a2 != 8
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B81068((uint64_t)&v3, a1);
  operator new();
}

void sub_215B81B54(uint64_t a1, int a2)
{
  if (a2 != 8
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B81308((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B81C00()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F840, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F840))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F848, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F848))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F850, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F850))
    {
LABEL_13:
      if (byte_26788FDF7 < 0)
      {
        sub_215738B0C(&xmmword_26788FDC8, (void *)qword_26788FDE0, unk_26788FDE8);
      }
      else
      {
        xmmword_26788FDC8 = *(_OWORD *)&qword_26788FDE0;
        unk_26788FDD8 = unk_26788FDF0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FDC8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F848);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F858, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F858))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Two32f>]", &qword_26788FDF8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FDF8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F858);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F860, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F860))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F868, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F868))
      {
        if (byte_26788FE10[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FE10, *(unint64_t *)&byte_26788FE10[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FE10;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FE28);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FE28, &dword_21572C000);
        __cxa_guard_release(&qword_26788F868);
      }
      if (byte_26788FE3F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FE28, *((unint64_t *)&xmmword_26788FE28 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_26788FE28;
        uint64_t v12 = unk_26788FE38;
      }
      sub_2158547F4(v11, (std::string *)&qword_26788FDE0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FDE0, &dword_21572C000);
      __cxa_guard_release(&qword_26788F850);
      goto LABEL_13;
    }
    if (byte_26788FE0F >= 0) {
      size_t v1 = byte_26788FE0F;
    }
    else {
      size_t v1 = unk_26788FE00;
    }
    if (byte_26788FE0F >= 0) {
      uint64_t v2 = &qword_26788FDF8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FDF8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FE10[8] = v1;
      *(void *)&byte_26788FE10[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FE10 = v8;
    }
    else
    {
      int v8 = byte_26788FE10;
      byte_26788FE10[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FE10, &dword_21572C000);
    __cxa_guard_release(&qword_26788F860);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FDDF < 0)
  {
    sub_215738B0C(&xmmword_26788FDB0, (void *)xmmword_26788FDC8, *((unint64_t *)&xmmword_26788FDC8 + 1));
  }
  else
  {
    xmmword_26788FDB0 = xmmword_26788FDC8;
    unk_26788FDC0 = unk_26788FDD8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FDB0, &dword_21572C000);
  __cxa_guard_release(&qword_26788F840);
LABEL_2:
  if (byte_26788FDC7 >= 0) {
    return &xmmword_26788FDB0;
  }
  else {
    return (long long *)xmmword_26788FDB0;
  }
}

void sub_215B82088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F850);
  __cxa_guard_abort(&qword_26788F848);
  __cxa_guard_abort(&qword_26788F840);
  _Unwind_Resume(a1);
}

void sub_215B82124(_Unwind_Exception *a1)
{
}

void sub_215B8213C()
{
}

void sub_215B82184(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B82324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B82358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B8236C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B823A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B823B4()
{
  return 65792;
}

void *sub_215B823C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B82424(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E4F0;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  unsigned int v5 = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = v5;
  }
  LODWORD(v16[0]) = 3;
  uint64_t v7 = *(void *)(a2 + 24);
  DWORD1(v16[0]) = v7;
  *(void *)uint64_t v14 = *(void *)&v16[0];
  *(_DWORD *)&v14[8] = HIDWORD(v7);
  LODWORD(v16[0]) = 1;
  *(void *)((char *)v16 + 4) = v4 | (v6 << 32);
  *(void *)&v14[12] = *(void *)&v16[0];
  *(_DWORD *)&v14[20] = v6;
  *(void *)&unsigned char v14[24] = v7;
  uint64_t v15 = *(void *)((char *)v16 + 4);
  long long v12 = a3[1];
  long long v13 = a3[2];
  long long v11 = *a3;
  *(void *)a1 = &unk_26C67DAD0;
  *(_DWORD *)(a1 + 8) = 0;
  if (v7 && HIDWORD(v7)) {
    sub_215B6926C(0, 17, (uint64_t)v14);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  int v8 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B69554(0, a1 + 16, (uint64_t)v8);
  }
  else
  {
    long long v9 = *(_OWORD *)&v14[16];
    *int v8 = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v15;
  }
  v16[0] = v11;
  v16[1] = v12;
  void v16[2] = v13;
  sub_215B69EC8(a1, v16);
  *(void *)a1 = &unk_26C67E4F0;
  return a1;
}

void sub_215B825DC(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B825F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)uint64_t v23 = v25;
  uint64_t v27 = *(unsigned int *)(v23 + 40);
  if (v27 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v27])(&a23, v24);
  }
  *(_DWORD *)(v23 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B82630(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B82648(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DAD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B826C0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  int v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6A038((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  unsigned int v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E4F0;
  return a1;
}

void sub_215B8279C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B827B0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    unsigned int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v13 = &unk_26C684900;
          uint64_t v14 = v7;
          uint64_t v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            int v8 = v15;
          }
          v11[0] = &unk_26C684900;
          v11[1] = v7;
          long long v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6977C(a1, (uint64_t)v11);
          v11[0] = &unk_26C684900;
          long long v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v13 = &unk_26C684900;
          uint64_t v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_215B829C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B829DC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    unsigned int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v17 = &unk_26C684900;
          uint64_t v18 = v7;
          long long v19 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v18;
            int v8 = v19;
          }
          v11[0] = &unk_26C684900;
          v11[1] = v7;
          long long v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6977C((uint64_t)&v13, (uint64_t)v11);
          *(void *)a1 = v13;
          *(_OWORD *)(a1 + 8) = v14;
          *(_OWORD *)(a1 + 24) = v15;
          *(void *)(a1 + 40) = v16;
          v11[0] = &unk_26C684900;
          long long v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v17 = &unk_26C684900;
          uint64_t v10 = v19;
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_215B82C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215DCAD80(&a9);
  sub_215DCAD80((void *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_215B82C28()
{
  return 17;
}

uint64_t (***sub_215B82C30())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B82CAC(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B829DC((uint64_t)v5, a1);
      sub_215B829DC((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B82D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B82DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B82DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B82DD0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B82E34(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  unsigned int v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ECE8, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_215DC95B8(v38, v7);
LABEL_11:
        sub_215B829DC((uint64_t)&v35, v6);
        v34[0] = v35;
        v34[1] = v36;
        v34[2] = v37;
        sub_215B82424((uint64_t)&v28, (uint64_t)&v35 + 8, v34);
        sub_215DC97F8(v38);
        uint64_t v11 = DWORD2(v30);
        *(_DWORD *)(a1 + 8) = DWORD2(v28);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26C67EED8[v12])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v35 = a1 + 16;
        ((void (*)(long long *))off_26C67EF08[v11])(&v35);
LABEL_16:
        long long v13 = v32;
        *(_OWORD *)(a1 + 48) = v31;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v33;
        *(void *)&long long v28 = &unk_26C67DAD0;
        if (DWORD2(v30) != -1) {
          ((void (*)(long long *, long long *))off_26C67EED8[DWORD2(v30)])(&v35, &v29);
        }
        return;
      }
      if (v8) {
        sub_215742D4C();
      }
    }
    sub_215DC9474(v38, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v35, lpsrc, 17);
  long long v10 = *(_OWORD *)(v35 + 16);
  long long v9 = *(_OWORD *)(v35 + 32);
  long long v28 = *(_OWORD *)v35;
  long long v29 = v10;
  long long v30 = v9;
  *(void *)&long long v35 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B827B0((uint64_t)&v35, a1);
  *(void *)&v34[0] = &v28;
  *((void *)&v34[0] + 1) = &v35;
  if (DWORD1(v29) == 1 && DWORD1(v36) == 1)
  {
    sub_2158A2610((size_t *)v34);
  }
  else if (DWORD2(v28) && HIDWORD(v28) && v29)
  {
    int v14 = HIDWORD(v28) - 1;
    uint64_t v15 = DWORD2(v29);
    uint64_t v16 = DWORD2(v36);
    uint64_t v17 = (unsigned char *)v28;
    uint64_t v18 = (unsigned char *)v35;
    int v19 = v29 - 1;
    if (v29 != 1)
    {
      uint64_t v20 = HIDWORD(v36);
      uint64_t v21 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *uint64_t v18 = *v17;
          v18[1] = v17[1];
          void v18[2] = v17[2];
          v17 += v21;
          v18 += v20;
          --v19;
        }
        while (v19);
      }
      else
      {
        int v22 = 0;
        uint64_t v23 = (unsigned char *)(v35 + 2);
        uint64_t v24 = (unsigned char *)(v28 + 2);
        do
        {
          uint64_t v25 = v24;
          uint64_t v26 = v23;
          int v27 = v14;
          do
          {
            *(v26 - 2) = *(v25 - 2);
            *(v26 - 1) = *(v25 - 1);
            *uint64_t v26 = *v25;
            v26 += v16;
            v25 += v15;
            --v27;
          }
          while (v27);
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *uint64_t v26 = *v25;
          v17 += v21;
          v18 += v20;
          ++v22;
          v23 += v20;
          v24 += v21;
        }
        while (v22 != v19);
      }
    }
    for (; v14; --v14)
    {
      *uint64_t v18 = *v17;
      v18[1] = v17[1];
      void v18[2] = v17[2];
      v17 += v15;
      v18 += v16;
    }
    *uint64_t v18 = *v17;
    v18[1] = v17[1];
    void v18[2] = v17[2];
  }
}

void sub_215B831B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B8321C(uint64_t a1)
{
  sub_215B827B0((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B83248(uint64_t a1, int a2)
{
  if (a2 != 17
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B827B0((uint64_t)&v3, a1);
  operator new();
}

void sub_215B832F4(uint64_t a1, int a2)
{
  if (a2 != 17
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B829DC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B833A0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F870, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F870))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F878, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F878))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F880, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F880))
    {
LABEL_13:
      if (byte_26788FE87 < 0)
      {
        sub_215738B0C(&xmmword_26788FE58, (void *)qword_26788FE70, unk_26788FE78);
      }
      else
      {
        xmmword_26788FE58 = *(_OWORD *)&qword_26788FE70;
        unk_26788FE68 = unk_26788FE80;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FE58, &dword_21572C000);
      __cxa_guard_release(&qword_26788F878);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F888, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F888))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Bgr8u>]", &qword_26788FE88);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FE88, &dword_21572C000);
      __cxa_guard_release(&qword_26788F888);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F890, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F890))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F898, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F898))
      {
        if (byte_26788FEA0[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FEA0, *(unint64_t *)&byte_26788FEA0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FEA0;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FEB8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FEB8, &dword_21572C000);
        __cxa_guard_release(&qword_26788F898);
      }
      if (byte_26788FECF < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FEB8, *((unint64_t *)&xmmword_26788FEB8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788FEB8;
        uint64_t v12 = unk_26788FEC8;
      }
      sub_2158597E0(v11, (std::string *)&qword_26788FE70);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FE70, &dword_21572C000);
      __cxa_guard_release(&qword_26788F880);
      goto LABEL_13;
    }
    if (byte_26788FE9F >= 0) {
      size_t v1 = byte_26788FE9F;
    }
    else {
      size_t v1 = unk_26788FE90;
    }
    if (byte_26788FE9F >= 0) {
      uint64_t v2 = &qword_26788FE88;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FE88;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unsigned int v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unsigned int v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FEA0[8] = v1;
      *(void *)&byte_26788FEA0[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FEA0 = v8;
    }
    else
    {
      int v8 = byte_26788FEA0;
      byte_26788FEA0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FEA0, &dword_21572C000);
    __cxa_guard_release(&qword_26788F890);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FE6F < 0)
  {
    sub_215738B0C(&xmmword_26788FE40, (void *)xmmword_26788FE58, *((unint64_t *)&xmmword_26788FE58 + 1));
  }
  else
  {
    xmmword_26788FE40 = xmmword_26788FE58;
    unk_26788FE50 = unk_26788FE68;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FE40, &dword_21572C000);
  __cxa_guard_release(&qword_26788F870);
LABEL_2:
  if (byte_26788FE57 >= 0) {
    return &xmmword_26788FE40;
  }
  else {
    return (long long *)xmmword_26788FE40;
  }
}

void sub_215B83828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F880);
  __cxa_guard_abort(&qword_26788F878);
  __cxa_guard_abort(&qword_26788F870);
  _Unwind_Resume(a1);
}

void sub_215B838C4(_Unwind_Exception *a1)
{
}

void sub_215B838DC()
{
}

void sub_215B83924(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B83AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B83AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B83B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B83B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B83B54()
{
  return 65792;
}

void *sub_215B83B60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B83BC4(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E580;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  unsigned int v5 = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = v5;
  }
  LODWORD(v16[0]) = 3;
  uint64_t v7 = *(void *)(a2 + 24);
  DWORD1(v16[0]) = v7;
  *(void *)int v14 = *(void *)&v16[0];
  *(_DWORD *)&v14[8] = HIDWORD(v7);
  LODWORD(v16[0]) = 1;
  *(void *)((char *)v16 + 4) = v4 | (v6 << 32);
  *(void *)&v14[12] = *(void *)&v16[0];
  *(_DWORD *)&v14[20] = v6;
  *(void *)&unsigned char v14[24] = v7;
  uint64_t v15 = *(void *)((char *)v16 + 4);
  long long v12 = a3[1];
  long long v13 = a3[2];
  long long v11 = *a3;
  *(void *)a1 = &unk_26C67DAD0;
  *(_DWORD *)(a1 + 8) = 0;
  if (v7 && HIDWORD(v7)) {
    sub_215B6926C(0, 21, (uint64_t)v14);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  int v8 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B69554(0, a1 + 16, (uint64_t)v8);
  }
  else
  {
    long long v9 = *(_OWORD *)&v14[16];
    *int v8 = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v15;
  }
  v16[0] = v11;
  v16[1] = v12;
  void v16[2] = v13;
  sub_215B69EC8(a1, v16);
  *(void *)a1 = &unk_26C67E580;
  return a1;
}

void sub_215B83D7C(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B83D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)uint64_t v23 = v25;
  uint64_t v27 = *(unsigned int *)(v23 + 40);
  if (v27 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v27])(&a23, v24);
  }
  *(_DWORD *)(v23 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B83DD0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B83DE8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DAD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B83E60(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  int v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6A038((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  unsigned int v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E580;
  return a1;
}

void sub_215B83F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B83F50(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    unsigned int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v13 = &unk_26C684900;
          uint64_t v14 = v7;
          uint64_t v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            int v8 = v15;
          }
          v11[0] = &unk_26C684900;
          v11[1] = v7;
          long long v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6977C(a1, (uint64_t)v11);
          v11[0] = &unk_26C684900;
          long long v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v13 = &unk_26C684900;
          uint64_t v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_215B84160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B8417C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    unsigned int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v17 = &unk_26C684900;
          uint64_t v18 = v7;
          int v19 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v18;
            int v8 = v19;
          }
          v11[0] = &unk_26C684900;
          v11[1] = v7;
          long long v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6977C((uint64_t)&v13, (uint64_t)v11);
          *(void *)a1 = v13;
          *(_OWORD *)(a1 + 8) = v14;
          *(_OWORD *)(a1 + 24) = v15;
          *(void *)(a1 + 40) = v16;
          v11[0] = &unk_26C684900;
          long long v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v17 = &unk_26C684900;
          uint64_t v10 = v19;
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_215B843AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215DCAD80(&a9);
  sub_215DCAD80((void *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_215B843C8()
{
  return 21;
}

uint64_t (***sub_215B843D0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B8444C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B8417C((uint64_t)v5, a1);
      sub_215B8417C((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B8451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B84548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8455C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B84570@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B845D4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  unsigned int v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ED00, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_215DC95B8(v38, v7);
LABEL_11:
        sub_215B8417C((uint64_t)&v35, v6);
        v34[0] = v35;
        v34[1] = v36;
        v34[2] = v37;
        sub_215B83BC4((uint64_t)&v28, (uint64_t)&v35 + 8, v34);
        sub_215DC97F8(v38);
        uint64_t v11 = DWORD2(v30);
        *(_DWORD *)(a1 + 8) = DWORD2(v28);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26C67EED8[v12])(&v35, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v35 = a1 + 16;
        ((void (*)(long long *))off_26C67EF08[v11])(&v35);
LABEL_16:
        long long v13 = v32;
        *(_OWORD *)(a1 + 48) = v31;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v33;
        *(void *)&long long v28 = &unk_26C67DAD0;
        if (DWORD2(v30) != -1) {
          ((void (*)(long long *, long long *))off_26C67EED8[DWORD2(v30)])(&v35, &v29);
        }
        return;
      }
      if (v8) {
        sub_215742D4C();
      }
    }
    sub_215DC9474(v38, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v35, lpsrc, 21);
  long long v10 = *(_OWORD *)(v35 + 16);
  long long v9 = *(_OWORD *)(v35 + 32);
  long long v28 = *(_OWORD *)v35;
  long long v29 = v10;
  long long v30 = v9;
  *(void *)&long long v35 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B83F50((uint64_t)&v35, a1);
  *(void *)&v34[0] = &v28;
  *((void *)&v34[0] + 1) = &v35;
  if (DWORD1(v29) == 1 && DWORD1(v36) == 1)
  {
    sub_2158A2610((size_t *)v34);
  }
  else if (DWORD2(v28) && HIDWORD(v28) && v29)
  {
    int v14 = HIDWORD(v28) - 1;
    uint64_t v15 = DWORD2(v29);
    uint64_t v16 = DWORD2(v36);
    uint64_t v17 = (unsigned char *)v28;
    uint64_t v18 = (unsigned char *)v35;
    int v19 = v29 - 1;
    if (v29 != 1)
    {
      uint64_t v20 = HIDWORD(v36);
      uint64_t v21 = HIDWORD(v29);
      if (HIDWORD(v28) == 1)
      {
        do
        {
          *uint64_t v18 = *v17;
          v18[1] = v17[1];
          void v18[2] = v17[2];
          v17 += v21;
          v18 += v20;
          --v19;
        }
        while (v19);
      }
      else
      {
        int v22 = 0;
        uint64_t v23 = (unsigned char *)(v35 + 2);
        uint64_t v24 = (unsigned char *)(v28 + 2);
        do
        {
          uint64_t v25 = v24;
          uint64_t v26 = v23;
          int v27 = v14;
          do
          {
            *(v26 - 2) = *(v25 - 2);
            *(v26 - 1) = *(v25 - 1);
            *uint64_t v26 = *v25;
            v26 += v16;
            v25 += v15;
            --v27;
          }
          while (v27);
          *(v26 - 2) = *(v25 - 2);
          *(v26 - 1) = *(v25 - 1);
          *uint64_t v26 = *v25;
          v17 += v21;
          v18 += v20;
          ++v22;
          v23 += v20;
          v24 += v21;
        }
        while (v22 != v19);
      }
    }
    for (; v14; --v14)
    {
      *uint64_t v18 = *v17;
      v18[1] = v17[1];
      void v18[2] = v17[2];
      v17 += v15;
      v18 += v16;
    }
    *uint64_t v18 = *v17;
    v18[1] = v17[1];
    void v18[2] = v17[2];
  }
}

void sub_215B84958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B849BC(uint64_t a1)
{
  sub_215B83F50((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B849E8(uint64_t a1, int a2)
{
  if (a2 != 21
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B83F50((uint64_t)&v3, a1);
  operator new();
}

void sub_215B84A94(uint64_t a1, int a2)
{
  if (a2 != 21
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8417C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B84B40()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F8A0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F8A8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8B0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F8B0))
    {
LABEL_13:
      if (byte_26788FF17 < 0)
      {
        sub_215738B0C(&xmmword_26788FEE8, (void *)qword_26788FF00, unk_26788FF08);
      }
      else
      {
        xmmword_26788FEE8 = *(_OWORD *)&qword_26788FF00;
        unk_26788FEF8 = unk_26788FF10;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FEE8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F8A8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8B8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F8B8))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgb8u>]", &qword_26788FF18);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FF18, &dword_21572C000);
      __cxa_guard_release(&qword_26788F8B8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8C0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F8C0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8C8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F8C8))
      {
        if (byte_26788FF30[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FF30, *(unint64_t *)&byte_26788FF30[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FF30;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FF48);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FF48, &dword_21572C000);
        __cxa_guard_release(&qword_26788F8C8);
      }
      if (byte_26788FF5F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FF48, *((unint64_t *)&xmmword_26788FF48 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788FF48;
        uint64_t v12 = unk_26788FF58;
      }
      sub_21585B698(v11, (std::string *)&qword_26788FF00);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FF00, &dword_21572C000);
      __cxa_guard_release(&qword_26788F8B0);
      goto LABEL_13;
    }
    if (byte_26788FF2F >= 0) {
      size_t v1 = byte_26788FF2F;
    }
    else {
      size_t v1 = unk_26788FF20;
    }
    if (byte_26788FF2F >= 0) {
      uint64_t v2 = &qword_26788FF18;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FF18;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      unsigned int v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        unsigned int v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FF30[8] = v1;
      *(void *)&byte_26788FF30[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FF30 = v8;
    }
    else
    {
      int v8 = byte_26788FF30;
      byte_26788FF30[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FF30, &dword_21572C000);
    __cxa_guard_release(&qword_26788F8C0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FEFF < 0)
  {
    sub_215738B0C(&xmmword_26788FED0, (void *)xmmword_26788FEE8, *((unint64_t *)&xmmword_26788FEE8 + 1));
  }
  else
  {
    xmmword_26788FED0 = xmmword_26788FEE8;
    unk_26788FEE0 = unk_26788FEF8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FED0, &dword_21572C000);
  __cxa_guard_release(&qword_26788F8A0);
LABEL_2:
  if (byte_26788FEE7 >= 0) {
    return &xmmword_26788FED0;
  }
  else {
    return (long long *)xmmword_26788FED0;
  }
}

void sub_215B84FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F8B0);
  __cxa_guard_abort(&qword_26788F8A8);
  __cxa_guard_abort(&qword_26788F8A0);
  _Unwind_Resume(a1);
}

void sub_215B85064(_Unwind_Exception *a1)
{
}

void sub_215B8507C()
{
}

void sub_215B850C4(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B85264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B85298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B852AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B852E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B852F4()
{
  return 65792;
}

void *sub_215B85300@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B85364(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E610;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v4;
  }
  *(_DWORD *)double v42 = 3;
  uint64_t v7 = *(void *)(a2 + 24);
  *(_DWORD *)&v42[4] = v7;
  *(void *)long long v35 = *(void *)v42;
  *(_DWORD *)&v35[8] = HIDWORD(v7);
  *(_DWORD *)double v42 = 1;
  *(void *)&v42[4] = v5 | (v6 << 32);
  *(void *)&v35[12] = *(void *)v42;
  *(_DWORD *)&v35[20] = v6;
  *(void *)&v35[24] = v7;
  uint64_t v36 = *(void *)&v42[4];
  long long v33 = a3[1];
  long long v34 = a3[2];
  long long v32 = *a3;
  *(void *)a1 = &unk_26C67DC80;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B6D4A0(0, 22, (uint64_t)v35);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B6D788(0, v8, (uint64_t)v9);
  }
  else
  {
    long long v10 = *(_OWORD *)&v35[16];
    *uint64_t v9 = *(_OWORD *)v35;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 80) = v36;
  }
  long long v37 = v32;
  long long v38 = v33;
  long long v39 = v34;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_41;
  }
  uint64_t v11 = *(uint64_t **)(a1 + 24);
  if (v11)
  {
    uint64_t v13 = *v11;
    uint64_t v12 = (std::__shared_weak_count *)v11[1];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (!v13) {
          goto LABEL_40;
        }
        goto LABEL_16;
      }
    }
    if (v13)
    {
LABEL_16:
      unsigned int v14 = *(_DWORD *)(a1 + 40);
      if (v14 < 2)
      {
        sub_215DC9A68(v40, v8);
LABEL_22:
        sub_215B6E790((uint64_t)v42, a1);
        v41[0] = (uint64_t)&v37;
        v41[1] = (uint64_t)v42;
        if (DWORD1(v38) == 1 && v43 == 1)
        {
          sub_2158530CC(v41);
LABEL_39:
          sub_215DC9DEC(v40);
          goto LABEL_40;
        }
        if (!DWORD2(v37) || !HIDWORD(v37) || !v38) {
          goto LABEL_39;
        }
        int v15 = HIDWORD(v37) - 1;
        uint64_t v16 = DWORD2(v38);
        uint64_t v17 = v44;
        uint64_t v18 = (_WORD *)v37;
        int v19 = *(_WORD **)v42;
        int v20 = v38 - 1;
        if (v38 != 1)
        {
          uint64_t v21 = v45;
          uint64_t v22 = HIDWORD(v38);
          if (HIDWORD(v37) == 1)
          {
            do
            {
              *int v19 = *v18;
              v19[1] = v18[1];
              void v19[2] = v18[2];
              v18 += v22;
              v19 += v21;
              --v20;
            }
            while (v20);
LABEL_38:
            *int v19 = *v18;
            v19[1] = v18[1];
            void v19[2] = v18[2];
            goto LABEL_39;
          }
          int v23 = 0;
          uint64_t v24 = *(void *)v42 + 4;
          uint64_t v25 = (_WORD *)(v37 + 4);
          uint64_t v26 = 2 * HIDWORD(v38);
          uint64_t v27 = 2 * DWORD2(v38);
          do
          {
            long long v28 = v25;
            long long v29 = (_WORD *)v24;
            int v30 = v15;
            do
            {
              *(v29 - 2) = *(v28 - 2);
              *(v29 - 1) = *(v28 - 1);
              *long long v29 = *v28;
              v29 += v17;
              long long v28 = (_WORD *)((char *)v28 + v27);
              --v30;
            }
            while (v30);
            *(v29 - 2) = *(v28 - 2);
            *(v29 - 1) = *(v28 - 1);
            *long long v29 = *v28;
            v18 += v22;
            v19 += v21;
            ++v23;
            v24 += 2 * v21;
            uint64_t v25 = (_WORD *)((char *)v25 + v26);
          }
          while (v23 != v20);
        }
        for (; v15; --v15)
        {
          *int v19 = *v18;
          v19[1] = v18[1];
          void v19[2] = v18[2];
          v18 += v16;
          v19 += v17;
        }
        goto LABEL_38;
      }
      if (v14 == 2)
      {
        sub_215DC9BAC(v40, v8);
        goto LABEL_22;
      }
LABEL_41:
      sub_215742D4C();
    }
  }
LABEL_40:
  *(void *)a1 = &unk_26C67E610;
  return a1;
}

void sub_215B8574C(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B85764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_215DC9DEC(&a27);
  *(void *)uint64_t v27 = v29;
  uint64_t v32 = *(unsigned int *)(v27 + 40);
  if (v32 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[v32])(v30 - 120, v28);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B857B0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B857C8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DC80;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B85840(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6DFB0((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E610;
  return a1;
}

void sub_215B8591C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B85930(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v13 = &unk_26C684900;
          uint64_t v14 = v7;
          int v15 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v14;
            uint64_t v8 = v15;
          }
          v11[0] = &unk_26C684900;
          v11[1] = v7;
          uint64_t v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6D9B0(a1, (uint64_t)v11);
          v11[0] = &unk_26C684900;
          uint64_t v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v13 = &unk_26C684900;
          long long v10 = v15;
          if (v15)
          {
            if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_215B85B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_215B85B5C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_22;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          uint64_t v17 = &unk_26C684900;
          uint64_t v18 = v7;
          int v19 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v18;
            uint64_t v8 = v19;
          }
          v11[0] = &unk_26C684900;
          v11[1] = v7;
          uint64_t v12 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6D9B0((uint64_t)&v13, (uint64_t)v11);
          *(void *)a1 = v13;
          *(_OWORD *)(a1 + 8) = v14;
          *(_OWORD *)(a1 + 24) = v15;
          *(void *)(a1 + 40) = v16;
          v11[0] = &unk_26C684900;
          uint64_t v9 = v12;
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          uint64_t v17 = &unk_26C684900;
          long long v10 = v19;
          if (v19)
          {
            if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_22:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }

  sub_215B59AFC(a1, 0, (_DWORD *)(a2 + 72));
}

void sub_215B85D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215DCAD80(&a9);
  sub_215DCAD80((void *)(v9 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_215B85DA8()
{
  return 22;
}

uint64_t (***sub_215B85DB0())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B85E2C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B85B5C((uint64_t)v5, a1);
      sub_215B85B5C((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B85EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B85F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B85F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B85F50@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B85FB4(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ED18, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_215DC95B8(v39, v7);
LABEL_11:
        sub_215B85B5C((uint64_t)&v36, v6);
        v35[0] = v36;
        v35[1] = v37;
        void v35[2] = v38;
        sub_215B85364((uint64_t)&v29, (uint64_t)&v36 + 8, v35);
        sub_215DC97F8(v39);
        uint64_t v11 = DWORD2(v31);
        *(_DWORD *)(a1 + 8) = DWORD2(v29);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26C67EED8[v12])(&v36, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v36 = a1 + 16;
        ((void (*)(long long *))off_26C67EF08[v11])(&v36);
LABEL_16:
        long long v13 = v33;
        *(_OWORD *)(a1 + 48) = v32;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v34;
        *(void *)&long long v29 = &unk_26C67DC80;
        if (DWORD2(v31) != -1) {
          ((void (*)(long long *, long long *))off_26C67EED8[DWORD2(v31)])(&v36, &v30);
        }
        return;
      }
      if (v8) {
        sub_215742D4C();
      }
    }
    sub_215DC9474(v39, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v36, lpsrc, 22);
  long long v10 = *(_OWORD *)(v36 + 16);
  long long v9 = *(_OWORD *)(v36 + 32);
  long long v29 = *(_OWORD *)v36;
  long long v30 = v10;
  long long v31 = v9;
  *(void *)&long long v36 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B85930((uint64_t)&v36, a1);
  *(void *)&v35[0] = &v29;
  *((void *)&v35[0] + 1) = &v36;
  if (DWORD1(v30) == 1 && DWORD1(v37) == 1)
  {
    sub_2158530CC((uint64_t *)v35);
    return;
  }
  if (DWORD2(v29) && HIDWORD(v29) && v30)
  {
    int v14 = HIDWORD(v29) - 1;
    uint64_t v15 = DWORD2(v30);
    uint64_t v16 = DWORD2(v37);
    uint64_t v17 = (_WORD *)v29;
    uint64_t v18 = (_WORD *)v36;
    int v19 = v30 - 1;
    if (v30 != 1)
    {
      uint64_t v20 = HIDWORD(v37);
      uint64_t v21 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *uint64_t v18 = *v17;
          v18[1] = v17[1];
          void v18[2] = v17[2];
          v17 += v21;
          v18 += v20;
          --v19;
        }
        while (v19);
LABEL_31:
        *uint64_t v18 = *v17;
        v18[1] = v17[1];
        void v18[2] = v17[2];
        return;
      }
      int v22 = 0;
      uint64_t v23 = 2 * DWORD2(v37);
      uint64_t v24 = (_WORD *)(v36 + 4);
      uint64_t v25 = (_WORD *)(v29 + 4);
      do
      {
        uint64_t v26 = v25;
        uint64_t v27 = v24;
        int v28 = v14;
        do
        {
          *(v27 - 2) = *(v26 - 2);
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = *v26;
          uint64_t v27 = (_WORD *)((char *)v27 + v23);
          v26 += v15;
          --v28;
        }
        while (v28);
        *(v27 - 2) = *(v26 - 2);
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = *v26;
        v17 += v21;
        v18 += v20;
        ++v22;
        v24 += v20;
        v25 += v21;
      }
      while (v22 != v19);
    }
    for (; v14; --v14)
    {
      *uint64_t v18 = *v17;
      v18[1] = v17[1];
      void v18[2] = v17[2];
      v17 += v15;
      v18 += v16;
    }
    goto LABEL_31;
  }
}

void sub_215B86358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B863BC(uint64_t a1)
{
  sub_215B85930((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B863E8(uint64_t a1, int a2)
{
  if (a2 != 22
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B85930((uint64_t)&v3, a1);
  operator new();
}

void sub_215B86494(uint64_t a1, int a2)
{
  if (a2 != 22
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B85B5C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B86540()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8D0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F8D0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F8D8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8E0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F8E0))
    {
LABEL_13:
      if (byte_26788FFA7 < 0)
      {
        sub_215738B0C(&xmmword_26788FF78, (void *)qword_26788FF90, unk_26788FF98);
      }
      else
      {
        xmmword_26788FF78 = *(_OWORD *)&qword_26788FF90;
        unk_26788FF88 = unk_26788FFA0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FF78, &dword_21572C000);
      __cxa_guard_release(&qword_26788F8D8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8E8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F8E8))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgb16u>]", &qword_26788FFA8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FFA8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F8E8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8F0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F8F0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F8F8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F8F8))
      {
        if (byte_26788FFC0[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_26788FFC0, *(unint64_t *)&byte_26788FFC0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_26788FFC0;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_26788FFD8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FFD8, &dword_21572C000);
        __cxa_guard_release(&qword_26788F8F8);
      }
      if (byte_26788FFEF < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_26788FFD8, *((unint64_t *)&xmmword_26788FFD8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_26788FFD8;
        uint64_t v12 = unk_26788FFE8;
      }
      sub_21585BD4C(v11, (std::string *)&qword_26788FF90);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788FF90, &dword_21572C000);
      __cxa_guard_release(&qword_26788F8E0);
      goto LABEL_13;
    }
    if (byte_26788FFBF >= 0) {
      size_t v1 = byte_26788FFBF;
    }
    else {
      size_t v1 = unk_26788FFB0;
    }
    if (byte_26788FFBF >= 0) {
      uint64_t v2 = &qword_26788FFA8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_26788FFA8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_26788FFC0[8] = v1;
      *(void *)&byte_26788FFC0[16] = v10 | 0x8000000000000000;
      *(void *)byte_26788FFC0 = v8;
    }
    else
    {
      int v8 = byte_26788FFC0;
      byte_26788FFC0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_26788FFC0, &dword_21572C000);
    __cxa_guard_release(&qword_26788F8F0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26788FF8F < 0)
  {
    sub_215738B0C(&xmmword_26788FF60, (void *)xmmword_26788FF78, *((unint64_t *)&xmmword_26788FF78 + 1));
  }
  else
  {
    xmmword_26788FF60 = xmmword_26788FF78;
    unk_26788FF70 = unk_26788FF88;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FF60, &dword_21572C000);
  __cxa_guard_release(&qword_26788F8D0);
LABEL_2:
  if (byte_26788FF77 >= 0) {
    return &xmmword_26788FF60;
  }
  else {
    return (long long *)xmmword_26788FF60;
  }
}

void sub_215B869C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F8E0);
  __cxa_guard_abort(&qword_26788F8D8);
  __cxa_guard_abort(&qword_26788F8D0);
  _Unwind_Resume(a1);
}

void sub_215B86A64(_Unwind_Exception *a1)
{
}

void sub_215B86A7C()
{
}

void sub_215B86AC4(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B86C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B86C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B86CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B86CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B86CF4()
{
  return 65792;
}

void *sub_215B86D00@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B86D64(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E6A0;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  unsigned int v5 = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = v5;
  }
  LODWORD(v16[0]) = 4;
  uint64_t v7 = *(void *)(a2 + 24);
  DWORD1(v16[0]) = v7;
  *(void *)int v14 = *(void *)&v16[0];
  *(_DWORD *)&v14[8] = HIDWORD(v7);
  LODWORD(v16[0]) = 1;
  *(void *)((char *)v16 + 4) = v4 | (v6 << 32);
  *(void *)&v14[12] = *(void *)&v16[0];
  *(_DWORD *)&v14[20] = v6;
  *(void *)&unsigned char v14[24] = v7;
  uint64_t v15 = *(void *)((char *)v16 + 4);
  long long v12 = a3[1];
  long long v13 = a3[2];
  long long v11 = *a3;
  *(void *)a1 = &unk_26C67DB60;
  *(_DWORD *)(a1 + 8) = 0;
  if (v7 && HIDWORD(v7)) {
    sub_215B6A96C(0, 25, (uint64_t)v14);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  int v8 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B6AC54(0, a1 + 16, (uint64_t)v8);
  }
  else
  {
    long long v9 = *(_OWORD *)&v14[16];
    *int v8 = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v15;
  }
  v16[0] = v11;
  v16[1] = v12;
  void v16[2] = v13;
  sub_215B6B528(a1, v16);
  *(void *)a1 = &unk_26C67E6A0;
  return a1;
}

void sub_215B86F1C(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B86F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)uint64_t v23 = v25;
  uint64_t v27 = *(unsigned int *)(v23 + 40);
  if (v27 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v27])(&a23, v24);
  }
  *(_DWORD *)(v23 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B86F70(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B86F88(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DB60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B87000(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  int v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6B698((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  unsigned int v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E6A0;
  return a1;
}

void sub_215B870DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B870F0(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    unsigned int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6AE7C(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B87374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B87390(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          int v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6AE7C((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B87634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B87650()
{
  return 25;
}

uint64_t (***sub_215B87658())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B876D4(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B87390((uint64_t)v5, a1);
      sub_215B87390((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B877A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B877D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B877E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B877F8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B8785C(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ED30, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_215DC95B8(v25, v7);
LABEL_11:
        sub_215B87390((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        void v21[2] = v24;
        sub_215B86D64((uint64_t)&v15, (uint64_t)&v22 + 8, v21);
        sub_215DC97F8(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26C67EED8[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26C67EF08[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26C67DB60;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26C67EED8[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_215742D4C();
      }
    }
    sub_215DC9474(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 25);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B870F0((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_2158A2610((size_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_2158A6EF0((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_215B87AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B87B58(uint64_t a1)
{
  sub_215B870F0((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B87B84(uint64_t a1, int a2)
{
  if (a2 != 25
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B870F0((uint64_t)&v3, a1);
  operator new();
}

void sub_215B87C30(uint64_t a1, int a2)
{
  if (a2 != 25
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B87390((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B87CDC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F900, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F900))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F908, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F908))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F910, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F910))
    {
LABEL_13:
      if (byte_267890037 < 0)
      {
        sub_215738B0C(&xmmword_267890008, (void *)qword_267890020, unk_267890028);
      }
      else
      {
        xmmword_267890008 = *(_OWORD *)&qword_267890020;
        unk_267890018 = unk_267890030;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890008, &dword_21572C000);
      __cxa_guard_release(&qword_26788F908);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F918, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F918))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Bgra8u>]", &qword_267890038);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267890038, &dword_21572C000);
      __cxa_guard_release(&qword_26788F918);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F920, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F920))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F928, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F928))
      {
        if (byte_267890050[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_267890050, *(unint64_t *)&byte_267890050[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267890050;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267890068);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890068, &dword_21572C000);
        __cxa_guard_release(&qword_26788F928);
      }
      if (byte_26789007F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_267890068, *((unint64_t *)&xmmword_267890068 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267890068;
        uint64_t v12 = unk_267890078;
      }
      sub_21585D348(v11, (std::string *)&qword_267890020);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267890020, &dword_21572C000);
      __cxa_guard_release(&qword_26788F910);
      goto LABEL_13;
    }
    if (byte_26789004F >= 0) {
      size_t v1 = byte_26789004F;
    }
    else {
      size_t v1 = unk_267890040;
    }
    if (byte_26789004F >= 0) {
      uint64_t v2 = &qword_267890038;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267890038;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267890050[8] = v1;
      *(void *)&byte_267890050[16] = v10 | 0x8000000000000000;
      *(void *)byte_267890050 = v8;
    }
    else
    {
      int v8 = byte_267890050;
      byte_267890050[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267890050, &dword_21572C000);
    __cxa_guard_release(&qword_26788F920);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26789001F < 0)
  {
    sub_215738B0C(&xmmword_26788FFF0, (void *)xmmword_267890008, *((unint64_t *)&xmmword_267890008 + 1));
  }
  else
  {
    xmmword_26788FFF0 = xmmword_267890008;
    unk_267890000 = unk_267890018;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788FFF0, &dword_21572C000);
  __cxa_guard_release(&qword_26788F900);
LABEL_2:
  if (byte_267890007 >= 0) {
    return &xmmword_26788FFF0;
  }
  else {
    return (long long *)xmmword_26788FFF0;
  }
}

void sub_215B88164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F910);
  __cxa_guard_abort(&qword_26788F908);
  __cxa_guard_abort(&qword_26788F900);
  _Unwind_Resume(a1);
}

void sub_215B88200(_Unwind_Exception *a1)
{
}

void sub_215B88218()
{
}

void sub_215B88260(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B88400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B88434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B88448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B8847C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B88490()
{
  return 65792;
}

void *sub_215B8849C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B88500(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E730;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  unsigned int v5 = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = v5;
  }
  LODWORD(v16[0]) = 4;
  uint64_t v7 = *(void *)(a2 + 24);
  DWORD1(v16[0]) = v7;
  *(void *)char v14 = *(void *)&v16[0];
  *(_DWORD *)&v14[8] = HIDWORD(v7);
  LODWORD(v16[0]) = 1;
  *(void *)((char *)v16 + 4) = v4 | (v6 << 32);
  *(void *)&v14[12] = *(void *)&v16[0];
  *(_DWORD *)&v14[20] = v6;
  *(void *)&unsigned char v14[24] = v7;
  uint64_t v15 = *(void *)((char *)v16 + 4);
  long long v12 = a3[1];
  long long v13 = a3[2];
  long long v11 = *a3;
  *(void *)a1 = &unk_26C67DB60;
  *(_DWORD *)(a1 + 8) = 0;
  if (v7 && HIDWORD(v7)) {
    sub_215B6A96C(0, 29, (uint64_t)v14);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  int v8 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B6AC54(0, a1 + 16, (uint64_t)v8);
  }
  else
  {
    long long v9 = *(_OWORD *)&v14[16];
    *int v8 = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v15;
  }
  v16[0] = v11;
  v16[1] = v12;
  void v16[2] = v13;
  sub_215B6B528(a1, v16);
  *(void *)a1 = &unk_26C67E730;
  return a1;
}

void sub_215B886B8(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B886D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)uint64_t v23 = v25;
  uint64_t v27 = *(unsigned int *)(v23 + 40);
  if (v27 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v27])(&a23, v24);
  }
  *(_DWORD *)(v23 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B8870C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B88724(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DB60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B8879C(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  int v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6B698((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  unsigned int v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E730;
  return a1;
}

void sub_215B88878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8888C(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    unsigned int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6AE7C(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B88B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B88B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6AE7C((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B88DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B88DEC()
{
  return 29;
}

uint64_t (***sub_215B88DF4())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B88E70(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B88B2C((uint64_t)v5, a1);
      sub_215B88B2C((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B88F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B88F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B88F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B88F94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B88FF8(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ED48, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_215DC95B8(v25, v7);
LABEL_11:
        sub_215B88B2C((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        void v21[2] = v24;
        sub_215B88500((uint64_t)&v15, (uint64_t)&v22 + 8, v21);
        sub_215DC97F8(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26C67EED8[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26C67EF08[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26C67DB60;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26C67EED8[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_215742D4C();
      }
    }
    sub_215DC9474(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 29);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B8888C((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_2158A2610((size_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_2158A6EF0((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_215B89290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B892F4(uint64_t a1)
{
  sub_215B8888C((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B89320(uint64_t a1, int a2)
{
  if (a2 != 29
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8888C((uint64_t)&v3, a1);
  operator new();
}

void sub_215B893CC(uint64_t a1, int a2)
{
  if (a2 != 29
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B88B2C((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B89478()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F930, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F930))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F938, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F938))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F940, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F940))
    {
LABEL_13:
      if (byte_2678900C7 < 0)
      {
        sub_215738B0C(&xmmword_267890098, (void *)qword_2678900B0, unk_2678900B8);
      }
      else
      {
        xmmword_267890098 = *(_OWORD *)&qword_2678900B0;
        unk_2678900A8 = unk_2678900C0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890098, &dword_21572C000);
      __cxa_guard_release(&qword_26788F938);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F948, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F948))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgba8u>]", &qword_2678900C8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_2678900C8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F948);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F950, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F950))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F958, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F958))
      {
        if (byte_2678900E0[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_2678900E0, *(unint64_t *)&byte_2678900E0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_2678900E0;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_2678900F8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678900F8, &dword_21572C000);
        __cxa_guard_release(&qword_26788F958);
      }
      if (byte_26789010F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_2678900F8, *((unint64_t *)&xmmword_2678900F8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_2678900F8;
        uint64_t v12 = unk_267890108;
      }
      sub_21585F0FC(v11, (std::string *)&qword_2678900B0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_2678900B0, &dword_21572C000);
      __cxa_guard_release(&qword_26788F940);
      goto LABEL_13;
    }
    if (byte_2678900DF >= 0) {
      size_t v1 = byte_2678900DF;
    }
    else {
      size_t v1 = unk_2678900D0;
    }
    if (byte_2678900DF >= 0) {
      uint64_t v2 = &qword_2678900C8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_2678900C8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_2678900E0[8] = v1;
      *(void *)&byte_2678900E0[16] = v10 | 0x8000000000000000;
      *(void *)byte_2678900E0 = v8;
    }
    else
    {
      int v8 = byte_2678900E0;
      byte_2678900E0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_2678900E0, &dword_21572C000);
    __cxa_guard_release(&qword_26788F950);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_2678900AF < 0)
  {
    sub_215738B0C(&xmmword_267890080, (void *)xmmword_267890098, *((unint64_t *)&xmmword_267890098 + 1));
  }
  else
  {
    xmmword_267890080 = xmmword_267890098;
    unk_267890090 = unk_2678900A8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890080, &dword_21572C000);
  __cxa_guard_release(&qword_26788F930);
LABEL_2:
  if (byte_267890097 >= 0) {
    return &xmmword_267890080;
  }
  else {
    return (long long *)xmmword_267890080;
  }
}

void sub_215B89900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F940);
  __cxa_guard_abort(&qword_26788F938);
  __cxa_guard_abort(&qword_26788F930);
  _Unwind_Resume(a1);
}

void sub_215B8999C(_Unwind_Exception *a1)
{
}

void sub_215B899B4()
{
}

void sub_215B899FC(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B89B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B89BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B89BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B89C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B89C2C()
{
  return 65792;
}

void *sub_215B89C38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B89C9C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E7C0;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v4;
  }
  *(_DWORD *)long long v24 = 4;
  uint64_t v7 = *(void *)(a2 + 24);
  *(_DWORD *)&v24[4] = v7;
  *(void *)long long v19 = *(void *)v24;
  *(_DWORD *)&v19[8] = HIDWORD(v7);
  *(_DWORD *)long long v24 = 1;
  *(void *)&v24[4] = v5 | (v6 << 32);
  *(void *)&v19[12] = *(void *)v24;
  *(_DWORD *)&v19[20] = v6;
  *(void *)&v19[24] = v7;
  uint64_t v20 = *(void *)&v24[4];
  long long v17 = a3[1];
  long long v18 = a3[2];
  long long v16 = *a3;
  *(void *)a1 = &unk_26C67DEC0;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B7299C(0, 31, (uint64_t)v19);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B72C84(0, v8, (uint64_t)v9);
  }
  else
  {
    long long v10 = *(_OWORD *)&v19[16];
    *uint64_t v9 = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 80) = v20;
  }
  v21[0] = v16;
  v21[1] = v17;
  void v21[2] = v18;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_24;
  }
  uint64_t v11 = *(uint64_t **)(a1 + 24);
  if (v11)
  {
    uint64_t v13 = *v11;
    uint64_t v12 = (std::__shared_weak_count *)v11[1];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (!v13) {
          goto LABEL_23;
        }
        goto LABEL_16;
      }
    }
    if (v13)
    {
LABEL_16:
      unsigned int v14 = *(_DWORD *)(a1 + 40);
      if (v14 < 2)
      {
        sub_215DC9A68(v22, v8);
LABEL_22:
        sub_215B73CBC((uint64_t)v24, a1);
        v23[0] = v21;
        v23[1] = v24;
        sub_2158A79C0(v23);
        sub_215DC9DEC(v22);
        goto LABEL_23;
      }
      if (v14 == 2)
      {
        sub_215DC9BAC(v22, v8);
        goto LABEL_22;
      }
LABEL_24:
      sub_215742D4C();
    }
  }
LABEL_23:
  *(void *)a1 = &unk_26C67E7C0;
  return a1;
}

void sub_215B89F24(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B89F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_215DC9DEC(&a27);
  *(void *)uint64_t v27 = v29;
  uint64_t v32 = *(unsigned int *)(v27 + 40);
  if (v32 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[v32])(v30 - 120, v28);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B89F88(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B89FA0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DEC0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B8A018(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B734C4((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E7C0;
  return a1;
}

void sub_215B8A0F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8A108(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B72EAC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B8A38C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B8A3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            uint64_t v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B72EAC((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B8A64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B8A668()
{
  return 31;
}

uint64_t (***sub_215B8A670())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B8A6EC(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B8A3A8((uint64_t)v5, a1);
      sub_215B8A3A8((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B8A7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8A7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8A7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B8A810@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B8A874(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ED60, 0);
  if (!v5)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(v26, lpsrc, 31);
    uint64_t v9 = *(void *)&v26[0];
    long long v11 = *(_OWORD *)(*(void *)&v26[0] + 16);
    long long v10 = *(_OWORD *)(*(void *)&v26[0] + 32);
    long long v19 = **(_OWORD **)&v26[0];
    long long v20 = v11;
    long long v21 = v10;
    *(void *)&v26[0] = 0;
    MEMORY[0x2166C4D20](v9, 0xC400A2AC0F1, v12, v13, v14, v15);
    sub_215B8A108((uint64_t)v26, a1);
    *(void *)&v25[0] = &v19;
    *((void *)&v25[0] + 1) = v26;
    sub_2158A79C0(v25);
    return;
  }
  uint64_t v6 = (uint64_t)v5;
  uint64_t v7 = (uint64_t)(v5 + 4);
  int v8 = v5[10];
  if (v8 == 2) {
    goto LABEL_5;
  }
  if (v8 != 1)
  {
    if (v8) {
      sub_215742D4C();
    }
LABEL_5:
    sub_215DC9474(v27, v7);
    goto LABEL_8;
  }
  sub_215DC95B8(v27, v7);
LABEL_8:
  sub_215B8A3A8((uint64_t)v26, v6);
  v25[0] = v26[0];
  v25[1] = v26[1];
  void v25[2] = v26[2];
  sub_215B89C9C((uint64_t)&v19, (uint64_t)v26 + 8, v25);
  sub_215DC97F8(v27);
  uint64_t v16 = DWORD2(v21);
  *(_DWORD *)(a1 + 8) = DWORD2(v19);
  uint64_t v17 = *(unsigned int *)(a1 + 40);
  if (v17 == -1)
  {
    if (v16 == -1) {
      goto LABEL_13;
    }
  }
  else if (v16 == -1)
  {
    ((void (*)(_OWORD *, uint64_t))off_26C67EED8[v17])(v26, a1 + 16);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_13;
  }
  *(void *)&v26[0] = a1 + 16;
  ((void (*)(_OWORD *))off_26C67EF08[v16])(v26);
LABEL_13:
  long long v18 = v23;
  *(_OWORD *)(a1 + 48) = v22;
  *(_OWORD *)(a1 + 64) = v18;
  *(void *)(a1 + 80) = v24;
  *(void *)&long long v19 = &unk_26C67DEC0;
  if (DWORD2(v21) != -1) {
    ((void (*)(_OWORD *, long long *))off_26C67EED8[DWORD2(v21)])(v26, &v20);
  }
}

void sub_215B8AAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a14])(&a21, v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B8AB1C(uint64_t a1)
{
  sub_215B8A108((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B8AB48(uint64_t a1, int a2)
{
  if (a2 != 31
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8A108((uint64_t)&v3, a1);
  operator new();
}

void sub_215B8ABF4(uint64_t a1, int a2)
{
  if (a2 != 31
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8A3A8((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B8ACA0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F960, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F960))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F968))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F970, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F970))
    {
LABEL_13:
      if (byte_267890157 < 0)
      {
        sub_215738B0C(&xmmword_267890128, (void *)qword_267890140, unk_267890148);
      }
      else
      {
        xmmword_267890128 = *(_OWORD *)&qword_267890140;
        unk_267890138 = unk_267890150;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890128, &dword_21572C000);
      __cxa_guard_release(&qword_26788F968);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F978, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F978))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgba16f>]", &qword_267890158);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267890158, &dword_21572C000);
      __cxa_guard_release(&qword_26788F978);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F980, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F980))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F988, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F988))
      {
        if (byte_267890170[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_267890170, *(unint64_t *)&byte_267890170[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267890170;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267890188);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890188, &dword_21572C000);
        __cxa_guard_release(&qword_26788F988);
      }
      if (byte_26789019F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_267890188, *((unint64_t *)&xmmword_267890188 + 1));
      }
      else
      {
        *(_OWORD *)long long v11 = xmmword_267890188;
        uint64_t v12 = unk_267890198;
      }
      sub_21586006C(v11, (std::string *)&qword_267890140);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267890140, &dword_21572C000);
      __cxa_guard_release(&qword_26788F970);
      goto LABEL_13;
    }
    if (byte_26789016F >= 0) {
      size_t v1 = byte_26789016F;
    }
    else {
      size_t v1 = unk_267890160;
    }
    if (byte_26789016F >= 0) {
      uint64_t v2 = &qword_267890158;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267890158;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267890170[8] = v1;
      *(void *)&byte_267890170[16] = v10 | 0x8000000000000000;
      *(void *)byte_267890170 = v8;
    }
    else
    {
      int v8 = byte_267890170;
      byte_267890170[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267890170, &dword_21572C000);
    __cxa_guard_release(&qword_26788F980);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26789013F < 0)
  {
    sub_215738B0C(&xmmword_267890110, (void *)xmmword_267890128, *((unint64_t *)&xmmword_267890128 + 1));
  }
  else
  {
    xmmword_267890110 = xmmword_267890128;
    unk_267890120 = unk_267890138;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890110, &dword_21572C000);
  __cxa_guard_release(&qword_26788F960);
LABEL_2:
  if (byte_267890127 >= 0) {
    return &xmmword_267890110;
  }
  else {
    return (long long *)xmmword_267890110;
  }
}

void sub_215B8B128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F970);
  __cxa_guard_abort(&qword_26788F968);
  __cxa_guard_abort(&qword_26788F960);
  _Unwind_Resume(a1);
}

void sub_215B8B1C4(_Unwind_Exception *a1)
{
}

void sub_215B8B1DC()
{
}

void sub_215B8B224(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B8B3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B8B3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B8B40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B8B440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B8B454()
{
  return 65792;
}

void *sub_215B8B460@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B8B4C4(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E850;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  if (v4 <= 8) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = v4;
  }
  *(_DWORD *)uint64_t v28 = 4;
  uint64_t v7 = *(void *)(a2 + 24);
  *(_DWORD *)&v28[4] = v7;
  *(void *)long long v19 = *(void *)v28;
  *(_DWORD *)&v19[8] = HIDWORD(v7);
  *(_DWORD *)uint64_t v28 = 1;
  *(void *)&v28[4] = v5 | (v6 << 32);
  *(void *)&v19[12] = *(void *)v28;
  *(_DWORD *)&v19[20] = v6;
  *(void *)&v19[24] = v7;
  uint64_t v20 = *(void *)&v28[4];
  long long v17 = a3[1];
  long long v18 = a3[2];
  long long v16 = *a3;
  *(void *)a1 = &unk_26C67E070;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B769AC(0, 32, (uint64_t)v19);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B76C94(0, v8, (uint64_t)v9);
  }
  else
  {
    long long v10 = *(_OWORD *)&v19[16];
    *uint64_t v9 = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 80) = v20;
  }
  long long v21 = v16;
  long long v22 = v17;
  long long v23 = v18;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_31;
  }
  long long v11 = *(uint64_t **)(a1 + 24);
  if (!v11) {
    goto LABEL_30;
  }
  uint64_t v13 = *v11;
  uint64_t v12 = (std::__shared_weak_count *)v11[1];
  if (v12
    && (atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v13) {
      goto LABEL_30;
    }
  }
  else if (!v13)
  {
    goto LABEL_30;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 40);
  if (v14 < 2)
  {
    sub_215DC9A68(v24, v8);
    goto LABEL_22;
  }
  if (v14 != 2) {
LABEL_31:
  }
    sub_215742D4C();
  sub_215DC9BAC(v24, v8);
LABEL_22:
  sub_215B77CCC((uint64_t)v28, a1);
  v25[0] = (uint64_t)&v21;
  v25[1] = (uint64_t)v28;
  if (DWORD1(v22) == 1 && v29 == 1)
  {
    sub_215854ED0(v25);
  }
  else
  {
    char v26 = 0;
    if (DWORD2(v21) && HIDWORD(v21) && v22)
    {
      uint64_t v27 = &v26;
      sub_2158A81CC((uint64_t)&v27, (uint64_t)&v21, (uint64_t)v28);
    }
  }
  sub_215DC9DEC(v24);
LABEL_30:
  *(void *)a1 = &unk_26C67E850;
  return a1;
}

void sub_215B8B79C(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B8B7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_215DC9DEC(&a27);
  *(void *)uint64_t v27 = v29;
  uint64_t v32 = *(unsigned int *)(v27 + 40);
  if (v32 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[v32])(v30 - 120, v28);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B8B800(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B8B818(uint64_t a1)
{
  *(void *)a1 = &unk_26C67E070;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B8B890(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B774D4((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E850;
  return a1;
}

void sub_215B8B96C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8B980(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          long long v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B76EBC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B8BC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B8BC20(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            uint64_t v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B76EBC((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)long long v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)long long v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B8BEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B8BEE0()
{
  return 32;
}

uint64_t (***sub_215B8BEE8())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B8BF64(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B8BC20((uint64_t)v5, a1);
      sub_215B8BC20((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B8C034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8C060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8C074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B8C088@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

float sub_215B8C0EC(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ED78, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_215DC95B8(v26, v7);
LABEL_11:
        sub_215B8BC20((uint64_t)&v23, v6);
        v22[0] = v23;
        v22[1] = v24;
        uint64_t v22[2] = v25;
        sub_215B8B4C4((uint64_t)&v16, (uint64_t)&v23 + 8, v22);
        sub_215DC97F8(v26);
        uint64_t v12 = DWORD2(v18);
        *(_DWORD *)(a1 + 8) = DWORD2(v16);
        uint64_t v13 = *(unsigned int *)(a1 + 40);
        if (v13 == -1)
        {
          if (v12 == -1) {
            goto LABEL_16;
          }
        }
        else if (v12 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26C67EED8[v13])(&v23, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v23 = a1 + 16;
        ((void (*)(long long *))off_26C67EF08[v12])(&v23);
LABEL_16:
        float result = *(float *)&v19;
        long long v14 = v20;
        *(_OWORD *)(a1 + 48) = v19;
        *(_OWORD *)(a1 + 64) = v14;
        *(void *)(a1 + 80) = v21;
        *(void *)&long long v16 = &unk_26C67E070;
        if (DWORD2(v18) != -1) {
          ((void (*)(long long *, long long *))off_26C67EED8[DWORD2(v18)])(&v23, &v17);
        }
        return result;
      }
      if (v8) {
        sub_215742D4C();
      }
    }
    sub_215DC9474(v26, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v23, lpsrc, 32);
  long long v10 = *(_OWORD *)(v23 + 16);
  long long v9 = *(_OWORD *)(v23 + 32);
  long long v16 = *(_OWORD *)v23;
  long long v17 = v10;
  long long v18 = v9;
  *(void *)&long long v23 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B8B980((uint64_t)&v23, a1);
  *(void *)&v22[0] = &v16;
  *((void *)&v22[0] + 1) = &v23;
  if (DWORD1(v17) == 1 && DWORD1(v24) == 1)
  {
    sub_215854ED0((uint64_t *)v22);
  }
  else
  {
    char v15 = 0;
    if (DWORD2(v16) && HIDWORD(v16) && v17)
    {
      v26[0] = &v15;
      return sub_2158A81CC((uint64_t)v26, (uint64_t)&v16, (uint64_t)&v23);
    }
  }
  return result;
}

void sub_215B8C384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B8C3E8(uint64_t a1)
{
  sub_215B8B980((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B8C414(uint64_t a1, int a2)
{
  if (a2 != 32
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8B980((uint64_t)&v3, a1);
  operator new();
}

void sub_215B8C4C0(uint64_t a1, int a2)
{
  if (a2 != 32
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8BC20((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B8C56C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F990, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F990))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F998, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F998))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9A0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F9A0))
    {
LABEL_13:
      if (byte_2678901E7 < 0)
      {
        sub_215738B0C(&xmmword_2678901B8, (void *)qword_2678901D0, unk_2678901D8);
      }
      else
      {
        xmmword_2678901B8 = *(_OWORD *)&qword_2678901D0;
        unk_2678901C8 = unk_2678901E0;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678901B8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F998);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F9A8))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Rgba32f>]", &qword_2678901E8);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_2678901E8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F9A8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9B0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F9B0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9B8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F9B8))
      {
        if (byte_267890200[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_267890200, *(unint64_t *)&byte_267890200[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267890200;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267890218);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890218, &dword_21572C000);
        __cxa_guard_release(&qword_26788F9B8);
      }
      if (byte_26789022F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_267890218, *((unint64_t *)&xmmword_267890218 + 1));
      }
      else
      {
        *(_OWORD *)BOOL v11 = xmmword_267890218;
        uint64_t v12 = unk_267890228;
      }
      sub_2158606F8(v11, (std::string *)&qword_2678901D0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_2678901D0, &dword_21572C000);
      __cxa_guard_release(&qword_26788F9A0);
      goto LABEL_13;
    }
    if (byte_2678901FF >= 0) {
      size_t v1 = byte_2678901FF;
    }
    else {
      size_t v1 = unk_2678901F0;
    }
    if (byte_2678901FF >= 0) {
      uint64_t v2 = &qword_2678901E8;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_2678901E8;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267890200[8] = v1;
      *(void *)&byte_267890200[16] = v10 | 0x8000000000000000;
      *(void *)byte_267890200 = v8;
    }
    else
    {
      int v8 = byte_267890200;
      byte_267890200[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267890200, &dword_21572C000);
    __cxa_guard_release(&qword_26788F9B0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_2678901CF < 0)
  {
    sub_215738B0C(&xmmword_2678901A0, (void *)xmmword_2678901B8, *((unint64_t *)&xmmword_2678901B8 + 1));
  }
  else
  {
    xmmword_2678901A0 = xmmword_2678901B8;
    unk_2678901B0 = unk_2678901C8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678901A0, &dword_21572C000);
  __cxa_guard_release(&qword_26788F990);
LABEL_2:
  if (byte_2678901B7 >= 0) {
    return &xmmword_2678901A0;
  }
  else {
    return (long long *)xmmword_2678901A0;
  }
}

void sub_215B8C9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F9A0);
  __cxa_guard_abort(&qword_26788F998);
  __cxa_guard_abort(&qword_26788F990);
  _Unwind_Resume(a1);
}

void sub_215B8CA90(_Unwind_Exception *a1)
{
}

void sub_215B8CAA8()
{
}

void sub_215B8CAF0(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B8CC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B8CCC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B8CCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B8CD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B8CD20()
{
  return 65792;
}

void *sub_215B8CD2C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B8CD90(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E8E0;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  unsigned int v5 = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = v5;
  }
  LODWORD(v16[0]) = 4;
  uint64_t v7 = *(void *)(a2 + 24);
  DWORD1(v16[0]) = v7;
  *(void *)long long v14 = *(void *)&v16[0];
  *(_DWORD *)&v14[8] = HIDWORD(v7);
  LODWORD(v16[0]) = 1;
  *(void *)((char *)v16 + 4) = v4 | (v6 << 32);
  *(void *)&v14[12] = *(void *)&v16[0];
  *(_DWORD *)&v14[20] = v6;
  *(void *)&unsigned char v14[24] = v7;
  uint64_t v15 = *(void *)((char *)v16 + 4);
  long long v12 = a3[1];
  long long v13 = a3[2];
  long long v11 = *a3;
  *(void *)a1 = &unk_26C67DB60;
  *(_DWORD *)(a1 + 8) = 0;
  if (v7 && HIDWORD(v7)) {
    sub_215B6A96C(0, 33, (uint64_t)v14);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  int v8 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B6AC54(0, a1 + 16, (uint64_t)v8);
  }
  else
  {
    long long v9 = *(_OWORD *)&v14[16];
    *int v8 = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v15;
  }
  v16[0] = v11;
  v16[1] = v12;
  void v16[2] = v13;
  sub_215B6B528(a1, v16);
  *(void *)a1 = &unk_26C67E8E0;
  return a1;
}

void sub_215B8CF48(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B8CF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)uint64_t v23 = v25;
  uint64_t v27 = *(unsigned int *)(v23 + 40);
  if (v27 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v27])(&a23, v24);
  }
  *(_DWORD *)(v23 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B8CF9C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B8CFB4(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DB60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B8D02C(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  int v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6B698((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  unsigned int v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E8E0;
  return a1;
}

void sub_215B8D108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8D11C(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    unsigned int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6AE7C(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B8D3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B8D3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6AE7C((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B8D660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B8D67C()
{
  return 33;
}

uint64_t (***sub_215B8D684())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B8D700(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B8D3BC((uint64_t)v5, a1);
      sub_215B8D3BC((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B8D7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8D7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8D810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B8D824@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B8D888(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67ED90, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_215DC95B8(v25, v7);
LABEL_11:
        sub_215B8D3BC((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        void v21[2] = v24;
        sub_215B8CD90((uint64_t)&v15, (uint64_t)&v22 + 8, v21);
        sub_215DC97F8(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26C67EED8[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26C67EF08[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26C67DB60;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26C67EED8[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_215742D4C();
      }
    }
    sub_215DC9474(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 33);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B8D11C((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_2158A2610((size_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_2158A6EF0((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_215B8DB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B8DB84(uint64_t a1)
{
  sub_215B8D11C((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B8DBB0(uint64_t a1, int a2)
{
  if (a2 != 33
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8D11C((uint64_t)&v3, a1);
  operator new();
}

void sub_215B8DC5C(uint64_t a1, int a2)
{
  if (a2 != 33
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8D3BC((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B8DD08()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9C0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F9C0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F9C8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9D0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F9D0))
    {
LABEL_13:
      if (byte_267890277 < 0)
      {
        sub_215738B0C(&xmmword_267890248, (void *)qword_267890260, unk_267890268);
      }
      else
      {
        xmmword_267890248 = *(_OWORD *)&qword_267890260;
        unk_267890258 = unk_267890270;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890248, &dword_21572C000);
      __cxa_guard_release(&qword_26788F9C8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9D8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788F9D8))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Abgr8u>]", &qword_267890278);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267890278, &dword_21572C000);
      __cxa_guard_release(&qword_26788F9D8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9E0, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788F9E0))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9E8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788F9E8))
      {
        if (byte_267890290[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_267890290, *(unint64_t *)&byte_267890290[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267890290;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_2678902A8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678902A8, &dword_21572C000);
        __cxa_guard_release(&qword_26788F9E8);
      }
      if (byte_2678902BF < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_2678902A8, *((unint64_t *)&xmmword_2678902A8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_2678902A8;
        uint64_t v12 = unk_2678902B8;
      }
      sub_215860DAC(v11, (std::string *)&qword_267890260);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267890260, &dword_21572C000);
      __cxa_guard_release(&qword_26788F9D0);
      goto LABEL_13;
    }
    if (byte_26789028F >= 0) {
      size_t v1 = byte_26789028F;
    }
    else {
      size_t v1 = unk_267890280;
    }
    if (byte_26789028F >= 0) {
      uint64_t v2 = &qword_267890278;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267890278;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267890290[8] = v1;
      *(void *)&byte_267890290[16] = v10 | 0x8000000000000000;
      *(void *)byte_267890290 = v8;
    }
    else
    {
      int v8 = byte_267890290;
      byte_267890290[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267890290, &dword_21572C000);
    __cxa_guard_release(&qword_26788F9E0);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26789025F < 0)
  {
    sub_215738B0C(&xmmword_267890230, (void *)xmmword_267890248, *((unint64_t *)&xmmword_267890248 + 1));
  }
  else
  {
    xmmword_267890230 = xmmword_267890248;
    unk_267890240 = unk_267890258;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890230, &dword_21572C000);
  __cxa_guard_release(&qword_26788F9C0);
LABEL_2:
  if (byte_267890247 >= 0) {
    return &xmmword_267890230;
  }
  else {
    return (long long *)xmmword_267890230;
  }
}

void sub_215B8E190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788F9D0);
  __cxa_guard_abort(&qword_26788F9C8);
  __cxa_guard_abort(&qword_26788F9C0);
  _Unwind_Resume(a1);
}

void sub_215B8E22C(_Unwind_Exception *a1)
{
}

void sub_215B8E244()
{
}

void sub_215B8E28C(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B8E42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B8E460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B8E474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B8E4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B8E4BC()
{
  return 65792;
}

void *sub_215B8E4C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B8E52C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67E970;
  uint64_t v4 = *(unsigned int *)(a2 + 32);
  unsigned int v5 = *(_DWORD *)(a2 + 36);
  if (v5 <= 0x20) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = v5;
  }
  LODWORD(v16[0]) = 4;
  uint64_t v7 = *(void *)(a2 + 24);
  DWORD1(v16[0]) = v7;
  *(void *)char v14 = *(void *)&v16[0];
  *(_DWORD *)&v14[8] = HIDWORD(v7);
  LODWORD(v16[0]) = 1;
  *(void *)((char *)v16 + 4) = v4 | (v6 << 32);
  *(void *)&v14[12] = *(void *)&v16[0];
  *(_DWORD *)&v14[20] = v6;
  *(void *)&unsigned char v14[24] = v7;
  uint64_t v15 = *(void *)((char *)v16 + 4);
  long long v12 = a3[1];
  long long v13 = a3[2];
  long long v11 = *a3;
  *(void *)a1 = &unk_26C67DB60;
  *(_DWORD *)(a1 + 8) = 0;
  if (v7 && HIDWORD(v7)) {
    sub_215B6A96C(0, 37, (uint64_t)v14);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  int v8 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B6AC54(0, a1 + 16, (uint64_t)v8);
  }
  else
  {
    long long v9 = *(_OWORD *)&v14[16];
    *int v8 = *(_OWORD *)v14;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = v15;
  }
  v16[0] = v11;
  v16[1] = v12;
  void v16[2] = v13;
  sub_215B6B528(a1, v16);
  *(void *)a1 = &unk_26C67E970;
  return a1;
}

void sub_215B8E6E4(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B8E6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)uint64_t v23 = v25;
  uint64_t v27 = *(unsigned int *)(v23 + 40);
  if (v27 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v27])(&a23, v24);
  }
  *(_DWORD *)(v23 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B8E738(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B8E750(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DB60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B8E7C8(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  int v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6B698((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  unsigned int v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67E970;
  return a1;
}

void sub_215B8E8A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8E8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    unsigned int v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          uint64_t v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            int v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6AE7C(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          uint64_t v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B8EB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B8EB58(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          int v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            int v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6AE7C((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          long long v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          uint64_t v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)uint64_t v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)uint64_t v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B8EDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B8EE18()
{
  return 37;
}

uint64_t (***sub_215B8EE20())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B8EE9C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B8EB58((uint64_t)v5, a1);
      sub_215B8EB58((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B8EF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8EF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B8EFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B8EFC0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B8F024(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67EDA8, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_215DC95B8(v25, v7);
LABEL_11:
        sub_215B8EB58((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        void v21[2] = v24;
        sub_215B8E52C((uint64_t)&v15, (uint64_t)&v22 + 8, v21);
        sub_215DC97F8(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26C67EED8[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26C67EF08[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26C67DB60;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26C67EED8[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_215742D4C();
      }
    }
    sub_215DC9474(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 37);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B8E8B8((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_2158A2610((size_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_2158A6EF0((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_215B8F2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B8F320(uint64_t a1)
{
  sub_215B8E8B8((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B8F34C(uint64_t a1, int a2)
{
  if (a2 != 37
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8E8B8((uint64_t)&v3, a1);
  operator new();
}

void sub_215B8F3F8(uint64_t a1, int a2)
{
  if (a2 != 37
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B8EB58((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B8F4A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9F0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F9F0))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F9F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788F9F8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA00, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788FA00))
    {
LABEL_13:
      if (byte_267890307 < 0)
      {
        sub_215738B0C(&xmmword_2678902D8, (void *)qword_2678902F0, unk_2678902F8);
      }
      else
      {
        xmmword_2678902D8 = *(_OWORD *)&qword_2678902F0;
        unk_2678902E8 = unk_267890300;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678902D8, &dword_21572C000);
      __cxa_guard_release(&qword_26788F9F8);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA08, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788FA08))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Argb8u>]", &qword_267890308);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267890308, &dword_21572C000);
      __cxa_guard_release(&qword_26788FA08);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA10, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788FA10))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA18, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788FA18))
      {
        if (byte_267890320[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_267890320, *(unint64_t *)&byte_267890320[8]);
        }
        else {
          std::string __p = *(std::string *)byte_267890320;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_267890338);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890338, &dword_21572C000);
        __cxa_guard_release(&qword_26788FA18);
      }
      if (byte_26789034F < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_267890338, *((unint64_t *)&xmmword_267890338 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_267890338;
        uint64_t v12 = unk_267890348;
      }
      sub_215862C64(v11, (std::string *)&qword_2678902F0);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_2678902F0, &dword_21572C000);
      __cxa_guard_release(&qword_26788FA00);
      goto LABEL_13;
    }
    if (byte_26789031F >= 0) {
      size_t v1 = byte_26789031F;
    }
    else {
      size_t v1 = unk_267890310;
    }
    if (byte_26789031F >= 0) {
      uint64_t v2 = &qword_267890308;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267890308;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_267890320[8] = v1;
      *(void *)&byte_267890320[16] = v10 | 0x8000000000000000;
      *(void *)byte_267890320 = v8;
    }
    else
    {
      int v8 = byte_267890320;
      byte_267890320[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_267890320, &dword_21572C000);
    __cxa_guard_release(&qword_26788FA10);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_2678902EF < 0)
  {
    sub_215738B0C(&xmmword_2678902C0, (void *)xmmword_2678902D8, *((unint64_t *)&xmmword_2678902D8 + 1));
  }
  else
  {
    xmmword_2678902C0 = xmmword_2678902D8;
    unk_2678902D0 = unk_2678902E8;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678902C0, &dword_21572C000);
  __cxa_guard_release(&qword_26788F9F0);
LABEL_2:
  if (byte_2678902D7 >= 0) {
    return &xmmword_2678902C0;
  }
  else {
    return (long long *)xmmword_2678902C0;
  }
}

void sub_215B8F92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788FA00);
  __cxa_guard_abort(&qword_26788F9F8);
  __cxa_guard_abort(&qword_26788F9F0);
  _Unwind_Resume(a1);
}

void sub_215B8F9C8(_Unwind_Exception *a1)
{
}

void sub_215B8F9E0()
{
}

void sub_215B8FA28(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B8FBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B8FBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B8FC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B8FC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B8FC58()
{
  return 65792;
}

void *sub_215B8FC64@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

uint64_t sub_215B8FCC8(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C67EA00;
  uint64_t v5 = *(unsigned int *)(a2 + 32);
  unsigned int v4 = *(_DWORD *)(a2 + 36);
  if (v4 <= 0x10) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = v4;
  }
  *(_DWORD *)uint64_t v28 = 4;
  uint64_t v7 = *(void *)(a2 + 24);
  *(_DWORD *)&v28[4] = v7;
  *(void *)long long v19 = *(void *)v28;
  *(_DWORD *)&v19[8] = HIDWORD(v7);
  *(_DWORD *)uint64_t v28 = 1;
  *(void *)&v28[4] = v5 | (v6 << 32);
  *(void *)&v19[12] = *(void *)v28;
  *(_DWORD *)&v19[20] = v6;
  *(void *)&v19[24] = v7;
  uint64_t v20 = *(void *)&v28[4];
  long long v17 = a3[1];
  long long v18 = a3[2];
  long long v16 = *a3;
  *(void *)a1 = &unk_26C67DD10;
  *(_DWORD *)(a1 + 8) = 0;
  uint64_t v8 = a1 + 16;
  if (v7 && HIDWORD(v7)) {
    sub_215B6E9BC(0, 38, (uint64_t)v19);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = &unk_26C684900;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v9 = (_OWORD *)(a1 + 48);
  if (v7 && HIDWORD(v7))
  {
    sub_215B6ECA4(0, v8, (uint64_t)v9);
  }
  else
  {
    long long v10 = *(_OWORD *)&v19[16];
    *uint64_t v9 = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 64) = v10;
    *(void *)(a1 + 80) = v20;
  }
  long long v21 = v16;
  long long v22 = v17;
  long long v23 = v18;
  if (*(_DWORD *)(a1 + 40) > 2u) {
    goto LABEL_31;
  }
  uint64_t v11 = *(uint64_t **)(a1 + 24);
  if (!v11) {
    goto LABEL_30;
  }
  uint64_t v13 = *v11;
  uint64_t v12 = (std::__shared_weak_count *)v11[1];
  if (v12
    && (atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (!v13) {
      goto LABEL_30;
    }
  }
  else if (!v13)
  {
    goto LABEL_30;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 40);
  if (v14 < 2)
  {
    sub_215DC9A68(v24, v8);
    goto LABEL_22;
  }
  if (v14 != 2) {
LABEL_31:
  }
    sub_215742D4C();
  sub_215DC9BAC(v24, v8);
LABEL_22:
  sub_215B6FCAC((uint64_t)v28, a1);
  v25[0] = (uint64_t)&v21;
  v25[1] = (uint64_t)v28;
  if (DWORD1(v22) == 1 && v29 == 1)
  {
    sub_2158530CC(v25);
  }
  else
  {
    char v26 = 0;
    if (DWORD2(v21) && HIDWORD(v21) && v22)
    {
      uint64_t v27 = &v26;
      sub_2158A7430((uint64_t)&v27, (uint64_t)&v21, (uint64_t)v28);
    }
  }
  sub_215DC9DEC(v24);
LABEL_30:
  *(void *)a1 = &unk_26C67EA00;
  return a1;
}

void sub_215B8FFA0(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B8FFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_215DC9DEC(&a27);
  *(void *)uint64_t v27 = v29;
  uint64_t v32 = *(unsigned int *)(v27 + 40);
  if (v32 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[v32])(v30 - 120, v28);
  }
  *(_DWORD *)(v27 + 40) = -1;
  _Unwind_Resume(a1);
}

void sub_215B90004(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

uint64_t sub_215B9001C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DD10;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void *sub_215B90094(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned int v3 = *(std::__shared_weak_count **)(a2 + 16);
  v7[0] = &unk_26C684900;
  v7[1] = v4;
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215B6F4CC((uint64_t)a1, (uint64_t)v7);
  v7[0] = &unk_26C684900;
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *a1 = &unk_26C67EA00;
  return a1;
}

void sub_215B90170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DCAD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B90184(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          *(void *)&long long v20 = &unk_26C684900;
          *((void *)&v20 + 1) = v7;
          long long v21 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = *((void *)&v20 + 1);
            uint64_t v8 = v21;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6EECC(a1, (uint64_t)v18);
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          *(void *)&long long v20 = &unk_26C684900;
          long long v10 = v21;
          if (v21)
          {
            if (!atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  LODWORD(v20) = 4;
  *(void *)((char *)&v20 + 4) = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(DWORD1(v20), 4);
  LODWORD(v20) = 1;
  *(void *)((char *)&v20 + 4) = v15;
  uint64_t v17 = v20;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B90408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_215B90424(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 40) >= 3u) {
    goto LABEL_28;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 24);
  if (v4)
  {
    uint64_t v6 = *v4;
    uint64_t v5 = (std::__shared_weak_count *)v4[1];
    if (v5
      && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
          !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
      {
LABEL_6:
        if (*(_DWORD *)(a2 + 40) < 3u)
        {
          uint64_t v7 = *(void *)(a2 + 24);
          uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
          long long v20 = &unk_26C684900;
          uint64_t v21 = v7;
          uint64_t v22 = v8;
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v7 = v21;
            uint64_t v8 = v22;
          }
          v18[0] = &unk_26C684900;
          v18[1] = v7;
          long long v19 = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_215B6EECC((uint64_t)v23, (uint64_t)v18);
          *(void *)a1 = *(void *)v23;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)&v23[8];
          *(_OWORD *)(a1 + 24) = v24;
          *(void *)(a1 + 40) = v25;
          v18[0] = &unk_26C684900;
          uint64_t v9 = v19;
          if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          long long v20 = &unk_26C684900;
          long long v10 = v22;
          if (v22)
          {
            if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
          return;
        }
LABEL_28:
        sub_215742D4C();
      }
    }
    else if (v6)
    {
      goto LABEL_6;
    }
  }
  if (*(_DWORD *)(a2 + 76)) {
    BOOL v11 = *(_DWORD *)(a2 + 72) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  unint64_t v12 = *(void *)(a2 + 72);
  if (v11) {
    unint64_t v12 = 0;
  }
  *(_DWORD *)long long v23 = 4;
  *(void *)&v23[4] = v12;
  uint64_t v13 = 4 * (v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12)) {
    unint64_t v14 = v14;
  }
  else {
    unint64_t v14 = 0;
  }
  unint64_t v15 = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  unint64_t v16 = __PAIR64__(*(unsigned int *)&v23[4], 4);
  *(_DWORD *)long long v23 = 1;
  *(void *)&v23[4] = v15;
  uint64_t v17 = *(void *)v23;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 16) = HIDWORD(v12);
  *(void *)(a1 + 20) = v17;
  *(_DWORD *)(a1 + 28) = v14;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v15;
}

void sub_215B906C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215DCAD80((uint64_t *)va);
  sub_215DCAD80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_215B906E4()
{
  return 38;
}

uint64_t (***sub_215B906EC())()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788F718, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788F718))
  {
    return &off_26ACF2418;
  }
  __cxa_atexit((void (*)(void *))nullsub_301, &off_26ACF2418, &dword_21572C000);
  __cxa_guard_release(&qword_26788F718);
  return &off_26ACF2418;
}

void sub_215B90768(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      sub_215DC95B8(v6, v2);
LABEL_6:
      sub_215B90424((uint64_t)v5, a1);
      sub_215B90424((uint64_t)&v4, a1);
      operator new();
    }
    if (v3) {
      sub_215742D4C();
    }
  }
  sub_215DC9474(v6, v2);
  goto LABEL_6;
}

void sub_215B90838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  MEMORY[0x2166C4D20](v14, 0x10A3C4049419736);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B90864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215B90878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_215DC97F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_215B9088C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
LABEL_4:
    return sub_215DC9474(a2, v2);
  }
  if (v3 != 1)
  {
    if (v3) {
      sub_215742D4C();
    }
    goto LABEL_4;
  }

  return sub_215DC95B8(a2, v2);
}

void sub_215B908F0(uint64_t a1, uint64_t *lpsrc)
{
  uint64_t v4 = *lpsrc;
  uint64_t v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C6847E0, (const struct __class_type_info *)&unk_26C67EDC0, 0);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    uint64_t v7 = (uint64_t)(v5 + 4);
    int v8 = v5[10];
    if (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_215DC95B8(v25, v7);
LABEL_11:
        sub_215B90424((uint64_t)&v22, v6);
        v21[0] = v22;
        v21[1] = v23;
        void v21[2] = v24;
        sub_215B8FCC8((uint64_t)&v15, (uint64_t)&v22 + 8, v21);
        sub_215DC97F8(v25);
        uint64_t v11 = DWORD2(v17);
        *(_DWORD *)(a1 + 8) = DWORD2(v15);
        uint64_t v12 = *(unsigned int *)(a1 + 40);
        if (v12 == -1)
        {
          if (v11 == -1) {
            goto LABEL_16;
          }
        }
        else if (v11 == -1)
        {
          ((void (*)(long long *, uint64_t))off_26C67EED8[v12])(&v22, a1 + 16);
          *(_DWORD *)(a1 + 40) = -1;
          goto LABEL_16;
        }
        *(void *)&long long v22 = a1 + 16;
        ((void (*)(long long *))off_26C67EF08[v11])(&v22);
LABEL_16:
        long long v13 = v19;
        *(_OWORD *)(a1 + 48) = v18;
        *(_OWORD *)(a1 + 64) = v13;
        *(void *)(a1 + 80) = v20;
        *(void *)&long long v15 = &unk_26C67DD10;
        if (DWORD2(v17) != -1) {
          ((void (*)(long long *, long long *))off_26C67EED8[DWORD2(v17)])(&v22, &v16);
        }
        return;
      }
      if (v8) {
        sub_215742D4C();
      }
    }
    sub_215DC9474(v25, v7);
    goto LABEL_11;
  }
  (*(void (**)(long long *__return_ptr, uint64_t *, uint64_t))(v4 + 72))(&v22, lpsrc, 38);
  long long v10 = *(_OWORD *)(v22 + 16);
  long long v9 = *(_OWORD *)(v22 + 32);
  long long v15 = *(_OWORD *)v22;
  long long v16 = v10;
  long long v17 = v9;
  *(void *)&long long v22 = 0;
  MEMORY[0x2166C4D20]();
  sub_215B90184((uint64_t)&v22, a1);
  *(void *)&v21[0] = &v15;
  *((void *)&v21[0] + 1) = &v22;
  if (DWORD1(v16) == 1 && DWORD1(v23) == 1)
  {
    sub_2158530CC((uint64_t *)v21);
  }
  else
  {
    char v14 = 0;
    if (DWORD2(v15) && HIDWORD(v15) && v16)
    {
      v25[0] = &v14;
      sub_2158A7430((uint64_t)v25, (uint64_t)&v15, (uint64_t)&v22);
    }
  }
}

void sub_215B90B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a16 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[a16])(&a23, v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215B90BEC(uint64_t a1)
{
  sub_215B90184((uint64_t)v2, a1);
  return v2[0];
}

void sub_215B90C18(uint64_t a1, int a2)
{
  if (a2 != 38
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 314, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B90184((uint64_t)&v3, a1);
  operator new();
}

void sub_215B90CC4(uint64_t a1, int a2)
{
  if (a2 != 38
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurfaceImage/src/IOSurfaceImage.cpp", 321, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215B90424((uint64_t)&v3, a1);
  operator new();
}

long long *sub_215B90D70()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA20, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788FA20))
  {
    goto LABEL_2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788FA28))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA30, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788FA30))
    {
LABEL_13:
      if (byte_267890397 < 0)
      {
        sub_215738B0C(&xmmword_267890368, (void *)qword_267890380, unk_267890388);
      }
      else
      {
        xmmword_267890368 = *(_OWORD *)&qword_267890380;
        unk_267890378 = unk_267890390;
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890368, &dword_21572C000);
      __cxa_guard_release(&qword_26788FA28);
      goto LABEL_7;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA38, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26788FA38))
    {
      sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::iosimg::IOSurfaceImageBuffer<img::Format::Argb16u>]", &qword_267890398);
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267890398, &dword_21572C000);
      __cxa_guard_release(&qword_26788FA38);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA40, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_26788FA40))
    {
LABEL_49:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788FA48, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_26788FA48))
      {
        if (byte_2678903B0[23] < 0) {
          sub_215738B0C(&__p, *(void **)byte_2678903B0, *(unint64_t *)&byte_2678903B0[8]);
        }
        else {
          std::string __p = *(std::string *)byte_2678903B0;
        }
        sub_215E13B5C(&__p, "std::__1::", 10, "std::", 5uLL, 0, 0, (uint64_t)&xmmword_2678903C8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678903C8, &dword_21572C000);
        __cxa_guard_release(&qword_26788FA48);
      }
      if (byte_2678903DF < 0)
      {
        sub_215738B0C(v11, (void *)xmmword_2678903C8, *((unint64_t *)&xmmword_2678903C8 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_2678903C8;
        uint64_t v12 = unk_2678903D8;
      }
      sub_215863318(v11, (std::string *)&qword_267890380);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
      __cxa_atexit(MEMORY[0x263F8C0B8], &qword_267890380, &dword_21572C000);
      __cxa_guard_release(&qword_26788FA30);
      goto LABEL_13;
    }
    if (byte_2678903AF >= 0) {
      size_t v1 = byte_2678903AF;
    }
    else {
      size_t v1 = unk_2678903A0;
    }
    if (byte_2678903AF >= 0) {
      uint64_t v2 = &qword_267890398;
    }
    else {
      uint64_t v2 = (uint64_t *)qword_267890398;
    }
    long long v3 = (char *)v2 + v1;
    if ((uint64_t)v1 >= 1)
    {
      size_t v4 = v1;
      uint64_t v5 = v2;
      do
      {
        uint64_t v6 = memchr(v5, 60, v4);
        if (!v6) {
          break;
        }
        if (*v6 == 60) {
          goto LABEL_35;
        }
        uint64_t v5 = (uint64_t *)(v6 + 1);
        size_t v4 = v3 - (unsigned char *)v5;
      }
      while (v3 - (unsigned char *)v5 > 0);
    }
    uint64_t v6 = (char *)v2 + v1;
LABEL_35:
    unint64_t v7 = v6 - (unsigned char *)v2;
    if (v6 == v3) {
      unint64_t v7 = -1;
    }
    if (v1 >= v7) {
      size_t v1 = v7;
    }
    if (v1 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    if (v1 >= 0x17)
    {
      uint64_t v9 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17) {
        uint64_t v9 = v1 | 7;
      }
      uint64_t v10 = v9 + 1;
      int v8 = (char *)operator new(v9 + 1);
      *(void *)&byte_2678903B0[8] = v1;
      *(void *)&byte_2678903B0[16] = v10 | 0x8000000000000000;
      *(void *)byte_2678903B0 = v8;
    }
    else
    {
      int v8 = byte_2678903B0;
      byte_2678903B0[23] = v1;
      if (!v1) {
        goto LABEL_48;
      }
    }
    memmove(v8, v2, v1);
LABEL_48:
    v8[v1] = 0;
    __cxa_atexit(MEMORY[0x263F8C0B8], byte_2678903B0, &dword_21572C000);
    __cxa_guard_release(&qword_26788FA40);
    goto LABEL_49;
  }
LABEL_7:
  if (byte_26789037F < 0)
  {
    sub_215738B0C(&xmmword_267890350, (void *)xmmword_267890368, *((unint64_t *)&xmmword_267890368 + 1));
  }
  else
  {
    xmmword_267890350 = xmmword_267890368;
    unk_267890360 = unk_267890378;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267890350, &dword_21572C000);
  __cxa_guard_release(&qword_26788FA20);
LABEL_2:
  if (byte_267890367 >= 0) {
    return &xmmword_267890350;
  }
  else {
    return (long long *)xmmword_267890350;
  }
}

void sub_215B911F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_26788FA30);
  __cxa_guard_abort(&qword_26788FA28);
  __cxa_guard_abort(&qword_26788FA20);
  _Unwind_Resume(a1);
}

void sub_215B91294(_Unwind_Exception *a1)
{
}

void sub_215B912AC()
{
}

void sub_215B912F4(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 16;
  if (a2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 40);
    if (v4 == 2)
    {
      sub_215DC9BAC(&v6, v3);
LABEL_10:
      operator new();
    }
    if (v4 <= 1)
    {
      sub_215DC9A68(&v6, v3);
      goto LABEL_10;
    }
LABEL_13:
    sub_215742D4C();
  }
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      sub_215DC95B8(&v6, v3);
LABEL_12:
      operator new();
    }
    if (v5) {
      goto LABEL_13;
    }
  }
  sub_215DC9474(&v6, v3);
  goto LABEL_12;
}

void sub_215B91494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC97F8(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC97F8(&a9);
  _Unwind_Resume(a1);
}

void sub_215B914C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B914DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_215DC9DEC(&a12);
  MEMORY[0x2166C4D20](v12, 0xA1C40711E6FFCLL);
  sub_215DC9DEC(&a9);
  _Unwind_Resume(a1);
}

void sub_215B91510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B91524()
{
  return 65792;
}

void *sub_215B91530@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1 + 16;
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 2)
  {
    return sub_215DC9BAC(a2, v2);
  }
  else
  {
    if (v3 > 1) {
      sub_215742D4C();
    }
    return sub_215DC9A68(a2, v2);
  }
}

void sub_215B91594(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3 = *a1 != 0;
  if (*a1 <= 0x20) {
    unsigned int v4 = 32;
  }
  else {
    unsigned int v4 = *a1;
  }
  uint64_t v5 = *(void *)a1;
  if (a1[1]) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 32;
  }
  *(void *)&long long v8 = *(void *)a1;
  *((void *)&v8 + 1) = v3 | (v6 << 32);
  *(void *)a2 = &unk_26C67D9B0;
  *(_DWORD *)(a2 + 8) = 0;
  if (v5 && HIDWORD(v5)) {
    sub_215B66B70(0, 1, &v8);
  }
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = &unk_26C684900;
  *(_DWORD *)(a2 + 40) = 0;
  if (v5 && HIDWORD(v5))
  {
    *(void *)(a2 + 48) = sub_215B66E58(0, a2 + 16);
    *(void *)(a2 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(a2 + 48) = v8;
  }
  *(void *)a2 = &unk_26C67E100;
}

void sub_215B916A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = *(unsigned int *)(v15 + 40);
  if (v18 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v18])(&a15, v16);
  }
  *(_DWORD *)(v15 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B916E4(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3 = *a1 != 0;
  if (*a1 <= 0x10) {
    unsigned int v4 = 16;
  }
  else {
    unsigned int v4 = *a1;
  }
  uint64_t v5 = *(void *)a1;
  if (a1[1]) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 16;
  }
  *(void *)&long long v8 = *(void *)a1;
  *((void *)&v8 + 1) = v3 | (v6 << 32);
  *(void *)a2 = &unk_26C67DBF0;
  *(_DWORD *)(a2 + 8) = 0;
  if (v5 && HIDWORD(v5)) {
    sub_215B6C040(0, 2, &v8);
  }
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = &unk_26C684900;
  *(_DWORD *)(a2 + 40) = 0;
  if (v5 && HIDWORD(v5))
  {
    *(void *)(a2 + 48) = sub_215B6C328(0, a2 + 16);
    *(void *)(a2 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(a2 + 48) = v8;
  }
  *(void *)a2 = &unk_26C67E190;
}

void sub_215B917F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = *(unsigned int *)(v15 + 40);
  if (v18 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v18])(&a15, v16);
  }
  *(_DWORD *)(v15 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B91834(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3 = *a1 != 0;
  if (*a1 <= 0x10) {
    unsigned int v4 = 16;
  }
  else {
    unsigned int v4 = *a1;
  }
  uint64_t v5 = *(void *)a1;
  if (a1[1]) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 16;
  }
  *(void *)&long long v8 = *(void *)a1;
  *((void *)&v8 + 1) = v3 | (v6 << 32);
  *(void *)a2 = &unk_26C67DDA0;
  *(_DWORD *)(a2 + 8) = 0;
  if (v5 && HIDWORD(v5)) {
    sub_215B6FF4C(0, 3, &v8);
  }
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = &unk_26C684900;
  *(_DWORD *)(a2 + 40) = 0;
  if (v5 && HIDWORD(v5))
  {
    *(void *)(a2 + 48) = sub_215B70234(0, a2 + 16);
    *(void *)(a2 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(a2 + 48) = v8;
  }
  *(void *)a2 = &unk_26C67E220;
}

void sub_215B91948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = *(unsigned int *)(v15 + 40);
  if (v18 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v18])(&a15, v16);
  }
  *(_DWORD *)(v15 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B91984(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3 = *a1 != 0;
  if (*a1 <= 8) {
    unsigned int v4 = 8;
  }
  else {
    unsigned int v4 = *a1;
  }
  uint64_t v5 = *(void *)a1;
  if (a1[1]) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 8;
  }
  *(void *)&long long v8 = *(void *)a1;
  *((void *)&v8 + 1) = v3 | (v6 << 32);
  *(void *)a2 = &unk_26C67DF50;
  *(_DWORD *)(a2 + 8) = 0;
  if (v5 && HIDWORD(v5)) {
    sub_215B73F5C(0, 4, &v8);
  }
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = &unk_26C684900;
  *(_DWORD *)(a2 + 40) = 0;
  if (v5 && HIDWORD(v5))
  {
    *(void *)(a2 + 48) = sub_215B74244(0, a2 + 16);
    *(void *)(a2 + 56) = v7;
  }
  else
  {
    *(_OWORD *)(a2 + 48) = v8;
  }
  *(void *)a2 = &unk_26C67E2B0;
}

void sub_215B91A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = *(unsigned int *)(v15 + 40);
  if (v18 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v18])(&a15, v16);
  }
  *(_DWORD *)(v15 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B91AD4(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 2 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 0x20) {
    LODWORD(a2) = 32;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 32;
  }
  *(_DWORD *)long long v8 = 2;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x1FFFFFFFFLL | ((unint64_t)(a2 >> 1) << 33);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67DA40;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B67E94(0, 5, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B6817C(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67E340;
}

void sub_215B91C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B91C9C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B91CB8(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 2 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 0x10) {
    LODWORD(a2) = 16;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 16;
  }
  *(_DWORD *)long long v8 = 2;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x1FFFFFFFFLL | ((unint64_t)(a2 >> 1) << 33);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67DE30;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B713DC(0, 7, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B716C4(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67E3D0;
}

void sub_215B91E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B91E80(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B91E9C(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 2 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 8) {
    LODWORD(a2) = 8;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 8;
  }
  *(_DWORD *)long long v8 = 2;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x1FFFFFFFFLL | ((unint64_t)(a2 >> 1) << 33);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67DFE0;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B753EC(0, 8, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B756D4(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67E460;
}

void sub_215B9202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B92064(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B92080(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  void v11[2] = *MEMORY[0x263EF8340];
  if (*a1) {
    uint64_t v3 = 3;
  }
  else {
    uint64_t v3 = 0;
  }
  LODWORD(v4) = v3 * *a1;
  if (v4 <= 0x20) {
    LODWORD(v4) = 32;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 32;
  }
  *(_DWORD *)uint64_t v9 = 3;
  *(_DWORD *)&v9[4] = v5;
  *(_DWORD *)&v9[8] = v6;
  LODWORD(v11[0]) = 1;
  *(void *)((char *)v11 + 4) = v3 | (v4 << 32);
  *(void *)&v9[12] = v11[0];
  *(_DWORD *)&unsigned char v9[20] = v4;
  *(void *)&unsigned char v9[24] = v5;
  uint64_t v10 = *(void *)((char *)v11 + 4);
  *(void *)a2 = &unk_26C67DAD0;
  *(_DWORD *)(a2 + 8) = 0;
  if (v5 && v6) {
    sub_215B6926C(0, 17, (uint64_t)v9);
  }
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = &unk_26C684900;
  *(_DWORD *)(a2 + 40) = 0;
  long long v7 = (_OWORD *)(a2 + 48);
  if (v5 && v6)
  {
    sub_215B69554(0, a2 + 16, (uint64_t)v7);
  }
  else
  {
    long long v8 = *(_OWORD *)&v9[16];
    *long long v7 = *(_OWORD *)v9;
    *(_OWORD *)(a2 + 64) = v8;
    *(void *)(a2 + 80) = v10;
  }
  *(void *)a2 = &unk_26C67E4F0;
}

void sub_215B92208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B92240(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B9225C(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  void v11[2] = *MEMORY[0x263EF8340];
  if (*a1) {
    uint64_t v3 = 3;
  }
  else {
    uint64_t v3 = 0;
  }
  LODWORD(v4) = v3 * *a1;
  if (v4 <= 0x20) {
    LODWORD(v4) = 32;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 32;
  }
  *(_DWORD *)uint64_t v9 = 3;
  *(_DWORD *)&v9[4] = v5;
  *(_DWORD *)&v9[8] = v6;
  LODWORD(v11[0]) = 1;
  *(void *)((char *)v11 + 4) = v3 | (v4 << 32);
  *(void *)&v9[12] = v11[0];
  *(_DWORD *)&unsigned char v9[20] = v4;
  *(void *)&unsigned char v9[24] = v5;
  uint64_t v10 = *(void *)((char *)v11 + 4);
  *(void *)a2 = &unk_26C67DAD0;
  *(_DWORD *)(a2 + 8) = 0;
  if (v5 && v6) {
    sub_215B6926C(0, 21, (uint64_t)v9);
  }
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = &unk_26C684900;
  *(_DWORD *)(a2 + 40) = 0;
  long long v7 = (_OWORD *)(a2 + 48);
  if (v5 && v6)
  {
    sub_215B69554(0, a2 + 16, (uint64_t)v7);
  }
  else
  {
    long long v8 = *(_OWORD *)&v9[16];
    *long long v7 = *(_OWORD *)v9;
    *(_OWORD *)(a2 + 64) = v8;
    *(void *)(a2 + 80) = v10;
  }
  *(void *)a2 = &unk_26C67E580;
}

void sub_215B923E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B9241C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B92438(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  void v11[2] = *MEMORY[0x263EF8340];
  if (*a1) {
    uint64_t v3 = 3;
  }
  else {
    uint64_t v3 = 0;
  }
  LODWORD(v4) = v3 * *a1;
  if (v4 <= 0x10) {
    LODWORD(v4) = 16;
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 16;
  }
  *(_DWORD *)uint64_t v9 = 3;
  *(_DWORD *)&v9[4] = v5;
  *(_DWORD *)&v9[8] = v6;
  LODWORD(v11[0]) = 1;
  *(void *)((char *)v11 + 4) = v3 | (v4 << 32);
  *(void *)&v9[12] = v11[0];
  *(_DWORD *)&unsigned char v9[20] = v4;
  *(void *)&unsigned char v9[24] = v5;
  uint64_t v10 = *(void *)((char *)v11 + 4);
  *(void *)a2 = &unk_26C67DC80;
  *(_DWORD *)(a2 + 8) = 0;
  if (v5 && v6) {
    sub_215B6D4A0(0, 22, (uint64_t)v9);
  }
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = &unk_26C684900;
  *(_DWORD *)(a2 + 40) = 0;
  long long v7 = (_OWORD *)(a2 + 48);
  if (v5 && v6)
  {
    sub_215B6D788(0, a2 + 16, (uint64_t)v7);
  }
  else
  {
    long long v8 = *(_OWORD *)&v9[16];
    *long long v7 = *(_OWORD *)v9;
    *(_OWORD *)(a2 + 64) = v8;
    *(void *)(a2 + 80) = v10;
  }
  *(void *)a2 = &unk_26C67E610;
}

void sub_215B925C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B925F8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B92614(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 0x20) {
    LODWORD(a2) = 32;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 32;
  }
  *(_DWORD *)long long v8 = 4;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67DB60;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B6A96C(0, 25, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B6AC54(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67E6A0;
}

void sub_215B927A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B927DC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B927F8(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 0x20) {
    LODWORD(a2) = 32;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 32;
  }
  *(_DWORD *)long long v8 = 4;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67DB60;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B6A96C(0, 29, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B6AC54(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67E730;
}

void sub_215B92988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B929C0(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B929DC(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 0x10) {
    LODWORD(a2) = 16;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 16;
  }
  *(_DWORD *)long long v8 = 4;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67DEC0;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B7299C(0, 31, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B72C84(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67E7C0;
}

void sub_215B92B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B92BA4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B92BC0(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 8) {
    LODWORD(a2) = 8;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 8;
  }
  *(_DWORD *)long long v8 = 4;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67E070;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B769AC(0, 32, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B76C94(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67E850;
}

void sub_215B92D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B92D88(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B92DA4(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 0x20) {
    LODWORD(a2) = 32;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 32;
  }
  *(_DWORD *)long long v8 = 4;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67DB60;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B6A96C(0, 33, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B6AC54(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67E8E0;
}

void sub_215B92F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B92F6C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B92F88(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 0x20) {
    LODWORD(a2) = 32;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 32;
  }
  *(_DWORD *)long long v8 = 4;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67DB60;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B6A96C(0, 37, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B6AC54(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67E970;
}

void sub_215B93118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B93150(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B9316C(_DWORD *a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v2 = a2;
  v10[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a2 <= 0x10) {
    LODWORD(a2) = 16;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = HIDWORD(*(void *)a1);
  if (a1[1]) {
    a2 = a2;
  }
  else {
    a2 = 16;
  }
  *(_DWORD *)long long v8 = 4;
  *(_DWORD *)&v8[4] = v4;
  *(_DWORD *)&v8[8] = v5;
  LODWORD(v10[0]) = 1;
  *(void *)((char *)v10 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  *(void *)&v8[12] = v10[0];
  *(_DWORD *)&v8[20] = a2;
  *(void *)&v8[24] = v4;
  uint64_t v9 = *(void *)((char *)v10 + 4);
  *(void *)unint64_t v2 = &unk_26C67DD10;
  *(_DWORD *)(v2 + 8) = 0;
  if (v4 && v5) {
    sub_215B6E9BC(0, 38, (uint64_t)v8);
  }
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = &unk_26C684900;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v6 = (_OWORD *)(v2 + 48);
  if (v4 && v5)
  {
    sub_215B6ECA4(0, v2 + 16, (uint64_t)v6);
  }
  else
  {
    long long v7 = *(_OWORD *)&v8[16];
    *uint64_t v6 = *(_OWORD *)v8;
    *(_OWORD *)(v2 + 64) = v7;
    *(void *)(v2 + 80) = v9;
  }
  *(void *)unint64_t v2 = &unk_26C67EA00;
}

void sub_215B932FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17 = *(unsigned int *)(v14 + 40);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v17])(&a14, v15);
  }
  *(_DWORD *)(v14 + 40) = -1;
  _Unwind_Resume(exception_object);
}

void sub_215B93334(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215B93350(void *a1)
{
  *a1 = &unk_26C67EA90;
  sub_215DC97F8(a1 + 1);
  return a1;
}

void sub_215B93394(void *a1)
{
  *a1 = &unk_26C67EA90;
  sub_215DC97F8(a1 + 1);

  JUMPOUT(0x2166C4D20);
}

void *sub_215B933F8(void *a1)
{
  *a1 = &unk_26C67EAB0;
  sub_215DC9DEC(a1 + 1);
  return a1;
}

void sub_215B9343C(void *a1)
{
  *a1 = &unk_26C67EAB0;
  sub_215DC9DEC(a1 + 1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B934A0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67D9B0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40EE3858B8);
}

uint64_t sub_215B9352C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DBF0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40EE3858B8);
}

uint64_t sub_215B935B8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DDA0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40EE3858B8);
}

uint64_t sub_215B93644(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DF50;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C40EE3858B8);
}

uint64_t sub_215B936D0(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DA40;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B9375C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DE30;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B937E8(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DFE0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B93874(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DAD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B93900(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DAD0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B9398C(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DC80;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B93A18(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DB60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B93AA4(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DB60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B93B30(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DEC0;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B93BBC(uint64_t a1)
{
  *(void *)a1 = &unk_26C67E070;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B93C48(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DB60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B93CD4(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DB60;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

uint64_t sub_215B93D60(uint64_t a1)
{
  *(void *)a1 = &unk_26C67DD10;
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C67EED8[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10A3C4049419736);
}

void sub_215B93DEC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C684900;
  uint64_t v2 = (std::__shared_weak_count *)a2[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *sub_215B93E84(uint64_t a1, void *a2)
{
  return sub_215DC97F8(a2);
}

void *sub_215B93E8C(uint64_t a1, void *a2)
{
  return sub_215DC9DEC(a2);
}

void sub_215B93E94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26C67EED8[v5])(&v8, v4);
LABEL_7:
    *(void *)uint64_t v4 = &unk_26C684900;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(_DWORD *)(v4 + 24) = 0;
    return;
  }
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  long long v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

__n128 sub_215B93F98(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_26C67EED8[v5])(&v7, v4);
LABEL_7:
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t v4 = &unk_26C6848C0;
    *(_DWORD *)(v4 + 24) = 1;
    return result;
  }

  sub_215DC96FC(a2, a3);
  return result;
}

__n128 sub_215B9404C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 24);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 2)
  {
    ((void (*)(char *, uint64_t))off_26C67EED8[v5])(&v7, v4);
LABEL_7:
    __n128 result = *(__n128 *)(a3 + 8);
    *(__n128 *)(v4 + 8) = result;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)uint64_t v4 = &unk_26C6848E0;
    *(_DWORD *)(v4 + 24) = 2;
    return result;
  }

  sub_215DC9CF0(a2, a3);
  return result;
}

uint64_t sub_215B94100(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B9417C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B94208()
{
  return 17;
}

uint64_t sub_215B94210(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B94218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_215B94234(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B942C4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B94340(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B943CC()
{
  return 29;
}

uint64_t sub_215B943D4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B943DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_215B943F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B94488(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_215B94504(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215B94590()
{
  return 33;
}

uint64_t sub_215B94598(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_215B945A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_215DC93A4(a2, 3, a1 + 32, 3, a1 + 44, 1);
}

uint64_t sub_215B945BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_215B9464C(uint64_t a1)
{
  uint64_t result = sub_215DCBB74(a1);
  uint64_t v2 = (char *)&vars0;
  if ((int)result > 875836517)
  {
    if ((int)result > 1111970368)
    {
      switch(result)
      {
        case 0x42475241:
          uint64_t v3 = 4;
          break;
        case 0x4C303038:
          uint64_t v3 = 0;
          break;
        case 0x52474241:
          uint64_t v3 = 6;
          break;
        default:
          goto LABEL_29;
      }
    }
    else
    {
      switch(result)
      {
        case 0x34343466:
          uint64_t v3 = 10;
          break;
        case 0x34343476:
          uint64_t v3 = 9;
          break;
        case 0x41424752:
          uint64_t v3 = 5;
          break;
        default:
          goto LABEL_29;
      }
    }
  }
  else if ((int)result > 843264055)
  {
    switch(result)
    {
      case 0x32433038:
        uint64_t v3 = 11;
        break;
      case 0x34323066:
        uint64_t v3 = 8;
        break;
      case 0x34323076:
        uint64_t v3 = 7;
        break;
      default:
        goto LABEL_29;
    }
  }
  else
  {
    switch(result)
    {
      case 0x18:
        uint64_t v3 = 1;
        break;
      case 0x20:
        uint64_t v3 = 3;
        break;
      case 0x32344247:
        uint64_t v3 = 2;
        break;
      default:
        goto LABEL_29;
    }
  }
  uint64_t v2 = (char *)&v4[v3];
LABEL_29:
  if (v2 - (char *)v4 == 48)
  {
    uint64_t result = sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/IOSurface/include/Kit/IOSurface/View.h", 111, (uint64_t)"Contains(pf::formats::U8(), ref.Format())", 41, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8);
    if (result) {
      abort();
    }
  }
  return result;
}

void sub_215B9480C()
{
}

void sub_215B94820(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  sub_215B97448(a3, a1, (unsigned int *)&v3);
}

void sub_215B9484C(uint64_t a1, int a2, uint64_t a3)
{
  v51[2] = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      v51[0] = &unk_26C667510;
      if (a3 <= 0x20) {
        unsigned int v3 = 32;
      }
      else {
        unsigned int v3 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v4 = v3;
      }
      else {
        uint64_t v4 = 32;
      }
      *(void *)long long v49 = a3;
      *(void *)&v49[8] = (a3 != 0) | (unint64_t)(v4 << 32);
      if (a3 && HIDWORD(a3)) {
        sub_215B66B70(0, 1, v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        *(void *)&long long v45 = sub_215B66E58(0, (uint64_t)&v41);
        *((void *)&v45 + 1) = v37;
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
      }
      operator new();
    case 2:
      v51[0] = &unk_26C667548;
      if (a3 <= 0x10) {
        unsigned int v5 = 16;
      }
      else {
        unsigned int v5 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 16;
      }
      *(void *)long long v49 = a3;
      *(void *)&v49[8] = (a3 != 0) | (unint64_t)(v6 << 32);
      if (a3 && HIDWORD(a3)) {
        sub_215B6C040(0, 2, v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        *(void *)&long long v45 = sub_215B6C328(0, (uint64_t)&v41);
        *((void *)&v45 + 1) = v38;
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
      }
      operator new();
    case 3:
      v51[0] = &unk_26C667580;
      if (a3 <= 0x10) {
        unsigned int v7 = 16;
      }
      else {
        unsigned int v7 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 16;
      }
      *(void *)long long v49 = a3;
      *(void *)&v49[8] = (a3 != 0) | (unint64_t)(v8 << 32);
      if (a3 && HIDWORD(a3)) {
        sub_215B6FF4C(0, 3, v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        *(void *)&long long v45 = sub_215B70234(0, (uint64_t)&v41);
        *((void *)&v45 + 1) = v39;
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
      }
      operator new();
    case 4:
      v51[0] = &unk_26C6675B8;
      if (a3 <= 8) {
        unsigned int v9 = 8;
      }
      else {
        unsigned int v9 = a3;
      }
      if (HIDWORD(a3)) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 8;
      }
      *(void *)long long v49 = a3;
      *(void *)&v49[8] = (a3 != 0) | (unint64_t)(v10 << 32);
      if (a3 && HIDWORD(a3)) {
        sub_215B73F5C(0, 4, v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        *(void *)&long long v45 = sub_215B74244(0, (uint64_t)&v41);
        *((void *)&v45 + 1) = v40;
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
      }
      operator new();
    case 5:
      int v48 = &unk_26C6675F0;
      uint64_t v11 = 2 * (a3 != 0);
      LODWORD(v12) = v11 * a3;
      if ((v11 * a3) <= 0x20) {
        LODWORD(v12) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v12 = v12;
      }
      else {
        unint64_t v12 = 32;
      }
      *(_DWORD *)long long v49 = 2;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v11 & 0x1FFFFFFFFLL | ((unint64_t)(v12 >> 1) << 33);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v12;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B67E94(0, 5, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B6817C(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 30:
    case 34:
    case 35:
    case 36:
    case 39:
    case 40:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageBuffer.h", 974, (uint64_t)"", 0, (uint64_t)"The buffer does not support the given format", 44, (void (*)(void **))sub_215E1ABD8);
      abort();
    case 7:
      int v48 = &unk_26C667628;
      uint64_t v13 = 2 * (a3 != 0);
      LODWORD(v14) = v13 * a3;
      if ((v13 * a3) <= 0x10) {
        LODWORD(v14) = 16;
      }
      if (HIDWORD(a3)) {
        unint64_t v14 = v14;
      }
      else {
        unint64_t v14 = 16;
      }
      *(_DWORD *)long long v49 = 2;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v13 & 0x1FFFFFFFFLL | ((unint64_t)(v14 >> 1) << 33);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v14;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B713DC(0, 7, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B716C4(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 8:
      int v48 = &unk_26C667660;
      uint64_t v15 = 2 * (a3 != 0);
      LODWORD(v16) = v15 * a3;
      if ((v15 * a3) <= 8) {
        LODWORD(v16) = 8;
      }
      if (HIDWORD(a3)) {
        unint64_t v16 = v16;
      }
      else {
        unint64_t v16 = 8;
      }
      *(_DWORD *)long long v49 = 2;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v15 & 0x1FFFFFFFFLL | ((unint64_t)(v16 >> 1) << 33);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v16;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B753EC(0, 8, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B756D4(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 17:
      int v48 = &unk_26C667698;
      if (a3) {
        uint64_t v17 = 3;
      }
      else {
        uint64_t v17 = 0;
      }
      LODWORD(v18) = v17 * a3;
      if ((v17 * a3) <= 0x20) {
        LODWORD(v18) = 32;
      }
      if (HIDWORD(a3)) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 32;
      }
      *(_DWORD *)long long v49 = 3;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v17 | (v18 << 32);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v18;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B6926C(0, 17, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B69554(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 21:
      int v48 = &unk_26C6676D0;
      if (a3) {
        uint64_t v19 = 3;
      }
      else {
        uint64_t v19 = 0;
      }
      LODWORD(v20) = v19 * a3;
      if ((v19 * a3) <= 0x20) {
        LODWORD(v20) = 32;
      }
      if (HIDWORD(a3)) {
        uint64_t v20 = v20;
      }
      else {
        uint64_t v20 = 32;
      }
      *(_DWORD *)long long v49 = 3;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v19 | (v20 << 32);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v20;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B6926C(0, 21, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B69554(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 22:
      int v48 = &unk_26C667708;
      if (a3) {
        uint64_t v21 = 3;
      }
      else {
        uint64_t v21 = 0;
      }
      LODWORD(v22) = v21 * a3;
      if ((v21 * a3) <= 0x10) {
        LODWORD(v22) = 16;
      }
      if (HIDWORD(a3)) {
        uint64_t v22 = v22;
      }
      else {
        uint64_t v22 = 16;
      }
      *(_DWORD *)long long v49 = 3;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v21 | (v22 << 32);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v22;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B6D4A0(0, 22, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B6D788(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 25:
      int v48 = &unk_26C667740;
      uint64_t v23 = 4 * (a3 != 0);
      LODWORD(v24) = v23 * a3;
      if ((v23 * a3) <= 0x20) {
        LODWORD(v24) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v24 = v24;
      }
      else {
        unint64_t v24 = 32;
      }
      *(_DWORD *)long long v49 = 4;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v23 & 0x3FFFFFFFFLL | ((unint64_t)(v24 >> 2) << 34);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v24;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B6A96C(0, 25, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B6AC54(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 29:
      int v48 = &unk_26C667778;
      uint64_t v25 = 4 * (a3 != 0);
      LODWORD(v26) = v25 * a3;
      if ((v25 * a3) <= 0x20) {
        LODWORD(v26) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v26 = v26;
      }
      else {
        unint64_t v26 = 32;
      }
      *(_DWORD *)long long v49 = 4;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v25 & 0x3FFFFFFFFLL | ((unint64_t)(v26 >> 2) << 34);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v26;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B6A96C(0, 29, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B6AC54(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 31:
      int v48 = &unk_26C6677B0;
      uint64_t v27 = 4 * (a3 != 0);
      LODWORD(v28) = v27 * a3;
      if ((v27 * a3) <= 0x10) {
        LODWORD(v28) = 16;
      }
      if (HIDWORD(a3)) {
        unint64_t v28 = v28;
      }
      else {
        unint64_t v28 = 16;
      }
      *(_DWORD *)long long v49 = 4;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v27 & 0x3FFFFFFFFLL | ((unint64_t)(v28 >> 2) << 34);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v28;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B7299C(0, 31, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B72C84(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 32:
      int v48 = &unk_26C6677E8;
      uint64_t v29 = 4 * (a3 != 0);
      LODWORD(v30) = v29 * a3;
      if ((v29 * a3) <= 8) {
        LODWORD(v30) = 8;
      }
      if (HIDWORD(a3)) {
        unint64_t v30 = v30;
      }
      else {
        unint64_t v30 = 8;
      }
      *(_DWORD *)long long v49 = 4;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v29 & 0x3FFFFFFFFLL | ((unint64_t)(v30 >> 2) << 34);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v30;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B769AC(0, 32, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B76C94(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 33:
      int v48 = &unk_26C667820;
      uint64_t v31 = 4 * (a3 != 0);
      LODWORD(v32) = v31 * a3;
      if ((v31 * a3) <= 0x20) {
        LODWORD(v32) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v32 = v32;
      }
      else {
        unint64_t v32 = 32;
      }
      *(_DWORD *)long long v49 = 4;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v31 & 0x3FFFFFFFFLL | ((unint64_t)(v32 >> 2) << 34);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v32;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B6A96C(0, 33, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B6AC54(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 37:
      int v48 = &unk_26C667858;
      uint64_t v33 = 4 * (a3 != 0);
      LODWORD(v34) = v33 * a3;
      if ((v33 * a3) <= 0x20) {
        LODWORD(v34) = 32;
      }
      if (HIDWORD(a3)) {
        unint64_t v34 = v34;
      }
      else {
        unint64_t v34 = 32;
      }
      *(_DWORD *)long long v49 = 4;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v33 & 0x3FFFFFFFFLL | ((unint64_t)(v34 >> 2) << 34);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v34;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B6A96C(0, 37, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B6AC54(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    case 38:
      int v48 = &unk_26C667890;
      uint64_t v35 = 4 * (a3 != 0);
      LODWORD(v36) = v35 * a3;
      if ((v35 * a3) <= 0x10) {
        LODWORD(v36) = 16;
      }
      if (HIDWORD(a3)) {
        unint64_t v36 = v36;
      }
      else {
        unint64_t v36 = 16;
      }
      *(_DWORD *)long long v49 = 4;
      *(void *)&v49[4] = a3;
      LODWORD(v51[0]) = 1;
      *(void *)((char *)v51 + 4) = v35 & 0x3FFFFFFFFLL | ((unint64_t)(v36 >> 2) << 34);
      *(void *)&v49[12] = v51[0];
      *(_DWORD *)&v49[20] = v36;
      *(void *)&v49[24] = a3;
      uint64_t v50 = *(void *)((char *)v51 + 4);
      if (a3 && HIDWORD(a3)) {
        sub_215B6E9BC(0, 38, (uint64_t)v49);
      }
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      int v41 = &unk_26C684900;
      int v44 = 0;
      if (a3 && HIDWORD(a3))
      {
        sub_215B6ECA4(0, (uint64_t)&v41, (uint64_t)&v45);
      }
      else
      {
        long long v45 = *(_OWORD *)v49;
        long long v46 = *(_OWORD *)&v49[16];
        uint64_t v47 = v50;
      }
      operator new();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215B96C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[a14])(v25 - 72, v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B97448(uint64_t a1, int a2, unsigned int *a3)
{
  uint64_t v199 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      v172[0] = &unk_26C667510;
      BOOL v3 = *a3 != 0;
      if (*a3 <= 0x20) {
        unsigned int v4 = 32;
      }
      else {
        unsigned int v4 = *a3;
      }
      uint64_t v5 = *(void *)a3;
      if (a3[1]) {
        uint64_t v6 = v4;
      }
      else {
        uint64_t v6 = 32;
      }
      *(void *)&long long v177 = *(void *)a3;
      *((void *)&v177 + 1) = v3 | (v6 << 32);
      LOBYTE(v184) = 0;
      v186 = &unk_26C67D9B0;
      int v187 = 0;
      if (v5 && HIDWORD(v5)) {
        sub_215B66B70(0, 1, &v177);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v5 && HIDWORD(v5))
      {
        *(void *)&long long v192 = sub_215B66E58(0, (uint64_t)&v188);
        *((void *)&v192 + 1) = v86;
      }
      else
      {
        long long v192 = v177;
      }
      if (v191 > 2) {
        goto LABEL_476;
      }
      if (v189)
      {
        uint64_t v93 = *v189;
        v92 = (std::__shared_weak_count *)v189[1];
        if (v92)
        {
          atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (v93)
        {
          if (v191 >= 2)
          {
            if (v191 != 2) {
LABEL_476:
            }
              sub_215742D4C();
            sub_215DC9BAC(v197, (uint64_t)&v188);
          }
          else
          {
            sub_215DC9A68(v197, (uint64_t)&v188);
          }
          sub_215B67C14((uint64_t *)v195, (uint64_t)&v186);
          v179 = (long long *)v195;
          v180 = &v184;
          sub_215B597A0(&v179);
          sub_215DC9DEC(v197);
        }
      }
      v186 = &unk_26C67E100;
      operator new();
    case 2:
      v172[0] = &unk_26C667548;
      BOOL v36 = *a3 != 0;
      if (*a3 <= 0x10) {
        unsigned int v37 = 16;
      }
      else {
        unsigned int v37 = *a3;
      }
      uint64_t v38 = *(void *)a3;
      if (a3[1]) {
        uint64_t v39 = v37;
      }
      else {
        uint64_t v39 = 16;
      }
      *(void *)&long long v177 = *(void *)a3;
      *((void *)&v177 + 1) = v36 | (v39 << 32);
      LOWORD(v184) = 0;
      v186 = &unk_26C67DBF0;
      int v187 = 0;
      if (v38 && HIDWORD(v38)) {
        sub_215B6C040(0, 2, &v177);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v38 && HIDWORD(v38))
      {
        *(void *)&long long v192 = sub_215B6C328(0, (uint64_t)&v188);
        *((void *)&v192 + 1) = v85;
      }
      else
      {
        long long v192 = v177;
      }
      if (v191 > 2) {
        goto LABEL_475;
      }
      if (!v189) {
        goto LABEL_454;
      }
      uint64_t v91 = *v189;
      v90 = (std::__shared_weak_count *)v189[1];
      if (v90)
      {
        atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v90->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      if (!v91) {
        goto LABEL_454;
      }
      if (v191 >= 2)
      {
        if (v191 != 2) {
LABEL_475:
        }
          sub_215742D4C();
        sub_215DC9BAC(v197, (uint64_t)&v188);
      }
      else
      {
        sub_215DC9A68(v197, (uint64_t)&v188);
      }
      sub_215B6D220((uint64_t *)v195, (uint64_t)&v186);
      v179 = (long long *)v195;
      v180 = &v184;
      uint64_t v120 = *(unsigned int *)&v195[16];
      if (*(_DWORD *)&v195[16] == 1)
      {
        sub_215B59DDC((uint64_t)&v179);
LABEL_453:
        sub_215DC9DEC(v197);
LABEL_454:
        v186 = &unk_26C67E190;
        operator new();
      }
      if (!*(_DWORD *)&v195[8] || !*(_DWORD *)&v195[12]) {
        goto LABEL_453;
      }
      int v121 = *(_DWORD *)&v195[8] - 1;
      v122 = *(_WORD **)v195;
      int v123 = *(_DWORD *)&v195[12] - 1;
      if (*(_DWORD *)&v195[12] == 1) {
        goto LABEL_351;
      }
      uint64_t v124 = *(unsigned int *)&v195[20];
      if (*(_DWORD *)&v195[8] == 1)
      {
        do
        {
          _WORD *v122 = v184;
          v122 += v124;
          --v123;
        }
        while (v123);
      }
      else
      {
        int v125 = 0;
        uint64_t v126 = 2 * *(unsigned int *)&v195[20];
        do
        {
          v127 = v122;
          int v128 = v121;
          do
          {
            _WORD *v127 = v184;
            v127 += v120;
            --v128;
          }
          while (v128);
          _WORD *v127 = v184;
          v122 = (_WORD *)((char *)v122 + v126);
          ++v125;
        }
        while (v125 != v123);
LABEL_351:
        if (v121)
        {
          uint64_t v129 = 2 * v120;
          do
          {
            _WORD *v122 = v184;
            v122 = (_WORD *)((char *)v122 + v129);
            --v121;
          }
          while (v121);
        }
      }
      _WORD *v122 = v184;
      goto LABEL_453;
    case 3:
      v172[0] = &unk_26C667580;
      BOOL v32 = *a3 != 0;
      if (*a3 <= 0x10) {
        unsigned int v33 = 16;
      }
      else {
        unsigned int v33 = *a3;
      }
      uint64_t v34 = *(void *)a3;
      if (a3[1]) {
        uint64_t v35 = v33;
      }
      else {
        uint64_t v35 = 16;
      }
      *(void *)&long long v177 = *(void *)a3;
      *((void *)&v177 + 1) = v32 | (v35 << 32);
      LOWORD(v184) = 0;
      v186 = &unk_26C67DDA0;
      int v187 = 0;
      if (v34 && HIDWORD(v34)) {
        sub_215B6FF4C(0, 3, &v177);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v34 && HIDWORD(v34))
      {
        *(void *)&long long v192 = sub_215B70234(0, (uint64_t)&v188);
        *((void *)&v192 + 1) = v84;
      }
      else
      {
        long long v192 = v177;
      }
      if (v191 > 2) {
        goto LABEL_474;
      }
      if (v189)
      {
        uint64_t v89 = *v189;
        v88 = (std::__shared_weak_count *)v189[1];
        if (v88)
        {
          atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v88->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (v89)
        {
          if (v191 >= 2)
          {
            if (v191 != 2) {
LABEL_474:
            }
              sub_215742D4C();
            sub_215DC9BAC(v197, (uint64_t)&v188);
          }
          else
          {
            sub_215DC9A68(v197, (uint64_t)&v188);
          }
          sub_215B7115C((uint64_t *)v195, (uint64_t)&v186);
          v179 = (long long *)v195;
          v180 = &v184;
          if (*(_DWORD *)&v195[16] == 1)
          {
            sub_215B5ABB0(&v179, v110);
          }
          else if (*(_DWORD *)&v195[8] && *(_DWORD *)&v195[12])
          {
            int v111 = *(_DWORD *)&v195[8] - 1;
            v112 = *(_WORD **)v195;
            uint64_t v113 = 2 * *(unsigned int *)&v195[16];
            int v114 = *(_DWORD *)&v195[12] - 1;
            if (*(_DWORD *)&v195[12] != 1)
            {
              uint64_t v115 = *(unsigned int *)&v195[20];
              if (*(_DWORD *)&v195[8] == 1)
              {
                do
                {
                  _WORD *v112 = v184;
                  v112 += v115;
                  --v114;
                }
                while (v114);
              }
              else
              {
                int v116 = 0;
                uint64_t v117 = 2 * *(unsigned int *)&v195[20];
                do
                {
                  v118 = v112;
                  int v119 = v111;
                  do
                  {
                    _WORD *v118 = v184;
                    v118 = (_WORD *)((char *)v118 + v113);
                    --v119;
                  }
                  while (v119);
                  _WORD *v118 = v184;
                  v112 = (_WORD *)((char *)v112 + v117);
                  ++v116;
                }
                while (v116 != v114);
              }
            }
            for (; v111; --v111)
            {
              _WORD *v112 = v184;
              v112 = (_WORD *)((char *)v112 + v113);
            }
            _WORD *v112 = v184;
          }
          sub_215DC9DEC(v197);
        }
      }
      v186 = &unk_26C67E220;
      operator new();
    case 4:
      v172[0] = &unk_26C6675B8;
      BOOL v65 = *a3 != 0;
      if (*a3 <= 8) {
        unsigned int v66 = 8;
      }
      else {
        unsigned int v66 = *a3;
      }
      uint64_t v67 = *(void *)a3;
      if (a3[1]) {
        uint64_t v68 = v66;
      }
      else {
        uint64_t v68 = 8;
      }
      *(void *)&long long v177 = *(void *)a3;
      *((void *)&v177 + 1) = v65 | (v68 << 32);
      LODWORD(v184) = 0;
      v186 = &unk_26C67DF50;
      int v187 = 0;
      if (v67 && HIDWORD(v67)) {
        sub_215B73F5C(0, 4, &v177);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v67 && HIDWORD(v67))
      {
        *(void *)&long long v192 = sub_215B74244(0, (uint64_t)&v188);
        *((void *)&v192 + 1) = v87;
      }
      else
      {
        long long v192 = v177;
      }
      if (v191 > 2) {
        goto LABEL_481;
      }
      if (!v189) {
        goto LABEL_465;
      }
      uint64_t v103 = *v189;
      v102 = (std::__shared_weak_count *)v189[1];
      if (v102)
      {
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v102->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      if (!v103) {
        goto LABEL_465;
      }
      if (v191 >= 2)
      {
        if (v191 != 2) {
LABEL_481:
        }
          sub_215742D4C();
        sub_215DC9BAC(v197, (uint64_t)&v188);
      }
      else
      {
        sub_215DC9A68(v197, (uint64_t)&v188);
      }
      sub_215B7516C((uint64_t *)v195, (uint64_t)&v186);
      v179 = (long long *)v195;
      v180 = &v184;
      uint64_t v141 = *(unsigned int *)&v195[16];
      if (*(_DWORD *)&v195[16] == 1)
      {
        sub_215B5B8D8((uint64_t)&v179);
LABEL_464:
        sub_215DC9DEC(v197);
LABEL_465:
        v186 = &unk_26C67E2B0;
        operator new();
      }
      if (!*(_DWORD *)&v195[8] || !*(_DWORD *)&v195[12]) {
        goto LABEL_464;
      }
      int v142 = *(_DWORD *)&v195[8] - 1;
      v143 = *(_DWORD **)v195;
      int v144 = *(_DWORD *)&v195[12] - 1;
      if (*(_DWORD *)&v195[12] == 1) {
        goto LABEL_397;
      }
      uint64_t v145 = *(unsigned int *)&v195[20];
      if (*(_DWORD *)&v195[8] == 1)
      {
        do
        {
          _DWORD *v143 = v184;
          v143 += v145;
          --v144;
        }
        while (v144);
      }
      else
      {
        int v146 = 0;
        uint64_t v147 = 4 * *(unsigned int *)&v195[20];
        do
        {
          v148 = v143;
          int v149 = v142;
          do
          {
            _DWORD *v148 = v184;
            v148 += v141;
            --v149;
          }
          while (v149);
          _DWORD *v148 = v184;
          v143 = (_DWORD *)((char *)v143 + v147);
          ++v146;
        }
        while (v146 != v144);
LABEL_397:
        if (v142)
        {
          uint64_t v150 = 4 * v141;
          do
          {
            _DWORD *v143 = v184;
            v143 = (_DWORD *)((char *)v143 + v150);
            --v142;
          }
          while (v142);
        }
      }
      _DWORD *v143 = v184;
      goto LABEL_464;
    case 5:
      v172[0] = &unk_26C6675F0;
      uint64_t v40 = 2 * (*a3 != 0);
      if (v40 * *a3 <= 0x20) {
        unsigned int v41 = 32;
      }
      else {
        unsigned int v41 = v40 * *a3;
      }
      uint64_t v42 = *(void *)a3;
      uint64_t v43 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v44 = v41;
      }
      else {
        unint64_t v44 = 32;
      }
      *(_DWORD *)v197 = 2;
      *(_DWORD *)&v197[4] = v42;
      *(void *)v195 = *(void *)v197;
      *(_DWORD *)v197 = 1;
      *(void *)&v197[4] = v40 & 0x1FFFFFFFFLL | ((unint64_t)(v44 >> 1) << 33);
      *(void *)&v195[12] = *(void *)v197;
      *(_DWORD *)&v195[8] = v43;
      *(_DWORD *)&v195[20] = v44;
      *(void *)&v195[24] = v42;
      uint64_t v196 = *(void *)&v197[4];
      LOBYTE(v184) = 0;
      v186 = &unk_26C67DA40;
      int v187 = 0;
      if (v42 && v43) {
        sub_215B67E94(0, 5, (uint64_t)v195);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v42 && v43)
      {
        sub_215B6817C(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v195;
        long long v193 = *(_OWORD *)&v195[16];
        uint64_t v194 = v196;
      }
      if (v191 > 2) {
        goto LABEL_477;
      }
      if (v189)
      {
        uint64_t v95 = *v189;
        v94 = (std::__shared_weak_count *)v189[1];
        if (v94)
        {
          atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v94->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        if (v95)
        {
          if (v191 >= 2)
          {
            if (v191 != 2) {
LABEL_477:
            }
              sub_215742D4C();
            sub_215DC9BAC(&v179, (uint64_t)&v188);
          }
          else
          {
            sub_215DC9A68(&v179, (uint64_t)&v188);
          }
          sub_215B68FCC((uint64_t)v197, (uint64_t)&v186);
          *(void *)&long long v177 = v197;
          *((void *)&v177 + 1) = &v184;
          if (*(_DWORD *)&v197[20] == 1)
          {
            sub_215B5993C(&v177);
          }
          else if (*(_DWORD *)&v197[8] && *(_DWORD *)&v197[12] && *(_DWORD *)&v197[16])
          {
            int v130 = *(_DWORD *)&v197[12] - 1;
            uint64_t v131 = *(unsigned int *)&v197[24];
            v132 = *(unsigned char **)v197;
            int v133 = *(_DWORD *)&v197[16] - 1;
            if (*(_DWORD *)&v197[16] != 1)
            {
              uint64_t v134 = *(unsigned int *)&v197[28];
              if (*(_DWORD *)&v197[12] == 1)
              {
                char v166 = v184;
                do
                {
                  unsigned char *v132 = v166;
                  char v166 = v184;
                  v132[1] = v184;
                  v132 += v134;
                  --v133;
                }
                while (v133);
              }
              else
              {
                int v135 = 0;
                uint64_t v136 = *(void *)v197 + 1;
                do
                {
                  char v137 = v184;
                  v138 = (unsigned char *)v136;
                  int v139 = v130;
                  do
                  {
                    *(v138 - 1) = v137;
                    char v137 = v184;
                    unsigned char *v138 = v184;
                    v138 += v131;
                    --v139;
                  }
                  while (v139);
                  *(v138 - 1) = v137;
                  unsigned char *v138 = v184;
                  v132 += v134;
                  ++v135;
                  v136 += v134;
                }
                while (v135 != v133);
              }
            }
            for (char i = v184; v130; --v130)
            {
              unsigned char *v132 = i;
              char i = v184;
              v132[1] = v184;
              v132 += v131;
            }
            unsigned char *v132 = i;
            v132[1] = v184;
          }
          sub_215DC9DEC(&v179);
        }
      }
      v186 = &unk_26C67E340;
      operator new();
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 30:
    case 34:
    case 35:
    case 36:
    case 39:
    case 40:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageBuffer.h", 974, (uint64_t)"", 0, (uint64_t)"The buffer does not support the given format", 44, (void (*)(void **))sub_215E1ABD8);
      abort();
    case 7:
      uint64_t v69 = 2 * (*a3 != 0);
      if (v69 * *a3 <= 0x10) {
        unsigned int v70 = 16;
      }
      else {
        unsigned int v70 = v69 * *a3;
      }
      uint64_t v71 = *(void *)a3;
      uint64_t v72 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v73 = v70;
      }
      else {
        unint64_t v73 = 16;
      }
      *(_DWORD *)v197 = 2;
      *(_DWORD *)&v197[4] = v71;
      *(void *)v195 = *(void *)v197;
      *(_DWORD *)v197 = 1;
      *(void *)&v197[4] = v69 & 0x1FFFFFFFFLL | ((unint64_t)(v73 >> 1) << 33);
      *(void *)&v195[12] = *(void *)v197;
      *(_DWORD *)&v195[8] = v72;
      *(_DWORD *)&v195[20] = v73;
      *(void *)&v195[24] = v71;
      uint64_t v196 = *(void *)&v197[4];
      __int16 v171 = 0;
      v186 = &unk_26C67DE30;
      int v187 = 0;
      if (v71 && v72) {
        sub_215B713DC(0, 7, (uint64_t)v195);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v71 && v72)
      {
        sub_215B716C4(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v195;
        long long v193 = *(_OWORD *)&v195[16];
        uint64_t v194 = v196;
      }
      if (v191 > 2) {
        goto LABEL_482;
      }
      if (v189)
      {
        uint64_t v105 = *v189;
        v104 = (std::__shared_weak_count *)v189[1];
        if (v104)
        {
          atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v104->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
            std::__shared_weak_count::__release_weak(v104);
          }
        }
        if (v105)
        {
          if (v191 >= 2)
          {
            if (v191 != 2) {
LABEL_482:
            }
              sub_215742D4C();
            sub_215DC9BAC(v172, (uint64_t)&v188);
          }
          else
          {
            sub_215DC9A68(v172, (uint64_t)&v188);
          }
          sub_215B726FC((uint64_t)v197, (uint64_t)&v186);
          v173 = v197;
          v174 = &v171;
          if (*(_DWORD *)&v197[20] == 1)
          {
            if (*(_DWORD *)&v197[24] == *(_DWORD *)&v197[8])
            {
              sub_215B5AF70(&v173, v151);
            }
            else
            {
              char v176 = 0;
              uint64_t v175 = *(unsigned int *)&v197[8];
              *(void *)&long long v177 = &v176;
              *((void *)&v177 + 1) = &v175;
              v178 = &v171;
              if (*(_DWORD *)&v197[8] && *(_DWORD *)&v197[12] && *(_DWORD *)&v197[16])
              {
                LODWORD(v179) = 0;
                HIDWORD(v179) = *(_DWORD *)&v197[8] - 1;
                LODWORD(v180) = 1;
                HIDWORD(v180) = *(_DWORD *)&v197[12] - 1;
                unsigned int v183 = *(_DWORD *)&v197[28];
                unint64_t v162 = *(void *)v197;
                unint64_t v184 = 0;
                uint64_t v185 = 0;
                int v181 = *(_DWORD *)&v197[24];
                unsigned int v182 = *(_DWORD *)&v197[16] - 1;
                if (*(_DWORD *)&v197[16] != 1)
                {
                  unsigned int v163 = 0;
                  do
                  {
                    v151.n128_u64[0] = sub_215B5B35C((uint64_t)&v179, &v184, (uint64_t)&v177, v162, v151);
                    v162 += 2 * v183;
                    ++v163;
                  }
                  while (v163 < v182);
                }
                sub_215B5B35C((uint64_t)&v179, &v184, (uint64_t)&v177, v162, v151);
              }
            }
          }
          else if (*(_DWORD *)&v197[8] && *(_DWORD *)&v197[12] && *(_DWORD *)&v197[16])
          {
            int v152 = *(_DWORD *)&v197[12] - 1;
            v153 = *(_WORD **)v197;
            uint64_t v154 = 2 * *(unsigned int *)&v197[24];
            int v155 = *(_DWORD *)&v197[16] - 1;
            if (*(_DWORD *)&v197[16] != 1)
            {
              uint64_t v156 = *(unsigned int *)&v197[28];
              if (*(_DWORD *)&v197[12] == 1)
              {
                __int16 v168 = v171;
                uint64_t v169 = 2 * *(unsigned int *)&v197[28];
                do
                {
                  _WORD *v153 = v168;
                  __int16 v168 = v171;
                  v153[1] = v171;
                  v153 = (_WORD *)((char *)v153 + v169);
                  --v155;
                }
                while (v155);
              }
              else
              {
                int v157 = 0;
                uint64_t v158 = *(void *)v197 + 2;
                do
                {
                  __int16 v159 = v171;
                  v160 = (_WORD *)v158;
                  int v161 = v152;
                  do
                  {
                    *(v160 - 1) = v159;
                    __int16 v159 = v171;
                    _WORD *v160 = v171;
                    v160 = (_WORD *)((char *)v160 + v154);
                    --v161;
                  }
                  while (v161);
                  *(v160 - 1) = v159;
                  _WORD *v160 = v171;
                  v153 += v156;
                  ++v157;
                  v158 += 2 * v156;
                }
                while (v157 != v155);
              }
            }
            for (__int16 j = v171; v152; --v152)
            {
              _WORD *v153 = j;
              __int16 j = v171;
              v153[1] = v171;
              v153 = (_WORD *)((char *)v153 + v154);
            }
            _WORD *v153 = j;
            v153[1] = v171;
          }
          sub_215DC9DEC(v172);
        }
      }
      v186 = &unk_26C67E3D0;
      operator new();
    case 8:
      v172[0] = &unk_26C667660;
      uint64_t v50 = 2 * (*a3 != 0);
      if (v50 * *a3 <= 8) {
        unsigned int v51 = 8;
      }
      else {
        unsigned int v51 = v50 * *a3;
      }
      uint64_t v52 = *(void *)a3;
      uint64_t v53 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v54 = v51;
      }
      else {
        unint64_t v54 = 8;
      }
      *(_DWORD *)v197 = 2;
      *(_DWORD *)&v197[4] = v52;
      *(void *)v195 = *(void *)v197;
      *(_DWORD *)v197 = 1;
      *(void *)&v197[4] = v50 & 0x1FFFFFFFFLL | ((unint64_t)(v54 >> 1) << 33);
      *(void *)&v195[12] = *(void *)v197;
      *(_DWORD *)&v195[8] = v53;
      *(_DWORD *)&v195[20] = v54;
      *(void *)&v195[24] = v52;
      uint64_t v196 = *(void *)&v197[4];
      LODWORD(v184) = 0;
      v186 = &unk_26C67DFE0;
      int v187 = 0;
      if (v52 && v53) {
        sub_215B753EC(0, 8, (uint64_t)v195);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v52 && v53)
      {
        sub_215B756D4(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v195;
        long long v193 = *(_OWORD *)&v195[16];
        uint64_t v194 = v196;
      }
      if (v191 > 2) {
        goto LABEL_478;
      }
      if (v189)
      {
        uint64_t v97 = *v189;
        v96 = (std::__shared_weak_count *)v189[1];
        if (v96)
        {
          atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v96->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        if (v97)
        {
          if (v191 >= 2)
          {
            if (v191 != 2) {
LABEL_478:
            }
              sub_215742D4C();
            sub_215DC9BAC(&v179, (uint64_t)&v188);
          }
          else
          {
            sub_215DC9A68(&v179, (uint64_t)&v188);
          }
          sub_215B7670C((uint64_t)v197, (uint64_t)&v186);
          *(void *)&long long v177 = v197;
          *((void *)&v177 + 1) = &v184;
          sub_215B5BCDC((uint64_t *)&v177);
          sub_215DC9DEC(&v179);
        }
      }
      v186 = &unk_26C67E460;
      operator new();
    case 17:
      v179 = (long long *)&unk_26C667698;
      if (*a3) {
        uint64_t v45 = 3;
      }
      else {
        uint64_t v45 = 0;
      }
      if (v45 * *a3 <= 0x20) {
        unsigned int v46 = 32;
      }
      else {
        unsigned int v46 = v45 * *a3;
      }
      uint64_t v47 = *(void *)a3;
      uint64_t v48 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        uint64_t v49 = v46;
      }
      else {
        uint64_t v49 = 32;
      }
      *(_DWORD *)&v197[4] = *(void *)a3;
      *(_DWORD *)v197 = 3;
      *(_DWORD *)&v197[8] = v48;
      *(_DWORD *)v195 = 1;
      *(void *)&v195[4] = v45 | (v49 << 32);
      *(void *)&v197[12] = *(void *)v195;
      *(_DWORD *)&v197[20] = v49;
      *(void *)&v197[24] = v47;
      uint64_t v198 = *(void *)&v195[4];
      LOBYTE(v177) = 0;
      v186 = &unk_26C67DAD0;
      int v187 = 0;
      if (v47 && v48) {
        sub_215B6926C(0, 17, (uint64_t)v197);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v47 && v48)
      {
        sub_215B69554(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v197;
        long long v193 = *(_OWORD *)&v197[16];
        uint64_t v194 = v198;
      }
      sub_215B69C24((uint64_t)&v186, &v177);
      v186 = &unk_26C67E4F0;
      operator new();
    case 21:
      v179 = (long long *)&unk_26C6676D0;
      if (*a3) {
        uint64_t v22 = 3;
      }
      else {
        uint64_t v22 = 0;
      }
      if (v22 * *a3 <= 0x20) {
        unsigned int v23 = 32;
      }
      else {
        unsigned int v23 = v22 * *a3;
      }
      uint64_t v24 = *(void *)a3;
      uint64_t v25 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = 32;
      }
      *(_DWORD *)&v197[4] = *(void *)a3;
      *(_DWORD *)v197 = 3;
      *(_DWORD *)&v197[8] = v25;
      *(_DWORD *)v195 = 1;
      *(void *)&v195[4] = v22 | (v26 << 32);
      *(void *)&v197[12] = *(void *)v195;
      *(_DWORD *)&v197[20] = v26;
      *(void *)&v197[24] = v24;
      uint64_t v198 = *(void *)&v195[4];
      LOBYTE(v177) = 0;
      v186 = &unk_26C67DAD0;
      int v187 = 0;
      if (v24 && v25) {
        sub_215B6926C(0, 21, (uint64_t)v197);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v24 && v25)
      {
        sub_215B69554(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v197;
        long long v193 = *(_OWORD *)&v197[16];
        uint64_t v194 = v198;
      }
      sub_215B69C24((uint64_t)&v186, &v177);
      v186 = &unk_26C67E580;
      operator new();
    case 22:
      if (*a3) {
        uint64_t v74 = 3;
      }
      else {
        uint64_t v74 = 0;
      }
      if (v74 * *a3 <= 0x10) {
        unsigned int v75 = 16;
      }
      else {
        unsigned int v75 = v74 * *a3;
      }
      uint64_t v76 = *(void *)a3;
      uint64_t v77 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        uint64_t v78 = v75;
      }
      else {
        uint64_t v78 = 16;
      }
      *(_DWORD *)v197 = 3;
      *(_DWORD *)&v197[4] = v76;
      *(void *)v195 = *(void *)v197;
      *(_DWORD *)v197 = 1;
      *(void *)&v197[4] = v74 | (v78 << 32);
      *(void *)&v195[12] = *(void *)v197;
      *(_DWORD *)&v195[8] = v77;
      *(_DWORD *)&v195[20] = v78;
      *(void *)&v195[24] = v76;
      uint64_t v196 = *(void *)&v197[4];
      __int16 v171 = 0;
      v186 = &unk_26C67DC80;
      int v187 = 0;
      if (v76 && v77) {
        sub_215B6D4A0(0, 22, (uint64_t)v195);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v76 && v77)
      {
        sub_215B6D788(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v195;
        long long v193 = *(_OWORD *)&v195[16];
        uint64_t v194 = v196;
      }
      if (v191 > 2) {
        goto LABEL_483;
      }
      if (v189)
      {
        uint64_t v107 = *v189;
        v106 = (std::__shared_weak_count *)v189[1];
        if (v106)
        {
          atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        if (v107)
        {
          if (v191 >= 2)
          {
            if (v191 != 2) {
LABEL_483:
            }
              sub_215742D4C();
            sub_215DC9BAC(v172, (uint64_t)&v188);
          }
          else
          {
            sub_215DC9A68(v172, (uint64_t)&v188);
          }
          sub_215B6E790((uint64_t)v197, (uint64_t)&v186);
          v173 = v197;
          v174 = &v171;
          if (*(_DWORD *)&v197[20] == 1)
          {
            if (*(_DWORD *)&v197[24] == *(_DWORD *)&v197[8])
            {
              sub_215B5A19C((uint64_t)&v173);
            }
            else
            {
              char v176 = 0;
              uint64_t v175 = *(unsigned int *)&v197[8];
              *(void *)&long long v177 = &v176;
              *((void *)&v177 + 1) = &v175;
              v178 = &v171;
              if (*(_DWORD *)&v197[8] && *(_DWORD *)&v197[12] && *(_DWORD *)&v197[16])
              {
                LODWORD(v179) = 0;
                HIDWORD(v179) = *(_DWORD *)&v197[8] - 1;
                LODWORD(v180) = 1;
                HIDWORD(v180) = *(_DWORD *)&v197[12] - 1;
                unsigned int v183 = *(_DWORD *)&v197[28];
                unint64_t v164 = *(void *)v197;
                unint64_t v184 = 0;
                uint64_t v185 = 0;
                int v181 = *(_DWORD *)&v197[24];
                unsigned int v182 = *(_DWORD *)&v197[16] - 1;
                if (*(_DWORD *)&v197[16] != 1)
                {
                  unsigned int v165 = 0;
                  do
                  {
                    sub_215B5A588((uint64_t)&v179, &v184, (uint64_t)&v177, v164);
                    v164 += 2 * v183;
                    ++v165;
                  }
                  while (v165 < v182);
                }
                sub_215B5A588((uint64_t)&v179, &v184, (uint64_t)&v177, v164);
              }
            }
          }
          else
          {
            *(void *)&long long v177 = &v171;
            if (*(_DWORD *)&v197[8] && *(_DWORD *)&v197[12] && *(_DWORD *)&v197[16])
            {
              v179 = &v177;
              sub_215B5A7A4((void **)&v179, (uint64_t)v197);
            }
          }
          sub_215DC9DEC(v172);
        }
      }
      v186 = &unk_26C67E610;
      operator new();
    case 25:
      v179 = (long long *)&unk_26C667740;
      uint64_t v7 = 4 * (*a3 != 0);
      if (v7 * *a3 <= 0x20) {
        unsigned int v8 = 32;
      }
      else {
        unsigned int v8 = v7 * *a3;
      }
      uint64_t v9 = *(void *)a3;
      uint64_t v10 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v11 = v8;
      }
      else {
        unint64_t v11 = 32;
      }
      *(_DWORD *)&v197[4] = *(void *)a3;
      *(_DWORD *)v197 = 4;
      *(_DWORD *)&v197[8] = v10;
      *(_DWORD *)v195 = 1;
      *(void *)&v195[4] = v7 & 0x3FFFFFFFFLL | ((unint64_t)(v11 >> 2) << 34);
      *(void *)&v197[12] = *(void *)v195;
      *(_DWORD *)&v197[20] = v11;
      *(void *)&v197[24] = v9;
      uint64_t v198 = *(void *)&v195[4];
      LOBYTE(v177) = 0;
      v186 = &unk_26C67DB60;
      int v187 = 0;
      if (v9 && v10) {
        sub_215B6A96C(0, 25, (uint64_t)v197);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v9 && v10)
      {
        sub_215B6AC54(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v197;
        long long v193 = *(_OWORD *)&v197[16];
        uint64_t v194 = v198;
      }
      sub_215B6B324((uint64_t)&v186, (uint64_t)&v177);
      v186 = &unk_26C67E6A0;
      operator new();
    case 29:
      v179 = (long long *)&unk_26C667778;
      uint64_t v12 = 4 * (*a3 != 0);
      if (v12 * *a3 <= 0x20) {
        unsigned int v13 = 32;
      }
      else {
        unsigned int v13 = v12 * *a3;
      }
      uint64_t v14 = *(void *)a3;
      uint64_t v15 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v16 = v13;
      }
      else {
        unint64_t v16 = 32;
      }
      *(_DWORD *)&v197[4] = *(void *)a3;
      *(_DWORD *)v197 = 4;
      *(_DWORD *)&v197[8] = v15;
      *(_DWORD *)v195 = 1;
      *(void *)&v195[4] = v12 & 0x3FFFFFFFFLL | ((unint64_t)(v16 >> 2) << 34);
      *(void *)&v197[12] = *(void *)v195;
      *(_DWORD *)&v197[20] = v16;
      *(void *)&v197[24] = v14;
      uint64_t v198 = *(void *)&v195[4];
      LOBYTE(v177) = 0;
      v186 = &unk_26C67DB60;
      int v187 = 0;
      if (v14 && v15) {
        sub_215B6A96C(0, 29, (uint64_t)v197);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v14 && v15)
      {
        sub_215B6AC54(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v197;
        long long v193 = *(_OWORD *)&v197[16];
        uint64_t v194 = v198;
      }
      sub_215B6B324((uint64_t)&v186, (uint64_t)&v177);
      v186 = &unk_26C67E730;
      operator new();
    case 31:
      v172[0] = &unk_26C6677B0;
      uint64_t v55 = 4 * (*a3 != 0);
      if (v55 * *a3 <= 0x10) {
        unsigned int v56 = 16;
      }
      else {
        unsigned int v56 = v55 * *a3;
      }
      uint64_t v57 = *(void *)a3;
      uint64_t v58 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v59 = v56;
      }
      else {
        unint64_t v59 = 16;
      }
      *(_DWORD *)v197 = 4;
      *(_DWORD *)&v197[4] = v57;
      *(void *)v195 = *(void *)v197;
      *(_DWORD *)v197 = 1;
      *(void *)&v197[4] = v55 & 0x3FFFFFFFFLL | ((unint64_t)(v59 >> 2) << 34);
      *(void *)&v195[12] = *(void *)v197;
      *(_DWORD *)&v195[8] = v58;
      *(_DWORD *)&v195[20] = v59;
      *(void *)&v195[24] = v57;
      uint64_t v196 = *(void *)&v197[4];
      LOWORD(v184) = 0;
      v186 = &unk_26C67DEC0;
      int v187 = 0;
      if (v57 && v58) {
        sub_215B7299C(0, 31, (uint64_t)v195);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v57 && v58)
      {
        sub_215B72C84(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v195;
        long long v193 = *(_OWORD *)&v195[16];
        uint64_t v194 = v196;
      }
      if (v191 > 2) {
        goto LABEL_479;
      }
      if (v189)
      {
        uint64_t v99 = *v189;
        v98 = (std::__shared_weak_count *)v189[1];
        if (v98)
        {
          atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v98->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        if (v99)
        {
          if (v191 >= 2)
          {
            if (v191 != 2) {
LABEL_479:
            }
              sub_215742D4C();
            sub_215DC9BAC(&v179, (uint64_t)&v188);
          }
          else
          {
            sub_215DC9A68(&v179, (uint64_t)&v188);
          }
          sub_215B73CBC((uint64_t)v197, (uint64_t)&v186);
          *(void *)&long long v177 = v197;
          *((void *)&v177 + 1) = &v184;
          sub_215B5B578((uint64_t *)&v177, v140);
          sub_215DC9DEC(&v179);
        }
      }
      v186 = &unk_26C67E7C0;
      operator new();
    case 32:
      v172[0] = &unk_26C6677E8;
      uint64_t v79 = 4 * (*a3 != 0);
      if (v79 * *a3 <= 8) {
        unsigned int v80 = 8;
      }
      else {
        unsigned int v80 = v79 * *a3;
      }
      uint64_t v81 = *(void *)a3;
      uint64_t v82 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v83 = v80;
      }
      else {
        unint64_t v83 = 8;
      }
      *(_DWORD *)v197 = 4;
      *(_DWORD *)&v197[4] = v81;
      *(void *)v195 = *(void *)v197;
      *(_DWORD *)v197 = 1;
      *(void *)&v197[4] = v79 & 0x3FFFFFFFFLL | ((unint64_t)(v83 >> 2) << 34);
      *(void *)&v195[12] = *(void *)v197;
      *(_DWORD *)&v195[8] = v82;
      *(_DWORD *)&v195[20] = v83;
      *(void *)&v195[24] = v81;
      uint64_t v196 = *(void *)&v197[4];
      LODWORD(v184) = 0;
      v186 = &unk_26C67E070;
      int v187 = 0;
      if (v81 && v82) {
        sub_215B769AC(0, 32, (uint64_t)v195);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v81 && v82)
      {
        sub_215B76C94(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v195;
        long long v193 = *(_OWORD *)&v195[16];
        uint64_t v194 = v196;
      }
      if (v191 > 2) {
        goto LABEL_484;
      }
      if (v189)
      {
        uint64_t v109 = *v189;
        v108 = (std::__shared_weak_count *)v189[1];
        if (v108)
        {
          atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v108->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        if (v109)
        {
          if (v191 >= 2)
          {
            if (v191 != 2) {
LABEL_484:
            }
              sub_215742D4C();
            sub_215DC9BAC(&v179, (uint64_t)&v188);
          }
          else
          {
            sub_215DC9A68(&v179, (uint64_t)&v188);
          }
          sub_215B77CCC((uint64_t)v197, (uint64_t)&v186);
          *(void *)&long long v177 = v197;
          *((void *)&v177 + 1) = &v184;
          sub_215B5C550((uint64_t *)&v177);
          sub_215DC9DEC(&v179);
        }
      }
      v186 = &unk_26C67E850;
      operator new();
    case 33:
      v179 = (long long *)&unk_26C667820;
      uint64_t v27 = 4 * (*a3 != 0);
      if (v27 * *a3 <= 0x20) {
        unsigned int v28 = 32;
      }
      else {
        unsigned int v28 = v27 * *a3;
      }
      uint64_t v29 = *(void *)a3;
      uint64_t v30 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v31 = v28;
      }
      else {
        unint64_t v31 = 32;
      }
      *(_DWORD *)&v197[4] = *(void *)a3;
      *(_DWORD *)v197 = 4;
      *(_DWORD *)&v197[8] = v30;
      *(_DWORD *)v195 = 1;
      *(void *)&v195[4] = v27 & 0x3FFFFFFFFLL | ((unint64_t)(v31 >> 2) << 34);
      *(void *)&v197[12] = *(void *)v195;
      *(_DWORD *)&v197[20] = v31;
      *(void *)&v197[24] = v29;
      uint64_t v198 = *(void *)&v195[4];
      LOBYTE(v177) = 0;
      v186 = &unk_26C67DB60;
      int v187 = 0;
      if (v29 && v30) {
        sub_215B6A96C(0, 33, (uint64_t)v197);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v29 && v30)
      {
        sub_215B6AC54(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v197;
        long long v193 = *(_OWORD *)&v197[16];
        uint64_t v194 = v198;
      }
      sub_215B6B324((uint64_t)&v186, (uint64_t)&v177);
      v186 = &unk_26C67E8E0;
      operator new();
    case 37:
      v179 = (long long *)&unk_26C667858;
      uint64_t v17 = 4 * (*a3 != 0);
      if (v17 * *a3 <= 0x20) {
        unsigned int v18 = 32;
      }
      else {
        unsigned int v18 = v17 * *a3;
      }
      uint64_t v19 = *(void *)a3;
      uint64_t v20 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v21 = v18;
      }
      else {
        unint64_t v21 = 32;
      }
      *(_DWORD *)&v197[4] = *(void *)a3;
      *(_DWORD *)v197 = 4;
      *(_DWORD *)&v197[8] = v20;
      *(_DWORD *)v195 = 1;
      *(void *)&v195[4] = v17 & 0x3FFFFFFFFLL | ((unint64_t)(v21 >> 2) << 34);
      *(void *)&v197[12] = *(void *)v195;
      *(_DWORD *)&v197[20] = v21;
      *(void *)&v197[24] = v19;
      uint64_t v198 = *(void *)&v195[4];
      LOBYTE(v177) = 0;
      v186 = &unk_26C67DB60;
      int v187 = 0;
      if (v19 && v20) {
        sub_215B6A96C(0, 37, (uint64_t)v197);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v19 && v20)
      {
        sub_215B6AC54(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v197;
        long long v193 = *(_OWORD *)&v197[16];
        uint64_t v194 = v198;
      }
      sub_215B6B324((uint64_t)&v186, (uint64_t)&v177);
      v186 = &unk_26C67E970;
      operator new();
    case 38:
      v172[0] = &unk_26C667890;
      uint64_t v60 = 4 * (*a3 != 0);
      if (v60 * *a3 <= 0x10) {
        unsigned int v61 = 16;
      }
      else {
        unsigned int v61 = v60 * *a3;
      }
      uint64_t v62 = *(void *)a3;
      uint64_t v63 = HIDWORD(*(void *)a3);
      if (a3[1]) {
        unint64_t v64 = v61;
      }
      else {
        unint64_t v64 = 16;
      }
      *(_DWORD *)v197 = 4;
      *(_DWORD *)&v197[4] = v62;
      *(void *)v195 = *(void *)v197;
      *(_DWORD *)v197 = 1;
      *(void *)&v197[4] = v60 & 0x3FFFFFFFFLL | ((unint64_t)(v64 >> 2) << 34);
      *(void *)&v195[12] = *(void *)v197;
      *(_DWORD *)&v195[8] = v63;
      *(_DWORD *)&v195[20] = v64;
      *(void *)&v195[24] = v62;
      uint64_t v196 = *(void *)&v197[4];
      LOWORD(v184) = 0;
      v186 = &unk_26C67DD10;
      int v187 = 0;
      if (v62 && v63) {
        sub_215B6E9BC(0, 38, (uint64_t)v195);
      }
      v189 = 0;
      uint64_t v190 = 0;
      v188 = &unk_26C684900;
      unsigned int v191 = 0;
      if (v62 && v63)
      {
        sub_215B6ECA4(0, (uint64_t)&v188, (uint64_t)&v192);
      }
      else
      {
        long long v192 = *(_OWORD *)v195;
        long long v193 = *(_OWORD *)&v195[16];
        uint64_t v194 = v196;
      }
      if (v191 > 2) {
        goto LABEL_480;
      }
      if (v189)
      {
        uint64_t v101 = *v189;
        v100 = (std::__shared_weak_count *)v189[1];
        if (v100)
        {
          atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v100->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        if (v101)
        {
          if (v191 >= 2)
          {
            if (v191 != 2) {
LABEL_480:
            }
              sub_215742D4C();
            sub_215DC9BAC(&v179, (uint64_t)&v188);
          }
          else
          {
            sub_215DC9A68(&v179, (uint64_t)&v188);
          }
          sub_215B6FCAC((uint64_t)v197, (uint64_t)&v186);
          *(void *)&long long v177 = v197;
          *((void *)&v177 + 1) = &v184;
          sub_215B5A8CC((uint64_t)&v177);
          sub_215DC9DEC(&v179);
        }
      }
      v186 = &unk_26C67EA00;
      operator new();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215B9A7DC(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A7F0(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A804(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A818(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A82C(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A840(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A854(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A868(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A87C(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A890(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A8A4(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A8B8(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A8CC(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A8E0(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A8F4(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A908(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A91C(_Unwind_Exception *a1)
{
  sub_215B674F0(v1);
  _Unwind_Resume(a1);
}

void sub_215B9A930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33)
{
  sub_215DC9DEC(&a12);
  if (a33 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C67EED8[a33])(v34 - 120, v33);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215B9AFF4@<X0>(void *a1@<X0>, void *a2@<X1>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v7 = (void *)a1[3];
  if (v7)
  {
    if (v7 == a1)
    {
      BOOL v36 = v35;
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v35);
    }
    else
    {
      BOOL v36 = (void *)(*(uint64_t (**)(void))(*v7 + 16))(a1[3]);
    }
  }
  else
  {
    BOOL v36 = 0;
  }
  unsigned __int8 v8 = std::istream::peek();
  sub_215B9E5C8(a3, v8, (uint64_t)&v24);
  if (v34)
  {
    CGDataProviderSequentialCallbacks callbacks = *(CGDataProviderSequentialCallbacks *)byte_26C6812C0;
    CGDataProviderRef v9 = CGDataProviderCreateSequential(a2, &callbacks);
    sub_215CBFCE4((int)&v23, v9, 0);
  }
  *(_OWORD *)&callbacks.version = v24;
  uint64_t v10 = sub_215741BFC(&callbacks.skipForward, &v25);
  *(_OWORD *)a4 = *(_OWORD *)&callbacks.version;
  *(unsigned char *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 112) = 0;
  if (v22)
  {
    *(unsigned char *)(a4 + 40) = 0;
    int v11 = v15;
    if (v15)
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v10;
      *(void *)(a4 + 32) = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      *(unsigned char *)(a4 + 40) = 1;
    }
    *(unsigned char *)(a4 + 48) = 0;
    *(unsigned char *)(a4 + 104) = 0;
    if (v21)
    {
      uint64_t v12 = v18;
      *(void *)(a4 + 64) = v17;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)v16;
      v16[0] = 0;
      v16[1] = 0;
      *(void *)(a4 + 72) = v12;
      *(_OWORD *)(a4 + 80) = *(_OWORD *)v19;
      *(void *)(a4 + 96) = v20;
      uint64_t v17 = 0;
      v19[0] = 0;
      v19[1] = 0;
      uint64_t v20 = 0;
      *(unsigned char *)(a4 + 104) = 1;
    }
    *(unsigned char *)(a4 + 112) = 1;
    *(unsigned char *)(a4 + 120) = 0;
    if (v11 && SHIBYTE(callbacks.releaseInfo) < 0)
    {
      operator delete(callbacks.skipForward);
      if (v34) {
        goto LABEL_20;
      }
    }
    else if (v34)
    {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)(a4 + 120) = 0;
    if (v34) {
      goto LABEL_20;
    }
  }
  if (v33)
  {
    if (v32)
    {
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v29 < 0) {
        operator delete(v28);
      }
    }
    if (v27 && v26 < 0) {
      operator delete((void *)v25);
    }
  }
LABEL_20:
  uint64_t result = (uint64_t)v36;
  if (v36 == v35) {
    return (*(uint64_t (**)(void *))(v35[0] + 32))(v35);
  }
  if (v36) {
    return (*(uint64_t (**)(void))(*v36 + 40))();
  }
  return result;
}

void sub_215B9BCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_215831770((uint64_t)&a25);
  sub_2157407D4((uint64_t)&a47);
  if (a71 < 0) {
    operator delete(__p);
  }
  sub_215733368((uint64_t)&a72);
  sub_215733368(v72 - 256);
  sub_2157407D4(v72 - 240);
  sub_2159AF530((void *)(v72 - 104));
  _Unwind_Resume(a1);
}

void sub_215B9BD18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x215B9BDFCLL);
}

void sub_215B9BD30()
{
}

void sub_215B9BD3C()
{
}

void sub_215B9BD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_215733368((uint64_t)&a47);
  sub_215733368((uint64_t)&a9);
  sub_215733368((uint64_t)&a25);
  sub_215733368((uint64_t)&a63);
  sub_215733368(v63 - 256);
  sub_2157407D4(v63 - 240);
  sub_2159AF530((void *)(v63 - 104));
  _Unwind_Resume(a1);
}

void sub_215B9BDA0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v2) {
      CFRelease(v2);
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_215B9BDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void sub_215B9BE3C(_Unwind_Exception *a1)
{
  sub_2157407D4(v1 - 240);
  sub_2159AF530((void *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_215B9BE58()
{
  sub_2159AF530((void *)(v0 - 104));
  JUMPOUT(0x215B9BE64);
}

void sub_215B9BE6C(int a1, char *info, int a3)
{
}

void sub_215B9C0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,int a52,__int16 a53,char a54,char a55)
{
  if (!(_BYTE)a53)
  {
    if ((_BYTE)a49)
    {
      if (a47)
      {
        if (a46 < 0) {
          operator delete(__p);
        }
        if (a39 < 0) {
          operator delete(a34);
        }
      }
      if (a33)
      {
        if (a32 < 0) {
          operator delete(a27);
        }
      }
    }
    _Unwind_Resume(exception_object);
  }
  sub_215733368((uint64_t)&a25);
  _Unwind_Resume(exception_object);
}

void sub_215B9C14C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215B9C184(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215B9C1A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP13CGImageSourceEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP13CGImageSourceEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP13CGImageSourceEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP13CGImageSourceEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215B9C220(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215B9C258(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215B9C27C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP7CGImageEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP7CGImageEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP7CGImageEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP7CGImageEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215B9C2F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215B9C414(&v5, v3);
}

void sub_215B9C400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B9C414(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215B9C488(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215B9C4A0(_Unwind_Exception *a1)
{
}

void sub_215B9C4B8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215B9C4F0(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215B9C514(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP14CGDataProviderEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP14CGDataProviderEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP14CGDataProviderEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP14CGDataProviderEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215B9C588(unsigned int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_215741BFC(v7, a2);
  sub_215B9C704((uint64_t)&v16, a1, (long long *)v7);
  *(_OWORD *)a3 = v16;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  if (v26)
  {
    *(unsigned char *)(a3 + 40) = 0;
    int v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(void *)(a3 + 32) = v18;
      uint64_t v18 = 0;
      long long __p = 0uLL;
      *(unsigned char *)(a3 + 40) = 1;
    }
    *(unsigned char *)(a3 + 48) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    if (v25)
    {
      uint64_t v6 = v22;
      *(void *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      long long v20 = 0uLL;
      *(void *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(void *)(a3 + 96) = v24;
      uint64_t v21 = 0;
      long long v23 = 0uLL;
      uint64_t v24 = 0;
      *(unsigned char *)(a3 + 104) = 1;
    }
    *(unsigned char *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0) {
      operator delete((void *)__p);
    }
  }
  if (v15)
  {
    if (!v14) {
      goto LABEL_13;
    }
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9) {
          return;
        }
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9) {
      return;
    }
LABEL_14:
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_215B9C6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215B9C704(uint64_t a1, unsigned int a2, long long *a3)
{
  uint64_t v6 = sub_215B9D938();
  sub_215741BFC(__dst, a3);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (!v18) {
    return a1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  if (v11)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(void *)(a1 + 32) = v10;
    __dst[1] = 0;
    uint64_t v10 = 0;
    __dst[0] = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  if (!v17)
  {
    *(unsigned char *)(a1 + 112) = 1;
    if (!v11) {
      return a1;
    }
    goto LABEL_13;
  }
  uint64_t v7 = v14;
  *(void *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v12;
  v12[0] = 0;
  v12[1] = 0;
  *(void *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(void *)(a1 + 96) = v16;
  __p[1] = 0;
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  __p[0] = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(unsigned char *)(a1 + 112) = 1;
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(v12[0]);
    if (!v11) {
      return a1;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if (!v11) {
    return a1;
  }
LABEL_13:
  if ((SHIBYTE(v10) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(__dst[0]);
  return a1;
}

void sub_215B9C864()
{
}

void sub_215B9CA60(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215B9CA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B9CAC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  int v5 = (std::__shared_weak_count *)a3[1];
  if (v5
    && (atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed),
        !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v6) {
      goto LABEL_4;
    }
  }
  else if (v6)
  {
LABEL_4:
    uint64_t v7 = (char *)&v31;
    int v8 = *(_DWORD *)(a2 + 48) - 1;
    if v8 <= 0x27 && ((0xF1F1F0000FuLL >> v8)) {
      uint64_t v7 = (char *)&v25 + 4 * qword_215EDE210[v8];
    }
    if (v7 - (char *)&v25 == 72)
    {
      int v37 = 0;
      sub_2158353B0(v36, "Invalid image format. Format ");
      sub_215806C64();
    }
    sub_215B9D3B4(a2, v36);
    *(void *)&long long v25 = &unk_26C65F5B0;
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v11 = *(void *)(a2 + 40);
      int v12 = *(_DWORD *)(a2 + 48);
      __int16 v13 = *(_WORD *)(a2 + 52);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v11 = *(void *)(a2 + 40);
      int v12 = *(_DWORD *)(a2 + 48);
      __int16 v13 = *(_WORD *)(a2 + 52);
    }
    *((void *)&v25 + 1) = v9;
    *(void *)&long long v26 = v10;
    *((void *)&v26 + 1) = *(void *)(a2 + 24);
    LODWORD(v27) = *(_DWORD *)(a2 + 32);
    uint64_t v28 = v11;
    LODWORD(v29) = v12;
    WORD2(v29) = v13;
    if (v10)
    {
      if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    sub_215CC17A8((uint64_t)&v25);
  }
  sub_2157CFEA8((uint64_t)v16, "Unsupported format");
  char v24 = 1;
  sub_215E0A198((uint64_t)v16, (uint64_t)&v25);
  *(_OWORD *)a1 = v25;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (!v35)
  {
    *(unsigned char *)(a1 + 120) = 0;
    if (!v24) {
      return;
    }
    goto LABEL_23;
  }
  *(unsigned char *)(a1 + 40) = 0;
  int v14 = v28;
  if ((_BYTE)v28)
  {
    *(_OWORD *)(a1 + 16) = v26;
    *(void *)(a1 + 32) = v27;
    uint64_t v27 = 0;
    long long v26 = 0uLL;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  if (v34)
  {
    uint64_t v15 = v31;
    *(void *)(a1 + 64) = v30;
    *(_OWORD *)(a1 + 48) = v29;
    long long v29 = 0uLL;
    *(void *)(a1 + 72) = v15;
    *(_OWORD *)(a1 + 80) = v32;
    *(void *)(a1 + 96) = v33;
    uint64_t v30 = 0;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(a1 + 104) = 1;
  }
  *(unsigned char *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 120) = 0;
  if (v14 && SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  if (v24)
  {
LABEL_23:
    if (v23)
    {
      if (v22 < 0) {
        operator delete(__p);
      }
      if (v20 < 0) {
        operator delete(v19);
      }
    }
    if (v18 && v17 < 0) {
      operator delete(v16[0]);
    }
  }
}

void sub_215B9D2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a29 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B9D3B4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    goto LABEL_12;
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (*(unsigned char *)(a1 + 53)) {
          goto LABEL_8;
        }
LABEL_12:
        *a2 = 0;
        return;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 53)) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v7 = *(void (**)(uint64_t, void))(*(void *)v3 + 96);

  v7(v3, 0);
}

void sub_215B9D4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215B9D60C(&v5, v3);
}

void sub_215B9D5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B9D60C(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215B9D680(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215B9D698(_Unwind_Exception *a1)
{
}

void sub_215B9D6AC(uint64_t a1, const void *a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215B9D7C4(&v3, a2);
}

void sub_215B9D7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215B9D7C4(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215B9D838(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215B9D850(_Unwind_Exception *a1)
{
}

void sub_215B9D868(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215B9D8A0(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215B9D8C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIP18CGImageDestinationEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIP18CGImageDestinationEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIP18CGImageDestinationEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIP18CGImageDestinationEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void (***sub_215B9D938())(std::error_category *__hidden this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678903E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678903E0))
  {
    return off_26ACF2420;
  }
  __cxa_atexit((void (*)(void *))std::error_category::~error_category, off_26ACF2420, &dword_21572C000);
  __cxa_guard_release(&qword_2678903E0);
  return off_26ACF2420;
}

const char *sub_215B9D9B8()
{
  return "ImageIO";
}

void sub_215B9D9C4()
{
  int v0 = 0;
  operator new();
}

void sub_215B9DC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  MEMORY[0x2166C4D20](v24, 0x10B2C40EED050F3);
  if (a12 != -1) {
    ((void (*)(char *, uint64_t *))off_26C67F468[a12])(&a17, &a9);
  }
  _Unwind_Resume(a1);
}

void sub_215B9DCBC(uint64_t a1, int a2, int a3)
{
  int v3 = a3;
  int v4 = a2;
  v5[6] = 0;
  sub_2158D723C(v5, "Requested to load ");
  sub_215B9C864();
}

void sub_215B9DEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B9DF10(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215B9DF24(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215B9DF38(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215B9DF4C(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215B9DF60(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215B9DF74(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215B9DF88(int a1, int a2)
{
  int v2 = a2;
  int v3 = a1;
  sub_215B9E0D0("Desired image format is ");
}

void sub_215B9E0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B9E0D0(char *__s)
{
  v1[6] = 0;
  sub_2157F25FC(v1, __s);
  sub_215806C64();
}

void sub_215B9E230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E2A8(int a1, int a2)
{
  int v2 = a2;
  int v3 = a1;
  sub_215B9E3F0("Requested to load format ");
}

void sub_215B9E3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B9E3F0(char *__s)
{
  v1[6] = 0;
  sub_2157DBC1C(v1, __s);
  sub_215806C64();
}

void sub_215B9E550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215B9E5C8(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v51[19] = *MEMORY[0x263EF8340];
  if (a2 == 255)
  {
    if ((a1 & 0xFFFFFFFB) != 0) {
      sub_215B9DCBC((uint64_t)v39, a1, 4);
    }
    int v4 = 4;
    goto LABEL_16;
  }
  if (a2 == 137)
  {
    if (a1 != 3)
    {
      if (a1) {
        sub_215B9DCBC((uint64_t)v39, a1, 3);
      }
    }
    int v4 = 3;
LABEL_16:
    *(_DWORD *)a3 = v4;
    *(unsigned char *)(a3 + 120) = 1;
    return;
  }
  if ((a2 & 0xFFFFFFFB) == 0x49)
  {
    if (a1 != 5 && a1) {
      sub_215B9DCBC((uint64_t)v39, a1, 5);
    }
    int v4 = 5;
    goto LABEL_16;
  }
  sub_2157328B8((uint64_t)v39);
  *(_DWORD *)((char *)&v40 + *((void *)v40 - 3) + 8) = *(_DWORD *)((unsigned char *)&v40 + *((void *)v40 - 3) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  if ((v50 & 0x10) != 0)
  {
    unint64_t v7 = v49;
    if (v49 < v46)
    {
      unint64_t v49 = v46;
      unint64_t v7 = v46;
    }
    int v8 = v45;
    size_t v5 = v7 - (void)v45;
    if (v7 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_61;
    }
  }
  else
  {
    if ((v50 & 8) == 0)
    {
      size_t v5 = 0;
      HIBYTE(v18) = 0;
      uint64_t v6 = &v16;
      goto LABEL_28;
    }
    int v8 = (const void *)v43;
    size_t v5 = *((void *)&v44 + 1) - v43;
    if ((unint64_t)(*((void *)&v44 + 1) - v43) >= 0x7FFFFFFFFFFFFFF8) {
LABEL_61:
    }
      sub_215731CD8();
  }
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v6 = operator new(v9 + 1);
    size_t v17 = v5;
    int64_t v18 = v10 | 0x8000000000000000;
    uint64_t v16 = v6;
    goto LABEL_27;
  }
  HIBYTE(v18) = v5;
  uint64_t v6 = &v16;
  if (v5) {
LABEL_27:
  }
    memmove(v6, v8, v5);
LABEL_28:
  *((unsigned char *)v6 + v5) = 0;
  v39[0] = *MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void **)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v39 + *(void *)(v39[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v40 = v11;
  uint64_t v41 = MEMORY[0x263F8C318] + 16;
  if (v48 < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166C4BF0](v51);
  v39[0] = "Found file format of unsupported format signature byte '0x";
  v39[1] = 58;
  uint64_t v12 = HIBYTE(v18);
  __int16 v13 = &v16;
  if (v18 < 0)
  {
    __int16 v13 = v16;
    uint64_t v12 = v17;
  }
  uint64_t v40 = v13;
  uint64_t v41 = v12;
  uint64_t v42 = "'.";
  uint64_t v43 = 2;
  sub_2157430CC((uint64_t)v39, (uint64_t)&v44, 0, 0, &v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    sub_215738B0C(&__dst, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v19;
  }
  char v21 = 1;
  LOBYTE(v22) = 0;
  char v26 = 0;
  char v27 = 1;
  sub_215B9C588(1u, (long long *)&__dst, (uint64_t)&v28);
  *(_OWORD *)a3 = v28;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  if (v38)
  {
    *(unsigned char *)(a3 + 40) = 0;
    int v14 = v31;
    if (v31)
    {
      *(_OWORD *)(a3 + 16) = v29;
      *(void *)(a3 + 32) = v30;
      uint64_t v30 = 0;
      long long v29 = 0uLL;
      *(unsigned char *)(a3 + 40) = 1;
    }
    *(unsigned char *)(a3 + 48) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    if (v37)
    {
      uint64_t v15 = v34;
      *(void *)(a3 + 64) = v33;
      *(_OWORD *)(a3 + 48) = v32;
      long long v32 = 0uLL;
      *(void *)(a3 + 72) = v15;
      *(_OWORD *)(a3 + 80) = v35;
      *(void *)(a3 + 96) = v36;
      uint64_t v33 = 0;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(a3 + 104) = 1;
    }
    *(unsigned char *)(a3 + 112) = 1;
    *(unsigned char *)(a3 + 120) = 0;
    if (v14 && SHIBYTE(v30) < 0) {
      operator delete((void *)v29);
    }
  }
  else
  {
    *(unsigned char *)(a3 + 120) = 0;
  }
  if (v27)
  {
    if (v26)
    {
      if (v25 < 0) {
        operator delete(v24);
      }
      if (v23 < 0) {
        operator delete(v22);
      }
    }
    if (v21 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18) < 0) {
LABEL_57:
    }
      operator delete(v16);
  }
  else if (SHIBYTE(v18) < 0)
  {
    goto LABEL_57;
  }
}

void sub_215B9EBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215B9EC50(std::error_category *a1)
{
  std::error_category::~error_category(a1);

  JUMPOUT(0x2166C4D20);
}

_DWORD *sub_215B9EC88(_DWORD ***a1)
{
  return sub_21594B828(**a1, (char *)(*a1)[1]);
}

void sub_215B9EC94(uint64_t a1, uint64_t a2)
{
}

void sub_215B9ECA4(uint64_t *a1, uint64_t a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  int v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  __int16 v13 = v3;
  *(void *)int v14 = v18[0];
  *(void *)&_DWORD v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  size_t v5 = __p;
  uint64_t v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  int v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26C67F468[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21573A150((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_215B9EE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_215B9EEA0(uint64_t a1, uint64_t a2)
{
  int v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    uint64_t result = sub_215B9EF9C((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  uint64_t result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_215B9EF94(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_215B9EF9C(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AD8();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  int v8 = &v7[24 * v3];
  char v21 = v8;
  char v22 = v8;
  char v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)int v8 = v17;
    int v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *int v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      __int16 v13 = (void **)*a1;
      int v14 = (void **)a1[1];
      if (v14 == *a1) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  __int16 v13 = (void **)*a1;
  int v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 3);
    *((void *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  int v14 = (void **)*a1;
  std::string v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*(v19 - 3));
    }
    v19 -= 3;
  }
LABEL_27:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_215B9F19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215739038((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_215B9F1B0(_DWORD ***a1)
{
  return sub_215B9F1CC(**a1, (char *)(*a1)[1]);
}

void sub_215B9F1BC(uint64_t a1, uint64_t a2)
{
}

_DWORD *sub_215B9F1CC(_DWORD *a1, char *__s)
{
  uint64_t v4 = a1[6];
  if (v4 != -1) {
    ((void (*)(char *, _DWORD *))off_26C67F468[v4])(&v11, a1);
  }
  a1[6] = -1;
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v8 = v5 | 7;
    }
    uint64_t v9 = v8 + 1;
    size_t v7 = operator new(v8 + 1);
    *((void *)a1 + 1) = v6;
    *((void *)a1 + 2) = v9 | 0x8000000000000000;
    *(void *)a1 = v7;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v5;
    size_t v7 = a1;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_215B9F2C0(uint64_t *a1, uint64_t a2)
{
  void v18[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  *(void *)((char *)v18 + 7) = *(void *)(a2 + 15);
  unint64_t v3 = *(void **)a2;
  v18[0] = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  __int16 v13 = v3;
  *(void *)int v14 = v18[0];
  *(void *)&_DWORD v14[7] = *(void *)((char *)v18 + 7);
  char v15 = v4;
  memset(v18, 0, 15);
  size_t v5 = __p;
  size_t v6 = (const char *)a1[1];
  size_t v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  uint64_t v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    size_t v5 = operator new(v10 + 1);
    __p[1] = v8;
    unint64_t v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((unsigned char *)v8 + (void)v5) = 0;
    uint64_t v9 = *(unsigned int *)(v2 + 24);
    if (v9 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7) {
    goto LABEL_9;
  }
  LOBYTE(__p[0]) = 0;
  uint64_t v9 = *(unsigned int *)(v2 + 24);
  if (v9 != -1) {
LABEL_10:
  }
    ((void (*)(char *, uint64_t))off_26C67F468[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_21573A150((void *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0) {
    goto LABEL_15;
  }
}

void sub_215B9F478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_215B9F4BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(const char **)(*(void *)a1 + 32);
  char v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(void *)(a2 + 16))
  {
    uint64_t result = sub_215B9F5B8((void **)a2, v3);
    *(void *)(a2 + 8) = result;
    return result;
  }
  size_t v5 = strlen(*(const char **)(*(void *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v7 = operator new(v9 + 1);
    *((void *)v4 + 1) = v6;
    *((void *)v4 + 2) = v10 | 0x8000000000000000;
    *(void *)char v4 = v7;
  }
  else
  {
    v4[23] = v5;
    size_t v7 = v4;
    if (!v5) {
      goto LABEL_11;
    }
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((unsigned char *)v7 + v6) = 0;
  uint64_t result = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  *(void *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_215B9F5B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_215B9F5B8(void **a1, const char *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AD8();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  char v21 = v8;
  char v22 = v8;
  char v23 = &v7[24 * v6];
  size_t v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v15 = v9 | 7;
    }
    uint64_t v16 = v15 + 1;
    unint64_t v17 = (char *)operator new(v15 + 1);
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v16 | 0x8000000000000000;
    *(void *)uint64_t v8 = v17;
    uint64_t v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *uint64_t v8 = 0;
      uint64_t v11 = v8;
      char v12 = v8 + 24;
      __int16 v13 = (void **)*a1;
      int v14 = (void **)a1[1];
      if (v14 == *a1) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  uint64_t v11 = v21;
  char v12 = v22 + 24;
  __int16 v13 = (void **)*a1;
  int v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    long long v18 = *(_OWORD *)(v14 - 3);
    *((void *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  int v14 = (void **)*a1;
  std::string v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0) {
      operator delete(*(v19 - 3));
    }
    v19 -= 3;
  }
LABEL_27:
  if (v14) {
    operator delete(v14);
  }
  return v12;
}

void sub_215B9F7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215739038((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215B9F7CC(const void *a1, size_t a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  *((unsigned char *)&v44.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v44, ".pgm");
  char v47 = 4;
  int v45 = 1;
  strcpy((char *)v46, ".ppm");
  char v50 = 4;
  int v48 = 2;
  strcpy((char *)v49, ".jpg");
  char v53 = 5;
  int v51 = 4;
  strcpy((char *)v52, ".jpeg");
  char v56 = 4;
  int v54 = 4;
  strcpy((char *)v55, ".png");
  char v59 = 5;
  int v57 = 3;
  strcpy((char *)v58, ".tiff");
  char v62 = 4;
  int v60 = 5;
  strcpy((char *)__p, ".tif");
  int v63 = 5;
  *(_OWORD *)uint64_t v41 = 0u;
  *(_OWORD *)uint64_t v42 = 0u;
  int v43 = 1065353216;
  sub_215B9FF18((uint64_t)v41, (uint64_t)&v44, (uint64_t)&v44);
  sub_215B9FF18((uint64_t)v41, (uint64_t)v46, (uint64_t)v46);
  sub_215B9FF18((uint64_t)v41, (uint64_t)v49, (uint64_t)v49);
  sub_215B9FF18((uint64_t)v41, (uint64_t)v52, (uint64_t)v52);
  sub_215B9FF18((uint64_t)v41, (uint64_t)v55, (uint64_t)v55);
  sub_215B9FF18((uint64_t)v41, (uint64_t)v58, (uint64_t)v58);
  sub_215B9FF18((uint64_t)v41, (uint64_t)__p, (uint64_t)__p);
  if (v62 < 0)
  {
    operator delete(__p[0]);
    if ((v59 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v56 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v59 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v58[0]);
  if ((v56 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v53 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v55[0]);
  if ((v53 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v50 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v52[0]);
  if ((v50 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v47 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v49[0]);
  if ((v47 & 0x80000000) == 0)
  {
LABEL_7:
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v46[0]);
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    if (a2 < 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_9;
    }
LABEL_41:
    sub_215731CD8();
  }
LABEL_40:
  operator delete(v44.__r_.__value_.__l.__data_);
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_41;
  }
LABEL_9:
  if (a2 >= 0x17)
  {
    uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v5 = a2 | 7;
    }
    uint64_t v6 = v5 + 1;
    p_dst = (void **)operator new(v5 + 1);
    size_t v39 = a2;
    int64_t v40 = v6 | 0x8000000000000000;
    std::string __dst = p_dst;
  }
  else
  {
    HIBYTE(v40) = a2;
    p_dst = (void **)&__dst;
    if (!a2) {
      goto LABEL_16;
    }
  }
  memmove(p_dst, a1, a2);
LABEL_16:
  *((unsigned char *)p_dst + a2) = 0;
  int v7 = SHIBYTE(v40);
  uint64_t v8 = __dst;
  if (v40 >= 0) {
    std::string::size_type v9 = HIBYTE(v40);
  }
  else {
    std::string::size_type v9 = v39;
  }
  memset(&v44, 0, sizeof(v44));
  std::string::reserve(&v44, v9);
  if (v7 >= 0) {
    uint64_t v8 = (void **)&__dst;
  }
  for (; v9; --v9)
  {
    std::string::value_type v10 = __tolower(*(unsigned __int8 *)v8);
    std::string::push_back(&v44, v10);
    uint64_t v8 = (void **)((char *)v8 + 1);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(__dst);
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v44;
  }
  else {
    uint64_t v11 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  unint64_t v13 = sub_21573A6BC((uint64_t)&__dst, (uint64_t *)v11, size);
  unint64_t v14 = (unint64_t)v41[1];
  if (!v41[1]) {
    goto LABEL_91;
  }
  unint64_t v15 = v13;
  uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)v41[1]);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    unint64_t v17 = v13;
    if ((void *)v13 >= v41[1]) {
      unint64_t v17 = v13 % (unint64_t)v41[1];
    }
  }
  else
  {
    unint64_t v17 = ((unint64_t)v41[1] - 1) & v13;
  }
  long long v18 = (uint64_t **)*((void *)v41[0] + v17);
  if (!v18 || (std::string v19 = *v18) == 0)
  {
LABEL_91:
    uint64_t v23 = 0;
    int v24 = 0;
    unsigned int v25 = 0;
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_92;
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v20 = v44.__r_.__value_.__l.__size_;
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v21 = &v44;
  }
  else {
    char v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if (v16.u32[0] < 2uLL)
  {
    unint64_t v22 = (unint64_t)v41[1] - 1;
    while (1)
    {
      uint64_t v30 = v19[1];
      if (v15 == v30)
      {
        uint64_t v31 = *((unsigned __int8 *)v19 + 39);
        if ((v31 & 0x80u) == 0) {
          uint64_t v32 = *((unsigned __int8 *)v19 + 39);
        }
        else {
          uint64_t v32 = v19[3];
        }
        if (v32 == v20)
        {
          if ((v31 & 0x80) != 0)
          {
            if (!memcmp((const void *)v19[2], v21, v19[3])) {
              goto LABEL_87;
            }
          }
          else
          {
            if (!*((unsigned char *)v19 + 39)) {
              goto LABEL_87;
            }
            uint64_t v33 = 0;
            while (*((unsigned __int8 *)v19 + v33 + 16) == v21->__r_.__value_.__s.__data_[v33])
            {
              if (v31 == ++v33) {
                goto LABEL_86;
              }
            }
          }
        }
      }
      else if ((v30 & v22) != v17)
      {
        goto LABEL_91;
      }
      uint64_t v23 = 0;
      int v24 = 0;
      unsigned int v25 = 0;
      std::string v19 = (uint64_t *)*v19;
      if (!v19) {
        goto LABEL_88;
      }
    }
  }
  while (1)
  {
    unint64_t v26 = v19[1];
    if (v15 != v26)
    {
      if (v26 >= v14) {
        v26 %= v14;
      }
      if (v26 != v17) {
        goto LABEL_91;
      }
      goto LABEL_55;
    }
    uint64_t v27 = *((unsigned __int8 *)v19 + 39);
    uint64_t v28 = (v27 & 0x80u) == 0 ? *((unsigned __int8 *)v19 + 39) : v19[3];
    if (v28 == v20) {
      break;
    }
LABEL_55:
    uint64_t v23 = 0;
    int v24 = 0;
    unsigned int v25 = 0;
    std::string v19 = (uint64_t *)*v19;
    if (!v19) {
      goto LABEL_88;
    }
  }
  if ((v27 & 0x80) == 0)
  {
    if (!*((unsigned char *)v19 + 39)) {
      goto LABEL_87;
    }
    uint64_t v29 = 0;
    while (*((unsigned __int8 *)v19 + v29 + 16) == v21->__r_.__value_.__s.__data_[v29])
    {
      if (v27 == ++v29)
      {
LABEL_86:
        if (!v19) {
          goto LABEL_91;
        }
        goto LABEL_87;
      }
    }
    goto LABEL_55;
  }
  if (memcmp((const void *)v19[2], v21, v19[3])) {
    goto LABEL_55;
  }
LABEL_87:
  unsigned int v25 = v19[5] & 0xFFFFFF00;
  int v24 = *((_DWORD *)v19 + 10);
  uint64_t v23 = 0x100000000;
LABEL_88:
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_89:
    uint64_t v34 = (void **)v42[0];
    if (!v42[0]) {
      goto LABEL_93;
    }
    goto LABEL_97;
  }
LABEL_92:
  operator delete(v44.__r_.__value_.__l.__data_);
  uint64_t v34 = (void **)v42[0];
  if (!v42[0]) {
    goto LABEL_93;
  }
  do
  {
LABEL_97:
    char v37 = (void **)*v34;
    if (*((char *)v34 + 39) < 0) {
      operator delete(v34[2]);
    }
    operator delete(v34);
    uint64_t v34 = v37;
  }
  while (v37);
LABEL_93:
  long long v35 = v41[0];
  v41[0] = 0;
  if (v35) {
    operator delete(v35);
  }
  return v23 | v25 | v24;
}

void sub_215B9FD64(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215B9FEAC(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_215B9FF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_21573A6BC((uint64_t)v57, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                unsigned int v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return;
                  }
                  for (char i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    unsigned int v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              std::string::size_type v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return;
                }
                for (__int16 j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  std::string::size_type v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v27 = (void *)(a1 + 16);
  uint64_t v28 = (char *)operator new(0x30uLL);
  v57[0] = v28;
  v57[1] = a1 + 16;
  char v58 = 0;
  *(void *)uint64_t v28 = 0;
  *((void *)v28 + 1) = v10;
  uint64_t v29 = v28 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_215738B0C(v29, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v29 = *(_OWORD *)a3;
    *((void *)v28 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v28 + 10) = *(_DWORD *)(a3 + 24);
  char v58 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    BOOL v34 = 1;
    if (v11 >= 3) {
      BOOL v34 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v11);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if (prime > v11)
    {
LABEL_68:
      if (prime >> 61) {
        sub_215738AD8();
      }
      char v38 = operator new(8 * prime);
      size_t v39 = *(void **)a1;
      *(void *)a1 = v38;
      if (v39) {
        operator delete(v39);
      }
      uint64_t v40 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v40++) = 0;
      while (prime != v40);
      uint64_t v41 = (void *)*v27;
      if (!*v27) {
        goto LABEL_100;
      }
      size_t v42 = v41[1];
      size_t v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v44 = v42 & v43;
        *(void *)(*(void *)a1 + 8 * v44) = v27;
        for (k = (void *)*v41; *v41; k = (void *)*v41)
        {
          size_t v46 = k[1] & v43;
          if (v46 == v44)
          {
            uint64_t v41 = k;
          }
          else if (*(void *)(*(void *)a1 + 8 * v46))
          {
            *uint64_t v41 = *k;
            uint64_t v47 = 8 * v46;
            void *k = **(void **)(*(void *)a1 + v47);
            **(void **)(*(void *)a1 + v47) = k;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v46) = v41;
            uint64_t v41 = k;
            size_t v44 = v46;
          }
        }
        goto LABEL_100;
      }
      if (v42 >= prime) {
        v42 %= prime;
      }
      *(void *)(*(void *)a1 + 8 * v42) = v27;
      int v51 = (void *)*v41;
      if (!*v41)
      {
LABEL_100:
        unint64_t v11 = prime;
        uint64_t v54 = prime - 1;
        if ((prime & (prime - 1)) != 0) {
          goto LABEL_101;
        }
        goto LABEL_116;
      }
      while (1)
      {
        size_t v53 = v51[1];
        if (v53 >= prime) {
          v53 %= prime;
        }
        if (v53 == v42) {
          goto LABEL_94;
        }
        if (*(void *)(*(void *)a1 + 8 * v53))
        {
          *uint64_t v41 = *v51;
          uint64_t v52 = 8 * v53;
          *int v51 = **(void **)(*(void *)a1 + v52);
          **(void **)(*(void *)a1 + v52) = v51;
          int v51 = v41;
LABEL_94:
          uint64_t v41 = v51;
          int v51 = (void *)*v51;
          if (!v51) {
            goto LABEL_100;
          }
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v53) = v41;
          uint64_t v41 = v51;
          int v51 = (void *)*v51;
          size_t v42 = v53;
          if (!v51) {
            goto LABEL_100;
          }
        }
      }
    }
    if (prime < v11)
    {
      unint64_t v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        unint64_t v48 = std::__next_prime(v48);
      }
      else
      {
        uint64_t v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2) {
          unint64_t v48 = v50;
        }
      }
      if (prime <= v48) {
        size_t prime = v48;
      }
      if (prime < v11)
      {
        if (!prime)
        {
          uint64_t v55 = *(void **)a1;
          *(void *)a1 = 0;
          if (v55) {
            operator delete(v55);
          }
          unint64_t v11 = 0;
          *(void *)(a1 + 8) = 0;
          uint64_t v54 = -1;
          goto LABEL_116;
        }
        goto LABEL_68;
      }
      unint64_t v11 = *(void *)(a1 + 8);
    }
    uint64_t v54 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
LABEL_101:
      if (v10 >= v11)
      {
        unint64_t v3 = v10 % v11;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v10 % v11));
        uint64_t v33 = (void *)v57[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v3 = v10;
        uint64_t v32 = *(void **)(*(void *)a1 + 8 * v10);
        uint64_t v33 = (void *)v57[0];
        if (v32) {
          goto LABEL_57;
        }
      }
LABEL_117:
      *uint64_t v33 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v57[0];
      *(void *)(*(void *)a1 + 8 * v3) = v27;
      if (*(void *)v57[0])
      {
        unint64_t v56 = *(void *)(*(void *)v57[0] + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v56 >= v11) {
            v56 %= v11;
          }
        }
        else
        {
          v56 &= v11 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v56) = v57[0];
      }
      goto LABEL_123;
    }
LABEL_116:
    unint64_t v3 = v54 & v10;
    uint64_t v32 = *(void **)(*(void *)a1 + 8 * (v54 & v10));
    uint64_t v33 = (void *)v57[0];
    if (v32) {
      goto LABEL_57;
    }
    goto LABEL_117;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v33 = (void *)v57[0];
  if (!v32) {
    goto LABEL_117;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  *uint64_t v32 = v57[0];
LABEL_123:
  ++*(void *)(a1 + 24);
}

void sub_215BA04FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215BA0528((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215BA0510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215BA0528((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_215BA0528(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_215BA0578(char *info, int a2)
{
  int v6 = a2;
  if (*(_DWORD *)&info[*(void *)(*(void *)info - 24) + 32])
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/ImageDestinationRef.cpp", 71, (uint64_t)"file.good()", 11, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
  }
  CGDataConsumerCallbacks cbks = (CGDataConsumerCallbacks)xmmword_26C681260;
  CGDataConsumerRef v3 = CGDataConsumerCreate(info, &cbks);
  sub_215CBFA98((int)&v5, v3, 0);
}

void sub_215BA099C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_215BA09EC()
{
}

void sub_215BA09FC()
{
}

void sub_215BA0A28(_Unwind_Exception *a1)
{
  sub_215733368(v1 - 120);
  _Unwind_Resume(a1);
}

unsigned char *sub_215BA0A3C(unsigned char *result, int a2)
{
  switch(a2)
  {
    case 5:
      operator new();
    case 4:
      operator new();
    case 3:
      operator new();
  }
  *uint64_t result = 0;
  result[16] = 0;
  return result;
}

void sub_215BA0BD0(void *a1)
{
}

void sub_215BA0BE4()
{
}

void sub_215BA0C38()
{
}

void sub_215BA0C4C(int a1, CFTypeRef cf, int a3)
{
  if (a3) {
    sub_215BA0E58(&v3, cf);
  }
  CFTypeRef v3 = cf;
  operator new();
}

void sub_215BA0D58(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215BA0D70(_Unwind_Exception *a1)
{
}

void sub_215BA0D88(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215BA0DC0(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215BA0DE4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFStringEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215BA0E58(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215BA0ECC(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215BA0EE4(_Unwind_Exception *a1)
{
}

void sub_215BA0EFC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215BA0F34(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215BA0F58(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK7__CFURLEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

uint64_t sub_215BA0FCC@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  switch(a4)
  {
    case 1:
    case 2:
      unint64_t v8 = (void *)a1[3];
      if (v8)
      {
        if (v8 == a1)
        {
          std::string::size_type v20 = v19;
          (*(void (**)(void *, void *))(*a1 + 24))(a1, v19);
        }
        else
        {
          std::string::size_type v20 = (void *)(*(uint64_t (**)(void))(*v8 + 16))(a1[3]);
        }
      }
      else
      {
        std::string::size_type v20 = 0;
      }
      sub_215BA2614((uint64_t)v19, a3, a2, a5);
      uint64_t result = (uint64_t)v20;
      if (v20 != v19) {
        goto LABEL_30;
      }
      uint64_t result = (*(uint64_t (**)(void *))(v19[0] + 32))(v19);
      break;
    case 3:
      unint64_t v10 = (void *)a1[3];
      if (v10)
      {
        if (v10 == a1)
        {
          uint64_t v18 = v17;
          (*(void (**)(void *, void *))(*a1 + 24))(a1, v17);
        }
        else
        {
          uint64_t v18 = (void *)(*(uint64_t (**)(void))(*v10 + 16))(a1[3]);
        }
      }
      else
      {
        uint64_t v18 = 0;
      }
      sub_215BA24A0(v17, a3, a5);
      uint64_t result = (uint64_t)v18;
      if (v18 != v17) {
        goto LABEL_30;
      }
      uint64_t result = (*(uint64_t (**)(void *))(v17[0] + 32))(v17);
      break;
    case 4:
      unint64_t v11 = (void *)a1[3];
      if (v11)
      {
        if (v11 == a1)
        {
          uint64_t v16 = v15;
          (*(void (**)(void *, void *))(*a1 + 24))(a1, v15);
        }
        else
        {
          uint64_t v16 = (void *)(*(uint64_t (**)(void))(*v11 + 16))(a1[3]);
        }
      }
      else
      {
        uint64_t v16 = 0;
      }
      sub_215BA1DC8(v15, a3, a5);
      uint64_t result = (uint64_t)v16;
      if (v16 != v15) {
        goto LABEL_30;
      }
      uint64_t result = (*(uint64_t (**)(void *))(v15[0] + 32))(v15);
      break;
    case 5:
      unint64_t v9 = (void *)a1[3];
      if (v9)
      {
        if (v9 == a1)
        {
          unint64_t v14 = v13;
          (*(void (**)(void *, void *))(*a1 + 24))(a1, v13);
        }
        else
        {
          unint64_t v14 = (void *)(*(uint64_t (**)(void))(*v9 + 16))(a1[3]);
        }
      }
      else
      {
        unint64_t v14 = 0;
      }
      sub_215CBEEE8(v13, a3, a5);
      uint64_t result = (uint64_t)v14;
      if (v14 == v13)
      {
        uint64_t result = (*(uint64_t (**)(void *))(v13[0] + 32))(v13);
      }
      else
      {
LABEL_30:
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
        }
      }
      break;
    default:
      sub_215B9C864();
  }
  return result;
}

void sub_215BA163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  operator delete(v23);
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_215BA1724(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 232);
  _Unwind_Resume(a1);
}

void sub_215BA1738(_Unwind_Exception *a1)
{
  sub_2159AF530((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_215BA1760(char *__s, uint64_t a2, uint64_t a3)
{
  int v7 = 0;
  sub_2158386B8(v6, __s);
  sub_215AE92E0((uint64_t)&v5, (uint64_t)v6, a2);
  v8[0] = v6;
  v8[1] = a3;
  void v8[2] = v6;
  v8[3] = a3;
  v8[4] = a3;
  if (v7 != -1)
  {
    unint64_t v9 = v8;
    ((void (*)(void **, _DWORD *))off_26C67F610[v7])(&v9, v6);
    sub_215B9C864();
  }
  sub_215742D4C();
}

void sub_215BA18C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BA18D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BA18E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BA18FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BA1910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BA1924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BA1938(_DWORD *a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  switch(a3)
  {
    case 0:
      v5[6] = 0;
      sub_21574344C(v5, "Format ");
      sub_215B9C864();
    case 1:
    case 2:
      sub_215BA5398(a1, a2, 1, a3, a4);
      return;
    case 3:
      int v4 = 3;
      break;
    case 4:
      int v4 = 4;
      break;
    case 5:
      int v4 = 5;
      break;
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/ImageIO.cpp", 204, (uint64_t)"", 0, (uint64_t)"should not be reached", 21, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
  sub_215B9BE6C((int)a1, a2, v4);
}

void sub_215BA1D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BA1D4C(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215BA1D60(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215BA1D74(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215BA1D88(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_215BA1D9C(_Unwind_Exception *a1)
{
  sub_215742CF0(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_215BA1DC8@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  char v5 = (void *)a1[3];
  if (v5)
  {
    if (v5 == a1)
    {
      unint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
    }
    else
    {
      unint64_t v8 = (void *)(*(uint64_t (**)(void))(*v5 + 16))(a1[3]);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  sub_215B9AFF4(v7, a2, 4, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_215BA1F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159AF530((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215BA1F3C(_DWORD *a1)
{
  v1[10] = &unk_26C66AE18;
  sub_215D92D74(a1, (uint64_t)v1);
  operator new();
}

void sub_215BA217C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_2159009A0(&a9);
  _Unwind_Resume(a1);
}

void sub_215BA21B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BA21C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18) {
    free(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BA21DC(_DWORD *a1)
{
  v1[14] = &unk_26C66F210;
  sub_215D97B04(a1, (uint64_t)v1);
  operator new();
}

void sub_215BA2440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_215904884(&a9);
  _Unwind_Resume(a1);
}

void sub_215BA2474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BA2488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  if (a21) {
    free(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BA24A0@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  char v5 = (void *)a1[3];
  if (v5)
  {
    if (v5 == a1)
    {
      unint64_t v8 = v7;
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v7);
    }
    else
    {
      unint64_t v8 = (void *)(*(uint64_t (**)(void))(*v5 + 16))(a1[3]);
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  sub_215B9AFF4(v7, a2, 3, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_215BA2600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159AF530((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215BA2614(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v4 = a3;
  uint64_t v206 = *MEMORY[0x263EF8340];
  int v182 = a3;
  sub_215BA4C44((uint64_t)&v171, a2);
  if (v181)
  {
    long long v170 = v171;
    int v7 = (char *)&unk_215EDE4FC;
    uint64_t v8 = 0;
    switch(v4)
    {
      case 0:
        int v4 = DWORD1(v170);
        goto LABEL_19;
      case 1:
        goto LABEL_15;
      case 2:
        uint64_t v8 = 1;
        goto LABEL_15;
      case 21:
        uint64_t v8 = 2;
LABEL_15:
        int v7 = (char *)&unk_215EDE4F0 + 4 * v8;
        break;
      default:
        break;
    }
    if (v7 - (char *)&unk_215EDE4F0 == 12)
    {
      int v194 = 0;
      sub_215806C64();
    }
    if (DWORD1(v170) != v4)
    {
      int v194 = 0;
      sub_215806C64();
    }
LABEL_19:
    LODWORD(v195) = v4;
    uint64_t v13 = *(void *)(a1 + 24);
    if (!v13) {
      sub_21573D7DC();
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v13 + 48))(&v161);
    if (!v168)
    {
      long long v195 = *(_OWORD *)&v161.__r_.__value_.__l.__data_;
      uint64_t v19 = sub_215741BFC(v196, (long long *)&v161.__r_.__value_.__r.__words[2]);
      *(_OWORD *)a4 = v195;
      *(unsigned char *)(a4 + 16) = 0;
      *(unsigned char *)(a4 + 112) = 0;
      if (v205)
      {
        *(unsigned char *)(a4 + 40) = 0;
        int v20 = v198;
        if (v198)
        {
          *(_OWORD *)(a4 + 16) = *(_OWORD *)v19;
          *(void *)(a4 + 32) = *((void *)v19 + 2);
          *((void *)v19 + 1) = 0;
          *((void *)v19 + 2) = 0;
          *(void *)uint64_t v19 = 0;
          *(unsigned char *)(a4 + 40) = 1;
        }
        *(unsigned char *)(a4 + 48) = 0;
        *(unsigned char *)(a4 + 104) = 0;
        if (v204)
        {
          uint64_t v21 = v201;
          *(void *)(a4 + 64) = v200;
          *(_OWORD *)(a4 + 48) = v199;
          long long v199 = 0uLL;
          *(void *)(a4 + 72) = v21;
          *(_OWORD *)(a4 + 80) = v202;
          *(void *)(a4 + 96) = v203;
          uint64_t v200 = 0;
          long long v202 = 0uLL;
          uint64_t v203 = 0;
          *(unsigned char *)(a4 + 104) = 1;
        }
        *(unsigned char *)(a4 + 112) = 1;
        *(unsigned char *)(a4 + 120) = 0;
        if (v20 && v197 < 0) {
          operator delete(v196[0]);
        }
      }
      else
      {
        *(unsigned char *)(a4 + 120) = 0;
      }
LABEL_325:
      if (v168)
      {
        int v149 = (std::__shared_weak_count *)v161.__r_.__value_.__r.__words[2];
        if (v161.__r_.__value_.__r.__words[2]
          && !atomic_fetch_add((atomic_ullong *volatile)(v161.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
        goto LABEL_339;
      }
      if (v167)
      {
        if (v166)
        {
          if (v165 < 0) {
            operator delete(v164);
          }
          if (v163 < 0) {
            operator delete(*(void **)&v162[24]);
          }
        }
        if (v162[16] && (v162[15] & 0x80000000) != 0)
        {
          uint8x8_t v12 = (void *)v161.__r_.__value_.__r.__words[2];
          goto LABEL_338;
        }
      }
      goto LABEL_339;
    }
    v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C6674A0;
    *(_OWORD *)&v159.__r_.__value_.__r.__words[1] = *(_OWORD *)&v161.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v161.__r_.__value_.__r.__words[1] = 0uLL;
    *(_OWORD *)&v160[14] = *(_OWORD *)&v162[14];
    *(_OWORD *)v160 = *(_OWORD *)v162;
    int v14 = *(void *)&v162[22] >> 16;
    if (v14 != DWORD1(v170))
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/Pnm.cpp", 274, (uint64_t)"image_dynamic.RuntimeFormat() == color_format", 45, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_353;
      }
      int v14 = DWORD1(v170);
    }
    if (v14 == 21)
    {
      int v26 = v170;
      v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C67CFD0;
      sub_215BA9F98((uint64_t)&v159, (uint64_t)&v183.__r_.__value_.__l.__size_);
      if (v26)
      {
        if (((v190 * (unint64_t)v188) & 0x8000000000000000) != 0)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &unk_26C686698;
          __cxa_throw(exception, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
        }
        std::string::size_type size = v183.__r_.__value_.__l.__size_;
        if (!v183.__r_.__value_.__l.__size_) {
          goto LABEL_91;
        }
        uint64_t v28 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
        if (v183.__r_.__value_.__r.__words[2])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          uint64_t v29 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
          std::string::size_type size = v183.__r_.__value_.__l.__size_;
          if (v183.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
        if (v192) {
          (*(void (**)(long long *__return_ptr, std::string::size_type, uint64_t))(*(void *)size + 96))(&v195, size, 1);
        }
        else {
LABEL_91:
        }
          *(void *)&long long v195 = 0;
        if (!v185) {
          goto LABEL_317;
        }
        if (!HIDWORD(v185)) {
          goto LABEL_317;
        }
        unsigned int v43 = v186;
        if (!v186) {
          goto LABEL_317;
        }
        uint64_t v44 = v189;
        int v45 = v184;
        if (v191 && v184)
        {
          long long v46 = *(_OWORD *)&v183.__r_.__value_.__r.__words[1];
          if (v183.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(void))(**((void **)&v46 + 1) + 16))(*((void *)&v46 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
            }
          }
          (*(void (**)(void, uint64_t, const char *))(*(void *)v46 + 88))(v46, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          int v45 = v184;
        }
        unsigned int v47 = v43 - 1;
        if (v43 != 1)
        {
          do
          {
            std::istream::read();
            int v45 = (int8x16_t *)((char *)v45 + v44);
            --v47;
          }
          while (v47);
        }
LABEL_103:
        std::istream::read();
        goto LABEL_317;
      }
      memset(&v193, 0, sizeof(v193));
      std::string::size_type v56 = v183.__r_.__value_.__l.__size_;
      if (!v183.__r_.__value_.__l.__size_) {
        goto LABEL_246;
      }
      int v57 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
      if (v183.__r_.__value_.__r.__words[2])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
        char v58 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
        std::string::size_type v56 = v183.__r_.__value_.__l.__size_;
        if (v183.__r_.__value_.__r.__words[2])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v58->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
      }
      if (v192) {
        (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t))(*(void *)v56 + 96))(&v169, v56, 1);
      }
      else {
LABEL_246:
      }
        uint64_t v169 = 0;
      uint64_t v115 = v189;
      uint64_t v116 = v190;
      uint64_t v117 = v184;
      if (v191 && v184)
      {
        long long v118 = *(_OWORD *)&v183.__r_.__value_.__r.__words[1];
        if (v183.__r_.__value_.__r.__words[2])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v118 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(void))(**((void **)&v118 + 1) + 16))(*((void *)&v118 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v118 + 1));
          }
        }
        (*(void (**)(void, uint64_t, const char *))(*(void *)v118 + 88))(v118, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        uint64_t v117 = v184;
      }
      uint64_t v119 = (v115 * HIDWORD(v116));
      if (v119)
      {
        uint64_t v120 = (3 * v116);
        if (3 * v116)
        {
          int v121 = (int8x16_t *)((char *)v117 + v119);
          v122 = a2 + 4;
          uint64_t v123 = MEMORY[0x263EF8318];
          do
          {
            uint64_t v124 = v117;
            do
            {
              v124->i8[0] = sub_215BA957C((uint64_t)&v193, a2);
              std::istream::tellg();
              while ((*((unsigned char *)v122 + *(void *)(*a2 - 24)) & 2) == 0)
              {
                unsigned int v125 = std::istream::peek();
                if (v125 <= 0x7F)
                {
                  if ((*(_DWORD *)(v123 + 4 * v125 + 60) & 0x4000) == 0) {
                    break;
                  }
                }
                else if (!__maskrune(v125, 0x4000uLL))
                {
                  break;
                }
                std::istream::seekg();
              }
              std::istream::tellg();
              v124->i8[1] = sub_215BA957C((uint64_t)&v193, a2);
              std::istream::tellg();
              while ((*((unsigned char *)v122 + *(void *)(*a2 - 24)) & 2) == 0)
              {
                unsigned int v126 = std::istream::peek();
                if (v126 <= 0x7F)
                {
                  if ((*(_DWORD *)(v123 + 4 * v126 + 60) & 0x4000) == 0) {
                    break;
                  }
                }
                else if (!__maskrune(v126, 0x4000uLL))
                {
                  break;
                }
                std::istream::seekg();
              }
              std::istream::tellg();
              v124->i8[2] = sub_215BA957C((uint64_t)&v193, a2);
              std::istream::tellg();
              while ((*((unsigned char *)v122 + *(void *)(*a2 - 24)) & 2) == 0)
              {
                unsigned int v127 = std::istream::peek();
                if (v127 <= 0x7F)
                {
                  if ((*(_DWORD *)(v123 + 4 * v127 + 60) & 0x4000) == 0) {
                    break;
                  }
                }
                else if (!__maskrune(v127, 0x4000uLL))
                {
                  break;
                }
                std::istream::seekg();
              }
              std::istream::tellg();
              uint64_t v124 = (int8x16_t *)((char *)v124 + 3);
            }
            while (v124 != (int8x16_t *)&v117->i8[v120]);
            uint64_t v117 = (int8x16_t *)((char *)v117 + v115);
          }
          while (v117 != v121);
        }
      }
      goto LABEL_301;
    }
    if (v14 != 2)
    {
      if (v14 == 1)
      {
        int v15 = v170;
        v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C67C908;
        sub_215BA8CB8((uint64_t)&v159, (uint64_t)&v183.__r_.__value_.__l.__size_);
        if (v15)
        {
          if (((v185 * (unint64_t)v186) & 0x8000000000000000) != 0)
          {
            uint64_t v150 = __cxa_allocate_exception(8uLL);
            *uint64_t v150 = &unk_26C686698;
            __cxa_throw(v150, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
          }
          std::string::size_type v16 = v183.__r_.__value_.__l.__size_;
          if (!v183.__r_.__value_.__l.__size_) {
            goto LABEL_104;
          }
          unint64_t v17 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
          if (v183.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            uint64_t v18 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
            std::string::size_type v16 = v183.__r_.__value_.__l.__size_;
            if (v183.__r_.__value_.__r.__words[2])
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
          }
          if (BYTE1(v188)) {
            (*(void (**)(long long *__return_ptr, std::string::size_type, uint64_t))(*(void *)v16 + 96))(&v195, v16, 1);
          }
          else {
LABEL_104:
          }
            *(void *)&long long v195 = 0;
          if (!v185) {
            goto LABEL_317;
          }
          int v48 = HIDWORD(v185);
          if (!HIDWORD(v185)) {
            goto LABEL_317;
          }
          uint64_t v49 = v187;
          uint64_t v50 = v184;
          if ((_BYTE)v188 && v184)
          {
            long long v51 = *(_OWORD *)&v183.__r_.__value_.__r.__words[1];
            if (v183.__r_.__value_.__r.__words[2])
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
              if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                (*(void (**)(void))(**((void **)&v51 + 1) + 16))(*((void *)&v51 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
              }
            }
            (*(void (**)(void, uint64_t, const char *))(*(void *)v51 + 88))(v51, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
            uint64_t v50 = v184;
          }
          int v52 = v48 - 1;
          if (v48 != 1)
          {
            do
            {
              std::istream::read();
              uint64_t v50 = (int8x16_t *)((char *)v50 + v49);
              --v52;
            }
            while (v52);
          }
          goto LABEL_103;
        }
        memset(&v193, 0, sizeof(v193));
        std::string::size_type v59 = v183.__r_.__value_.__l.__size_;
        if (!v183.__r_.__value_.__l.__size_) {
          goto LABEL_281;
        }
        int v60 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
        if (v183.__r_.__value_.__r.__words[2])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
          unsigned int v61 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
          std::string::size_type v59 = v183.__r_.__value_.__l.__size_;
          if (v183.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v61->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
        }
        if (BYTE1(v188)) {
          (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t))(*(void *)v59 + 96))(&v169, v59, 1);
        }
        else {
LABEL_281:
        }
          uint64_t v169 = 0;
        uint64_t v128 = v187;
        uint64_t v129 = v185;
        int v130 = v184;
        if ((_BYTE)v188 && v184)
        {
          long long v131 = *(_OWORD *)&v183.__r_.__value_.__r.__words[1];
          if (v183.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(void))(**((void **)&v131 + 1) + 16))(*((void *)&v131 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v131 + 1));
            }
          }
          (*(void (**)(void, uint64_t, const char *))(*(void *)v131 + 88))(v131, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          int v130 = v184;
        }
        uint64_t v132 = (v128 * HIDWORD(v129));
        if (v132)
        {
          uint64_t v133 = v129;
          if (v129)
          {
            uint64_t v134 = (int8x16_t *)((char *)v130 + v132);
            uint64_t v135 = MEMORY[0x263EF8318];
            do
            {
              uint64_t v136 = v130;
              do
              {
                v136->i8[0] = sub_215BA957C((uint64_t)&v193, a2);
                std::istream::tellg();
                while ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
                {
                  unsigned int v137 = std::istream::peek();
                  if (v137 <= 0x7F)
                  {
                    if ((*(_DWORD *)(v135 + 4 * v137 + 60) & 0x4000) == 0) {
                      break;
                    }
                  }
                  else if (!__maskrune(v137, 0x4000uLL))
                  {
                    break;
                  }
                  std::istream::seekg();
                }
                std::istream::tellg();
                uint64_t v136 = (int8x16_t *)((char *)v136 + 1);
              }
              while (v136 != (int8x16_t *)&v130->i8[v133]);
              int v130 = (int8x16_t *)((char *)v130 + v128);
            }
            while (v130 != v134);
          }
        }
LABEL_301:
        v138 = v169;
        uint64_t v169 = 0;
        if (v138) {
          (*(void (**)(void *))(*(void *)v138 + 8))(v138);
        }
        int v114 = (void *)v193.__r_.__value_.__r.__words[0];
        if (!v193.__r_.__value_.__r.__words[0]) {
          goto LABEL_319;
        }
        v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[0];
        goto LABEL_305;
      }
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/Pnm.cpp", 283, (uint64_t)"", 0, (uint64_t)"Not implemented", 15, (void (*)(void **))sub_215E1ABD8);
LABEL_353:
      abort();
    }
    int v22 = v170;
    v183.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C67CA00;
    sub_215BA999C((uint64_t)&v159, (uint64_t)&v183.__r_.__value_.__l.__size_);
    if (v22)
    {
      uint64_t v157 = v185;
      if (((2 * v186 * (unint64_t)v185) & 0x8000000000000000) != 0)
      {
        __n128 v151 = __cxa_allocate_exception(8uLL);
        *__n128 v151 = &unk_26C686698;
        __cxa_throw(v151, (struct type_info *)&unk_26C6866B0, (void (*)(void *))std::exception::~exception);
      }
      std::string::size_type v23 = v183.__r_.__value_.__l.__size_;
      if (!v183.__r_.__value_.__l.__size_) {
        goto LABEL_70;
      }
      uint64_t v24 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
      if (v183.__r_.__value_.__r.__words[2])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        unsigned int v25 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
        std::string::size_type v23 = v183.__r_.__value_.__l.__size_;
        if (v183.__r_.__value_.__r.__words[2])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
      }
      if (BYTE1(v188)) {
        (*(void (**)(long long *__return_ptr, std::string::size_type, uint64_t))(*(void *)v23 + 96))(&v195, v23, 1);
      }
      else {
LABEL_70:
      }
        *(void *)&long long v195 = 0;
      if (!v185) {
        goto LABEL_317;
      }
      int v30 = HIDWORD(v185);
      if (!HIDWORD(v185)) {
        goto LABEL_317;
      }
      uint64_t v31 = v187;
      uint64_t v32 = v184;
      if ((_BYTE)v188 && v184)
      {
        long long v33 = *(_OWORD *)&v183.__r_.__value_.__r.__words[1];
        if (v183.__r_.__value_.__r.__words[2])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v33 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
          {
            (*(void (**)(void))(**((void **)&v33 + 1) + 16))(*((void *)&v33 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v33 + 1));
          }
        }
        (*(void (**)(void, uint64_t, const char *))(*(void *)v33 + 88))(v33, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
        uint64_t v32 = v184;
      }
      int v34 = v30 - 1;
      if (v30 != 1)
      {
        if (v157)
        {
          int v35 = 0;
          unint64_t v36 = (v157 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          unint64_t v37 = (v36 + 1) & 0xFFFFFFFFFFFFFFF0;
          char v38 = v32 + 1;
          while (1)
          {
            std::istream::read();
            if (!v32
              && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
            {
              break;
            }
            size_t v39 = v32;
            if (v36 < 0xF) {
              goto LABEL_359;
            }
            size_t v39 = (int8x16_t *)((char *)v32 + 2 * v37);
            unint64_t v40 = (v36 + 1) & 0xFFFFFFFFFFFFFFF0;
            uint64_t v41 = v38;
            do
            {
              int8x16_t v42 = vrev16q_s8(*v41);
              v41[-1] = vrev16q_s8(v41[-1]);
              *uint64_t v41 = v42;
              v41 += 2;
              v40 -= 16;
            }
            while (v40);
            if (v36 + 1 != v37)
            {
LABEL_359:
              do
              {
                v39->i16[0] = bswap32(v39->u16[0]) >> 16;
                size_t v39 = (int8x16_t *)((char *)v39 + 2);
              }
              while (v39 != (int8x16_t *)((char *)v32 + 2 * v157));
            }
            uint64_t v32 = (int8x16_t *)((char *)v32 + 2 * v31);
            ++v35;
            char v38 = (int8x16_t *)((char *)v38 + 2 * v31);
            if (v35 == v34) {
              goto LABEL_307;
            }
          }
LABEL_310:
          abort();
        }
        do
        {
          std::istream::read();
          uint64_t v32 = (int8x16_t *)((char *)v32 + 2 * v31);
          --v34;
        }
        while (v34);
      }
LABEL_307:
      std::istream::read();
      if (!v157 || v32)
      {
        if (!v157)
        {
LABEL_317:
          uint64_t v145 = v195;
          *(void *)&long long v195 = 0;
          if (v145) {
            (*(void (**)(uint64_t))(*(void *)v145 + 8))(v145);
          }
          goto LABEL_319;
        }
      }
      else if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_310;
      }
      unint64_t v139 = (v157 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      __n128 v140 = v32;
      if (v139 < 0xF) {
        goto LABEL_360;
      }
      unint64_t v141 = v139 + 1;
      __n128 v140 = (int8x16_t *)((char *)v32 + 2 * (v141 & 0xFFFFFFFFFFFFFFF0));
      int v142 = v32 + 1;
      unint64_t v143 = v141 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        int8x16_t v144 = vrev16q_s8(*v142);
        v142[-1] = vrev16q_s8(v142[-1]);
        *int v142 = v144;
        v142 += 2;
        v143 -= 16;
      }
      while (v143);
      if (v141 != (v141 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_360:
        do
        {
          v140->i16[0] = bswap32(v140->u16[0]) >> 16;
          __n128 v140 = (int8x16_t *)((char *)v140 + 2);
        }
        while (v140 != (int8x16_t *)((char *)v32 + 2 * v157));
      }
      goto LABEL_317;
    }
    memset(&v193, 0, sizeof(v193));
    std::string::size_type v53 = v183.__r_.__value_.__l.__size_;
    if (!v183.__r_.__value_.__l.__size_) {
      goto LABEL_143;
    }
    uint64_t v54 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
    if (v183.__r_.__value_.__r.__words[2])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v54->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
      uint64_t v55 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
      std::string::size_type v53 = v183.__r_.__value_.__l.__size_;
      if (v183.__r_.__value_.__r.__words[2])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
    if (BYTE1(v188)) {
      (*(void (**)(void **__return_ptr, std::string::size_type, uint64_t))(*(void *)v53 + 96))(&v169, v53, 1);
    }
    else {
LABEL_143:
    }
      uint64_t v169 = 0;
    uint64_t v154 = v187;
    uint64_t v62 = v185;
    int v63 = v184;
    if ((_BYTE)v188 && v184)
    {
      long long v64 = *(_OWORD *)&v183.__r_.__value_.__r.__words[1];
      if (v183.__r_.__value_.__r.__words[2])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          (*(void (**)(void))(**((void **)&v64 + 1) + 16))(*((void *)&v64 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v64 + 1));
        }
      }
      (*(void (**)(void, uint64_t, const char *))(*(void *)v64 + 88))(v64, 1, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      int v63 = v184;
    }
    if (!(v154 * HIDWORD(v62)) || !v62)
    {
LABEL_242:
      uint64_t v113 = v169;
      uint64_t v169 = 0;
      if (v113) {
        (*(void (**)(void *))(*(void *)v113 + 8))(v113);
      }
      int v114 = (void *)v193.__r_.__value_.__r.__words[0];
      if (!v193.__r_.__value_.__r.__words[0]) {
        goto LABEL_319;
      }
LABEL_305:
      operator delete(v114);
LABEL_319:
      int v146 = (std::__shared_weak_count *)v183.__r_.__value_.__r.__words[2];
      uint64_t v147 = a4;
      if (v183.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(v183.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
        uint64_t v147 = a4;
      }
      *(unsigned char *)(v147 + 120) = 1;
      v148 = (std::__shared_weak_count *)v159.__r_.__value_.__r.__words[2];
      if (v159.__r_.__value_.__r.__words[2]
        && !atomic_fetch_add((atomic_ullong *volatile)(v159.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
      goto LABEL_325;
    }
    BOOL v65 = a2 + 4;
    uint64_t v66 = v193.__r_.__value_.__l.__size_;
    uint64_t v67 = (unsigned __int8 *)v193.__r_.__value_.__r.__words[0];
    v153 = (int8x16_t *)((char *)v63 + 2 * (v154 * HIDWORD(v62)));
LABEL_154:
    uint64_t v158 = (int8x16_t *)((char *)v63 + 2 * v62);
    int v155 = v63;
    while (1)
    {
      if ((unsigned __int8 *)v66 != v67) {
        v193.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
      }
      unsigned __int8 v68 = std::istream::peek();
      if ((*((unsigned char *)v65 + *(void *)(*a2 - 24)) & 2) == 0)
      {
        unsigned __int8 v69 = v68;
        while (1)
        {
          uint64_t v70 = 0;
          strcpy((char *)&v195, "0123456789");
          HIBYTE(v196[0]) = 10;
          do
            int v71 = *((unsigned __int8 *)&v196[-2] + v70);
          while (v71 != v69 && v70++ != 9);
          if (v71 != v69) {
            goto LABEL_202;
          }
          if ((unint64_t)v67 >= v193.__r_.__value_.__r.__words[2]) {
            break;
          }
          *v67++ = v69;
LABEL_186:
          v193.__r_.__value_.__l.__size_ = (std::string::size_type)v67;
          std::istream::seekg();
          unsigned __int8 v69 = std::istream::peek();
          if ((*((unsigned char *)v65 + *(void *)(*a2 - 24)) & 2) != 0) {
            goto LABEL_202;
          }
        }
        unint64_t v73 = v193.__r_.__value_.__r.__words[0];
        unint64_t v74 = (unint64_t)&v67[-v193.__r_.__value_.__r.__words[0]];
        int64_t v75 = (int64_t)&v67[-v193.__r_.__value_.__r.__words[0] + 1];
        if (v75 < 0) {
          goto LABEL_350;
        }
        std::string::size_type v76 = v193.__r_.__value_.__r.__words[2] - v193.__r_.__value_.__r.__words[0];
        if (2 * (v193.__r_.__value_.__r.__words[2] - v193.__r_.__value_.__r.__words[0]) > v75) {
          int64_t v75 = 2 * v76;
        }
        if (v76 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v77 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v77 = v75;
        }
        if (v77)
        {
          std::string::size_type v78 = (std::string::size_type)operator new(v77);
          std::string::size_type v79 = v78 + v74;
          *(unsigned char *)(v78 + v74) = v69;
          std::string::size_type v80 = v78 + v74 + 1;
          if (v67 != (unsigned __int8 *)v73)
          {
LABEL_176:
            if (v74 < 8
              || v78 + v74 - 1 - (unint64_t)&v67[~v73] > v78 + v74 - 1
              || v73 > (unint64_t)(v67 - 1)
              || v73 - v78 < 0x20)
            {
              uint64_t v81 = v67;
            }
            else if (v74 >= 0x20)
            {
              unint64_t v84 = v74 & 0xFFFFFFFFFFFFFFE0;
              uint64_t v85 = (_OWORD *)(v78 + v74 - 16);
              uint64_t v86 = (long long *)(v67 - 16);
              unint64_t v87 = v74 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v88 = *v86;
                *(v85 - 1) = *(v86 - 1);
                *uint64_t v85 = v88;
                v85 -= 2;
                v86 -= 2;
                v87 -= 32;
              }
              while (v87);
              if (v74 == v84) {
                goto LABEL_180;
              }
              if ((v74 & 0x18) != 0) {
                goto LABEL_197;
              }
              v79 -= v84;
              uint64_t v81 = &v67[-v84];
            }
            else
            {
              unint64_t v84 = 0;
LABEL_197:
              uint64_t v81 = &v67[-(v74 & 0xFFFFFFFFFFFFFFF8)];
              v79 -= v74 & 0xFFFFFFFFFFFFFFF8;
              uint64_t v89 = &v67[-v84 - v73 - 8 + v78];
              v90 = (uint64_t *)&v67[-v84 - 8];
              unint64_t v91 = v84 - (v74 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                uint64_t v92 = *v90--;
                *(void *)uint64_t v89 = v92;
                v89 -= 8;
                v91 += 8;
              }
              while (v91);
              if (v74 == (v74 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_180:
                uint64_t v67 = (unsigned __int8 *)v193.__r_.__value_.__r.__words[0];
                v193.__r_.__value_.__r.__words[0] = v78;
                v193.__r_.__value_.__l.__size_ = v80;
                v193.__r_.__value_.__r.__words[2] = v78 + v77;
                if (!v67) {
                  goto LABEL_185;
                }
LABEL_184:
                operator delete(v67);
LABEL_185:
                uint64_t v67 = (unsigned __int8 *)v80;
                goto LABEL_186;
              }
            }
            uint64_t v82 = (unsigned char *)(v79 - 1);
            do
            {
              char v83 = *--v81;
              *v82-- = v83;
            }
            while (v81 != (unsigned __int8 *)v73);
            goto LABEL_180;
          }
        }
        else
        {
          std::string::size_type v78 = 0;
          std::string::size_type v79 = (std::string::size_type)&v67[-v193.__r_.__value_.__r.__words[0]];
          *(unsigned char *)unint64_t v74 = v69;
          std::string::size_type v80 = v74 + 1;
          if (v67 != (unsigned __int8 *)v73) {
            goto LABEL_176;
          }
        }
        v193.__r_.__value_.__r.__words[0] = v79;
        v193.__r_.__value_.__l.__size_ = v80;
        v193.__r_.__value_.__r.__words[2] = v78 + v77;
        if (v67) {
          goto LABEL_184;
        }
        goto LABEL_185;
      }
LABEL_202:
      if ((unint64_t)v67 < v193.__r_.__value_.__r.__words[2])
      {
        *uint64_t v67 = 10;
        uint64_t v66 = (uint64_t)(v67 + 1);
        goto LABEL_222;
      }
      std::string::size_type v93 = v193.__r_.__value_.__r.__words[0];
      unint64_t v94 = (unint64_t)&v67[-v193.__r_.__value_.__r.__words[0]];
      int64_t v95 = (int64_t)&v67[-v193.__r_.__value_.__r.__words[0] + 1];
      if (v95 < 0) {
LABEL_350:
      }
        sub_215738AC0();
      std::string::size_type v96 = v193.__r_.__value_.__r.__words[2] - v193.__r_.__value_.__r.__words[0];
      if (2 * (v193.__r_.__value_.__r.__words[2] - v193.__r_.__value_.__r.__words[0]) > v95) {
        int64_t v95 = 2 * v96;
      }
      if (v96 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v97 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v97 = v95;
      }
      if (v97)
      {
        int64_t v98 = (int64_t)operator new(v97);
        std::string::size_type v99 = v98 + v94;
        *(unsigned char *)(v98 + v94) = 10;
        uint64_t v66 = v98 + v94 + 1;
        if (v67 == (unsigned __int8 *)v93) {
          goto LABEL_220;
        }
      }
      else
      {
        int64_t v98 = 0;
        std::string::size_type v99 = (std::string::size_type)&v67[-v193.__r_.__value_.__r.__words[0]];
        *(unsigned char *)unint64_t v94 = 10;
        uint64_t v66 = v94 + 1;
        if (v67 == (unsigned __int8 *)v93)
        {
LABEL_220:
          v193.__r_.__value_.__r.__words[0] = v99;
          v193.__r_.__value_.__l.__size_ = v66;
          v193.__r_.__value_.__r.__words[2] = v98 + v97;
          if (!v67) {
            goto LABEL_222;
          }
LABEL_221:
          operator delete(v67);
          goto LABEL_222;
        }
      }
      if (v94 < 8 || v93 - v98 < 0x20)
      {
        v100 = v67;
        goto LABEL_215;
      }
      if (v94 >= 0x20)
      {
        unint64_t v104 = v94 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v105 = (_OWORD *)(v98 + v94 - 16);
        v106 = (long long *)(v67 - 16);
        unint64_t v107 = v94 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v108 = *v106;
          *(v105 - 1) = *(v106 - 1);
          *uint64_t v105 = v108;
          v105 -= 2;
          v106 -= 2;
          v107 -= 32;
        }
        while (v107);
        if (v94 == v104) {
          goto LABEL_217;
        }
        if ((v94 & 0x18) == 0)
        {
          v99 -= v104;
          v100 = &v67[-v104];
LABEL_215:
          uint64_t v101 = (unsigned char *)(v99 - 1);
          do
          {
            char v102 = *--v100;
            *v101-- = v102;
          }
          while (v100 != (unsigned __int8 *)v93);
          goto LABEL_217;
        }
      }
      else
      {
        unint64_t v104 = 0;
      }
      v100 = &v67[-(v94 & 0xFFFFFFFFFFFFFFF8)];
      v99 -= v94 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v109 = &v67[-v104 - v93 - 8 + v98];
      __n128 v110 = (uint64_t *)&v67[-v104 - 8];
      unint64_t v111 = v104 - (v94 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v112 = *v110--;
        *(void *)uint64_t v109 = v112;
        v109 -= 8;
        v111 += 8;
      }
      while (v111);
      if (v94 != (v94 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_215;
      }
LABEL_217:
      uint64_t v67 = (unsigned __int8 *)v193.__r_.__value_.__r.__words[0];
      v193.__r_.__value_.__r.__words[0] = v98;
      v193.__r_.__value_.__l.__size_ = v66;
      v193.__r_.__value_.__r.__words[2] = v98 + v97;
      if (v67) {
        goto LABEL_221;
      }
LABEL_222:
      v193.__r_.__value_.__l.__size_ = v66;
      uint64_t v67 = (unsigned __int8 *)v193.__r_.__value_.__r.__words[0];
      v63->i16[0] = atoi(v193.__r_.__value_.__l.__data_);
      std::istream::tellg();
      while ((*((unsigned char *)v65 + *(void *)(*a2 - 24)) & 2) == 0)
      {
        unsigned int v103 = std::istream::peek();
        if (v103 <= 0x7F)
        {
          if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v103 + 60) & 0x4000) == 0) {
            break;
          }
        }
        else if (!__maskrune(v103, 0x4000uLL))
        {
          break;
        }
        std::istream::seekg();
      }
      std::istream::tellg();
      int v63 = (int8x16_t *)((char *)v63 + 2);
      if (v63 == v158)
      {
        int v63 = (int8x16_t *)((char *)v155 + 2 * v154);
        if (v63 == v153) {
          goto LABEL_242;
        }
        goto LABEL_154;
      }
    }
  }
  long long v195 = v171;
  uint64_t v9 = sub_215741BFC(v196, &v172);
  *(_OWORD *)a4 = v195;
  *(unsigned char *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 112) = 0;
  if (!v205)
  {
    *(unsigned char *)(a4 + 120) = 0;
    goto LABEL_339;
  }
  *(unsigned char *)(a4 + 40) = 0;
  int v10 = v198;
  if (v198)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v9;
    *(void *)(a4 + 32) = *((void *)v9 + 2);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)uint64_t v9 = 0;
    *(unsigned char *)(a4 + 40) = 1;
  }
  *(unsigned char *)(a4 + 48) = 0;
  *(unsigned char *)(a4 + 104) = 0;
  if (v204)
  {
    uint64_t v11 = v201;
    *(void *)(a4 + 64) = v200;
    *(_OWORD *)(a4 + 48) = v199;
    long long v199 = 0uLL;
    *(void *)(a4 + 72) = v11;
    *(_OWORD *)(a4 + 80) = v202;
    *(void *)(a4 + 96) = v203;
    uint64_t v200 = 0;
    long long v202 = 0uLL;
    uint64_t v203 = 0;
    *(unsigned char *)(a4 + 104) = 1;
  }
  *(unsigned char *)(a4 + 112) = 1;
  *(unsigned char *)(a4 + 120) = 0;
  if (v10 && v197 < 0)
  {
    uint8x8_t v12 = v196[0];
LABEL_338:
    operator delete(v12);
  }
LABEL_339:
  if (!v181 && v180)
  {
    if (v179)
    {
      if (v178 < 0) {
        operator delete(v177);
      }
      if (v176 < 0) {
        operator delete(v175);
      }
    }
    if (v174)
    {
      if (v173 < 0) {
        operator delete((void *)v172);
      }
    }
  }
}

void sub_215BA47D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v72 = a39;
  a39 = 0;
  if (v72) {
    (*(void (**)(void *))(*(void *)v72 + 8))(v72);
  }
  unint64_t v73 = (void *)STACK[0x2D0];
  if (STACK[0x2D0])
  {
    STACK[0x2D8] = (unint64_t)v73;
    operator delete(v73);
  }
  sub_215B57CA0((uint64_t)&STACK[0x280]);
  sub_2158C8F40((uint64_t)&a15);
  sub_215831770((uint64_t)&a23);
  sub_2157407D4((uint64_t)&a71);
  _Unwind_Resume(a1);
}

void sub_215BA4C44(uint64_t a1, uint64_t *a2)
{
  unsigned int v43 = a2;
  if (sub_215BA6C04(&v43))
  {
    BYTE2(__s) = 0;
    LOWORD(__s) = 0;
    std::istream::read();
    size_t v4 = strlen((const char *)&__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      sub_215731CD8();
    }
    size_t v5 = v4;
    if (v4 >= 0x17)
    {
      uint64_t v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v10 = v4 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (const void **)operator new(v10 + 1);
      size_t v30 = v5;
      int64_t v31 = v11 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v31) = v4;
      p_dst = (const void **)&__dst;
      if (!v4) {
        goto LABEL_25;
      }
    }
    memcpy(p_dst, &__s, v5);
LABEL_25:
    *((unsigned char *)p_dst + v5) = 0;
    if (sub_215BA6C04(&v43))
    {
      int v12 = sub_215BA6E10(a2);
      if (sub_215BA6C04(&v43))
      {
        int v13 = sub_215BA6E10(a2);
        if (sub_215BA6C04(&v43))
        {
          int v14 = sub_215BA6E10(a2);
          if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
          {
            int v15 = v14;
            size_t v16 = HIBYTE(v31);
            if (v31 < 0) {
              size_t v16 = v30;
            }
            if (v16 != 2) {
              goto LABEL_37;
            }
            unint64_t v17 = (const void **)&__dst;
            if (v31 < 0) {
              unint64_t v17 = __dst;
            }
            if (*(_WORD *)v17 == 12880 || *(_WORD *)v17 == 13136)
            {
              int v18 = 0;
            }
            else
            {
LABEL_37:
              if (!sub_215AD4A5C((const void **)&__dst, "P5") && !sub_215AD4A5C((const void **)&__dst, "P6"))
              {
                sub_2157CFEA8((uint64_t)v27, "Invalid pnm file. Format magic number not recognized.");
                char v28 = 1;
                sub_215B9C588(5u, v27, (uint64_t)&__s);
                sub_2158AAB90(a1, (uint64_t)&__s);
                sub_21573FF04((uint64_t)&__s);
                std::string::size_type v23 = v27;
                goto LABEL_85;
              }
              int v18 = 1;
            }
            size_t v21 = HIBYTE(v31);
            if (v31 < 0) {
              size_t v21 = v30;
            }
            if (v21 != 2) {
              goto LABEL_97;
            }
            int v22 = (const void **)&__dst;
            if (v31 < 0) {
              int v22 = __dst;
            }
            if (*(_WORD *)v22 == 12880 || *(_WORD *)v22 == 13648)
            {
              if (v15 == 255)
              {
                int v24 = 1;
              }
              else
              {
                if (v15 != 0xFFFF) {
                  goto LABEL_93;
                }
                int v24 = 2;
              }
            }
            else
            {
LABEL_97:
              if (sub_215AD4A5C((const void **)&__dst, "P3") || sub_215AD4A5C((const void **)&__dst, "P6"))
              {
                if (v15 != 255)
                {
                  if (v15 == 0xFFFF)
                  {
                    sub_2157CFEA8((uint64_t)v25, "Unsupported pnm format. Loader does not support Rgb16u (.pbm) loading yet.");
                    char v26 = 1;
                    sub_215B9C588(5u, v25, (uint64_t)&__s);
                    sub_2158AAB90(a1, (uint64_t)&__s);
                    sub_21573FF04((uint64_t)&__s);
                    std::string::size_type v23 = v25;
LABEL_85:
                    sub_21573FE74((uint64_t)v23);
LABEL_61:
                    if ((SHIBYTE(v31) & 0x80000000) == 0) {
                      return;
                    }
                    uint64_t v9 = __dst;
                    goto LABEL_63;
                  }
LABEL_93:
                  sub_215BA72B4((uint64_t)&__s, v15);
                  sub_2158AAB90(a1, (uint64_t)&__s);
                  sub_21573FF04((uint64_t)&__s);
                  goto LABEL_61;
                }
                int v24 = 21;
              }
              else
              {
                int v24 = 0;
              }
            }
            LOBYTE(__s) = 0;
            std::istream::read();
            if (__s == 13)
            {
              LOBYTE(__s) = 0;
              std::istream::read();
            }
            *(_DWORD *)a1 = v18;
            *(_DWORD *)(a1 + 4) = v24;
            *(_DWORD *)(a1 + 8) = v12;
            *(_DWORD *)(a1 + 12) = v13;
            *(unsigned char *)(a1 + 120) = 1;
            goto LABEL_61;
          }
        }
      }
    }
    sub_2157CFEA8((uint64_t)&v44, "Invalid pnm file. Unexpected end of file in header.");
    char v52 = 1;
    sub_2157CFBCC(5u, &v44, (uint64_t)&__s);
    if (!v52) {
      goto LABEL_52;
    }
    if (!v51) {
      goto LABEL_49;
    }
    if (v50 < 0)
    {
      operator delete(v49);
      if ((v48 & 0x80000000) == 0)
      {
LABEL_49:
        if (v46) {
          goto LABEL_50;
        }
        goto LABEL_52;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
      goto LABEL_49;
    }
    operator delete(v47);
    if (v46)
    {
LABEL_50:
      if (v45 < 0) {
        operator delete((void *)v44);
      }
    }
LABEL_52:
    *(_OWORD *)a1 = __s;
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 112) = 0;
    if (v42)
    {
      *(unsigned char *)(a1 + 40) = 0;
      int v19 = v35;
      if (v35)
      {
        *(_OWORD *)(a1 + 16) = __p;
        *(void *)(a1 + 32) = v34;
        uint64_t v34 = 0;
        long long __p = 0uLL;
        *(unsigned char *)(a1 + 40) = 1;
      }
      *(unsigned char *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 104) = 0;
      if (v41)
      {
        uint64_t v20 = v38;
        *(void *)(a1 + 64) = v37;
        *(_OWORD *)(a1 + 48) = v36;
        long long v36 = 0uLL;
        *(void *)(a1 + 72) = v20;
        *(_OWORD *)(a1 + 80) = v39;
        *(void *)(a1 + 96) = v40;
        uint64_t v37 = 0;
        long long v39 = 0uLL;
        uint64_t v40 = 0;
        *(unsigned char *)(a1 + 104) = 1;
      }
      *(unsigned char *)(a1 + 112) = 1;
      *(unsigned char *)(a1 + 120) = 0;
      if (v19 && SHIBYTE(v34) < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 120) = 0;
    }
    goto LABEL_61;
  }
  sub_2157CFEA8((uint64_t)&v44, "Invalid pnm file. Unexpected end of file in header.");
  char v52 = 1;
  sub_2157CFBCC(5u, &v44, (uint64_t)&__s);
  if (v52)
  {
    if (!v51) {
      goto LABEL_10;
    }
    if (v50 < 0)
    {
      operator delete(v49);
      if ((v48 & 0x80000000) == 0)
      {
LABEL_10:
        if (!v46) {
          goto LABEL_13;
        }
LABEL_11:
        if (v45 < 0) {
          operator delete((void *)v44);
        }
        goto LABEL_13;
      }
    }
    else if ((v48 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v47);
    if (!v46) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
LABEL_13:
  *(_OWORD *)a1 = __s;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (!v42)
  {
    *(unsigned char *)(a1 + 120) = 0;
    return;
  }
  *(unsigned char *)(a1 + 40) = 0;
  int v7 = v35;
  if (v35)
  {
    *(_OWORD *)(a1 + 16) = __p;
    *(void *)(a1 + 32) = v34;
    uint64_t v34 = 0;
    long long __p = 0uLL;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  if (v41)
  {
    uint64_t v8 = v38;
    *(void *)(a1 + 64) = v37;
    *(_OWORD *)(a1 + 48) = v36;
    long long v36 = 0uLL;
    *(void *)(a1 + 72) = v8;
    *(_OWORD *)(a1 + 80) = v39;
    *(void *)(a1 + 96) = v40;
    uint64_t v37 = 0;
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    *(unsigned char *)(a1 + 104) = 1;
  }
  *(unsigned char *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 120) = 0;
  if (v7 && SHIBYTE(v34) < 0)
  {
    uint64_t v9 = (const void **)__p;
LABEL_63:
    operator delete(v9);
  }
}

void sub_215BA52FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BA5398(_DWORD *a1@<X0>, void *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v9 = a1[12];
  unsigned int v10 = v9 - 1;
  if (v9 != 1 && v9 != 21 && v9 != 2 && &unk_215EDE4FC - &unk_215EDE4F0 == 12)
  {
    LODWORD(v58) = 0;
    sub_215806C64();
  }
  if (a4 && (a4 == 1 && v10 > 1 || a4 == 2 && v9 != 21))
  {
    LODWORD(v58) = 0;
    sub_215B9C864();
  }
  unsigned int v12 = a1[6];
  unsigned int v11 = a1[7];
  if (v10 > 1)
  {
    if (v9 != 21)
    {
      int v70 = 0;
      sub_215806C64();
    }
    int v13 = "P3\n";
    int v14 = "P6\n";
  }
  else
  {
    int v13 = "P2\n";
    int v14 = "P5\n";
  }
  if (a3 == 1) {
    uint64_t v15 = (uint64_t)v14;
  }
  else {
    uint64_t v15 = (uint64_t)v13;
  }
  sub_215731D94(a2, v15, 3);
  if (v9 == 21 || v9 == 1) {
    int v17 = 255;
  }
  else {
    int v17 = 0xFFFF;
  }
  std::to_string(&v57, v12);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v18 = &v57;
  }
  else {
    int v18 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v57.__r_.__value_.__l.__size_;
  }
  sub_215731D94(a2, (uint64_t)v18, size);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  sub_215731D94(a2, (uint64_t)" ", 1);
  std::to_string(&v57, v11);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v20 = &v57;
  }
  else {
    uint64_t v20 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = v57.__r_.__value_.__l.__size_;
  }
  sub_215731D94(a2, (uint64_t)v20, v21);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  sub_215731D94(a2, (uint64_t)"\n", 1);
  std::to_string(&v57, v17);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &v57;
  }
  else {
    int v22 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = v57.__r_.__value_.__l.__size_;
  }
  sub_215731D94(a2, (uint64_t)v22, v23);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  sub_215731D94(a2, (uint64_t)"\n", 1);
  switch(v9)
  {
    case 21:
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C66F298;
      sub_215BA863C((uint64_t)a1, (uint64_t)&v57.__r_.__value_.__l.__size_);
      if (a3 == 1)
      {
        std::string::size_type v30 = v57.__r_.__value_.__l.__size_;
        if (!v57.__r_.__value_.__l.__size_) {
          goto LABEL_118;
        }
        int64_t v31 = (std::__shared_weak_count *)v57.__r_.__value_.__r.__words[2];
        if (v57.__r_.__value_.__r.__words[2])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          uint64_t v32 = (std::__shared_weak_count *)v57.__r_.__value_.__r.__words[2];
          std::string::size_type v30 = v57.__r_.__value_.__l.__size_;
          if (v57.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
        }
        if (v68) {
          (*(void (**)(std::string *__return_ptr, std::string::size_type, void))(*(void *)v30 + 96))(&v55, v30, 0);
        }
        else {
LABEL_118:
        }
          v55.__r_.__value_.__r.__words[0] = 0;
        if (!v59) {
          goto LABEL_143;
        }
        if (!HIDWORD(v59)) {
          goto LABEL_143;
        }
        int v43 = v60;
        if (!v60) {
          goto LABEL_143;
        }
        uint64_t v44 = v64;
        uint64_t v45 = v58;
        if (v67 && v58)
        {
          long long v46 = *(_OWORD *)&v57.__r_.__value_.__r.__words[1];
          if (v57.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(void))(**((void **)&v46 + 1) + 16))(*((void *)&v46 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
            }
          }
          (*(void (**)(void, void, const char *))(*(void *)v46 + 88))(v46, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          uint64_t v45 = v58;
        }
        int v47 = v43 - 1;
        if (v43 != 1)
        {
          do
          {
            std::ostream::write();
            v45 += v44;
            --v47;
          }
          while (v47);
        }
        goto LABEL_142;
      }
      v69.__r_.__value_.__r.__words[0] = 16;
      v69.__r_.__value_.__l.__size_ = 0x1000000008;
      v69.__r_.__value_.__r.__words[2] = 14;
      long long v33 = operator new(0x18uLL);
      *(_OWORD *)long long v33 = xmmword_26425AAB8;
      void v33[2] = "\n";
      v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
      v55.__r_.__value_.__l.__size_ = (std::string::size_type)(v33 + 3);
      v55.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 3);
      char v56 = 1;
      sub_215BAC730((uint64_t)&v69, a2, (uint64_t)&v57, (uint64_t)&v55);
      if (v56 && v55.__r_.__value_.__r.__words[0])
      {
        v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (v65 && v66) {
LABEL_103:
      }
        sub_215731D94(a2, (uint64_t)"\n", 1);
      break;
    case 2:
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C66C3B0;
      sub_215BA8040((uint64_t)a1, (uint64_t)&v57.__r_.__value_.__l.__size_);
      if (a3 == 1)
      {
        std::string::size_type v27 = v57.__r_.__value_.__l.__size_;
        if (!v57.__r_.__value_.__l.__size_) {
          goto LABEL_104;
        }
        char v28 = (std::__shared_weak_count *)v57.__r_.__value_.__r.__words[2];
        if (v57.__r_.__value_.__r.__words[2])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
          uint64_t v29 = (std::__shared_weak_count *)v57.__r_.__value_.__r.__words[2];
          std::string::size_type v27 = v57.__r_.__value_.__l.__size_;
          if (v57.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
        if (v63) {
          (*(void (**)(std::string *__return_ptr, std::string::size_type, void))(*(void *)v27 + 96))(&v55, v27, 0);
        }
        else {
LABEL_104:
        }
          v55.__r_.__value_.__r.__words[0] = 0;
        uint64_t v34 = v61;
        uint64_t v35 = v58;
        uint64_t v36 = v59;
        if (v62 && v58)
        {
          long long v37 = *(_OWORD *)&v57.__r_.__value_.__r.__words[1];
          if (v57.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(void))(**((void **)&v37 + 1) + 16))(*((void *)&v37 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
            }
          }
          (*(void (**)(void, void, const char *))(*(void *)v37 + 88))(v37, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          uint64_t v35 = v58;
        }
        unsigned int v38 = v34 * HIDWORD(v36);
        if (v34 * HIDWORD(v36) && v36)
        {
          uint64_t v39 = 2 * v36;
          uint64_t v40 = 2 * v34;
          uint64_t v41 = v35 + 2 * v38;
          do
          {
            uint64_t v42 = 0;
            do
            {
              LOWORD(v69.__r_.__value_.__l.__data_) = bswap32(*(unsigned __int16 *)(v35 + v42)) >> 16;
              std::ostream::write();
              v42 += 2;
            }
            while (v39 != v42);
            v35 += v40;
          }
          while (v35 != v41);
        }
        goto LABEL_143;
      }
      v69.__r_.__value_.__r.__words[0] = 16;
      v69.__r_.__value_.__l.__size_ = 0x1000000008;
      v69.__r_.__value_.__r.__words[2] = 14;
      v55.__r_.__value_.__s.__data_[0] = 0;
      char v56 = 0;
      sub_215BAB7E0((uint64_t)&v69, a2, (uint64_t)&v57, (uint64_t)&v55);
      if (v56 && v55.__r_.__value_.__r.__words[0])
      {
        v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (v59 && HIDWORD(v59)) {
        goto LABEL_103;
      }
      break;
    case 1:
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C66C138;
      sub_215BA777C((uint64_t)a1, (uint64_t)&v57.__r_.__value_.__l.__size_);
      if (a3 == 1)
      {
        std::string::size_type v24 = v57.__r_.__value_.__l.__size_;
        if (!v57.__r_.__value_.__l.__size_) {
          goto LABEL_131;
        }
        unsigned int v25 = (std::__shared_weak_count *)v57.__r_.__value_.__r.__words[2];
        if (v57.__r_.__value_.__r.__words[2])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
          if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
          char v26 = (std::__shared_weak_count *)v57.__r_.__value_.__r.__words[2];
          std::string::size_type v24 = v57.__r_.__value_.__l.__size_;
          if (v57.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
        }
        if (v63) {
          (*(void (**)(std::string *__return_ptr, std::string::size_type, void))(*(void *)v24 + 96))(&v55, v24, 0);
        }
        else {
LABEL_131:
        }
          v55.__r_.__value_.__r.__words[0] = 0;
        if (!v59) {
          goto LABEL_143;
        }
        int v48 = HIDWORD(v59);
        if (!HIDWORD(v59)) {
          goto LABEL_143;
        }
        uint64_t v49 = v61;
        uint64_t v50 = v58;
        if (v62 && v58)
        {
          long long v51 = *(_OWORD *)&v57.__r_.__value_.__r.__words[1];
          if (v57.__r_.__value_.__r.__words[2])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 1uLL, memory_order_relaxed);
            if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              (*(void (**)(void))(**((void **)&v51 + 1) + 16))(*((void *)&v51 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
            }
          }
          (*(void (**)(void, void, const char *))(*(void *)v51 + 88))(v51, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
          uint64_t v50 = v58;
        }
        int v52 = v48 - 1;
        if (v48 != 1)
        {
          do
          {
            std::ostream::write();
            v50 += v49;
            --v52;
          }
          while (v52);
        }
LABEL_142:
        std::ostream::write();
LABEL_143:
        std::string::size_type v53 = v55.__r_.__value_.__r.__words[0];
        v55.__r_.__value_.__r.__words[0] = 0;
        if (v53) {
          (*(void (**)(std::string::size_type))(*(void *)v53 + 8))(v53);
        }
        break;
      }
      v69.__r_.__value_.__r.__words[0] = 16;
      v69.__r_.__value_.__l.__size_ = 0x1000000008;
      v69.__r_.__value_.__r.__words[2] = 14;
      v55.__r_.__value_.__s.__data_[0] = 0;
      char v56 = 0;
      sub_215BAA8B4((uint64_t)&v69, a2, (uint64_t)&v57, (uint64_t)&v55);
      if (v56 && v55.__r_.__value_.__r.__words[0])
      {
        v55.__r_.__value_.__l.__size_ = v55.__r_.__value_.__r.__words[0];
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (v59 && HIDWORD(v59)) {
        goto LABEL_103;
      }
      break;
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/Pnm.cpp", 440, (uint64_t)"", 0, (uint64_t)"not implemented", 15, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
  uint64_t v54 = (std::__shared_weak_count *)v57.__r_.__value_.__r.__words[2];
  if (v57.__r_.__value_.__r.__words[2]
    && !atomic_fetch_add((atomic_ullong *volatile)(v57.__r_.__value_.__r.__words[2] + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
  }
  *(unsigned char *)(a5 + 120) = 1;
}

void sub_215BA682C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  char v67 = a65;
  a65 = 0;
  if (v67) {
    (*(void (**)(void *))(*(void *)v67 + 8))(v67);
  }
  sub_215900DC4(v65 - 248);
  sub_2157407D4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_215BA6C04(uint64_t **a1)
{
  uint64_t v2 = MEMORY[0x263EF8318];
  while (1)
  {
    unint64_t v3 = *a1;
    std::istream::tellg();
    while ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 2) == 0)
    {
      unsigned int v4 = std::istream::peek();
      if (v4 <= 0x7F)
      {
        if ((*(_DWORD *)(v2 + 4 * v4 + 60) & 0x4000) == 0) {
          break;
        }
      }
      else if (!__maskrune(v4, 0x4000uLL))
      {
        break;
      }
      std::istream::seekg();
    }
    std::istream::tellg();
    if (v11 == v10)
    {
      size_t v5 = *a1;
      std::istream::tellg();
      int v7 = v5 + 4;
      for (uint64_t i = *v5; (*((unsigned char *)v7 + *(void *)(i - 24)) & 2) == 0 && std::istream::peek() == 35; uint64_t i = v8)
      {
        uint64_t v8 = *v5;
        if ((*((unsigned char *)v7 + *(void *)(*v5 - 24)) & 2) == 0)
        {
          while (std::istream::peek() != 10)
          {
            std::istream::seekg();
            uint64_t v8 = *v5;
            if ((*((unsigned char *)v7 + *(void *)(*v5 - 24)) & 2) != 0) {
              goto LABEL_12;
            }
          }
          uint64_t v8 = *v5;
        }
LABEL_12:
        ;
      }
      std::istream::tellg();
      if (v11 == v10) {
        return (*((unsigned char *)*a1 + *(void *)(**a1 - 24) + 32) & 2) == 0;
      }
    }
  }
}

uint64_t sub_215BA6E10(void *a1)
{
  long long __p = 0;
  int v52 = 0;
  unsigned __int8 v2 = std::istream::peek();
  if ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 2) != 0)
  {
    unsigned int v4 = 0;
    unint64_t v11 = 0;
    goto LABEL_59;
  }
  unsigned __int8 v3 = v2;
  unsigned int v4 = 0;
  do
  {
    sub_215BA7658("0123456789", (uint64_t)v53);
    unint64_t v5 = v54;
    if ((v54 & 0x80u) == 0) {
      int v6 = v53;
    }
    else {
      int v6 = (void **)v53[0];
    }
    if ((v54 & 0x80u) != 0) {
      unint64_t v5 = (unint64_t)v53[1];
    }
    if (v5)
    {
      int v7 = (char *)(v5 - 1);
      do
      {
        int v8 = *(unsigned __int8 *)v6;
        int v6 = (void **)((char *)v6 + 1);
        BOOL v9 = v8 == v3;
      }
      while (v8 != v3 && v7-- != 0);
      if (((char)v54 & 0x80000000) == 0)
      {
LABEL_16:
        unint64_t v11 = (unint64_t)v52;
        if (!v9) {
          goto LABEL_57;
        }
        goto LABEL_20;
      }
    }
    else
    {
      BOOL v9 = 0;
      if (((char)v54 & 0x80000000) == 0) {
        goto LABEL_16;
      }
    }
    operator delete(v53[0]);
    unint64_t v11 = (unint64_t)v52;
    if (!v9) {
      goto LABEL_57;
    }
LABEL_20:
    if ((unint64_t)v4 < v11)
    {
      *v4++ = v3;
      goto LABEL_40;
    }
    unint64_t v12 = v4 - __p;
    uint64_t v13 = v4 - __p + 1;
    if (v13 < 0) {
      goto LABEL_93;
    }
    unint64_t v14 = v11 - (void)__p;
    if (2 * v14 > v13) {
      uint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v13;
    }
    if (!v15)
    {
      size_t v16 = 0;
      int v17 = (char *)(v4 - __p);
      *(unsigned char *)unint64_t v12 = v3;
      uint64_t v18 = v12 + 1;
      if (v4 == __p) {
        goto LABEL_37;
      }
LABEL_30:
      if (v12 < 8 || v16 > &v16[v4 - __p - 1] || __p > v4 - 1 || (unint64_t)(__p - v16) < 0x20)
      {
        int v19 = v4;
        goto LABEL_32;
      }
      if (v12 >= 0x20)
      {
        unint64_t v22 = v12 & 0xFFFFFFFFFFFFFFE0;
        std::string::size_type v23 = &v16[v12 - 16];
        std::string::size_type v24 = (long long *)(v4 - 16);
        unint64_t v25 = v12 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v26 = *v24;
          *((_OWORD *)v23 - 1) = *(v24 - 1);
          *(_OWORD *)std::string::size_type v23 = v26;
          v23 -= 32;
          v24 -= 2;
          v25 -= 32;
        }
        while (v25);
        if (v12 == v22)
        {
LABEL_34:
          unsigned int v4 = __p;
          long long __p = v16;
          int v52 = &v16[v15];
          if (!v4) {
            goto LABEL_39;
          }
LABEL_38:
          operator delete(v4);
          goto LABEL_39;
        }
        if ((v12 & 0x18) == 0)
        {
          v17 -= v22;
          int v19 = &v4[-v22];
          goto LABEL_32;
        }
      }
      else
      {
        unint64_t v22 = 0;
      }
      int v19 = &v4[-(v12 & 0xFFFFFFFFFFFFFFF8)];
      v17 -= v12 & 0xFFFFFFFFFFFFFFF8;
      std::string::size_type v27 = &v16[&v4[-v22] - __p - 8];
      char v28 = (uint64_t *)&v4[-v22 - 8];
      unint64_t v29 = v22 - (v12 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        uint64_t v30 = *v28--;
        *(void *)std::string::size_type v27 = v30;
        v27 -= 8;
        v29 += 8;
      }
      while (v29);
      if (v12 == (v12 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_34;
      }
LABEL_32:
      uint64_t v20 = v17 - 1;
      do
      {
        char v21 = *--v19;
        *v20-- = v21;
      }
      while (v19 != __p);
      goto LABEL_34;
    }
    size_t v16 = (char *)operator new(v15);
    int v17 = &v16[v12];
    v16[v12] = v3;
    uint64_t v18 = (uint64_t)&v16[v12 + 1];
    if (v4 != __p) {
      goto LABEL_30;
    }
LABEL_37:
    long long __p = v17;
    int v52 = &v16[v15];
    if (v4) {
      goto LABEL_38;
    }
LABEL_39:
    unsigned int v4 = (char *)v18;
LABEL_40:
    std::istream::seekg();
    unsigned __int8 v3 = std::istream::peek();
  }
  while ((*((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 2) == 0);
  unint64_t v11 = (unint64_t)v52;
LABEL_57:
  if ((unint64_t)v4 < v11)
  {
    char *v4 = 10;
    goto LABEL_78;
  }
LABEL_59:
  unint64_t v31 = v4 - __p;
  uint64_t v32 = v4 - __p + 1;
  if (v32 < 0) {
LABEL_93:
  }
    sub_215738AC0();
  unint64_t v33 = v11 - (void)__p;
  if (2 * v33 > v32) {
    uint64_t v32 = 2 * v33;
  }
  if (v33 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v34 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v34 = v32;
  }
  if (v34) {
    uint64_t v35 = (char *)operator new(v34);
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v36 = &v35[v31];
  v35[v31] = 10;
  if (v4 == __p)
  {
    v35 += v31;
    long long __p = v36;
    if (!v4) {
      goto LABEL_79;
    }
    goto LABEL_77;
  }
  if (v31 < 8 || (unint64_t)(__p - v35) < 0x20)
  {
    long long v37 = v4;
    goto LABEL_72;
  }
  if (v31 >= 0x20)
  {
    unint64_t v42 = v31 & 0xFFFFFFFFFFFFFFE0;
    int v43 = (long long *)(v4 - 16);
    uint64_t v44 = &v35[v4 - 16 - __p];
    unint64_t v45 = v31 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      long long v46 = *v43;
      *((_OWORD *)v44 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v44 = v46;
      v44 -= 32;
      v43 -= 2;
      v45 -= 32;
    }
    while (v45);
    if (v31 != v42)
    {
      if ((v31 & 0x18) == 0)
      {
        v36 -= v42;
        long long v37 = &v4[-v42];
        goto LABEL_72;
      }
      goto LABEL_88;
    }
  }
  else
  {
    unint64_t v42 = 0;
LABEL_88:
    long long v37 = &v4[-(v31 & 0xFFFFFFFFFFFFFFF8)];
    v36 -= v31 & 0xFFFFFFFFFFFFFFF8;
    int v47 = &v4[-v42 - 8];
    int v48 = &v35[v47 - __p];
    unint64_t v49 = v42 - (v31 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v50 = *(void *)v47;
      v47 -= 8;
      *(void *)int v48 = v50;
      v48 -= 8;
      v49 += 8;
    }
    while (v49);
    if (v31 != (v31 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_72:
      unsigned int v38 = v36 - 1;
      do
      {
        char v39 = *--v37;
        *v38-- = v39;
      }
      while (v37 != __p);
    }
  }
  unsigned int v4 = __p;
  long long __p = v35;
  if (v4)
  {
LABEL_77:
    operator delete(v4);
LABEL_78:
    uint64_t v35 = __p;
  }
LABEL_79:
  uint64_t v40 = atoi(v35);
  if (v35) {
    operator delete(v35);
  }
  return v40;
}

void sub_215BA7294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BA72B4(uint64_t a1, int a2)
{
  if (a2 >= 255) {
    int v4 = 0xFFFF;
  }
  else {
    int v4 = 255;
  }
  size_t v16 = (char *)operator new(0x68uLL);
  long long v17 = xmmword_215EDE4E0;
  strcpy(v16, "Unsupported pnm format. Loader does not support intensity scaling. File specifies maximum intensity ");
  int v18 = 1;
  std::to_string(&v19, a2);
  char v21 = (std::string *)&v16;
  unint64_t v22 = &v19;
  std::string::size_type v23 = &v16;
  std::string::size_type v24 = &v19;
  unint64_t v25 = &v19;
  uint64_t v20 = &v21;
  ((void (*)(std::string ***, char **))off_26C67F690[0])(&v20, &v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  char v21 = (std::string *)&v16;
  unint64_t v22 = (std::string *)" but should be ";
  std::string::size_type v23 = &v16;
  std::string::size_type v24 = (std::string *)" but should be ";
  unint64_t v25 = (std::string *)" but should be ";
  if (v18 == -1) {
    sub_215742D4C();
  }
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  ((void (*)(std::string *, char **))off_26C67F6A0[v18])(&v19, &v16);
  std::to_string(&v19, v4);
  char v21 = (std::string *)&v16;
  unint64_t v22 = &v19;
  std::string::size_type v23 = &v16;
  std::string::size_type v24 = &v19;
  unint64_t v25 = &v19;
  if (v18 == -1) {
    sub_215742D4C();
  }
  uint64_t v20 = &v21;
  ((void (*)(std::string ***, char **))off_26C67F688[v18])(&v20, &v16);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  char v21 = (std::string *)&v16;
  unint64_t v22 = (std::string *)".";
  std::string::size_type v23 = &v16;
  std::string::size_type v24 = (std::string *)".";
  unint64_t v25 = (std::string *)".";
  if (v18 == -1) {
    sub_215742D4C();
  }
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  ((void (*)(std::string *, char **))off_26C67F6B8[v18])(&v19, &v16);
  if (v18 == -1) {
    sub_215742D4C();
  }
  char v21 = &v19;
  ((void (*)(void **__return_ptr, std::string **, char **))off_26C67F6D0[v18])(v5, &v21, &v16);
  if (v18 != -1) {
    ((void (*)(std::string **, char **))off_26C67F670[v18])(&v21, &v16);
  }
  if (SHIBYTE(v6) < 0)
  {
    sub_215738B0C(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v5;
    uint64_t v8 = v6;
  }
  char v9 = 1;
  LOBYTE(v10) = 0;
  char v14 = 0;
  char v15 = 1;
  sub_215B9C588(5u, (long long *)__p, a1);
  if (v15)
  {
    if (!v14) {
      goto LABEL_21;
    }
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_21:
        if (!v9) {
          goto LABEL_24;
        }
LABEL_22:
        if (SHIBYTE(v8) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_24;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v10);
    if (!v9) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
LABEL_24:
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
}

void sub_215BA75D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BA7608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_215BA7658(const char *a1@<X0>, uint64_t a2@<X8>)
{
  size_t v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    p_dst = (long long *)operator new(v7 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v11 = v8 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, a1, v5);
    *((unsigned char *)p_dst + v5) = 0;
    if ((SHIBYTE(v11) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v11) = v4;
  p_dst = &__dst;
  if (v4) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  if ((SHIBYTE(v11) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)a2 = __dst;
    *(void *)(a2 + 16) = v11;
    return;
  }
LABEL_10:
  char v9 = (void *)__dst;
  sub_215738B0C((unsigned char *)a2, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v9);
}

void sub_215BA7768(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_215BA777C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 1)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215BA7A2C();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    size_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_215BA79E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_215BA7A2C()
{
  int v0 = sub_215BA7AA8();
  uint64_t v1 = sub_215BA7D74();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_215BA7AA8()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889C40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889C40))
  {
    sub_215732BF4(v6, "ConstImageView");
    uint64_t v1 = sub_215805BEC();
    sub_215BA7CB8((uint64_t)v1, (uint64_t)v8);
    unsigned __int8 v2 = sub_2158061A0();
    sub_215BA7CB8((uint64_t)v2, (uint64_t)&__p);
    sub_21573A150(v5, (uint64_t)v8, 2uLL);
    sub_215E19EAC(v6, (uint64_t *)v5, &stru_267889C28, v3, v4);
    sub_2157352DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889C28, &dword_21572C000);
          __cxa_guard_release(&qword_267889C40);
          return &stru_267889C28;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267889C28;
}

void sub_215BA7C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267889C40);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267889C40);
  _Unwind_Resume(a1);
}

void sub_215BA7CB8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_215E13B5C(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215BA7D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_215BA7D74()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889C60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889C60))
  {
    sub_215732BF4(v6, "ConstImageView");
    uint64_t v1 = sub_2158077E4();
    sub_215BA7F84((uint64_t)v1, (uint64_t)v8);
    unsigned __int8 v2 = sub_2158061A0();
    sub_215BA7F84((uint64_t)v2, (uint64_t)&__p);
    sub_21573A150(v5, (uint64_t)v8, 2uLL);
    sub_215E19EAC(v6, (uint64_t *)v5, &stru_267889C48, v3, v4);
    sub_2157352DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889C48, &dword_21572C000);
          __cxa_guard_release(&qword_267889C60);
          return &stru_267889C48;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267889C48;
}

void sub_215BA7ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267889C60);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267889C60);
  _Unwind_Resume(a1);
}

void sub_215BA7F84(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_215E13B5C(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215BA8024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BA8040(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 2)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215BA82F4();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    size_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_215BA82A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_215BA82F4()
{
  int v0 = sub_215BA8370();
  uint64_t v1 = sub_215BA7D74();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_215BA8370()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889C80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889C80))
  {
    sub_215732BF4(v6, "ConstImageView");
    uint64_t v1 = sub_2158084A4();
    sub_215BA8580((uint64_t)v1, (uint64_t)v8);
    unsigned __int8 v2 = sub_2158061A0();
    sub_215BA8580((uint64_t)v2, (uint64_t)&__p);
    sub_21573A150(v5, (uint64_t)v8, 2uLL);
    sub_215E19EAC(v6, (uint64_t *)v5, &stru_267889C68, v3, v4);
    sub_2157352DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889C68, &dword_21572C000);
          __cxa_guard_release(&qword_267889C80);
          return &stru_267889C68;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267889C68;
}

void sub_215BA84CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267889C80);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267889C80);
  _Unwind_Resume(a1);
}

void sub_215BA8580(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_215E13B5C(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215BA8620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BA863C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 21)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215BA8970();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    size_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v18 = v4;
      std::string v19 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 8);
      std::string v19 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    std::string v19 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  BOOL v7 = *(_DWORD *)(a1 + 24) == 0;
  if (*(_DWORD *)(a1 + 24)) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v7 = 1;
  }
  BOOL v9 = !v7;
  if (v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  unint64_t v11 = v10 | v8;
  unint64_t v12 = *(void *)(a1 + 24);
  if (!v9) {
    unint64_t v12 = 0;
  }
  *(void *)((char *)&v20 + 4) = v12;
  unint64_t v13 = v12;
  LODWORD(v20) = 3;
  uint64_t v14 = v20;
  unint64_t v15 = HIDWORD(v12);
  LODWORD(v21) = 1;
  HIDWORD(v21) = v11;
  unint64_t v16 = HIDWORD(v10);
  if (HIDWORD(v12) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v17 = *(_WORD *)(a1 + 52);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  *(void *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v16;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v11;
  *(_WORD *)(a2 + 64) = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_215BA8924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215BA8970()
{
  int v0 = sub_215BA89EC();
  uint64_t v1 = sub_215BA7D74();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_215BA89EC()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889CA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889CA0))
  {
    sub_215732BF4(v6, "ConstImageView");
    uint64_t v1 = sub_215810894();
    sub_215BA8BFC((uint64_t)v1, (uint64_t)v8);
    unsigned __int8 v2 = sub_2158061A0();
    sub_215BA8BFC((uint64_t)v2, (uint64_t)&__p);
    sub_21573A150(v5, (uint64_t)v8, 2uLL);
    sub_215E19EAC(v6, (uint64_t *)v5, &stru_267889C88, v3, v4);
    sub_2157352DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889C88, &dword_21572C000);
          __cxa_guard_release(&qword_267889CA0);
          return &stru_267889C88;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267889C88;
}

void sub_215BA8B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267889CA0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267889CA0);
  _Unwind_Resume(a1);
}

void sub_215BA8BFC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_215E13B5C(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215BA8C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BA8CB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 1)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215BA8F68();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    size_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_215BA8F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_215BA8F68()
{
  int v0 = sub_215BA8FE4();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_215BA8FE4()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889BC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889BC0))
  {
    sub_215732BF4(v6, "ImageView");
    uint64_t v1 = sub_215805BEC();
    sub_215BA91F4((uint64_t)v1, (uint64_t)v8);
    unsigned __int8 v2 = sub_2158061A0();
    sub_215BA91F4((uint64_t)v2, (uint64_t)&__p);
    sub_21573A150(v5, (uint64_t)v8, 2uLL);
    sub_215E19EAC(v6, (uint64_t *)v5, &stru_267889BA8, v3, v4);
    sub_2157352DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889BA8, &dword_21572C000);
          __cxa_guard_release(&qword_267889BC0);
          return &stru_267889BA8;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267889BA8;
}

void sub_215BA9140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267889BC0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267889BC0);
  _Unwind_Resume(a1);
}

void sub_215BA91F4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_215E13B5C(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215BA9294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_215BA92B0()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889BE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889BE0))
  {
    sub_215732BF4(v6, "ImageView");
    uint64_t v1 = sub_2158077E4();
    sub_215BA94C0((uint64_t)v1, (uint64_t)v8);
    unsigned __int8 v2 = sub_2158061A0();
    sub_215BA94C0((uint64_t)v2, (uint64_t)&__p);
    sub_21573A150(v5, (uint64_t)v8, 2uLL);
    sub_215E19EAC(v6, (uint64_t *)v5, &stru_267889BC8, v3, v4);
    sub_2157352DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889BC8, &dword_21572C000);
          __cxa_guard_release(&qword_267889BE0);
          return &stru_267889BC8;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267889BC8;
}

void sub_215BA940C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267889BE0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267889BE0);
  _Unwind_Resume(a1);
}

void sub_215BA94C0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_215E13B5C(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215BA9560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BA957C(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 8) != *(void *)a1) {
    *(void *)(a1 + 8) = *(void *)a1;
  }
  unsigned __int8 v4 = std::istream::peek();
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0)
  {
    unsigned __int8 v5 = v4;
    do
    {
      sub_215BA7658("0123456789", (uint64_t)v56);
      unint64_t v7 = v57;
      if ((v57 & 0x80u) == 0) {
        BOOL v8 = v56;
      }
      else {
        BOOL v8 = (void **)v56[0];
      }
      if ((v57 & 0x80u) != 0) {
        unint64_t v7 = (unint64_t)v56[1];
      }
      if (v7)
      {
        char v9 = (char *)(v7 - 1);
        do
        {
          int v10 = *(unsigned __int8 *)v8;
          BOOL v8 = (void **)((char *)v8 + 1);
          BOOL v11 = v10 == v5;
        }
        while (v10 != v5 && v9-- != 0);
        if (((char)v57 & 0x80000000) == 0)
        {
LABEL_20:
          if (!v11) {
            break;
          }
          goto LABEL_24;
        }
      }
      else
      {
        BOOL v11 = 0;
        if (((char)v57 & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
      operator delete(v56[0]);
      if (!v11) {
        break;
      }
LABEL_24:
      long long v14 = *(unsigned __int8 **)(a1 + 8);
      unint64_t v13 = *(void *)(a1 + 16);
      if ((unint64_t)v14 >= v13)
      {
        int v15 = *(unsigned __int8 **)a1;
        unint64_t v16 = (unint64_t)&v14[-*(void *)a1];
        unint64_t v17 = v16 + 1;
        if ((uint64_t)(v16 + 1) < 0) {
          goto LABEL_85;
        }
        unint64_t v18 = v13 - (void)v15;
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v19 = v17;
        }
        if (v19)
        {
          long long v20 = (char *)operator new(v19);
          uint64_t v21 = &v20[v16];
          v20[v16] = v5;
          uint64_t v6 = (uint64_t)&v20[v16 + 1];
          if (v14 == v15)
          {
LABEL_51:
            *(void *)a1 = v21;
            *(void *)(a1 + 8) = v6;
            *(void *)(a1 + 16) = &v20[v19];
            if (v14) {
              operator delete(v14);
            }
            goto LABEL_6;
          }
        }
        else
        {
          long long v20 = 0;
          uint64_t v21 = (char *)&v14[-*(void *)a1];
          *(unsigned char *)unint64_t v16 = v5;
          uint64_t v6 = v16 + 1;
          if (v14 == v15) {
            goto LABEL_51;
          }
        }
        if (v16 >= 8 && (unint64_t)(v15 - (unsigned __int8 *)v20) >= 0x20)
        {
          if (v16 >= 0x20)
          {
            unint64_t v22 = v16 & 0xFFFFFFFFFFFFFFE0;
            std::string::size_type v23 = &v20[v16 - 16];
            std::string::size_type v24 = (long long *)(v14 - 16);
            unint64_t v25 = v16 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v26 = *v24;
              *((_OWORD *)v23 - 1) = *(v24 - 1);
              *(_OWORD *)std::string::size_type v23 = v26;
              v23 -= 32;
              v24 -= 2;
              v25 -= 32;
            }
            while (v25);
            if (v16 == v22) {
              goto LABEL_50;
            }
            if ((v16 & 0x18) != 0) {
              goto LABEL_43;
            }
            v21 -= v22;
            v14 -= v22;
          }
          else
          {
            unint64_t v22 = 0;
LABEL_43:
            v21 -= v16 & 0xFFFFFFFFFFFFFFF8;
            std::string::size_type v27 = &v20[&v14[-v22] - v15 - 8];
            char v28 = (uint64_t *)&v14[-v22 - 8];
            unint64_t v29 = v22 - (v16 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v30 = *v28--;
              *(void *)std::string::size_type v27 = v30;
              v27 -= 8;
              v29 += 8;
            }
            while (v29);
            v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
            if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_50:
              long long v14 = *(unsigned __int8 **)a1;
              uint64_t v21 = v20;
              goto LABEL_51;
            }
          }
        }
        unint64_t v31 = v21 - 1;
        do
        {
          char v32 = *--v14;
          *v31-- = v32;
        }
        while (v14 != v15);
        goto LABEL_50;
      }
      *long long v14 = v5;
      uint64_t v6 = (uint64_t)(v14 + 1);
LABEL_6:
      *(void *)(a1 + 8) = v6;
      std::istream::seekg();
      unsigned __int8 v5 = std::istream::peek();
    }
    while ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 2) == 0);
  }
  size_t v34 = *(unsigned __int8 **)(a1 + 8);
  unint64_t v33 = *(void *)(a1 + 16);
  if ((unint64_t)v34 >= v33)
  {
    uint64_t v36 = *(unsigned __int8 **)a1;
    unint64_t v37 = (unint64_t)&v34[-*(void *)a1];
    unint64_t v38 = v37 + 1;
    if ((uint64_t)(v37 + 1) < 0) {
LABEL_85:
    }
      sub_215738AC0();
    unint64_t v39 = v33 - (void)v36;
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v40 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v40 = v38;
    }
    if (v40) {
      uint64_t v41 = operator new(v40);
    }
    else {
      uint64_t v41 = 0;
    }
    unint64_t v42 = &v41[v37];
    int v43 = &v41[v40];
    v41[v37] = 10;
    uint64_t v35 = (uint64_t)&v41[v37 + 1];
    if (v34 == v36)
    {
      *(void *)a1 = v42;
      *(void *)(a1 + 8) = v35;
      *(void *)(a1 + 16) = v43;
      if (!v34) {
        goto LABEL_84;
      }
      goto LABEL_83;
    }
    if (v37 < 8 || (unint64_t)(v36 - v41) < 0x20) {
      goto LABEL_80;
    }
    if (v37 >= 0x20)
    {
      unint64_t v44 = v37 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v45 = (long long *)(v34 - 16);
      long long v46 = &v41[v34 - 16 - v36];
      unint64_t v47 = v37 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v48 = *v45;
        *(v46 - 1) = *(v45 - 1);
        *long long v46 = v48;
        v46 -= 2;
        v45 -= 2;
        v47 -= 32;
      }
      while (v47);
      if (v37 == v44)
      {
LABEL_82:
        size_t v34 = *(unsigned __int8 **)a1;
        *(void *)a1 = v41;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v43;
        if (!v34) {
          goto LABEL_84;
        }
LABEL_83:
        operator delete(v34);
        goto LABEL_84;
      }
      if ((v37 & 0x18) == 0)
      {
        v42 -= v44;
        v34 -= v44;
        goto LABEL_80;
      }
    }
    else
    {
      unint64_t v44 = 0;
    }
    v42 -= v37 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (char *)&v34[-v44 - 8];
    uint64_t v50 = &v41[v49 - (char *)v36];
    unint64_t v51 = v44 - (v37 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v52 = *(void *)v49;
      v49 -= 8;
      *v50-- = v52;
      v51 += 8;
    }
    while (v51);
    v34 -= v37 & 0xFFFFFFFFFFFFFFF8;
    if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_82;
    }
LABEL_80:
    std::string::size_type v53 = v42 - 1;
    do
    {
      char v54 = *--v34;
      *v53-- = v54;
    }
    while (v34 != v36);
    goto LABEL_82;
  }
  *size_t v34 = 10;
  uint64_t v35 = (uint64_t)(v34 + 1);
LABEL_84:
  *(void *)(a1 + 8) = v35;
  return atoi(*(const char **)a1);
}

void sub_215BA999C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 2)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215BA9C50();
  }
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unsigned __int8 v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v14 = v4;
      *((void *)&v14 + 1) = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      long long v14 = v4;
    }
  }
  else
  {
    long long v14 = 0uLL;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 24);
  BOOL v8 = v7 != 0;
  BOOL v9 = v7 == 0;
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v9 = 1;
  }
  if (v9) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = ((unint64_t)*(unsigned int *)(a1 + 32) << 31) & 0x7FFFFFFF00000000;
  }
  if (v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  unint64_t v12 = v10 | v8;
  __int16 v13 = *(_WORD *)(a1 + 52);
  if (*((void *)&v14 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 1uLL, memory_order_relaxed);
    *(_OWORD *)a2 = v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v14 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(void))(**((void **)&v14 + 1) + 16))(*((void *)&v14 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
    }
  }
  else
  {
    *(_OWORD *)a2 = (unint64_t)v14;
    *(void *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(_WORD *)(a2 + 40) = v13;
  }
}

void sub_215BA9C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_215BA9C50()
{
  int v0 = sub_215BA9CCC();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_215BA9CCC()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889C00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889C00))
  {
    sub_215732BF4(v6, "ImageView");
    uint64_t v1 = sub_2158084A4();
    sub_215BA9EDC((uint64_t)v1, (uint64_t)v8);
    unsigned __int8 v2 = sub_2158061A0();
    sub_215BA9EDC((uint64_t)v2, (uint64_t)&__p);
    sub_21573A150(v5, (uint64_t)v8, 2uLL);
    sub_215E19EAC(v6, (uint64_t *)v5, &stru_267889BE8, v3, v4);
    sub_2157352DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889BE8, &dword_21572C000);
          __cxa_guard_release(&qword_267889C00);
          return &stru_267889BE8;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267889BE8;
}

void sub_215BA9E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267889C00);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267889C00);
  _Unwind_Resume(a1);
}

void sub_215BA9EDC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_215E13B5C(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215BA9F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BA9F98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 48) != 21)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215BAA2CC();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unsigned __int8 v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v18 = v4;
      size_t v19 = v5;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 8);
      size_t v19 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    size_t v19 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  BOOL v7 = *(_DWORD *)(a1 + 24) == 0;
  if (*(_DWORD *)(a1 + 24)) {
    uint64_t v8 = 3;
  }
  else {
    uint64_t v8 = 0;
  }
  if (!*(_DWORD *)(a1 + 28)) {
    BOOL v7 = 1;
  }
  BOOL v9 = !v7;
  if (v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = (unint64_t)*(unsigned int *)(a1 + 32) << 32;
  }
  unint64_t v11 = v10 | v8;
  unint64_t v12 = *(void *)(a1 + 24);
  if (!v9) {
    unint64_t v12 = 0;
  }
  *(void *)((char *)&v20 + 4) = v12;
  unint64_t v13 = v12;
  LODWORD(v20) = 3;
  uint64_t v14 = v20;
  unint64_t v15 = HIDWORD(v12);
  LODWORD(v21) = 1;
  HIDWORD(v21) = v11;
  unint64_t v16 = HIDWORD(v10);
  if (HIDWORD(v12) * HIDWORD(v10) == -1
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  __int16 v17 = *(_WORD *)(a1 + 52);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v14;
  *(_DWORD *)(a2 + 32) = v15;
  *(void *)(a2 + 36) = v21;
  *(_DWORD *)(a2 + 44) = v16;
  *(void *)(a2 + 48) = v13;
  *(void *)(a2 + 56) = v11;
  *(_WORD *)(a2 + 64) = v17;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_215BAA280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_215BAA2CC()
{
  int v0 = sub_215BAA348();
  uint64_t v1 = sub_215BA92B0();
  sub_2158069FC("Attempting to create an ", (uint64_t)v0, (uint64_t)" from an ", (uint64_t)v1, (uint64_t)" but the image is of incompatible format ");
}

std::string *sub_215BAA348()
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889C20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889C20))
  {
    sub_215732BF4(v6, "ImageView");
    uint64_t v1 = sub_215810894();
    sub_215BAA558((uint64_t)v1, (uint64_t)v8);
    unsigned __int8 v2 = sub_2158061A0();
    sub_215BAA558((uint64_t)v2, (uint64_t)&__p);
    sub_21573A150(v5, (uint64_t)v8, 2uLL);
    sub_215E19EAC(v6, (uint64_t *)v5, &stru_267889C08, v3, v4);
    sub_2157352DC(v5);
    if (v11 < 0)
    {
      operator delete(__p);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v7 & 0x80000000) == 0)
        {
LABEL_7:
          __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889C08, &dword_21572C000);
          __cxa_guard_release(&qword_267889C20);
          return &stru_267889C08;
        }
LABEL_10:
        operator delete(v6[0]);
        goto LABEL_7;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v8[0]);
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  return &stru_267889C08;
}

void sub_215BAA4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a17 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
  {
LABEL_4:
    __cxa_guard_abort(&qword_267889C20);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a12);
  __cxa_guard_abort(&qword_267889C20);
  _Unwind_Resume(a1);
}

void sub_215BAA558(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    sub_215738B0C(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  sub_215E13B5C(&__p, "cv3d::kit::img::", 16, "", 0, 1, 1, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_215BAA5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BAA614(_DWORD *a1)
{
  v1[10] = &unk_26C66C328;
  sub_215D92FBC(a1, (uint64_t)v1);
  operator new();
}

void sub_215BAA854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v10);
  sub_215733368((uint64_t)&a10);
  sub_2159009A0(&a9);
  _Unwind_Resume(a1);
}

void sub_215BAA888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BAA89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a18) {
    free(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BAA8B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!*(_DWORD *)(a3 + 32) || !*(_DWORD *)(a3 + 36)) {
    return;
  }
  uint64_t v65 = *(void *)(a3 + 32);
  std::string __p = 0;
  char v63 = 0;
  unsigned int v64 = 0;
  if (!*(unsigned char *)(a4 + 24))
  {
    uint64_t v8 = operator new(0x10uLL);
    *uint64_t v8 = " ";
    v8[1] = "\n";
    std::string __p = v8;
    char v63 = v8 + 2;
    unsigned int v64 = (char *)(v8 + 2);
    uint64_t v61 = 1;
    goto LABEL_70;
  }
  unsigned __int8 v5 = *(void **)(a4 + 8);
  int8x16_t v4 = *(char **)(a4 + 16);
  std::string __p = *(void **)a4;
  uint64_t v6 = __p;
  char v63 = v5;
  unsigned int v64 = v4;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  if (v6 == v5)
  {
    if (v5 >= (void *)v4)
    {
      unint64_t v10 = (v4 - (char *)v5) >> 2;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      if ((unint64_t)(v4 - (char *)v5) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >> 61) {
        sub_215738AD8();
      }
      uint64_t v6 = operator new(8 * v11);
      *uint64_t v6 = " ";
      int8x16_t v4 = (char *)&v6[v11];
      std::string __p = v6;
      unsigned int v64 = v4;
      if (v5) {
        operator delete(v5);
      }
      char v63 = v6 + 1;
      unsigned __int8 v5 = v6 + 1;
      uint64_t v7 = 8;
    }
    else
    {
      *unsigned __int8 v5 = " ";
      uint64_t v6 = v5++;
      char v63 = v5;
      uint64_t v7 = (char *)v5 - (char *)v6;
      if ((char *)v5 - (char *)v6 != 8) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (char *)v5 - (char *)v6;
    if ((char *)v5 - (char *)v6 != 8)
    {
LABEL_10:
      unint64_t v9 = (char *)v5 - (char *)v6;
      uint64_t v61 = v5 - v6 - 1;
      if ((unint64_t)((char *)v5 - (char *)v6) <= 0xF) {
        goto LABEL_42;
      }
      goto LABEL_70;
    }
  }
  if (v5 < (void *)v4)
  {
    *unsigned __int8 v5 = "\n";
    uint64_t v12 = __p;
    unint64_t v13 = v5 + 1;
    goto LABEL_41;
  }
  uint64_t v14 = v7 >> 3;
  if ((v4 - (char *)v6) >> 2 <= (unint64_t)((v7 >> 3) + 1)) {
    uint64_t v15 = v14 + 1;
  }
  else {
    uint64_t v15 = (v4 - (char *)v6) >> 2;
  }
  if ((unint64_t)(v4 - (char *)v6) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >> 61) {
    sub_215738AD8();
  }
  __int16 v17 = operator new(8 * v16);
  uint64_t v12 = &v17[8 * v14];
  uint64_t v18 = &v17[8 * v16];
  *uint64_t v12 = "\n";
  unint64_t v13 = v12 + 1;
  if (v5 != v6)
  {
    unint64_t v19 = (char *)v5 - (char *)v6 - 8;
    if (v19 < 0x58)
    {
      long long v20 = v5;
      goto LABEL_38;
    }
    if ((unint64_t)((char *)v5 - (v7 & 0xFFFFFFFFFFFFFFF8) - v17) < 0x20)
    {
      long long v20 = v5;
      do
      {
LABEL_38:
        uint64_t v27 = *--v20;
        *--uint64_t v12 = v27;
      }
      while (v20 != v6);
      goto LABEL_39;
    }
    uint64_t v21 = (v19 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    long long v20 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v12 = (void *)((char *)v12 - v22);
    std::string::size_type v23 = &v17[8 * v14 - 16];
    std::string::size_type v24 = (long long *)(v5 - 2);
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *(v23 - 1) = *(v24 - 1);
      *std::string::size_type v23 = v26;
      v23 -= 2;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_38;
    }
  }
LABEL_39:
  std::string __p = v12;
  unsigned int v64 = v18;
  if (v6) {
    operator delete(v6);
  }
LABEL_41:
  char v63 = v13;
  uint64_t v6 = v12;
  unsigned __int8 v5 = v13;
  unint64_t v9 = (char *)v13 - (char *)v12;
  uint64_t v61 = v13 - v12 - 1;
  if ((unint64_t)((char *)v13 - (char *)v12) <= 0xF)
  {
LABEL_42:
    char v28 = v6;
    while (v5 < (void *)v64)
    {
      *unsigned __int8 v5 = "\n";
      char v28 = __p;
      unint64_t v29 = v5 + 1;
LABEL_44:
      char v63 = v29;
      unint64_t v9 = (char *)v29 - (char *)v28;
      uint64_t v6 = v28;
      unsigned __int8 v5 = v29;
      if ((unint64_t)((char *)v29 - (char *)v28) >= 0x10) {
        goto LABEL_70;
      }
    }
    unint64_t v30 = v9 >> 3;
    uint64_t v31 = v64 - (char *)v28;
    if ((v64 - (char *)v28) >> 2 <= (v9 >> 3) + 1) {
      uint64_t v32 = v30 + 1;
    }
    else {
      uint64_t v32 = v31 >> 2;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v32;
    }
    if (v33 >> 61) {
      sub_215738AD8();
    }
    size_t v34 = operator new(8 * v33);
    char v28 = &v34[8 * v30];
    *char v28 = "\n";
    unint64_t v29 = v28 + 1;
    if (v5 != v6)
    {
      unint64_t v35 = (char *)v5 - (char *)v6 - 8;
      if (v35 < 0x168)
      {
        uint64_t v36 = v5;
        goto LABEL_67;
      }
      unint64_t v37 = ((char *)(v5 - 1) - (char *)v6) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v38 = (unint64_t)&v34[(v9 & 8) - 8];
      unint64_t v39 = v38 - v37;
      unint64_t v40 = (unint64_t)v5 - v37 - 8;
      BOOL v41 = v39 > v38 || v40 > (unint64_t)(v5 - 1);
      if (v41)
      {
        uint64_t v36 = v5;
        goto LABEL_67;
      }
      if ((unint64_t)((char *)v5 - (v9 & 8) - v34) < 0x20)
      {
        uint64_t v36 = v5;
        do
        {
LABEL_67:
          uint64_t v48 = *--v36;
          *--char v28 = v48;
        }
        while (v36 != v6);
        goto LABEL_68;
      }
      uint64_t v42 = (v35 >> 3) + 1;
      uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v36 = &v5[v43 / 0xFFFFFFFFFFFFFFF8];
      char v28 = (void *)((char *)v28 - v43);
      unint64_t v44 = &v34[8 * v30 - 16];
      unint64_t v45 = (long long *)(v5 - 2);
      uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v47 = *v45;
        *(v44 - 1) = *(v45 - 1);
        *unint64_t v44 = v47;
        v44 -= 2;
        v45 -= 2;
        v46 -= 4;
      }
      while (v46);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_67;
      }
    }
LABEL_68:
    std::string __p = v28;
    unsigned int v64 = &v34[8 * v33];
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_44;
  }
LABEL_70:
  v59[0] = &v60;
  v59[1] = &v65;
  v59[2] = &__p;
  v59[3] = &v61;
  v59[4] = a1;
  uint64_t v60 = 0;
  LOBYTE(v57[0]) = 0;
  unsigned __int8 v66 = -1;
  char v67 = v57;
  char v68 = &v66;
  if (*(_DWORD *)(a3 + 32) && *(_DWORD *)(a3 + 36))
  {
    sub_215BAAEA0((uint64_t)&v67, a3);
    unsigned int v49 = v66;
    uint64_t v50 = a2;
    if (!v66)
    {
      LOBYTE(v51) = 0;
      goto LABEL_77;
    }
  }
  else
  {
    unsigned int v49 = 255;
    uint64_t v50 = a2;
  }
  LOBYTE(v51) = 0;
  do
  {
    LOBYTE(v51) = v51 + 1;
    BOOL v41 = v49 > 9;
    v49 /= 0xAu;
  }
  while (v41);
LABEL_77:
  unsigned int v52 = LOBYTE(v57[0]);
  if (LOBYTE(v57[0]))
  {
    unsigned __int8 v53 = 0;
    do
    {
      ++v53;
      BOOL v41 = v52 > 9;
      v52 /= 0xAu;
    }
    while (v41);
  }
  else
  {
    unsigned __int8 v53 = 0;
  }
  LODWORD(v51) = v51;
  if (v53 > v51) {
    LODWORD(v51) = v53;
  }
  if (v51 <= 1) {
    uint64_t v51 = 1;
  }
  else {
    uint64_t v51 = v51;
  }
  v58[0] = v51;
  v58[1] = 0;
  v57[0] = v50;
  v57[1] = v58;
  char v67 = 0;
  sub_215954574(a1, v50, (unsigned int *)&v67, 1u, v61);
  char v67 = v57;
  char v68 = (unsigned __int8 *)v59;
  std::string v69 = v50;
  if (*(_DWORD *)(a3 + 32) && *(_DWORD *)(a3 + 36)) {
    sub_215BAB0D4((uint64_t)&v67, a3);
  }
  if (__p)
  {
    char v63 = __p;
    operator delete(__p);
  }
}

void sub_215BAAE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (v25) {
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BAAEA0(uint64_t result, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 32);
  int v2 = *(_DWORD *)(a2 + 36);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = (unsigned __int8 **)result;
    int v7 = v2 - 1;
    uint64_t v8 = *(unsigned int *)(a2 + 40);
    uint64_t v9 = *(unsigned int *)(a2 + 44);
    unint64_t v10 = *(unsigned char **)(a2 + 24);
    if (*(unsigned char *)(a2 + 48)) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      uint64_t v12 = *(void *)(a2 + 8);
      unint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void, const char *))(*(void *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      unint64_t v10 = *(unsigned char **)(a2 + 24);
    }
    int v14 = v3 - 1;
    if (v7)
    {
      if (v3 == 1)
      {
        do
        {
          unsigned int v24 = **v6;
          if (v24 <= *v10) {
            LOBYTE(v24) = *v10;
          }
          **uint64_t v6 = v24;
          uint64_t v25 = v6[1];
          unsigned int v26 = *v10;
          if (v26 >= *v25) {
            LOBYTE(v26) = *v25;
          }
          *uint64_t v25 = v26;
          v10 += v9;
          --v7;
        }
        while (v7);
      }
      else
      {
        for (int i = 0; i != v7; ++i)
        {
          int v16 = v3 - 1;
          __int16 v17 = v10;
          do
          {
            unsigned int v18 = **v6;
            if (v18 <= *v17) {
              LOBYTE(v18) = *v17;
            }
            **uint64_t v6 = v18;
            unint64_t v19 = v6[1];
            unsigned int v20 = *v17;
            if (v20 >= *v19) {
              LOBYTE(v20) = *v19;
            }
            *unint64_t v19 = v20;
            v17 += v8;
            --v16;
          }
          while (v16);
          unsigned int v21 = **v6;
          if (v21 <= *v17) {
            LOBYTE(v21) = *v17;
          }
          **uint64_t v6 = v21;
          uint64_t v22 = v6[1];
          unsigned int v23 = *v17;
          if (v23 >= *v22) {
            LOBYTE(v23) = *v22;
          }
          *uint64_t v22 = v23;
          v10 += v9;
        }
      }
    }
    if (v3 != 1)
    {
      do
      {
        unsigned int v27 = **v6;
        if (v27 <= *v10) {
          LOBYTE(v27) = *v10;
        }
        **uint64_t v6 = v27;
        char v28 = v6[1];
        unsigned int v29 = *v10;
        if (v29 >= *v28) {
          LOBYTE(v29) = *v28;
        }
        *char v28 = v29;
        v10 += v8;
        --v14;
      }
      while (v14);
    }
    unsigned int v30 = **v6;
    if (v30 <= *v10) {
      LOBYTE(v30) = *v10;
    }
    **uint64_t v6 = v30;
    uint64_t v31 = v6[1];
    unsigned int v32 = *v10;
    if (v32 >= *v31) {
      LOBYTE(v32) = *v31;
    }
    *uint64_t v31 = v32;
  }
  return result;
}

void sub_215BAB0D4(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 32);
  int v2 = *(_DWORD *)(a2 + 36);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v11[0] = 0;
    v11[1] = v3 - 1;
    int v7 = *(_DWORD *)(a2 + 44);
    void v11[2] = *(_DWORD *)(a2 + 40);
    void v11[3] = v2 - 1;
    v11[4] = v7;
    uint64_t v8 = *(unsigned __int8 **)(a2 + 24);
    if (*(unsigned char *)(a2 + 48) && v8)
    {
      uint64_t v9 = *(void *)(a2 + 8);
      unint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      (*(void (**)(uint64_t, void, const char *))(*(void *)v9 + 88))(v9, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      uint64_t v8 = *(unsigned __int8 **)(a2 + 24);
    }
    char v12 = 0;
    sub_215BAB1DC(v11, (uint64_t)&v12, a1, v8);
  }
}

void sub_215BAB1DC(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  if (a1[3])
  {
    int v7 = 0;
    while (1)
    {
      int v24 = v7;
      uint64_t v25 = a4;
      if (a1[1]) {
        break;
      }
LABEL_3:
      sub_215BAB52C(a3, a4);
      a4 = &v25[a1[4]];
      int v7 = v24 + 1;
      if ((v24 + 1) >= a1[3]) {
        goto LABEL_26;
      }
    }
    int v8 = 0;
    while (1)
    {
      BOOL v11 = **(uint64_t ***)a3;
      uint64_t v12 = **(unsigned __int8 **)(*(void *)a3 + 8);
      int v29 = 0;
      std::to_string(&v30, *a4);
      v31[0] = v28;
      v31[1] = &v30;
      void v31[2] = v28;
      _DWORD v31[3] = &v30;
      v31[4] = &v30;
      if (v29 == -1) {
        sub_215742D4C();
      }
      unsigned int v32 = v31;
      ((void (*)(void **, unsigned char *))off_26C67F688[v29])(&v32, v28);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (v29 == -1) {
        sub_215742D4C();
      }
      v31[0] = &v30;
      ((void (*)(void **__return_ptr, void *, unsigned char *))off_26C67F6D0[v29])(__p, v31, v28);
      if (v29 != -1) {
        ((void (*)(void *, unsigned char *))off_26C67F670[v29])(v31, v28);
      }
      uint64_t v13 = *v11;
      *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 24) = v12;
      *(_DWORD *)((char *)v11 + *(void *)(v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(v13 - 24) + 8) & 0xFFFFFF4F | 0x80;
      if ((v27 & 0x80u) == 0) {
        int v14 = __p;
      }
      else {
        int v14 = (void **)__p[0];
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v15 = v27;
      }
      else {
        uint64_t v15 = (uint64_t)__p[1];
      }
      sub_215731D94(v11, (uint64_t)v14, v15);
      if ((char)v27 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v17 = *(void *)(a3 + 8);
      int v16 = *(void **)(a3 + 16);
      uint64_t v18 = *(void *)(v17 + 32);
      unint64_t v19 = *(unsigned int **)v17;
      unsigned int v20 = *(_DWORD **)(v17 + 8);
      int v21 = **(_DWORD **)v17 + 1;
      **(_DWORD **)uint64_t v17 = v21;
      if (v21 == *v20)
      {
        int v22 = v19[1] + 1;
        *unint64_t v19 = 0;
        v19[1] = v22;
        if (v22 == v20[1]) {
          goto LABEL_8;
        }
        uint64_t v9 = 1;
      }
      else
      {
        uint64_t v9 = 0;
      }
      size_t v10 = strlen(*(const char **)(**(void **)(v17 + 16) + 8 * v9));
      sub_215731D94(v16, *(void *)(**(void **)(v17 + 16) + 8 * v9), v10);
      sub_215954574(v18, v16, *(unsigned int **)v17, v9, **(_DWORD **)(v17 + 24));
LABEL_8:
      a4 += a1[2];
      if (++v8 >= a1[1]) {
        goto LABEL_3;
      }
    }
  }
LABEL_26:
  if (a1[1])
  {
    unsigned int v23 = 0;
    do
    {
      sub_215BAB52C(a3, a4);
      a4 += a1[2];
      ++v23;
    }
    while (v23 < a1[1]);
  }
  sub_215BAB52C(a3, a4);
}

void sub_215BAB4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BAB52C(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  BOOL v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    *BOOL v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1]) {
      return;
    }
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  size_t v16 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v15));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v15), v16);
  sub_215954574(v10, v8, *(unsigned int **)v9, v15, **(_DWORD **)(v9 + 24));
}

void sub_215BAB698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BAB6B4(unsigned __int8 *a1)
{
  int v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  void v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  uint64_t v6 = v5;
  ((void (*)(void **, unsigned char *))off_26C67F688[0])(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 == -1) {
    sub_215742D4C();
  }
  v5[0] = &v4;
  uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_26C67F6D0[v3])(v5, v2);
  if (v3 != -1) {
    return ((uint64_t (*)(void *, unsigned char *))off_26C67F670[v3])(v5, v2);
  }
  return result;
}

void sub_215BAB7A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BAB7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_215742CF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_215BAB7E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!*(_DWORD *)(a3 + 32) || !*(_DWORD *)(a3 + 36)) {
    return;
  }
  uint64_t v65 = *(void *)(a3 + 32);
  std::string __p = 0;
  char v63 = 0;
  unsigned int v64 = 0;
  if (!*(unsigned char *)(a4 + 24))
  {
    int v8 = operator new(0x10uLL);
    *int v8 = " ";
    v8[1] = "\n";
    std::string __p = v8;
    char v63 = v8 + 2;
    unsigned int v64 = (char *)(v8 + 2);
    uint64_t v61 = 1;
    goto LABEL_70;
  }
  uint64_t v5 = *(void **)(a4 + 8);
  std::string v4 = *(char **)(a4 + 16);
  std::string __p = *(void **)a4;
  uint64_t v6 = __p;
  char v63 = v5;
  unsigned int v64 = v4;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  if (v6 == v5)
  {
    if (v5 >= (void *)v4)
    {
      unint64_t v10 = (v4 - (char *)v5) >> 2;
      if (v10 <= 1) {
        unint64_t v10 = 1;
      }
      if ((unint64_t)(v4 - (char *)v5) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 >> 61) {
        sub_215738AD8();
      }
      uint64_t v6 = operator new(8 * v11);
      *uint64_t v6 = " ";
      std::string v4 = (char *)&v6[v11];
      std::string __p = v6;
      unsigned int v64 = v4;
      if (v5) {
        operator delete(v5);
      }
      char v63 = v6 + 1;
      uint64_t v5 = v6 + 1;
      uint64_t v7 = 8;
    }
    else
    {
      *uint64_t v5 = " ";
      uint64_t v6 = v5++;
      char v63 = v5;
      uint64_t v7 = (char *)v5 - (char *)v6;
      if ((char *)v5 - (char *)v6 != 8) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (char *)v5 - (char *)v6;
    if ((char *)v5 - (char *)v6 != 8)
    {
LABEL_10:
      unint64_t v9 = (char *)v5 - (char *)v6;
      uint64_t v61 = v5 - v6 - 1;
      if ((unint64_t)((char *)v5 - (char *)v6) <= 0xF) {
        goto LABEL_42;
      }
      goto LABEL_70;
    }
  }
  if (v5 < (void *)v4)
  {
    *uint64_t v5 = "\n";
    uint64_t v12 = __p;
    int v13 = v5 + 1;
    goto LABEL_41;
  }
  uint64_t v14 = v7 >> 3;
  if ((v4 - (char *)v6) >> 2 <= (unint64_t)((v7 >> 3) + 1)) {
    uint64_t v15 = v14 + 1;
  }
  else {
    uint64_t v15 = (v4 - (char *)v6) >> 2;
  }
  if ((unint64_t)(v4 - (char *)v6) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  if (v16 >> 61) {
    sub_215738AD8();
  }
  uint64_t v17 = operator new(8 * v16);
  uint64_t v12 = &v17[8 * v14];
  unsigned __int8 v18 = &v17[8 * v16];
  *uint64_t v12 = "\n";
  int v13 = v12 + 1;
  if (v5 != v6)
  {
    unint64_t v19 = (char *)v5 - (char *)v6 - 8;
    if (v19 < 0x58)
    {
      unsigned int v20 = v5;
      goto LABEL_38;
    }
    if ((unint64_t)((char *)v5 - (v7 & 0xFFFFFFFFFFFFFFF8) - v17) < 0x20)
    {
      unsigned int v20 = v5;
      do
      {
LABEL_38:
        uint64_t v27 = *--v20;
        *--uint64_t v12 = v27;
      }
      while (v20 != v6);
      goto LABEL_39;
    }
    uint64_t v21 = (v19 >> 3) + 1;
    uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v20 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v12 = (void *)((char *)v12 - v22);
    unsigned int v23 = &v17[8 * v14 - 16];
    int v24 = (long long *)(v5 - 2);
    uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v26 = *v24;
      *(v23 - 1) = *(v24 - 1);
      *unsigned int v23 = v26;
      v23 -= 2;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_38;
    }
  }
LABEL_39:
  std::string __p = v12;
  unsigned int v64 = v18;
  if (v6) {
    operator delete(v6);
  }
LABEL_41:
  char v63 = v13;
  uint64_t v6 = v12;
  uint64_t v5 = v13;
  unint64_t v9 = (char *)v13 - (char *)v12;
  uint64_t v61 = v13 - v12 - 1;
  if ((unint64_t)((char *)v13 - (char *)v12) <= 0xF)
  {
LABEL_42:
    char v28 = v6;
    while (v5 < (void *)v64)
    {
      *uint64_t v5 = "\n";
      char v28 = __p;
      int v29 = v5 + 1;
LABEL_44:
      char v63 = v29;
      unint64_t v9 = (char *)v29 - (char *)v28;
      uint64_t v6 = v28;
      uint64_t v5 = v29;
      if ((unint64_t)((char *)v29 - (char *)v28) >= 0x10) {
        goto LABEL_70;
      }
    }
    unint64_t v30 = v9 >> 3;
    uint64_t v31 = v64 - (char *)v28;
    if ((v64 - (char *)v28) >> 2 <= (v9 >> 3) + 1) {
      uint64_t v32 = v30 + 1;
    }
    else {
      uint64_t v32 = v31 >> 2;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v32;
    }
    if (v33 >> 61) {
      sub_215738AD8();
    }
    size_t v34 = operator new(8 * v33);
    char v28 = &v34[8 * v30];
    *char v28 = "\n";
    int v29 = v28 + 1;
    if (v5 != v6)
    {
      unint64_t v35 = (char *)v5 - (char *)v6 - 8;
      if (v35 < 0x168)
      {
        uint64_t v36 = v5;
        goto LABEL_67;
      }
      unint64_t v37 = ((char *)(v5 - 1) - (char *)v6) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v38 = (unint64_t)&v34[(v9 & 8) - 8];
      unint64_t v39 = v38 - v37;
      unint64_t v40 = (unint64_t)v5 - v37 - 8;
      BOOL v41 = v39 > v38 || v40 > (unint64_t)(v5 - 1);
      if (v41)
      {
        uint64_t v36 = v5;
        goto LABEL_67;
      }
      if ((unint64_t)((char *)v5 - (v9 & 8) - v34) < 0x20)
      {
        uint64_t v36 = v5;
        do
        {
LABEL_67:
          uint64_t v48 = *--v36;
          *--char v28 = v48;
        }
        while (v36 != v6);
        goto LABEL_68;
      }
      uint64_t v42 = (v35 >> 3) + 1;
      uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v36 = &v5[v43 / 0xFFFFFFFFFFFFFFF8];
      char v28 = (void *)((char *)v28 - v43);
      unint64_t v44 = &v34[8 * v30 - 16];
      unint64_t v45 = (long long *)(v5 - 2);
      uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v47 = *v45;
        *(v44 - 1) = *(v45 - 1);
        *unint64_t v44 = v47;
        v44 -= 2;
        v45 -= 2;
        v46 -= 4;
      }
      while (v46);
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_67;
      }
    }
LABEL_68:
    std::string __p = v28;
    unsigned int v64 = &v34[8 * v33];
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_44;
  }
LABEL_70:
  v59[0] = &v60;
  v59[1] = &v65;
  v59[2] = &__p;
  v59[3] = &v61;
  v59[4] = a1;
  uint64_t v60 = 0;
  LOWORD(v57[0]) = 0;
  unsigned __int16 v66 = -1;
  char v67 = v57;
  char v68 = &v66;
  if (*(_DWORD *)(a3 + 32) && *(_DWORD *)(a3 + 36))
  {
    sub_215BABDCC(&v67, a3);
    unsigned int v49 = v66;
    uint64_t v50 = a2;
    if (!v66)
    {
      LOBYTE(v51) = 0;
      goto LABEL_77;
    }
  }
  else
  {
    unsigned int v49 = 0xFFFF;
    uint64_t v50 = a2;
  }
  LOBYTE(v51) = 0;
  do
  {
    LOBYTE(v51) = v51 + 1;
    BOOL v41 = v49 > 9;
    v49 /= 0xAu;
  }
  while (v41);
LABEL_77:
  unsigned int v52 = LOWORD(v57[0]);
  if (LOWORD(v57[0]))
  {
    unsigned __int8 v53 = 0;
    do
    {
      ++v53;
      BOOL v41 = v52 > 9;
      v52 /= 0xAu;
    }
    while (v41);
  }
  else
  {
    unsigned __int8 v53 = 0;
  }
  LODWORD(v51) = v51;
  if (v53 > v51) {
    LODWORD(v51) = v53;
  }
  if (v51 <= 1) {
    uint64_t v51 = 1;
  }
  else {
    uint64_t v51 = v51;
  }
  v58[0] = v51;
  v58[1] = 0;
  v57[0] = v50;
  v57[1] = v58;
  char v67 = 0;
  sub_215954574(a1, v50, (unsigned int *)&v67, 1u, v61);
  char v67 = v57;
  char v68 = (unsigned __int16 *)v59;
  std::string v69 = v50;
  if (*(_DWORD *)(a3 + 32) && *(_DWORD *)(a3 + 36)) {
    sub_215BAC024((uint64_t)&v67, a3);
  }
  if (__p)
  {
    char v63 = __p;
    operator delete(__p);
  }
}

void sub_215BABD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (v25) {
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_215BABDCC(_DWORD *result, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 32);
  int v2 = *(_DWORD *)(a2 + 36);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v6 = (uint64_t)result;
    v11[0] = 0;
    v11[1] = v3 - 1;
    int v7 = *(_DWORD *)(a2 + 44);
    void v11[2] = *(_DWORD *)(a2 + 40);
    void v11[3] = v2 - 1;
    v11[4] = v7;
    int v8 = *(_WORD **)(a2 + 24);
    if (*(unsigned char *)(a2 + 48) && v8)
    {
      uint64_t v9 = *(void *)(a2 + 8);
      unint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      (*(void (**)(uint64_t, void, const char *))(*(void *)v9 + 88))(v9, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      int v8 = *(_WORD **)(a2 + 24);
    }
    char v12 = 0;
    return sub_215BABED4(v11, (uint64_t)&v12, v6, v8);
  }
  return result;
}

_DWORD *sub_215BABED4(_DWORD *result, uint64_t a2, uint64_t a3, _WORD *a4)
{
  int v4 = result[3];
  int v5 = result[1];
  if (!v4)
  {
    int v7 = *(_WORD **)a3;
    uint64_t v6 = *(_WORD **)(a3 + 8);
    if (!v5) {
      goto LABEL_29;
    }
    goto LABEL_17;
  }
  int v7 = *(_WORD **)a3;
  uint64_t v6 = *(_WORD **)(a3 + 8);
  uint64_t v8 = result[4];
  if (v5)
  {
    int v9 = 0;
    uint64_t v10 = 2 * v8;
    uint64_t v11 = 2 * result[2];
    do
    {
      char v12 = a4;
      int v13 = v5;
      do
      {
        unsigned int v14 = (unsigned __int16)*v7;
        if (v14 <= (unsigned __int16)*v12) {
          LOWORD(v14) = *v12;
        }
        *int v7 = v14;
        unsigned int v15 = (unsigned __int16)*v12;
        if (v15 >= (unsigned __int16)*v6) {
          LOWORD(v15) = *v6;
        }
        *uint64_t v6 = v15;
        char v12 = (_WORD *)((char *)v12 + v11);
        --v13;
      }
      while (v13);
      unsigned int v16 = (unsigned __int16)*v7;
      if (v16 <= (unsigned __int16)*v12) {
        LOWORD(v16) = *v12;
      }
      *int v7 = v16;
      unsigned int v17 = (unsigned __int16)*v12;
      if (v17 >= (unsigned __int16)*v6) {
        LOWORD(v17) = *v6;
      }
      *uint64_t v6 = v17;
      a4 = (_WORD *)((char *)a4 + v10);
      ++v9;
    }
    while (v9 != v4);
LABEL_17:
    uint64_t v18 = 2 * result[2];
    do
    {
      unsigned int v19 = (unsigned __int16)*v7;
      if (v19 <= (unsigned __int16)*a4) {
        LOWORD(v19) = *a4;
      }
      *int v7 = v19;
      unsigned int v20 = (unsigned __int16)*a4;
      if (v20 >= (unsigned __int16)*v6) {
        LOWORD(v20) = *v6;
      }
      *uint64_t v6 = v20;
      a4 = (_WORD *)((char *)a4 + v18);
      --v5;
    }
    while (v5);
    goto LABEL_29;
  }
  do
  {
    unsigned int v21 = (unsigned __int16)*v7;
    if (v21 <= (unsigned __int16)*a4) {
      LOWORD(v21) = *a4;
    }
    *int v7 = v21;
    unsigned int v22 = (unsigned __int16)*a4;
    if (v22 >= (unsigned __int16)*v6) {
      LOWORD(v22) = *v6;
    }
    *uint64_t v6 = v22;
    a4 += v8;
    --v4;
  }
  while (v4);
LABEL_29:
  unsigned int v23 = (unsigned __int16)*v7;
  if (v23 <= (unsigned __int16)*a4) {
    LOWORD(v23) = *a4;
  }
  *int v7 = v23;
  unsigned int v24 = (unsigned __int16)*a4;
  if (v24 >= (unsigned __int16)*v6) {
    LOWORD(v24) = *v6;
  }
  *uint64_t v6 = v24;
  return result;
}

void sub_215BAC024(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 32);
  int v2 = *(_DWORD *)(a2 + 36);
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v11[0] = 0;
    v11[1] = v3 - 1;
    int v7 = *(_DWORD *)(a2 + 44);
    void v11[2] = *(_DWORD *)(a2 + 40);
    void v11[3] = v2 - 1;
    v11[4] = v7;
    uint64_t v8 = *(unsigned __int16 **)(a2 + 24);
    if (*(unsigned char *)(a2 + 48) && v8)
    {
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(std::__shared_weak_count **)(a2 + 16);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      (*(void (**)(uint64_t, void, const char *))(*(void *)v9 + 88))(v9, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      uint64_t v8 = *(unsigned __int16 **)(a2 + 24);
    }
    char v12 = 0;
    sub_215BAC12C(v11, (uint64_t)&v12, a1, v8);
  }
}

void sub_215BAC12C(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  if (a1[3])
  {
    int v7 = 0;
    while (1)
    {
      int v24 = v7;
      uint64_t v25 = a4;
      if (a1[1]) {
        break;
      }
LABEL_3:
      sub_215BAC47C(a3, a4);
      a4 = &v25[a1[4]];
      int v7 = v24 + 1;
      if ((v24 + 1) >= a1[3]) {
        goto LABEL_26;
      }
    }
    int v8 = 0;
    while (1)
    {
      uint64_t v11 = **(uint64_t ***)a3;
      uint64_t v12 = **(unsigned __int8 **)(*(void *)a3 + 8);
      int v29 = 0;
      std::to_string(&v30, *a4);
      v31[0] = v28;
      v31[1] = &v30;
      void v31[2] = v28;
      _DWORD v31[3] = &v30;
      v31[4] = &v30;
      if (v29 == -1) {
        sub_215742D4C();
      }
      uint64_t v32 = v31;
      ((void (*)(void **, unsigned char *))off_26C67F688[v29])(&v32, v28);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (v29 == -1) {
        sub_215742D4C();
      }
      v31[0] = &v30;
      ((void (*)(void **__return_ptr, void *, unsigned char *))off_26C67F6D0[v29])(__p, v31, v28);
      if (v29 != -1) {
        ((void (*)(void *, unsigned char *))off_26C67F670[v29])(v31, v28);
      }
      uint64_t v13 = *v11;
      *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 24) = v12;
      *(_DWORD *)((char *)v11 + *(void *)(v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(v13 - 24) + 8) & 0xFFFFFF4F | 0x80;
      if ((v27 & 0x80u) == 0) {
        unsigned int v14 = __p;
      }
      else {
        unsigned int v14 = (void **)__p[0];
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v15 = v27;
      }
      else {
        uint64_t v15 = (uint64_t)__p[1];
      }
      sub_215731D94(v11, (uint64_t)v14, v15);
      if ((char)v27 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v17 = *(void *)(a3 + 8);
      unsigned int v16 = *(void **)(a3 + 16);
      uint64_t v18 = *(void *)(v17 + 32);
      unsigned int v19 = *(unsigned int **)v17;
      unsigned int v20 = *(_DWORD **)(v17 + 8);
      int v21 = **(_DWORD **)v17 + 1;
      **(_DWORD **)uint64_t v17 = v21;
      if (v21 == *v20)
      {
        int v22 = v19[1] + 1;
        *unsigned int v19 = 0;
        v19[1] = v22;
        if (v22 == v20[1]) {
          goto LABEL_8;
        }
        uint64_t v9 = 1;
      }
      else
      {
        uint64_t v9 = 0;
      }
      size_t v10 = strlen(*(const char **)(**(void **)(v17 + 16) + 8 * v9));
      sub_215731D94(v16, *(void *)(**(void **)(v17 + 16) + 8 * v9), v10);
      sub_215954574(v18, v16, *(unsigned int **)v17, v9, **(_DWORD **)(v17 + 24));
LABEL_8:
      a4 += a1[2];
      if (++v8 >= a1[1]) {
        goto LABEL_3;
      }
    }
  }
LABEL_26:
  if (a1[1])
  {
    unsigned int v23 = 0;
    do
    {
      sub_215BAC47C(a3, a4);
      a4 += a1[2];
      ++v23;
    }
    while (v23 < a1[1]);
  }
  sub_215BAC47C(a3, a4);
}

void sub_215BAC408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BAC47C(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAC604(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v18 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v18 & 0x80u) == 0) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned int **)v9;
  uint64_t v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    *uint64_t v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1]) {
      return;
    }
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  size_t v16 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v15));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v15), v16);
  sub_215954574(v10, v8, *(unsigned int **)v9, v15, **(_DWORD **)(v9 + 24));
}

void sub_215BAC5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BAC604(unsigned __int16 *a1)
{
  int v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  void v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  uint64_t v6 = v5;
  ((void (*)(void **, unsigned char *))off_26C67F688[0])(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 == -1) {
    sub_215742D4C();
  }
  v5[0] = &v4;
  uint64_t result = ((uint64_t (*)(void *, unsigned char *))off_26C67F6D0[v3])(v5, v2);
  if (v3 != -1) {
    return ((uint64_t (*)(void *, unsigned char *))off_26C67F670[v3])(v5, v2);
  }
  return result;
}

void sub_215BAC6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BAC70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_215742CF0((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_215BAC730(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!*(_DWORD *)(a3 + 56) || !*(_DWORD *)(a3 + 60)) {
    return;
  }
  uint64_t v5 = *(void *)(a3 + 32);
  char v68 = 0;
  uint64_t v69 = v5;
  int v70 = *(_DWORD *)(a3 + 40);
  std::string __p = 0;
  char v67 = 0;
  if (!*(unsigned char *)(a4 + 24))
  {
    unsigned int v10 = *(_DWORD *)(a1 + 8);
    if (v69 > v10
      || (unsigned int v11 = *(_DWORD *)(a1 + 12), v69 > v11)
      || HIDWORD(v69) > v10
      || HIDWORD(v69) * (int)v69 > v11)
    {
      int v8 = (char *)operator new(0x10uLL);
      uint64_t v7 = v8 + 16;
      *(void *)int v8 = " ";
      *((void *)v8 + 1) = "\n";
    }
    else
    {
      int v8 = (char *)operator new(0x18uLL);
      uint64_t v7 = v8 + 24;
      *(_OWORD *)int v8 = xmmword_26425B1D0;
      *((void *)v8 + 2) = "\n";
    }
    std::string __p = v8;
    char v67 = v7;
    char v68 = v7;
    unint64_t v12 = v7 - v8;
    uint64_t v65 = ((v7 - v8) >> 3) - 1;
    if ((unint64_t)(v7 - v8) <= 0x17) {
      goto LABEL_49;
    }
    goto LABEL_77;
  }
  uint64_t v7 = *(char **)(a4 + 8);
  uint64_t v6 = *(char **)(a4 + 16);
  std::string __p = *(void **)a4;
  int v8 = (char *)__p;
  char v67 = v7;
  char v68 = v6;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  if (v8 == v7)
  {
    if (v7 >= v6)
    {
      unint64_t v13 = (v6 - v7) >> 2;
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      if ((unint64_t)(v6 - v7) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14 >> 61) {
        sub_215738AD8();
      }
      int v8 = (char *)operator new(8 * v14);
      *(void *)int v8 = " ";
      uint64_t v6 = &v8[8 * v14];
      std::string __p = v8;
      char v68 = v6;
      if (v7) {
        operator delete(v7);
      }
      char v67 = v8 + 8;
      uint64_t v7 = v8 + 8;
      uint64_t v9 = 8;
    }
    else
    {
      *(void *)uint64_t v7 = " ";
      int v8 = v7;
      v7 += 8;
      char v67 = v7;
      uint64_t v9 = v7 - v8;
      if (v7 - v8 != 8) {
        goto LABEL_17;
      }
    }
  }
  else
  {
    uint64_t v9 = v7 - v8;
    if (v7 - v8 != 8)
    {
LABEL_17:
      unint64_t v12 = v7 - v8;
      uint64_t v65 = ((v7 - v8) >> 3) - 1;
      if ((unint64_t)(v7 - v8) <= 0x17) {
        goto LABEL_49;
      }
      goto LABEL_77;
    }
  }
  if (v7 < v6)
  {
    *(void *)uint64_t v7 = "\n";
    uint64_t v15 = __p;
    size_t v16 = v7 + 8;
    goto LABEL_48;
  }
  uint64_t v17 = v9 >> 3;
  if ((v6 - v8) >> 2 <= (unint64_t)((v9 >> 3) + 1)) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = (v6 - v8) >> 2;
  }
  if ((unint64_t)(v6 - v8) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v18;
  }
  if (v19 >> 61) {
    sub_215738AD8();
  }
  unsigned int v20 = operator new(8 * v19);
  uint64_t v15 = &v20[8 * v17];
  int v21 = &v20[8 * v19];
  *uint64_t v15 = "\n";
  size_t v16 = v15 + 1;
  if (v7 != v8)
  {
    unint64_t v22 = v7 - v8 - 8;
    if (v22 < 0x58)
    {
      unsigned int v23 = v7;
      goto LABEL_45;
    }
    if ((unint64_t)(&v7[-(v9 & 0xFFFFFFFFFFFFFFF8)] - v20) < 0x20)
    {
      unsigned int v23 = v7;
      do
      {
LABEL_45:
        uint64_t v30 = *((void *)v23 - 1);
        v23 -= 8;
        *--uint64_t v15 = v30;
      }
      while (v23 != v8);
      goto LABEL_46;
    }
    uint64_t v24 = (v22 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v23 = &v7[-v25];
    uint64_t v15 = (void *)((char *)v15 - v25);
    long long v26 = &v20[8 * v17 - 16];
    unsigned __int8 v27 = (long long *)(v7 - 16);
    uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v29 = *v27;
      *(v26 - 1) = *(v27 - 1);
      *long long v26 = v29;
      v26 -= 2;
      v27 -= 2;
      v28 -= 4;
    }
    while (v28);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_45;
    }
  }
LABEL_46:
  std::string __p = v15;
  char v68 = v21;
  if (v8) {
    operator delete(v8);
  }
LABEL_48:
  char v67 = v16;
  int v8 = (char *)v15;
  uint64_t v7 = (char *)v16;
  unint64_t v12 = (char *)v16 - (char *)v15;
  uint64_t v65 = v16 - v15 - 1;
  if ((unint64_t)((char *)v16 - (char *)v15) <= 0x17)
  {
LABEL_49:
    uint64_t v31 = v8;
    while (v7 < v68)
    {
      *(void *)uint64_t v7 = "\n";
      uint64_t v31 = __p;
      uint64_t v32 = v7 + 8;
LABEL_51:
      char v67 = v32;
      unint64_t v12 = (char *)v32 - (char *)v31;
      int v8 = (char *)v31;
      uint64_t v7 = (char *)v32;
      if ((unint64_t)((char *)v32 - (char *)v31) >= 0x18) {
        goto LABEL_77;
      }
    }
    unint64_t v33 = v12 >> 3;
    uint64_t v34 = v68 - (char *)v31;
    if ((v68 - (char *)v31) >> 2 <= (v12 >> 3) + 1) {
      uint64_t v35 = v33 + 1;
    }
    else {
      uint64_t v35 = v34 >> 2;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36 >> 61) {
      sub_215738AD8();
    }
    unint64_t v37 = operator new(8 * v36);
    uint64_t v31 = &v37[8 * v33];
    *uint64_t v31 = "\n";
    uint64_t v32 = v31 + 1;
    if (v7 != v8)
    {
      unint64_t v38 = v7 - v8 - 8;
      if (v38 < 0x168)
      {
        unint64_t v39 = v7;
        goto LABEL_74;
      }
      unint64_t v40 = (v7 - 8 - v8) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v41 = v12 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v42 = (unint64_t)&v37[(v12 & 0xFFFFFFFFFFFFFFF8) - 8];
      unint64_t v43 = v42 - v40;
      unint64_t v44 = (unint64_t)&v7[-v40 - 8];
      BOOL v45 = v43 > v42 || v44 > (unint64_t)(v7 - 8);
      if (v45)
      {
        unint64_t v39 = v7;
        goto LABEL_74;
      }
      if ((unint64_t)(&v7[-v41] - v37) < 0x20)
      {
        unint64_t v39 = v7;
        do
        {
LABEL_74:
          uint64_t v52 = *((void *)v39 - 1);
          v39 -= 8;
          *--uint64_t v31 = v52;
        }
        while (v39 != v8);
        goto LABEL_75;
      }
      uint64_t v46 = (v38 >> 3) + 1;
      uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v39 = &v7[-v47];
      uint64_t v31 = (void *)((char *)v31 - v47);
      uint64_t v48 = &v37[v41 - 16];
      unsigned int v49 = (long long *)(v7 - 16);
      uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v51 = *v49;
        *(v48 - 1) = *(v49 - 1);
        *uint64_t v48 = v51;
        v48 -= 2;
        v49 -= 2;
        v50 -= 4;
      }
      while (v50);
      if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_74;
      }
    }
LABEL_75:
    std::string __p = v31;
    char v68 = &v37[8 * v36];
    if (v8) {
      operator delete(v8);
    }
    goto LABEL_51;
  }
LABEL_77:
  int v64 = 0;
  v62[0] = &v63;
  v62[1] = &v69;
  v62[2] = &__p;
  v62[3] = &v65;
  v62[4] = a1;
  uint64_t v63 = 0;
  LOBYTE(v75[0]) = 0;
  unsigned __int8 v71 = -1;
  uint64_t v72 = v75;
  unint64_t v73 = &v71;
  if (*(_DWORD *)(a3 + 32) && *(_DWORD *)(a3 + 36) && *(_DWORD *)(a3 + 40))
  {
    v60[0] = &v72;
    sub_215BACDA4((uint64_t)v60, a3);
    unsigned __int8 v53 = a2;
    unsigned int v54 = v71;
    if (!v71)
    {
      LOBYTE(v55) = 0;
      goto LABEL_85;
    }
  }
  else
  {
    unsigned int v54 = 255;
    unsigned __int8 v53 = a2;
  }
  LOBYTE(v55) = 0;
  do
  {
    LOBYTE(v55) = v55 + 1;
    BOOL v45 = v54 > 9;
    v54 /= 0xAu;
  }
  while (v45);
LABEL_85:
  unsigned int v56 = LOBYTE(v75[0]);
  if (LOBYTE(v75[0]))
  {
    unsigned __int8 v57 = 0;
    do
    {
      ++v57;
      BOOL v45 = v56 > 9;
      v56 /= 0xAu;
    }
    while (v45);
  }
  else
  {
    unsigned __int8 v57 = 0;
  }
  LODWORD(v55) = v55;
  if (v57 > v55) {
    LODWORD(v55) = v57;
  }
  if (v55 <= 1) {
    uint64_t v55 = 1;
  }
  else {
    uint64_t v55 = v55;
  }
  v61[0] = v55;
  v61[1] = 0;
  v60[0] = v53;
  v60[1] = v61;
  LODWORD(v73) = 0;
  uint64_t v72 = 0;
  sub_215BAD070(a1, v53, (unsigned int *)&v72, 2u, v65);
  uint64_t v72 = v60;
  unint64_t v73 = (unsigned __int8 *)v62;
  unint64_t v74 = v53;
  if (*(_DWORD *)(a3 + 32) && *(_DWORD *)(a3 + 36) && *(_DWORD *)(a3 + 40))
  {
    v75[0] = (uint64_t)&v72;
    sub_215BAD35C(v75, a3);
  }
  if (__p)
  {
    char v67 = __p;
    operator delete(__p);
  }
}

void sub_215BACD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (v24) {
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BACDA4(uint64_t result, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 32);
  int v2 = *(_DWORD *)(a2 + 36);
  int v4 = *(_DWORD *)(a2 + 40);
  if (v3) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && v4 != 0)
  {
    int v8 = (void **)result;
    v15[0] = 0;
    v15[1] = v3 - 1;
    int v9 = *(_DWORD *)(a2 + 48);
    void v15[2] = *(_DWORD *)(a2 + 44);
    void v15[3] = v2 - 1;
    unsigned int v10 = v4 - 1;
    v15[4] = v9;
    unsigned int v16 = v10;
    unsigned int v17 = *(_DWORD *)(a2 + 52);
    unsigned int v11 = *(unsigned char **)(a2 + 24);
    if (*(unsigned char *)(a2 + 72) && v11)
    {
      uint64_t v12 = *(void *)(a2 + 8);
      unint64_t v13 = *(std::__shared_weak_count **)(a2 + 16);
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      (*(void (**)(uint64_t, void, const char *))(*(void *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      unsigned int v11 = *(unsigned char **)(a2 + 24);
      unsigned int v10 = v16;
    }
    v18[0] = 0;
    v18[1] = 0;
    if (v10)
    {
      unsigned int v14 = 0;
      do
      {
        sub_215BACEF8((uint64_t)v15, v18, v8, v11);
        v11 += v17;
        ++v14;
      }
      while (v14 < v16);
    }
    return sub_215BACEF8((uint64_t)v15, v18, v8, v11);
  }
  return result;
}

uint64_t sub_215BACEF8(uint64_t result, uint64_t *a2, void **a3, unsigned char *a4)
{
  *a2 = (uint64_t)a4;
  if (*(_DWORD *)(result + 12))
  {
    unsigned int v4 = 0;
    do
    {
      *a2 = (uint64_t)a4;
      BOOL v5 = (unsigned char **)*a3;
      uint64_t v6 = (unsigned char *)**a3;
      unsigned int v7 = *v6;
      if (v7 <= *a4) {
        LOBYTE(v7) = *a4;
      }
      *uint64_t v6 = v7;
      int v8 = v5[1];
      unsigned int v9 = *a4;
      if (v9 >= *v8) {
        LOBYTE(v9) = *v8;
      }
      *int v8 = v9;
      unsigned int v10 = (unsigned char **)*a3;
      uint64_t v11 = *a2;
      uint64_t v12 = (unsigned char *)**a3;
      unsigned int v13 = *v12;
      if (v13 <= *(unsigned __int8 *)(*a2 + 1)) {
        LOBYTE(v13) = *(unsigned char *)(*a2 + 1);
      }
      *uint64_t v12 = v13;
      unsigned int v14 = v10[1];
      unsigned int v15 = *(unsigned __int8 *)(v11 + 1);
      if (v15 >= *v14) {
        LOBYTE(v15) = *v14;
      }
      *unsigned int v14 = v15;
      unsigned int v16 = (unsigned char **)*a3;
      uint64_t v17 = *a2;
      uint64_t v18 = (unsigned char *)**a3;
      unsigned int v19 = *v18;
      if (v19 <= *(unsigned __int8 *)(*a2 + 2)) {
        LOBYTE(v19) = *(unsigned char *)(*a2 + 2);
      }
      *uint64_t v18 = v19;
      unsigned int v20 = v16[1];
      unsigned int v21 = *(unsigned __int8 *)(v17 + 2);
      if (v21 >= *v20) {
        LOBYTE(v21) = *v20;
      }
      *unsigned int v20 = v21;
      a4 += *(unsigned int *)(result + 16);
      ++v4;
    }
    while (v4 < *(_DWORD *)(result + 12));
  }
  *a2 = (uint64_t)a4;
  unint64_t v22 = (unsigned char **)*a3;
  unsigned int v23 = (unsigned char *)**a3;
  unsigned int v24 = *v23;
  if (v24 <= *a4) {
    LOBYTE(v24) = *a4;
  }
  *unsigned int v23 = v24;
  uint64_t v25 = v22[1];
  unsigned int v26 = *a4;
  if (v26 >= *v25) {
    LOBYTE(v26) = *v25;
  }
  *uint64_t v25 = v26;
  unsigned __int8 v27 = (unsigned char **)*a3;
  uint64_t v28 = *a2;
  long long v29 = (unsigned char *)**a3;
  unsigned int v30 = *v29;
  if (v30 <= *(unsigned __int8 *)(*a2 + 1)) {
    LOBYTE(v30) = *(unsigned char *)(*a2 + 1);
  }
  *long long v29 = v30;
  uint64_t v31 = v27[1];
  unsigned int v32 = *(unsigned __int8 *)(v28 + 1);
  if (v32 >= *v31) {
    LOBYTE(v32) = *v31;
  }
  *uint64_t v31 = v32;
  unint64_t v33 = (unsigned char **)*a3;
  uint64_t v34 = *a2;
  uint64_t v35 = (unsigned char *)**a3;
  unsigned int v36 = *v35;
  if (v36 <= *(unsigned __int8 *)(*a2 + 2)) {
    LOBYTE(v36) = *(unsigned char *)(*a2 + 2);
  }
  *uint64_t v35 = v36;
  unint64_t v37 = v33[1];
  unsigned int v38 = *(unsigned __int8 *)(v34 + 2);
  if (v38 >= *v37) {
    LOBYTE(v38) = *v37;
  }
  *unint64_t v37 = v38;
  return result;
}

void *sub_215BAD070(uint64_t a1, void *a2, unsigned int *a3, unsigned int a4, unsigned int a5)
{
  if (a4 > a5)
  {
    unsigned int v6 = a4;
    uint64_t v9 = a4;
    do
    {
      uint64_t v15 = *(void *)a3;
      unsigned int v16 = a3[2];
      ++*(_DWORD *)((char *)&v15 + v9 * 4);
      sub_215731D94(a2, (uint64_t)"[", 1);
      std::to_string(&v17, v6);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = &v17;
      }
      else {
        uint64_t v11 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      sub_215731D94(a2, (uint64_t)v11, size);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      sub_215731D94(a2, (uint64_t)"d-slice #", 9);
      std::to_string(&v17, a3[v9]);
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v13 = &v17;
      }
      else {
        unsigned int v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v14 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v14 = v17.__r_.__value_.__l.__size_;
      }
      sub_215731D94(a2, (uint64_t)v13, v14);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      sub_215731D94(a2, (uint64_t)": ", 2);
      sub_215BAD22C(a2, a3);
      sub_215731D94(a2, (uint64_t)" to ", 4);
      sub_215BAD22C(a2, (unsigned int *)&v15);
      uint64_t result = sub_215731D94(a2, (uint64_t)"]\n", 2);
      --v6;
      --v9;
    }
    while (v6 > a5);
  }
  return result;
}

void sub_215BAD20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215BAD22C(void *a1, unsigned int *a2)
{
  int v10 = 0;
  sub_2159CA2B0((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1) {
    sub_215742D4C();
  }
  uint64_t v12 = &v11;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C67F6D0[v10])(__p, &v12, v9);
  if (v10 != -1) {
    ((void (*)(char **, unsigned char *))off_26C67F670[v10])(&v12, v9);
  }
  if ((v8 & 0x80u) == 0) {
    int v3 = __p;
  }
  else {
    int v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t result = sub_215731D94(a1, (uint64_t)v3, v4);
  unsigned int v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_215BAD318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BAD334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BAD348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BAD35C(uint64_t *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 36);
  int v3 = *(_DWORD *)(a2 + 40);
  if (*(_DWORD *)(a2 + 32)) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4 && v3 != 0)
  {
    int v8 = v3 - 1;
    uint64_t v9 = *(unsigned int *)(a2 + 48);
    uint64_t v10 = *(unsigned int *)(a2 + 52);
    char v11 = *(unsigned __int8 **)(a2 + 24);
    if (*(unsigned char *)(a2 + 72)) {
      BOOL v12 = v11 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t v13 = *(void *)(a2 + 8);
      std::string::size_type v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      (*(void (**)(uint64_t, void, const char *))(*(void *)v13 + 88))(v13, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/ImageView.h:1297");
      char v11 = *(unsigned __int8 **)(a2 + 24);
    }
    int v15 = v2 - 1;
    if (v8)
    {
      if (v15)
      {
        int v16 = 0;
        std::string v17 = v11 + 2;
        uint64_t v75 = v9;
        uint64_t v71 = v10;
        int v70 = v15;
        while (1)
        {
          int v73 = v16;
          unint64_t v74 = v11;
          uint64_t v72 = v17;
          int v18 = v15;
          do
          {
            unsigned int v21 = (void *)*a1;
            uint64_t v22 = *(void *)*a1;
            unsigned int v23 = *(uint64_t **)v22;
            uint64_t v24 = **(unsigned __int8 **)(v22 + 8);
            int v80 = 0;
            std::to_string(&v81, *(v17 - 2));
            uint64_t v82 = (std::string *)v79;
            char v83 = &v81;
            unint64_t v84 = v79;
            uint64_t v85 = &v81;
            uint64_t v86 = &v81;
            if (v80 == -1) {
              sub_215742D4C();
            }
            v87[0] = &v82;
            ((void (*)(void *, unsigned char *))off_26C67F688[v80])(v87, v79);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
            if (v80 == -1) {
              sub_215742D4C();
            }
            uint64_t v82 = &v81;
            ((void (*)(void **__return_ptr, std::string **, unsigned char *))off_26C67F6D0[v80])(&__p, &v82, v79);
            if (v80 != -1) {
              ((void (*)(std::string **, unsigned char *))off_26C67F670[v80])(&v82, v79);
            }
            uint64_t v25 = *v23;
            *(uint64_t *)((char *)v23 + *(void *)(*v23 - 24) + 24) = v24;
            *(_DWORD *)((char *)v23 + *(void *)(v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v25 - 24) + 8) & 0xFFFFFF4F | 0x80;
            if ((v78 & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            if ((v78 & 0x80u) == 0) {
              uint64_t v27 = v78;
            }
            else {
              uint64_t v27 = v77;
            }
            sub_215731D94(v23, (uint64_t)p_p, v27);
            if ((char)v78 < 0) {
              operator delete(__p);
            }
            uint64_t v29 = v21[1];
            uint64_t v28 = (void *)v21[2];
            uint64_t v30 = *(void *)(v29 + 32);
            uint64_t v31 = *(unsigned int **)v29;
            unsigned int v32 = *(_DWORD **)(v29 + 8);
            int v33 = **(_DWORD **)v29 + 1;
            **(_DWORD **)uint64_t v29 = v33;
            if (v33 == *v32)
            {
              int v34 = v31[1] + 1;
              *uint64_t v31 = 0;
              v31[1] = v34;
              if (v34 == v32[1])
              {
                int v35 = v31[2] + 1;
                v31[1] = 0;
                void v31[2] = v35;
                if (v35 == v32[2]) {
                  goto LABEL_45;
                }
                uint64_t v36 = 2;
              }
              else
              {
                uint64_t v36 = 1;
              }
            }
            else
            {
              uint64_t v36 = 0;
            }
            size_t v37 = strlen(*(const char **)(**(void **)(v29 + 16) + 8 * v36));
            sub_215731D94(v28, *(void *)(**(void **)(v29 + 16) + 8 * v36), v37);
            sub_215BAD070(v30, v28, *(unsigned int **)v29, v36, **(_DWORD **)(v29 + 24));
LABEL_45:
            unsigned int v38 = (void *)*a1;
            uint64_t v39 = *(void *)*a1;
            unint64_t v40 = *(uint64_t **)v39;
            uint64_t v41 = **(unsigned __int8 **)(v39 + 8);
            int v80 = 0;
            std::to_string(&v81, *(v17 - 1));
            uint64_t v82 = (std::string *)v79;
            char v83 = &v81;
            unint64_t v84 = v79;
            uint64_t v85 = &v81;
            uint64_t v86 = &v81;
            if (v80 == -1) {
              sub_215742D4C();
            }
            v87[0] = &v82;
            ((void (*)(void *, unsigned char *))off_26C67F688[v80])(v87, v79);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
            if (v80 == -1) {
              sub_215742D4C();
            }
            uint64_t v82 = &v81;
            ((void (*)(void **__return_ptr, std::string **, unsigned char *))off_26C67F6D0[v80])(&__p, &v82, v79);
            if (v80 != -1) {
              ((void (*)(std::string **, unsigned char *))off_26C67F670[v80])(&v82, v79);
            }
            uint64_t v42 = *v40;
            *(uint64_t *)((char *)v40 + *(void *)(*v40 - 24) + 24) = v41;
            *(_DWORD *)((char *)v40 + *(void *)(v42 - 24) + 8) = *(_DWORD *)((unsigned char *)v40 + *(void *)(v42 - 24) + 8) & 0xFFFFFF4F | 0x80;
            if ((v78 & 0x80u) == 0) {
              unint64_t v43 = &__p;
            }
            else {
              unint64_t v43 = __p;
            }
            if ((v78 & 0x80u) == 0) {
              uint64_t v44 = v78;
            }
            else {
              uint64_t v44 = v77;
            }
            sub_215731D94(v40, (uint64_t)v43, v44);
            if ((char)v78 < 0) {
              operator delete(__p);
            }
            uint64_t v46 = v38[1];
            BOOL v45 = (void *)v38[2];
            uint64_t v47 = *(void *)(v46 + 32);
            uint64_t v48 = *(unsigned int **)v46;
            unsigned int v49 = *(_DWORD **)(v46 + 8);
            int v50 = **(_DWORD **)v46 + 1;
            **(_DWORD **)uint64_t v46 = v50;
            if (v50 == *v49)
            {
              int v51 = v48[1] + 1;
              *uint64_t v48 = 0;
              v48[1] = v51;
              if (v51 == v49[1])
              {
                int v52 = v48[2] + 1;
                v48[1] = 0;
                v48[2] = v52;
                if (v52 == v49[2]) {
                  goto LABEL_66;
                }
                uint64_t v53 = 2;
              }
              else
              {
                uint64_t v53 = 1;
              }
            }
            else
            {
              uint64_t v53 = 0;
            }
            size_t v54 = strlen(*(const char **)(**(void **)(v46 + 16) + 8 * v53));
            sub_215731D94(v45, *(void *)(**(void **)(v46 + 16) + 8 * v53), v54);
            sub_215BAD070(v47, v45, *(unsigned int **)v46, v53, **(_DWORD **)(v46 + 24));
LABEL_66:
            uint64_t v55 = (void *)*a1;
            uint64_t v56 = *(void *)*a1;
            unsigned __int8 v57 = *(uint64_t **)v56;
            uint64_t v58 = **(unsigned __int8 **)(v56 + 8);
            int v80 = 0;
            std::to_string(&v81, *v17);
            uint64_t v82 = (std::string *)v79;
            char v83 = &v81;
            unint64_t v84 = v79;
            uint64_t v85 = &v81;
            uint64_t v86 = &v81;
            if (v80 == -1) {
              sub_215742D4C();
            }
            v87[0] = &v82;
            ((void (*)(void *, unsigned char *))off_26C67F688[v80])(v87, v79);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
            if (v80 == -1) {
              sub_215742D4C();
            }
            uint64_t v82 = &v81;
            ((void (*)(void **__return_ptr, std::string **, unsigned char *))off_26C67F6D0[v80])(&__p, &v82, v79);
            if (v80 != -1) {
              ((void (*)(std::string **, unsigned char *))off_26C67F670[v80])(&v82, v79);
            }
            uint64_t v59 = *v57;
            *(uint64_t *)((char *)v57 + *(void *)(*v57 - 24) + 24) = v58;
            *(_DWORD *)((char *)v57 + *(void *)(v59 - 24) + 8) = *(_DWORD *)((unsigned char *)v57 + *(void *)(v59 - 24) + 8) & 0xFFFFFF4F | 0x80;
            if ((v78 & 0x80u) == 0) {
              uint64_t v60 = &__p;
            }
            else {
              uint64_t v60 = __p;
            }
            if ((v78 & 0x80u) == 0) {
              uint64_t v61 = v78;
            }
            else {
              uint64_t v61 = v77;
            }
            sub_215731D94(v57, (uint64_t)v60, v61);
            if ((char)v78 < 0) {
              operator delete(__p);
            }
            uint64_t v63 = v55[1];
            char v62 = (void *)v55[2];
            uint64_t v64 = *(void *)(v63 + 32);
            uint64_t v65 = *(unsigned int **)v63;
            unsigned __int16 v66 = *(_DWORD **)(v63 + 8);
            int v67 = **(_DWORD **)v63 + 1;
            **(_DWORD **)uint64_t v63 = v67;
            if (v67 != *v66)
            {
              uint64_t v19 = 0;
LABEL_22:
              size_t v20 = strlen(*(const char **)(**(void **)(v63 + 16) + 8 * v19));
              sub_215731D94(v62, *(void *)(**(void **)(v63 + 16) + 8 * v19), v20);
              sub_215BAD070(v64, v62, *(unsigned int **)v63, v19, **(_DWORD **)(v63 + 24));
              goto LABEL_23;
            }
            int v68 = v65[1] + 1;
            *uint64_t v65 = 0;
            v65[1] = v68;
            if (v68 != v66[1])
            {
              uint64_t v19 = 1;
              goto LABEL_22;
            }
            int v69 = v65[2] + 1;
            v65[1] = 0;
            v65[2] = v69;
            if (v69 != v66[2])
            {
              uint64_t v19 = 2;
              goto LABEL_22;
            }
LABEL_23:
            uint64_t v9 = v75;
            v17 += v75;
            --v18;
          }
          while (v18);
          sub_215BADCCC(*a1, v17 - 2);
          sub_215BADCCC(*a1, v17 - 1);
          sub_215BADCCC(*a1, v17);
          char v11 = &v74[v71];
          int v16 = v73 + 1;
          std::string v17 = &v72[v71];
          int v15 = v70;
          if (v73 + 1 == v8) {
            goto LABEL_86;
          }
        }
      }
      do
      {
        sub_215BADCCC(*a1, v11);
        sub_215BADCCC(*a1, v11 + 1);
        sub_215BADCCC(*a1, v11 + 2);
        v11 += v10;
        --v8;
      }
      while (v8);
    }
LABEL_86:
    while (v15)
    {
      sub_215BADCCC(*a1, v11);
      sub_215BADCCC(*a1, v11 + 1);
      sub_215BADCCC(*a1, v11 + 2);
      v11 += v9;
      --v15;
    }
    sub_215BADCCC(*a1, v11);
    sub_215BADCCC(*a1, v11 + 1);
    sub_215BADCCC(*a1, v11 + 2);
  }
}

void sub_215BADBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BADCCC(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = **(uint64_t ***)a1;
  uint64_t v4 = **(unsigned __int8 **)(*(void *)a1 + 8);
  sub_215BAB6B4(a2);
  uint64_t v5 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v19 & 0x80u) == 0) {
    unsigned int v6 = __p;
  }
  else {
    unsigned int v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  sub_215731D94(v3, (uint64_t)v6, v7);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = *(void *)(a1 + 8);
  int v8 = *(void **)(a1 + 16);
  uint64_t v10 = *(void *)(v9 + 32);
  char v11 = *(unsigned int **)v9;
  BOOL v12 = *(_DWORD **)(v9 + 8);
  int v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)uint64_t v9 = v13;
  if (v13 == *v12)
  {
    int v14 = v11[1] + 1;
    *char v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
    {
      int v15 = v11[2] + 1;
      v11[1] = 0;
      void v11[2] = v15;
      if (v15 == v12[2]) {
        return;
      }
      uint64_t v16 = 2;
    }
    else
    {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  size_t v17 = strlen(*(const char **)(**(void **)(v9 + 16) + 8 * v16));
  sub_215731D94(v8, *(void *)(**(void **)(v9 + 16) + 8 * v16), v17);
  sub_215BAD070(v10, v8, *(unsigned int **)v9, v16, **(_DWORD **)(v9 + 24));
}

void sub_215BADE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BADE74(uint64_t a1, int a2)
{
  uint64_t v9 = *(uint64_t **)a1;
  memcpy(__dst, &qword_215EDE610, sizeof(__dst));
  int v4 = *(_DWORD *)((char *)&xmmword_215EDE570 + (((char *)sub_215BAF820(__dst, (uint64_t *)&v9) - (char *)__dst) >> 1));
  __dst[0] = xmmword_215EDE500;
  __dst[1] = unk_215EDE510;
  __dst[2] = xmmword_215EDE520;
  *(void *)&__dst[3] = 0x2600000025;
  if (a2 == 1)
  {
    uint64_t v5 = (char *)&__dst[3] + 8;
    uint64_t v6 = 0;
    switch(v4)
    {
      case 1:
        goto LABEL_16;
      case 2:
        uint64_t v6 = 1;
        goto LABEL_16;
      case 3:
        uint64_t v6 = 2;
        goto LABEL_16;
      case 4:
        uint64_t v6 = 3;
        goto LABEL_16;
      case 5:
        uint64_t v6 = 4;
        goto LABEL_16;
      case 7:
        uint64_t v6 = 5;
        goto LABEL_16;
      case 8:
        uint64_t v6 = 6;
        goto LABEL_16;
      case 21:
        uint64_t v6 = 7;
        goto LABEL_16;
      case 22:
        uint64_t v6 = 8;
        goto LABEL_16;
      case 25:
        uint64_t v6 = 9;
        goto LABEL_16;
      case 31:
        uint64_t v6 = 10;
        goto LABEL_16;
      case 32:
        uint64_t v6 = 11;
        goto LABEL_16;
      case 37:
        uint64_t v6 = 12;
        goto LABEL_16;
      case 38:
        uint64_t v6 = 13;
LABEL_16:
        uint64_t v5 = (char *)__dst + 4 * v6;
        break;
      default:
        break;
    }
    if (v5 - (char *)__dst != 56)
    {
      uint64_t v9 = (uint64_t *)a1;
      sub_215BB1E78(v4, (uint64_t)&v9);
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = &v7;
  sub_215D7A484(v4, (_DWORD **)&v9);
}

void sub_215BAE0AC(uint64_t a1, int a2)
{
  uint64_t v9 = *(uint64_t **)a1;
  memcpy(__dst, &qword_215EDE610, sizeof(__dst));
  int v4 = *(_DWORD *)((char *)&xmmword_215EDE570 + (((char *)sub_215BAF820(__dst, (uint64_t *)&v9) - (char *)__dst) >> 1));
  __dst[0] = xmmword_215EDE538;
  __dst[1] = unk_215EDE548;
  __dst[2] = xmmword_215EDE558;
  *(void *)&__dst[3] = 0x2600000025;
  if (a2 == 1)
  {
    uint64_t v5 = (char *)&__dst[3] + 8;
    uint64_t v6 = 0;
    switch(v4)
    {
      case 1:
        goto LABEL_16;
      case 2:
        uint64_t v6 = 1;
        goto LABEL_16;
      case 3:
        uint64_t v6 = 2;
        goto LABEL_16;
      case 4:
        uint64_t v6 = 3;
        goto LABEL_16;
      case 5:
        uint64_t v6 = 4;
        goto LABEL_16;
      case 7:
        uint64_t v6 = 5;
        goto LABEL_16;
      case 8:
        uint64_t v6 = 6;
        goto LABEL_16;
      case 21:
        uint64_t v6 = 7;
        goto LABEL_16;
      case 22:
        uint64_t v6 = 8;
        goto LABEL_16;
      case 25:
        uint64_t v6 = 9;
        goto LABEL_16;
      case 31:
        uint64_t v6 = 10;
        goto LABEL_16;
      case 32:
        uint64_t v6 = 11;
        goto LABEL_16;
      case 37:
        uint64_t v6 = 12;
        goto LABEL_16;
      case 38:
        uint64_t v6 = 13;
LABEL_16:
        uint64_t v5 = (char *)__dst + 4 * v6;
        break;
      default:
        break;
    }
    if (v5 - (char *)__dst != 56)
    {
      uint64_t v9 = (uint64_t *)a1;
      sub_215BB5368(v4, (uint64_t)&v9);
    }
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = &v7;
  sub_215D7A484(v4, (_DWORD **)&v9);
}

void sub_215BAE2E4()
{
  int v0 = &unk_26C665E60;
  sub_2159AF3B0();
}

void sub_215BAE3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11)
  {
    if (!atomic_fetch_add(&a11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BAE400(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v24 = &unk_26C65F5B0;
  sub_215BB62B0(a2, (uint64_t)&v25);
  if ((*(void *)&a3 & 0xFF0000) == 0)
  {
    LOWORD(a3) = 1;
    BOOL v12 = v26;
    if (!v26) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (!sub_215BAF528(v27, (unsigned __int16)a3, v6, v7, v8, v9, v10, v11, v19)
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/Serialization.cpp", 218, (uint64_t)"CanSerialize(to_serialize.RuntimeFormat(), *op_format)", 54, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  BOOL v12 = v26;
  if (v26)
  {
LABEL_7:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_9:
  *(_WORD *)a1 = a3;
  sub_215BB62B0(a2, (uint64_t)&v20);
  uint64_t v13 = v22;
  v28[6] = xmmword_215EDE5D0;
  v28[7] = unk_215EDE5E0;
  v28[8] = xmmword_215EDE5F0;
  v28[9] = unk_215EDE600;
  v28[2] = xmmword_215EDE590;
  void v28[3] = unk_215EDE5A0;
  v28[4] = xmmword_215EDE5B0;
  v28[5] = unk_215EDE5C0;
  v28[0] = xmmword_215EDE570;
  v28[1] = unk_215EDE580;
  int v14 = (char *)sub_215BAFBE8(v28, v23);
  if (v14 != (char *)&v29)
  {
    *(void *)(a1 + 8) = *(uint64_t *)((char *)&qword_215EDE610 + 2 * (v14 - (char *)v28));
    *(void *)(a1 + 16) = v13;
    int v15 = v21;
    if (!v21) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/Serialization.cpp", 166, (uint64_t)"maybe_format", 12, (uint64_t)"Format is not serializable. Must be a non-dynamic format.", 57, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v13;
  int v15 = v21;
  if (v21)
  {
LABEL_14:
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_16:
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_26C665E60;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v16 = *(_OWORD *)(a2 + 24);
  long long v17 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 86) = *(void *)(a2 + 54);
  *(_OWORD *)(a1 + 72) = v17;
  *(_OWORD *)(a1 + 56) = v16;
  *(_DWORD *)(a1 + 96) = 1;
  return a1;
}

void sub_215BAE6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215822608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BAE6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215BAE6D4(_DWORD *a1, _DWORD *a2)
{
  sub_215B9D3B4((uint64_t)a1, &v15);
  sub_215B9D3B4((uint64_t)a2, &v14);
  uint64_t v4 = a1[12];
  if (v4 != a2[12]) {
    goto LABEL_17;
  }
  if (a1[6]) {
    BOOL v5 = a1[7] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = v5;
  if (a2[6])
  {
    BOOL v7 = a2[7] == 0;
    if (((v6 ^ v7) & 1) == 0)
    {
      if ((v6 & v7) == 1) {
        goto LABEL_11;
      }
LABEL_16:
      uint64_t v10 = sub_215D3CC24(v4, a1, a2);
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v10 = 0;
    goto LABEL_18;
  }
  if ((v6 & 1) == 0) {
    goto LABEL_17;
  }
  if ((v6 & 1) != 1) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v8 = *((void *)a1 + 3);
  uint64_t v9 = *((void *)a2 + 3);
  uint64_t v10 = v8 == v9 && HIDWORD(v8) == HIDWORD(v9);
LABEL_18:
  uint64_t v11 = v14;
  uint64_t v14 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return v10;
}

void sub_215BAE810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    uint64_t v11 = a10;
    if (!a10) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v11 = a10;
    if (!a10) {
      goto LABEL_3;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BAE8A4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v24 = &unk_26C65F5B0;
  sub_215BB62B0(a2, (uint64_t)&v25);
  if ((*(void *)&a3 & 0xFF0000) == 0)
  {
    LOWORD(a3) = 1;
    uint64_t v12 = v26;
    if (!v26) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  if (!sub_215BAF528(v27, (unsigned __int16)a3, v6, v7, v8, v9, v10, v11, v19)
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/Serialization.cpp", 218, (uint64_t)"CanSerialize(to_serialize.RuntimeFormat(), *op_format)", 54, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  uint64_t v12 = v26;
  if (v26)
  {
LABEL_7:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_9:
  *(_WORD *)a1 = a3;
  sub_215BB62B0(a2, (uint64_t)&v20);
  uint64_t v13 = v22;
  v28[6] = xmmword_215EDE5D0;
  v28[7] = unk_215EDE5E0;
  v28[8] = xmmword_215EDE5F0;
  v28[9] = unk_215EDE600;
  v28[2] = xmmword_215EDE590;
  void v28[3] = unk_215EDE5A0;
  v28[4] = xmmword_215EDE5B0;
  v28[5] = unk_215EDE5C0;
  v28[0] = xmmword_215EDE570;
  v28[1] = unk_215EDE580;
  uint64_t v14 = (char *)sub_215BAFBE8(v28, v23);
  if (v14 != (char *)&v29)
  {
    *(void *)(a1 + 8) = *(uint64_t *)((char *)&qword_215EDE610 + 2 * (v14 - (char *)v28));
    *(void *)(a1 + 16) = v13;
    uint64_t v15 = v21;
    if (!v21) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/Serialization.cpp", 166, (uint64_t)"maybe_format", 12, (uint64_t)"Format is not serializable. Must be a non-dynamic format.", 57, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v13;
  uint64_t v15 = v21;
  if (v21)
  {
LABEL_14:
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
LABEL_16:
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_26C665E60;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v16 = *(_OWORD *)(a2 + 24);
  long long v17 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 86) = *(void *)(a2 + 54);
  *(_OWORD *)(a1 + 72) = v17;
  *(_OWORD *)(a1 + 56) = v16;
  *(_DWORD *)(a1 + 96) = 1;
  return a1;
}

void sub_215BAEB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215822608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BAEB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215BAEB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 16);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    int v12 = *(_DWORD *)(a2 + 48);
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    int v12 = *(_DWORD *)(a2 + 48);
  }
  uint64_t v13 = (uint64_t *)(a2 + 24);
  int v26 = v12;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if ((*(void *)&v8 & 0xFF0000) != 0) {
      goto LABEL_7;
    }
LABEL_12:
    LOWORD(v8) = 1;
    if (!v11) {
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if ((a3 & 0xFF0000) == 0) {
    goto LABEL_12;
  }
LABEL_7:
  if (!sub_215BAF528(v26, (unsigned __int16)v8, a3, a4, a5, a6, a7, a8, v25)
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/Serialization.cpp", 218, (uint64_t)"CanSerialize(to_serialize.RuntimeFormat(), *op_format)", 54, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  if (v11)
  {
LABEL_13:
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_15:
  v27[7] = unk_215EDE5E0;
  v27[8] = xmmword_215EDE5F0;
  v27[9] = unk_215EDE600;
  _OWORD v27[2] = xmmword_215EDE590;
  void v27[3] = unk_215EDE5A0;
  v27[4] = xmmword_215EDE5B0;
  *(_WORD *)a1 = v8;
  int v14 = *(_DWORD *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 24);
  v27[5] = unk_215EDE5C0;
  long long v27[6] = xmmword_215EDE5D0;
  v27[0] = xmmword_215EDE570;
  v27[1] = unk_215EDE580;
  long long v16 = (char *)sub_215BAFBE8(v27, v14);
  if (v16 == (char *)&v28)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/src/Serialization.cpp", 166, (uint64_t)"maybe_format", 12, (uint64_t)"Format is not serializable. Must be a non-dynamic format.", 57, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = *(uint64_t *)((char *)&qword_215EDE610 + 2 * (v16 - (char *)v27));
  }
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v15;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_26C65F5B0;
  uint64_t v18 = *(void *)(a2 + 8);
  uint64_t v19 = *(std::__shared_weak_count **)(a2 + 16);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v20 = *(void *)(a2 + 40);
    int v21 = *(_DWORD *)(a2 + 48);
    __int16 v22 = *(_WORD *)(a2 + 52);
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v20 = *(void *)(a2 + 40);
    int v21 = *(_DWORD *)(a2 + 48);
    __int16 v22 = *(_WORD *)(a2 + 52);
  }
  *(void *)(a1 + 40) = v18;
  *(void *)(a1 + 48) = v19;
  uint64_t v23 = *v13;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 56) = v23;
  *(void *)(a1 + 72) = v20;
  *(_DWORD *)(a1 + 80) = v21;
  *(_WORD *)(a1 + 84) = v22;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_215BAEEBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215822608((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BAEED0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 96);
  if (v2)
  {
    if (v2 != 1) {
      sub_215742D4C();
    }
    *(void *)a2 = &unk_26C65F5B0;
    sub_215BB64E4(a1 + 32, a2 + 8);
  }
  else
  {
    *(void *)a2 = &unk_26C65F5B0;
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *(void *)(a1 + 72);
      int v6 = *(_DWORD *)(a1 + 80);
      __int16 v7 = *(_WORD *)(a1 + 84);
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 72);
      int v6 = *(_DWORD *)(a1 + 80);
      __int16 v7 = *(_WORD *)(a1 + 84);
    }
    *(void *)(a2 + 8) = v3;
    *(void *)(a2 + 16) = v4;
    *(void *)(a2 + 24) = *(void *)(a1 + 56);
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 64);
    *(void *)(a2 + 40) = v5;
    *(_DWORD *)(a2 + 48) = v6;
    *(_WORD *)(a2 + 52) = v7;
    if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_215BAEFFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 96);
  if (v3 == 1)
  {
    *(void *)a2 = &unk_26C665E60;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 72);
    *(void *)(a2 + 54) = *(void *)(a1 + 86);
    return;
  }
  if (v3) {
    sub_215742D4C();
  }
  long long v16 = &unk_26C65F5B0;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *(void *)(a1 + 72);
    int v7 = *(_DWORD *)(a1 + 80);
    __int16 v8 = *(_WORD *)(a1 + 84);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 72);
    int v7 = *(_DWORD *)(a1 + 80);
    __int16 v8 = *(_WORD *)(a1 + 84);
  }
  uint64_t v17 = v4;
  uint64_t v18 = v5;
  uint64_t v19 = *(void *)(a1 + 56);
  int v20 = *(_DWORD *)(a1 + 64);
  uint64_t v21 = v6;
  int v22 = v7;
  __int16 v23 = v8;
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    *(void *)a2 = &unk_26C665E60;
    uint64_t v9 = a2 + 8;
    uint64_t v10 = v17;
    if (v17) {
      goto LABEL_11;
    }
LABEL_19:
    v24[0] = &v25;
    v24[1] = &v16;
    sub_215D9CBBC(v22, (uint64_t)v24, v9);
    int v12 = v18;
    if (!v18) {
      return;
    }
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  *(void *)a2 = &unk_26C665E60;
  uint64_t v9 = a2 + 8;
  uint64_t v10 = v17;
  if (!v17) {
    goto LABEL_19;
  }
LABEL_11:
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    uint64_t v10 = v17;
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v10 + 32))(v24, v10);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v24[0] + 48))(v24[0]);
  if (v24[0]) {
    operator new();
  }
  int v13 = v22;
  __int16 v14 = v23;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v15 = v19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v11;
  *(_DWORD *)(a2 + 56) = v13;
  *(_WORD *)(a2 + 60) = v14;
  int v12 = v18;
  if (v18)
  {
LABEL_22:
    if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_215BAF378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BAF38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17 = a16;
  a16 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  sub_215822608((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_215BAF3D0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 != *a2 || *((void *)a1 + 1) != *((void *)a2 + 1) || *((void *)a1 + 2) != *((void *)a2 + 2)) {
    return 0;
  }
  sub_215BAEED0((uint64_t)a1, (uint64_t)v9);
  sub_215BAEED0((uint64_t)a2, (uint64_t)v7);
  uint64_t v3 = sub_215BAE6D4(v9, v7);
  uint64_t v5 = v8;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = v10;
  if (!v10 || atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return v3;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return v3;
}

void sub_215BAF4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_215BAF514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_215822608((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_215BAF528(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  switch(a2)
  {
    case 1:
      return a1 != 0;
    case 2:
      if (a1 == 1) {
        goto LABEL_11;
      }
      if (a1 != 2) {
        return 0;
      }
      goto LABEL_6;
    case 3:
      return a1 == 21;
    case 4:
      uint64_t v11 = (char *)&v16;
      uint64_t v12 = 0;
      switch(a1)
      {
        case 1:
          goto LABEL_21;
        case 2:
          uint64_t v12 = 1;
          goto LABEL_21;
        case 21:
          uint64_t v12 = 2;
          goto LABEL_21;
        case 22:
          uint64_t v12 = 3;
          goto LABEL_21;
        case 29:
          uint64_t v12 = 4;
          goto LABEL_21;
        case 30:
          uint64_t v12 = 5;
LABEL_21:
          uint64_t v11 = (char *)&v15[v12];
          break;
        default:
          return v11 - (char *)v15 != 24;
      }
      return v11 - (char *)v15 != 24;
    case 5:
      if (a1 == 1)
      {
LABEL_11:
        uint64_t v10 = 0;
        return ((unint64_t)v15 | (4 * v10)) - (void)v15 != 8;
      }
      if (a1 == 21)
      {
LABEL_6:
        uint64_t v10 = 1;
        return ((unint64_t)v15 | (4 * v10)) - (void)v15 != 8;
      }
      return 0;
    case 6:
      int v13 = (char *)&a9;
      uint64_t v14 = 0;
      switch(a1)
      {
        case 1:
          goto LABEL_33;
        case 2:
          uint64_t v14 = 1;
          goto LABEL_33;
        case 3:
          uint64_t v14 = 2;
          goto LABEL_33;
        case 4:
          uint64_t v14 = 3;
          goto LABEL_33;
        case 21:
          uint64_t v14 = 4;
          goto LABEL_33;
        case 22:
          uint64_t v14 = 5;
          goto LABEL_33;
        case 23:
          uint64_t v14 = 6;
          goto LABEL_33;
        case 24:
          uint64_t v14 = 7;
          goto LABEL_33;
        case 29:
          uint64_t v14 = 8;
          goto LABEL_33;
        case 30:
          uint64_t v14 = 9;
          goto LABEL_33;
        case 31:
          uint64_t v14 = 10;
          goto LABEL_33;
        case 32:
          uint64_t v14 = 11;
LABEL_33:
          int v13 = (char *)&v15[v14];
          break;
        default:
          return v13 - (char *)v15 != 48;
      }
      return v13 - (char *)v15 != 48;
    default:
      return 0;
  }
}

void *sub_215BAF820(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*result != *a2)
  {
    if (result[1] == v2)
    {
      ++result;
    }
    else if (result[2] == v2)
    {
      result += 2;
    }
    else if (result[3] == v2)
    {
      result += 3;
    }
    else if (result[4] == v2)
    {
      result += 4;
    }
    else if (result[5] == v2)
    {
      result += 5;
    }
    else if (result[6] == v2)
    {
      result += 6;
    }
    else if (result[7] == v2)
    {
      result += 7;
    }
    else if (result[8] == v2)
    {
      result += 8;
    }
    else if (result[9] == v2)
    {
      result += 9;
    }
    else if (result[10] == v2)
    {
      result += 10;
    }
    else if (result[11] == v2)
    {
      result += 11;
    }
    else if (result[12] == v2)
    {
      result += 12;
    }
    else if (result[13] == v2)
    {
      result += 13;
    }
    else if (result[14] == v2)
    {
      result += 14;
    }
    else if (result[15] == v2)
    {
      result += 15;
    }
    else if (result[16] == v2)
    {
      result += 16;
    }
    else if (result[17] == v2)
    {
      result += 17;
    }
    else if (result[18] == v2)
    {
      result += 18;
    }
    else if (result[19] == v2)
    {
      result += 19;
    }
    else if (result[20] == v2)
    {
      result += 20;
    }
    else if (result[21] == v2)
    {
      result += 21;
    }
    else if (result[22] == v2)
    {
      result += 22;
    }
    else if (result[23] == v2)
    {
      result += 23;
    }
    else if (result[24] == v2)
    {
      result += 24;
    }
    else if (result[25] == v2)
    {
      result += 25;
    }
    else if (result[26] == v2)
    {
      result += 26;
    }
    else if (result[27] == v2)
    {
      result += 27;
    }
    else if (result[28] == v2)
    {
      result += 28;
    }
    else if (result[29] == v2)
    {
      result += 29;
    }
    else if (result[30] == v2)
    {
      result += 30;
    }
    else if (result[31] == v2)
    {
      result += 31;
    }
    else if (result[32] == v2)
    {
      result += 32;
    }
    else if (result[33] == v2)
    {
      result += 33;
    }
    else if (result[34] == v2)
    {
      result += 34;
    }
    else if (result[35] == v2)
    {
      result += 35;
    }
    else if (result[36] == v2)
    {
      result += 36;
    }
    else if (result[37] == v2)
    {
      result += 37;
    }
    else if (result[38] == v2)
    {
      result += 38;
    }
    else if (result[39] == v2)
    {
      result += 39;
    }
    else
    {
      result += 40;
    }
  }
  return result;
}

_DWORD *sub_215BAFBE8(_DWORD *a1, int a2)
{
  uint64_t v2 = a1 + 40;
  if (*a1 == a2)
  {
    uint64_t v3 = 0;
    return &a1[v3];
  }
  if (a1[1] == a2)
  {
    uint64_t v3 = 1;
    return &a1[v3];
  }
  if (a1[2] == a2)
  {
    uint64_t v3 = 2;
    return &a1[v3];
  }
  if (a1[3] == a2)
  {
    uint64_t v3 = 3;
    return &a1[v3];
  }
  if (a1[4] == a2)
  {
    uint64_t v3 = 4;
    return &a1[v3];
  }
  if (a1[5] == a2)
  {
    uint64_t v3 = 5;
    return &a1[v3];
  }
  if (a1[6] == a2)
  {
    uint64_t v3 = 6;
    return &a1[v3];
  }
  if (a1[7] == a2)
  {
    uint64_t v3 = 7;
    return &a1[v3];
  }
  if (a1[8] == a2)
  {
    uint64_t v3 = 8;
    return &a1[v3];
  }
  if (a1[9] == a2)
  {
    uint64_t v3 = 9;
    return &a1[v3];
  }
  if (a1[10] == a2)
  {
    uint64_t v3 = 10;
    return &a1[v3];
  }
  if (a1[11] == a2)
  {
    uint64_t v3 = 11;
    return &a1[v3];
  }
  if (a1[12] == a2)
  {
    uint64_t v3 = 12;
    return &a1[v3];
  }
  if (a1[13] == a2)
  {
    uint64_t v3 = 13;
    return &a1[v3];
  }
  if (a1[14] == a2)
  {
    uint64_t v3 = 14;
    return &a1[v3];
  }
  if (a1[15] == a2)
  {
    uint64_t v3 = 15;
    return &a1[v3];
  }
  if (a1[16] == a2)
  {
    uint64_t v3 = 16;
    return &a1[v3];
  }
  if (a1[17] == a2)
  {
    uint64_t v3 = 17;
    return &a1[v3];
  }
  if (a1[18] == a2)
  {
    uint64_t v3 = 18;
    return &a1[v3];
  }
  if (a1[19] == a2)
  {
    uint64_t v3 = 19;
    return &a1[v3];
  }
  if (a1[20] == a2)
  {
    uint64_t v3 = 20;
    return &a1[v3];
  }
  if (a1[21] == a2)
  {
    uint64_t v3 = 21;
    return &a1[v3];
  }
  if (a1[22] == a2)
  {
    uint64_t v3 = 22;
    return &a1[v3];
  }
  if (a1[23] == a2)
  {
    uint64_t v3 = 23;
    return &a1[v3];
  }
  if (a1[24] == a2)
  {
    uint64_t v3 = 24;
    return &a1[v3];
  }
  if (a1[25] == a2)
  {
    uint64_t v3 = 25;
    return &a1[v3];
  }
  if (a1[26] == a2)
  {
    uint64_t v3 = 26;
    return &a1[v3];
  }
  if (a1[27] == a2)
  {
    uint64_t v3 = 27;
    return &a1[v3];
  }
  if (a1[28] == a2)
  {
    uint64_t v3 = 28;
    return &a1[v3];
  }
  if (a1[29] == a2)
  {
    uint64_t v3 = 29;
    return &a1[v3];
  }
  if (a1[30] == a2)
  {
    uint64_t v3 = 30;
    return &a1[v3];
  }
  if (a1[31] == a2)
  {
    uint64_t v3 = 31;
    return &a1[v3];
  }
  if (a1[32] == a2)
  {
    uint64_t v3 = 32;
    return &a1[v3];
  }
  if (a1[33] == a2)
  {
    uint64_t v3 = 33;
    return &a1[v3];
  }
  if (a1[34] == a2)
  {
    uint64_t v3 = 34;
    return &a1[v3];
  }
  if (a1[35] == a2)
  {
    uint64_t v3 = 35;
    return &a1[v3];
  }
  if (a1[36] == a2)
  {
    uint64_t v3 = 36;
    return &a1[v3];
  }
  if (a1[37] == a2)
  {
    uint64_t v3 = 37;
    return &a1[v3];
  }
  if (a1[38] == a2)
  {
    uint64_t v3 = 38;
    return &a1[v3];
  }
  if (a1[39] == a2)
  {
    uint64_t v3 = 39;
    return &a1[v3];
  }
  return v2;
}

void sub_215BAFF14(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  memcpy(__dst, &qword_215EDE610, sizeof(__dst));
  sub_215BAF820(__dst, &v3);
  LODWORD(__dst[3]) = 0;
  sub_215806C64();
}

void sub_215BB0054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BB0070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215BB0084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_215BB0098(uint64_t *a1, _WORD *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678903E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678903E8))
  {
    sub_215BB0344();
  }
  int v22 = 0;
  size_t v23 = 0;
  uint64_t v24 = 0;
  sub_215A9B3F0(a1, (uint64_t)&v22);
  uint64_t v4 = qword_267890408;
  if (!qword_267890408) {
    goto LABEL_43;
  }
  int v5 = SHIBYTE(v24);
  uint64_t v6 = v22;
  if (v24 >= 0) {
    int v7 = &v22;
  }
  else {
    int v7 = (void **)v22;
  }
  if (v24 >= 0) {
    size_t v8 = HIBYTE(v24);
  }
  else {
    size_t v8 = v23;
  }
  uint64_t v9 = &qword_267890408;
  do
  {
    while (1)
    {
      int v10 = *(char *)(v4 + 55);
      uint64_t v11 = v10 >= 0 ? (const void *)(v4 + 32) : *(const void **)(v4 + 32);
      size_t v12 = v10 >= 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
      size_t v13 = v8 >= v12 ? v12 : v8;
      int v14 = memcmp(v11, v7, v13);
      if (v14) {
        break;
      }
      if (v12 < v8) {
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v9 = (uint64_t *)v4;
      uint64_t v4 = *(void *)v4;
      if (!v4) {
        goto LABEL_27;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_12:
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4);
LABEL_27:
  if (v9 == &qword_267890408) {
    goto LABEL_43;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    uint64_t v16 = v9 + 4;
  }
  else {
    uint64_t v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= v8) {
    size_t v18 = v8;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v7, v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_43:
    __cxa_allocate_exception(0x10uLL);
    sub_215BB0734((uint64_t)&v21, (const char *)&v22);
  }
  if (v8 < v17) {
    goto LABEL_43;
  }
LABEL_39:
  *a2 = *((_WORD *)v9 + 28);
  if (v5 < 0) {
    operator delete(v6);
  }
  return a1;
}

void sub_215BB02DC(_Unwind_Exception *a1)
{
}

void sub_215BB02F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BB0344()
{
  qword_267890408 = 0;
  qword_267890410 = 0;
  qword_267890400 = (uint64_t)&qword_267890408;
  sub_2159A6140();
}

void sub_215BB069C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BB0708(uint64_t a1)
{
  return a1;
}

void sub_215BB0734(uint64_t a1, const char *a2)
{
  int v4 = 0;
  sub_215806F18(v3, "invalid serialization format type string ");
  int v5 = v3;
  uint64_t v6 = a2;
  int v7 = v3;
  size_t v8 = a2;
  uint64_t v9 = a2;
  if (v4 != -1)
  {
    int v10 = &v5;
    ((void (*)(void **, _DWORD *))off_26C67F728[v4])(&v10, v3);
    int v5 = v3;
    uint64_t v6 = ", expected one of ";
    int v7 = v3;
    size_t v8 = ", expected one of ";
    uint64_t v9 = ", expected one of ";
    if (v4 != -1)
    {
      int v10 = &v5;
      ((void (*)(void **, _DWORD *))off_26C67F740[v4])(&v10, v3);
      int v5 = v3;
      uint64_t v6 = "{";
      int v7 = v3;
      size_t v8 = "{";
      uint64_t v9 = "{";
      if (v4 != -1)
      {
        int v10 = &v5;
        ((void (*)(void **, _DWORD *))off_26C67F770[v4])(&v10, v3);
        sub_2159A6140();
      }
      sub_215742D4C();
    }
    sub_215742D4C();
  }
  sub_215742D4C();
}

void sub_215BB0AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB0AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB0AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB0AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB0B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_215BB0B14(uint64_t *a1, void *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678903F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678903F0))
  {
    sub_215BB0DAC();
  }
  uint64_t v24 = 0;
  size_t v25 = 0;
  uint64_t v26 = 0;
  sub_215A9B3F0(a1, (uint64_t)&v24);
  uint64_t v4 = qword_267890420;
  if (!qword_267890420) {
    goto LABEL_43;
  }
  int v5 = SHIBYTE(v26);
  uint64_t v6 = v24;
  if (v26 >= 0) {
    int v7 = &v24;
  }
  else {
    int v7 = (void **)v24;
  }
  if (v26 >= 0) {
    size_t v8 = HIBYTE(v26);
  }
  else {
    size_t v8 = v25;
  }
  uint64_t v9 = &qword_267890420;
  do
  {
    while (1)
    {
      int v10 = *(char *)(v4 + 55);
      uint64_t v11 = v10 >= 0 ? (const void *)(v4 + 32) : *(const void **)(v4 + 32);
      size_t v12 = v10 >= 0 ? *(unsigned __int8 *)(v4 + 55) : *(void *)(v4 + 40);
      size_t v13 = v8 >= v12 ? v12 : v8;
      int v14 = memcmp(v11, v7, v13);
      if (v14) {
        break;
      }
      if (v12 < v8) {
        goto LABEL_12;
      }
LABEL_10:
      uint64_t v9 = (uint64_t *)v4;
      uint64_t v4 = *(void *)v4;
      if (!v4) {
        goto LABEL_27;
      }
    }
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_10;
    }
LABEL_12:
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4);
LABEL_27:
  if (v9 == &qword_267890420) {
    goto LABEL_43;
  }
  int v15 = *((char *)v9 + 55);
  if (v15 >= 0) {
    uint64_t v16 = v9 + 4;
  }
  else {
    uint64_t v16 = (const void *)v9[4];
  }
  if (v15 >= 0) {
    size_t v17 = *((unsigned __int8 *)v9 + 55);
  }
  else {
    size_t v17 = v9[5];
  }
  if (v17 >= v8) {
    size_t v18 = v8;
  }
  else {
    size_t v18 = v17;
  }
  int v19 = memcmp(v7, v16, v18);
  if (v19)
  {
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_43:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    v22[0] = 40;
    v22[1] = (uint64_t)&qword_215EDE610;
    sub_215BB118C((uint64_t)&v23, (const char *)&v24, v22);
    std::logic_error::logic_error(exception, &v23);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  if (v8 < v17) {
    goto LABEL_43;
  }
LABEL_39:
  *a2 = v9[7];
  if (v5 < 0) {
    operator delete(v6);
  }
  return a1;
}

void sub_215BB0D44(_Unwind_Exception *a1)
{
}

void sub_215BB0D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215BB0DAC()
{
  qword_267890420 = 0;
  qword_267890428 = 0;
  qword_267890418 = (uint64_t)&qword_267890420;
  sub_2159A63A4();
}

void sub_215BB10F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215BB1160(uint64_t a1)
{
  return a1;
}

uint64_t sub_215BB118C(uint64_t a1, const char *a2, uint64_t *a3)
{
  int v7 = 0;
  sub_2159564A8(v6, "invalid image format type string ");
  size_t v8 = (void **)v6;
  uint64_t v9 = a2;
  int v10 = v6;
  uint64_t v11 = a2;
  size_t v12 = a2;
  if (v7 == -1) {
    sub_215742D4C();
  }
  size_t v13 = &v8;
  ((void (*)(void **, _DWORD *))off_26C67F728[v7])(&v13, v6);
  size_t v8 = (void **)v6;
  uint64_t v9 = ", expected one of ";
  int v10 = v6;
  uint64_t v11 = ", expected one of ";
  size_t v12 = ", expected one of ";
  if (v7 == -1) {
    sub_215742D4C();
  }
  size_t v13 = &v8;
  ((void (*)(void **, _DWORD *))off_26C67F740[v7])(&v13, v6);
  if (*a3 > 0)
  {
    size_t v8 = (void **)v6;
    uint64_t v9 = "{";
    int v10 = v6;
    uint64_t v11 = "{";
    size_t v12 = "{";
    if (v7 != -1)
    {
      size_t v13 = &v8;
      ((void (*)(void **, _DWORD *))off_26C67F770[v7])(&v13, v6);
      sub_2159A63A4();
    }
LABEL_11:
    sub_215742D4C();
  }
  size_t v8 = (void **)v6;
  uint64_t v9 = "{}";
  int v10 = v6;
  uint64_t v11 = "{}";
  size_t v12 = "{}";
  if (v7 == -1) {
    goto LABEL_11;
  }
  size_t v13 = &v8;
  ((void (*)(void **, _DWORD *))off_26C67F758[v7])(&v13, v6);
  if (v7 == -1) {
    sub_215742D4C();
  }
  size_t v8 = &v13;
  uint64_t result = ((uint64_t (*)(void ***, _DWORD *))off_26C67F710[v7])(&v8, v6);
  if (v7 != -1) {
    return ((uint64_t (*)(void ***, _DWORD *))off_26C67F6F8[v7])(&v8, v6);
  }
  return result;
}

void sub_215BB1434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB1448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB145C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB1470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB1484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB1498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215BB14AC(int a1)
{
  if ((a1 - 2) >= 5)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_215BB1594();
  }
  return (unsigned __int16)(a1 - 2) + 1;
}

void sub_215BB155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void sub_215BB1594()
{
  v0[6] = 0;
  sub_215B9F1CC(v0, "Invalid serialization format type: ");
  sub_2159A6140();
}

void sub_215BB1644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB1658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB166C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB1680(const void *a1, uint64_t a2)
{
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C67F798, 0);
  if (v4)
  {
    uint64_t v16 = v4;
    sub_215BB69D0(*(_DWORD *)(a2 + 56), (uint64_t *)&v16, a2);
  }
  else
  {
    int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
    if (v5)
    {
      uint64_t v16 = v5;
      sub_215BD07CC(*(_DWORD *)(a2 + 56), (uint64_t *)&v16, a2);
    }
    else
    {
      uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C680E28, 0);
      if (v6)
      {
        uint64_t v16 = v6;
        sub_215BD8100(*(_DWORD *)(a2 + 56), (uint64_t *)&v16, a2);
      }
      else
      {
        int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C680E70, 0);
        if (v7)
        {
          uint64_t v16 = v7;
          sub_215BDFA34(*(_DWORD *)(a2 + 56), &v16, a2);
        }
        else
        {
          size_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
          if (v8)
          {
            uint64_t v16 = v8;
            sub_215BE9BF4(*(_DWORD *)(a2 + 56), &v16, a2);
          }
          else
          {
            uint64_t v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C680EB8, 0);
            if (v9)
            {
              uint64_t v16 = v9;
              sub_215BF3DB4(*(_DWORD *)(a2 + 56), &v16, a2);
            }
            else
            {
              int v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C680EF0, 0);
              if (v10)
              {
                uint64_t v16 = v10;
                sub_215BFDF74(*(_DWORD *)(a2 + 56), &v16, a2);
              }
              else
              {
                uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
                if (v11)
                {
                  uint64_t v16 = v11;
                  sub_215C08134(*(_DWORD *)(a2 + 56), &v16, a2);
                }
                else
                {
                  size_t v12 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C680F28, 0);
                  if (v12)
                  {
                    uint64_t v16 = v12;
                    sub_215C122F4(*(_DWORD *)(a2 + 56), &v16, a2);
                  }
                  else
                  {
                    size_t v13 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C680F70, 0);
                    if (v13)
                    {
                      uint64_t v16 = v13;
                      sub_215C1C4B4(*(_DWORD *)(a2 + 56), (uint64_t *)&v16, a2);
                    }
                    else
                    {
                      int v14 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
                      if (v14)
                      {
                        uint64_t v16 = v14;
                        sub_215C23CA8(*(_DWORD *)(a2 + 56), (uint64_t *)&v16, a2);
                      }
                      else
                      {
                        int v15 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C680FB8, 0);
                        if (v15)
                        {
                          uint64_t v16 = v15;
                          sub_215C2B49C(*(_DWORD *)(a2 + 56), (uint64_t *)&v16, a2);
                        }
                        else
                        {
                          uint64_t v16 = a1;
                          sub_215C32C90(*(_DWORD *)(a2 + 56), (uint64_t *)&v16, a2);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_215BB1A7C(const void *a1, uint64_t a2)
{
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C680FF0, 0);
  if (v4)
  {
    uint64_t v16 = v4;
    sub_215C3AFA0(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
  }
  else
  {
    int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
    if (v5)
    {
      uint64_t v16 = v5;
      sub_215C52758(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
    }
    else
    {
      uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C681028, 0);
      if (v6)
      {
        uint64_t v16 = v6;
        sub_215C5AFB8(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
      }
      else
      {
        int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C681060, 0);
        if (v7)
        {
          uint64_t v16 = v7;
          sub_215C63818(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
        }
        else
        {
          size_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
          if (v8)
          {
            uint64_t v16 = v8;
            sub_215C6D4C4(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
          }
          else
          {
            uint64_t v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C681098, 0);
            if (v9)
            {
              uint64_t v16 = v9;
              sub_215C77170(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
            }
            else
            {
              int v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6810D0, 0);
              if (v10)
              {
                uint64_t v16 = v10;
                sub_215C80E1C(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
              }
              else
              {
                uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
                if (v11)
                {
                  uint64_t v16 = v11;
                  sub_215C8AAC8(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
                }
                else
                {
                  size_t v12 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C681108, 0);
                  if (v12)
                  {
                    uint64_t v16 = v12;
                    sub_215C94774(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
                  }
                  else
                  {
                    size_t v13 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C681140, 0);
                    if (v13)
                    {
                      uint64_t v16 = v13;
                      sub_215C9E420(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
                    }
                    else
                    {
                      int v14 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
                      if (v14)
                      {
                        uint64_t v16 = v14;
                        sub_215CA66C0(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
                      }
                      else
                      {
                        int v15 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C681178, 0);
                        if (v15)
                        {
                          uint64_t v16 = v15;
                          sub_215CAE960(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
                        }
                        else
                        {
                          uint64_t v16 = (void *)a1;
                          sub_215CB6C00(*(_DWORD *)(a2 + 48), (uint64_t *)&v16, a2);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_215BB1E78(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66AF40;
      sub_215BB2DC0((uint64_t)&v4, &v2);
    case 2:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B038;
      sub_215BB3068((uint64_t)&v4, &v2);
    case 3:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B130;
      sub_215BB3310((uint64_t)&v4, &v2);
    case 4:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B228;
      sub_215BB35B8((uint64_t)&v4, &v2);
    case 5:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B320;
      sub_215BB3860((uint64_t)&v4, &v2);
    case 7:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B418;
      sub_215BB3B14((uint64_t)&v4, &v2);
    case 8:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B510;
      sub_215BB3DC8((uint64_t)&v4, &v2);
    case 21:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B608;
      sub_215BB407C((uint64_t)&v4, &v2);
    case 22:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B700;
      sub_215BB4330((uint64_t)&v4, &v2);
    case 25:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B7F8;
      sub_215BB45E4((uint64_t)&v4, &v2);
    case 31:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B8F0;
      sub_215BB4898((uint64_t)&v4, &v2);
    case 32:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B9E8;
      sub_215BB4B4C((uint64_t)&v4, &v2);
    case 37:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66BAE0;
      sub_215BB4E00((uint64_t)&v4, &v2);
    case 38:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66BBD8;
      sub_215BB50B4((uint64_t)&v4, &v2);
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215BB2B24(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2B48(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2B6C(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2B90(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2BB4(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2BD8(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2BFC(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2C20(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2C44(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2C68(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2C8C(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2CB0(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2CD4(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2CF8(_Unwind_Exception *a1)
{
  sub_215733368(v2 - 112);
  sub_215733368(v2 - 96);
  sub_215733368(v1);
  _Unwind_Resume(a1);
}

void sub_215BB2DC0(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB2FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB3004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_2159318B8(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB3068(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB3298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB32AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_21593293C(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB3310(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB3540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB3554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_21593391C(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB35B8(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB37E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB37FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_21593490C(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB3860(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB3A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB3AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_2159358EC(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB3B14(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB3D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB3D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_215936A08(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB3DC8(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB4004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB4018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_215937B24(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB407C(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB42B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB42CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_215938C40(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB4330(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB4580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_215939ED0(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB45E4(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB4820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB4834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_21593B178(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB4898(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB4AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB4AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_21593C330(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB4B4C(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB4D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB4D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_21593D44C(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB4E00(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB503C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB5050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_21593E604(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB50B4(uint64_t a1, _DWORD *a2)
{
}

void sub_215BB52F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215BB5304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  sub_215733368(v11);
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215733368((uint64_t)&a10);
  sub_21593F7BC(&a9);
  _Unwind_Resume(a1);
}

void sub_215BB5368(int a1, uint64_t a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66AF40;
      sub_215BB2DC0((uint64_t)&v4, &v2);
    case 2:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B038;
      sub_215BB3068((uint64_t)&v4, &v2);
    case 3:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B130;
      sub_215BB3310((uint64_t)&v4, &v2);
    case 4:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B228;
      sub_215BB35B8((uint64_t)&v4, &v2);
    case 5:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B320;
      sub_215BB3860((uint64_t)&v4, &v2);
    case 7:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B418;
      sub_215BB3B14((uint64_t)&v4, &v2);
    case 8:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B510;
      sub_215BB3DC8((uint64_t)&v4, &v2);
    case 21:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B608;
      sub_215BB407C((uint64_t)&v4, &v2);
    case 22:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B700;
      sub_215BB4330((uint64_t)&v4, &v2);
    case 25:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B7F8;
      sub_215BB45E4((uint64_t)&v4, &v2);
    case 31:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B8F0;
      sub_215BB4898((uint64_t)&v4, &v2);
    case 32:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66B9E8;
      sub_215BB4B4C((uint64_t)&v4, &v2);
    case 37:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66BAE0;
      sub_215BB4E00((uint64_t)&v4, &v2);
    case 38:
      uint64_t v2 = *(void *)(*(void *)a2 + 8);
      uint64_t v3 = &unk_26C66BBD8;
      sub_215BB50B4((uint64_t)&v4, &v2);
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}