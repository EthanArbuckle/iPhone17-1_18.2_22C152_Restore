void sub_215A0FBE4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_215731D80(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215A0FC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[3] = *MEMORY[0x263EF8340];
  sub_215DEB804(a2);
  v9 = "version";
  uint64_t v10 = 7;
  LODWORD(v11[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v5) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, v11);
  LODWORD(v9) = *(_DWORD *)a3;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t *, void, void))(a3 + 8);
  uint64_t v7 = a3 + 8;
  v6 = v8;
  uint64_t v10 = 0;
  v11[0] = 0;
  if (v8) {
    v6(1, v7, &v10, 0, 0);
  }
  sub_215A0FE0C(a2, (uint64_t)&v9);
}

void sub_215A0FDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0FE0C(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v2 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "camera_type";
    *(void *)(a1 + 80) = 11;
    if (!v2) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v3 = a2;
  sub_215A10324();
}

void sub_215A10324()
{
  int v0 = 0;
  sub_215A0DC50();
}

void sub_215A103EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A10408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1041C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A10430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DEB804(a2);
  uint64_t v10 = (uint64_t)"version";
  uint64_t v11 = 7;
  int v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEC344(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEC344(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 88);
  *(void *)(a2 + 72) = "focal_length";
  *(void *)(a2 + 80) = 12;
  if (!v6) {
    *(unsigned char *)(a2 + 88) = 1;
  }
LABEL_7:
  uint64_t v10 = 2;
  uint64_t v11 = a3;
  sub_215DED67C(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "principal_point";
    *(void *)(a2 + 80) = 15;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v10 = 2;
  uint64_t v11 = a3 + 8;
  sub_215DED67C(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "image_size";
    *(void *)(a2 + 80) = 10;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v10 = 2;
  uint64_t v11 = a3 + 16;
  sub_215DECE1C(a2, (uint64_t)&v10);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v9 - 8);
  *(void *)(a2 + 56) = v9 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void sub_215A105C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DEB804(a2);
  uint64_t v10 = (uint64_t)"version";
  uint64_t v11 = 7;
  int v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEC344(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEC344(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 88);
  *(void *)(a2 + 72) = "focal_length";
  *(void *)(a2 + 80) = 12;
  if (!v6) {
    *(unsigned char *)(a2 + 88) = 1;
  }
LABEL_7:
  uint64_t v10 = 2;
  uint64_t v11 = a3;
  sub_215DEDAA0(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "principal_point";
    *(void *)(a2 + 80) = 15;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v10 = 2;
  uint64_t v11 = a3 + 16;
  sub_215DEDAA0(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "image_size";
    *(void *)(a2 + 80) = 10;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v10 = 2;
  uint64_t v11 = a3 + 32;
  sub_215DECE1C(a2, (uint64_t)&v10);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v9 - 8);
  *(void *)(a2 + 56) = v9 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void sub_215A10750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DEB804(a2);
  uint64_t v11 = (uint64_t)"version";
  uint64_t v12 = 7;
  int v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEC344(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEC344(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 88);
  *(void *)(a2 + 72) = "focal_length";
  *(void *)(a2 + 80) = 12;
  if (!v6) {
    *(unsigned char *)(a2 + 88) = 1;
  }
LABEL_7:
  uint64_t v11 = 2;
  uint64_t v12 = a3;
  sub_215DED67C(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "principal_point";
    *(void *)(a2 + 80) = 15;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 2;
  uint64_t v12 = a3 + 8;
  sub_215DED67C(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "distortion_coeff";
    *(void *)(a2 + 80) = 16;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 5;
  uint64_t v12 = a3 + 16;
  sub_215DED67C(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v9 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "image_size";
    *(void *)(a2 + 80) = 10;
    if (!v9) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 2;
  uint64_t v12 = a3 + 36;
  sub_215DECE1C(a2, (uint64_t)&v11);
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v10 - 8);
  *(void *)(a2 + 56) = v10 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void sub_215A10928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DEB804(a2);
  uint64_t v11 = (uint64_t)"version";
  uint64_t v12 = 7;
  int v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEC344(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEC344(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 88);
  *(void *)(a2 + 72) = "focal_length";
  *(void *)(a2 + 80) = 12;
  if (!v6) {
    *(unsigned char *)(a2 + 88) = 1;
  }
LABEL_7:
  uint64_t v11 = 2;
  uint64_t v12 = a3;
  sub_215DEDAA0(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "principal_point";
    *(void *)(a2 + 80) = 15;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 2;
  uint64_t v12 = a3 + 16;
  sub_215DEDAA0(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "distortion_coeff";
    *(void *)(a2 + 80) = 16;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 5;
  uint64_t v12 = a3 + 32;
  sub_215DEDAA0(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v9 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "image_size";
    *(void *)(a2 + 80) = 10;
    if (!v9) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 2;
  uint64_t v12 = a3 + 72;
  sub_215DECE1C(a2, (uint64_t)&v11);
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v10 - 8);
  *(void *)(a2 + 56) = v10 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void *sub_215A10B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  int v11 = *(_DWORD *)a3;
  int v6 = *(void (**)(uint64_t, uint64_t, void *, void, void))(a3 + 8);
  uint64_t v4 = a3 + 8;
  int v5 = v6;
  v12[0] = 0;
  v12[1] = 0;
  if (v6) {
    v5(1, v4, v12, 0, 0);
  }
  sub_215A10C50(a2, &v11);
  if (v12[0]) {
    ((void (*)(void, void *, void, void, void))v12[0])(0, v12, 0, 0, 0);
  }
  char v7 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    int v8 = *(void **)(a2 + 24);
    LOBYTE(v11) = *(unsigned char *)(a2 + 32);
    sub_215731D94(v8, (uint64_t)&v11, 1);
  }
  int v9 = *(void **)(a2 + 24);
  LOBYTE(v11) = v7;
  result = sub_215731D94(v9, (uint64_t)&v11, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A10C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A10C50(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void **)(a1 + 24);
    char v110 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)&v110, 1);
  }
  uint64_t result = std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  int v6 = *a2;
  if (!(!v8 & v7))
  {
    switch(v6)
    {
      case 0:
        v15 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        v14 = a2 + 2;
        int v13 = v15;
        if (!v15) {
          goto LABEL_106;
        }
        uint64_t v16 = v13(3, v14, 0, &unk_26C6765E0, &unk_215ED368C);
        goto LABEL_15;
      case 1:
        v19 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        v18 = a2 + 2;
        v17 = v19;
        if (!v19) {
          goto LABEL_106;
        }
        uint64_t v20 = v17(3, v18, 0, &unk_26C676630, &unk_215ED3760);
        goto LABEL_32;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return result;
      case 10:
        v23 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        v22 = a2 + 2;
        v21 = v23;
        if (!v23) {
          goto LABEL_106;
        }
        uint64_t v16 = v21(3, v22, 0, &unk_26C676680, &unk_215ED3834);
LABEL_15:
        if (!v16) {
          goto LABEL_106;
        }
        if (*(void *)(a1 + 40))
        {
          v24 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v24, (uint64_t)&v110, 1);
        }
        std::ostream::operator<<();
        uint64_t v25 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v25 + 1;
        if (v25 != -1)
        {
          v26 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v26, (uint64_t)&v110, 1);
        }
        *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
        std::ostream::operator<<();
        uint64_t v27 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v27 + 1;
        if (v27 != -1)
        {
          v28 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v28, (uint64_t)&v110, 1);
        }
        *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
        std::ostream::operator<<();
        uint64_t v29 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v29 + 1;
        if (v29 != -1)
        {
          v30 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v30, (uint64_t)&v110, 1);
        }
        *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
        std::ostream::operator<<();
        uint64_t v31 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v31 + 1;
        if (v31 != -1)
        {
          v32 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v32, (uint64_t)&v110, 1);
        }
        *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
        std::ostream::operator<<();
        uint64_t v33 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v33 + 1;
        if (v33 != -1)
        {
          v34 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v34, (uint64_t)&v110, 1);
        }
        std::ostream::operator<<();
        uint64_t v35 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v35 + 1;
        if (v35 == -1) {
          goto LABEL_103;
        }
        goto LABEL_102;
      case 11:
        v38 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        v37 = a2 + 2;
        v36 = v38;
        if (!v38) {
          goto LABEL_106;
        }
        uint64_t v20 = v36(3, v37, 0, &unk_26C6766D0, &unk_215ED3908);
LABEL_32:
        if (!v20) {
          goto LABEL_106;
        }
        if (*(void *)(a1 + 40))
        {
          v39 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v39, (uint64_t)&v110, 1);
        }
        std::ostream::operator<<();
        uint64_t v40 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v40 + 1;
        if (v40 != -1)
        {
          v41 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v41, (uint64_t)&v110, 1);
        }
        *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
        std::ostream::operator<<();
        uint64_t v42 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v42 + 1;
        if (v42 != -1)
        {
          v43 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v43, (uint64_t)&v110, 1);
        }
        *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
        std::ostream::operator<<();
        uint64_t v44 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v44 + 1;
        if (v44 != -1)
        {
          v45 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v45, (uint64_t)&v110, 1);
        }
        *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
        std::ostream::operator<<();
        uint64_t v46 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v46 + 1;
        if (v46 != -1)
        {
          v47 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v47, (uint64_t)&v110, 1);
        }
        *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
        std::ostream::operator<<();
        uint64_t v48 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v48 + 1;
        if (v48 != -1)
        {
          v49 = *(void **)(a1 + 24);
          char v110 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v49, (uint64_t)&v110, 1);
        }
        std::ostream::operator<<();
        uint64_t v50 = *(void *)(a1 + 40);
        *(void *)(a1 + 40) = v50 + 1;
        if (v50 == -1) {
          goto LABEL_103;
        }
        goto LABEL_102;
      default:
        JUMPOUT(0);
    }
  }
  switch(v6)
  {
    case 'd':
      int v11 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
      uint64_t v10 = a2 + 2;
      int v9 = v11;
      if (!v11) {
        goto LABEL_106;
      }
      uint64_t v12 = v9(3, v10, 0, &unk_26C676720, &unk_215ED39E0);
      goto LABEL_51;
    case 'e':
      v53 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
      v52 = a2 + 2;
      v51 = v53;
      if (!v53) {
        goto LABEL_106;
      }
      uint64_t v54 = v51(3, v52, 0, &unk_26C676770, &unk_215ED3AB8);
      goto LABEL_78;
    case 'n':
      v57 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
      v56 = a2 + 2;
      v55 = v57;
      if (!v57) {
        goto LABEL_106;
      }
      uint64_t v12 = v55(3, v56, 0, &unk_26C6767C0, &unk_215ED3B90);
LABEL_51:
      if (!v12) {
        goto LABEL_106;
      }
      if (*(void *)(a1 + 40))
      {
        v58 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v58, (uint64_t)&v110, 1);
      }
      std::ostream::operator<<();
      uint64_t v59 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v59 + 1;
      if (v59 != -1)
      {
        v60 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v60, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v61 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v61 + 1;
      if (v61 != -1)
      {
        v62 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v62, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v63 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v63 + 1;
      if (v63 != -1)
      {
        v64 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v64, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v65 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v65 + 1;
      if (v65 != -1)
      {
        v66 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v66, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v67 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v67 + 1;
      if (v67 != -1)
      {
        v68 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v68, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v69 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v69 + 1;
      if (v69 != -1)
      {
        v70 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v70, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v71 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v71 + 1;
      if (v71 != -1)
      {
        v72 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v72, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v73 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v73 + 1;
      if (v73 != -1)
      {
        v74 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v74, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v75 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v75 + 1;
      if (v75 != -1)
      {
        v76 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v76, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v77 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v77 + 1;
      if (v77 != -1)
      {
        v78 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v78, (uint64_t)&v110, 1);
      }
      std::ostream::operator<<();
      uint64_t v79 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v79 + 1;
      if (v79 == -1) {
        goto LABEL_103;
      }
      goto LABEL_102;
    case 'o':
      v82 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
      v81 = a2 + 2;
      v80 = v82;
      if (!v82) {
        goto LABEL_106;
      }
      uint64_t v54 = v80(3, v81, 0, &unk_26C676810, &unk_215ED3C68);
LABEL_78:
      if (!v54) {
LABEL_106:
      }
        sub_215A0E034();
      if (*(void *)(a1 + 40))
      {
        v83 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v83, (uint64_t)&v110, 1);
      }
      std::ostream::operator<<();
      uint64_t v84 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v84 + 1;
      if (v84 != -1)
      {
        v85 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v85, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v86 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v86 + 1;
      if (v86 != -1)
      {
        v87 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v87, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v88 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v88 + 1;
      if (v88 != -1)
      {
        v89 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v89, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v90 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v90 + 1;
      if (v90 != -1)
      {
        v91 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v91, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v92 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v92 + 1;
      if (v92 != -1)
      {
        v93 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v93, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v94 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v94 + 1;
      if (v94 != -1)
      {
        v95 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v95, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v96 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v96 + 1;
      if (v96 != -1)
      {
        v97 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v97, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v98 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v98 + 1;
      if (v98 != -1)
      {
        v99 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v99, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v100 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v100 + 1;
      if (v100 != -1)
      {
        v101 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v101, (uint64_t)&v110, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v102 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v102 + 1;
      if (v102 != -1)
      {
        v103 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v103, (uint64_t)&v110, 1);
      }
      std::ostream::operator<<();
      uint64_t v104 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v104 + 1;
      if (v104 != -1)
      {
LABEL_102:
        v105 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v105, (uint64_t)&v110, 1);
      }
LABEL_103:
      std::ostream::operator<<();
      uint64_t v106 = *(void *)(a1 + 40);
      char v107 = *(unsigned char *)(a1 + 34);
      *(void *)(a1 + 40) = v106 + 1;
      if (v106 != -1)
      {
        v108 = *(void **)(a1 + 24);
        char v110 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v108, (uint64_t)&v110, 1);
      }
      v109 = *(void **)(a1 + 24);
      char v110 = v107;
      uint64_t result = (uint64_t)sub_215731D94(v109, (uint64_t)&v110, 1);
      ++*(void *)(a1 + 40);
      return result;
    default:
      return result;
  }
}

char *sub_215A119E0(uint64_t a1, void *a2, int *a3)
{
  v10[4] = *MEMORY[0x263EF8340];
  sub_215D02034(a2);
  int v9 = *a3;
  char v7 = (void (*)(uint64_t, int *, void *, void, void))*((void *)a3 + 1);
  int v6 = a3 + 2;
  int v5 = v7;
  v10[0] = 0;
  v10[1] = 0;
  if (v7) {
    v5(1, v6, v10, 0, 0);
  }
  uint64_t result = sub_215A11B20((uint64_t)a2, (uint64_t)&v9);
  if (v10[0]) {
    uint64_t result = (char *)((uint64_t (*)(void, void *, void, void, void))v10[0])(0, v10, 0, 0, 0);
  }
  *(void *)(*(void *)(a2[7] - 8) + a2[3] + 10) = a2[4] - (*(void *)(a2[7] - 8) + a2[3]) - 18;
  a2[7] -= 8;
  return result;
}

void sub_215A11AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

char *sub_215A11B20(uint64_t a1, uint64_t a2)
{
  int __src = *(_DWORD *)a2;
  uint64_t v4 = a1 + 24;
  uint64_t result = sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v53, 4);
  int v6 = *(_DWORD *)a2;
  if (!v8 & v7)
  {
    switch(v6)
    {
      case 'd':
        int v11 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v10 = a2 + 8;
        int v9 = v11;
        if (!v11) {
          goto LABEL_30;
        }
        uint64_t v12 = v9(3, v10, 0, &unk_26C676720, &unk_215ED39E0);
        goto LABEL_23;
      case 'e':
        v39 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v38 = a2 + 8;
        v37 = v39;
        if (!v39) {
          goto LABEL_30;
        }
        uint64_t v40 = v37(3, v38, 0, &unk_26C676770, &unk_215ED3AB8);
        goto LABEL_27;
      case 'n':
        v43 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v42 = a2 + 8;
        v41 = v43;
        if (!v43) {
          goto LABEL_30;
        }
        uint64_t v12 = v41(3, v42, 0, &unk_26C6767C0, &unk_215ED3B90);
LABEL_23:
        uint64_t v44 = (char *)v12;
        if (!v12) {
          goto LABEL_30;
        }
        int __src = 2;
        sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v53, 4);
        sub_215D02034((void *)a1);
        sub_215D04A50(v4, *(char **)(a1 + 32), v44, v44 + 8, 8);
        v45 = v44 + 16;
        sub_215D04A50(v4, *(char **)(a1 + 32), v44 + 8, v44 + 16, 8);
        v26 = *(char **)(a1 + 32);
        uint64_t v27 = v44 + 36;
        uint64_t v28 = v4;
        uint64_t v29 = v45;
        v30 = v27;
        int64_t v31 = 20;
        break;
      case 'o':
        uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v47 = a2 + 8;
        uint64_t v46 = v48;
        if (!v48) {
          goto LABEL_30;
        }
        uint64_t v40 = v46(3, v47, 0, &unk_26C676810, &unk_215ED3C68);
LABEL_27:
        v49 = (char *)v40;
        if (!v40) {
LABEL_30:
        }
          sub_215A0E034();
        int __src = 2;
        sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v53, 4);
        sub_215D02034((void *)a1);
        sub_215D04A50(v4, *(char **)(a1 + 32), v49, v49 + 16, 16);
        uint64_t v50 = v49 + 32;
        sub_215D04A50(v4, *(char **)(a1 + 32), v49 + 16, v49 + 32, 16);
        v26 = *(char **)(a1 + 32);
        uint64_t v27 = v49 + 72;
        uint64_t v28 = v4;
        uint64_t v29 = v50;
        v30 = v27;
        int64_t v31 = 40;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 0:
        v15 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v14 = a2 + 8;
        int v13 = v15;
        if (!v15) {
          goto LABEL_30;
        }
        uint64_t v16 = v13(3, v14, 0, &unk_26C6765E0, &unk_215ED368C);
        goto LABEL_13;
      case 1:
        v19 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v18 = a2 + 8;
        v17 = v19;
        if (!v19) {
          goto LABEL_30;
        }
        uint64_t v20 = v17(3, v18, 0, &unk_26C676630, &unk_215ED3760);
        goto LABEL_17;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return result;
      case 10:
        v23 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v22 = a2 + 8;
        v21 = v23;
        if (!v23) {
          goto LABEL_30;
        }
        uint64_t v16 = v21(3, v22, 0, &unk_26C676680, &unk_215ED3834);
LABEL_13:
        v24 = (char *)v16;
        if (!v16) {
          goto LABEL_30;
        }
        int __src = 2;
        sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v53, 4);
        sub_215D02034((void *)a1);
        uint64_t v25 = v24 + 8;
        sub_215D04A50(v4, *(char **)(a1 + 32), v24, v24 + 8, 8);
        v26 = *(char **)(a1 + 32);
        uint64_t v27 = v24 + 16;
        uint64_t v28 = v4;
        uint64_t v29 = v25;
        v30 = v27;
        int64_t v31 = 8;
        break;
      case 11:
        v34 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v33 = a2 + 8;
        v32 = v34;
        if (!v34) {
          goto LABEL_30;
        }
        uint64_t v20 = v32(3, v33, 0, &unk_26C6766D0, &unk_215ED3908);
LABEL_17:
        uint64_t v35 = (char *)v20;
        if (!v20) {
          goto LABEL_30;
        }
        int __src = 2;
        sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&__src, (char *)&v53, 4);
        sub_215D02034((void *)a1);
        v36 = v35 + 16;
        sub_215D04A50(v4, *(char **)(a1 + 32), v35, v35 + 16, 16);
        v26 = *(char **)(a1 + 32);
        uint64_t v27 = v35 + 32;
        uint64_t v28 = v4;
        uint64_t v29 = v36;
        v30 = v27;
        int64_t v31 = 16;
        break;
      default:
        JUMPOUT(0);
    }
  }
  sub_215D04A50(v28, v26, v29, v30, v31);
  uint64_t result = sub_215D04A50(v4, *(char **)(a1 + 32), v27, v27 + 8, 8);
  uint64_t v51 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
  *(void *)(v51 + 10) = *(void *)(a1 + 32) - v51 - 18;
  *(void *)(a1 + 56) -= 8;
  return result;
}

uint64_t sub_215A11FD8(int *a1, uint64_t a2, uint64_t a3)
{
  void v11[4] = *MEMORY[0x263EF8340];
  int v10 = 2;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v10);
  if (*a1 >= 1) {
    return sub_215A12144(a1, a2, a3);
  }
  int v10 = *(_DWORD *)a3;
  int v9 = *(void (**)(uint64_t, uint64_t, void *, void, void))(a3 + 8);
  uint64_t v8 = a3 + 8;
  char v7 = v9;
  v11[0] = 0;
  v11[1] = 0;
  if (v9) {
    v7(1, v8, v11, 0, 0);
  }
  uint64_t result = sub_215A12304(a2, &v10);
  if (v11[0]) {
    return ((uint64_t (*)(void, void *, void, void, void))v11[0])(0, v11, 0, 0, 0);
  }
  return result;
}

void sub_215A120FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A12144(int *a1, uint64_t a2, uint64_t a3)
{
  v12[4] = *MEMORY[0x263EF8340];
  int v5 = *a1;
  if (*a1 == 2)
  {
    int v11 = 2;
    (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v11);
    int v5 = *a1;
  }
  if (v5 >= 1) {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  int v11 = *(_DWORD *)a3;
  int v9 = *(void (**)(uint64_t, uint64_t, void *, void, void))(a3 + 8);
  uint64_t v8 = a3 + 8;
  char v7 = v9;
  v12[0] = 0;
  v12[1] = 0;
  if (v9) {
    v7(1, v8, v12, 0, 0);
  }
  uint64_t result = sub_215A12304(a2, &v11);
  if (v12[0]) {
    uint64_t result = ((uint64_t (*)(void, void *, void, void, void))v12[0])(0, v12, 0, 0, 0);
  }
  if (v5 >= 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  return result;
}

void sub_215A122BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A12304(uint64_t a1, int *a2)
{
  v36 = a2;
  uint64_t result = sub_215A126A8((unsigned char *)a1, &v36);
  int v5 = *a2;
  if (!v7 & v6)
  {
    switch(v5)
    {
      case 'd':
        int v10 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        int v9 = a2 + 2;
        uint64_t v8 = v10;
        if (v10)
        {
          uint64_t v11 = v8(3, v9, 0, &unk_26C676720, &unk_215ED39E0);
          if (v11) {
            goto LABEL_6;
          }
        }
        goto LABEL_28;
      case 'e':
        uint64_t v28 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v27 = a2 + 2;
        v26 = v28;
        if (v28)
        {
          uint64_t v29 = v26(3, v27, 0, &unk_26C676770, &unk_215ED3AB8);
          if (v29) {
            goto LABEL_22;
          }
        }
        goto LABEL_28;
      case 'n':
        v32 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        int64_t v31 = a2 + 2;
        v30 = v32;
        if (!v32) {
          goto LABEL_28;
        }
        uint64_t v11 = v30(3, v31, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v11) {
          goto LABEL_28;
        }
LABEL_6:
        v36 = *(_DWORD **)(a1 + 8);
        uint64_t result = sub_215A12EE4((int *)&v36, a1, v11);
        break;
      case 'o':
        uint64_t v35 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        v34 = a2 + 2;
        uint64_t v33 = v35;
        if (!v35 || (uint64_t v29 = v33(3, v34, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
LABEL_28:
        }
          sub_215A0E034();
LABEL_22:
        v36 = *(_DWORD **)(a1 + 8);
        uint64_t result = sub_215A133DC((int *)&v36, a1, v29);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 0:
        uint64_t v14 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        int v13 = a2 + 2;
        uint64_t v12 = v14;
        if (v14)
        {
          uint64_t v15 = v12(3, v13, 0, &unk_26C6765E0, &unk_215ED368C);
          if (v15) {
            goto LABEL_10;
          }
        }
        goto LABEL_28;
      case 1:
        uint64_t v18 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        v17 = a2 + 2;
        uint64_t v16 = v18;
        if (v18)
        {
          uint64_t v19 = v16(3, v17, 0, &unk_26C676630, &unk_215ED3760);
          if (v19) {
            goto LABEL_13;
          }
        }
        goto LABEL_28;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return result;
      case 10:
        uint64_t v22 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        v21 = a2 + 2;
        uint64_t v20 = v22;
        if (!v22) {
          goto LABEL_28;
        }
        uint64_t v15 = v20(3, v21, 0, &unk_26C676680, &unk_215ED3834);
        if (!v15) {
          goto LABEL_28;
        }
LABEL_10:
        v36 = *(_DWORD **)(a1 + 8);
        uint64_t result = sub_215A12814((int *)&v36, a1, v15);
        break;
      case 11:
        uint64_t v25 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        v24 = a2 + 2;
        v23 = v25;
        if (!v25) {
          goto LABEL_28;
        }
        uint64_t v19 = v23(3, v24, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v19) {
          goto LABEL_28;
        }
LABEL_13:
        v36 = *(_DWORD **)(a1 + 8);
        uint64_t result = sub_215A12B7C((int *)&v36, a1, v19);
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

uint64_t sub_215A126A8(unsigned char *a1, _DWORD **a2)
{
  if ((a1[12] & 2) != 0)
  {
    v3[6] = 0;
    sub_215A0DC50();
  }
  v3[0] = **a2;
  return (*(uint64_t (**)(unsigned char *, _DWORD *))(*(void *)a1 + 104))(a1, v3);
}

void sub_215A127D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A127EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A12800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215A12814(int *a1, uint64_t a2, uint64_t a3)
{
  int v7 = 2;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7);
  if (*a1 >= 1) {
    return sub_215A129BC(a1, a2, a3);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 20);
}

uint64_t sub_215A129BC(int *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    int v8 = 2;
    (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v8);
    int v5 = *a1;
  }
  if (v5 > 0) {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 16);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 20);
  if (v5 >= 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_215A12B7C(int *a1, uint64_t a2, uint64_t a3)
{
  int v7 = 2;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7);
  if (*a1 >= 1) {
    return sub_215A12D24(a1, a2, a3);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 36);
}

uint64_t sub_215A12D24(int *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    int v8 = 2;
    (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v8);
    int v5 = *a1;
  }
  if (v5 > 0) {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 32);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 36);
  if (v5 >= 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_215A12EE4(int *a1, uint64_t a2, uint64_t a3)
{
  int v7 = 2;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7);
  if (*a1 >= 1) {
    return sub_215A13168(a1, a2, a3);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 40);
}

uint64_t sub_215A13168(int *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    int v8 = 2;
    (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v8);
    int v5 = *a1;
  }
  if (v5 > 0) {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 36);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 40);
  if (v5 >= 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  return result;
}

uint64_t sub_215A133DC(int *a1, uint64_t a2, uint64_t a3)
{
  int v7 = 2;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7);
  if (*a1 >= 1) {
    return sub_215A13660(a1, a2, a3);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 72);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 76);
}

uint64_t sub_215A13660(int *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    int v8 = 2;
    (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v8);
    int v5 = *a1;
  }
  if (v5 > 0) {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 72);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 76);
  if (v5 >= 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  return result;
}

void sub_215A138D4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_215D23008(&v4);
  sub_215D1A748((uint64_t)v6, (uint64_t)&v4);
  uint64_t v4 = &unk_26C684548;
  uint64_t v3 = v5;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_215A16760(a2);
}

void sub_215A13AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A13B1C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "camera_type";
  *(void *)(a1 + 96) = 11;
  if (!v1) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215A14200((void *)a1);
}

void sub_215A14200(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  int v2 = (void **)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D30C0C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)__p = v5;
  operator new();
}

void sub_215A142F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A14368(uint64_t a1, float *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A14490((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v11[0] = 2;
    v11[1] = a2 + 4;
    unint64_t v10 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v10, (uint64_t)v11);
  }
}

void sub_215A14490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v22 = 0;
  uint64_t v23 = 0;
  v24[0] = 0;
  int v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C6842C8;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C65A0D8;
  v24[1] = v5 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v8, (float *)&v22);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v10, (float *)&v23);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v26[0] = 2;
  v26[1] = v24;
  unint64_t v12 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2328(v12, (uint64_t)v26);
  uint64_t v13 = sub_215D22318(&v22);
  long long v21 = *(_OWORD *)(v13 + 16);
  uint64_t v14 = *(void *)(v13 + 88);
  uint64_t v15 = (char *)operator new(0x78uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)uint64_t v15 = &unk_26C684408;
  long long v16 = *(_OWORD *)(v13 + 16);
  *((void *)v15 + 4) = &unk_26C65A188;
  *(_OWORD *)(v15 + 40) = v16;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(v13 + 32);
  long long v17 = *(_OWORD *)(v13 + 48);
  long long v18 = *(_OWORD *)(v13 + 64);
  *((_DWORD *)v15 + 26) = *(_DWORD *)(v13 + 80);
  *(_OWORD *)(v15 + 88) = v18;
  *(_OWORD *)(v15 + 72) = v17;
  *((void *)v15 + 14) = v14;
  *((void *)v15 + 3) = &unk_26C65A0D8;
  *(_OWORD *)a3 = v21;
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v15 + 24;
  uint64_t v19 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v15;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_215A1477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A14790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A147A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A148CC((uint64_t)v11, a1, (void *)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v6, (double *)a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v8, (double *)(a2 + 16));
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v11[0] = 2;
    v11[1] = a2 + 32;
    unint64_t v10 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v10, (uint64_t)v11);
  }
}

void sub_215A148CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  int v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C684368;
  long long v39 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v39;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659C48;
  v36 = v5 + 24;
  v37 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v8, (double *)&v33);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v10, (double *)&v34);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v38[0] = 2;
  v38[1] = &v35;
  unint64_t v12 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2328(v12, (uint64_t)v38);
  long long v13 = v33;
  long long v14 = v34;
  double v15 = 1.0 / *(double *)&v33;
  uint64_t v16 = v35;
  long long v17 = v36;
  *((_OWORD *)v36 + 1) = v33;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((void *)v17 + 10) = v13;
  *((void *)v17 + 12) = 0;
  *((void *)v17 + 13) = 0;
  *((void *)v17 + 11) = 0;
  *((void *)v17 + 14) = *((void *)&v13 + 1);
  *((void *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((void *)v17 + 18) = 0x3FF0000000000000;
  *((void *)v17 + 19) = v16;
  long long v18 = v36;
  uint64_t v19 = v36 + 16;
  uint64_t v20 = *((void *)v36 + 2);
  uint64_t v21 = *((void *)v36 + 3);
  float32x2_t v22 = v36 + 32;
  uint64_t v23 = *((void *)v36 + 4);
  uint64_t v24 = *((void *)v36 + 5);
  uint64_t v25 = *((void *)v36 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 2) = 0;
  *(void *)v26 = &unk_26C6844A8;
  *((void *)v26 + 4) = &unk_26C659958;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  long long v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  long long v28 = *((_OWORD *)v18 + 6);
  long long v29 = *((_OWORD *)v18 + 7);
  long long v30 = *((_OWORD *)v18 + 8);
  *((void *)v26 + 21) = *((void *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((void *)v26 + 22) = v25;
  *((void *)v26 + 3) = &unk_26C659C48;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  int64_t v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  v32 = v37;
  if (v37)
  {
    if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_215A14C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A14C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A14CA0(uint64_t a1, float *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A14DC8((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v11[0] = 2;
    v11[1] = a2 + 4;
    unint64_t v10 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v10, (uint64_t)v11);
  }
}

void sub_215A14DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v22 = 0;
  uint64_t v23 = 0;
  v24[0] = 0;
  int v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C684318;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C659DE8;
  v24[1] = v5 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v8, (float *)&v22);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v10, (float *)&v23);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v26[0] = 2;
  v26[1] = v24;
  unint64_t v12 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2328(v12, (uint64_t)v26);
  uint64_t v13 = sub_215D22318(&v22);
  long long v21 = *(_OWORD *)(v13 + 16);
  uint64_t v14 = *(void *)(v13 + 88);
  double v15 = (char *)operator new(0x78uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)double v15 = &unk_26C684458;
  long long v16 = *(_OWORD *)(v13 + 16);
  *((void *)v15 + 4) = &unk_26C65A188;
  *(_OWORD *)(v15 + 40) = v16;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(v13 + 32);
  long long v17 = *(_OWORD *)(v13 + 48);
  long long v18 = *(_OWORD *)(v13 + 64);
  *((_DWORD *)v15 + 26) = *(_DWORD *)(v13 + 80);
  *(_OWORD *)(v15 + 88) = v18;
  *(_OWORD *)(v15 + 72) = v17;
  *((void *)v15 + 14) = v14;
  *((void *)v15 + 3) = &unk_26C659DE8;
  *(_OWORD *)a3 = v21;
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v15 + 24;
  uint64_t v19 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v15;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_215A150B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A150C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A150DC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A15204((uint64_t)v11, a1, (void *)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v6, (double *)a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v8, (double *)(a2 + 16));
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v11[0] = 2;
    v11[1] = a2 + 32;
    unint64_t v10 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v10, (uint64_t)v11);
  }
}

void sub_215A15204(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  int v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C6843B8;
  long long v39 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v39;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659A48;
  v36 = v5 + 24;
  v37 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v8, (double *)&v33);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v10, (double *)&v34);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v38[0] = 2;
  v38[1] = &v35;
  unint64_t v12 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2328(v12, (uint64_t)v38);
  long long v13 = v33;
  long long v14 = v34;
  double v15 = 1.0 / *(double *)&v33;
  uint64_t v16 = v35;
  long long v17 = v36;
  *((_OWORD *)v36 + 1) = v33;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((void *)v17 + 10) = v13;
  *((void *)v17 + 12) = 0;
  *((void *)v17 + 13) = 0;
  *((void *)v17 + 11) = 0;
  *((void *)v17 + 14) = *((void *)&v13 + 1);
  *((void *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((void *)v17 + 18) = 0x3FF0000000000000;
  *((void *)v17 + 19) = v16;
  long long v18 = v36;
  uint64_t v19 = v36 + 16;
  uint64_t v20 = *((void *)v36 + 2);
  uint64_t v21 = *((void *)v36 + 3);
  float32x2_t v22 = v36 + 32;
  uint64_t v23 = *((void *)v36 + 4);
  uint64_t v24 = *((void *)v36 + 5);
  uint64_t v25 = *((void *)v36 + 19);
  v26 = (char *)operator new(0xB8uLL);
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 2) = 0;
  *(void *)v26 = &unk_26C6844F8;
  *((void *)v26 + 4) = &unk_26C659958;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  long long v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  long long v28 = *((_OWORD *)v18 + 6);
  long long v29 = *((_OWORD *)v18 + 7);
  long long v30 = *((_OWORD *)v18 + 8);
  *((void *)v26 + 21) = *((void *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((void *)v26 + 22) = v25;
  *((void *)v26 + 3) = &unk_26C659A48;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  int64_t v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  v32 = v37;
  if (v37)
  {
    if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_215A155B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A155C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A155D8(uint64_t a1, float *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A15740((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "distortion_coeff";
    *(void *)(a1 + 96) = 16;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v10 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v10, a2 + 4);
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v13[0] = 2;
    v13[1] = a2 + 9;
    unint64_t v12 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v12, (uint64_t)v13);
  }
}

void sub_215A15740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v21 = 0u;
  memset(v22, 0, 28);
  int v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C684000;
  *(_OWORD *)&v26[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v26[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659FA8;
  uint64_t v23 = v5 + 24;
  uint64_t v24 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v8, (float *)&v21);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v10, (float *)&v21 + 2);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "distortion_coeff";
  *(void *)(a2 + 96) = 16;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v12 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v12, v22);
  int v13 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v13) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(void *)&long long v25 = 2;
  *((void *)&v25 + 1) = &v22[5];
  unint64_t v14 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2328(v14, (uint64_t)&v25);
  uint64_t v15 = sub_215D20250((uint64_t)&v21);
  sub_215D20788((uint64_t)&v25, v15);
  long long v16 = *(_OWORD *)v26;
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = v16;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v26[12];
  long long v17 = v27;
  long long v27 = 0uLL;
  long long v18 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v17;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_215A15A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A15A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A15A94(uint64_t a1, double *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A15BFC((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "distortion_coeff";
    *(void *)(a1 + 96) = 16;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v10 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v10, a2 + 4);
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v13[0] = 2;
    v13[1] = a2 + 9;
    unint64_t v12 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v12, (uint64_t)v13);
  }
}

void sub_215A15BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2037C((uint64_t)v22);
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v5) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v6, v22);
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v8, &v23);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "distortion_coeff";
  *(void *)(a2 + 96) = 16;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v10, &v24);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(void *)&v20[0] = 2;
  *((void *)&v20[0] + 1) = &v25;
  unint64_t v12 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2328(v12, (uint64_t)v20);
  uint64_t v13 = sub_215D204B8((uint64_t)v22);
  sub_215D20E5C((uint64_t)v20, v13);
  long long v14 = v20[3];
  *(_OWORD *)(a3 + 32) = v20[2];
  *(_OWORD *)(a3 + 48) = v14;
  long long v15 = v20[1];
  *(_OWORD *)a3 = v20[0];
  *(_OWORD *)(a3 + 16) = v15;
  long long v16 = v21;
  long long v21 = 0uLL;
  long long v17 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v20[4];
  *(_OWORD *)(a3 + 80) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v26;
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_215A15E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A15E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A15E78(uint64_t a1, float *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A15FE0((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "distortion_coeff";
    *(void *)(a1 + 96) = 16;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v10 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v10, a2 + 4);
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v13[0] = 2;
    v13[1] = a2 + 9;
    unint64_t v12 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v12, (uint64_t)v13);
  }
}

void sub_215A15FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v21 = 0u;
  memset(v22, 0, 28);
  int v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C684050;
  *(_OWORD *)&v26[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v26[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659ED8;
  double v23 = v5 + 24;
  double v24 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v8, (float *)&v21);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v10, (float *)&v21 + 2);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "distortion_coeff";
  *(void *)(a2 + 96) = 16;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v12 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF262C(v12, v22);
  int v13 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v13) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(void *)&long long v25 = 2;
  *((void *)&v25 + 1) = &v22[5];
  unint64_t v14 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2328(v14, (uint64_t)&v25);
  uint64_t v15 = sub_215D20250((uint64_t)&v21);
  sub_215D20A54((uint64_t)&v25, v15);
  long long v16 = *(_OWORD *)v26;
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = v16;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v26[12];
  long long v17 = v27;
  long long v27 = 0uLL;
  long long v18 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v17;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_215A1630C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A16320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A16334(uint64_t a1, double *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A1649C((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "distortion_coeff";
    *(void *)(a1 + 96) = 16;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v10 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2748(v10, a2 + 4);
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v13[0] = 2;
    v13[1] = a2 + 9;
    unint64_t v12 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v12, (uint64_t)v13);
  }
}

void sub_215A1649C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2064C((uint64_t)v22);
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v5) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v6, v22);
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v8, &v23);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "distortion_coeff";
  *(void *)(a2 + 96) = 16;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2748(v10, &v24);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(void *)&v20[0] = 2;
  *((void *)&v20[0] + 1) = &v25;
  unint64_t v12 = sub_215DF0AA0((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF2328(v12, (uint64_t)v20);
  uint64_t v13 = sub_215D204B8((uint64_t)v22);
  sub_215D212CC((uint64_t)v20, v13);
  long long v14 = v20[3];
  *(_OWORD *)(a3 + 32) = v20[2];
  *(_OWORD *)(a3 + 48) = v14;
  long long v15 = v20[1];
  *(_OWORD *)a3 = v20[0];
  *(_OWORD *)(a3 + 16) = v15;
  long long v16 = v21;
  long long v21 = 0uLL;
  long long v17 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v20[4];
  *(_OWORD *)(a3 + 80) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = v26;
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_215A166F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A16704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215A16718(uint64_t a1)
{
  int v2 = *(void (**)(void, uint64_t, void, void, void))(a1 + 8);
  if (v2) {
    v2(0, a1 + 8, 0, 0, 0);
  }
  return a1;
}

void sub_215A16760(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "camera_type";
  *(void *)(a1 + 96) = 11;
  if (!v1) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215A14200((void *)a1);
}

void *sub_215A16E44(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v8 = 2;
  sub_215DFF824(a2[6], &v8);
  if (v8 <= 1) {
    return sub_215A16F48((uint64_t)&v9, a2, a3);
  }
  sub_2159B0060(a2 + 2);
  sub_215A17190(a2, a3);
  uint64_t v5 = a2[4];
  uint64_t result = (void *)(*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2);
  uint64_t v7 = *(void *)(v5 - 16) - (void)result + *(void *)(v5 - 8);
  if (v7) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(a2[2] + 40))(a2 + 2, v7);
  }
  a2[4] -= 16;
  return result;
}

void *sub_215A16F48(uint64_t a1, void *a2, uint64_t a3)
{
  v14[4] = *MEMORY[0x263EF8340];
  sub_215D23008(&v10);
  sub_215D1A748((uint64_t)&v13, (uint64_t)&v10);
  unint64_t v10 = &unk_26C684548;
  uint64_t v5 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_215A19880(a2, (uint64_t)&v13);
  sub_215D1BF64(&v13, v8);
  sub_215D1CFB4((uint64_t)&v10, (uint64_t)v8);
  v8[0] = &unk_26C684548;
  unint64_t v6 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(_DWORD *)a3 = v10;
  uint64_t result = sub_2158281D0((void *)(a3 + 8), &v11);
  if (v11) {
    uint64_t result = (void *)((uint64_t (*)(void, void (**)(uint64_t), void, void, void))v11)(0, &v11, 0, 0, 0);
  }
  if (v14[0]) {
    return (void *)((uint64_t (*)(void, void *, void, void, void))v14[0])(0, v14, 0, 0, 0);
  }
  return result;
}

void sub_215A17118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A17190(void *a1, uint64_t a2)
{
  unsigned int v39 = 0;
  sub_215DFF824(a1[6], &v39);
  *(_DWORD *)a2 = v39;
  sub_215D1E51C((int *)a2);
  int v4 = *(_DWORD *)a2;
  if (!v6 & v5)
  {
    switch(v4)
    {
      case 'd':
        char v9 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v8 = a2 + 8;
        uint64_t v7 = v9;
        if (!v9) {
          goto LABEL_29;
        }
        uint64_t v10 = v7(3, v8, 0, &unk_26C676720, &unk_215ED39E0);
        if (!v10) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A18778((uint64_t)&v39, a1, v10, v39);
        break;
      case 'e':
        long long v29 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v28 = a2 + 8;
        long long v27 = v29;
        if (!v29) {
          goto LABEL_29;
        }
        uint64_t v30 = v27(3, v28, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v30) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A18C24((uint64_t)&v39, a1, v30, v39);
        break;
      case 'n':
        long long v33 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v32 = a2 + 8;
        int64_t v31 = v33;
        if (!v33) {
          goto LABEL_29;
        }
        uint64_t v34 = v31(3, v32, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v34) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A18FFC((uint64_t)&v39, a1, v34, v39);
        break;
      case 'o':
        v37 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v36 = a2 + 8;
        uint64_t v35 = v37;
        if (!v37 || (uint64_t v38 = v35(3, v36, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
LABEL_29:
        }
          sub_215A0E034();
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A194A8((uint64_t)&v39, a1, v38, v39);
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v4)
    {
      case 0:
        int v13 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v12 = a2 + 8;
        int v11 = v13;
        if (!v13) {
          goto LABEL_29;
        }
        uint64_t v14 = v11(3, v12, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v14) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A175E8((uint64_t)&v39, a1, v14, v39);
        break;
      case 1:
        long long v17 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v16 = a2 + 8;
        long long v15 = v17;
        if (!v17) {
          goto LABEL_29;
        }
        uint64_t v18 = v15(3, v16, 0, &unk_26C676630, &unk_215ED3760);
        if (!v18) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A179EC((uint64_t)&v39, a1, v18, v39);
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        long long v21 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v20 = a2 + 8;
        uint64_t v19 = v21;
        if (!v21) {
          goto LABEL_29;
        }
        uint64_t v22 = v19(3, v20, 0, &unk_26C676680, &unk_215ED3834);
        if (!v22) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A17EB0((uint64_t)&v39, a1, v22, v39);
        break;
      case 11:
        uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v24 = a2 + 8;
        double v23 = v25;
        if (!v25) {
          goto LABEL_29;
        }
        uint64_t v26 = v23(3, v24, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v26) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A182B4((uint64_t)&v39, a1, v26, v39);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

void sub_215A175E8(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_215A17718((uint64_t)&v12, (uint64_t)a2, a3);
  }
  else
  {
    char v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    uint64_t v7 = a2[6];
    sub_215DFFD1C(v7, (float *)a3);
    sub_215DFFD1C(v7, (float *)(a3 + 4));
    uint64_t v8 = a2[6];
    sub_215DFFD1C(v8, (float *)(a3 + 8));
    sub_215DFFD1C(v8, (float *)(a3 + 12));
    uint64_t v9 = a2[6];
    sub_215DFF824(v9, (_DWORD *)(a3 + 16));
    sub_215DFF824(v9, (_DWORD *)(a3 + 20));
    uint64_t v10 = a2[4];
    uint64_t v11 = *(void *)(v10 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v10 - 8);
    if (v11) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    }
    a2[4] -= 16;
  }
}

void sub_215A17718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v19 = 0;
  uint64_t v20 = 0;
  v21[0] = 0;
  char v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)char v5 = &unk_26C6842C8;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *((void *)v5 + 4) = &unk_26C65A188;
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C65A0D8;
  v21[1] = v5 + 24;
  uint64_t v22 = (std::__shared_weak_count *)v5;
  uint64_t v7 = *(void *)(a2 + 48);
  sub_215DFFD1C(v7, (float *)&v19);
  sub_215DFFD1C(v7, (float *)&v19 + 1);
  uint64_t v8 = *(void *)(a2 + 48);
  sub_215DFFD1C(v8, (float *)&v20);
  sub_215DFFD1C(v8, (float *)&v20 + 1);
  uint64_t v9 = *(void *)(a2 + 48);
  sub_215DFF824(v9, v21);
  sub_215DFF824(v9, (_DWORD *)v21 + 1);
  uint64_t v10 = sub_215D22318(&v19);
  long long v18 = *(_OWORD *)(v10 + 16);
  uint64_t v11 = *(void *)(v10 + 88);
  char v12 = (char *)operator new(0x78uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)char v12 = &unk_26C684408;
  long long v13 = *(_OWORD *)(v10 + 16);
  *((void *)v12 + 4) = &unk_26C65A188;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v10 + 32);
  long long v14 = *(_OWORD *)(v10 + 48);
  long long v15 = *(_OWORD *)(v10 + 64);
  *((_DWORD *)v12 + 26) = *(_DWORD *)(v10 + 80);
  *(_OWORD *)(v12 + 88) = v15;
  *(_OWORD *)(v12 + 72) = v14;
  *((void *)v12 + 14) = v11;
  *((void *)v12 + 3) = &unk_26C65A0D8;
  *(_OWORD *)a3 = v18;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v12 + 24;
  uint64_t v16 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v12;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  long long v17 = v22;
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_215A1799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A179B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A179C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A179D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A179EC(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_215A17B1C((uint64_t)&v12, (uint64_t)a2, (void *)a3);
  }
  else
  {
    int32x4_t v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    uint64_t v7 = a2[6];
    sub_215DFFE68(v7, (double *)a3);
    sub_215DFFE68(v7, (double *)(a3 + 8));
    uint64_t v8 = a2[6];
    sub_215DFFE68(v8, (double *)(a3 + 16));
    sub_215DFFE68(v8, (double *)(a3 + 24));
    uint64_t v9 = a2[6];
    sub_215DFF824(v9, (_DWORD *)(a3 + 32));
    sub_215DFF824(v9, (_DWORD *)(a3 + 36));
    uint64_t v10 = a2[4];
    uint64_t v11 = *(void *)(v10 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v10 - 8);
    if (v11) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    }
    a2[4] -= 16;
  }
}

void sub_215A17B1C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  char v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)char v5 = &unk_26C684368;
  long long v35 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v35;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659C48;
  long long v33 = v5 + 24;
  uint64_t v34 = (std::__shared_weak_count *)v5;
  uint64_t v7 = *(void *)(a2 + 48);
  sub_215DFFE68(v7, (double *)&v30);
  sub_215DFFE68(v7, (double *)&v30 + 1);
  uint64_t v8 = *(void *)(a2 + 48);
  sub_215DFFE68(v8, (double *)&v31);
  sub_215DFFE68(v8, (double *)&v31 + 1);
  uint64_t v9 = *(void *)(a2 + 48);
  sub_215DFF824(v9, &v32);
  sub_215DFF824(v9, (_DWORD *)&v32 + 1);
  long long v10 = v30;
  long long v11 = v31;
  double v12 = 1.0 / *(double *)&v30;
  uint64_t v13 = v32;
  long long v14 = v33;
  *((_OWORD *)v33 + 1) = v30;
  *((_OWORD *)v14 + 2) = v11;
  *((double *)v14 + 6) = v12;
  *((double *)v14 + 7) = 1.0 / *((double *)&v10 + 1);
  *((double *)v14 + 8) = -(*(double *)&v11 * v12);
  *((double *)v14 + 9) = -(*((double *)&v11 + 1) * (1.0 / *((double *)&v10 + 1)));
  *((void *)v14 + 10) = v10;
  *((void *)v14 + 12) = 0;
  *((void *)v14 + 13) = 0;
  *((void *)v14 + 11) = 0;
  *((void *)v14 + 14) = *((void *)&v10 + 1);
  *((void *)v14 + 15) = 0;
  *((_OWORD *)v14 + 8) = v11;
  *((void *)v14 + 18) = 0x3FF0000000000000;
  *((void *)v14 + 19) = v13;
  long long v15 = v33;
  uint64_t v16 = v33 + 16;
  uint64_t v17 = *((void *)v33 + 2);
  uint64_t v18 = *((void *)v33 + 3);
  float32x2_t v19 = v33 + 32;
  uint64_t v20 = *((void *)v33 + 4);
  uint64_t v21 = *((void *)v33 + 5);
  uint64_t v22 = *((void *)v33 + 19);
  double v23 = (char *)operator new(0xB8uLL);
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 2) = 0;
  *(void *)double v23 = &unk_26C6844A8;
  *((void *)v23 + 4) = &unk_26C659958;
  *(_OWORD *)(v23 + 40) = *v16;
  *(_OWORD *)(v23 + 56) = *v19;
  long long v24 = *((_OWORD *)v15 + 3);
  *(_OWORD *)(v23 + 88) = *((_OWORD *)v15 + 4);
  *(_OWORD *)(v23 + 72) = v24;
  long long v25 = *((_OWORD *)v15 + 6);
  long long v26 = *((_OWORD *)v15 + 7);
  long long v27 = *((_OWORD *)v15 + 8);
  *((void *)v23 + 21) = *((void *)v15 + 18);
  *(_OWORD *)(v23 + 152) = v27;
  *(_OWORD *)(v23 + 136) = v26;
  *(_OWORD *)(v23 + 120) = v25;
  *(_OWORD *)(v23 + 104) = *((_OWORD *)v15 + 5);
  *((void *)v23 + 22) = v22;
  *((void *)v23 + 3) = &unk_26C659C48;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23 + 24;
  uint64_t v28 = (std::__shared_weak_count *)a3[6];
  a3[6] = v23;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  long long v29 = v34;
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_215A17E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A17E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A17E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A17E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A17EB0(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_215A17FE0((uint64_t)&v12, (uint64_t)a2, a3);
  }
  else
  {
    int64x2_t v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    uint64_t v7 = a2[6];
    sub_215DFFD1C(v7, (float *)a3);
    sub_215DFFD1C(v7, (float *)(a3 + 4));
    uint64_t v8 = a2[6];
    sub_215DFFD1C(v8, (float *)(a3 + 8));
    sub_215DFFD1C(v8, (float *)(a3 + 12));
    uint64_t v9 = a2[6];
    sub_215DFF824(v9, (_DWORD *)(a3 + 16));
    sub_215DFF824(v9, (_DWORD *)(a3 + 20));
    uint64_t v10 = a2[4];
    uint64_t v11 = *(void *)(v10 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v10 - 8);
    if (v11) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    }
    a2[4] -= 16;
  }
}

void sub_215A17FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v19 = 0;
  uint64_t v20 = 0;
  v21[0] = 0;
  char v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)char v5 = &unk_26C684318;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *((void *)v5 + 4) = &unk_26C65A188;
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C659DE8;
  v21[1] = v5 + 24;
  uint64_t v22 = (std::__shared_weak_count *)v5;
  uint64_t v7 = *(void *)(a2 + 48);
  sub_215DFFD1C(v7, (float *)&v19);
  sub_215DFFD1C(v7, (float *)&v19 + 1);
  uint64_t v8 = *(void *)(a2 + 48);
  sub_215DFFD1C(v8, (float *)&v20);
  sub_215DFFD1C(v8, (float *)&v20 + 1);
  uint64_t v9 = *(void *)(a2 + 48);
  sub_215DFF824(v9, v21);
  sub_215DFF824(v9, (_DWORD *)v21 + 1);
  uint64_t v10 = sub_215D22318(&v19);
  long long v18 = *(_OWORD *)(v10 + 16);
  uint64_t v11 = *(void *)(v10 + 88);
  char v12 = (char *)operator new(0x78uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)char v12 = &unk_26C684458;
  long long v13 = *(_OWORD *)(v10 + 16);
  *((void *)v12 + 4) = &unk_26C65A188;
  *(_OWORD *)(v12 + 40) = v13;
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v10 + 32);
  long long v14 = *(_OWORD *)(v10 + 48);
  long long v15 = *(_OWORD *)(v10 + 64);
  *((_DWORD *)v12 + 26) = *(_DWORD *)(v10 + 80);
  *(_OWORD *)(v12 + 88) = v15;
  *(_OWORD *)(v12 + 72) = v14;
  *((void *)v12 + 14) = v11;
  *((void *)v12 + 3) = &unk_26C659DE8;
  *(_OWORD *)a3 = v18;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v12 + 24;
  uint64_t v16 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v12;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = v22;
  if (v22)
  {
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_215A18264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A18278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1828C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A182A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A182B4(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_215A183E4((uint64_t)&v12, (uint64_t)a2, (void *)a3);
  }
  else
  {
    int32x4_t v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    uint64_t v7 = a2[6];
    sub_215DFFE68(v7, (double *)a3);
    sub_215DFFE68(v7, (double *)(a3 + 8));
    uint64_t v8 = a2[6];
    sub_215DFFE68(v8, (double *)(a3 + 16));
    sub_215DFFE68(v8, (double *)(a3 + 24));
    uint64_t v9 = a2[6];
    sub_215DFF824(v9, (_DWORD *)(a3 + 32));
    sub_215DFF824(v9, (_DWORD *)(a3 + 36));
    uint64_t v10 = a2[4];
    uint64_t v11 = *(void *)(v10 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v10 - 8);
    if (v11) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v11);
    }
    a2[4] -= 16;
  }
}

void sub_215A183E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  char v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)char v5 = &unk_26C6843B8;
  long long v35 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v35;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659A48;
  long long v33 = v5 + 24;
  uint64_t v34 = (std::__shared_weak_count *)v5;
  uint64_t v7 = *(void *)(a2 + 48);
  sub_215DFFE68(v7, (double *)&v30);
  sub_215DFFE68(v7, (double *)&v30 + 1);
  uint64_t v8 = *(void *)(a2 + 48);
  sub_215DFFE68(v8, (double *)&v31);
  sub_215DFFE68(v8, (double *)&v31 + 1);
  uint64_t v9 = *(void *)(a2 + 48);
  sub_215DFF824(v9, &v32);
  sub_215DFF824(v9, (_DWORD *)&v32 + 1);
  long long v10 = v30;
  long long v11 = v31;
  double v12 = 1.0 / *(double *)&v30;
  uint64_t v13 = v32;
  long long v14 = v33;
  *((_OWORD *)v33 + 1) = v30;
  *((_OWORD *)v14 + 2) = v11;
  *((double *)v14 + 6) = v12;
  *((double *)v14 + 7) = 1.0 / *((double *)&v10 + 1);
  *((double *)v14 + 8) = -(*(double *)&v11 * v12);
  *((double *)v14 + 9) = -(*((double *)&v11 + 1) * (1.0 / *((double *)&v10 + 1)));
  *((void *)v14 + 10) = v10;
  *((void *)v14 + 12) = 0;
  *((void *)v14 + 13) = 0;
  *((void *)v14 + 11) = 0;
  *((void *)v14 + 14) = *((void *)&v10 + 1);
  *((void *)v14 + 15) = 0;
  *((_OWORD *)v14 + 8) = v11;
  *((void *)v14 + 18) = 0x3FF0000000000000;
  *((void *)v14 + 19) = v13;
  long long v15 = v33;
  uint64_t v16 = v33 + 16;
  uint64_t v17 = *((void *)v33 + 2);
  uint64_t v18 = *((void *)v33 + 3);
  float32x2_t v19 = v33 + 32;
  uint64_t v20 = *((void *)v33 + 4);
  uint64_t v21 = *((void *)v33 + 5);
  uint64_t v22 = *((void *)v33 + 19);
  double v23 = (char *)operator new(0xB8uLL);
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 2) = 0;
  *(void *)double v23 = &unk_26C6844F8;
  *((void *)v23 + 4) = &unk_26C659958;
  *(_OWORD *)(v23 + 40) = *v16;
  *(_OWORD *)(v23 + 56) = *v19;
  long long v24 = *((_OWORD *)v15 + 3);
  *(_OWORD *)(v23 + 88) = *((_OWORD *)v15 + 4);
  *(_OWORD *)(v23 + 72) = v24;
  long long v25 = *((_OWORD *)v15 + 6);
  long long v26 = *((_OWORD *)v15 + 7);
  long long v27 = *((_OWORD *)v15 + 8);
  *((void *)v23 + 21) = *((void *)v15 + 18);
  *(_OWORD *)(v23 + 152) = v27;
  *(_OWORD *)(v23 + 136) = v26;
  *(_OWORD *)(v23 + 120) = v25;
  *(_OWORD *)(v23 + 104) = *((_OWORD *)v15 + 5);
  *((void *)v23 + 22) = v22;
  *((void *)v23 + 3) = &unk_26C659A48;
  *a3 = v17;
  a3[1] = v18;
  a3[2] = v20;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23 + 24;
  uint64_t v28 = (std::__shared_weak_count *)a3[6];
  a3[6] = v23;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  long long v29 = v34;
  if (v34)
  {
    if (!atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_215A18728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A18750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A18764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A18778(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_215A188E8((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    int64x2_t v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    uint64_t v7 = a2[6];
    sub_215DFFD1C(v7, (float *)a3);
    sub_215DFFD1C(v7, (float *)(a3 + 4));
    uint64_t v8 = a2[6];
    sub_215DFFD1C(v8, (float *)(a3 + 8));
    sub_215DFFD1C(v8, (float *)(a3 + 12));
    uint64_t v9 = a2[6];
    sub_215DFFD1C(v9, (float *)(a3 + 16));
    sub_215DFFD1C(v9, (float *)(a3 + 20));
    sub_215DFFD1C(v9, (float *)(a3 + 24));
    sub_215DFFD1C(v9, (float *)(a3 + 28));
    sub_215DFFD1C(v9, (float *)(a3 + 32));
    uint64_t v10 = a2[6];
    sub_215DFF824(v10, (_DWORD *)(a3 + 36));
    sub_215DFF824(v10, (_DWORD *)(a3 + 40));
    uint64_t v11 = a2[4];
    uint64_t v12 = *(void *)(v11 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v11 - 8);
    if (v12) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    }
    a2[4] -= 16;
  }
}

void sub_215A188E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v17 = 0u;
  memset(v18, 0, 28);
  char v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)char v5 = &unk_26C684000;
  *(_OWORD *)&v22[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v22[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659FA8;
  float32x2_t v19 = v5 + 24;
  uint64_t v20 = (std::__shared_weak_count *)v5;
  uint64_t v7 = *(void *)(a2 + 48);
  sub_215DFFD1C(v7, (float *)&v17);
  sub_215DFFD1C(v7, (float *)&v17 + 1);
  uint64_t v8 = *(void *)(a2 + 48);
  sub_215DFFD1C(v8, (float *)&v17 + 2);
  sub_215DFFD1C(v8, (float *)((unint64_t)&v17 | 0xC));
  uint64_t v9 = *(void *)(a2 + 48);
  sub_215DFFD1C(v9, v18);
  sub_215DFFD1C(v9, &v18[1]);
  sub_215DFFD1C(v9, &v18[2]);
  sub_215DFFD1C(v9, &v18[3]);
  sub_215DFFD1C(v9, &v18[4]);
  uint64_t v10 = *(void *)(a2 + 48);
  sub_215DFF824(v10, &v18[5]);
  sub_215DFF824(v10, &v18[6]);
  uint64_t v11 = sub_215D20250((uint64_t)&v17);
  sub_215D20788((uint64_t)&v21, v11);
  long long v12 = *(_OWORD *)v22;
  *(_OWORD *)a3 = v21;
  *(_OWORD *)(a3 + 16) = v12;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v22[12];
  long long v13 = v23;
  long long v23 = 0uLL;
  long long v14 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = v20;
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_215A18BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A18BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A18BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A18BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A18C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A18C24(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_215A18D94((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    int32x4_t v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    uint64_t v7 = a2[6];
    sub_215DFFE68(v7, (double *)a3);
    sub_215DFFE68(v7, (double *)(a3 + 8));
    uint64_t v8 = a2[6];
    sub_215DFFE68(v8, (double *)(a3 + 16));
    sub_215DFFE68(v8, (double *)(a3 + 24));
    uint64_t v9 = a2[6];
    sub_215DFFE68(v9, (double *)(a3 + 32));
    sub_215DFFE68(v9, (double *)(a3 + 40));
    sub_215DFFE68(v9, (double *)(a3 + 48));
    sub_215DFFE68(v9, (double *)(a3 + 56));
    sub_215DFFE68(v9, (double *)(a3 + 64));
    uint64_t v10 = a2[6];
    sub_215DFF824(v10, (_DWORD *)(a3 + 72));
    sub_215DFF824(v10, (_DWORD *)(a3 + 76));
    uint64_t v11 = a2[4];
    uint64_t v12 = *(void *)(v11 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v11 - 8);
    if (v12) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    }
    a2[4] -= 16;
  }
}

void sub_215A18D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2037C((uint64_t)&v18);
  uint64_t v5 = *(void *)(a2 + 48);
  sub_215DFFE68(v5, &v18);
  sub_215DFFE68(v5, &v19);
  uint64_t v6 = *(void *)(a2 + 48);
  sub_215DFFE68(v6, &v20);
  sub_215DFFE68(v6, &v21);
  uint64_t v7 = *(void *)(a2 + 48);
  sub_215DFFE68(v7, &v22);
  sub_215DFFE68(v7, &v23);
  sub_215DFFE68(v7, &v24);
  sub_215DFFE68(v7, &v25);
  sub_215DFFE68(v7, &v26);
  uint64_t v8 = *(void *)(a2 + 48);
  sub_215DFF824(v8, &v27);
  sub_215DFF824(v8, v28);
  uint64_t v9 = sub_215D204B8((uint64_t)&v18);
  sub_215D20E5C((uint64_t)v16, v9);
  long long v10 = v16[3];
  *(_OWORD *)(a3 + 32) = v16[2];
  *(_OWORD *)(a3 + 48) = v10;
  long long v11 = v16[1];
  *(_OWORD *)a3 = v16[0];
  *(_OWORD *)(a3 + 16) = v11;
  long long v12 = v17;
  long long v17 = 0uLL;
  char v13 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v16[4];
  *(_OWORD *)(a3 + 80) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v14 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = v29;
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_215A18F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A18FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A18FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A18FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A18FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A18FFC(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_215A1916C((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    uint64_t v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    uint64_t v7 = a2[6];
    sub_215DFFD1C(v7, (float *)a3);
    sub_215DFFD1C(v7, (float *)(a3 + 4));
    uint64_t v8 = a2[6];
    sub_215DFFD1C(v8, (float *)(a3 + 8));
    sub_215DFFD1C(v8, (float *)(a3 + 12));
    uint64_t v9 = a2[6];
    sub_215DFFD1C(v9, (float *)(a3 + 16));
    sub_215DFFD1C(v9, (float *)(a3 + 20));
    sub_215DFFD1C(v9, (float *)(a3 + 24));
    sub_215DFFD1C(v9, (float *)(a3 + 28));
    sub_215DFFD1C(v9, (float *)(a3 + 32));
    uint64_t v10 = a2[6];
    sub_215DFF824(v10, (_DWORD *)(a3 + 36));
    sub_215DFF824(v10, (_DWORD *)(a3 + 40));
    uint64_t v11 = a2[4];
    uint64_t v12 = *(void *)(v11 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v11 - 8);
    if (v12) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    }
    a2[4] -= 16;
  }
}

void sub_215A1916C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v17 = 0u;
  memset(v18, 0, 28);
  uint64_t v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_26C684050;
  *(_OWORD *)&v22[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v22[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659ED8;
  double v19 = v5 + 24;
  double v20 = (std::__shared_weak_count *)v5;
  uint64_t v7 = *(void *)(a2 + 48);
  sub_215DFFD1C(v7, (float *)&v17);
  sub_215DFFD1C(v7, (float *)&v17 + 1);
  uint64_t v8 = *(void *)(a2 + 48);
  sub_215DFFD1C(v8, (float *)&v17 + 2);
  sub_215DFFD1C(v8, (float *)((unint64_t)&v17 | 0xC));
  uint64_t v9 = *(void *)(a2 + 48);
  sub_215DFFD1C(v9, v18);
  sub_215DFFD1C(v9, &v18[1]);
  sub_215DFFD1C(v9, &v18[2]);
  sub_215DFFD1C(v9, &v18[3]);
  sub_215DFFD1C(v9, &v18[4]);
  uint64_t v10 = *(void *)(a2 + 48);
  sub_215DFF824(v10, &v18[5]);
  sub_215DFF824(v10, &v18[6]);
  uint64_t v11 = sub_215D20250((uint64_t)&v17);
  sub_215D20A54((uint64_t)&v21, v11);
  long long v12 = *(_OWORD *)v22;
  *(_OWORD *)a3 = v21;
  *(_OWORD *)(a3 + 16) = v12;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v22[12];
  long long v13 = v23;
  long long v23 = 0uLL;
  long long v14 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v23 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = v20;
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_215A19444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A19458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1946C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A19480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A19494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A194A8(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_215A19618((uint64_t)&v13, (uint64_t)a2, a3);
  }
  else
  {
    int32x4_t v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    uint64_t v7 = a2[6];
    sub_215DFFE68(v7, (double *)a3);
    sub_215DFFE68(v7, (double *)(a3 + 8));
    uint64_t v8 = a2[6];
    sub_215DFFE68(v8, (double *)(a3 + 16));
    sub_215DFFE68(v8, (double *)(a3 + 24));
    uint64_t v9 = a2[6];
    sub_215DFFE68(v9, (double *)(a3 + 32));
    sub_215DFFE68(v9, (double *)(a3 + 40));
    sub_215DFFE68(v9, (double *)(a3 + 48));
    sub_215DFFE68(v9, (double *)(a3 + 56));
    sub_215DFFE68(v9, (double *)(a3 + 64));
    uint64_t v10 = a2[6];
    sub_215DFF824(v10, (_DWORD *)(a3 + 72));
    sub_215DFF824(v10, (_DWORD *)(a3 + 76));
    uint64_t v11 = a2[4];
    uint64_t v12 = *(void *)(v11 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v11 - 8);
    if (v12) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v12);
    }
    a2[4] -= 16;
  }
}

void sub_215A19618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2064C((uint64_t)&v18);
  uint64_t v5 = *(void *)(a2 + 48);
  sub_215DFFE68(v5, &v18);
  sub_215DFFE68(v5, &v19);
  uint64_t v6 = *(void *)(a2 + 48);
  sub_215DFFE68(v6, &v20);
  sub_215DFFE68(v6, &v21);
  uint64_t v7 = *(void *)(a2 + 48);
  sub_215DFFE68(v7, &v22);
  sub_215DFFE68(v7, &v23);
  sub_215DFFE68(v7, &v24);
  sub_215DFFE68(v7, &v25);
  sub_215DFFE68(v7, &v26);
  uint64_t v8 = *(void *)(a2 + 48);
  sub_215DFF824(v8, &v27);
  sub_215DFF824(v8, v28);
  uint64_t v9 = sub_215D204B8((uint64_t)&v18);
  sub_215D212CC((uint64_t)v16, v9);
  long long v10 = v16[3];
  *(_OWORD *)(a3 + 32) = v16[2];
  *(_OWORD *)(a3 + 48) = v10;
  long long v11 = v16[1];
  *(_OWORD *)a3 = v16[0];
  *(_OWORD *)(a3 + 16) = v11;
  long long v12 = v17;
  long long v17 = 0uLL;
  char v13 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v16[4];
  *(_OWORD *)(a3 + 80) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v14 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = v29;
  if (v29)
  {
    if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_215A1981C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A19830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A19844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A19858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1986C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A19880(void *a1, uint64_t a2)
{
  unsigned int v39 = 0;
  sub_215DFF824(a1[6], &v39);
  *(_DWORD *)a2 = v39;
  sub_215D1C910((int *)a2);
  int v4 = *(_DWORD *)a2;
  if (!v6 & v5)
  {
    switch(v4)
    {
      case 'd':
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v8 = a2 + 8;
        uint64_t v7 = v9;
        if (!v9) {
          goto LABEL_29;
        }
        uint64_t v10 = v7(3, v8, 0, &unk_26C676720, &unk_215ED39E0);
        if (!v10) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A18778((uint64_t)&v39, a1, v10, v39);
        break;
      case 'e':
        long long v29 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v28 = a2 + 8;
        int v27 = v29;
        if (!v29) {
          goto LABEL_29;
        }
        uint64_t v30 = v27(3, v28, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v30) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A18C24((uint64_t)&v39, a1, v30, v39);
        break;
      case 'n':
        long long v33 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v32 = a2 + 8;
        long long v31 = v33;
        if (!v33) {
          goto LABEL_29;
        }
        uint64_t v34 = v31(3, v32, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v34) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A18FFC((uint64_t)&v39, a1, v34, v39);
        break;
      case 'o':
        v37 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v36 = a2 + 8;
        long long v35 = v37;
        if (!v37 || (uint64_t v38 = v35(3, v36, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
LABEL_29:
        }
          sub_215A0E034();
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A194A8((uint64_t)&v39, a1, v38, v39);
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v4)
    {
      case 0:
        char v13 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v12 = a2 + 8;
        long long v11 = v13;
        if (!v13) {
          goto LABEL_29;
        }
        uint64_t v14 = v11(3, v12, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v14) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A175E8((uint64_t)&v39, a1, v14, v39);
        break;
      case 1:
        long long v17 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v16 = a2 + 8;
        long long v15 = v17;
        if (!v17) {
          goto LABEL_29;
        }
        uint64_t v18 = v15(3, v16, 0, &unk_26C676630, &unk_215ED3760);
        if (!v18) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A179EC((uint64_t)&v39, a1, v18, v39);
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        double v21 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v20 = a2 + 8;
        double v19 = v21;
        if (!v21) {
          goto LABEL_29;
        }
        uint64_t v22 = v19(3, v20, 0, &unk_26C676680, &unk_215ED3834);
        if (!v22) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A17EB0((uint64_t)&v39, a1, v22, v39);
        break;
      case 11:
        double v25 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v24 = a2 + 8;
        double v23 = v25;
        if (!v25) {
          goto LABEL_29;
        }
        uint64_t v26 = v23(3, v24, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v26) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFF824(a1[6], &v39);
        sub_215A182B4((uint64_t)&v39, a1, v26, v39);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

void sub_215A19CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_215D23008(&v4);
  sub_215D1A748((uint64_t)v6, (uint64_t)&v4);
  int v4 = &unk_26C684548;
  uint64_t v3 = v5;
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_215A1CB1C(a2);
}

void sub_215A19EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A19F20(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "camera_type";
  *(void *)(a1 + 96) = 11;
  if (!v1) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215A1A604((void *)a1);
}

void sub_215A1A604(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  int v2 = (void **)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D3040C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)__p = v5;
  operator new();
}

void sub_215A1A6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A1A76C(uint64_t a1, float *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A1A894((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v11[0] = 2;
    v11[1] = a2 + 4;
    unint64_t v10 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v10, (uint64_t)v11);
  }
}

void sub_215A1A894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v22 = 0;
  uint64_t v23 = 0;
  v24[0] = 0;
  int v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C6842C8;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C65A0D8;
  v24[1] = v5 + 24;
  double v25 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v8, (float *)&v22);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v10, (float *)&v23);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v26[0] = 2;
  v26[1] = v24;
  unint64_t v12 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1424(v12, (uint64_t)v26);
  uint64_t v13 = sub_215D22318(&v22);
  long long v21 = *(_OWORD *)(v13 + 16);
  uint64_t v14 = *(void *)(v13 + 88);
  long long v15 = (char *)operator new(0x78uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)long long v15 = &unk_26C684408;
  long long v16 = *(_OWORD *)(v13 + 16);
  *((void *)v15 + 4) = &unk_26C65A188;
  *(_OWORD *)(v15 + 40) = v16;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(v13 + 32);
  long long v17 = *(_OWORD *)(v13 + 48);
  long long v18 = *(_OWORD *)(v13 + 64);
  *((_DWORD *)v15 + 26) = *(_DWORD *)(v13 + 80);
  *(_OWORD *)(v15 + 88) = v18;
  *(_OWORD *)(v15 + 72) = v17;
  *((void *)v15 + 14) = v14;
  *((void *)v15 + 3) = &unk_26C65A0D8;
  *(_OWORD *)a3 = v21;
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v15 + 24;
  double v19 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v15;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_215A1AB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1AB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1ABA8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A1ACD0((uint64_t)v11, a1, (void *)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v6, (double *)a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v8, (double *)(a2 + 16));
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v11[0] = 2;
    v11[1] = a2 + 32;
    unint64_t v10 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v10, (uint64_t)v11);
  }
}

void sub_215A1ACD0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  int v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C684368;
  long long v39 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v39;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659C48;
  uint64_t v36 = v5 + 24;
  v37 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v8, (double *)&v33);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v10, (double *)&v34);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v38[0] = 2;
  v38[1] = &v35;
  unint64_t v12 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1424(v12, (uint64_t)v38);
  long long v13 = v33;
  long long v14 = v34;
  double v15 = 1.0 / *(double *)&v33;
  uint64_t v16 = v35;
  long long v17 = v36;
  *((_OWORD *)v36 + 1) = v33;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((void *)v17 + 10) = v13;
  *((void *)v17 + 12) = 0;
  *((void *)v17 + 13) = 0;
  *((void *)v17 + 11) = 0;
  *((void *)v17 + 14) = *((void *)&v13 + 1);
  *((void *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((void *)v17 + 18) = 0x3FF0000000000000;
  *((void *)v17 + 19) = v16;
  long long v18 = v36;
  double v19 = v36 + 16;
  uint64_t v20 = *((void *)v36 + 2);
  uint64_t v21 = *((void *)v36 + 3);
  float32x2_t v22 = v36 + 32;
  uint64_t v23 = *((void *)v36 + 4);
  uint64_t v24 = *((void *)v36 + 5);
  uint64_t v25 = *((void *)v36 + 19);
  uint64_t v26 = (char *)operator new(0xB8uLL);
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 2) = 0;
  *(void *)uint64_t v26 = &unk_26C6844A8;
  *((void *)v26 + 4) = &unk_26C659958;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  long long v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  long long v28 = *((_OWORD *)v18 + 6);
  long long v29 = *((_OWORD *)v18 + 7);
  long long v30 = *((_OWORD *)v18 + 8);
  *((void *)v26 + 21) = *((void *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((void *)v26 + 22) = v25;
  *((void *)v26 + 3) = &unk_26C659C48;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  long long v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = v37;
  if (v37)
  {
    if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_215A1B07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1B090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1B0A4(uint64_t a1, float *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A1B1CC((uint64_t)v11, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v11[0] = 2;
    v11[1] = a2 + 4;
    unint64_t v10 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v10, (uint64_t)v11);
  }
}

void sub_215A1B1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v22 = 0;
  uint64_t v23 = 0;
  v24[0] = 0;
  int v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C684318;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C659DE8;
  v24[1] = v5 + 24;
  uint64_t v25 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v8, (float *)&v22);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v10, (float *)&v23);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v26[0] = 2;
  v26[1] = v24;
  unint64_t v12 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1424(v12, (uint64_t)v26);
  uint64_t v13 = sub_215D22318(&v22);
  long long v21 = *(_OWORD *)(v13 + 16);
  uint64_t v14 = *(void *)(v13 + 88);
  double v15 = (char *)operator new(0x78uLL);
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = 0;
  *(void *)double v15 = &unk_26C684458;
  long long v16 = *(_OWORD *)(v13 + 16);
  *((void *)v15 + 4) = &unk_26C65A188;
  *(_OWORD *)(v15 + 40) = v16;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(v13 + 32);
  long long v17 = *(_OWORD *)(v13 + 48);
  long long v18 = *(_OWORD *)(v13 + 64);
  *((_DWORD *)v15 + 26) = *(_DWORD *)(v13 + 80);
  *(_OWORD *)(v15 + 88) = v18;
  *(_OWORD *)(v15 + 72) = v17;
  *((void *)v15 + 14) = v14;
  *((void *)v15 + 3) = &unk_26C659DE8;
  *(_OWORD *)a3 = v21;
  *(void *)(a3 + 16) = v14;
  *(void *)(a3 + 24) = v15 + 24;
  double v19 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v15;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_215A1B4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1B4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1B4E0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A1B608((uint64_t)v11, a1, (void *)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v6, (double *)a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v8, (double *)(a2 + 16));
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v11[0] = 2;
    v11[1] = a2 + 32;
    unint64_t v10 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v10, (uint64_t)v11);
  }
}

void sub_215A1B608(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  int v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C6843B8;
  long long v39 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v39;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659A48;
  uint64_t v36 = v5 + 24;
  v37 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v8, (double *)&v33);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v10, (double *)&v34);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v38[0] = 2;
  v38[1] = &v35;
  unint64_t v12 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1424(v12, (uint64_t)v38);
  long long v13 = v33;
  long long v14 = v34;
  double v15 = 1.0 / *(double *)&v33;
  uint64_t v16 = v35;
  long long v17 = v36;
  *((_OWORD *)v36 + 1) = v33;
  *((_OWORD *)v17 + 2) = v14;
  *((double *)v17 + 6) = v15;
  *((double *)v17 + 7) = 1.0 / *((double *)&v13 + 1);
  *((double *)v17 + 8) = -(*(double *)&v14 * v15);
  *((double *)v17 + 9) = -(*((double *)&v14 + 1) * (1.0 / *((double *)&v13 + 1)));
  *((void *)v17 + 10) = v13;
  *((void *)v17 + 12) = 0;
  *((void *)v17 + 13) = 0;
  *((void *)v17 + 11) = 0;
  *((void *)v17 + 14) = *((void *)&v13 + 1);
  *((void *)v17 + 15) = 0;
  *((_OWORD *)v17 + 8) = v14;
  *((void *)v17 + 18) = 0x3FF0000000000000;
  *((void *)v17 + 19) = v16;
  long long v18 = v36;
  double v19 = v36 + 16;
  uint64_t v20 = *((void *)v36 + 2);
  uint64_t v21 = *((void *)v36 + 3);
  float32x2_t v22 = v36 + 32;
  uint64_t v23 = *((void *)v36 + 4);
  uint64_t v24 = *((void *)v36 + 5);
  uint64_t v25 = *((void *)v36 + 19);
  uint64_t v26 = (char *)operator new(0xB8uLL);
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 2) = 0;
  *(void *)uint64_t v26 = &unk_26C6844F8;
  *((void *)v26 + 4) = &unk_26C659958;
  *(_OWORD *)(v26 + 40) = *v19;
  *(_OWORD *)(v26 + 56) = *v22;
  long long v27 = *((_OWORD *)v18 + 3);
  *(_OWORD *)(v26 + 88) = *((_OWORD *)v18 + 4);
  *(_OWORD *)(v26 + 72) = v27;
  long long v28 = *((_OWORD *)v18 + 6);
  long long v29 = *((_OWORD *)v18 + 7);
  long long v30 = *((_OWORD *)v18 + 8);
  *((void *)v26 + 21) = *((void *)v18 + 18);
  *(_OWORD *)(v26 + 152) = v30;
  *(_OWORD *)(v26 + 136) = v29;
  *(_OWORD *)(v26 + 120) = v28;
  *(_OWORD *)(v26 + 104) = *((_OWORD *)v18 + 5);
  *((void *)v26 + 22) = v25;
  *((void *)v26 + 3) = &unk_26C659A48;
  *a3 = v20;
  a3[1] = v21;
  a3[2] = v23;
  a3[3] = v24;
  a3[4] = v25;
  a3[5] = v26 + 24;
  long long v31 = (std::__shared_weak_count *)a3[6];
  a3[6] = v26;
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = v37;
  if (v37)
  {
    if (!atomic_fetch_add(&v37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_215A1B9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1B9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1B9DC(uint64_t a1, float *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A1BB44((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "distortion_coeff";
    *(void *)(a1 + 96) = 16;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v10 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v10, a2 + 4);
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v13[0] = 2;
    v13[1] = a2 + 9;
    unint64_t v12 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v12, (uint64_t)v13);
  }
}

void sub_215A1BB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v21 = 0u;
  memset(v22, 0, 28);
  int v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C684000;
  *(_OWORD *)&v26[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v26[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659FA8;
  uint64_t v23 = v5 + 24;
  uint64_t v24 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v8, (float *)&v21);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v10, (float *)&v21 + 2);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "distortion_coeff";
  *(void *)(a2 + 96) = 16;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v12 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v12, v22);
  int v13 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v13) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(void *)&long long v25 = 2;
  *((void *)&v25 + 1) = &v22[5];
  unint64_t v14 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1424(v14, (uint64_t)&v25);
  uint64_t v15 = sub_215D20250((uint64_t)&v21);
  sub_215D20788((uint64_t)&v25, v15);
  long long v16 = *(_OWORD *)v26;
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = v16;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v26[12];
  long long v17 = v27;
  long long v27 = 0uLL;
  long long v18 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v17;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  double v19 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_215A1BE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1BE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1BE98(uint64_t a1, double *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A1C000((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "distortion_coeff";
    *(void *)(a1 + 96) = 16;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v10 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v10, a2 + 4);
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v13[0] = 2;
    v13[1] = a2 + 9;
    unint64_t v12 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v12, (uint64_t)v13);
  }
}

void sub_215A1C000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2037C((uint64_t)v22);
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v5) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v6, v22);
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v8, &v23);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "distortion_coeff";
  *(void *)(a2 + 96) = 16;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v10, &v24);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(void *)&v20[0] = 2;
  *((void *)&v20[0] + 1) = &v25;
  unint64_t v12 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1424(v12, (uint64_t)v20);
  uint64_t v13 = sub_215D204B8((uint64_t)v22);
  sub_215D20E5C((uint64_t)v20, v13);
  long long v14 = v20[3];
  *(_OWORD *)(a3 + 32) = v20[2];
  *(_OWORD *)(a3 + 48) = v14;
  long long v15 = v20[1];
  *(_OWORD *)a3 = v20[0];
  *(_OWORD *)(a3 + 16) = v15;
  long long v16 = v21;
  long long v21 = 0uLL;
  long long v17 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v20[4];
  *(_OWORD *)(a3 + 80) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  double v19 = v26;
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_215A1C254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1C268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1C27C(uint64_t a1, float *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A1C3E4((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "distortion_coeff";
    *(void *)(a1 + 96) = 16;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v10 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v10, a2 + 4);
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v13[0] = 2;
    v13[1] = a2 + 9;
    unint64_t v12 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v12, (uint64_t)v13);
  }
}

void sub_215A1C3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v21 = 0u;
  memset(v22, 0, 28);
  int v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)int v5 = &unk_26C684050;
  *(_OWORD *)&v26[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v26[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659ED8;
  double v23 = v5 + 24;
  double v24 = (std::__shared_weak_count *)v5;
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v8, (float *)&v21);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v10, (float *)&v21 + 2);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "distortion_coeff";
  *(void *)(a2 + 96) = 16;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v12 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1750(v12, v22);
  int v13 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v13) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(void *)&long long v25 = 2;
  *((void *)&v25 + 1) = &v22[5];
  unint64_t v14 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1424(v14, (uint64_t)&v25);
  uint64_t v15 = sub_215D20250((uint64_t)&v21);
  sub_215D20A54((uint64_t)&v25, v15);
  long long v16 = *(_OWORD *)v26;
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = v16;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v26[12];
  long long v17 = v27;
  long long v27 = 0uLL;
  long long v18 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v17;
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  double v19 = (std::__shared_weak_count *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_215A1C710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1C724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1C738(uint64_t a1, double *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A1C8A0((uint64_t)v13, a1, (uint64_t)a2);
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "focal_length";
    *(void *)(a1 + 96) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v6 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v6, a2);
    int v7 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "principal_point";
    *(void *)(a1 + 96) = 15;
    if (!v7) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v8 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v8, a2 + 2);
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "distortion_coeff";
    *(void *)(a1 + 96) = 16;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unint64_t v10 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1894(v10, a2 + 4);
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "image_size";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    v13[0] = 2;
    v13[1] = a2 + 9;
    unint64_t v12 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v12, (uint64_t)v13);
  }
}

void sub_215A1C8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2064C((uint64_t)v22);
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "focal_length";
  *(void *)(a2 + 96) = 12;
  if (!v5) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v6, v22);
  int v7 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "principal_point";
  *(void *)(a2 + 96) = 15;
  if (!v7) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v8 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v8, &v23);
  int v9 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "distortion_coeff";
  *(void *)(a2 + 96) = 16;
  if (!v9) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1894(v10, &v24);
  int v11 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "image_size";
  *(void *)(a2 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  *(void *)&v20[0] = 2;
  *((void *)&v20[0] + 1) = &v25;
  unint64_t v12 = sub_215DF045C((void *)a2);
  ++*(void *)(a2 + 112);
  sub_215DF1424(v12, (uint64_t)v20);
  uint64_t v13 = sub_215D204B8((uint64_t)v22);
  sub_215D212CC((uint64_t)v20, v13);
  long long v14 = v20[3];
  *(_OWORD *)(a3 + 32) = v20[2];
  *(_OWORD *)(a3 + 48) = v14;
  long long v15 = v20[1];
  *(_OWORD *)a3 = v20[0];
  *(_OWORD *)(a3 + 16) = v15;
  long long v16 = v21;
  long long v21 = 0uLL;
  long long v17 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v20[4];
  *(_OWORD *)(a3 + 80) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  double v19 = v26;
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_215A1CAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1CB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1CB1C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "camera_type";
  *(void *)(a1 + 96) = 11;
  if (!v1) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215A1A604((void *)a1);
}

void *sub_215A1D200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[4] = *MEMORY[0x263EF8340];
  sub_215D23008(&v10);
  sub_215D1A748((uint64_t)&v13, (uint64_t)&v10);
  unint64_t v10 = &unk_26C684548;
  int v5 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_215A1FC44(a2, (uint64_t)&v13);
  sub_215D1BF64(&v13, v8);
  sub_215D1CFB4((uint64_t)&v10, (uint64_t)v8);
  v8[0] = &unk_26C684548;
  unint64_t v6 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(_DWORD *)a3 = v10;
  uint64_t result = sub_2158281D0((void *)(a3 + 8), &v11);
  if (v11) {
    uint64_t result = (void *)((uint64_t (*)(void, void (**)(uint64_t), void, void, void))v11)(0, &v11, 0, 0, 0);
  }
  if (v14[0]) {
    return (void *)((uint64_t (*)(void, void *, void, void, void))v14[0])(0, v14, 0, 0, 0);
  }
  return result;
}

void sub_215A1D3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A1D448(uint64_t a1, uint64_t a2)
{
  unsigned int v39 = 0;
  sub_215DFABD4(a1, &v39);
  *(_DWORD *)a2 = v39;
  sub_215D1E51C((int *)a2);
  int v4 = *(_DWORD *)a2;
  if (!v6 & v5)
  {
    switch(v4)
    {
      case 'd':
        int v9 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v8 = a2 + 8;
        int v7 = v9;
        if (!v9) {
          goto LABEL_29;
        }
        unint64_t v10 = (_DWORD *)v7(3, v8, 0, &unk_26C676720, &unk_215ED39E0);
        if (!v10) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFABD4(a1, &v39);
        sub_215A1EAAC((uint64_t)&v39, a1, v10, v39);
        break;
      case 'e':
        long long v29 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v28 = a2 + 8;
        long long v27 = v29;
        if (!v29) {
          goto LABEL_29;
        }
        uint64_t v30 = v27(3, v28, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v30) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFABD4(a1, &v39);
        sub_215A1EF7C((uint64_t)&v39, a1, v30, v39);
        break;
      case 'n':
        long long v33 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v32 = a2 + 8;
        long long v31 = v33;
        if (!v33) {
          goto LABEL_29;
        }
        long long v34 = (_DWORD *)v31(3, v32, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v34) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFABD4(a1, &v39);
        sub_215A1F378((uint64_t)&v39, a1, v34, v39);
        break;
      case 'o':
        v37 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v36 = a2 + 8;
        uint64_t v35 = v37;
        if (!v37 || (uint64_t v38 = v35(3, v36, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
LABEL_29:
        }
          sub_215A0E034();
        unsigned int v39 = 2;
        sub_215DFABD4(a1, &v39);
        sub_215A1F848((uint64_t)&v39, a1, v38, v39);
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v4)
    {
      case 0:
        int v13 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v12 = a2 + 8;
        int v11 = v13;
        if (!v13) {
          goto LABEL_29;
        }
        long long v14 = (_DWORD *)v11(3, v12, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v14) {
          goto LABEL_29;
        }
        sub_215A1D82C((uint64_t)&v39, a1, v14);
        break;
      case 1:
        long long v17 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v16 = a2 + 8;
        long long v15 = v17;
        if (!v17) {
          goto LABEL_29;
        }
        uint64_t v18 = v15(3, v16, 0, &unk_26C676630, &unk_215ED3760);
        if (!v18) {
          goto LABEL_29;
        }
        sub_215A1DC6C((uint64_t)&v39, a1, v18);
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        long long v21 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v20 = a2 + 8;
        double v19 = v21;
        if (!v21) {
          goto LABEL_29;
        }
        float32x2_t v22 = (_DWORD *)v19(3, v20, 0, &unk_26C676680, &unk_215ED3834);
        if (!v22) {
          goto LABEL_29;
        }
        sub_215A1E16C((uint64_t)&v39, a1, v22);
        break;
      case 11:
        uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v24 = a2 + 8;
        double v23 = v25;
        if (!v25) {
          goto LABEL_29;
        }
        uint64_t v26 = v23(3, v24, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v26) {
          goto LABEL_29;
        }
        sub_215A1E5AC((uint64_t)&v39, a1, v26);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

void sub_215A1D82C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  LODWORD(__p[0]) = 2;
  sub_215DFABD4(a2, __p);
  unsigned int v5 = __p[0];
  if (LODWORD(__p[0]) >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = __p[0];
  }
  if (v6 < 2)
  {
    sub_215A1D9A4((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2) {
      return;
    }
  }
  else
  {
    sub_215DFBEC8(a2, a3);
    sub_215DFBEC8(a2, a3 + 1);
    sub_215DFBEC8(a2, a3 + 2);
    sub_215DFBEC8(a2, a3 + 3);
    sub_215DFABD4(a2, a3 + 4);
    sub_215DFABD4(a2, a3 + 5);
    if (v5 < 2) {
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          char v8 = 0;
          if (v10 < 0) {
            goto LABEL_24;
          }
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      char v8 = 1;
      if (v10 < 0) {
LABEL_24:
      }
        operator delete(__p[0]);
LABEL_10:
      if (*(unsigned char *)(a2 + 131)) {
        char v7 = 0;
      }
      else {
        char v7 = v8;
      }
    }
    while ((v7 & 1) != 0);
  }
}

void sub_215A1D9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v16 = 0;
  uint64_t v17 = 0;
  v18[0] = 0;
  unsigned int v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)unsigned int v5 = &unk_26C6842C8;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C65A0D8;
  v18[1] = v5 + 24;
  double v19 = (std::__shared_weak_count *)v5;
  sub_215DFBEC8(a2, &v16);
  sub_215DFBEC8(a2, (_DWORD *)&v16 + 1);
  sub_215DFBEC8(a2, &v17);
  sub_215DFBEC8(a2, (_DWORD *)&v17 + 1);
  sub_215DFABD4(a2, v18);
  sub_215DFABD4(a2, (_DWORD *)v18 + 1);
  uint64_t v7 = sub_215D22318(&v16);
  long long v15 = *(_OWORD *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 88);
  int v9 = (char *)operator new(0x78uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int v9 = &unk_26C684408;
  long long v10 = *(_OWORD *)(v7 + 16);
  *((void *)v9 + 4) = &unk_26C65A188;
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v7 + 32);
  long long v11 = *(_OWORD *)(v7 + 48);
  long long v12 = *(_OWORD *)(v7 + 64);
  *((_DWORD *)v9 + 26) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(v9 + 88) = v12;
  *(_OWORD *)(v9 + 72) = v11;
  *((void *)v9 + 14) = v8;
  *((void *)v9 + 3) = &unk_26C65A0D8;
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9 + 24;
  int v13 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v9;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  long long v14 = v19;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_215A1DC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1DC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1DC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1DC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1DC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(__p[0]) = 2;
  sub_215DFABD4(a2, __p);
  unsigned int v5 = __p[0];
  if (LODWORD(__p[0]) >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = __p[0];
  }
  if (v6 < 2)
  {
    sub_215A1DDE4((uint64_t)__p, a2, (void *)a3);
    if (v5 < 2) {
      return;
    }
  }
  else
  {
    sub_215DFC1E8(a2, (void *)a3);
    sub_215DFC1E8(a2, (void *)(a3 + 8));
    sub_215DFC1E8(a2, (void *)(a3 + 16));
    sub_215DFC1E8(a2, (void *)(a3 + 24));
    sub_215DFABD4(a2, (_DWORD *)(a3 + 32));
    sub_215DFABD4(a2, (_DWORD *)(a3 + 36));
    if (v5 < 2) {
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          char v8 = 0;
          if (v10 < 0) {
            goto LABEL_24;
          }
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      char v8 = 1;
      if (v10 < 0) {
LABEL_24:
      }
        operator delete(__p[0]);
LABEL_10:
      if (*(unsigned char *)(a2 + 131)) {
        char v7 = 0;
      }
      else {
        char v7 = v8;
      }
    }
    while ((v7 & 1) != 0);
  }
}

void sub_215A1DDE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  unsigned int v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)unsigned int v5 = &unk_26C684368;
  long long v32 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v32;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659C48;
  uint64_t v30 = v5 + 24;
  long long v31 = (std::__shared_weak_count *)v5;
  sub_215DFC1E8(a2, &v27);
  sub_215DFC1E8(a2, (void *)&v27 + 1);
  sub_215DFC1E8(a2, &v28);
  sub_215DFC1E8(a2, (void *)&v28 + 1);
  sub_215DFABD4(a2, &v29);
  sub_215DFABD4(a2, (_DWORD *)&v29 + 1);
  long long v7 = v27;
  long long v8 = v28;
  double v9 = 1.0 / *(double *)&v27;
  uint64_t v10 = v29;
  long long v11 = v30;
  *((_OWORD *)v30 + 1) = v27;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((void *)v11 + 10) = v7;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 14) = *((void *)&v7 + 1);
  *((void *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((void *)v11 + 18) = 0x3FF0000000000000;
  *((void *)v11 + 19) = v10;
  long long v12 = v30;
  int v13 = v30 + 16;
  uint64_t v14 = *((void *)v30 + 2);
  uint64_t v15 = *((void *)v30 + 3);
  float32x2_t v16 = v30 + 32;
  uint64_t v17 = *((void *)v30 + 4);
  uint64_t v18 = *((void *)v30 + 5);
  uint64_t v19 = *((void *)v30 + 19);
  uint64_t v20 = (char *)operator new(0xB8uLL);
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *(void *)uint64_t v20 = &unk_26C6844A8;
  *((void *)v20 + 4) = &unk_26C659958;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  long long v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  long long v22 = *((_OWORD *)v12 + 6);
  long long v23 = *((_OWORD *)v12 + 7);
  long long v24 = *((_OWORD *)v12 + 8);
  *((void *)v20 + 21) = *((void *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((void *)v20 + 22) = v19;
  *((void *)v20 + 3) = &unk_26C659C48;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  uint64_t v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v31;
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_215A1E11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1E130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1E144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1E158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1E16C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  LODWORD(__p[0]) = 2;
  sub_215DFABD4(a2, __p);
  unsigned int v5 = __p[0];
  if (LODWORD(__p[0]) >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = __p[0];
  }
  if (v6 < 2)
  {
    sub_215A1E2E4((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2) {
      return;
    }
  }
  else
  {
    sub_215DFBEC8(a2, a3);
    sub_215DFBEC8(a2, a3 + 1);
    sub_215DFBEC8(a2, a3 + 2);
    sub_215DFBEC8(a2, a3 + 3);
    sub_215DFABD4(a2, a3 + 4);
    sub_215DFABD4(a2, a3 + 5);
    if (v5 < 2) {
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          char v8 = 0;
          if (v10 < 0) {
            goto LABEL_24;
          }
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      char v8 = 1;
      if (v10 < 0) {
LABEL_24:
      }
        operator delete(__p[0]);
LABEL_10:
      if (*(unsigned char *)(a2 + 131)) {
        char v7 = 0;
      }
      else {
        char v7 = v8;
      }
    }
    while ((v7 & 1) != 0);
  }
}

void sub_215A1E2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v16 = 0;
  uint64_t v17 = 0;
  v18[0] = 0;
  unsigned int v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)unsigned int v5 = &unk_26C684318;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C659DE8;
  v18[1] = v5 + 24;
  uint64_t v19 = (std::__shared_weak_count *)v5;
  sub_215DFBEC8(a2, &v16);
  sub_215DFBEC8(a2, (_DWORD *)&v16 + 1);
  sub_215DFBEC8(a2, &v17);
  sub_215DFBEC8(a2, (_DWORD *)&v17 + 1);
  sub_215DFABD4(a2, v18);
  sub_215DFABD4(a2, (_DWORD *)v18 + 1);
  uint64_t v7 = sub_215D22318(&v16);
  long long v15 = *(_OWORD *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 88);
  double v9 = (char *)operator new(0x78uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)double v9 = &unk_26C684458;
  long long v10 = *(_OWORD *)(v7 + 16);
  *((void *)v9 + 4) = &unk_26C65A188;
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v7 + 32);
  long long v11 = *(_OWORD *)(v7 + 48);
  long long v12 = *(_OWORD *)(v7 + 64);
  *((_DWORD *)v9 + 26) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(v9 + 88) = v12;
  *(_OWORD *)(v9 + 72) = v11;
  *((void *)v9 + 14) = v8;
  *((void *)v9 + 3) = &unk_26C659DE8;
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9 + 24;
  int v13 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v9;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v19;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_215A1E55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1E570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1E584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1E598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1E5AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(__p[0]) = 2;
  sub_215DFABD4(a2, __p);
  unsigned int v5 = __p[0];
  if (LODWORD(__p[0]) >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = __p[0];
  }
  if (v6 < 2)
  {
    sub_215A1E724((uint64_t)__p, a2, (void *)a3);
    if (v5 < 2) {
      return;
    }
  }
  else
  {
    sub_215DFC1E8(a2, (void *)a3);
    sub_215DFC1E8(a2, (void *)(a3 + 8));
    sub_215DFC1E8(a2, (void *)(a3 + 16));
    sub_215DFC1E8(a2, (void *)(a3 + 24));
    sub_215DFABD4(a2, (_DWORD *)(a3 + 32));
    sub_215DFABD4(a2, (_DWORD *)(a3 + 36));
    if (v5 < 2) {
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          char v8 = 0;
          if (v10 < 0) {
            goto LABEL_24;
          }
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      char v8 = 1;
      if (v10 < 0) {
LABEL_24:
      }
        operator delete(__p[0]);
LABEL_10:
      if (*(unsigned char *)(a2 + 131)) {
        char v7 = 0;
      }
      else {
        char v7 = v8;
      }
    }
    while ((v7 & 1) != 0);
  }
}

void sub_215A1E724(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  unsigned int v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)unsigned int v5 = &unk_26C6843B8;
  long long v32 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v32;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659A48;
  uint64_t v30 = v5 + 24;
  long long v31 = (std::__shared_weak_count *)v5;
  sub_215DFC1E8(a2, &v27);
  sub_215DFC1E8(a2, (void *)&v27 + 1);
  sub_215DFC1E8(a2, &v28);
  sub_215DFC1E8(a2, (void *)&v28 + 1);
  sub_215DFABD4(a2, &v29);
  sub_215DFABD4(a2, (_DWORD *)&v29 + 1);
  long long v7 = v27;
  long long v8 = v28;
  double v9 = 1.0 / *(double *)&v27;
  uint64_t v10 = v29;
  long long v11 = v30;
  *((_OWORD *)v30 + 1) = v27;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((void *)v11 + 10) = v7;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 14) = *((void *)&v7 + 1);
  *((void *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((void *)v11 + 18) = 0x3FF0000000000000;
  *((void *)v11 + 19) = v10;
  long long v12 = v30;
  int v13 = v30 + 16;
  uint64_t v14 = *((void *)v30 + 2);
  uint64_t v15 = *((void *)v30 + 3);
  float32x2_t v16 = v30 + 32;
  uint64_t v17 = *((void *)v30 + 4);
  uint64_t v18 = *((void *)v30 + 5);
  uint64_t v19 = *((void *)v30 + 19);
  uint64_t v20 = (char *)operator new(0xB8uLL);
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *(void *)uint64_t v20 = &unk_26C6844F8;
  *((void *)v20 + 4) = &unk_26C659958;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  long long v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  long long v22 = *((_OWORD *)v12 + 6);
  long long v23 = *((_OWORD *)v12 + 7);
  long long v24 = *((_OWORD *)v12 + 8);
  *((void *)v20 + 21) = *((void *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((void *)v20 + 22) = v19;
  *((void *)v20 + 3) = &unk_26C659A48;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  uint64_t v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v31;
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_215A1EA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1EA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1EA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1EA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1EAAC(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4 = a4;
  if (a4 >= 2) {
    a4 = 2;
  }
  if (a4 < 2)
  {
    sub_215A1EC50((uint64_t)__p, a2, (uint64_t)a3);
    if (v4 < 2) {
      return;
    }
  }
  else
  {
    sub_215DFBEC8(a2, a3);
    sub_215DFBEC8(a2, a3 + 1);
    sub_215DFBEC8(a2, a3 + 2);
    sub_215DFBEC8(a2, a3 + 3);
    sub_215DFBEC8(a2, a3 + 4);
    sub_215DFBEC8(a2, a3 + 5);
    sub_215DFBEC8(a2, a3 + 6);
    sub_215DFBEC8(a2, a3 + 7);
    sub_215DFBEC8(a2, a3 + 8);
    sub_215DFABD4(a2, a3 + 9);
    sub_215DFABD4(a2, a3 + 10);
    if (v4 < 2) {
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          char v8 = 0;
          if (v10 < 0) {
            goto LABEL_23;
          }
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      char v8 = 1;
      if (v10 < 0) {
LABEL_23:
      }
        operator delete(__p[0]);
LABEL_9:
      if (*(unsigned char *)(a2 + 131)) {
        char v7 = 0;
      }
      else {
        char v7 = v8;
      }
    }
    while ((v7 & 1) != 0);
  }
}

void sub_215A1EC50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v13 = 0u;
  memset(v14, 0, 28);
  unsigned int v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)unsigned int v5 = &unk_26C684000;
  *(_OWORD *)&v18[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v18[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659FA8;
  uint64_t v15 = v5 + 24;
  float32x2_t v16 = (std::__shared_weak_count *)v5;
  sub_215DFBEC8(a2, &v13);
  sub_215DFBEC8(a2, (_DWORD *)&v13 + 1);
  sub_215DFBEC8(a2, (_DWORD *)&v13 + 2);
  sub_215DFBEC8(a2, (_DWORD *)((unint64_t)&v13 | 0xC));
  sub_215DFBEC8(a2, v14);
  sub_215DFBEC8(a2, &v14[1]);
  sub_215DFBEC8(a2, &v14[2]);
  sub_215DFBEC8(a2, &v14[3]);
  sub_215DFBEC8(a2, &v14[4]);
  sub_215DFABD4(a2, &v14[5]);
  sub_215DFABD4(a2, &v14[6]);
  uint64_t v7 = sub_215D20250((uint64_t)&v13);
  sub_215D20788((uint64_t)&v17, v7);
  long long v8 = *(_OWORD *)v18;
  *(_OWORD *)a3 = v17;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v18[12];
  long long v9 = v19;
  long long v19 = 0uLL;
  char v10 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v19 + 1);
  if (*((void *)&v19 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = v16;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_215A1EF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1EF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1EF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1EF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1EF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1EF7C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = a4;
  if (a4 >= 2) {
    a4 = 2;
  }
  if (a4 < 2)
  {
    sub_215A1F120((uint64_t)__p, a2, a3);
    if (v4 < 2) {
      return;
    }
  }
  else
  {
    sub_215DFC1E8(a2, (void *)a3);
    sub_215DFC1E8(a2, (void *)(a3 + 8));
    sub_215DFC1E8(a2, (void *)(a3 + 16));
    sub_215DFC1E8(a2, (void *)(a3 + 24));
    sub_215DFC1E8(a2, (void *)(a3 + 32));
    sub_215DFC1E8(a2, (void *)(a3 + 40));
    sub_215DFC1E8(a2, (void *)(a3 + 48));
    sub_215DFC1E8(a2, (void *)(a3 + 56));
    sub_215DFC1E8(a2, (void *)(a3 + 64));
    sub_215DFABD4(a2, (_DWORD *)(a3 + 72));
    sub_215DFABD4(a2, (_DWORD *)(a3 + 76));
    if (v4 < 2) {
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          char v8 = 0;
          if (v10 < 0) {
            goto LABEL_23;
          }
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      char v8 = 1;
      if (v10 < 0) {
LABEL_23:
      }
        operator delete(__p[0]);
LABEL_9:
      if (*(unsigned char *)(a2 + 131)) {
        char v7 = 0;
      }
      else {
        char v7 = v8;
      }
    }
    while ((v7 & 1) != 0);
  }
}

void sub_215A1F120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2037C((uint64_t)&v14);
  sub_215DFC1E8(a2, &v14);
  sub_215DFC1E8(a2, &v15);
  sub_215DFC1E8(a2, &v16);
  sub_215DFC1E8(a2, &v17);
  sub_215DFC1E8(a2, &v18);
  sub_215DFC1E8(a2, &v19);
  sub_215DFC1E8(a2, &v20);
  sub_215DFC1E8(a2, &v21);
  sub_215DFC1E8(a2, &v22);
  sub_215DFABD4(a2, &v23);
  sub_215DFABD4(a2, v24);
  uint64_t v5 = sub_215D204B8((uint64_t)&v14);
  sub_215D20E5C((uint64_t)v12, v5);
  long long v6 = v12[3];
  *(_OWORD *)(a3 + 32) = v12[2];
  *(_OWORD *)(a3 + 48) = v6;
  long long v7 = v12[1];
  *(_OWORD *)a3 = v12[0];
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = v13;
  long long v13 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v12[4];
  *(_OWORD *)(a3 + 80) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  char v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_215A1F314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1F328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1F350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1F364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1F378(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4)
{
  unsigned int v4 = a4;
  if (a4 >= 2) {
    a4 = 2;
  }
  if (a4 < 2)
  {
    sub_215A1F51C((uint64_t)__p, a2, (uint64_t)a3);
    if (v4 < 2) {
      return;
    }
  }
  else
  {
    sub_215DFBEC8(a2, a3);
    sub_215DFBEC8(a2, a3 + 1);
    sub_215DFBEC8(a2, a3 + 2);
    sub_215DFBEC8(a2, a3 + 3);
    sub_215DFBEC8(a2, a3 + 4);
    sub_215DFBEC8(a2, a3 + 5);
    sub_215DFBEC8(a2, a3 + 6);
    sub_215DFBEC8(a2, a3 + 7);
    sub_215DFBEC8(a2, a3 + 8);
    sub_215DFABD4(a2, a3 + 9);
    sub_215DFABD4(a2, a3 + 10);
    if (v4 < 2) {
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          char v8 = 0;
          if (v10 < 0) {
            goto LABEL_23;
          }
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      char v8 = 1;
      if (v10 < 0) {
LABEL_23:
      }
        operator delete(__p[0]);
LABEL_9:
      if (*(unsigned char *)(a2 + 131)) {
        char v7 = 0;
      }
      else {
        char v7 = v8;
      }
    }
    while ((v7 & 1) != 0);
  }
}

void sub_215A1F51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v13 = 0u;
  memset(v14, 0, 28);
  uint64_t v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_26C684050;
  *(_OWORD *)&v18[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v18[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659ED8;
  uint64_t v15 = v5 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v5;
  sub_215DFBEC8(a2, &v13);
  sub_215DFBEC8(a2, (_DWORD *)&v13 + 1);
  sub_215DFBEC8(a2, (_DWORD *)&v13 + 2);
  sub_215DFBEC8(a2, (_DWORD *)((unint64_t)&v13 | 0xC));
  sub_215DFBEC8(a2, v14);
  sub_215DFBEC8(a2, &v14[1]);
  sub_215DFBEC8(a2, &v14[2]);
  sub_215DFBEC8(a2, &v14[3]);
  sub_215DFBEC8(a2, &v14[4]);
  sub_215DFABD4(a2, &v14[5]);
  sub_215DFABD4(a2, &v14[6]);
  uint64_t v7 = sub_215D20250((uint64_t)&v13);
  sub_215D20A54((uint64_t)&v17, v7);
  long long v8 = *(_OWORD *)v18;
  *(_OWORD *)a3 = v17;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v18[12];
  long long v9 = v19;
  long long v19 = 0uLL;
  char v10 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v19 + 1);
  if (*((void *)&v19 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = v16;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_215A1F7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1F7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1F80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1F820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1F834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A1F848(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = a4;
  if (a4 >= 2) {
    a4 = 2;
  }
  if (a4 < 2)
  {
    sub_215A1F9EC((uint64_t)__p, a2, a3);
    if (v4 < 2) {
      return;
    }
  }
  else
  {
    sub_215DFC1E8(a2, (void *)a3);
    sub_215DFC1E8(a2, (void *)(a3 + 8));
    sub_215DFC1E8(a2, (void *)(a3 + 16));
    sub_215DFC1E8(a2, (void *)(a3 + 24));
    sub_215DFC1E8(a2, (void *)(a3 + 32));
    sub_215DFC1E8(a2, (void *)(a3 + 40));
    sub_215DFC1E8(a2, (void *)(a3 + 48));
    sub_215DFC1E8(a2, (void *)(a3 + 56));
    sub_215DFC1E8(a2, (void *)(a3 + 64));
    sub_215DFABD4(a2, (_DWORD *)(a3 + 72));
    sub_215DFABD4(a2, (_DWORD *)(a3 + 76));
    if (v4 < 2) {
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          char v8 = 0;
          if (v10 < 0) {
            goto LABEL_23;
          }
          goto LABEL_9;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      char v8 = 1;
      if (v10 < 0) {
LABEL_23:
      }
        operator delete(__p[0]);
LABEL_9:
      if (*(unsigned char *)(a2 + 131)) {
        char v7 = 0;
      }
      else {
        char v7 = v8;
      }
    }
    while ((v7 & 1) != 0);
  }
}

void sub_215A1F9EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2064C((uint64_t)&v14);
  sub_215DFC1E8(a2, &v14);
  sub_215DFC1E8(a2, &v15);
  sub_215DFC1E8(a2, &v16);
  sub_215DFC1E8(a2, &v17);
  sub_215DFC1E8(a2, &v18);
  sub_215DFC1E8(a2, &v19);
  sub_215DFC1E8(a2, &v20);
  sub_215DFC1E8(a2, &v21);
  sub_215DFC1E8(a2, &v22);
  sub_215DFABD4(a2, &v23);
  sub_215DFABD4(a2, v24);
  uint64_t v5 = sub_215D204B8((uint64_t)&v14);
  sub_215D212CC((uint64_t)v12, v5);
  long long v6 = v12[3];
  *(_OWORD *)(a3 + 32) = v12[2];
  *(_OWORD *)(a3 + 48) = v6;
  long long v7 = v12[1];
  *(_OWORD *)a3 = v12[0];
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = v13;
  long long v13 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v12[4];
  *(_OWORD *)(a3 + 80) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  char v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = v25;
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_215A1FBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1FBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1FC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1FC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1FC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A1FC44(uint64_t a1, uint64_t a2)
{
  unsigned int v39 = 0;
  sub_215DFABD4(a1, &v39);
  *(_DWORD *)a2 = v39;
  sub_215D1C910((int *)a2);
  int v4 = *(_DWORD *)a2;
  if (!v6 & v5)
  {
    switch(v4)
    {
      case 'd':
        long long v9 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v8 = a2 + 8;
        long long v7 = v9;
        if (!v9) {
          goto LABEL_29;
        }
        char v10 = (_DWORD *)v7(3, v8, 0, &unk_26C676720, &unk_215ED39E0);
        if (!v10) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFABD4(a1, &v39);
        sub_215A1EAAC((uint64_t)&v39, a1, v10, v39);
        break;
      case 'e':
        uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v28 = a2 + 8;
        long long v27 = v29;
        if (!v29) {
          goto LABEL_29;
        }
        uint64_t v30 = v27(3, v28, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v30) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFABD4(a1, &v39);
        sub_215A1EF7C((uint64_t)&v39, a1, v30, v39);
        break;
      case 'n':
        uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v32 = a2 + 8;
        long long v31 = v33;
        if (!v33) {
          goto LABEL_29;
        }
        long long v34 = (_DWORD *)v31(3, v32, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v34) {
          goto LABEL_29;
        }
        unsigned int v39 = 2;
        sub_215DFABD4(a1, &v39);
        sub_215A1F378((uint64_t)&v39, a1, v34, v39);
        break;
      case 'o':
        v37 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v36 = a2 + 8;
        uint64_t v35 = v37;
        if (!v37 || (uint64_t v38 = v35(3, v36, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
LABEL_29:
        }
          sub_215A0E034();
        unsigned int v39 = 2;
        sub_215DFABD4(a1, &v39);
        sub_215A1F848((uint64_t)&v39, a1, v38, v39);
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v4)
    {
      case 0:
        long long v13 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v12 = a2 + 8;
        long long v11 = v13;
        if (!v13) {
          goto LABEL_29;
        }
        uint64_t v14 = (_DWORD *)v11(3, v12, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v14) {
          goto LABEL_29;
        }
        sub_215A1D82C((uint64_t)&v39, a1, v14);
        break;
      case 1:
        uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v16 = a2 + 8;
        uint64_t v15 = v17;
        if (!v17) {
          goto LABEL_29;
        }
        uint64_t v18 = v15(3, v16, 0, &unk_26C676630, &unk_215ED3760);
        if (!v18) {
          goto LABEL_29;
        }
        sub_215A1DC6C((uint64_t)&v39, a1, v18);
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v20 = a2 + 8;
        uint64_t v19 = v21;
        if (!v21) {
          goto LABEL_29;
        }
        uint64_t v22 = (_DWORD *)v19(3, v20, 0, &unk_26C676680, &unk_215ED3834);
        if (!v22) {
          goto LABEL_29;
        }
        sub_215A1E16C((uint64_t)&v39, a1, v22);
        break;
      case 11:
        uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v24 = a2 + 8;
        int v23 = v25;
        if (!v25) {
          goto LABEL_29;
        }
        uint64_t v26 = v23(3, v24, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v26) {
          goto LABEL_29;
        }
        sub_215A1E5AC((uint64_t)&v39, a1, v26);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

void sub_215A20028(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A20128((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A20370(a2, a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A20114(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A20128(uint64_t a1, void *a2, uint64_t a3)
{
  v14[4] = *MEMORY[0x263EF8340];
  sub_215D23008(&v10);
  sub_215D1A748((uint64_t)&v13, (uint64_t)&v10);
  uint64_t v10 = &unk_26C684548;
  BOOL v5 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_215A2399C(a2, (uint64_t)&v13);
  sub_215D1BF64(&v13, v8);
  sub_215D1CFB4((uint64_t)&v10, (uint64_t)v8);
  v8[0] = &unk_26C684548;
  unint64_t v6 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(_DWORD *)a3 = v10;
  uint64_t result = sub_2158281D0((void *)(a3 + 8), &v11);
  if (v11) {
    uint64_t result = (void *)((uint64_t (*)(void, void (**)(uint64_t), void, void, void))v11)(0, &v11, 0, 0, 0);
  }
  if (v14[0]) {
    return (void *)((uint64_t (*)(void, void *, void, void, void))v14[0])(0, v14, 0, 0, 0);
  }
  return result;
}

void sub_215A202F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A20370(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  int v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  *(_DWORD *)a2 = v8;
  sub_215D1E51C((int *)a2);
  int v9 = *(_DWORD *)a2;
  if (!v10 && v4)
  {
    switch(v9)
    {
      case 'd':
        int v13 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v12 = a2 + 8;
        uint64_t v11 = v13;
        if (!v13) {
          goto LABEL_32;
        }
        uint64_t v14 = v11(3, v12, 0, &unk_26C676720, &unk_215ED39E0);
        if (!v14) {
          goto LABEL_32;
        }
        sub_215A22064((uint64_t)&v48, a1, v14);
        break;
      case 'e':
        uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v32 = a2 + 8;
        long long v31 = v33;
        if (!v33) {
          goto LABEL_32;
        }
        uint64_t v34 = v31(3, v32, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v34) {
          goto LABEL_32;
        }
        sub_215A2271C((uint64_t)&v49, a1, v34);
        break;
      case 'n':
        v37 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v36 = a2 + 8;
        uint64_t v35 = v37;
        if (!v37) {
          goto LABEL_32;
        }
        uint64_t v38 = v35(3, v36, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v38) {
          goto LABEL_32;
        }
        sub_215A22D00((uint64_t)&v50, a1, v38);
        break;
      case 'o':
        v41 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v40 = a2 + 8;
        unsigned int v39 = v41;
        if (!v41 || (uint64_t v42 = v39(3, v40, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
LABEL_32:
        }
          sub_215A0E034();
        sub_215A233B8((uint64_t)&v51, a1, v42);
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 0:
        uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v16 = a2 + 8;
        uint64_t v15 = v17;
        if (!v17) {
          goto LABEL_32;
        }
        uint64_t v18 = (void *)v15(3, v16, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v18) {
          goto LABEL_32;
        }
        sub_215A20744((uint64_t)&v44, a1, v18);
        break;
      case 1:
        uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v20 = a2 + 8;
        uint64_t v19 = v21;
        if (!v21) {
          goto LABEL_32;
        }
        uint64_t v22 = (void *)v19(3, v20, 0, &unk_26C676630, &unk_215ED3760);
        if (!v22) {
          goto LABEL_32;
        }
        sub_215A20D2C((uint64_t)&v45, a1, v22);
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v24 = a2 + 8;
        int v23 = v25;
        if (!v25) {
          goto LABEL_32;
        }
        uint64_t v26 = (void *)v23(3, v24, 0, &unk_26C676680, &unk_215ED3834);
        if (!v26) {
          goto LABEL_32;
        }
        sub_215A213D4((uint64_t)&v46, a1, v26);
        break;
      case 11:
        uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v28 = a2 + 8;
        long long v27 = v29;
        if (!v29) {
          goto LABEL_32;
        }
        uint64_t v30 = (void *)v27(3, v28, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v30) {
          goto LABEL_32;
        }
        sub_215A219BC((uint64_t)&v47, a1, v30);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

void sub_215A206D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A20744(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A20844((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A20AA4(a2, a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A20830(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A20844(uint64_t a1, void *a2, uint64_t a3)
{
  memset(v16, 0, 24);
  BOOL v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)BOOL v5 = &unk_26C6842C8;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C65A0D8;
  v16[3] = (float32x2_t)(v5 + 24);
  uint64_t v17 = (std::__shared_weak_count *)v5;
  sub_215A20BE8(a2, v16);
  uint64_t v7 = sub_215D22318(v16);
  long long v15 = *(_OWORD *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 88);
  unsigned int v9 = (char *)operator new(0x78uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)unsigned int v9 = &unk_26C684408;
  long long v10 = *(_OWORD *)(v7 + 16);
  *((void *)v9 + 4) = &unk_26C65A188;
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v7 + 32);
  long long v11 = *(_OWORD *)(v7 + 48);
  long long v12 = *(_OWORD *)(v7 + 64);
  *((_DWORD *)v9 + 26) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(v9 + 88) = v12;
  *(_OWORD *)(v9 + 72) = v11;
  *((void *)v9 + 14) = v8;
  *((void *)v9 + 3) = &unk_26C65A0D8;
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9 + 24;
  char v13 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v9;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_215A20A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A20A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215A20AA4(void *result, void *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7) {
    goto LABEL_11;
  }
  *a2 = *(void *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 8;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7) {
    goto LABEL_11;
  }
  a2[1] = *(void *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 8;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[2] = *(void *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_215A20BAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A20BC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A20BD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A20BE8(void *result, void *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7) {
    goto LABEL_11;
  }
  *a2 = *(void *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 8;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7) {
    goto LABEL_11;
  }
  a2[1] = *(void *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 8;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[2] = *(void *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_215A20CF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A20D04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A20D18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A20D2C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A20E2C((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A2114C(a2, (uint64_t)a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A20E18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A20E2C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  BOOL v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)BOOL v5 = &unk_26C684368;
  long long v32 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v32;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659C48;
  uint64_t v30 = v5 + 24;
  long long v31 = (std::__shared_weak_count *)v5;
  sub_215A21290(a2, (uint64_t)&v27);
  long long v7 = v27;
  long long v8 = v28;
  double v9 = 1.0 / *(double *)&v27;
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  *((_OWORD *)v30 + 1) = v27;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((void *)v11 + 10) = v7;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 14) = *((void *)&v7 + 1);
  *((void *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((void *)v11 + 18) = 0x3FF0000000000000;
  *((void *)v11 + 19) = v10;
  long long v12 = v30;
  char v13 = v30 + 16;
  uint64_t v14 = *((void *)v30 + 2);
  uint64_t v15 = *((void *)v30 + 3);
  uint64_t v16 = v30 + 32;
  uint64_t v17 = *((void *)v30 + 4);
  uint64_t v18 = *((void *)v30 + 5);
  uint64_t v19 = *((void *)v30 + 19);
  uint64_t v20 = (char *)operator new(0xB8uLL);
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *(void *)uint64_t v20 = &unk_26C6844A8;
  *((void *)v20 + 4) = &unk_26C659958;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  long long v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  long long v22 = *((_OWORD *)v12 + 6);
  long long v23 = *((_OWORD *)v12 + 7);
  long long v24 = *((_OWORD *)v12 + 8);
  *((void *)v20 + 21) = *((void *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((void *)v20 + 22) = v19;
  *((void *)v20 + 3) = &unk_26C659C48;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  uint64_t v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v31;
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_215A21124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A21138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_215A2114C(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xF) {
    goto LABEL_11;
  }
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 16;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 0xF) {
    goto LABEL_11;
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 16;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 32) = *(void *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_215A21254(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A21268(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A2127C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A21290(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xF) {
    goto LABEL_11;
  }
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 16;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 0xF) {
    goto LABEL_11;
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 16;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 32) = *(void *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_215A21398(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A213AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A213C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A213D4(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A214D4((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A21734(a2, a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A214C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A214D4(uint64_t a1, void *a2, uint64_t a3)
{
  memset(v16, 0, 24);
  BOOL v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)BOOL v5 = &unk_26C684318;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C659DE8;
  v16[3] = (float32x2_t)(v5 + 24);
  uint64_t v17 = (std::__shared_weak_count *)v5;
  sub_215A21878(a2, v16);
  uint64_t v7 = sub_215D22318(v16);
  long long v15 = *(_OWORD *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 88);
  unsigned int v9 = (char *)operator new(0x78uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)unsigned int v9 = &unk_26C684458;
  long long v10 = *(_OWORD *)(v7 + 16);
  *((void *)v9 + 4) = &unk_26C65A188;
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v7 + 32);
  long long v11 = *(_OWORD *)(v7 + 48);
  long long v12 = *(_OWORD *)(v7 + 64);
  *((_DWORD *)v9 + 26) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(v9 + 88) = v12;
  *(_OWORD *)(v9 + 72) = v11;
  *((void *)v9 + 14) = v8;
  *((void *)v9 + 3) = &unk_26C659DE8;
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9 + 24;
  char v13 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v9;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_215A2170C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A21720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215A21734(void *result, void *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7) {
    goto LABEL_11;
  }
  *a2 = *(void *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 8;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7) {
    goto LABEL_11;
  }
  a2[1] = *(void *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 8;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[2] = *(void *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_215A2183C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A21850(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A21864(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A21878(void *result, void *a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7) {
    goto LABEL_11;
  }
  *a2 = *(void *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 8;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7) {
    goto LABEL_11;
  }
  a2[1] = *(void *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 8;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[2] = *(void *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_215A21980(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A21994(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A219A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A219BC(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A21ABC((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A21DDC(a2, (uint64_t)a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A21AA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A21ABC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  BOOL v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)BOOL v5 = &unk_26C6843B8;
  long long v32 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659958;
  *(_OWORD *)(v5 + 56) = v32;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659A48;
  uint64_t v30 = v5 + 24;
  long long v31 = (std::__shared_weak_count *)v5;
  sub_215A21F20(a2, (uint64_t)&v27);
  long long v7 = v27;
  long long v8 = v28;
  double v9 = 1.0 / *(double *)&v27;
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  *((_OWORD *)v30 + 1) = v27;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((void *)v11 + 10) = v7;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 14) = *((void *)&v7 + 1);
  *((void *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((void *)v11 + 18) = 0x3FF0000000000000;
  *((void *)v11 + 19) = v10;
  long long v12 = v30;
  char v13 = v30 + 16;
  uint64_t v14 = *((void *)v30 + 2);
  uint64_t v15 = *((void *)v30 + 3);
  uint64_t v16 = v30 + 32;
  uint64_t v17 = *((void *)v30 + 4);
  uint64_t v18 = *((void *)v30 + 5);
  uint64_t v19 = *((void *)v30 + 19);
  uint64_t v20 = (char *)operator new(0xB8uLL);
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *(void *)uint64_t v20 = &unk_26C6844F8;
  *((void *)v20 + 4) = &unk_26C659958;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  long long v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  long long v22 = *((_OWORD *)v12 + 6);
  long long v23 = *((_OWORD *)v12 + 7);
  long long v24 = *((_OWORD *)v12 + 8);
  *((void *)v20 + 21) = *((void *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((void *)v20 + 22) = v19;
  *((void *)v20 + 3) = &unk_26C659A48;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  uint64_t v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v31;
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_215A21DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A21DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_215A21DDC(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xF) {
    goto LABEL_11;
  }
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 16;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 0xF) {
    goto LABEL_11;
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 16;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 32) = *(void *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_215A21EE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A21EF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A21F0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A21F20(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xF) {
    goto LABEL_11;
  }
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 16;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 0xF) {
    goto LABEL_11;
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 16;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 7)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 32) = *(void *)(result[3] + v10);
  result[6] += 8;
  return result;
}

void sub_215A22028(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A2203C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22050(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22064(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A22164((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A223CC(a2, a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A22150(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22164(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  memset(v13, 0, 44);
  BOOL v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)BOOL v5 = &unk_26C684000;
  *(_OWORD *)&v17[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v17[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659FA8;
  uint64_t v14 = v5 + 24;
  uint64_t v15 = (std::__shared_weak_count *)v5;
  sub_215A22574(a2, (uint64_t)v13);
  uint64_t v7 = sub_215D20250((uint64_t)v13);
  sub_215D20788((uint64_t)&v16, v7);
  long long v8 = *(_OWORD *)v17;
  *(_OWORD *)a3 = v16;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v17[12];
  long long v9 = v18;
  long long v18 = 0uLL;
  uint64_t v10 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_215A223A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A223B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_215A223CC(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7) {
    goto LABEL_14;
  }
  *(void *)a2 = *(void *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 8;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7) {
    goto LABEL_14;
  }
  *(void *)(a2 + 8) = *(void *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 8;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0x13) {
    goto LABEL_14;
  }
  unint64_t v12 = result[3] + v10;
  long long v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  unint64_t v14 = result[7];
  unint64_t v15 = result[6] + 20;
  result[6] = v15;
  BOOL v4 = v14 >= v15;
  unint64_t v16 = v14 - v15;
  if (!v4) {
    unint64_t v16 = 0;
  }
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 36) = *(void *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_215A22524(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22538(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A2254C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22560(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A22574(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7) {
    goto LABEL_14;
  }
  *(void *)a2 = *(void *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 8;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7) {
    goto LABEL_14;
  }
  *(void *)(a2 + 8) = *(void *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 8;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0x13) {
    goto LABEL_14;
  }
  unint64_t v12 = result[3] + v10;
  long long v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  unint64_t v14 = result[7];
  unint64_t v15 = result[6] + 20;
  result[6] = v15;
  BOOL v4 = v14 >= v15;
  unint64_t v16 = v14 - v15;
  if (!v4) {
    unint64_t v16 = 0;
  }
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 36) = *(void *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_215A226CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A226E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A226F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22708(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A2271C(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A2281C((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A229B0(a2, a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A22808(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A2281C(uint64_t a1, void *a2, uint64_t a3)
{
  sub_215D2037C((uint64_t)v14);
  sub_215A22B58(a2, (uint64_t)v14);
  uint64_t v5 = sub_215D204B8((uint64_t)v14);
  sub_215D20E5C((uint64_t)v12, v5);
  long long v6 = v12[3];
  *(_OWORD *)(a3 + 32) = v12[2];
  *(_OWORD *)(a3 + 48) = v6;
  long long v7 = v12[1];
  *(_OWORD *)a3 = v12[0];
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = v13;
  long long v13 = 0uLL;
  unsigned int v9 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v12[4];
  *(_OWORD *)(a3 + 80) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_215A22988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215A229B0(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xF) {
    goto LABEL_14;
  }
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 16;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 0xF) {
    goto LABEL_14;
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 16;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0x27) {
    goto LABEL_14;
  }
  unint64_t v12 = result[3] + v10;
  long long v13 = *(_OWORD *)v12;
  long long v14 = *(_OWORD *)(v12 + 16);
  *(void *)(a2 + 64) = *(void *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  unint64_t v15 = result[7];
  unint64_t v16 = result[6] + 40;
  result[6] = v16;
  BOOL v4 = v15 >= v16;
  unint64_t v17 = v15 - v16;
  if (!v4) {
    unint64_t v17 = 0;
  }
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 72) = *(void *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_215A22B08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22B1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22B30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22B44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A22B58(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xF) {
    goto LABEL_14;
  }
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 16;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 0xF) {
    goto LABEL_14;
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 16;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0x27) {
    goto LABEL_14;
  }
  unint64_t v12 = result[3] + v10;
  long long v13 = *(_OWORD *)v12;
  long long v14 = *(_OWORD *)(v12 + 16);
  *(void *)(a2 + 64) = *(void *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  unint64_t v15 = result[7];
  unint64_t v16 = result[6] + 40;
  result[6] = v16;
  BOOL v4 = v15 >= v16;
  unint64_t v17 = v15 - v16;
  if (!v4) {
    unint64_t v17 = 0;
  }
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 72) = *(void *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_215A22CB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22CC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22CD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22CEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22D00(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A22E00((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A23068(a2, a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A22DEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A22E00(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  memset(v13, 0, 44);
  BOOL v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)BOOL v5 = &unk_26C684050;
  *(_OWORD *)&v17[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v17[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659ED8;
  long long v14 = v5 + 24;
  unint64_t v15 = (std::__shared_weak_count *)v5;
  sub_215A23210(a2, (uint64_t)v13);
  uint64_t v7 = sub_215D20250((uint64_t)v13);
  sub_215D20A54((uint64_t)&v16, v7);
  long long v8 = *(_OWORD *)v17;
  *(_OWORD *)a3 = v16;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v17[12];
  long long v9 = v18;
  long long v18 = 0uLL;
  uint64_t v10 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unint64_t v12 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_215A23040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A23054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_215A23068(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7) {
    goto LABEL_14;
  }
  *(void *)a2 = *(void *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 8;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7) {
    goto LABEL_14;
  }
  *(void *)(a2 + 8) = *(void *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 8;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0x13) {
    goto LABEL_14;
  }
  unint64_t v12 = result[3] + v10;
  long long v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  unint64_t v14 = result[7];
  unint64_t v15 = result[6] + 20;
  result[6] = v15;
  BOOL v4 = v14 >= v15;
  unint64_t v16 = v14 - v15;
  if (!v4) {
    unint64_t v16 = 0;
  }
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 36) = *(void *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_215A231C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A231D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A231E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A231FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A23210(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7) {
    goto LABEL_14;
  }
  *(void *)a2 = *(void *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 8;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7) {
    goto LABEL_14;
  }
  *(void *)(a2 + 8) = *(void *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 8;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0x13) {
    goto LABEL_14;
  }
  unint64_t v12 = result[3] + v10;
  long long v13 = *(_OWORD *)v12;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(v12 + 16);
  *(_OWORD *)(a2 + 16) = v13;
  unint64_t v14 = result[7];
  unint64_t v15 = result[6] + 20;
  result[6] = v15;
  BOOL v4 = v14 >= v15;
  unint64_t v16 = v14 - v15;
  if (!v4) {
    unint64_t v16 = 0;
  }
  if (v16 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 36) = *(void *)(result[3] + v15);
  result[6] += 8;
  return result;
}

void sub_215A23368(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A2337C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A23390(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A233A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A233B8(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A234B8((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A2364C(a2, a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A234A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A234B8(uint64_t a1, void *a2, uint64_t a3)
{
  sub_215D2064C((uint64_t)v14);
  sub_215A237F4(a2, (uint64_t)v14);
  uint64_t v5 = sub_215D204B8((uint64_t)v14);
  sub_215D212CC((uint64_t)v12, v5);
  long long v6 = v12[3];
  *(_OWORD *)(a3 + 32) = v12[2];
  *(_OWORD *)(a3 + 48) = v6;
  long long v7 = v12[1];
  *(_OWORD *)a3 = v12[0];
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = v13;
  long long v13 = 0uLL;
  unsigned int v9 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v12[4];
  *(_OWORD *)(a3 + 80) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_215A23624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A23638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215A2364C(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xF) {
    goto LABEL_14;
  }
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 16;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 0xF) {
    goto LABEL_14;
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 16;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0x27) {
    goto LABEL_14;
  }
  unint64_t v12 = result[3] + v10;
  long long v13 = *(_OWORD *)v12;
  long long v14 = *(_OWORD *)(v12 + 16);
  *(void *)(a2 + 64) = *(void *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  unint64_t v15 = result[7];
  unint64_t v16 = result[6] + 40;
  result[6] = v16;
  BOOL v4 = v15 >= v16;
  unint64_t v17 = v15 - v16;
  if (!v4) {
    unint64_t v17 = 0;
  }
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 72) = *(void *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_215A237A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A237B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A237CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A237E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A237F4(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xF) {
    goto LABEL_14;
  }
  *(_OWORD *)a2 = *(_OWORD *)(result[3] + v2);
  unint64_t v6 = result[7];
  unint64_t v7 = result[6] + 16;
  result[6] = v7;
  BOOL v4 = v6 >= v7;
  unint64_t v8 = v6 - v7;
  if (!v4) {
    unint64_t v8 = 0;
  }
  if (v8 <= 0xF) {
    goto LABEL_14;
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(result[3] + v7);
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 16;
  result[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0x27) {
    goto LABEL_14;
  }
  unint64_t v12 = result[3] + v10;
  long long v13 = *(_OWORD *)v12;
  long long v14 = *(_OWORD *)(v12 + 16);
  *(void *)(a2 + 64) = *(void *)(v12 + 32);
  *(_OWORD *)(a2 + 32) = v13;
  *(_OWORD *)(a2 + 48) = v14;
  unint64_t v15 = result[7];
  unint64_t v16 = result[6] + 40;
  result[6] = v16;
  BOOL v4 = v15 >= v16;
  unint64_t v17 = v15 - v16;
  if (!v4) {
    unint64_t v17 = 0;
  }
  if (v17 <= 7)
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 72) = *(void *)(result[3] + v16);
  result[6] += 8;
  return result;
}

void sub_215A2394C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A23960(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A23974(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A23988(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A2399C(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  int v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  *(_DWORD *)a2 = v8;
  sub_215D1C910((int *)a2);
  int v9 = *(_DWORD *)a2;
  if (!v10 && v4)
  {
    switch(v9)
    {
      case 'd':
        long long v13 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v12 = a2 + 8;
        unint64_t v11 = v13;
        if (!v13) {
          goto LABEL_32;
        }
        uint64_t v14 = v11(3, v12, 0, &unk_26C676720, &unk_215ED39E0);
        if (!v14) {
          goto LABEL_32;
        }
        sub_215A22064((uint64_t)&v48, a1, v14);
        break;
      case 'e':
        uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v32 = a2 + 8;
        long long v31 = v33;
        if (!v33) {
          goto LABEL_32;
        }
        uint64_t v34 = v31(3, v32, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v34) {
          goto LABEL_32;
        }
        sub_215A2271C((uint64_t)&v49, a1, v34);
        break;
      case 'n':
        v37 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v36 = a2 + 8;
        uint64_t v35 = v37;
        if (!v37) {
          goto LABEL_32;
        }
        uint64_t v38 = v35(3, v36, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v38) {
          goto LABEL_32;
        }
        sub_215A22D00((uint64_t)&v50, a1, v38);
        break;
      case 'o':
        v41 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v40 = a2 + 8;
        unsigned int v39 = v41;
        if (!v41 || (uint64_t v42 = v39(3, v40, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
LABEL_32:
        }
          sub_215A0E034();
        sub_215A233B8((uint64_t)&v51, a1, v42);
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 0:
        unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v16 = a2 + 8;
        unint64_t v15 = v17;
        if (!v17) {
          goto LABEL_32;
        }
        long long v18 = (void *)v15(3, v16, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v18) {
          goto LABEL_32;
        }
        sub_215A20744((uint64_t)&v44, a1, v18);
        break;
      case 1:
        long long v21 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v20 = a2 + 8;
        uint64_t v19 = v21;
        if (!v21) {
          goto LABEL_32;
        }
        long long v22 = (void *)v19(3, v20, 0, &unk_26C676630, &unk_215ED3760);
        if (!v22) {
          goto LABEL_32;
        }
        sub_215A20D2C((uint64_t)&v45, a1, v22);
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v24 = a2 + 8;
        long long v23 = v25;
        if (!v25) {
          goto LABEL_32;
        }
        uint64_t v26 = (void *)v23(3, v24, 0, &unk_26C676680, &unk_215ED3834);
        if (!v26) {
          goto LABEL_32;
        }
        sub_215A213D4((uint64_t)&v46, a1, v26);
        break;
      case 11:
        uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v28 = a2 + 8;
        long long v27 = v29;
        if (!v29) {
          goto LABEL_32;
        }
        uint64_t v30 = (void *)v27(3, v28, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v30) {
          goto LABEL_32;
        }
        sub_215A219BC((uint64_t)&v47, a1, v30);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

void sub_215A23CFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A23D70(int *a1, uint64_t a2, int *a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      unsigned int v10 = v12;
      unint64_t v11 = sub_215A23EE8();
      sub_215E07C10((std::string *)v11, v10, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    sub_215A24524(a2, a3);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = a4;
  }
  if (v9 <= 1) {
    sub_215A242DC((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else {
    sub_215A24524(a2, a3);
  }
}

long long *sub_215A23EE8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889080, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889080))
  {
    return &xmmword_267889068;
  }
  int v1 = sub_215A23FD0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889068, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889078 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889068 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889068, &dword_21572C000);
  __cxa_guard_release(&qword_267889080);
  return &xmmword_267889068;
}

void sub_215A23FB8(_Unwind_Exception *a1)
{
}

std::string *sub_215A23FD0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678890A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678890A0))
  {
    return &stru_267889088;
  }
  sub_215A240CC((uint64_t)__p);
  sub_2157E7638(__p, &stru_267889088);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889088, &dword_21572C000);
  __cxa_guard_release(&qword_2678890A0);
  return &stru_267889088;
}

void sub_215A2408C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2678890A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2678890A0);
  _Unwind_Resume(a1);
}

void sub_215A240CC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678890C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678890C0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::CameraSample<>]", qword_2678890A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678890A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678890C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678890E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678890E0))
  {
    size_t v3 = sub_215747D98(qword_2678890A8, "<", 0);
    sub_215747C90(qword_2678890A8, 0, v3, qword_2678890C8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678890C8, &dword_21572C000);
    __cxa_guard_release(&qword_2678890E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889100))
  {
    sub_215E19DF4((uint64_t)qword_2678890C8, (uint64_t)&xmmword_2678890E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678890E8, &dword_21572C000);
    __cxa_guard_release(&qword_267889100);
  }
  if (byte_2678890FF < 0)
  {
    long long v2 = xmmword_2678890E8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2678890E8;
    *(void *)(a1 + 16) = unk_2678890F8;
  }
}

void sub_215A24294(_Unwind_Exception *a1)
{
}

void sub_215A242AC(_Unwind_Exception *a1)
{
}

void sub_215A242C4(_Unwind_Exception *a1)
{
}

void *sub_215A242DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[4] = *MEMORY[0x263EF8340];
  sub_215D23008(&v10);
  sub_215D1A748((uint64_t)&v13, (uint64_t)&v10);
  unsigned int v10 = &unk_26C684548;
  unint64_t v5 = v12;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_215A2B8B0(a2, &v13);
  sub_215D1BF64(&v13, v8);
  sub_215D1CFB4((uint64_t)&v10, (uint64_t)v8);
  v8[0] = &unk_26C684548;
  unint64_t v6 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(_DWORD *)a3 = v10;
  uint64_t result = sub_2158281D0((void *)(a3 + 8), &v11);
  if (v11) {
    uint64_t result = (void *)((uint64_t (*)(void, void (**)(uint64_t), void, void, void))v11)(0, &v11, 0, 0, 0);
  }
  if (v14[0]) {
    return (void *)((uint64_t (*)(void, void *, void, void, void))v14[0])(0, v14, 0, 0, 0);
  }
  return result;
}

void sub_215A244AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A24524(uint64_t a1, int *a2)
{
  *(void *)char v47 = a2;
  sub_215A24A84((unsigned char *)a1, (_DWORD **)v47);
  sub_215D1E51C(a2);
  int v4 = *a2;
  if (!v6 & v5)
  {
    switch(v4)
    {
      case 'd':
        unsigned int v9 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        int v8 = a2 + 2;
        int v7 = v9;
        if (!v9) {
          goto LABEL_37;
        }
        uint64_t v10 = v7(3, v8, 0, &unk_26C676720, &unk_215ED39E0);
        if (!v10) {
          goto LABEL_37;
        }
        uint64_t v11 = *(void *)a1;
        *(void *)char v47 = *(void *)(a1 + 8);
        int v12 = v47[0];
        unsigned int v48 = 2;
        (*(void (**)(uint64_t, unsigned int *))(v11 + 104))(a1, &v48);
        if (v12 < 1) {
          sub_215A28AC8(a1, v10, v48);
        }
        else {
          sub_215A283B8(v47, a1, v10, v48);
        }
        break;
      case 'e':
        long long v31 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v30 = a2 + 2;
        uint64_t v29 = v31;
        if (!v31) {
          goto LABEL_37;
        }
        uint64_t v32 = v29(3, v30, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v32) {
          goto LABEL_37;
        }
        uint64_t v33 = *(void *)a1;
        *(void *)char v47 = *(void *)(a1 + 8);
        int v34 = v47[0];
        unsigned int v48 = 2;
        (*(void (**)(uint64_t, unsigned int *))(v33 + 104))(a1, &v48);
        if (v34 < 1) {
          sub_215A29870(a1, v32, v48);
        }
        else {
          sub_215A29160(v47, a1, v32, v48);
        }
        break;
      case 'n':
        v37 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v36 = a2 + 2;
        uint64_t v35 = v37;
        if (!v37) {
          goto LABEL_37;
        }
        uint64_t v38 = v35(3, v36, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v38) {
          goto LABEL_37;
        }
        uint64_t v39 = *(void *)a1;
        *(void *)char v47 = *(void *)(a1 + 8);
        int v40 = v47[0];
        unsigned int v48 = 2;
        (*(void (**)(uint64_t, unsigned int *))(v39 + 104))(a1, &v48);
        if (v40 < 1) {
          sub_215A2A544(a1, v38, v48);
        }
        else {
          sub_215A29E34(v47, a1, v38, v48);
        }
        break;
      case 'o':
        v43 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v42 = a2 + 2;
        v41 = v43;
        if (!v43 || (uint64_t v44 = v41(3, v42, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
LABEL_37:
        }
          sub_215A0E034();
        uint64_t v45 = *(void *)a1;
        *(void *)char v47 = *(void *)(a1 + 8);
        int v46 = v47[0];
        unsigned int v48 = 2;
        (*(void (**)(uint64_t, unsigned int *))(v45 + 104))(a1, &v48);
        if (v46 < 1) {
          sub_215A2B2EC(a1, v44, v48);
        }
        else {
          sub_215A2ABDC(v47, a1, v44, v48);
        }
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v4)
    {
      case 0:
        unint64_t v15 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v14 = a2 + 2;
        int v13 = v15;
        if (!v15) {
          goto LABEL_37;
        }
        uint64_t v16 = v13(3, v14, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v16) {
          goto LABEL_37;
        }
        *(void *)char v47 = *(void *)(a1 + 8);
        sub_215A24C28(v47, a1, v16);
        break;
      case 1:
        uint64_t v19 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        long long v18 = a2 + 2;
        unint64_t v17 = v19;
        if (!v19) {
          goto LABEL_37;
        }
        uint64_t v20 = (void *)v17(3, v18, 0, &unk_26C676630, &unk_215ED3760);
        if (!v20) {
          goto LABEL_37;
        }
        *(void *)char v47 = *(void *)(a1 + 8);
        sub_215A259AC(v47, a1, v20);
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        long long v23 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        long long v22 = a2 + 2;
        long long v21 = v23;
        if (!v23) {
          goto LABEL_37;
        }
        uint64_t v24 = v21(3, v22, 0, &unk_26C676680, &unk_215ED3834);
        if (!v24) {
          goto LABEL_37;
        }
        *(void *)char v47 = *(void *)(a1 + 8);
        sub_215A267F0(v47, a1, v24);
        break;
      case 11:
        long long v27 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v26 = a2 + 2;
        uint64_t v25 = v27;
        if (!v27) {
          goto LABEL_37;
        }
        uint64_t v28 = (void *)v25(3, v26, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v28) {
          goto LABEL_37;
        }
        *(void *)char v47 = *(void *)(a1 + 8);
        sub_215A27574(v47, a1, v28);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t sub_215A24A84(unsigned char *a1, _DWORD **a2)
{
  if ((a1[12] & 2) != 0)
  {
    memset(__p, 0, sizeof(__p));
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, __p);
    operator new();
  }
  LODWORD(__p[0]) = 0;
  uint64_t result = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a1 + 104))(a1, __p);
  **a2 = __p[0];
  return result;
}

void sub_215A24BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    sub_215E15464((uint64_t)&a17, v18);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_215A24C28(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_215A2564C((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 20);
    }
  }
  else
  {
    sub_215A24DFC(a1, a2, a3, v6);
  }
}

void sub_215A24DFC(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      unsigned int v11 = v13;
      int v12 = sub_215A25030();
      sub_215E07C10((std::string *)v12, v11, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 < 2)
  {
    sub_215A2564C((uint64_t)&v14, a2, a3);
    return;
  }
  int v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 20);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
}

long long *sub_215A25030()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889120, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889120))
  {
    return &xmmword_267889108;
  }
  int v1 = sub_215A25118();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889108, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889118 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889108 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889108, &dword_21572C000);
  __cxa_guard_release(&qword_267889120);
  return &xmmword_267889108;
}

void sub_215A25100(_Unwind_Exception *a1)
{
}

std::string *sub_215A25118()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889140, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889140))
  {
    return &stru_267889128;
  }
  sub_215A2543C((uint64_t)__p);
  sub_215A25214(__p, &stru_267889128);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889128, &dword_21572C000);
  __cxa_guard_release(&qword_267889140);
  return &stru_267889128;
}

void sub_215A251D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889140);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889140);
  _Unwind_Resume(a1);
}

void sub_215A25214(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(_OWORD *)unint64_t v15 = *(_OWORD *)"float32";
  uint64_t v16 = 0x700000000000000;
  int v4 = sub_2157D1624();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v4->__r_.__value_.__r.__words[2];
    long long v17 = v5;
  }
  unsigned int v6 = sub_2157E7974();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v6->__r_.__value_.__r.__words[2];
    long long v19 = v7;
  }
  sub_21573A150(&__p, (uint64_t)v15, 3uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, a2, v8, v9);
  unsigned int v10 = (void **)__p;
  if (__p)
  {
    unsigned int v11 = v14;
    int v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      int v12 = __p;
    }
    char v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        return;
      }
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0) {
    goto LABEL_21;
  }
}

void sub_215A253B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_215A25414()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1) {
      JUMPOUT(0x215A2540CLL);
    }
  }
}

void sub_215A2543C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889160))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_267889148);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889148, &dword_21572C000);
    __cxa_guard_release(&qword_267889160);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889180, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889180))
  {
    size_t v3 = sub_215747D98(qword_267889148, "<", 0);
    sub_215747C90(qword_267889148, 0, v3, qword_267889168);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889168, &dword_21572C000);
    __cxa_guard_release(&qword_267889180);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678891A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678891A0))
  {
    sub_215E19DF4((uint64_t)qword_267889168, (uint64_t)&xmmword_267889188);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889188, &dword_21572C000);
    __cxa_guard_release(&qword_2678891A0);
  }
  if (byte_26788919F < 0)
  {
    long long v2 = xmmword_267889188;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889188;
    *(void *)(a1 + 16) = unk_267889198;
  }
}

void sub_215A25604(_Unwind_Exception *a1)
{
}

void sub_215A2561C(_Unwind_Exception *a1)
{
}

void sub_215A25634(_Unwind_Exception *a1)
{
}

void sub_215A2564C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v16 = 0;
  uint64_t v17 = 0;
  v18[0] = 0;
  long long v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)long long v5 = &unk_26C6842C8;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C65A0D8;
  v18[1] = v5 + 24;
  long long v19 = (std::__shared_weak_count *)v5;
  (*(void (**)(uint64_t, float32x2_t *))(*(void *)a2 + 128))(a2, &v16);
  (*(void (**)(uint64_t, __int32 *))(*(void *)a2 + 128))(a2, (__int32 *)&v16 + 1);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v17);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 128))(a2, (char *)&v17 + 4);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 104))(a2, v18);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 104))(a2, (char *)v18 + 4);
  uint64_t v7 = sub_215D22318(&v16);
  long long v15 = *(_OWORD *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 88);
  int8x16_t v9 = (char *)operator new(0x78uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int8x16_t v9 = &unk_26C684408;
  long long v10 = *(_OWORD *)(v7 + 16);
  *((void *)v9 + 4) = &unk_26C65A188;
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v7 + 32);
  long long v11 = *(_OWORD *)(v7 + 48);
  long long v12 = *(_OWORD *)(v7 + 64);
  *((_DWORD *)v9 + 26) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(v9 + 88) = v12;
  *(_OWORD *)(v9 + 72) = v11;
  *((void *)v9 + 14) = v8;
  *((void *)v9 + 3) = &unk_26C65A0D8;
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9 + 24;
  unsigned int v13 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v9;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  char v14 = v19;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_215A25984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A25998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A259AC(int *a1, uint64_t a2, void *a3)
{
  unsigned int v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_215A263D0((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3);
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 1);
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 2);
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 3);
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 104))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, (uint64_t)a3 + 36);
    }
  }
  else
  {
    sub_215A25B80(a1, a2, a3, v6);
  }
}

void sub_215A25B80(int *a1, uint64_t a2, void *a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      unsigned int v11 = v13;
      long long v12 = sub_215A25DB4();
      sub_215E07C10((std::string *)v12, v11, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 < 2)
  {
    sub_215A263D0((uint64_t)&v14, a2, a3);
    return;
  }
  int v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 1);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 2);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 3);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 104))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, (uint64_t)a3 + 36);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
}

long long *sub_215A25DB4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678891C0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678891C0))
  {
    return &xmmword_2678891A8;
  }
  uint64_t v1 = sub_215A25E9C();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_2678891A8, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_2678891B8 = v1->__r_.__value_.__r.__words[2];
    xmmword_2678891A8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678891A8, &dword_21572C000);
  __cxa_guard_release(&qword_2678891C0);
  return &xmmword_2678891A8;
}

void sub_215A25E84(_Unwind_Exception *a1)
{
}

std::string *sub_215A25E9C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678891E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678891E0))
  {
    return &stru_2678891C8;
  }
  sub_215A261C0((uint64_t)__p);
  sub_215A25F98(__p, &stru_2678891C8);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_2678891C8, &dword_21572C000);
  __cxa_guard_release(&qword_2678891E0);
  return &stru_2678891C8;
}

void sub_215A25F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2678891E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2678891E0);
  _Unwind_Resume(a1);
}

void sub_215A25F98(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(_OWORD *)long long v15 = *(_OWORD *)"float64";
  uint64_t v16 = 0x700000000000000;
  int v4 = sub_2157D1624();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v4->__r_.__value_.__r.__words[2];
    long long v17 = v5;
  }
  unsigned int v6 = sub_2157E7974();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v6->__r_.__value_.__r.__words[2];
    long long v19 = v7;
  }
  sub_21573A150(&__p, (uint64_t)v15, 3uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, a2, v8, v9);
  unsigned int v10 = (void **)__p;
  if (__p)
  {
    unsigned int v11 = v14;
    long long v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      long long v12 = __p;
    }
    char v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        return;
      }
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0) {
    goto LABEL_21;
  }
}

void sub_215A26138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_215A26198()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1) {
      JUMPOUT(0x215A26190);
    }
  }
}

void sub_215A261C0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889200, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889200))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_2678891E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678891E8, &dword_21572C000);
    __cxa_guard_release(&qword_267889200);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889220, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889220))
  {
    size_t v3 = sub_215747D98(qword_2678891E8, "<", 0);
    sub_215747C90(qword_2678891E8, 0, v3, qword_267889208);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889208, &dword_21572C000);
    __cxa_guard_release(&qword_267889220);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889240, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889240))
  {
    sub_215E19DF4((uint64_t)qword_267889208, (uint64_t)&xmmword_267889228);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889228, &dword_21572C000);
    __cxa_guard_release(&qword_267889240);
  }
  if (byte_26788923F < 0)
  {
    long long v2 = xmmword_267889228;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889228;
    *(void *)(a1 + 16) = unk_267889238;
  }
}

void sub_215A26388(_Unwind_Exception *a1)
{
}

void sub_215A263A0(_Unwind_Exception *a1)
{
}

void sub_215A263B8(_Unwind_Exception *a1)
{
}

void sub_215A263D0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)long long v5 = &unk_26C684368;
  long long v32 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = v32;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((void *)v5 + 4) = &unk_26C659958;
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659C48;
  uint64_t v30 = v5 + 24;
  long long v31 = (std::__shared_weak_count *)v5;
  (*(void (**)(uint64_t, long long *))(*(void *)a2 + 136))(a2, &v27);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 136))(a2, (char *)&v27 + 8);
  (*(void (**)(uint64_t, long long *))(*(void *)a2 + 136))(a2, &v28);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 136))(a2, (char *)&v28 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 104))(a2, &v29);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 104))(a2, (char *)&v29 + 4);
  long long v7 = v27;
  long long v8 = v28;
  double v9 = 1.0 / *(double *)&v27;
  uint64_t v10 = v29;
  unsigned int v11 = v30;
  *((_OWORD *)v30 + 1) = v27;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((void *)v11 + 10) = v7;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 14) = *((void *)&v7 + 1);
  *((void *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((void *)v11 + 18) = 0x3FF0000000000000;
  *((void *)v11 + 19) = v10;
  long long v12 = v30;
  unsigned int v13 = v30 + 16;
  uint64_t v14 = *((void *)v30 + 2);
  uint64_t v15 = *((void *)v30 + 3);
  uint64_t v16 = v30 + 32;
  uint64_t v17 = *((void *)v30 + 4);
  uint64_t v18 = *((void *)v30 + 5);
  uint64_t v19 = *((void *)v30 + 19);
  std::string::size_type v20 = (char *)operator new(0xB8uLL);
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *(void *)std::string::size_type v20 = &unk_26C6844A8;
  *((void *)v20 + 4) = &unk_26C659958;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  long long v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  long long v22 = *((_OWORD *)v12 + 6);
  long long v23 = *((_OWORD *)v12 + 7);
  long long v24 = *((_OWORD *)v12 + 8);
  *((void *)v20 + 21) = *((void *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((void *)v20 + 22) = v19;
  *((void *)v20 + 3) = &unk_26C659C48;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  uint64_t v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v31;
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_215A267C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A267DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A267F0(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_215A27214((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 16);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 20);
    }
  }
  else
  {
    sub_215A269C4(a1, a2, a3, v6);
  }
}

void sub_215A269C4(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      unsigned int v11 = v13;
      long long v12 = sub_215A26BF8();
      sub_215E07C10((std::string *)v12, v11, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 < 2)
  {
    sub_215A27214((uint64_t)&v14, a2, a3);
    return;
  }
  int v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 20);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
}

long long *sub_215A26BF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889260, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889260))
  {
    return &xmmword_267889248;
  }
  uint64_t v1 = sub_215A26CE0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889248, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889258 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889248 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889248, &dword_21572C000);
  __cxa_guard_release(&qword_267889260);
  return &xmmword_267889248;
}

void sub_215A26CC8(_Unwind_Exception *a1)
{
}

std::string *sub_215A26CE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889280, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889280))
  {
    return &stru_267889268;
  }
  sub_215A27004((uint64_t)__p);
  sub_215A26DDC(__p, &stru_267889268);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889268, &dword_21572C000);
  __cxa_guard_release(&qword_267889280);
  return &stru_267889268;
}

void sub_215A26D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889280);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889280);
  _Unwind_Resume(a1);
}

void sub_215A26DDC(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(_OWORD *)uint64_t v15 = *(_OWORD *)"float32";
  uint64_t v16 = 0x700000000000000;
  int v4 = sub_2157CF418();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v4->__r_.__value_.__r.__words[2];
    long long v17 = v5;
  }
  unsigned int v6 = sub_2157E7974();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v6->__r_.__value_.__r.__words[2];
    long long v19 = v7;
  }
  sub_21573A150(&__p, (uint64_t)v15, 3uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, a2, v8, v9);
  unsigned int v10 = (void **)__p;
  if (__p)
  {
    unsigned int v11 = v14;
    long long v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      long long v12 = __p;
    }
    char v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        return;
      }
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0) {
    goto LABEL_21;
  }
}

void sub_215A26F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_215A26FDC()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1) {
      JUMPOUT(0x215A26FD4);
    }
  }
}

void sub_215A27004(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678892A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678892A0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_267889288);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889288, &dword_21572C000);
    __cxa_guard_release(&qword_2678892A0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678892C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678892C0))
  {
    size_t v3 = sub_215747D98(qword_267889288, "<", 0);
    sub_215747C90(qword_267889288, 0, v3, qword_2678892A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678892A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678892C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678892E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678892E0))
  {
    sub_215E19DF4((uint64_t)qword_2678892A8, (uint64_t)&xmmword_2678892C8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678892C8, &dword_21572C000);
    __cxa_guard_release(&qword_2678892E0);
  }
  if (byte_2678892DF < 0)
  {
    long long v2 = xmmword_2678892C8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2678892C8;
    *(void *)(a1 + 16) = unk_2678892D8;
  }
}

void sub_215A271CC(_Unwind_Exception *a1)
{
}

void sub_215A271E4(_Unwind_Exception *a1)
{
}

void sub_215A271FC(_Unwind_Exception *a1)
{
}

void sub_215A27214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float32x2_t v16 = 0;
  uint64_t v17 = 0;
  v18[0] = 0;
  long long v5 = (char *)operator new(0x78uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)long long v5 = &unk_26C684318;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C65A188;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 56) = v6;
  *(int32x4_t *)(v5 + 72) = v6;
  *(int32x4_t *)(v5 + 88) = v6;
  *((_DWORD *)v5 + 26) = 2143289344;
  *((void *)v5 + 14) = 0;
  *((void *)v5 + 3) = &unk_26C659DE8;
  v18[1] = v5 + 24;
  long long v19 = (std::__shared_weak_count *)v5;
  (*(void (**)(uint64_t, float32x2_t *))(*(void *)a2 + 128))(a2, &v16);
  (*(void (**)(uint64_t, __int32 *))(*(void *)a2 + 128))(a2, (__int32 *)&v16 + 1);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v17);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 128))(a2, (char *)&v17 + 4);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 104))(a2, v18);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 104))(a2, (char *)v18 + 4);
  uint64_t v7 = sub_215D22318(&v16);
  long long v15 = *(_OWORD *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 88);
  int8x16_t v9 = (char *)operator new(0x78uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)int8x16_t v9 = &unk_26C684458;
  long long v10 = *(_OWORD *)(v7 + 16);
  *((void *)v9 + 4) = &unk_26C65A188;
  *(_OWORD *)(v9 + 40) = v10;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(v7 + 32);
  long long v11 = *(_OWORD *)(v7 + 48);
  long long v12 = *(_OWORD *)(v7 + 64);
  *((_DWORD *)v9 + 26) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(v9 + 88) = v12;
  *(_OWORD *)(v9 + 72) = v11;
  *((void *)v9 + 14) = v8;
  *((void *)v9 + 3) = &unk_26C659DE8;
  *(_OWORD *)a3 = v15;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9 + 24;
  unsigned int v13 = *(std::__shared_weak_count **)(a3 + 32);
  *(void *)(a3 + 32) = v9;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  char v14 = v19;
  if (v19)
  {
    if (!atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_215A2754C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A27560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215CE954C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A27574(int *a1, uint64_t a2, void *a3)
{
  unsigned int v6 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_215A27F98((uint64_t)&v7, a2, a3);
    }
    else
    {
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3);
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 1);
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 2);
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 3);
      (*(void (**)(uint64_t, void *))(*(void *)a2 + 104))(a2, a3 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, (uint64_t)a3 + 36);
    }
  }
  else
  {
    sub_215A27748(a1, a2, a3, v6);
  }
}

void sub_215A27748(int *a1, uint64_t a2, void *a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v13 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      unsigned int v11 = v13;
      long long v12 = sub_215A2797C();
      sub_215E07C10((std::string *)v12, v11, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 < 2)
  {
    sub_215A27F98((uint64_t)&v14, a2, a3);
    return;
  }
  int v9 = 0;
LABEL_13:
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 1);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 2);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 136))(a2, a3 + 3);
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 104))(a2, a3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, (uint64_t)a3 + 36);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
}

long long *sub_215A2797C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889300, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889300))
  {
    return &xmmword_2678892E8;
  }
  uint64_t v1 = sub_215A27A64();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_2678892E8, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_2678892F8 = v1->__r_.__value_.__r.__words[2];
    xmmword_2678892E8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678892E8, &dword_21572C000);
  __cxa_guard_release(&qword_267889300);
  return &xmmword_2678892E8;
}

void sub_215A27A4C(_Unwind_Exception *a1)
{
}

std::string *sub_215A27A64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889320, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889320))
  {
    return &stru_267889308;
  }
  sub_215A27D88((uint64_t)__p);
  sub_215A27B60(__p, &stru_267889308);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889308, &dword_21572C000);
  __cxa_guard_release(&qword_267889320);
  return &stru_267889308;
}

void sub_215A27B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889320);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889320);
  _Unwind_Resume(a1);
}

void sub_215A27B60(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(_OWORD *)long long v15 = *(_OWORD *)"float64";
  uint64_t v16 = 0x700000000000000;
  int v4 = sub_2157CF418();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&v17, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v4->__r_.__value_.__r.__words[2];
    long long v17 = v5;
  }
  unsigned int v6 = sub_2157E7974();
  if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&v19, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v6->__r_.__value_.__r.__words[2];
    long long v19 = v7;
  }
  sub_21573A150(&__p, (uint64_t)v15, 3uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, a2, v8, v9);
  unsigned int v10 = (void **)__p;
  if (__p)
  {
    unsigned int v11 = v14;
    long long v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      long long v12 = __p;
    }
    char v14 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v20) < 0)
  {
    operator delete((void *)v19);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v16) & 0x80000000) == 0) {
        return;
      }
LABEL_21:
      operator delete(v15[0]);
      return;
    }
  }
  else if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0) {
    goto LABEL_21;
  }
}

void sub_215A27D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0) {
LABEL_8:
      }
        _Unwind_Resume(a1);
LABEL_7:
      operator delete(a13);
      goto LABEL_8;
    }
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  if ((a18 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_215A27D60()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1) {
      JUMPOUT(0x215A27D58);
    }
  }
}

void sub_215A27D88(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889340, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889340))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::PinholeCameraSample<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_267889328);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889328, &dword_21572C000);
    __cxa_guard_release(&qword_267889340);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889360, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889360))
  {
    size_t v3 = sub_215747D98(qword_267889328, "<", 0);
    sub_215747C90(qword_267889328, 0, v3, qword_267889348);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889348, &dword_21572C000);
    __cxa_guard_release(&qword_267889360);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889380, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889380))
  {
    sub_215E19DF4((uint64_t)qword_267889348, (uint64_t)&xmmword_267889368);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889368, &dword_21572C000);
    __cxa_guard_release(&qword_267889380);
  }
  if (byte_26788937F < 0)
  {
    long long v2 = xmmword_267889368;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889368;
    *(void *)(a1 + 16) = unk_267889378;
  }
}

void sub_215A27F50(_Unwind_Exception *a1)
{
}

void sub_215A27F68(_Unwind_Exception *a1)
{
}

void sub_215A27F80(_Unwind_Exception *a1)
{
}

void sub_215A27F98(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v5 = (char *)operator new(0xB8uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)long long v5 = &unk_26C6843B8;
  long long v32 = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *(_OWORD *)(v5 + 56) = v32;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((void *)v5 + 4) = &unk_26C659958;
  *(int64x2_t *)(v5 + 72) = v6;
  *(int64x2_t *)(v5 + 88) = v6;
  *(int64x2_t *)(v5 + 104) = v6;
  *(int64x2_t *)(v5 + 120) = v6;
  *(int64x2_t *)(v5 + 136) = v6;
  *(int64x2_t *)(v5 + 152) = v6;
  *((void *)v5 + 21) = 0x7FF8000000000000;
  *((void *)v5 + 22) = 0;
  *((void *)v5 + 3) = &unk_26C659A48;
  uint64_t v30 = v5 + 24;
  long long v31 = (std::__shared_weak_count *)v5;
  (*(void (**)(uint64_t, long long *))(*(void *)a2 + 136))(a2, &v27);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 136))(a2, (char *)&v27 + 8);
  (*(void (**)(uint64_t, long long *))(*(void *)a2 + 136))(a2, &v28);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 136))(a2, (char *)&v28 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 104))(a2, &v29);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 104))(a2, (char *)&v29 + 4);
  long long v7 = v27;
  long long v8 = v28;
  double v9 = 1.0 / *(double *)&v27;
  uint64_t v10 = v29;
  unsigned int v11 = v30;
  *((_OWORD *)v30 + 1) = v27;
  *((_OWORD *)v11 + 2) = v8;
  *((double *)v11 + 6) = v9;
  *((double *)v11 + 7) = 1.0 / *((double *)&v7 + 1);
  *((double *)v11 + 8) = -(*(double *)&v8 * v9);
  *((double *)v11 + 9) = -(*((double *)&v8 + 1) * (1.0 / *((double *)&v7 + 1)));
  *((void *)v11 + 10) = v7;
  *((void *)v11 + 12) = 0;
  *((void *)v11 + 13) = 0;
  *((void *)v11 + 11) = 0;
  *((void *)v11 + 14) = *((void *)&v7 + 1);
  *((void *)v11 + 15) = 0;
  *((_OWORD *)v11 + 8) = v8;
  *((void *)v11 + 18) = 0x3FF0000000000000;
  *((void *)v11 + 19) = v10;
  long long v12 = v30;
  unsigned int v13 = v30 + 16;
  uint64_t v14 = *((void *)v30 + 2);
  uint64_t v15 = *((void *)v30 + 3);
  uint64_t v16 = v30 + 32;
  uint64_t v17 = *((void *)v30 + 4);
  uint64_t v18 = *((void *)v30 + 5);
  uint64_t v19 = *((void *)v30 + 19);
  std::string::size_type v20 = (char *)operator new(0xB8uLL);
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *(void *)std::string::size_type v20 = &unk_26C6844F8;
  *((void *)v20 + 4) = &unk_26C659958;
  *(_OWORD *)(v20 + 40) = *v13;
  *(_OWORD *)(v20 + 56) = *v16;
  long long v21 = *((_OWORD *)v12 + 3);
  *(_OWORD *)(v20 + 88) = *((_OWORD *)v12 + 4);
  *(_OWORD *)(v20 + 72) = v21;
  long long v22 = *((_OWORD *)v12 + 6);
  long long v23 = *((_OWORD *)v12 + 7);
  long long v24 = *((_OWORD *)v12 + 8);
  *((void *)v20 + 21) = *((void *)v12 + 18);
  *(_OWORD *)(v20 + 152) = v24;
  *(_OWORD *)(v20 + 136) = v23;
  *(_OWORD *)(v20 + 120) = v22;
  *(_OWORD *)(v20 + 104) = *((_OWORD *)v12 + 5);
  *((void *)v20 + 22) = v19;
  *((void *)v20 + 3) = &unk_26C659A48;
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v17;
  a3[3] = v18;
  a3[4] = v19;
  a3[5] = v20 + 24;
  uint64_t v25 = (std::__shared_weak_count *)a3[6];
  a3[6] = v20;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = v31;
  if (v31)
  {
    if (!atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_215A28390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A283A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A283B8(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      unsigned int v10 = v12;
      unsigned int v11 = sub_215A286D4();
      sub_215E07C10((std::string *)v11, v10, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 40);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = a4;
  }
  sub_215A28AC8(a2, a3, v9);
}

long long *sub_215A286D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678893A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678893A0))
  {
    return &xmmword_267889388;
  }
  uint64_t v1 = sub_215A287BC();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889388, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889398 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889388 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889388, &dword_21572C000);
  __cxa_guard_release(&qword_2678893A0);
  return &xmmword_267889388;
}

void sub_215A287A4(_Unwind_Exception *a1)
{
}

std::string *sub_215A287BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678893C0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678893C0))
  {
    return &stru_2678893A8;
  }
  sub_215A288B8((uint64_t)__p);
  sub_215A25214(__p, &stru_2678893A8);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_2678893A8, &dword_21572C000);
  __cxa_guard_release(&qword_2678893C0);
  return &stru_2678893A8;
}

void sub_215A28878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2678893C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2678893C0);
  _Unwind_Resume(a1);
}

void sub_215A288B8(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678893E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678893E0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<float, cv3d::kit::cam::PixelOrigin::Center>]", qword_2678893C8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678893C8, &dword_21572C000);
    __cxa_guard_release(&qword_2678893E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889400, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889400))
  {
    size_t v3 = sub_215747D98(qword_2678893C8, "<", 0);
    sub_215747C90(qword_2678893C8, 0, v3, qword_2678893E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678893E8, &dword_21572C000);
    __cxa_guard_release(&qword_267889400);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889420, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889420))
  {
    sub_215E19DF4((uint64_t)qword_2678893E8, (uint64_t)&xmmword_267889408);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889408, &dword_21572C000);
    __cxa_guard_release(&qword_267889420);
  }
  if (byte_26788941F < 0)
  {
    long long v2 = xmmword_267889408;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889408;
    *(void *)(a1 + 16) = unk_267889418;
  }
}

void sub_215A28A80(_Unwind_Exception *a1)
{
}

void sub_215A28A98(_Unwind_Exception *a1)
{
}

void sub_215A28AB0(_Unwind_Exception *a1)
{
}

void sub_215A28AC8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A28D10((uint64_t)&v6, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2 + 36);
    long long v5 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104);
    v5(a1, a2 + 40);
  }
}

void sub_215A28D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v13 = 0u;
  memset(v14, 0, 28);
  long long v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)long long v5 = &unk_26C684000;
  *(_OWORD *)&v18[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v18[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659FA8;
  uint64_t v15 = v5 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v5;
  (*(void (**)(uint64_t, long long *))(*(void *)a2 + 128))(a2, &v13);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 128))(a2, (char *)&v13 + 4);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 128))(a2, (char *)&v13 + 8);
  (*(void (**)(uint64_t, unint64_t))(*(void *)a2 + 128))(a2, (unint64_t)&v13 | 0xC);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, v14);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, &v14[1]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, &v14[2]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, &v14[3]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, &v14[4]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 104))(a2, &v14[5]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 104))(a2, &v14[6]);
  uint64_t v7 = sub_215D20250((uint64_t)&v13);
  sub_215D20788((uint64_t)&v17, v7);
  long long v8 = *(_OWORD *)v18;
  *(_OWORD *)a3 = v17;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v18[12];
  long long v9 = v19;
  long long v19 = 0uLL;
  unsigned int v10 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unsigned int v11 = (std::__shared_weak_count *)*((void *)&v19 + 1);
  if (*((void *)&v19 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = v16;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_215A29138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A2914C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A29160(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      unsigned int v10 = v12;
      unsigned int v11 = sub_215A2947C();
      sub_215E07C10((std::string *)v11, v10, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 76);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = a4;
  }
  sub_215A29870(a2, a3, v9);
}

long long *sub_215A2947C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889440, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889440))
  {
    return &xmmword_267889428;
  }
  uint64_t v1 = sub_215A29564();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889428, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889438 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889428 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889428, &dword_21572C000);
  __cxa_guard_release(&qword_267889440);
  return &xmmword_267889428;
}

void sub_215A2954C(_Unwind_Exception *a1)
{
}

std::string *sub_215A29564()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889460, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889460))
  {
    return &stru_267889448;
  }
  sub_215A29660((uint64_t)__p);
  sub_215A25F98(__p, &stru_267889448);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889448, &dword_21572C000);
  __cxa_guard_release(&qword_267889460);
  return &stru_267889448;
}

void sub_215A29620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889460);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889460);
  _Unwind_Resume(a1);
}

void sub_215A29660(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889480, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889480))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<double, cv3d::kit::cam::PixelOrigin::Center>]", qword_267889468);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889468, &dword_21572C000);
    __cxa_guard_release(&qword_267889480);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678894A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678894A0))
  {
    size_t v3 = sub_215747D98(qword_267889468, "<", 0);
    sub_215747C90(qword_267889468, 0, v3, qword_267889488);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889488, &dword_21572C000);
    __cxa_guard_release(&qword_2678894A0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678894C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678894C0))
  {
    sub_215E19DF4((uint64_t)qword_267889488, (uint64_t)&xmmword_2678894A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678894A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678894C0);
  }
  if (byte_2678894BF < 0)
  {
    long long v2 = xmmword_2678894A8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2678894A8;
    *(void *)(a1 + 16) = unk_2678894B8;
  }
}

void sub_215A29828(_Unwind_Exception *a1)
{
}

void sub_215A29840(_Unwind_Exception *a1)
{
}

void sub_215A29858(_Unwind_Exception *a1)
{
}

void sub_215A29870(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A29AB8((uint64_t)&v6, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2 + 72);
    long long v5 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104);
    v5(a1, a2 + 76);
  }
}

void sub_215A29AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2037C((uint64_t)v14);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 136))(a2, v14);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v15);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v16);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v17);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v18);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v19);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v20);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v21);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v22);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 104))(a2, &v23);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 104))(a2, (char *)&v23 + 4);
  uint64_t v5 = sub_215D204B8((uint64_t)v14);
  sub_215D20E5C((uint64_t)v12, v5);
  long long v6 = v12[3];
  *(_OWORD *)(a3 + 32) = v12[2];
  *(_OWORD *)(a3 + 48) = v6;
  long long v7 = v12[1];
  *(_OWORD *)a3 = v12[0];
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = v13;
  long long v13 = 0uLL;
  unsigned int v9 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v12[4];
  *(_OWORD *)(a3 + 80) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  unsigned int v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unsigned int v11 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_215A29E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A29E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A29E34(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      unsigned int v10 = v12;
      unsigned int v11 = sub_215A2A150();
      sub_215E07C10((std::string *)v11, v10, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 36);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 40);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = a4;
  }
  sub_215A2A544(a2, a3, v9);
}

long long *sub_215A2A150()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678894E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678894E0))
  {
    return &xmmword_2678894C8;
  }
  uint64_t v1 = sub_215A2A238();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_2678894C8, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_2678894D8 = v1->__r_.__value_.__r.__words[2];
    xmmword_2678894C8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678894C8, &dword_21572C000);
  __cxa_guard_release(&qword_2678894E0);
  return &xmmword_2678894C8;
}

void sub_215A2A220(_Unwind_Exception *a1)
{
}

std::string *sub_215A2A238()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889500, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889500))
  {
    return &stru_2678894E8;
  }
  sub_215A2A334((uint64_t)__p);
  sub_215A26DDC(__p, &stru_2678894E8);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_2678894E8, &dword_21572C000);
  __cxa_guard_release(&qword_267889500);
  return &stru_2678894E8;
}

void sub_215A2A2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889500);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889500);
  _Unwind_Resume(a1);
}

void sub_215A2A334(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889520, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889520))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<float, cv3d::kit::cam::PixelOrigin::Corner>]", qword_267889508);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889508, &dword_21572C000);
    __cxa_guard_release(&qword_267889520);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889540))
  {
    size_t v3 = sub_215747D98(qword_267889508, "<", 0);
    sub_215747C90(qword_267889508, 0, v3, qword_267889528);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889528, &dword_21572C000);
    __cxa_guard_release(&qword_267889540);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889560, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889560))
  {
    sub_215E19DF4((uint64_t)qword_267889528, (uint64_t)&xmmword_267889548);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889548, &dword_21572C000);
    __cxa_guard_release(&qword_267889560);
  }
  if (byte_26788955F < 0)
  {
    long long v2 = xmmword_267889548;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889548;
    *(void *)(a1 + 16) = unk_267889558;
  }
}

void sub_215A2A4FC(_Unwind_Exception *a1)
{
}

void sub_215A2A514(_Unwind_Exception *a1)
{
}

void sub_215A2A52C(_Unwind_Exception *a1)
{
}

void sub_215A2A544(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A2A78C((uint64_t)&v6, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 20);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 28);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2 + 36);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104);
    v5(a1, a2 + 40);
  }
}

void sub_215A2A78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v13 = 0u;
  memset(v14, 0, 28);
  uint64_t v5 = (char *)operator new(0x98uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_26C684050;
  *(_OWORD *)&v18[16] = 0u;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = &unk_26C659E78;
  *((_DWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 56) = *(_OWORD *)&v18[16];
  *(void *)(v5 + 76) = 0xA3727C5ACLL;
  int32x4_t v6 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v5 + 84) = v6;
  *(int32x4_t *)(v5 + 100) = v6;
  *(int32x4_t *)(v5 + 116) = v6;
  *((_DWORD *)v5 + 33) = 2143289344;
  *((_WORD *)v5 + 68) = 257;
  *((void *)v5 + 18) = 0;
  *((void *)v5 + 3) = &unk_26C659ED8;
  uint64_t v15 = v5 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v5;
  (*(void (**)(uint64_t, long long *))(*(void *)a2 + 128))(a2, &v13);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 128))(a2, (char *)&v13 + 4);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 128))(a2, (char *)&v13 + 8);
  (*(void (**)(uint64_t, unint64_t))(*(void *)a2 + 128))(a2, (unint64_t)&v13 | 0xC);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, v14);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, &v14[1]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, &v14[2]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, &v14[3]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 128))(a2, &v14[4]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 104))(a2, &v14[5]);
  (*(void (**)(uint64_t, _DWORD *))(*(void *)a2 + 104))(a2, &v14[6]);
  uint64_t v7 = sub_215D20250((uint64_t)&v13);
  sub_215D20A54((uint64_t)&v17, v7);
  long long v8 = *(_OWORD *)v18;
  *(_OWORD *)a3 = v17;
  *(_OWORD *)(a3 + 16) = v8;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)&v18[12];
  long long v9 = v19;
  long long v19 = 0uLL;
  unsigned int v10 = *(std::__shared_weak_count **)(a3 + 56);
  *(_OWORD *)(a3 + 48) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unsigned int v11 = (std::__shared_weak_count *)*((void *)&v19 + 1);
  if (*((void *)&v19 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = v16;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_215A2ABB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A2ABC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A2ABDC(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      unsigned int v10 = v12;
      unsigned int v11 = sub_215A2AEF8();
      sub_215E07C10((std::string *)v11, v10, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 136))(a2, a3 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 104))(a2, a3 + 76);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = a4;
  }
  sub_215A2B2EC(a2, a3, v9);
}

long long *sub_215A2AEF8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889580))
  {
    return &xmmword_267889568;
  }
  uint64_t v1 = sub_215A2AFE0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889568, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889578 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889568 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889568, &dword_21572C000);
  __cxa_guard_release(&qword_267889580);
  return &xmmword_267889568;
}

void sub_215A2AFC8(_Unwind_Exception *a1)
{
}

std::string *sub_215A2AFE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678895A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678895A0))
  {
    return &stru_267889588;
  }
  sub_215A2B0DC((uint64_t)__p);
  sub_215A27B60(__p, &stru_267889588);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889588, &dword_21572C000);
  __cxa_guard_release(&qword_2678895A0);
  return &stru_267889588;
}

void sub_215A2B09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2678895A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2678895A0);
  _Unwind_Resume(a1);
}

void sub_215A2B0DC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678895C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678895C0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::camio::HeikkilaCameraSample<double, cv3d::kit::cam::PixelOrigin::Corner>]", qword_2678895A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678895A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678895C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678895E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678895E0))
  {
    size_t v3 = sub_215747D98(qword_2678895A8, "<", 0);
    sub_215747C90(qword_2678895A8, 0, v3, qword_2678895C8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678895C8, &dword_21572C000);
    __cxa_guard_release(&qword_2678895E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889600, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889600))
  {
    sub_215E19DF4((uint64_t)qword_2678895C8, (uint64_t)&xmmword_2678895E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678895E8, &dword_21572C000);
    __cxa_guard_release(&qword_267889600);
  }
  if (byte_2678895FF < 0)
  {
    long long v2 = xmmword_2678895E8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2678895E8;
    *(void *)(a1 + 16) = unk_2678895F8;
  }
}

void sub_215A2B2A4(_Unwind_Exception *a1)
{
}

void sub_215A2B2BC(_Unwind_Exception *a1)
{
}

void sub_215A2B2D4(_Unwind_Exception *a1)
{
}

void sub_215A2B2EC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    sub_215A2B534((uint64_t)&v6, a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 56);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2 + 64);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2 + 72);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104);
    v5(a1, a2 + 76);
  }
}

void sub_215A2B534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215D2064C((uint64_t)v14);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 136))(a2, v14);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v15);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v16);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v17);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v18);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v19);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v20);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v21);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v22);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 104))(a2, &v23);
  (*(void (**)(uint64_t, char *))(*(void *)a2 + 104))(a2, (char *)&v23 + 4);
  uint64_t v5 = sub_215D204B8((uint64_t)v14);
  sub_215D212CC((uint64_t)v12, v5);
  long long v6 = v12[3];
  *(_OWORD *)(a3 + 32) = v12[2];
  *(_OWORD *)(a3 + 48) = v6;
  long long v7 = v12[1];
  *(_OWORD *)a3 = v12[0];
  *(_OWORD *)(a3 + 16) = v7;
  long long v8 = v13;
  long long v13 = 0uLL;
  unsigned int v9 = *(std::__shared_weak_count **)(a3 + 88);
  *(_OWORD *)(a3 + 64) = v12[4];
  *(_OWORD *)(a3 + 80) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  unsigned int v10 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  unsigned int v11 = v24;
  if (v24)
  {
    if (!atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_215A2B888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2B89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_215D205D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2B8B0(uint64_t a1, int *a2)
{
  *(void *)char v47 = a2;
  sub_215A24A84((unsigned char *)a1, (_DWORD **)v47);
  sub_215D1C910(a2);
  int v4 = *a2;
  if (!v6 & v5)
  {
    switch(v4)
    {
      case 'd':
        unsigned int v9 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        long long v8 = a2 + 2;
        long long v7 = v9;
        if (!v9) {
          goto LABEL_37;
        }
        uint64_t v10 = v7(3, v8, 0, &unk_26C676720, &unk_215ED39E0);
        if (!v10) {
          goto LABEL_37;
        }
        uint64_t v11 = *(void *)a1;
        *(void *)char v47 = *(void *)(a1 + 8);
        int v12 = v47[0];
        unsigned int v48 = 2;
        (*(void (**)(uint64_t, unsigned int *))(v11 + 104))(a1, &v48);
        if (v12 < 1) {
          sub_215A28AC8(a1, v10, v48);
        }
        else {
          sub_215A283B8(v47, a1, v10, v48);
        }
        break;
      case 'e':
        long long v31 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v30 = a2 + 2;
        uint64_t v29 = v31;
        if (!v31) {
          goto LABEL_37;
        }
        uint64_t v32 = v29(3, v30, 0, &unk_26C676770, &unk_215ED3AB8);
        if (!v32) {
          goto LABEL_37;
        }
        uint64_t v33 = *(void *)a1;
        *(void *)char v47 = *(void *)(a1 + 8);
        int v34 = v47[0];
        unsigned int v48 = 2;
        (*(void (**)(uint64_t, unsigned int *))(v33 + 104))(a1, &v48);
        if (v34 < 1) {
          sub_215A29870(a1, v32, v48);
        }
        else {
          sub_215A29160(v47, a1, v32, v48);
        }
        break;
      case 'n':
        v37 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v36 = a2 + 2;
        uint64_t v35 = v37;
        if (!v37) {
          goto LABEL_37;
        }
        uint64_t v38 = v35(3, v36, 0, &unk_26C6767C0, &unk_215ED3B90);
        if (!v38) {
          goto LABEL_37;
        }
        uint64_t v39 = *(void *)a1;
        *(void *)char v47 = *(void *)(a1 + 8);
        int v40 = v47[0];
        unsigned int v48 = 2;
        (*(void (**)(uint64_t, unsigned int *))(v39 + 104))(a1, &v48);
        if (v40 < 1) {
          sub_215A2A544(a1, v38, v48);
        }
        else {
          sub_215A29E34(v47, a1, v38, v48);
        }
        break;
      case 'o':
        v43 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v42 = a2 + 2;
        v41 = v43;
        if (!v43 || (uint64_t v44 = v41(3, v42, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
LABEL_37:
        }
          sub_215A0E034();
        uint64_t v45 = *(void *)a1;
        *(void *)char v47 = *(void *)(a1 + 8);
        int v46 = v47[0];
        unsigned int v48 = 2;
        (*(void (**)(uint64_t, unsigned int *))(v45 + 104))(a1, &v48);
        if (v46 < 1) {
          sub_215A2B2EC(a1, v44, v48);
        }
        else {
          sub_215A2ABDC(v47, a1, v44, v48);
        }
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v4)
    {
      case 0:
        uint64_t v15 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v14 = a2 + 2;
        long long v13 = v15;
        if (!v15) {
          goto LABEL_37;
        }
        uint64_t v16 = v13(3, v14, 0, &unk_26C6765E0, &unk_215ED368C);
        if (!v16) {
          goto LABEL_37;
        }
        *(void *)char v47 = *(void *)(a1 + 8);
        sub_215A24C28(v47, a1, v16);
        break;
      case 1:
        uint64_t v19 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v18 = a2 + 2;
        uint64_t v17 = v19;
        if (!v19) {
          goto LABEL_37;
        }
        uint64_t v20 = (void *)v17(3, v18, 0, &unk_26C676630, &unk_215ED3760);
        if (!v20) {
          goto LABEL_37;
        }
        *(void *)char v47 = *(void *)(a1 + 8);
        sub_215A259AC(v47, a1, v20);
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return;
      case 10:
        uint64_t v23 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v22 = a2 + 2;
        uint64_t v21 = v23;
        if (!v23) {
          goto LABEL_37;
        }
        uint64_t v24 = v21(3, v22, 0, &unk_26C676680, &unk_215ED3834);
        if (!v24) {
          goto LABEL_37;
        }
        *(void *)char v47 = *(void *)(a1 + 8);
        sub_215A267F0(v47, a1, v24);
        break;
      case 11:
        long long v27 = (uint64_t (*)(uint64_t, int *, void, void *, void *))*((void *)a2 + 1);
        uint64_t v26 = a2 + 2;
        uint64_t v25 = v27;
        if (!v27) {
          goto LABEL_37;
        }
        long long v28 = (void *)v25(3, v26, 0, &unk_26C6766D0, &unk_215ED3908);
        if (!v28) {
          goto LABEL_37;
        }
        *(void *)char v47 = *(void *)(a1 + 8);
        sub_215A27574(v47, a1, v28);
        break;
      default:
        JUMPOUT(0);
    }
  }
}

void sub_215A2BE10()
{
}

void sub_215A2BFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  sub_2157F48C0((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2C034(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  size_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  char v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215A2C124(a1, &v5, a3);
  int v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_215A2C0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A2C124(uint64_t a1, void *a2, unsigned int a3)
{
  if (a3 > 2)
  {
    uint64_t v9 = sub_215CE9B60(a2);
    sub_215D2B4A4((uint64_t)v10, v9);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "dictionary";
    *(void *)(a1 + 80) = 10;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v5 = (unsigned __int8 **)sub_215CE9AF0(a2);
  sub_215D2F4F0((uint64_t)v10, *v5);
  char v6 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v7 = *v6;
  *char v6 = v10[0];
  v10[0] = v7;
  long long v8 = (void **)*((void *)v6 + 1);
  *((void *)v6 + 1) = v11;
  uint64_t v11 = v8;
  sub_215CEB204(&v11, v7);
}

void sub_215A2C24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A2C260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204((void ***)(v9 + 8), a9);
  _Unwind_Resume(a1);
}

void sub_215A2C278(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v2 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "dictionary";
    *(void *)(a1 + 80) = 10;
    if (!v2) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_21575FC70((uint64_t)v3, a2);
}

void sub_215A2C3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void ***a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  sub_215DDC9D8(&a12);
  sub_215733368((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_215A2C3E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2C3FC(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = sub_215CE9B60(v4);
  sub_215D2B4A4((uint64_t)v5, v3);
}

void sub_215A2C500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_215A2C51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A2C530(uint64_t a1, uint64_t a2)
{
  long long v31 = 0u;
  memset(v30, 0, sizeof(v30));
  sub_215D2B5FC(&v26, a2);
  uint64_t v3 = v26;
  *(void *)&v30[0] = v26;
  *(_OWORD *)((char *)v30 + 8) = v27;
  int v4 = v28;
  *((void *)&v30[1] + 1) = v28;
  uint64_t v25 = (char *)v29;
  long long v31 = v29;
  uint64_t v5 = (uint64_t *)v27;
  unint64_t v6 = ((void)v27 - (void)v26) / 24;
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v7 + 40))
  {
    uint64_t v26 = (uint64_t *)(v7 + 16);
    sub_215E069EC(&v26, v6);
  }
  else
  {
    sub_215E06D00();
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v8 + 40))
  {
    uint64_t v26 = (uint64_t *)(v8 + 16);
    if (v5 != v3)
    {
      uint64_t v9 = 24 * v6;
      uint64_t v10 = (const void **)v3;
      do
      {
        sub_215E07110((uint64_t)&v32, &v26, v10);
        v10 += 3;
        v9 -= 24;
      }
      while (v9);
    }
  }
  else if (v5 != v3)
  {
    uint64_t v11 = v8 + 8;
    uint64_t v12 = 24 * v6;
    uint64_t v13 = (uint64_t)v3;
    do
    {
      sub_215E0752C((uint64_t)&v26, v11, v13);
      v13 += 24;
      v12 -= 24;
    }
    while (v12);
  }
  uint64_t v14 = v25;
  uint64_t v15 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v15 + 40))
  {
    uint64_t v26 = (uint64_t *)(v15 + 16);
    sub_215E069EC(&v26, (v25 - v4) / 24);
  }
  else
  {
    sub_215E06D00();
  }
  if (v25 == v4)
  {
    if (!v4) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v17 + 40))
    {
      uint64_t v26 = (uint64_t *)(v17 + 16);
      sub_215E05FEC(&v26, 2u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v26, v17 + 8);
    }
    sub_215E0076C(*(void *)(a1 + 24));
    sub_215A2C9D8(a1, (unsigned __int16 *)&v4[v16]);
    uint64_t v18 = *(void *)(a1 + 24);
    uint64_t v19 = *(void *)(*(void *)(v18 + 88) - 8);
    sub_215E001AC((uint64_t *)(v18 + 48), *(void *)(v18 + 16) - v19 - 9);
    size_t v20 = *(void *)(v18 + 48);
    if (v20) {
      memmove((void *)(*(void *)(v18 + 24) + v19), *(const void **)(v18 + 56), v20);
    }
    *(void *)(v18 + 48) = 0;
    uint64_t v21 = *(void *)(v18 + 80);
    uint64_t v22 = *(void *)(v18 + 88) - 8;
    *(void *)(v18 + 88) = v22;
    if (v21 == v22)
    {
      std::ostream::write();
      if (*(unsigned char *)(v18 + 40))
      {
        free(*(void **)(v18 + 24));
        *(unsigned char *)(v18 + 40) = 0;
      }
    }
    v16 += 24;
  }
  while (24 * ((v25 - v4) / 24) != v16);
  if (v4)
  {
    do
    {
      uint64_t v23 = (std::__shared_weak_count *)*((void *)v14 - 1);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      v14 -= 24;
    }
    while (v14 != v4);
    int v4 = (char *)*((void *)&v30[1] + 1);
    uint64_t v3 = *(uint64_t **)&v30[0];
LABEL_34:
    operator delete(v4);
  }
LABEL_35:
  if (v3)
  {
    for (i = (uint64_t *)*((void *)&v30[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0) {
        operator delete((void *)*(i - 3));
      }
    }
    operator delete(v3);
  }
}

void sub_215A2C864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2C878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2C88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2C8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2C8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void **sub_215A2C8DC(void **a1)
{
  uint64_t v2 = (char *)a1[3];
  if (v2)
  {
    uint64_t v3 = (char *)a1[4];
    int v4 = a1[3];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 24;
      }
      while (v3 != v2);
      int v4 = a1[3];
    }
    a1[4] = v2;
    operator delete(v4);
  }
  unint64_t v6 = (void **)*a1;
  if (*a1)
  {
    uint64_t v7 = (void **)a1[1];
    uint64_t v8 = *a1;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = *a1;
    }
    a1[1] = v6;
    operator delete(v8);
  }
  return a1;
}

void sub_215A2C9D8(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v5 + 40))
  {
    if (v4 > 0x7F)
    {
      if (v4 > 0xFF)
      {
        __p.__r_.__value_.__s.__data_[0] = -51;
        *(_WORD *)((char *)&__p.__r_.__value_.__l.__data_ + 1) = __rev16(v4);
        std::ostream::write();
        unsigned int v6 = *a2;
        if (v6 <= 4) {
          goto LABEL_3;
        }
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = -52;
        __p.__r_.__value_.__s.__data_[1] = v4;
        std::ostream::write();
        unsigned int v6 = *a2;
        if (v6 <= 4) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = v4;
      std::ostream::write();
      unsigned int v6 = *a2;
      if (v6 <= 4) {
        goto LABEL_3;
      }
    }
LABEL_9:
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
  __p.__r_.__value_.__r.__words[0] = v5 + 16;
  sub_215E058EC((uint64_t **)&__p, v4);
  unsigned int v6 = *a2;
LABEL_3:
  switch(v6)
  {
    case 0u:
      uint64_t v7 = (const void *)*((void *)a2 + 1);
      if (v7)
      {
        CFTypeID TypeID = CFNumberGetTypeID();
        if (CFGetTypeID(v7) == TypeID) {
          sub_215A2DAFC(&v39, *((CFTypeRef *)a2 + 1));
        }
      }
      v33[0] = 0;
      v33[1] = 0;
      sub_215A2DC70((uint64_t)&theArray, (uint64_t)v33);
    case 1u:
      sub_215DD0C9C(*((void *)a2 + 1), &__p);
      uint64_t v18 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v18 + 40))
      {
        uint64_t v36 = (uint64_t *)(v18 + 16);
        sub_215E07110((uint64_t)&v39, &v36, (const void **)&__p.__r_.__value_.__l.__data_);
      }
      else
      {
        sub_215E0752C((uint64_t)&v36, v18 + 8, (uint64_t)&__p);
      }
      if ((_BYTE)v38 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    case 2u:
      uint64_t v11 = (const void *)*((void *)a2 + 1);
      if (!v11 || (CFTypeID v12 = CFBooleanGetTypeID(), CFGetTypeID(v11) != v12))
      {
        BOOL v13 = 0;
        LOWORD(v36) = 0;
        uint64_t v14 = *(void *)(a1 + 24);
        if (!*(unsigned char *)(v14 + 40)) {
          goto LABEL_16;
        }
LABEL_28:
        __p.__r_.__value_.__r.__words[0] = v14 + 16;
        sub_215E06FCC((uint64_t)&v39, (uint64_t **)&__p, &v36);
        return;
      }
      BOOL v13 = CFBooleanGetValue((CFBooleanRef)v11) != 0;
      LOWORD(v36) = v13 | 0x100;
      uint64_t v14 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v14 + 40)) {
        goto LABEL_28;
      }
LABEL_16:
      if (v13) {
        std::string::value_type v15 = -61;
      }
      else {
        std::string::value_type v15 = -62;
      }
      __p.__r_.__value_.__s.__data_[0] = v15;
      std::ostream::write();
      return;
    case 3u:
      uint64_t v16 = (const void *)*((void *)a2 + 1);
      if (v16)
      {
        CFTypeID v17 = CFArrayGetTypeID();
        if (CFGetTypeID(v16) == v17) {
          sub_215A2DD94(&__p, *((CFTypeRef *)a2 + 1));
        }
      }
      CFArrayRef theArray = 0;
      uint64_t v35 = 0;
      memset(&__p, 0, sizeof(__p));
      CFIndex Count = CFArrayGetCount(0);
      sub_215A2D74C(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        sub_215A2E08C(&v39, ValueAtIndex);
      }
      uint64_t v21 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v21 + 40))
      {
        uint64_t v36 = (uint64_t *)(v21 + 16);
        sub_215E069EC(&v36, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
      }
      else
      {
        sub_215E06D00();
      }
      std::string::size_type v22 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        int64_t v23 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          uint64_t v24 = *(void *)(a1 + 24);
          if (*(unsigned char *)(v24 + 40))
          {
            uint64_t v36 = (uint64_t *)(v24 + 16);
            sub_215E05FEC(&v36, 2u);
          }
          else
          {
            sub_215E0626C((uint64_t)&v36, v24 + 8);
          }
          sub_215E0076C(*(void *)(a1 + 24));
          sub_215A2C9D8(a1, v22, 2);
          uint64_t v25 = *(void *)(a1 + 24);
          uint64_t v26 = *(void *)(*(void *)(v25 + 88) - 8);
          sub_215E001AC((uint64_t *)(v25 + 48), *(void *)(v25 + 16) - v26 - 9);
          size_t v27 = *(void *)(v25 + 48);
          if (v27) {
            memmove((void *)(*(void *)(v25 + 24) + v26), *(const void **)(v25 + 56), v27);
          }
          *(void *)(v25 + 48) = 0;
          uint64_t v28 = *(void *)(v25 + 80);
          uint64_t v29 = *(void *)(v25 + 88) - 8;
          *(void *)(v25 + 88) = v29;
          if (v28 == v29)
          {
            std::ostream::write();
            if (*(unsigned char *)(v25 + 40))
            {
              free(*(void **)(v25 + 24));
              *(unsigned char *)(v25 + 40) = 0;
            }
          }
          v22 += 24;
          v23 -= 24;
        }
        while (v23);
        std::string::size_type v22 = __p.__r_.__value_.__r.__words[0];
      }
      if (v22)
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        long long v31 = (void *)v22;
        if (__p.__r_.__value_.__l.__size_ != v22)
        {
          do
          {
            char v32 = *(std::__shared_weak_count **)(size - 8);
            if (v32 && !atomic_fetch_add(&v32->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
            size -= 24;
          }
          while (size != v22);
          long long v31 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v22;
        operator delete(v31);
      }
      if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      return;
    case 4u:
      uint64_t v9 = (const void *)*((void *)a2 + 1);
      if (v9)
      {
        CFTypeID v10 = CFDictionaryGetTypeID();
        if (CFGetTypeID(v9) == v10) {
          sub_21575FD94(&__p, *((CFTypeRef *)a2 + 1));
        }
      }
      CFArrayRef theArray = 0;
      uint64_t v35 = 0;
      sub_215DD1B28((int)&__p, 0, 1);
    default:
      goto LABEL_9;
  }
}

void sub_215A2D5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2D60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215733368(v6 - 80);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2D628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A2D74C(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_215738AC0();
    }
    unsigned int v4 = a1[1];
    uint64_t v5 = 24 * a2;
    uint64_t v6 = (char *)operator new(24 * a2);
    uint64_t v7 = &v6[v5];
    uint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v8;
      a1[1] = v8;
      a1[2] = v7;
    }
    else
    {
      uint64_t v9 = &v6[v4 - v2];
      do
      {
        __int16 v10 = *((_WORD *)v4 - 12);
        v4 -= 24;
        *((_WORD *)v9 - 12) = v10;
        v9 -= 24;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v4 + 8);
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
      }
      while (v4 != v2);
      uint64_t v2 = *a1;
      uint64_t v11 = a1[1];
      *a1 = v9;
      a1[1] = v8;
      for (a1[2] = v7; v11 != v2; v11 -= 24)
      {
        CFTypeID v12 = (std::__shared_weak_count *)*((void *)v11 - 1);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void sub_215A2D898()
{
}

void sub_215A2DA94(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215A2DAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A2DAFC(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215A2DB70(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215A2DB88(_Unwind_Exception *a1)
{
}

void sub_215A2DBA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215A2DBD8(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215A2DBFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK10__CFNumberEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215A2DC70(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215A2DAFC(&v5, v3);
}

void sub_215A2DD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A2DD94(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215A2DE08(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215A2DE20(_Unwind_Exception *a1)
{
}

void sub_215A2DE38(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215A2DE70(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215A2DE94(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPK9__CFArrayEC1ES5_EUlS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

char *sub_215A2DF08(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AD8();
  }
  uint64_t v7 = 24 * v5;
  uint64_t v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v3];
  __int16 v10 = &v8[v7];
  *(_WORD *)uint64_t v9 = *(_WORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = v9 + 24;
  CFTypeID v12 = *a1;
  BOOL v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      __int16 v14 = *((_WORD *)v13 - 12);
      v13 -= 24;
      *((_WORD *)v9 - 12) = v14;
      v9 -= 24;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v13 + 8);
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = 0;
    }
    while (v13 != v12);
    BOOL v13 = *a1;
    std::string::value_type v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    for (a1[2] = v10; v15 != v13; v15 -= 24)
    {
      uint64_t v16 = (std::__shared_weak_count *)*((void *)v15 - 1);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v11;
}

void sub_215A2E08C(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  operator new();
}

void sub_215A2E100(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    CFRelease(v1);
  }
  __cxa_rethrow();
}

void sub_215A2E118(_Unwind_Exception *a1)
{
}

void sub_215A2E130(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215A2E168(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 24);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_215A2E18C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_") {
    return a1 + 24;
  }
  if (((v3 & (unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d3kit2cf3PtrIPKvEC1ES4_EUlS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24; {
  return 0;
  }
}

void sub_215A2E200(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  unint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_215A2E2F0(a1, &v5, a3);
  unint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_215A2E29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A2E2F0(uint64_t a1, void *a2, unsigned int a3)
{
  if (a3 > 2)
  {
    uint64_t v9 = sub_215CE9B60(a2);
    sub_215D2B4A4((uint64_t)v10, v9);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "dictionary";
    *(void *)(a1 + 80) = 10;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v5 = (unsigned __int8 **)sub_215CE9A80(a2);
  sub_215D31DE4((uint64_t)v10, *v5);
  uint64_t v6 = (unsigned __int8 *)sub_215DEB350(a1);
  int v7 = *v6;
  *uint64_t v6 = v10[0];
  v10[0] = v7;
  uint64_t v8 = *((void *)v6 + 1);
  *((void *)v6 + 1) = v11;
  uint64_t v11 = v8;
  sub_215CE9D14(&v11, v7);
}

void sub_215A2E418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A2E42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14((uint64_t *)(v9 + 8), a9);
  _Unwind_Resume(a1);
}

void sub_215A2E444(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v2 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "dictionary";
    *(void *)(a1 + 80) = 10;
    if (!v2) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_21575FC70((uint64_t)v3, a2);
}

void sub_215A2E58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t *a12, unsigned __int8 a13)
{
  sub_215CE9D14(v13, a13);
  sub_215DDC738(&a12);
  sub_215733368((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_215A2E5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2E5C8(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = sub_215CE9B60(v4);
  sub_215D2B4A4((uint64_t)v5, v3);
}

void sub_215A2E6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_215A2E6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A2E6FC(uint64_t a1, uint64_t a2)
{
  long long v29 = 0u;
  memset(v28, 0, sizeof(v28));
  sub_215D2B5FC(&v24, a2);
  uint64_t v3 = v24;
  *(void *)&v28[0] = v24;
  int v4 = (void **)v25;
  *(_OWORD *)((char *)v28 + 8) = v25;
  uint64_t v5 = v26;
  *((void *)&v28[1] + 1) = v26;
  int64_t v23 = (char *)v27;
  long long v29 = v27;
  if (*(void *)(a1 + 40))
  {
    std::string::size_type v22 = (void **)v25;
    uint64_t v6 = *(void **)(a1 + 24);
    LOBYTE(v24) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v6, (uint64_t)&v24, 1);
    int v4 = v22;
  }
  int v7 = v4;
  uint64_t v8 = ((char *)v4 - (char *)v3) / 24;
  std::ostream::operator<<();
  uint64_t v9 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v9;
  if (v7 != v3)
  {
    uint64_t v10 = 24 * v8;
    uint64_t v11 = (uint64_t)v3;
    do
    {
      sub_215DF933C(a1, v11);
      v11 += 24;
      v10 -= 24;
    }
    while (v10);
    uint64_t v9 = *(void *)(a1 + 40);
  }
  if (v9)
  {
    CFTypeID v12 = *(void **)(a1 + 24);
    LOBYTE(v24) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v12, (uint64_t)&v24, 1);
  }
  BOOL v13 = v23;
  std::ostream::operator<<();
  uint64_t v14 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v14;
  if (v23 == v5)
  {
    if (!v5) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v15 = 0;
  do
  {
    if (v14)
    {
      uint64_t v16 = *(void **)(a1 + 24);
      LOBYTE(v24) = *(unsigned char *)(a1 + 32);
      sub_215731D94(v16, (uint64_t)&v24, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a1 + 40);
    sub_215A2EA14(a1, (uint64_t)&v5[v15]);
    char v17 = *(unsigned char *)(a1 + 34);
    if (*(void *)(a1 + 40))
    {
      uint64_t v18 = *(void **)(a1 + 24);
      LOBYTE(v24) = *(unsigned char *)(a1 + 32);
      sub_215731D94(v18, (uint64_t)&v24, 1);
    }
    uint64_t v19 = *(void **)(a1 + 24);
    LOBYTE(v24) = v17;
    sub_215731D94(v19, (uint64_t)&v24, 1);
    uint64_t v14 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 40) = v14;
    v15 += 24;
  }
  while (24 * ((v23 - v5) / 24) != v15);
  if (v5)
  {
    do
    {
      size_t v20 = (std::__shared_weak_count *)*((void *)v13 - 1);
      if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      v13 -= 24;
    }
    while (v13 != v5);
    uint64_t v5 = (char *)*((void *)&v28[1] + 1);
    uint64_t v3 = *(void ***)&v28[0];
LABEL_24:
    operator delete(v5);
  }
LABEL_25:
  if (v3)
  {
    for (i = (void **)*((void *)&v28[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0) {
        operator delete(*(i - 3));
      }
    }
    operator delete(v3);
  }
}

void sub_215A2E9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2E9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2E9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2E9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2EA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2EA14(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    int v4 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  switch(*(_WORD *)a2)
  {
    case 0:
      uint64_t v5 = *(const void **)(a2 + 8);
      if (v5)
      {
        CFTypeID TypeID = CFNumberGetTypeID();
        if (CFGetTypeID(v5) == TypeID) {
          sub_215A2DAFC(&v33, *(CFTypeRef *)(a2 + 8));
        }
      }
      v27[0] = 0;
      v27[1] = 0;
      sub_215A2DC70((uint64_t)&theArray, (uint64_t)v27);
    case 1:
      sub_215DD0C9C(*(void *)(a2 + 8), &__p);
      sub_215DF933C(a1, (uint64_t)&__p);
      if ((_BYTE)v32 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    case 2:
      CFBooleanRef v9 = *(const __CFBoolean **)(a2 + 8);
      if (!v9) {
        goto LABEL_13;
      }
      CFTypeID v10 = CFBooleanGetTypeID();
      if (CFGetTypeID(v9) == v10)
      {
        CFBooleanGetValue(v9);
LABEL_13:
        if (*(void *)(a1 + 40)) {
          goto LABEL_14;
        }
      }
      else if (*(void *)(a1 + 40))
      {
LABEL_14:
        uint64_t v11 = *(void **)(a1 + 24);
        __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
        sub_215731D94(v11, (uint64_t)&__p, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a1 + 40);
      return;
    case 3:
      CFTypeID v12 = *(const void **)(a2 + 8);
      if (v12)
      {
        CFTypeID v13 = CFArrayGetTypeID();
        if (CFGetTypeID(v12) == v13) {
          sub_215A2DD94(&__p, *(CFTypeRef *)(a2 + 8));
        }
      }
      CFArrayRef theArray = 0;
      long long v29 = 0;
      memset(&__p, 0, sizeof(__p));
      CFIndex Count = CFArrayGetCount(0);
      sub_215A2D74C(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        sub_215A2E08C(&v33, ValueAtIndex);
      }
      if (*(void *)(a1 + 40))
      {
        uint64_t v16 = *(void **)(a1 + 24);
        LOBYTE(v30) = *(unsigned char *)(a1 + 32);
        sub_215731D94(v16, (uint64_t)&v30, 1);
      }
      std::ostream::operator<<();
      uint64_t v17 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 40) = v17;
      std::string::size_type v18 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        int64_t v19 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          if (v17)
          {
            size_t v20 = *(void **)(a1 + 24);
            LOBYTE(v30) = *(unsigned char *)(a1 + 32);
            sub_215731D94(v20, (uint64_t)&v30, 1);
          }
          std::ostream::operator<<();
          ++*(void *)(a1 + 40);
          sub_215A2EA14(a1, v18, 2);
          char v21 = *(unsigned char *)(a1 + 34);
          if (*(void *)(a1 + 40))
          {
            std::string::size_type v22 = *(void **)(a1 + 24);
            LOBYTE(v30) = *(unsigned char *)(a1 + 32);
            sub_215731D94(v22, (uint64_t)&v30, 1);
          }
          int64_t v23 = *(void **)(a1 + 24);
          LOBYTE(v30) = v21;
          sub_215731D94(v23, (uint64_t)&v30, 1);
          uint64_t v17 = *(void *)(a1 + 40) + 1;
          *(void *)(a1 + 40) = v17;
          v18 += 24;
          v19 -= 24;
        }
        while (v19);
        std::string::size_type v18 = __p.__r_.__value_.__r.__words[0];
      }
      if (v18)
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        long long v25 = (void *)v18;
        if (__p.__r_.__value_.__l.__size_ != v18)
        {
          do
          {
            uint64_t v26 = *(std::__shared_weak_count **)(size - 8);
            if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
            size -= 24;
          }
          while (size != v18);
          long long v25 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v18;
        operator delete(v25);
      }
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      return;
    case 4:
      int v7 = *(const void **)(a2 + 8);
      if (v7)
      {
        CFTypeID v8 = CFDictionaryGetTypeID();
        if (CFGetTypeID(v7) == v8) {
          sub_21575FD94(&__p, *(CFTypeRef *)(a2 + 8));
        }
      }
      CFArrayRef theArray = 0;
      long long v29 = 0;
      sub_215DD1B28((int)&__p, 0, 1);
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215A2F480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2F49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215733368(v6 - 80);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2F4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A2F4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A2F57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  sub_21573580C((uint64_t)va2);
  sub_215733368((uint64_t)va);
  sub_215986E24((void **)va3);
  sub_215733368((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_215A2F5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215986E24(va1);
  sub_215733368((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215A2F5E4(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = sub_215CE9B60(v4);
  sub_215D2B4A4((uint64_t)v5, v3);
}

void sub_215A2F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_215A2F704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A2F718(uint64_t a1, uint64_t a2)
{
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  sub_215D2B5FC(&__src, a2);
  uint64_t v3 = (char *)__src;
  *(void *)&v19[0] = __src;
  *(_OWORD *)((char *)v19 + 8) = v16;
  int v4 = v17;
  *((void *)&v19[1] + 1) = v17;
  uint64_t v14 = (char *)v18;
  long long v20 = v18;
  uint64_t v5 = (char *)v16;
  uint64_t v6 = ((uint64_t)v16 - __src) / 24;
  uint64_t __src = v6;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v16, 8);
  if (v5 != v3)
  {
    uint64_t v7 = 24 * v6;
    uint64_t v8 = v3;
    do
    {
      sub_215D023C8(a1, v8);
      v8 += 24;
      v7 -= 24;
    }
    while (v7);
  }
  uint64_t v9 = v14;
  uint64_t __src = (v14 - v4) / 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v16, 8);
  if (v14 == v4)
  {
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  uint64_t v10 = 0;
  do
  {
    int v21 = 2;
    sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&v21, (char *)&v22, 4);
    sub_215D02034((void *)a1);
    sub_215A2F9E8(a1, (uint64_t)&v4[v10]);
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
    *(void *)(v11 + 10) = *(void *)(a1 + 32) - v11 - 18;
    *(void *)(a1 + 56) -= 8;
    v10 += 24;
  }
  while (24 * ((v14 - v4) / 24) != v10);
  if (v4)
  {
    do
    {
      uint64_t v12 = (std::__shared_weak_count *)*((void *)v9 - 1);
      if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
      v9 -= 24;
    }
    while (v9 != v4);
    int v4 = (char *)*((void *)&v19[1] + 1);
    uint64_t v3 = *(char **)&v19[0];
LABEL_15:
    operator delete(v4);
  }
LABEL_16:
  if (v3)
  {
    for (i = (void **)*((void *)&v19[0] + 1); i != (void **)v3; i -= 3)
    {
      if (*((char *)i - 1) < 0) {
        operator delete(*(i - 3));
      }
    }
    operator delete(v3);
  }
}

void sub_215A2F984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2F9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2F9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2F9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A2F9E8(uint64_t a1, uint64_t a2)
{
  LOWORD(__p.__r_.__value_.__l.__data_) = *(_WORD *)a2;
  uint64_t v4 = a1 + 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[2], 2);
  switch(*(_WORD *)a2)
  {
    case 0:
      uint64_t v5 = *(const void **)(a2 + 8);
      if (v5)
      {
        CFTypeID TypeID = CFNumberGetTypeID();
        if (CFGetTypeID(v5) == TypeID) {
          sub_215A2DAFC(&v31, *(CFTypeRef *)(a2 + 8));
        }
      }
      v24[0] = 0;
      v24[1] = 0;
      sub_215A2DC70((uint64_t)&theArray, (uint64_t)v24);
    case 1:
      sub_215DD0C9C(*(void *)(a2 + 8), &__p);
      sub_215D023C8(a1, (char *)&__p);
      if ((_BYTE)v30 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      break;
    case 2:
      CFBooleanRef v9 = *(const __CFBoolean **)(a2 + 8);
      if (v9 && (CFTypeID v10 = CFBooleanGetTypeID(), CFGetTypeID(v9) == v10))
      {
        __int16 v11 = CFBooleanGetValue(v9) != 0;
        __int16 v12 = 1;
      }
      else
      {
        __int16 v11 = 0;
        __int16 v12 = 0;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = v11 | (v12 << 8);
      sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&__p, &__p.__r_.__value_.__s.__data_[1], 1);
      break;
    case 3:
      uint64_t v13 = *(const void **)(a2 + 8);
      if (v13)
      {
        CFTypeID v14 = CFArrayGetTypeID();
        if (CFGetTypeID(v13) == v14) {
          sub_215A2DD94(&__p, *(CFTypeRef *)(a2 + 8));
        }
      }
      CFArrayRef theArray = 0;
      uint64_t v26 = 0;
      memset(&__p, 0, sizeof(__p));
      CFIndex Count = CFArrayGetCount(0);
      sub_215A2D74C(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        sub_215A2E08C(&v31, ValueAtIndex);
      }
      unint64_t __src = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&__src, v28, 8);
      std::string::size_type v17 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        int64_t v18 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          LODWORD(v31) = 2;
          sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v31, (char *)&v31 + 4, 4);
          uint64_t v19 = v31;
          sub_215D02034((void *)a1);
          sub_215A2F9E8(a1, v17, v19);
          uint64_t v20 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
          *(void *)(v20 + 10) = *(void *)(a1 + 32) - v20 - 18;
          *(void *)(a1 + 56) -= 8;
          v17 += 24;
          v18 -= 24;
        }
        while (v18);
        std::string::size_type v17 = __p.__r_.__value_.__r.__words[0];
      }
      if (v17)
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        uint64_t v22 = (void *)v17;
        if (__p.__r_.__value_.__l.__size_ != v17)
        {
          do
          {
            int64_t v23 = *(std::__shared_weak_count **)(size - 8);
            if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
            size -= 24;
          }
          while (size != v17);
          uint64_t v22 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v17;
        operator delete(v22);
      }
      if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
      break;
    case 4:
      uint64_t v7 = *(const void **)(a2 + 8);
      if (v7)
      {
        CFTypeID v8 = CFDictionaryGetTypeID();
        if (CFGetTypeID(v7) == v8) {
          sub_21575FD94(&__p, *(CFTypeRef *)(a2 + 8));
        }
      }
      CFArrayRef theArray = 0;
      uint64_t v26 = 0;
      sub_215DD1B28((int)&__p, 0, 1);
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215A303C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A303DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_215733368(v6 - 80);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A303F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3040C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26)
{
  if ((_BYTE)a26)
  {
    if (a25 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A304BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  sub_21573580C((uint64_t)va2);
  sub_215733368((uint64_t)va);
  sub_215986E24((void **)va3);
  sub_215733368((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_215A304F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215986E24(va1);
  sub_215733368((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215A30524(int *a1, uint64_t a2, void *a3)
{
  int v6 = 2;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 >= 1)
  {
    if (*a1 != 2 || (int v7 = 2, (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7), *a1 > 0))
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
      sub_215A30668(a2, a3);
    }
  }
  sub_215A30668(a2, a3);
}

void sub_215A30668(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = sub_215CE9B60(v4);
  sub_215D2B4A4((uint64_t)v5, v3);
}

void sub_215A3076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_215A30788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3079C(_DWORD *a1, uint64_t a2)
{
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  sub_215D2B5FC(&v14, a2);
  uint64_t v3 = (void **)v14;
  *(void *)&v18[0] = v14;
  *(_OWORD *)((char *)v18 + 8) = v15;
  uint64_t v4 = v16;
  *((void *)&v18[1] + 1) = v16;
  uint64_t v13 = (char *)v17;
  long long v19 = v17;
  uint64_t v5 = *(void *)a1;
  int v6 = (void **)v15;
  uint64_t v7 = (uint64_t)(v15 - v14) / 24;
  unint64_t v14 = v7;
  (*(void (**)(_DWORD *, unint64_t *))(v5 + 120))(a1, &v14);
  if (v6 != v3)
  {
    uint64_t v8 = 24 * v7;
    uint64_t v9 = (char *)v3;
    do
    {
      (*(void (**)(_DWORD *, char *))(*(void *)a1 + 144))(a1, v9);
      v9 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  uint64_t v10 = v13;
  unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v4) >> 3);
  (*(void (**)(_DWORD *, unint64_t *))(*(void *)a1 + 120))(a1, &v20);
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v4) >> 3);
  *(void *)&long long v15 = v4;
  sub_215A30A00(a1, &v14);
  if (v4)
  {
    if (v13 != v4)
    {
      do
      {
        uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 - 1);
        if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v10 -= 24;
      }
      while (v10 != v4);
      uint64_t v4 = (char *)*((void *)&v18[1] + 1);
      uint64_t v3 = *(void ***)&v18[0];
    }
    operator delete(v4);
  }
  if (v3)
  {
    for (i = (void **)*((void *)&v18[0] + 1); i != v3; i -= 3)
    {
      if (*((char *)i - 1) < 0) {
        operator delete(*(i - 3));
      }
    }
    operator delete(v3);
  }
}

void sub_215A309B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A309C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A309D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A309EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A30A00(_DWORD *a1, void *a2)
{
  if (*a2)
  {
    std::string::size_type v3 = a2[1];
    uint64_t v4 = 24 * *a2;
    do
    {
      while (1)
      {
        int v5 = a1[2];
        int v7 = 2;
        (*(void (**)(_DWORD *, int *))(*(void *)a1 + 104))(a1, &v7);
        if (v5 >= 1) {
          break;
        }
        sub_215A30C9C((uint64_t)a1, v3);
        v3 += 24;
        v4 -= 24;
        if (!v4) {
          return;
        }
      }
      if (v5 == 2)
      {
        int v6 = 2;
        (*(void (**)(_DWORD *, int *))(*(void *)a1 + 104))(a1, &v6);
      }
      (*(void (**)(_DWORD *))(*(void *)a1 + 16))(a1);
      sub_215A30C9C((uint64_t)a1, v3);
      (*(void (**)(_DWORD *))(*(void *)a1 + 24))(a1);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
}

uint64_t sub_215A30B58(int *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v8 = 2;
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v8);
  uint64_t v6 = v8;
  if (*a1 < 1) {
    return sub_215A30C9C(a2, a3, v6);
  }
  if (*a1 == 2)
  {
    int v9 = 2;
    (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v9);
    if (*a1 <= 0) {
      return sub_215A30C9C(a2, a3, v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  sub_215A30C9C(a2, a3, v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

void sub_215A30C9C(uint64_t a1, std::string::size_type a2)
{
  __p.__r_.__value_.__r.__words[0] = a2;
  sub_215A317BC((unsigned char *)a1, &__p);
  switch(*(_WORD *)a2)
  {
    case 0:
      uint64_t v4 = *(const void **)(a2 + 8);
      if (v4)
      {
        CFTypeID TypeID = CFNumberGetTypeID();
        if (CFGetTypeID(v4) == TypeID) {
          sub_215A2DAFC(&v27, *(CFTypeRef *)(a2 + 8));
        }
      }
      v21[0] = 0;
      v21[1] = 0;
      sub_215A2DC70((uint64_t)&theArray, (uint64_t)v21);
    case 1:
      sub_215DD0C9C(*(void *)(a2 + 8), &__p);
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 144))(a1, &__p);
      if ((_BYTE)v26 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      break;
    case 2:
      CFBooleanRef v8 = *(const __CFBoolean **)(a2 + 8);
      if (v8 && (CFTypeID v9 = CFBooleanGetTypeID(), CFGetTypeID(v8) == v9))
      {
        __int16 v10 = CFBooleanGetValue(v8) != 0;
        __int16 v11 = 1;
      }
      else
      {
        __int16 v10 = 0;
        __int16 v11 = 0;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = v10 | (v11 << 8);
      (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 32))(a1, &__p);
      break;
    case 3:
      uint64_t v12 = *(const void **)(a2 + 8);
      if (v12)
      {
        CFTypeID v13 = CFArrayGetTypeID();
        if (CFGetTypeID(v12) == v13) {
          sub_215A2DD94(&__p, *(CFTypeRef *)(a2 + 8));
        }
      }
      CFArrayRef theArray = 0;
      uint64_t v23 = 0;
      memset(&__p, 0, sizeof(__p));
      CFIndex Count = CFArrayGetCount(0);
      sub_215A2D74C(&__p.__r_.__value_.__l.__data_, Count);
      if (Count)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
        sub_215A2E08C(&v27, ValueAtIndex);
      }
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
      (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v27);
      std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        int64_t v17 = 24 * ((int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 24);
        do
        {
          uint64_t v24 = *(void *)(a1 + 8);
          sub_215A30B58((int *)&v24, a1, v16);
          v16 += 24;
          v17 -= 24;
        }
        while (v17);
        std::string::size_type v16 = __p.__r_.__value_.__r.__words[0];
      }
      if (v16)
      {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        long long v19 = (void *)v16;
        if (__p.__r_.__value_.__l.__size_ != v16)
        {
          do
          {
            unint64_t v20 = *(std::__shared_weak_count **)(size - 8);
            if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            size -= 24;
          }
          while (size != v16);
          long long v19 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        __p.__r_.__value_.__l.__size_ = v16;
        operator delete(v19);
      }
      break;
    case 4:
      uint64_t v6 = *(const void **)(a2 + 8);
      if (v6)
      {
        CFTypeID v7 = CFDictionaryGetTypeID();
        if (CFGetTypeID(v6) == v7) {
          sub_21575FD94(&__p, *(CFTypeRef *)(a2 + 8));
        }
      }
      CFArrayRef theArray = 0;
      uint64_t v23 = 0;
      sub_215DD1B28((int)&__p, 0, 1);
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 281, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215A31660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A31754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  sub_21573580C((uint64_t)va2);
  sub_215733368((uint64_t)va);
  sub_215986E24((void **)va3);
  sub_215733368((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_215A31788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_215986E24(va1);
  sub_215733368((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215A317BC(unsigned char *a1, _WORD **a2)
{
  if ((a1[12] & 2) != 0)
  {
    int v4 = 0;
    sub_215A2D898();
  }
  v3[0] = **a2;
  return (*(uint64_t (**)(unsigned char *, _WORD *))(*(void *)a1 + 96))(a1, v3);
}

void sub_215A318E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A31900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A31914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215A31928(int *a1, unsigned char *a2, unsigned char *a3)
{
  LODWORD(v7) = 2;
  (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, &v7);
  if (*a1 < 1
    || *a1 == 2
    && (LODWORD(v7) = 2, (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, &v7), *a1 < 1))
  {
    uint64_t v7 = a3;
    sub_2159D0EBC(a2, &v7);
    return sub_2159D0B2C(*a3, (uint64_t)a3, (uint64_t)a2);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    uint64_t v7 = a3;
    sub_2159D0EBC(a2, &v7);
    sub_2159D0B2C(*a3, (uint64_t)a3, (uint64_t)a2);
    return (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

void sub_215A31A88()
{
}

void sub_215A31B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A31BA8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "dictionary";
    *(void *)(a1 + 96) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    operator new();
  }
  v5[0] = 0;
  v5[1] = 0;
  int v4 = v5;
  sub_215DD7D78();
}

void sub_215A31DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A31E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215CE9BC8(v7);
  MEMORY[0x2166C4D20](v7, 0x10E2C40590DAB7CLL);
  sub_215DDC9D8((void ****)va);
  _Unwind_Resume(a1);
}

void sub_215A31E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DDC9D8((void ****)va);
  _Unwind_Resume(a1);
}

void sub_215A31E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A31E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DDC9D8((void ****)va);
  _Unwind_Resume(a1);
}

void sub_215A31E84(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "dictionary";
  *(void *)(a1 + 96) = 10;
  if (!v1) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  operator new();
}

void sub_215A32020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DDC9D8((void ****)va);
  _Unwind_Resume(a1);
}

void sub_215A32034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DDC9D8((void ****)va);
  _Unwind_Resume(a1);
}

void sub_215A32048(uint64_t a1, uint64_t a2)
{
  sub_21575FC70((uint64_t)&v2, a2);
}

void sub_215A3217C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A32190(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "dictionary";
    *(void *)(a1 + 96) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    operator new();
  }
  v5[0] = 0;
  v5[1] = 0;
  int v4 = v5;
  sub_215DD7D78();
}

void sub_215A323DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A323F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215CE9BC8(v7);
  MEMORY[0x2166C4D20](v7, 0x10E2C40590DAB7CLL);
  sub_215DDC9D8((void ****)va);
  _Unwind_Resume(a1);
}

void sub_215A32430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DDC9D8((void ****)va);
  _Unwind_Resume(a1);
}

void sub_215A32444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A32458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DDC9D8((void ****)va);
  _Unwind_Resume(a1);
}

void sub_215A3246C(uint64_t a1, uint64_t a2)
{
  sub_21575FC70((uint64_t)&v2, a2);
}

void sub_215A325A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A325B4(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = 2;
  sub_215DFF824(*(void *)(a2 + 48), &v3);
  if (v3 > 1)
  {
    sub_2159B0060((void *)(a2 + 16));
    sub_215A326B8();
  }
  sub_215A327F4();
}

void sub_215A326B8()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A32788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A327A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A327F4()
{
}

void sub_215A32900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A32914(void *a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  sub_2159B0844((uint64_t)a1, (char **)v9);
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (unint64_t)__p[1]) >> 3);
  sub_215DFFC24(a1[6], &v8);
  uint64_t v2 = (char *)v11;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (unint64_t)__p[1]) >> 3);
  unint64_t v4 = v8 - v3;
  if ((unint64_t)v8 > v3)
  {
    sub_215A32E80((char **)&__p[1], v4);
    uint64_t v5 = __p[1];
    if ((void *)v11 == __p[1]) {
      goto LABEL_18;
    }
LABEL_14:
    unsigned int v12 = 2;
    sub_215DFF824(a1[6], &v12);
    if (v12 > 1)
    {
      sub_2159B0060(a1 + 2);
      sub_215A3337C(a1, v5);
    }
    sub_215A33180((uint64_t)&v12, a1);
  }
  if ((unint64_t)v8 >= v3)
  {
    uint64_t v5 = __p[1];
    if ((void *)v11 != __p[1]) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v6 = (char *)__p[1] + 24 * v8;
    if ((char *)v11 != v6)
    {
      do
      {
        uint64_t v7 = (std::__shared_weak_count *)*((void *)v2 - 1);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v7->__on_zero_shared)(v7, v4);
          std::__shared_weak_count::__release_weak(v7);
        }
        v2 -= 24;
      }
      while (v2 != v6);
    }
    *(void *)&long long v11 = v6;
    uint64_t v5 = __p[1];
    if (v6 != __p[1]) {
      goto LABEL_14;
    }
  }
LABEL_18:
  sub_215D2BBA4((uint64_t *)v9);
}

void sub_215A32CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A32CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A32CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A32D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A32D18(void *a1, char **a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_215DFFC24(a1[6], &v14);
  unint64_t v4 = a2[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  unint64_t v6 = v14 - v5;
  if (v14 > v5)
  {
    sub_215A32E80(a2, v6);
    uint64_t v9 = a2;
    uint64_t v7 = *a2;
    long long v8 = v9[1];
    uint64_t v10 = v8 - v7;
    if (v8 == v7) {
      return;
    }
    goto LABEL_14;
  }
  if (v14 >= v5)
  {
    uint64_t v7 = *a2;
    uint64_t v10 = v4 - v7;
    if (v4 == v7) {
      return;
    }
    goto LABEL_14;
  }
  for (uint64_t i = (uint64_t)&(*a2)[24 * v14]; v4 != (char *)i; v4 -= 24)
  {
    unsigned int v12 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  a2[1] = (char *)i;
  uint64_t v7 = *a2;
  uint64_t v10 = i - (void)v7;
  if ((char *)i != v7)
  {
LABEL_14:
    uint64_t v13 = 24 * (v10 / 24);
    do
    {
      sub_215A3307C((uint64_t)&v15, a1, (uint64_t)v7);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
}

void sub_215A32E80(char **a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      long long v11 = &v4[24 * a2];
      unsigned int v12 = v4 + 8;
      uint64_t v13 = 24 * a2;
      do
      {
        *unsigned int v12 = 0;
        v12[1] = 0;
        v12 += 3;
        v13 -= 24;
      }
      while (v13);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v4;
    }
    return;
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v7 = v6 + a2;
  if (v6 + a2 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  if (2 * v8 > v7) {
    unint64_t v7 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AD8();
    }
    uint64_t v10 = (char *)operator new(24 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  unint64_t v14 = &v10[24 * v6];
  char v15 = &v10[24 * v9];
  uint64_t v16 = 24 * a2;
  int64_t v17 = &v14[24 * a2];
  int64_t v18 = v14 + 8;
  do
  {
    void *v18 = 0;
    v18[1] = 0;
    v18 += 3;
    v16 -= 24;
  }
  while (v16);
  long long v19 = *a1;
  unint64_t v20 = a1[1];
  if (v20 == *a1)
  {
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (!v20) {
      return;
    }
    goto LABEL_32;
  }
  do
  {
    __int16 v21 = *((_WORD *)v20 - 12);
    v20 -= 24;
    *((_WORD *)v14 - 12) = v21;
    v14 -= 24;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(v20 + 8);
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = 0;
  }
  while (v20 != v19);
  uint64_t v22 = *a1;
  unint64_t v20 = a1[1];
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v15;
  if (v20 != v22)
  {
    do
    {
      uint64_t v23 = (std::__shared_weak_count *)*((void *)v20 - 1);
      if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      v20 -= 24;
    }
    while (v20 != v22);
    unint64_t v20 = v22;
  }
  if (v20)
  {
LABEL_32:
    operator delete(v20);
  }
}

uint64_t sub_215A3307C(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v8 = 2;
  sub_215DFF824(a2[6], &v8);
  if (v8 <= 1) {
    sub_215A33180((uint64_t)&v9, a2);
  }
  sub_2159B0060(a2 + 2);
  sub_215A3337C(a2, a3, 2);
  uint64_t v5 = a2[4];
  uint64_t result = (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2);
  uint64_t v7 = *(void *)(v5 - 16) - result + *(void *)(v5 - 8);
  if (v7) {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a2[2] + 40))(a2 + 2, v7);
  }
  a2[4] -= 16;
  return result;
}

void sub_215A33180(uint64_t a1, void *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215A351D4(a2, &v2);
}

void sub_215A33338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A33354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A33368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3337C(void *a1, _WORD *a2)
{
  LOWORD(v11[0]) = 0;
  sub_215DFF670(a1[6], v11);
  int v4 = LOWORD(v11[0]);
  *a2 = v11[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v11[0]) = 7;
      LOBYTE(v11[1]) = 7;
      uint64_t v5 = operator new(4uLL);
      std::string __p = v5;
      *uint64_t v5 = 0;
      uint64_t v13 = v5 + 1;
      unint64_t v14 = v5 + 1;
      LODWORD(v8[0]) = 2;
      sub_215DFF824(a1[6], v8);
      sub_2159D1D90((uint64_t)v8, a1, (unsigned __int8 *)v11, v8[0]);
      sub_215DD976C((uint64_t)v8, (unsigned __int8 *)&v11[1]);
      long long v10 = *(_OWORD *)v8;
      sub_215A33D98((uint64_t)v6, (uint64_t)&v10);
    case 1:
      v11[0] = 0;
      v11[1] = 0;
      std::string __p = 0;
      sub_215E000A8(a1[6], v11);
      sub_215DD0B64((uint64_t)v11);
    case 2:
      LOBYTE(v6[0]) = 0;
      sub_215DFFFB0(a1[6], v6);
      sub_215DD0A48();
    case 3:
      v8[0] = 0;
      v8[1] = 0;
      uint64_t v9 = 0;
      sub_215A32D18(a1, (char **)v8);
      v11[1] = 0;
      std::string __p = 0;
      v11[0] = 0;
      sub_215A3434C((uint64_t)v11, 0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)v8[0]) >> 3));
      sub_215A34470((uint64_t)v8[0], (uint64_t)v8[1], (uint64_t)v11);
      *(_OWORD *)unint64_t v6 = *(_OWORD *)v11;
      uint64_t v7 = __p;
      sub_215A34874();
    case 4:
      v11[1] = 0;
      std::string __p = 0;
      v11[0] = &v11[1];
      sub_215DD7D78();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215A33C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_215A33C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A33C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
}

void sub_215A33C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_215A33CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  unint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2157361F0((void **)va1);
  sub_215986E24((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A33CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215986E24((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A33CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A33D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215A33D98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215A2E08C(&v5, v3);
}

void sub_215A33EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A33EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215A2E08C(&v5, v3);
}

void sub_215A33FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A33FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215A2E08C(&v5, v3);
}

void sub_215A340F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A34104(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215A2E08C(&v5, v3);
}

void sub_215A34214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A34228(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215A2E08C(&v5, v3);
}

void sub_215A34338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3434C(uint64_t a1, unint64_t a2)
{
  __int16 v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    if (a2 >> 60) {
      sub_215738AC0();
    }
    uint64_t v4 = *(char **)(a1 + 8);
    uint64_t v5 = 16 * a2;
    unint64_t v6 = (char *)operator new(16 * a2);
    uint64_t v7 = &v6[v5];
    uint64_t v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v9 = &v6[v4 - v2];
      do
      {
        long long v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
      }
      while (v4 != v2);
      __int16 v2 = *(char **)a1;
      uint64_t v11 = *(char **)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      for (*(void *)(a1 + 16) = v7; v11 != v2; v11 -= 16)
      {
        uint64_t v12 = (std::__shared_weak_count *)*((void *)v11 - 1);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    if (v2)
    {
      operator delete(v2);
    }
  }
}

uint64_t sub_215A34470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215A345F8((uint64_t)&v4, a1 + 8);
  }
  return a3;
}

void sub_215A345C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A345E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A345F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_215A2E08C(&v5, v3);
}

void sub_215A34708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_215A3471C(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_215738AC0();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 60) {
      sub_215738AD8();
    }
    uint64_t v8 = (char *)operator new(16 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[16 * v3];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  long long v10 = v9 + 16;
  uint64_t v11 = &v8[16 * v7];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    do
    {
      long long v14 = *((_OWORD *)v13 - 1);
      v13 -= 16;
      *((_OWORD *)v9 - 1) = v14;
      v9 -= 16;
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = 0;
    }
    while (v13 != v12);
    uint64_t v13 = *a1;
    char v15 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    for (a1[2] = v11; v15 != v13; v15 -= 16)
    {
      uint64_t v16 = (std::__shared_weak_count *)*((void *)v15 - 1);
      if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v10;
}

void sub_215A34874()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF70]);
  sub_215DD0FA4((int)theArray, Mutable, 0);
}

void sub_215A34AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A34B48()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A34CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A34CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A34CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
}

void sub_215A34D04(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  sub_2159B0844(a1, (char **)v11);
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (unint64_t)__p[1]) >> 3);
  sub_215DFFC24(*(void *)(a1 + 48), &v10);
  __int16 v2 = (char *)v13;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (unint64_t)__p[1]) >> 3);
  unint64_t v4 = v10 - v3;
  if ((unint64_t)v10 <= v3)
  {
    if ((unint64_t)v10 >= v3)
    {
      uint64_t v5 = (char *)__p[1];
      int64_t v6 = v13 - (unint64_t)__p[1];
      if ((void *)v13 == __p[1]) {
        goto LABEL_16;
      }
    }
    else
    {
      unint64_t v7 = (char *)__p[1] + 24 * v10;
      if ((char *)v13 != v7)
      {
        do
        {
          uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 - 1);
          if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v8->__on_zero_shared)(v8, v4);
            std::__shared_weak_count::__release_weak(v8);
          }
          v2 -= 24;
        }
        while (v2 != v7);
      }
      *(void *)&long long v13 = v7;
      uint64_t v5 = (char *)__p[1];
      int64_t v6 = v7 - (char *)__p[1];
      if (v7 == __p[1]) {
LABEL_16:
      }
        sub_215D2AF78((uint64_t *)v11);
    }
  }
  else
  {
    sub_215A32E80((char **)&__p[1], v4);
    uint64_t v5 = (char *)__p[1];
    int64_t v6 = v13 - (unint64_t)__p[1];
    if ((void *)v13 == __p[1]) {
      goto LABEL_16;
    }
  }
  uint64_t v9 = 24 * (v6 / 24);
  do
  {
    unsigned int v14 = 1;
    sub_215DFF824(*(void *)(a1 + 48), &v14);
    sub_215A351D4(a1, v5, v14);
    v5 += 24;
    v9 -= 24;
  }
  while (v9);
  goto LABEL_16;
}

void sub_215A35008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A3501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A35030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A35044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A35058(uint64_t a1, char **a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_215DFFC24(*(void *)(a1 + 48), &v14);
  unint64_t v4 = a2[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  unint64_t v6 = v14 - v5;
  if (v14 > v5)
  {
    sub_215A32E80(a2, v6);
    uint64_t v9 = a2;
    unint64_t v7 = *a2;
    uint64_t v8 = v9[1];
    uint64_t v10 = v8 - v7;
    if (v8 == v7) {
      return;
    }
    goto LABEL_14;
  }
  if (v14 >= v5)
  {
    unint64_t v7 = *a2;
    uint64_t v10 = v4 - v7;
    if (v4 == v7) {
      return;
    }
    goto LABEL_14;
  }
  for (uint64_t i = (uint64_t)&(*a2)[24 * v14]; v4 != (char *)i; v4 -= 24)
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  a2[1] = (char *)i;
  unint64_t v7 = *a2;
  uint64_t v10 = i - (void)v7;
  if ((char *)i != v7)
  {
LABEL_14:
    uint64_t v13 = 24 * (v10 / 24);
    do
    {
      unsigned int v15 = 1;
      sub_215DFF824(*(void *)(a1 + 48), &v15);
      sub_215A351D4(a1, v7, v15);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
}

void sub_215A351D4(void *a1, _WORD *a2)
{
  LOWORD(v11[0]) = 0;
  sub_215DFF670(a1[6], v11);
  int v4 = LOWORD(v11[0]);
  *a2 = v11[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v11[0]) = 7;
      LOBYTE(v11[1]) = 7;
      unint64_t v5 = operator new(4uLL);
      std::string __p = v5;
      *unint64_t v5 = 0;
      uint64_t v13 = v5 + 1;
      unint64_t v14 = v5 + 1;
      LODWORD(v8[0]) = 2;
      sub_215DFF824(a1[6], v8);
      sub_2159D1D90((uint64_t)v8, a1, (unsigned __int8 *)v11, v8[0]);
      sub_215DD976C((uint64_t)v8, (unsigned __int8 *)&v11[1]);
      long long v10 = *(_OWORD *)v8;
      sub_215A33D98((uint64_t)v6, (uint64_t)&v10);
    case 1:
      v11[0] = 0;
      v11[1] = 0;
      std::string __p = 0;
      sub_215E000A8(a1[6], v11);
      sub_215DD0B64((uint64_t)v11);
    case 2:
      LOBYTE(v6[0]) = 0;
      sub_215DFFFB0(a1[6], v6);
      sub_215DD0A48();
    case 3:
      v8[0] = 0;
      v8[1] = 0;
      uint64_t v9 = 0;
      sub_215A35058((uint64_t)a1, (char **)v8);
      v11[1] = 0;
      std::string __p = 0;
      v11[0] = 0;
      sub_215A3434C((uint64_t)v11, 0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)v8[0]) >> 3));
      sub_215A35B5C((uint64_t)v8[0], (uint64_t)v8[1], (uint64_t)v11);
      *(_OWORD *)unint64_t v6 = *(_OWORD *)v11;
      unint64_t v7 = __p;
      sub_215A34874();
    case 4:
      v11[1] = 0;
      std::string __p = 0;
      v11[0] = &v11[1];
      sub_215DD7D78();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215A35A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_215A35A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A35A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
}

void sub_215A35A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_215A35A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  unint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2157361F0((void **)va1);
  sub_215986E24((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A35AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215986E24((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A35AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A35ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215A35B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215A345F8((uint64_t)&v4, a1 + 8);
  }
  return a3;
}

void sub_215A35CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A35CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A35CE4()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A35DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A35DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A35E20()
{
}

void sub_215A35F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A35F40(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "dictionary";
    *(void *)(a1 + 96) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    operator new();
  }
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v4 = v5;
  sub_215DD7D78();
}

void sub_215A3618C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A361A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215CE9BC8(v7);
  MEMORY[0x2166C4D20](v7, 0x10E2C40590DAB7CLL);
  sub_215DDC738((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_215A361E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DDC738((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_215A361F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A36208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DDC738((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_215A3621C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "dictionary";
  *(void *)(a1 + 96) = 10;
  if (!v1) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  operator new();
}

void sub_215A363B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DDC738((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_215A363CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215DDC738((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_215A363E0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "dictionary";
    *(void *)(a1 + 96) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    operator new();
  }
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v4 = v5;
  sub_215DD7D78();
}

void sub_215A3662C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A36644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215CE9BC8(v7);
  MEMORY[0x2166C4D20](v7, 0x10E2C40590DAB7CLL);
  sub_215DDC738((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_215A36680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DDC738((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_215A36694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A366A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_215DDC738((uint64_t **)va);
  _Unwind_Resume(a1);
}

void sub_215A366BC()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A3678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A367A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A367F8()
{
}

void sub_215A36904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A36918(uint64_t a1)
{
  *(_OWORD *)uint64_t v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  sub_2159B41A0(a1, (char **)v9);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (unint64_t)v10[1]) >> 3);
  sub_215DFB854(a1, &v12);
  __int16 v2 = (char *)v11;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (unint64_t)v10[1]) >> 3);
  unint64_t v4 = v12 - v3;
  if (v12 > v3)
  {
    sub_215A32E80((char **)&v10[1], v4);
    uint64_t v5 = v10[1];
    if ((void *)v11 == v10[1]) {
      goto LABEL_20;
    }
LABEL_14:
    LODWORD(__p[0]) = 2;
    sub_215DFABD4(a1, __p);
    if (LODWORD(__p[0]) >= 2) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = __p[0];
    }
    if (v8 >= 2) {
      sub_215A37194(a1, v5);
    }
    sub_215A36F98((uint64_t)__p, a1);
  }
  if (v12 >= v3)
  {
    uint64_t v5 = v10[1];
    if ((void *)v11 != v10[1]) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v6 = (char *)v10[1] + 24 * v12;
    if ((char *)v11 != v6)
    {
      do
      {
        unint64_t v7 = (std::__shared_weak_count *)*((void *)v2 - 1);
        if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v7->__on_zero_shared)(v7, v4);
          std::__shared_weak_count::__release_weak(v7);
        }
        v2 -= 24;
      }
      while (v2 != v6);
    }
    *(void *)&long long v11 = v6;
    uint64_t v5 = v10[1];
    if (v6 != v10[1]) {
      goto LABEL_14;
    }
  }
LABEL_20:
  sub_215D2BBA4((uint64_t *)v9);
}

void sub_215A36CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A36CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A36D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A36D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A36D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A36D48(uint64_t a1, char **a2)
{
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_215DFB854(a1, &v16);
  unint64_t v4 = a2[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  unint64_t v6 = v16 - v5;
  if (v16 > v5)
  {
    sub_215A32E80(a2, v6);
    uint64_t v9 = a2;
    unint64_t v7 = *a2;
    uint64_t i = (uint64_t)v9[1];
    if ((char *)i != v7) {
      goto LABEL_16;
    }
    return;
  }
  if (v16 < v5)
  {
    for (uint64_t i = (uint64_t)&(*a2)[24 * v16]; v4 != (char *)i; v4 -= 24)
    {
      uint64_t v10 = (std::__shared_weak_count *)*((void *)v4 - 1);
      if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, unint64_t))v10->__on_zero_shared)(v10, v6);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    a2[1] = (char *)i;
    unint64_t v7 = *a2;
    if ((char *)i == v7) {
      return;
    }
    while (1)
    {
LABEL_16:
      LODWORD(__p[0]) = 2;
      sub_215DFABD4(a1, __p);
      unsigned int v11 = __p[0];
      if (LODWORD(__p[0]) >= 2) {
        unsigned int v12 = 2;
      }
      else {
        unsigned int v12 = __p[0];
      }
      if (v12 < 2) {
        sub_215A36F98((uint64_t)__p, a1);
      }
      sub_215A37194(a1, v7, 2);
      if (v11 >= 2 && *(unsigned char *)(a1 + 131) == 0) {
        break;
      }
LABEL_15:
      v7 += 24;
      if (v7 == (char *)i) {
        return;
      }
    }
    while (1)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
        goto LABEL_15;
      }
      sub_215DFD700(a1, (uint64_t)__p);
      if (v18 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_37:
          char v15 = 0;
          if (v18 < 0) {
            goto LABEL_40;
          }
          goto LABEL_26;
        }
      }
      else if (v18 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_37;
      }
      char v15 = 1;
      if (v18 < 0) {
LABEL_40:
      }
        operator delete(__p[0]);
LABEL_26:
      if (*(unsigned char *)(a1 + 131)) {
        char v14 = 0;
      }
      else {
        char v14 = v15;
      }
      if ((v14 & 1) == 0) {
        goto LABEL_15;
      }
    }
  }
  uint64_t i = (uint64_t)a2[1];
  unint64_t v7 = *a2;
  if (v4 != v7) {
    goto LABEL_16;
  }
}

void sub_215A36F98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215A38580(a2, &v2);
}

void sub_215A37150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A37180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A37194(uint64_t a1, _WORD *a2)
{
  LOWORD(v15[0]) = 0;
  sub_215DFA594(a1, v15);
  int v4 = LOWORD(v15[0]);
  *a2 = v15[0];
  switch(v4)
  {
    case 0:
      LOBYTE(v15[0]) = 7;
      LOBYTE(v15[1]) = 7;
      uint64_t v5 = operator new(4uLL);
      std::string __p = v5;
      *uint64_t v5 = 0;
      int64_t v17 = v5 + 1;
      char v18 = v5 + 1;
      LODWORD(v19) = 2;
      sub_215DFABD4(a1, &v19);
      unsigned int v6 = v19;
      if (v19 >= 2) {
        unsigned int v7 = 2;
      }
      else {
        unsigned int v7 = v19;
      }
      if (v7 < 2)
      {
        sub_2159D33D8((uint64_t)&v19, a1, (uint64_t)v15);
      }
      else
      {
        LOBYTE(v19) = 0;
        sub_215DFA01C(a1, &v19);
        LOBYTE(v15[0]) = v19;
        sub_2159D3560(v19, a1, (uint64_t)v15);
      }
      if (v6 < 2 || *(unsigned char *)(a1 + 131)) {
        goto LABEL_18;
      }
      break;
    case 1:
      long long v19 = 0uLL;
      unint64_t v20 = 0;
      ++*(void *)(a1 + 80);
      if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
      {
        *(unsigned char *)(a1 + 132) = 1;
      }
      else
      {
        sub_215DFD700(a1, (uint64_t)v15);
        uint64_t v8 = *(void *)(a1 + 104);
        long long v19 = *(_OWORD *)v15;
        unint64_t v20 = __p;
        *(void *)(a1 + 104) = v8 + 1;
      }
      sub_215DD0B64((uint64_t)&v19);
    case 2:
      LOBYTE(v12[0]) = 0;
      sub_215DFC508(a1, v12);
      sub_215DD0A48();
    case 3:
      long long v19 = 0uLL;
      unint64_t v20 = 0;
      sub_215A36D48(a1, (char **)&v19);
      v15[1] = 0;
      std::string __p = 0;
      v15[0] = 0;
      sub_215A3434C((uint64_t)v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v19 + 1) - v19) >> 3));
      sub_215A37D70(v19, *((uint64_t *)&v19 + 1), (uint64_t)v15);
      *(_OWORD *)unsigned int v12 = *(_OWORD *)v15;
      uint64_t v13 = __p;
      sub_215A34874();
    case 4:
      v15[1] = 0;
      std::string __p = 0;
      v15[0] = &v15[1];
      sub_215DD7D78();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
  while (1)
  {
    if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
    {
LABEL_18:
      sub_215DD976C((uint64_t)&v19, (unsigned __int8 *)&v15[1]);
      long long v14 = v19;
      sub_215A33D98((uint64_t)v12, (uint64_t)&v14);
    }
    sub_215DFD700(a1, (uint64_t)&v19);
    if (SHIBYTE(v20) < 0)
    {
      if (*((void *)&v19 + 1) == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)v19) {
        goto LABEL_31;
      }
LABEL_19:
      char v9 = 1;
      if (SHIBYTE(v20) < 0) {
        goto LABEL_32;
      }
LABEL_20:
      if (*(unsigned char *)(a1 + 131)) {
        char v10 = 0;
      }
      else {
        char v10 = v9;
      }
      if ((v10 & 1) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      if (SHIBYTE(v20) != 1 || *(unsigned __int8 *)(a1 + 72) != v19) {
        goto LABEL_19;
      }
LABEL_31:
      char v9 = 0;
      if ((SHIBYTE(v20) & 0x80000000) == 0) {
        goto LABEL_20;
      }
LABEL_32:
      operator delete((void *)v19);
      if (*(unsigned char *)(a1 + 131)) {
        char v11 = 0;
      }
      else {
        char v11 = v9;
      }
      if ((v11 & 1) == 0) {
        goto LABEL_18;
      }
    }
  }
}

void sub_215A37BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368(v9 - 64);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215A37C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A37C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_215A37D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215A345F8((uint64_t)&v4, a1 + 8);
  }
  return a3;
}

void sub_215A37EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A37EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A37EF8()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A38074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A38088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3809C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
}

void sub_215A380B4(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  *(_OWORD *)char v11 = 0u;
  sub_2159B41A0(a1, (char **)v11);
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (unint64_t)__p[1]) >> 3);
  sub_215DFB854(a1, &v10);
  __int16 v2 = (char *)v13;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (unint64_t)__p[1]) >> 3);
  unint64_t v4 = v10 - v3;
  if ((unint64_t)v10 <= v3)
  {
    if ((unint64_t)v10 >= v3)
    {
      uint64_t v5 = (char *)__p[1];
      int64_t v6 = v13 - (unint64_t)__p[1];
      if ((void *)v13 == __p[1]) {
        goto LABEL_16;
      }
    }
    else
    {
      unsigned int v7 = (char *)__p[1] + 24 * v10;
      if ((char *)v13 != v7)
      {
        do
        {
          uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 - 1);
          if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v8->__on_zero_shared)(v8, v4);
            std::__shared_weak_count::__release_weak(v8);
          }
          v2 -= 24;
        }
        while (v2 != v7);
      }
      *(void *)&long long v13 = v7;
      uint64_t v5 = (char *)__p[1];
      int64_t v6 = v7 - (char *)__p[1];
      if (v7 == __p[1]) {
LABEL_16:
      }
        sub_215D2AF78((uint64_t *)v11);
    }
  }
  else
  {
    sub_215A32E80((char **)&__p[1], v4);
    uint64_t v5 = (char *)__p[1];
    int64_t v6 = v13 - (unint64_t)__p[1];
    if ((void *)v13 == __p[1]) {
      goto LABEL_16;
    }
  }
  uint64_t v9 = 24 * (v6 / 24);
  do
  {
    unsigned int v14 = 1;
    sub_215DFABD4(a1, &v14);
    sub_215A38580(a1, v5, v14);
    v5 += 24;
    v9 -= 24;
  }
  while (v9);
  goto LABEL_16;
}

void sub_215A383B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A383CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A383E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A383F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A38408(uint64_t a1, char **a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_215DFB854(a1, &v14);
  unint64_t v4 = a2[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  unint64_t v6 = v14 - v5;
  if (v14 > v5)
  {
    sub_215A32E80(a2, v6);
    uint64_t v9 = a2;
    unsigned int v7 = *a2;
    uint64_t v8 = v9[1];
    uint64_t v10 = v8 - v7;
    if (v8 == v7) {
      return;
    }
    goto LABEL_14;
  }
  if (v14 >= v5)
  {
    unsigned int v7 = *a2;
    uint64_t v10 = v4 - v7;
    if (v4 == v7) {
      return;
    }
    goto LABEL_14;
  }
  for (uint64_t i = (uint64_t)&(*a2)[24 * v14]; v4 != (char *)i; v4 -= 24)
  {
    unsigned int v12 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  a2[1] = (char *)i;
  unsigned int v7 = *a2;
  uint64_t v10 = i - (void)v7;
  if ((char *)i != v7)
  {
LABEL_14:
    uint64_t v13 = 24 * (v10 / 24);
    do
    {
      unsigned int v15 = 1;
      sub_215DFABD4(a1, &v15);
      sub_215A38580(a1, v7, v15);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
}

void sub_215A38580(uint64_t a1, _WORD *a2)
{
  LOWORD(v15) = 0;
  sub_215DFA594(a1, &v15);
  int v4 = (unsigned __int16)v15;
  *a2 = v15;
  switch(v4)
  {
    case 0:
      LOBYTE(v15) = 7;
      BYTE8(v15) = 7;
      unint64_t v5 = operator new(4uLL);
      std::string __p = v5;
      *unint64_t v5 = 0;
      int64_t v17 = v5 + 1;
      char v18 = v5 + 1;
      LODWORD(v19) = 2;
      sub_215DFABD4(a1, &v19);
      unsigned int v6 = v19;
      if (v19 >= 2) {
        unsigned int v7 = 2;
      }
      else {
        unsigned int v7 = v19;
      }
      if (v7 < 2)
      {
        sub_2159D33D8((uint64_t)&v19, a1, (uint64_t)&v15);
      }
      else
      {
        LOBYTE(v19) = 0;
        sub_215DFA01C(a1, &v19);
        LOBYTE(v15) = v19;
        sub_2159D3560(v19, a1, (uint64_t)&v15);
      }
      if (v6 < 2 || *(unsigned char *)(a1 + 131)) {
        goto LABEL_18;
      }
      break;
    case 1:
      long long v19 = 0uLL;
      unint64_t v20 = 0;
      ++*(void *)(a1 + 80);
      if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
      {
        *(unsigned char *)(a1 + 132) = 1;
      }
      else
      {
        sub_215DFD700(a1, (uint64_t)&v15);
        uint64_t v8 = *(void *)(a1 + 104);
        long long v19 = v15;
        unint64_t v20 = __p;
        *(void *)(a1 + 104) = v8 + 1;
      }
      sub_215DD0B64((uint64_t)&v19);
    case 2:
      LOBYTE(v12[0]) = 0;
      sub_215DFC508(a1, v12);
      sub_215DD0A48();
    case 3:
      long long v19 = 0uLL;
      unint64_t v20 = 0;
      sub_215A38408(a1, (char **)&v19);
      std::string __p = 0;
      long long v15 = 0uLL;
      sub_215A3434C((uint64_t)&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v19 + 1) - v19) >> 3));
      sub_215A3905C(v19, *((uint64_t *)&v19 + 1), (uint64_t)&v15);
      *(_OWORD *)unsigned int v12 = v15;
      uint64_t v13 = __p;
      sub_215A34874();
    case 4:
      *((void *)&v15 + 1) = 0;
      std::string __p = 0;
      *(void *)&long long v15 = (char *)&v15 + 8;
      sub_215DD7D78();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
  while (1)
  {
    if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0)
    {
LABEL_18:
      sub_215DD976C((uint64_t)&v19, (unsigned __int8 *)&v15 + 8);
      long long v14 = v19;
      sub_215A33D98((uint64_t)v12, (uint64_t)&v14);
    }
    sub_215DFD700(a1, (uint64_t)&v19);
    if (SHIBYTE(v20) < 0)
    {
      if (*((void *)&v19 + 1) == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)v19) {
        goto LABEL_31;
      }
LABEL_19:
      char v9 = 1;
      if (SHIBYTE(v20) < 0) {
        goto LABEL_32;
      }
LABEL_20:
      if (*(unsigned char *)(a1 + 131)) {
        char v10 = 0;
      }
      else {
        char v10 = v9;
      }
      if ((v10 & 1) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      if (SHIBYTE(v20) != 1 || *(unsigned __int8 *)(a1 + 72) != v19) {
        goto LABEL_19;
      }
LABEL_31:
      char v9 = 0;
      if ((SHIBYTE(v20) & 0x80000000) == 0) {
        goto LABEL_20;
      }
LABEL_32:
      operator delete((void *)v19);
      if (*(unsigned char *)(a1 + 131)) {
        char v11 = 0;
      }
      else {
        char v11 = v9;
      }
      if ((v11 & 1) == 0) {
        goto LABEL_18;
      }
    }
  }
}

void sub_215A38EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (!__p) {
    _Unwind_Resume(a1);
  }
  a18 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_215A3905C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215A345F8((uint64_t)&v4, a1 + 8);
  }
  return a3;
}

void sub_215A391B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A391D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A391E4()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A392B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A392CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A39320(uint64_t a1, void *a2)
{
  unint64_t v2 = a2[6];
  unint64_t v3 = a2[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 > 3)
  {
    unsigned int v6 = *(_DWORD *)(a2[3] + v2);
    a2[6] = v2 + 4;
    if (v6 > 1)
    {
      sub_215D02644(a2);
      sub_215A39420();
    }
    sub_215A3955C();
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21573A000(exception, "Not enough data to read");
  __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
}

void sub_215A3940C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A39420()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A394F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A39508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A3955C()
{
}

void sub_215A39668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3967C(void *a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  sub_2159B5A34(a1, (uint64_t)v13);
  unint64_t v3 = a1[6];
  unint64_t v2 = a1[7];
  BOOL v4 = v2 >= v3;
  unint64_t v5 = v2 - v3;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 > 7)
  {
    unint64_t v6 = *(void *)(a1[3] + v3);
    a1[6] = v3 + 8;
    unsigned int v7 = (char *)v15;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (unint64_t)__p[1]) >> 3);
    unint64_t v9 = v6 - v8;
    if (v6 <= v8)
    {
      if (v6 >= v8)
      {
        char v10 = (char *)v15;
      }
      else
      {
        char v10 = (char *)__p[1] + 24 * v6;
        if ((char *)v15 != v10)
        {
          do
          {
            char v11 = (std::__shared_weak_count *)*((void *)v7 - 1);
            if (v11)
            {
              if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v11->__on_zero_shared)(v11, v9);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
            v7 -= 24;
          }
          while (v7 != v10);
        }
        *(void *)&long long v15 = v10;
      }
    }
    else
    {
      sub_215A32E80((char **)&__p[1], v9);
      char v10 = (char *)v15;
    }
    v16[0] = 0xAAAAAAAAAAAAAAABLL * ((v10 - (char *)__p[1]) >> 3);
    v16[1] = __p[1];
    sub_215A39B9C(a1, v16);
    sub_215D2BBA4((uint64_t *)v13);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Not enough data to read");
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
}

void sub_215A39990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  __cxa_free_exception(v9);
  sub_215A2C8DC(&a9);
  _Unwind_Resume(a1);
}

void sub_215A399AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A399C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A399D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A399E8(void *a1, char **a2)
{
  unint64_t v3 = a1[6];
  unint64_t v2 = a1[7];
  BOOL v4 = v2 >= v3;
  unint64_t v5 = v2 - v3;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unint64_t v8 = *(void *)(a1[3] + v3);
  a1[6] = v3 + 8;
  unint64_t v9 = *a2;
  char v10 = a2[1];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  unint64_t v12 = v8 - v11;
  if (v8 > v11)
  {
    sub_215A32E80(a2, v12);
    long long v15 = a2;
    uint64_t v13 = *a2;
    long long v14 = v15[1];
    int64_t v16 = v14 - v13;
    if (v14 == v13) {
      return;
    }
    goto LABEL_17;
  }
  if (v8 >= v11)
  {
    uint64_t v13 = *a2;
    int64_t v16 = v10 - v13;
    if (v10 == v13) {
      return;
    }
    goto LABEL_17;
  }
  for (uint64_t i = &v9[24 * v8]; v10 != i; v10 -= 24)
  {
    char v18 = (std::__shared_weak_count *)*((void *)v10 - 1);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v18->__on_zero_shared)(v18, v12);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  a2[1] = i;
  uint64_t v13 = *a2;
  int64_t v16 = i - v13;
  if (i != v13)
  {
LABEL_17:
    uint64_t v19 = 24 * (v16 / 24);
    do
    {
      sub_215A39CC0((uint64_t)&v21, a1, (uint64_t)v13);
      v13 += 24;
      v19 -= 24;
    }
    while (v19);
  }
}

void sub_215A39B88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A39B9C(void *result, void *a2)
{
  if (*a2)
  {
    unint64_t v2 = result;
    unint64_t v3 = (_WORD *)a2[1];
    unint64_t v4 = result[6];
    unint64_t v5 = result[7];
    BOOL v6 = v5 >= v4;
    unint64_t v7 = v5 - v4;
    if (!v6) {
      unint64_t v7 = 0;
    }
    if (v7 > 3)
    {
      unsigned int v8 = *(_DWORD *)(result[3] + v4);
      result[6] = v4 + 4;
      if (v8 <= 1) {
        sub_215A39DC0((uint64_t)&v10, result);
      }
      sub_215D02644(result);
      sub_215A39FBC(v2, v3);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  return result;
}

void sub_215A39CAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215A39CC0(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1) {
    sub_215A39DC0((uint64_t)&v14, a2);
  }
  sub_215D02644(a2);
  uint64_t result = sub_215A39FBC(a2, a3, 2);
  uint64_t v11 = a2[12];
  uint64_t v12 = a2[9];
  a2[6] = *(void *)(v11 - 8) + *(void *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
  return result;
}

void sub_215A39DAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A39DC0(uint64_t a1, void *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215A3B454(a2, &v2);
}

void sub_215A39F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A39F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A39FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A39FBC(void *a1, _WORD *a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  unint64_t v4 = v3 - v2;
  if (v3 < v2) {
    unint64_t v4 = 0;
  }
  if (v4 > 1)
  {
    uint64_t v6 = a1[3];
    int v7 = *(unsigned __int16 *)(v6 + v2);
    unint64_t v8 = v2 + 2;
    a1[6] = v2 + 2;
    *a2 = v7;
    switch(v7)
    {
      case 0:
        LOBYTE(v16[0]) = 7;
        LOBYTE(v16[1]) = 7;
        unsigned int v9 = operator new(4uLL);
        std::string __p = v9;
        _DWORD *v9 = 0;
        char v18 = v9 + 1;
        uint64_t v19 = v9 + 1;
        sub_2159D3BC0((uint64_t)v13, a1, v16);
        sub_215DD976C((uint64_t)v13, (unsigned __int8 *)&v16[1]);
        long long v15 = *(_OWORD *)v13;
        sub_215A33D98((uint64_t)v11, (uint64_t)&v15);
      case 1:
        v16[0] = 0;
        v16[1] = 0;
        std::string __p = 0;
        sub_215D029A0(a1, (uint64_t)v16);
        sub_215DD0B64((uint64_t)v16);
      case 2:
        if (v3 > v8)
        {
          LOBYTE(v11[0]) = *(unsigned char *)(v6 + v8);
          a1[6] = v2 + 3;
          sub_215DD0A48();
        }
        return;
      case 3:
        v13[0] = 0;
        v13[1] = 0;
        uint64_t v14 = 0;
        sub_215A399E8(a1, (char **)v13);
        v16[1] = 0;
        std::string __p = 0;
        v16[0] = 0;
        sub_215A3434C((uint64_t)v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v13[1] - (char *)v13[0]) >> 3));
        sub_215A3AA84((uint64_t)v13[0], (uint64_t)v13[1], (uint64_t)v16);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v16;
        uint64_t v12 = __p;
        sub_215A34874();
      case 4:
        v16[1] = 0;
        std::string __p = 0;
        v16[0] = &v16[1];
        sub_215DD7D78();
      default:
        sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
        abort();
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21573A000(exception, "Not enough data to read");
  __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
}

void sub_215A3A8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215A3A918(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A3A92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_215A3A948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_215A3A988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215A3AA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3AA5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215A3AA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215A345F8((uint64_t)&v4, a1 + 8);
  }
  return a3;
}

void sub_215A3ABDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3ABF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3AC0C()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A3AD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3AD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3ADB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
}

void sub_215A3ADC8(void *a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  sub_2159B5A34(a1, (uint64_t)v13);
  unint64_t v3 = a1[6];
  unint64_t v2 = a1[7];
  BOOL v4 = v2 >= v3;
  unint64_t v5 = v2 - v3;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 > 7)
  {
    unint64_t v6 = *(void *)(a1[3] + v3);
    a1[6] = v3 + 8;
    int v7 = (char *)v15;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (unint64_t)__p[1]) >> 3);
    unint64_t v9 = v6 - v8;
    if (v6 <= v8)
    {
      if (v6 >= v8)
      {
        char v10 = (char *)v15;
      }
      else
      {
        char v10 = (char *)__p[1] + 24 * v6;
        if ((char *)v15 != v10)
        {
          do
          {
            uint64_t v11 = (std::__shared_weak_count *)*((void *)v7 - 1);
            if (v11)
            {
              if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v11->__on_zero_shared)(v11, v9);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
            v7 -= 24;
          }
          while (v7 != v10);
        }
        *(void *)&long long v15 = v10;
      }
    }
    else
    {
      sub_215A32E80((char **)&__p[1], v9);
      char v10 = (char *)v15;
    }
    v16[0] = 0xAAAAAAAAAAAAAAABLL * ((v10 - (char *)__p[1]) >> 3);
    v16[1] = __p[1];
    sub_215A3B2E8((uint64_t)a1, v16);
    sub_215D2AF78((uint64_t *)v13);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Not enough data to read");
  exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
}

void sub_215A3B0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  __cxa_free_exception(v9);
  sub_215A2C8DC(&a9);
  _Unwind_Resume(a1);
}

void sub_215A3B0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A3B10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A3B120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A3B134(void *a1, char **a2)
{
  unint64_t v3 = a1[6];
  unint64_t v2 = a1[7];
  BOOL v4 = v2 >= v3;
  unint64_t v5 = v2 - v3;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unint64_t v8 = *(void *)(a1[3] + v3);
  a1[6] = v3 + 8;
  unint64_t v9 = *a2;
  char v10 = a2[1];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 3);
  unint64_t v12 = v8 - v11;
  if (v8 > v11)
  {
    sub_215A32E80(a2, v12);
    long long v15 = a2;
    uint64_t v13 = *a2;
    uint64_t v14 = v15[1];
    int64_t v16 = v14 - v13;
    if (v14 == v13) {
      return;
    }
    goto LABEL_17;
  }
  if (v8 >= v11)
  {
    uint64_t v13 = *a2;
    int64_t v16 = v10 - v13;
    if (v10 == v13) {
      return;
    }
    goto LABEL_17;
  }
  for (uint64_t i = &v9[24 * v8]; v10 != i; v10 -= 24)
  {
    char v18 = (std::__shared_weak_count *)*((void *)v10 - 1);
    if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v18->__on_zero_shared)(v18, v12);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  a2[1] = i;
  uint64_t v13 = *a2;
  int64_t v16 = i - v13;
  if (i != v13)
  {
LABEL_17:
    uint64_t v19 = 24 * (v16 / 24);
    do
    {
      sub_215A3B3AC((uint64_t)&v21, a1, (uint64_t)v13);
      v13 += 24;
      v19 -= 24;
    }
    while (v19);
  }
}

void sub_215A3B2D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215A3B2E8(uint64_t result, void *a2)
{
  if (*a2)
  {
    unint64_t v2 = (void *)result;
    uint64_t v3 = a2[1];
    uint64_t v4 = 24 * *a2;
    do
    {
      unint64_t v5 = v2[6];
      unint64_t v6 = v2[7];
      BOOL v7 = v6 >= v5;
      unint64_t v8 = v6 - v5;
      if (!v7) {
        unint64_t v8 = 0;
      }
      if (v8 <= 3)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_21573A000(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
      }
      uint64_t v9 = *(unsigned int *)(v2[3] + v5);
      v2[6] = v5 + 4;
      uint64_t result = sub_215A3B454(v2, v3, v9);
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  return result;
}

void sub_215A3B398(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215A3B3AC(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a2[6];
  unint64_t v3 = a2[7];
  BOOL v5 = v3 >= v4;
  unint64_t v6 = v3 - v4;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  uint64_t v7 = *(unsigned int *)(a2[3] + v4);
  a2[6] = v4 + 4;

  return sub_215A3B454(a2, a3, v7);
}

void sub_215A3B440(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A3B454(void *a1, _WORD *a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  unint64_t v4 = v3 - v2;
  if (v3 < v2) {
    unint64_t v4 = 0;
  }
  if (v4 > 1)
  {
    uint64_t v6 = a1[3];
    int v7 = *(unsigned __int16 *)(v6 + v2);
    unint64_t v8 = v2 + 2;
    a1[6] = v2 + 2;
    *a2 = v7;
    switch(v7)
    {
      case 0:
        LOBYTE(v16[0]) = 7;
        LOBYTE(v16[1]) = 7;
        uint64_t v9 = operator new(4uLL);
        std::string __p = v9;
        _DWORD *v9 = 0;
        char v18 = v9 + 1;
        uint64_t v19 = v9 + 1;
        sub_2159D3BC0((uint64_t)v13, a1, v16);
        sub_215DD976C((uint64_t)v13, (unsigned __int8 *)&v16[1]);
        long long v15 = *(_OWORD *)v13;
        sub_215A33D98((uint64_t)v11, (uint64_t)&v15);
      case 1:
        v16[0] = 0;
        v16[1] = 0;
        std::string __p = 0;
        sub_215D029A0(a1, (uint64_t)v16);
        sub_215DD0B64((uint64_t)v16);
      case 2:
        if (v3 > v8)
        {
          LOBYTE(v11[0]) = *(unsigned char *)(v6 + v8);
          a1[6] = v2 + 3;
          sub_215DD0A48();
        }
        return;
      case 3:
        v13[0] = 0;
        v13[1] = 0;
        uint64_t v14 = 0;
        sub_215A3B134(a1, (char **)v13);
        v16[1] = 0;
        std::string __p = 0;
        v16[0] = 0;
        sub_215A3434C((uint64_t)v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v13[1] - (char *)v13[0]) >> 3));
        sub_215A3BED0((uint64_t)v13[0], (uint64_t)v13[1], (uint64_t)v16);
        *(_OWORD *)unint64_t v11 = *(_OWORD *)v16;
        unint64_t v12 = __p;
        sub_215A34874();
      case 4:
        v16[1] = 0;
        std::string __p = 0;
        v16[0] = &v16[1];
        sub_215DD7D78();
      default:
        sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
        abort();
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_21573A000(exception, "Not enough data to read");
  __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
}

void sub_215A3BD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215A3BD64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A3BD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_215A3BDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3BDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215A3BE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3BEA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215A3BED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215A345F8((uint64_t)&v4, a1 + 8);
  }
  return a3;
}

void sub_215A3C028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3C044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3C058()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A3C128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A3C140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A3C194(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v6 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v11 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v11);
    if (v11 >= 3)
    {
      unsigned int v9 = v11;
      char v10 = sub_215A3C30C();
      sub_215E07C10((std::string *)v10, v9, 2u);
    }
    int v6 = *a1;
  }
  if (a4 >= 2 && v6 > 0)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    sub_215A3C700();
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v8 = 2;
  }
  else {
    unsigned int v8 = a4;
  }
  if (v8 > 1) {
    sub_215A3C700();
  }
  sub_215A3C83C();
}

long long *sub_215A3C30C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889620, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889620))
  {
    return &xmmword_267889608;
  }
  int v1 = sub_215A3C3F4();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889608, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889618 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889608 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889608, &dword_21572C000);
  __cxa_guard_release(&qword_267889620);
  return &xmmword_267889608;
}

void sub_215A3C3DC(_Unwind_Exception *a1)
{
}

std::string *sub_215A3C3F4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889640, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889640))
  {
    return &stru_267889628;
  }
  sub_215A3C4F0((uint64_t)__p);
  sub_2157E7638(__p, &stru_267889628);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889628, &dword_21572C000);
  __cxa_guard_release(&qword_267889640);
  return &stru_267889628;
}

void sub_215A3C4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889640);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889640);
  _Unwind_Resume(a1);
}

void sub_215A3C4F0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889660, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889660))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dictio::DictionarySample<>]", qword_267889648);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889648, &dword_21572C000);
    __cxa_guard_release(&qword_267889660);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889680, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889680))
  {
    size_t v3 = sub_215747D98(qword_267889648, "<", 0);
    sub_215747C90(qword_267889648, 0, v3, qword_267889668);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889668, &dword_21572C000);
    __cxa_guard_release(&qword_267889680);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678896A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678896A0))
  {
    sub_215E19DF4((uint64_t)qword_267889668, (uint64_t)&xmmword_267889688);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889688, &dword_21572C000);
    __cxa_guard_release(&qword_2678896A0);
  }
  if (byte_26788969F < 0)
  {
    long long v2 = xmmword_267889688;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889688;
    *(void *)(a1 + 16) = unk_267889698;
  }
}

void sub_215A3C6B8(_Unwind_Exception *a1)
{
}

void sub_215A3C6D0(_Unwind_Exception *a1)
{
}

void sub_215A3C6E8(_Unwind_Exception *a1)
{
}

void sub_215A3C700()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A3C7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A3C7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A3C83C()
{
}

void sub_215A3C948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3C95C(void *a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  *(_OWORD *)int v7 = 0u;
  sub_2159B8040((uint64_t)a1, (char **)v7);
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (unint64_t)__p[1]) >> 3);
  (*(void (**)(void *, unint64_t *))(*a1 + 120))(a1, &v11);
  long long v2 = (char *)v9;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (unint64_t)__p[1]) >> 3);
  unint64_t v4 = v11 - v3;
  if (v11 <= v3)
  {
    if (v11 >= v3)
    {
      uint64_t v5 = (char *)v9;
    }
    else
    {
      uint64_t v5 = (char *)__p[1] + 24 * v11;
      if ((char *)v9 != v5)
      {
        do
        {
          int v6 = (std::__shared_weak_count *)*((void *)v2 - 1);
          if (v6)
          {
            if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *, unint64_t))v6->__on_zero_shared)(v6, v4);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v2 -= 24;
        }
        while (v2 != v5);
      }
      *(void *)&long long v9 = v5;
    }
  }
  else
  {
    sub_215A32E80((char **)&__p[1], v4);
    uint64_t v5 = (char *)v9;
  }
  v10[0] = 0xAAAAAAAAAAAAAAABLL * ((v5 - (char *)__p[1]) >> 3);
  v10[1] = __p[1];
  sub_215A3CE74(a1, v10);
  sub_215D2BBA4((uint64_t *)v7);
}

void sub_215A3CC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A3CC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A3CC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A3CC74(void *a1, char **a2)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(void *, unint64_t *))(*a1 + 120))(a1, &v15);
  unint64_t v4 = a2[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  unint64_t v6 = v15 - v5;
  if (v15 > v5)
  {
    sub_215A32E80(a2, v6);
    long long v9 = a2;
    int v7 = *a2;
    unsigned int v8 = v9[1];
    uint64_t v10 = v8 - v7;
    if (v8 == v7) {
      return;
    }
    goto LABEL_14;
  }
  if (v15 >= v5)
  {
    int v7 = *a2;
    uint64_t v10 = v4 - v7;
    if (v4 == v7) {
      return;
    }
    goto LABEL_14;
  }
  for (uint64_t i = (uint64_t)&(*a2)[24 * v15]; v4 != (char *)i; v4 -= 24)
  {
    unint64_t v12 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  a2[1] = (char *)i;
  int v7 = *a2;
  uint64_t v10 = i - (void)v7;
  if ((char *)i != v7)
  {
LABEL_14:
    uint64_t v13 = 24 * (v10 / 24);
    do
    {
      uint64_t v14 = *a1;
      uint64_t v16 = a1[1];
      unsigned int v17 = 2;
      (*(void (**)(void *, unsigned int *))(v14 + 104))(a1, &v17);
      if ((int)v16 >= 1)
      {
        sub_215A3D0D8((int *)&v16, a1, (uint64_t)v7, v17);
      }
      else
      {
        if (v17 < 2) {
          sub_215A3D644((uint64_t)&v17, a1);
        }
        sub_215A3D840(a1, v7, v17);
      }
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
}

void *sub_215A3CE74(void *result, void *a2)
{
  if (*a2)
  {
    long long v2 = result;
    unint64_t v3 = (_WORD *)a2[1];
    uint64_t v4 = *result;
    uint64_t v6 = result[1];
    int v8 = 0;
    LODWORD(v7[0]) = 2;
    (*(void (**)(void *, void *))(v4 + 104))(result, v7);
    unsigned int v5 = v7[0];
    int v8 = v7[0];
    v7[0] = v2;
    v7[1] = v3;
    v7[2] = &v6;
    v7[3] = &v8;
    if ((int)v6 < 1)
    {
      if (v5 >= 2) {
        sub_215A3D840(v2, v3);
      }
      sub_215A3D644((uint64_t)&v9, v2);
    }
    sub_215A3CF68((uint64_t)v7);
  }
  return result;
}

void sub_215A3CF68(uint64_t a1)
{
  int v1 = *(unsigned char **)a1;
  long long v2 = *(_WORD **)(a1 + 8);
  unint64_t v3 = *(int **)(a1 + 16);
  unsigned int v4 = **(_DWORD **)(a1 + 24);
  int v5 = *v3;
  if (*v3 == 2)
  {
    if (v4 < 2) {
      goto LABEL_9;
    }
    unsigned int v11 = 2;
    (*(void (**)(unsigned char *, unsigned int *))(*(void *)v1 + 104))(v1, &v11);
    if (v11 >= 3)
    {
      unsigned int v8 = v11;
      char v9 = sub_215A3D250();
      sub_215E07C10((std::string *)v9, v8, 2u);
    }
    int v5 = *v3;
  }
  if (v5 >= 1 && v4 > 1)
  {
    (*(void (**)(unsigned char *))(*(void *)v1 + 16))(v1);
    sub_215A3D840(v1, v2);
  }
LABEL_9:
  if (v4 >= 2) {
    unsigned int v7 = 2;
  }
  else {
    unsigned int v7 = v4;
  }
  if (v7 > 1) {
    sub_215A3D840(v1, v2);
  }
  sub_215A3D644((uint64_t)&v10, v1);
}

uint64_t sub_215A3D0D8(int *a1, unsigned char *a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v13 = 2;
    (*(void (**)(unsigned char *, unsigned int *))(*(void *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      unsigned int v11 = v13;
      unint64_t v12 = sub_215A3D250();
      sub_215E07C10((std::string *)v12, v11, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    sub_215A3D840(a2, a3, 2);
    return (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 <= 1) {
    sub_215A3D644((uint64_t)&v14, a2);
  }
  return sub_215A3D840(a2, a3, 2);
}

long long *sub_215A3D250()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678896C0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678896C0))
  {
    return &xmmword_2678896A8;
  }
  int v1 = sub_215A3D338();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_2678896A8, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_2678896B8 = v1->__r_.__value_.__r.__words[2];
    xmmword_2678896A8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678896A8, &dword_21572C000);
  __cxa_guard_release(&qword_2678896C0);
  return &xmmword_2678896A8;
}

void sub_215A3D320(_Unwind_Exception *a1)
{
}

std::string *sub_215A3D338()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678896E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678896E0))
  {
    return &stru_2678896C8;
  }
  sub_215A3D434((uint64_t)__p);
  sub_2157E7638(__p, &stru_2678896C8);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_2678896C8, &dword_21572C000);
  __cxa_guard_release(&qword_2678896E0);
  return &stru_2678896C8;
}

void sub_215A3D3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2678896E0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2678896E0);
  _Unwind_Resume(a1);
}

void sub_215A3D434(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889700, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889700))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cfio::DictionaryValueSample<>]", qword_2678896E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678896E8, &dword_21572C000);
    __cxa_guard_release(&qword_267889700);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889720, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889720))
  {
    size_t v3 = sub_215747D98(qword_2678896E8, "<", 0);
    sub_215747C90(qword_2678896E8, 0, v3, qword_267889708);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889708, &dword_21572C000);
    __cxa_guard_release(&qword_267889720);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889740, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889740))
  {
    sub_215E19DF4((uint64_t)qword_267889708, (uint64_t)&xmmword_267889728);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889728, &dword_21572C000);
    __cxa_guard_release(&qword_267889740);
  }
  if (byte_26788973F < 0)
  {
    long long v2 = xmmword_267889728;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889728;
    *(void *)(a1 + 16) = unk_267889738;
  }
}

void sub_215A3D5FC(_Unwind_Exception *a1)
{
}

void sub_215A3D614(_Unwind_Exception *a1)
{
}

void sub_215A3D62C(_Unwind_Exception *a1)
{
}

void sub_215A3D644(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215A3F1EC(a2, &v2);
}

void sub_215A3D7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3D818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3D82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3D840(unsigned char *a1, _WORD *a2)
{
  v10[0] = a2;
  sub_215A3E254(a1, (_WORD **)v10);
  switch(*a2)
  {
    case 0:
      LOBYTE(v10[0]) = 7;
      LOBYTE(v10[1]) = 7;
      uint64_t v4 = operator new(4uLL);
      std::string __p = v4;
      *uint64_t v4 = 0;
      unint64_t v12 = v4 + 1;
      unsigned int v13 = v4 + 1;
      sub_2159D4ADC((uint64_t)v7, (uint64_t)a1, v10);
      sub_215DD976C((uint64_t)v7, (unsigned __int8 *)&v10[1]);
      long long v9 = *(_OWORD *)v7;
      sub_215A33D98((uint64_t)v5, (uint64_t)&v9);
    case 1:
      v10[0] = 0;
      v10[1] = 0;
      std::string __p = 0;
      (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, v10);
      sub_215DD0B64((uint64_t)v10);
    case 2:
      LOBYTE(v5[0]) = 0;
      (*(void (**)(unsigned char *, void **))(*(void *)a1 + 32))(a1, v5);
      sub_215DD0A48();
    case 3:
      v7[0] = 0;
      v7[1] = 0;
      uint64_t v8 = 0;
      sub_215A3CC74(a1, (char **)v7);
      v10[1] = 0;
      std::string __p = 0;
      v10[0] = 0;
      sub_215A3434C((uint64_t)v10, 0xAAAAAAAAAAAAAAABLL * (((char *)v7[1] - (char *)v7[0]) >> 3));
      sub_215A3E3F8((uint64_t)v7[0], (uint64_t)v7[1], (uint64_t)v10);
      *(_OWORD *)uint64_t v5 = *(_OWORD *)v10;
      uint64_t v6 = __p;
      sub_215A34874();
    case 4:
      v10[1] = 0;
      std::string __p = 0;
      v10[0] = &v10[1];
      sub_215DD7D78();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215A3E110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_215A3E12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3E140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
}

void sub_215A3E158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_215A3E184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2157361F0((void **)va1);
  sub_215986E24((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A3E1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215986E24((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A3E1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3E1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215A3E254(unsigned char *a1, _WORD **a2)
{
  if ((a1[12] & 2) != 0)
  {
    memset(__p, 0, sizeof(__p));
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, __p);
    operator new();
  }
  LOWORD(__p[0]) = 0;
  uint64_t result = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a1 + 96))(a1, __p);
  **a2 = __p[0];
  return result;
}

void sub_215A3E380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    sub_215E15464((uint64_t)&a17, v18);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A3E3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215A345F8((uint64_t)&v4, a1 + 8);
  }
  return a3;
}

void sub_215A3E550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3E56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215A3E580(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = (int *)a1[2];
  unsigned int v4 = *(_DWORD *)a1[3];
  int v5 = *v3;
  if (*v3 == 2)
  {
    if (v4 < 2) {
      goto LABEL_9;
    }
    unsigned int v11 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)v1 + 104))(v1, &v11);
    if (v11 >= 3)
    {
      unsigned int v9 = v11;
      uint64_t v10 = sub_215A3E6F0();
      sub_215E07C10((std::string *)v10, v9, 2u);
    }
    int v5 = *v3;
  }
  if (v5 >= 1 && v4 > 1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
    sub_215A3C95C(v1, v2, 2);
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
LABEL_9:
  if (v4 >= 2) {
    unsigned int v7 = 2;
  }
  else {
    unsigned int v7 = v4;
  }
  if (v7 <= 1) {
    sub_215A3EAE4();
  }
  return sub_215A3C95C(v1, v2, 2);
}

long long *sub_215A3E6F0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889760, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889760))
  {
    return &xmmword_267889748;
  }
  uint64_t v1 = sub_215A3E7D8();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889748, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889758 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889748 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889748, &dword_21572C000);
  __cxa_guard_release(&qword_267889760);
  return &xmmword_267889748;
}

void sub_215A3E7C0(_Unwind_Exception *a1)
{
}

std::string *sub_215A3E7D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889780, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889780))
  {
    return &stru_267889768;
  }
  sub_215A3E8D4((uint64_t)__p);
  sub_2157E7638(__p, &stru_267889768);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889768, &dword_21572C000);
  __cxa_guard_release(&qword_267889780);
  return &stru_267889768;
}

void sub_215A3E894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889780);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889780);
  _Unwind_Resume(a1);
}

void sub_215A3E8D4(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678897A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678897A0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::cfio::DictionaryRefSample<>]", qword_267889788);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889788, &dword_21572C000);
    __cxa_guard_release(&qword_2678897A0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678897C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678897C0))
  {
    size_t v3 = sub_215747D98(qword_267889788, "<", 0);
    sub_215747C90(qword_267889788, 0, v3, qword_2678897A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678897A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678897C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678897E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678897E0))
  {
    sub_215E19DF4((uint64_t)qword_2678897A8, (uint64_t)&xmmword_2678897C8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678897C8, &dword_21572C000);
    __cxa_guard_release(&qword_2678897E0);
  }
  if (byte_2678897DF < 0)
  {
    long long v2 = xmmword_2678897C8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2678897C8;
    *(void *)(a1 + 16) = unk_2678897D8;
  }
}

void sub_215A3EA9C(_Unwind_Exception *a1)
{
}

void sub_215A3EAB4(_Unwind_Exception *a1)
{
}

void sub_215A3EACC(_Unwind_Exception *a1)
{
}

void sub_215A3EAE4()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A3EC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3EC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3EC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
}

void sub_215A3ECA0(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  *(_OWORD *)unsigned int v11 = 0u;
  sub_2159B8040(a1, (char **)v11);
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (unint64_t)__p[1]) >> 3);
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 120))(a1, &v10);
  long long v2 = (char *)v13;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (unint64_t)__p[1]) >> 3);
  unint64_t v4 = v10 - v3;
  if ((unint64_t)v10 <= v3)
  {
    if ((unint64_t)v10 >= v3)
    {
      int v5 = (char *)__p[1];
      int64_t v6 = v13 - (unint64_t)__p[1];
      if ((void *)v13 == __p[1]) {
        goto LABEL_16;
      }
    }
    else
    {
      unsigned int v7 = (char *)__p[1] + 24 * v10;
      if ((char *)v13 != v7)
      {
        do
        {
          uint64_t v8 = (std::__shared_weak_count *)*((void *)v2 - 1);
          if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v8->__on_zero_shared)(v8, v4);
            std::__shared_weak_count::__release_weak(v8);
          }
          v2 -= 24;
        }
        while (v2 != v7);
      }
      *(void *)&long long v13 = v7;
      int v5 = (char *)__p[1];
      int64_t v6 = v7 - (char *)__p[1];
      if (v7 == __p[1]) {
LABEL_16:
      }
        sub_215D2AF78((uint64_t *)v11);
    }
  }
  else
  {
    sub_215A32E80((char **)&__p[1], v4);
    int v5 = (char *)__p[1];
    int64_t v6 = v13 - (unint64_t)__p[1];
    if ((void *)v13 == __p[1]) {
      goto LABEL_16;
    }
  }
  uint64_t v9 = 24 * (v6 / 24);
  do
  {
    unsigned int v14 = 1;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 104))(a1, &v14);
    sub_215A3F1EC(a1, v5, v14);
    v5 += 24;
    v9 -= 24;
  }
  while (v9);
  goto LABEL_16;
}

void sub_215A3EFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A3EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A3F00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A3F020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215A2C8DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A3F034(uint64_t a1, char **a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v14);
  unint64_t v4 = a2[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  unint64_t v6 = v14 - v5;
  if (v14 > v5)
  {
    sub_215A32E80(a2, v6);
    uint64_t v9 = a2;
    unsigned int v7 = *a2;
    uint64_t v8 = v9[1];
    uint64_t v10 = v8 - v7;
    if (v8 == v7) {
      return;
    }
    goto LABEL_14;
  }
  if (v14 >= v5)
  {
    unsigned int v7 = *a2;
    uint64_t v10 = v4 - v7;
    if (v4 == v7) {
      return;
    }
    goto LABEL_14;
  }
  for (uint64_t i = (uint64_t)&(*a2)[24 * v14]; v4 != (char *)i; v4 -= 24)
  {
    uint64_t v12 = (std::__shared_weak_count *)*((void *)v4 - 1);
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v6);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  a2[1] = (char *)i;
  unsigned int v7 = *a2;
  uint64_t v10 = i - (void)v7;
  if ((char *)i != v7)
  {
LABEL_14:
    uint64_t v13 = 24 * (v10 / 24);
    do
    {
      unsigned int v15 = 1;
      (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 104))(a1, &v15);
      sub_215A3F1EC(a1, v7, v15);
      v7 += 24;
      v13 -= 24;
    }
    while (v13);
  }
}

void sub_215A3F1EC(unsigned char *a1, _WORD *a2)
{
  v10[0] = a2;
  sub_215A3E254(a1, (_WORD **)v10);
  switch(*a2)
  {
    case 0:
      LOBYTE(v10[0]) = 7;
      LOBYTE(v10[1]) = 7;
      unint64_t v4 = operator new(4uLL);
      std::string __p = v4;
      *unint64_t v4 = 0;
      uint64_t v12 = v4 + 1;
      uint64_t v13 = v4 + 1;
      sub_2159D4ADC((uint64_t)v7, (uint64_t)a1, v10);
      sub_215DD976C((uint64_t)v7, (unsigned __int8 *)&v10[1]);
      long long v9 = *(_OWORD *)v7;
      sub_215A33D98((uint64_t)v5, (uint64_t)&v9);
    case 1:
      v10[0] = 0;
      v10[1] = 0;
      std::string __p = 0;
      (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, v10);
      sub_215DD0B64((uint64_t)v10);
    case 2:
      LOBYTE(v5[0]) = 0;
      (*(void (**)(unsigned char *, void **))(*(void *)a1 + 32))(a1, v5);
      sub_215DD0A48();
    case 3:
      v7[0] = 0;
      v7[1] = 0;
      uint64_t v8 = 0;
      sub_215A3F034((uint64_t)a1, (char **)v7);
      v10[1] = 0;
      std::string __p = 0;
      v10[0] = 0;
      sub_215A3434C((uint64_t)v10, 0xAAAAAAAAAAAAAAABLL * (((char *)v7[1] - (char *)v7[0]) >> 3));
      sub_215A3FBAC((uint64_t)v7[0], (uint64_t)v7[1], (uint64_t)v10);
      *(_OWORD *)unint64_t v5 = *(_OWORD *)v10;
      unint64_t v6 = __p;
      sub_215A34874();
    case 4:
      v10[1] = 0;
      std::string __p = 0;
      v10[0] = &v10[1];
      sub_215DD7D78();
    default:
      sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Foundation/FoundationIO/include/Kit/FoundationIO/DictionaryRefIO.h", 250, (uint64_t)"", 0, (uint64_t)"invalid value type identifier", 29, (void (*)(void **))sub_215E1ABD8);
      abort();
  }
}

void sub_215A3FA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_215A3FA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A3FA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
}

void sub_215A3FAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_215A3FADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  unint64_t v6 = va_arg(va1, void *);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2157361F0((void **)va1);
  sub_215986E24((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A3FAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215986E24((void **)va);
  _Unwind_Resume(a1);
}

void sub_215A3FB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3FB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_215A3FBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215A345F8((uint64_t)&v4, a1 + 8);
  }
  return a3;
}

void sub_215A3FD04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215733368((uint64_t)va1);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3FD20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A3FD34()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  sub_215DD7D78();
}

void sub_215A3FE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

void sub_215A3FE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A3FE70()
{
}

void sub_215A40054(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_215A40088(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  v5[0] = *(void *)a2;
  v5[1] = v2;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  sub_215A40188(a1, (uint64_t)v5);
  uint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_215A40134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    if (!atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A40188(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(void *)(a1 + 72) = "byte_size";
    uint64_t v4 = a1 + 72;
    uint64_t v6 = (unsigned char *)(a1 + 88);
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 80) = 9;
    long long v7 = (void *)(a1 + 80);
    if (!v5) {
      *uint64_t v6 = 1;
    }
    goto LABEL_13;
  }
  long long v7 = (void *)(a1 + 80);
  uint64_t v4 = a1 + 72;
  uint64_t v6 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v8 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8
    || (**(_DWORD **)v4 == *(_DWORD *)"version"
      ? (BOOL v9 = *(_DWORD *)(*(void *)v4 + 3) == *(_DWORD *)"sion")
      : (BOOL v9 = 0),
        !v9))
  {
LABEL_13:
    uint64_t v10 = *(void ***)a2;
    LOBYTE(v17) = 6;
    uint64_t v18 = v10;
    uint64_t v11 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v12 = *v11;
    *uint64_t v11 = 6;
    LOBYTE(v17) = v12;
    uint64_t v13 = (void **)*((void *)v11 + 1);
    *((void *)v11 + 1) = v18;
    uint64_t v18 = v13;
    sub_215CEB204(&v18, v12);
  }
  size_t v15 = *(void *)(a2 + 24);
  unint64_t v14 = *(void ***)(a2 + 32);
  if (v15
    && !v14
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  size_t v17 = v15;
  uint64_t v18 = v14;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v16 = *v6;
    *(void *)uint64_t v4 = "bytes";
    *long long v7 = 5;
    if (!v16) {
      *uint64_t v6 = 1;
    }
  }
  sub_215DEC208(a1, &v17);
}

void sub_215A40328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A40340(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a2;
  int v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v8 = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v6 + 40))
  {
    v10[0] = (uint64_t *)(v6 + 16);
    sub_215E069EC(v10, v4);
  }
  else
  {
    sub_215E06D00();
  }
  if ((void)v8
    && !*((void *)&v8 + 1)
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v7 + 40))
  {
    BOOL v9 = (uint64_t *)(v7 + 16);
    LODWORD(v10[0]) = v8;
    v10[1] = *((uint64_t **)&v8 + 1);
    sub_215E04FC4((uint64_t)&v11, &v9, (unsigned int *)v10);
  }
  else
  {
    if (v8 > 0xFF)
    {
      if (WORD1(v8))
      {
        LOBYTE(v10[0]) = -58;
        *(_DWORD *)((char *)v10 + 1) = bswap32(v8);
      }
      else
      {
        LOBYTE(v10[0]) = -59;
        *(_WORD *)((char *)v10 + 1) = bswap32(v8) >> 16;
      }
      std::ostream::write();
    }
    else
    {
      LOBYTE(v10[0]) = -60;
      BYTE1(v10[0]) = v8;
      std::ostream::write();
    }
    std::ostream::write();
  }
  if (v5)
  {
    if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_215A40524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A40538(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  v5[0] = *(void *)a2;
  v5[1] = v2;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  sub_215A40638(a1, v5);
  unint64_t v4 = v6;
  if (v6)
  {
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_215A405E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
  {
    if (!atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A40638(uint64_t a1, uint64_t *a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(void *)(a1 + 72) = "byte_size";
    uint64_t v4 = a1 + 72;
    uint64_t v6 = (unsigned char *)(a1 + 88);
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 80) = 9;
    long long v7 = (void *)(a1 + 80);
    if (!v5) {
      *uint64_t v6 = 1;
    }
    goto LABEL_13;
  }
  long long v7 = (void *)(a1 + 80);
  uint64_t v4 = a1 + 72;
  uint64_t v6 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v8 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8
    || (**(_DWORD **)v4 == *(_DWORD *)"version"
      ? (BOOL v9 = *(_DWORD *)(*(void *)v4 + 3) == *(_DWORD *)"sion")
      : (BOOL v9 = 0),
        !v9))
  {
LABEL_13:
    uint64_t v10 = *a2;
    LOBYTE(v17) = 6;
    uint64_t v18 = v10;
    char v11 = (unsigned __int8 *)sub_215DEB350(a1);
    int v12 = *v11;
    *char v11 = 6;
    LOBYTE(v17) = v12;
    uint64_t v13 = *((void *)v11 + 1);
    *((void *)v11 + 1) = v18;
    uint64_t v18 = v13;
    sub_215CE9D14(&v18, v12);
  }
  size_t v15 = a2[3];
  uint64_t v14 = a2[4];
  if (v15
    && !v14
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  size_t v17 = v15;
  uint64_t v18 = v14;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v16 = *v6;
    *(void *)uint64_t v4 = "bytes";
    *long long v7 = 5;
    if (!v16) {
      *uint64_t v6 = 1;
    }
  }
  sub_215DEB984(a1, &v17);
}

void sub_215A407D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A407F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void **)(a1 + 24);
    LOBYTE(v6) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)&v6, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  if ((void)v5
    && !*((void *)&v5 + 1)
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  long long v6 = v5;
  sub_215DF9898(a1, (std::string::size_type *)&v6);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_215A40938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A4094C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  uint64_t __src = *a2;
  uint64_t v8 = v3;
  uint64_t v4 = (std::__shared_weak_count *)a2[2];
  BOOL v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v10 = *(_OWORD *)(a2 + 3);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v8, 8);
  long long v5 = v10;
  if ((void)v10
    && !*((void *)&v10 + 1)
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), *((char **)&v5 + 1), (char *)(*((void *)&v5 + 1) + v5), v5);
  long long v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_215A40A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A40A9C(int *a1, uint64_t a2, uint64_t a3)
{
  int v6 = 2;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1
    || *a1 == 2 && (int v7 = 2, (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7), *a1 <= 0))
  {
    sub_215A40BE0(a2, a3);
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    sub_215A40BE0(a2, a3);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
}

void sub_215A40BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  v7[0] = *(void *)a2;
  v7[1] = v3;
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 16);
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v9 = *(_OWORD *)(a2 + 24);
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 120))(a1, v7);
  long long v5 = v9;
  if ((void)v9
    && !*((void *)&v9 + 1)
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  long long v10 = v5;
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 272))(a1, &v10);
  int v6 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_215A40D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21573580C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A40D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_215D0B178((uint64_t)v15, (uint64_t)&__p);
  long long v10 = v15[0];
  long long v11 = v15[1];
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  sub_215A41094(a2, (uint64_t)&v9);
  uint64_t v5 = v9;
  long long v6 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v15[0] = v11;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  int v7 = *(std::__shared_weak_count **)(a3 + 16);
  *(void *)(a3 + 16) = *((void *)&v6 + 1);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a3 + 24) = v15[0];
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_215A40EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A40EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A40EE4(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "byte_size";
  *(void *)(a1 + 96) = 9;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v5 = (char *)sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  __sz[0] = 0;
  sub_215D306DC(v5, __sz);
  size_t v6 = __sz[0];
  *(void *)a2 = __sz[0];
  std::string __p = 0;
  size_t v15 = 0;
  int v16 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v7 = (char *)operator new(v6);
    uint64_t v8 = &v7[v6];
    std::string __p = v7;
    int v16 = &v7[v6];
    bzero(v7, v6);
    size_t v15 = &v7[v6];
  }
  else
  {
    uint64_t v8 = 0;
    int v7 = 0;
  }
  v13[0] = v8 - v7;
  v13[1] = v7;
  int v9 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "bytes";
  *(void *)(a1 + 96) = 5;
  if (!v9) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  sub_215DF0BCC(v10, (uint64_t)v13);
  sub_215D0B178((uint64_t)__sz, (uint64_t)&__p);
  long long v12 = v18;
  long long v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(_OWORD *)(a2 + 24) = v12;
  if (__p)
  {
    size_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A41070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A41094(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "byte_size";
  *(void *)(a1 + 96) = 9;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v5 = (char *)sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  __sz[0] = 0;
  sub_215D306DC(v5, __sz);
  size_t v6 = __sz[0];
  *(void *)a2 = __sz[0];
  std::string __p = 0;
  size_t v15 = 0;
  int v16 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v7 = (char *)operator new(v6);
    uint64_t v8 = &v7[v6];
    std::string __p = v7;
    int v16 = &v7[v6];
    bzero(v7, v6);
    size_t v15 = &v7[v6];
  }
  else
  {
    uint64_t v8 = 0;
    int v7 = 0;
  }
  v13[0] = v8 - v7;
  v13[1] = v7;
  int v9 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "bytes";
  *(void *)(a1 + 96) = 5;
  if (!v9) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  unint64_t v10 = sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  sub_215DF0BCC(v10, (uint64_t)v13);
  sub_215D0B178((uint64_t)__sz, (uint64_t)&__p);
  long long v12 = v18;
  long long v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(_OWORD *)(a2 + 24) = v12;
  if (__p)
  {
    size_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A41220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A41244(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v7 = 2;
  sub_215DFF824(a2[6], &v7);
  if (v7 <= 1)
  {
    sub_215A41348((uint64_t)&v8, (uint64_t)a2, a3);
  }
  else
  {
    sub_2159B0060(a2 + 2);
    sub_215A414D0((uint64_t)a2, a3);
    uint64_t v5 = a2[4];
    uint64_t v6 = *(void *)(v5 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v5 - 8);
    if (v6) {
      (*(void (**)(void *, uint64_t))(a2[2] + 40))(a2 + 2, v6);
    }
    a2[4] -= 16;
  }
}

void sub_215A41348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_215D0B178((uint64_t)v15, (uint64_t)&__p);
  long long v10 = v15[0];
  long long v11 = v15[1];
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  sub_215A41614(a2, (uint64_t)&v9);
  uint64_t v5 = v9;
  long long v6 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v15[0] = v11;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  unsigned int v7 = *(std::__shared_weak_count **)(a3 + 16);
  *(void *)(a3 + 16) = *((void *)&v6 + 1);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a3 + 24) = v15[0];
  char v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_215A414A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A414B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A414D0(uint64_t a1, uint64_t a2)
{
  sub_215DFFC24(*(void *)(a1 + 48), (void *)a2);
  size_t v4 = *(void *)a2;
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v5 = (char *)operator new(v4);
    long long v6 = &v5[v4];
    std::string __p = v5;
    long long v12 = &v5[v4];
    bzero(v5, v4);
    long long v11 = &v5[v4];
  }
  else
  {
    long long v6 = 0;
    uint64_t v5 = 0;
  }
  v9[0] = v6 - v5;
  v9[1] = v5;
  sub_215E013C0(a1, v9);
  sub_215D0B178((uint64_t)v13, (uint64_t)&__p);
  long long v8 = v13[1];
  unsigned int v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13[0];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a2 + 24) = v8;
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A415F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A41614(uint64_t a1, uint64_t a2)
{
  sub_215DFFC24(*(void *)(a1 + 48), (void *)a2);
  size_t v4 = *(void *)a2;
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v5 = (char *)operator new(v4);
    long long v6 = &v5[v4];
    std::string __p = v5;
    long long v12 = &v5[v4];
    bzero(v5, v4);
    long long v11 = &v5[v4];
  }
  else
  {
    long long v6 = 0;
    uint64_t v5 = 0;
  }
  v9[0] = v6 - v5;
  v9[1] = v5;
  sub_215E013C0(a1, v9);
  sub_215D0B178((uint64_t)v13, (uint64_t)&__p);
  long long v8 = v13[1];
  unsigned int v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13[0];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a2 + 24) = v8;
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A41734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A41758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_215D0B178((uint64_t)v15, (uint64_t)&__p);
  long long v10 = v15[0];
  long long v11 = v15[1];
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  sub_215A41A90(a2, (uint64_t)&v9);
  uint64_t v5 = v9;
  long long v6 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v15[0] = v11;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  unsigned int v7 = *(std::__shared_weak_count **)(a3 + 16);
  *(void *)(a3 + 16) = *((void *)&v6 + 1);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a3 + 24) = v15[0];
  long long v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_215A418B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A418C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A418E0(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "byte_size";
  *(void *)(a1 + 96) = 9;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v5 = (char *)sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  __sz[0] = 0;
  sub_215D2FEDC(v5, __sz);
  size_t v6 = __sz[0];
  *(void *)a2 = __sz[0];
  std::string __p = 0;
  size_t v15 = 0;
  int v16 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    unsigned int v7 = (char *)operator new(v6);
    long long v8 = &v7[v6];
    std::string __p = v7;
    int v16 = &v7[v6];
    bzero(v7, v6);
    size_t v15 = &v7[v6];
  }
  else
  {
    long long v8 = 0;
    unsigned int v7 = 0;
  }
  v13[0] = v8 - v7;
  v13[1] = v7;
  int v9 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "bytes";
  *(void *)(a1 + 96) = 5;
  if (!v9) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  sub_215DF0588(v10, (uint64_t)v13);
  sub_215D0B178((uint64_t)__sz, (uint64_t)&__p);
  long long v12 = v18;
  long long v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(_OWORD *)(a2 + 24) = v12;
  if (__p)
  {
    size_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A41A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A41A90(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "byte_size";
  *(void *)(a1 + 96) = 9;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v5 = (char *)sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  __sz[0] = 0;
  sub_215D2FEDC(v5, __sz);
  size_t v6 = __sz[0];
  *(void *)a2 = __sz[0];
  std::string __p = 0;
  size_t v15 = 0;
  int v16 = 0;
  if (v6)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    unsigned int v7 = (char *)operator new(v6);
    long long v8 = &v7[v6];
    std::string __p = v7;
    int v16 = &v7[v6];
    bzero(v7, v6);
    size_t v15 = &v7[v6];
  }
  else
  {
    long long v8 = 0;
    unsigned int v7 = 0;
  }
  v13[0] = v8 - v7;
  v13[1] = v7;
  int v9 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "bytes";
  *(void *)(a1 + 96) = 5;
  if (!v9) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  unint64_t v10 = sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  sub_215DF0588(v10, (uint64_t)v13);
  sub_215D0B178((uint64_t)__sz, (uint64_t)&__p);
  long long v12 = v18;
  long long v11 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)__sz;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  *(_OWORD *)(a2 + 24) = v12;
  if (__p)
  {
    size_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A41C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A41C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  std::string __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_215D0B178((uint64_t)v15, (uint64_t)&__p);
  long long v10 = v15[0];
  long long v11 = v15[1];
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
  sub_215A41F08(a2, (uint64_t)&v9);
  uint64_t v5 = v9;
  long long v6 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v15[0] = v11;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  unsigned int v7 = *(std::__shared_weak_count **)(a3 + 16);
  *(void *)(a3 + 16) = *((void *)&v6 + 1);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a3 + 24) = v15[0];
  long long v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_215A41D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A41DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A41DC8(uint64_t a1, uint64_t a2)
{
  sub_215DFB854(a1, (void *)a2);
  size_t v4 = *(void *)a2;
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v5 = (char *)operator new(v4);
    long long v6 = &v5[v4];
    std::string __p = v5;
    long long v12 = &v5[v4];
    bzero(v5, v4);
    long long v11 = &v5[v4];
  }
  else
  {
    long long v6 = 0;
    uint64_t v5 = 0;
  }
  v9[0] = v6 - v5;
  v9[1] = v5;
  sub_215DFD91C(a1, (uint64_t)v9);
  sub_215D0B178((uint64_t)v13, (uint64_t)&__p);
  long long v8 = v13[1];
  unsigned int v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13[0];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a2 + 24) = v8;
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A41EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A41F08(uint64_t a1, uint64_t a2)
{
  sub_215DFB854(a1, (void *)a2);
  size_t v4 = *(void *)a2;
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v5 = (char *)operator new(v4);
    long long v6 = &v5[v4];
    std::string __p = v5;
    long long v12 = &v5[v4];
    bzero(v5, v4);
    long long v11 = &v5[v4];
  }
  else
  {
    long long v6 = 0;
    uint64_t v5 = 0;
  }
  v9[0] = v6 - v5;
  v9[1] = v5;
  sub_215DFD91C(a1, (uint64_t)v9);
  sub_215D0B178((uint64_t)v13, (uint64_t)&__p);
  long long v8 = v13[1];
  unsigned int v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13[0];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a2 + 24) = v8;
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A42024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A42048(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_215A42148((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_215A422D0(a2, a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_215A42134(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A42148(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v9 = 0;
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  sub_215D0B178((uint64_t)v15, (uint64_t)&__p);
  long long v10 = v15[0];
  long long v11 = v15[1];
  if (__p)
  {
    char v13 = __p;
    operator delete(__p);
  }
  sub_215A4251C(a2, (uint64_t)&v9);
  uint64_t v5 = v9;
  long long v6 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v15[0] = v11;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  unsigned int v7 = *(std::__shared_weak_count **)(a3 + 16);
  *(void *)(a3 + 16) = *((void *)&v6 + 1);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a3 + 24) = v15[0];
  long long v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_215A422A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A422B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A422D0(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  size_t v8 = *(void *)(a1[3] + v2);
  *(void *)a2 = v8;
  unint64_t v9 = a1[6] + 8;
  a1[6] = v9;
  std::string __p = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    long long v10 = (char *)operator new(v8);
    std::string __p = v10;
    uint64_t v19 = &v10[v8];
    bzero(v10, v8);
    long long v18 = &v10[v8];
    unint64_t v11 = a1[7];
    BOOL v4 = v11 >= v9;
    size_t v12 = v11 - v9;
    if (!v4) {
      size_t v12 = 0;
    }
    if (v12 < v8)
    {
      uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "Not enough data to read binary blob");
      v14->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
      __cxa_throw(v14, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
    }
  }
  else
  {
    long long v10 = 0;
    size_t v8 = 0;
  }
  memcpy(v10, (const void *)(a1[3] + v9), v8);
  a1[6] = v8 + v9;
  sub_215D0B178((uint64_t)v20, (uint64_t)&__p);
  long long v16 = v20[1];
  char v13 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v20[0];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_OWORD *)(a2 + 24) = v16;
  if (__p)
  {
    long long v18 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A424D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4251C(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  size_t v8 = *(void *)(a1[3] + v2);
  *(void *)a2 = v8;
  unint64_t v9 = a1[6] + 8;
  a1[6] = v9;
  std::string __p = 0;
  long long v18 = 0;
  uint64_t v19 = 0;
  if (v8)
  {
    if ((v8 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    long long v10 = (char *)operator new(v8);
    std::string __p = v10;
    uint64_t v19 = &v10[v8];
    bzero(v10, v8);
    long long v18 = &v10[v8];
    unint64_t v11 = a1[7];
    BOOL v4 = v11 >= v9;
    size_t v12 = v11 - v9;
    if (!v4) {
      size_t v12 = 0;
    }
    if (v12 < v8)
    {
      uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "Not enough data to read binary blob");
      v14->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
      __cxa_throw(v14, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
    }
  }
  else
  {
    long long v10 = 0;
    size_t v8 = 0;
  }
  memcpy(v10, (const void *)(a1[3] + v9), v8);
  a1[6] = v8 + v9;
  sub_215D0B178((uint64_t)v20, (uint64_t)&__p);
  long long v16 = v20[1];
  char v13 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v20[0];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  *(_OWORD *)(a2 + 24) = v16;
  if (__p)
  {
    long long v18 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A42720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A42768(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      unsigned int v10 = v12;
      unint64_t v11 = sub_215A428E0();
      sub_215E07C10((std::string *)v11, v10, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    sub_215A42C84(a2, a3);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = a4;
  }
  if (v9 <= 1) {
    sub_215A42AFC((uint64_t)&v13, a2, a3);
  }
  else {
    sub_215A42C84(a2, a3);
  }
}

long long *sub_215A428E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889800, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889800))
  {
    return &xmmword_2678897E8;
  }
  uint64_t v1 = (char *)sub_215A429C8();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_2678897E8, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_2678897F8 = *((void *)v1 + 2);
    xmmword_2678897E8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678897E8, &dword_21572C000);
  __cxa_guard_release(&qword_267889800);
  return &xmmword_2678897E8;
}

void sub_215A429B0(_Unwind_Exception *a1)
{
}

void *sub_215A429C8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889820, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889820))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::BlobSample]", qword_267889808);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889808, &dword_21572C000);
    __cxa_guard_release(&qword_267889820);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889840, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889840))
  {
    return &unk_267889828;
  }
  sub_215E19DF4((uint64_t)qword_267889808, (uint64_t)&unk_267889828);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267889828, &dword_21572C000);
  __cxa_guard_release(&qword_267889840);
  return &unk_267889828;
}

void sub_215A42ACC(_Unwind_Exception *a1)
{
}

void sub_215A42AE4(_Unwind_Exception *a1)
{
}

void sub_215A42AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  sub_215D0B178((uint64_t)v15, (uint64_t)&__p);
  long long v10 = v15[0];
  long long v11 = v15[1];
  if (__p)
  {
    char v13 = __p;
    operator delete(__p);
  }
  sub_215A42E0C(a2, (uint64_t)&v9);
  uint64_t v5 = v9;
  long long v6 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v15[0] = v11;
  *(void *)a3 = v5;
  *(void *)(a3 + 8) = v6;
  int v7 = *(std::__shared_weak_count **)(a3 + 16);
  *(void *)(a3 + 16) = *((void *)&v6 + 1);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a3 + 24) = v15[0];
  size_t v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_215A42C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A42C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A42C84(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
  size_t v4 = *(void *)a2;
  long long v11 = 0;
  unsigned int v12 = 0;
  std::string __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v5 = (char *)operator new(v4);
    long long v6 = &v5[v4];
    std::string __p = v5;
    unsigned int v12 = &v5[v4];
    bzero(v5, v4);
    long long v11 = &v5[v4];
  }
  else
  {
    long long v6 = 0;
    uint64_t v5 = 0;
  }
  v9[0] = v6 - v5;
  v9[1] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 272))(a1, v9);
  sub_215D0B178((uint64_t)v13, (uint64_t)&__p);
  long long v8 = v13[1];
  int v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13[0];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a2 + 24) = v8;
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A42DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A42E0C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
  size_t v4 = *(void *)a2;
  long long v11 = 0;
  unsigned int v12 = 0;
  std::string __p = 0;
  if (v4)
  {
    if ((v4 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v5 = (char *)operator new(v4);
    long long v6 = &v5[v4];
    std::string __p = v5;
    unsigned int v12 = &v5[v4];
    bzero(v5, v4);
    long long v11 = &v5[v4];
  }
  else
  {
    long long v6 = 0;
    uint64_t v5 = 0;
  }
  v9[0] = v6 - v5;
  v9[1] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)a1 + 272))(a1, v9);
  sub_215D0B178((uint64_t)v13, (uint64_t)&__p);
  long long v8 = v13[1];
  int v7 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v13[0];
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_OWORD *)(a2 + 24) = v8;
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A42F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_215A42F94(uint64_t a1, uint64_t a2)
{
  v29[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v24);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v24);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v18);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  _OWORD v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  long long v16 = v29;
  v13[0] = v18;
  v13[1] = &v19;
  _OWORD v13[2] = &v20;
  _OWORD v13[3] = &v21;
  v13[4] = &v22;
  uint64_t v14 = &v23;
  if (!sub_215AF0A90((uint64_t)&v17, v15, v13)) {
    goto LABEL_24;
  }
  if (!*((unsigned char *)v16 + 24) || !*((unsigned char *)v14 + 24))
  {
    if ((*((unsigned char *)v16 + 24) != 0) == (*((unsigned char *)v14 + 24) != 0)) {
      goto LABEL_22;
    }
LABEL_24:
    BOOL v11 = 0;
    goto LABEL_25;
  }
  long long v8 = (unsigned __int8 *)*v16;
  uint64_t v9 = (unsigned __int8 *)v16[1];
  long long v10 = (unsigned __int8 *)*v14;
  if (&v9[-*v16] != (unsigned __int8 *)(v14[1] - *v14)) {
    goto LABEL_24;
  }
  if (v8 != v9)
  {
    while (sub_215AEF77C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    goto LABEL_24;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
    goto LABEL_24;
  }
  BOOL v11 = sub_215E0AEDC((unsigned __int8 *)(a1 + 208), (unsigned char *)(a2 + 208)) == 0;
LABEL_25:
  sub_2157C6F18((uint64_t)v18);
  sub_2157C6F18((uint64_t)v24);
  return v11;
}

void sub_215A43194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A431B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A431C4(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A43400((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A43704(&v11, (uint64_t)v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A43988((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A43C8C(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      long long v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A43EA8(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_2159D0904((int *)&v11, a1, a2 + 200);
      }
    }
  }
}

void sub_215A43400(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A43704(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v20 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v20, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v7 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC838(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v20 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v20, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v8 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC718(a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v20 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v20, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v6 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159A6DFC(a2, v4, 6u);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v20 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v20, 2u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v14 + 8);
  }
  sub_215E0076C(*(void *)(a2 + 24));
  sub_2159CCBDC(a2, (char *)(v3 + 200));
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
  sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
  size_t v17 = *(void *)(v15 + 48);
  if (v17) {
    memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  }
  *(void *)(v15 + 48) = 0;
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = *(void *)(v15 + 88) - 8;
  *(void *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(unsigned char *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(unsigned char *)(v15 + 40) = 0;
    }
  }
}

void sub_215A43988(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void *sub_215A43C8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      char v20 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        char v18 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      int v10 = *(void **)(a2 + 24);
      char v21 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      int v9 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v22 = v7;
  sub_215731D94(v11, (uint64_t)&v22, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    uint64_t v13 = *(void **)(a2 + 24);
    char v23 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_2159CEFA8(a2, v3 + 200);
  char v14 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void **)(a2 + 24);
    char v24 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v15, (uint64_t)&v24, 1);
  }
  uint64_t v16 = *(void **)(a2 + 24);
  char v25 = v14;
  uint64_t result = sub_215731D94(v16, (uint64_t)&v25, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A43EA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 2;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_215D02034((void *)a2);
  sub_2159CF75C(a2, v3 + 200);
  uint64_t v10 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v10 + 10) = *(void *)(a2 + 32) - v10 - 18;
  *(void *)(a2 + 56) -= 8;
}

void sub_215A44064(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A4471C(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A44C64(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    unsigned int v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A450F4(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    unsigned int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A4563C(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      unsigned int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A45CB4(&v10, v8);
      }
      else {
        sub_215A44230(&v9, (void **)a1);
      }
    }
  }
}

void sub_215A44230(uint64_t *a1, void **a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v27);
    sub_2159A3DA4((uint64_t)&v28, v27);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v28);
        if (!v43) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v26, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v8;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v34;
    long long v10 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v11;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v12;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v41;
LABEL_45:
    *((void *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v27);
  sub_2159A3DA4((uint64_t)&v28, v27);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v26, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v17;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v34;
    long long v19 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v20;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v21;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v37 && SHIBYTE(v36) < 0) {
    operator delete((void *)v35);
  }
  if (v32 && SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  sub_2157C6F18((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  char v24 = (void (**)(void **, unsigned int *))*a2;
  v27[0] = (uint64_t)a2[1];
  int v25 = v27[0];
  unsigned int v28 = 6;
  v24[13](a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3) {
      sub_2159B6FFC((uint64_t)&v28, a2, v4, v28);
    }
    else {
      sub_2159B71F0(a2, v4, v28);
    }
  }
  else
  {
    sub_2159B6970((int *)v27, a2, v4, v28);
  }
  sub_2159D4ADC((uint64_t)v27, (uint64_t)a2, (unsigned char *)(v3 + 200));
}

void sub_215A446D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4471C(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A44C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A44C64(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_215DFF824(a2[6], v25);
  sub_2159D1D90((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_215A450AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A450F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A455F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4563C(uint64_t *a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)&__p);
    sub_2159A3DA4((uint64_t)v38, (uint64_t *)&__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v38);
        if (!v53) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v34, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v39;
    *(unsigned char *)(v3 + 64) = 0;
    if (v42)
    {
      uint64_t v8 = v41;
      *(_OWORD *)(v3 + 40) = v40;
      *(void *)(v3 + 56) = v8;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v44;
    long long v10 = v43;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v47)
    {
      uint64_t v11 = v46;
      *(_OWORD *)(v3 + 96) = v45;
      *(void *)(v3 + 112) = v11;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v50)
    {
      uint64_t v12 = v49;
      *(_OWORD *)(v3 + 128) = v48;
      *(void *)(v3 + 144) = v12;
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v53;
    if (v53)
    {
      *(_OWORD *)(v3 + 160) = v51;
      *(void *)(v3 + 176) = v52;
      long long v51 = 0uLL;
      uint64_t v52 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v51;
    if (!(void)v51) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v51 + 1);
    uint64_t v16 = (void *)v51;
    if (*((void *)&v51 + 1) == (void)v51) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v51;
LABEL_45:
    *((void *)&v51 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)&__p);
  sub_2159A3DA4((uint64_t)v38, (uint64_t *)&__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v34, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v39;
    *(unsigned char *)(v3 + 64) = 0;
    if (v42)
    {
      uint64_t v17 = v41;
      *(_OWORD *)(v3 + 40) = v40;
      *(void *)(v3 + 56) = v17;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v44;
    long long v19 = v43;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v47)
    {
      uint64_t v20 = v46;
      *(_OWORD *)(v3 + 96) = v45;
      *(void *)(v3 + 112) = v20;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v50)
    {
      uint64_t v21 = v49;
      *(_OWORD *)(v3 + 128) = v48;
      *(void *)(v3 + 144) = v21;
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v53;
    if (v53)
    {
      *(_OWORD *)(v3 + 160) = v51;
      *(void *)(v3 + 176) = v52;
      long long v51 = 0uLL;
      uint64_t v52 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v38);
  if (v53)
  {
LABEL_38:
    uint64_t v14 = v51;
    if (!(void)v51) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v51 + 1);
    uint64_t v16 = (void *)v51;
    if (*((void *)&v51 + 1) == (void)v51) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v50 && SHIBYTE(v49) < 0) {
    operator delete((void *)v48);
  }
  if (v47 && SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (v42 && SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  sub_2157C6F18((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p) = 6;
  sub_215DFABD4(a2, &__p);
  unsigned int v24 = __p;
  if (__p >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p;
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)&__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v37 < 0)
      {
        if (v36 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          char v31 = 0;
          if (v37 < 0) {
            goto LABEL_83;
          }
          goto LABEL_69;
        }
      }
      else if (v37 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      char v31 = 1;
      if (v37 < 0) {
LABEL_83:
      }
        operator delete(__p);
LABEL_69:
      if (*(unsigned char *)(a2 + 131)) {
        char v30 = 0;
      }
      else {
        char v30 = v31;
      }
    }
    while ((v30 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_215DFABD4(a2, &__p);
  unsigned int v26 = (unsigned char *)(v3 + 200);
  unsigned int v27 = __p;
  if (__p >= 2) {
    unsigned int v28 = 2;
  }
  else {
    unsigned int v28 = __p;
  }
  if (v28 < 2)
  {
    sub_2159D33D8((uint64_t)&__p, a2, (uint64_t)v26);
  }
  else
  {
    LOBYTE(__p) = 0;
    sub_215DFA01C(a2, &__p);
    int v29 = __p;
    unsigned char *v26 = (_BYTE)__p;
    sub_2159D3560(v29, a2, (uint64_t)v26);
  }
  if (v27 >= 2 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v37 < 0)
      {
        if (v36 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          char v33 = 0;
          if (v37 < 0) {
            goto LABEL_102;
          }
          goto LABEL_88;
        }
      }
      else if (v37 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      char v33 = 1;
      if (v37 < 0) {
LABEL_102:
      }
        operator delete(__p);
LABEL_88:
      if (*(unsigned char *)(a2 + 131)) {
        char v32 = 0;
      }
      else {
        char v32 = v33;
      }
    }
    while ((v32 & 1) != 0);
  }
}

void sub_215A45C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A45CB4(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v25, a2, v4);
  sub_2159D3BC0((uint64_t)v25, a2, (unsigned char *)(v3 + 200));
}

void sub_215A460E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_215A4612C(uint64_t a1, uint64_t a2)
{
  v36[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v31);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v31);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v25);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v25);
  }
  uint64_t v18 = v31;
  long long v19 = &v32;
  uint64_t v20 = &v33;
  uint64_t v21 = &v34;
  int v22 = &v35;
  uint64_t v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  void v16[2] = &v27;
  v16[3] = &v28;
  float32x2_t v16[4] = &v29;
  uint64_t v17 = &v30;
  if (!sub_215AF0A90((uint64_t)&v24, &v18, v16)) {
    goto LABEL_26;
  }
  if (!*((unsigned char *)v23 + 24) || !*((unsigned char *)v17 + 24))
  {
    if ((*((unsigned char *)v23 + 24) != 0) == (*((unsigned char *)v17 + 24) != 0)) {
      goto LABEL_22;
    }
LABEL_26:
    BOOL v14 = 0;
    goto LABEL_27;
  }
  uint64_t v8 = (unsigned __int8 *)*v23;
  uint64_t v9 = (unsigned __int8 *)v23[1];
  long long v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17)) {
    goto LABEL_26;
  }
  if (v8 != v9)
  {
    while (sub_215AEF77C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
    goto LABEL_26;
  }
  if (*(void *)(a1 + 208) != *(void *)(a2 + 208)) {
    goto LABEL_26;
  }
  uint64_t v11 = *(unsigned __int8 **)(a1 + 216);
  int v12 = *v11;
  int v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13) {
    goto LABEL_26;
  }
  uint64_t v18 = v16;
  long long v19 = (uint64_t *)v11;
  uint64_t v20 = (uint64_t *)v13;
  BOOL v14 = sub_215D17264(v12, (uint64_t)&v18);
LABEL_27:
  sub_2157C6F18((uint64_t)v25);
  sub_2157C6F18((uint64_t)v31);
  return v14;
}

void sub_215A46358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A46374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A46388(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A465C4((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A468C8(&v11, (uint64_t)v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A46B4C((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A46E50(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A4706C(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_2159D785C((int *)&v11, a1, (long long *)(a2 + 200));
      }
    }
  }
}

void sub_215A465C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A468C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v20 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v20, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v7 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC838(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v20 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v20, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v8 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC718(a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v20 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v20, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v6 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159A6DFC(a2, v4, 6u);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v20 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v20, 2u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v14 + 8);
  }
  sub_215E0076C(*(void *)(a2 + 24));
  sub_2159D637C(a2, (long long *)(v3 + 200));
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
  sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
  size_t v17 = *(void *)(v15 + 48);
  if (v17) {
    memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  }
  *(void *)(v15 + 48) = 0;
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = *(void *)(v15 + 88) - 8;
  *(void *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(unsigned char *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(unsigned char *)(v15 + 40) = 0;
    }
  }
}

void sub_215A46B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void *sub_215A46E50(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      char v20 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        char v18 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      int v10 = *(void **)(a2 + 24);
      char v21 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      int v9 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v22 = v7;
  sub_215731D94(v11, (uint64_t)&v22, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    uint64_t v13 = *(void **)(a2 + 24);
    char v23 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_2159D7010(a2, (long long *)(v3 + 200));
  char v14 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void **)(a2 + 24);
    char v24 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v15, (uint64_t)&v24, 1);
  }
  uint64_t v16 = *(void **)(a2 + 24);
  char v25 = v14;
  uint64_t result = sub_215731D94(v16, (uint64_t)&v25, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A4706C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 2;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_215D02034((void *)a2);
  sub_2159D7554(a2, (long long *)(v3 + 200));
  uint64_t v10 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v10 + 10) = *(void *)(a2 + 32) - v10 - 18;
  *(void *)(a2 + 56) -= 8;
}

void sub_215A47228(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A478E8(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A47E30(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    unsigned int v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A482C0(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    unsigned int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A48808(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      unsigned int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A48D74(&v10, v8);
      }
      else {
        sub_215A473F4(&v9, (void **)a1);
      }
    }
  }
}

void sub_215A473F4(uint64_t *a1, void **a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v27);
    sub_2159A3DA4((uint64_t)&v28, v27);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v28);
        if (!v43) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v26, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v8;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v34;
    long long v10 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v11;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v12;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v41;
LABEL_45:
    *((void *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v27);
  sub_2159A3DA4((uint64_t)&v28, v27);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v26, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v17;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v34;
    long long v19 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v20;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v21;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v37 && SHIBYTE(v36) < 0) {
    operator delete((void *)v35);
  }
  if (v32 && SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  sub_2157C6F18((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  char v24 = (void (**)(void **, unsigned int *))*a2;
  v27[0] = (uint64_t)a2[1];
  int v25 = v27[0];
  unsigned int v28 = 6;
  v24[13](a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3) {
      sub_2159B6FFC((uint64_t)&v28, a2, v4, v28);
    }
    else {
      sub_2159B71F0(a2, v4, v28);
    }
  }
  else
  {
    sub_2159B6970((int *)v27, a2, v4, v28);
  }
  v27[0] = (uint64_t)a2[1];
  sub_2159E3224((int *)v27, a2, (unsigned char *)(v3 + 200));
}

void sub_215A478A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A478E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A47DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A47E30(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v25, a2, v4);
  LODWORD(v25[0]) = 2;
  sub_215DFF824(a2[6], v25);
  sub_2159DA1F4((uint64_t)v25, a2, (unsigned __int8 *)(v3 + 200), v25[0]);
}

void sub_215A48278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A482C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A487C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A48808(uint64_t *a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)__p);
    sub_2159A3DA4((uint64_t)v31, (uint64_t *)__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v31);
        if (!v46) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v28, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v8;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v37;
    long long v10 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v11;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v12;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v44;
LABEL_45:
    *((void *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)__p);
  sub_2159A3DA4((uint64_t)v31, (uint64_t *)__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v28, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v17;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v37;
    long long v19 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v20;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v21;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  sub_2157C6F18((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_215DFABD4(a2, __p);
  unsigned int v24 = __p[0];
  if (LODWORD(__p[0]) >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p[0];
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          char v27 = 0;
          if (v30 < 0) {
            goto LABEL_79;
          }
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      char v27 = 1;
      if (v30 < 0) {
LABEL_79:
      }
        operator delete(__p[0]);
LABEL_65:
      if (*(unsigned char *)(a2 + 131)) {
        char v26 = 0;
      }
      else {
        char v26 = v27;
      }
    }
    while ((v26 & 1) != 0);
  }
  sub_2159DE64C((uint64_t)__p, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_215A48D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A48D74(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v25, a2, v4);
  sub_2159E071C((uint64_t)v25, a2, v3 + 200);
}

void sub_215A491A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_215A491EC(uint64_t a1, uint64_t a2)
{
  v36[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v31);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v31);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v25);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v25);
  }
  uint64_t v18 = v31;
  long long v19 = &v32;
  uint64_t v20 = &v33;
  uint64_t v21 = &v34;
  int v22 = &v35;
  uint64_t v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  void v16[2] = &v27;
  v16[3] = &v28;
  float32x2_t v16[4] = &v29;
  uint64_t v17 = &v30;
  if (!sub_215AF0A90((uint64_t)&v24, &v18, v16)) {
    goto LABEL_26;
  }
  if (!*((unsigned char *)v23 + 24) || !*((unsigned char *)v17 + 24))
  {
    if ((*((unsigned char *)v23 + 24) != 0) == (*((unsigned char *)v17 + 24) != 0)) {
      goto LABEL_22;
    }
LABEL_26:
    BOOL v14 = 0;
    goto LABEL_27;
  }
  uint64_t v8 = (unsigned __int8 *)*v23;
  uint64_t v9 = (unsigned __int8 *)v23[1];
  long long v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17)) {
    goto LABEL_26;
  }
  if (v8 != v9)
  {
    while (sub_215AEF77C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
    goto LABEL_26;
  }
  if (*(void *)(a1 + 208) != *(void *)(a2 + 208)) {
    goto LABEL_26;
  }
  uint64_t v11 = *(unsigned __int8 **)(a1 + 216);
  int v12 = *v11;
  int v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13) {
    goto LABEL_26;
  }
  uint64_t v18 = v16;
  long long v19 = (uint64_t *)v11;
  uint64_t v20 = (uint64_t *)v13;
  BOOL v14 = sub_215D17264(v12, (uint64_t)&v18);
LABEL_27:
  sub_2157C6F18((uint64_t)v25);
  sub_2157C6F18((uint64_t)v31);
  return v14;
}

void sub_215A49418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A49434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A49448(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A49684((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A49988(&v11, v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A49C0C((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A49F10(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A4A12C(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_2159E7CA8((int *)&v11, a1, (long long *)(a2 + 200));
      }
    }
  }
}

void sub_215A49684(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A49988(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = a2[3];
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v20 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v20, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v7 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159CC838((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = a2[3];
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v20 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v20, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v8 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159CC718((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = a2[3];
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v20 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v20, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v6 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159A6DFC((uint64_t)a2, v4, 6u);
  }
  uint64_t v9 = a2[3];
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = a2[3];
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v20 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v20, 2u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v14 + 8);
  }
  sub_215E0076C(a2[3]);
  sub_2159E626C(a2, (long long *)(v3 + 200));
  uint64_t v15 = a2[3];
  uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
  sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
  size_t v17 = *(void *)(v15 + 48);
  if (v17) {
    memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  }
  *(void *)(v15 + 48) = 0;
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = *(void *)(v15 + 88) - 8;
  *(void *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(unsigned char *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(unsigned char *)(v15 + 40) = 0;
    }
  }
}

void sub_215A49C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void *sub_215A49F10(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      char v20 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        char v18 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      int v10 = *(void **)(a2 + 24);
      char v21 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      int v9 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v22 = v7;
  sub_215731D94(v11, (uint64_t)&v22, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    uint64_t v13 = *(void **)(a2 + 24);
    char v23 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_2159E733C(a2, (long long *)(v3 + 200));
  char v14 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void **)(a2 + 24);
    char v24 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v15, (uint64_t)&v24, 1);
  }
  uint64_t v16 = *(void **)(a2 + 24);
  char v25 = v14;
  uint64_t result = sub_215731D94(v16, (uint64_t)&v25, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A4A12C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 2;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_215D02034((void *)a2);
  sub_2159E78EC(a2, (long long *)(v3 + 200));
  uint64_t v10 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v10 + 10) = *(void *)(a2 + 32) - v10 - 18;
  *(void *)(a2 + 56) -= 8;
}

void sub_215A4A2E8(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A4A9A8(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A4AF58(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    unsigned int v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A4B3E8(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    unsigned int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A4B998(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      unsigned int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A4BF04(&v10, v8);
      }
      else {
        sub_215A4A4B4(&v9, (void **)a1);
      }
    }
  }
}

void sub_215A4A4B4(uint64_t *a1, void **a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v27);
    sub_2159A3DA4((uint64_t)&v28, v27);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v28);
        if (!v43) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v26, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v8;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v34;
    long long v10 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v11;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v12;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v41;
LABEL_45:
    *((void *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v27);
  sub_2159A3DA4((uint64_t)&v28, v27);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v26, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v17;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v34;
    long long v19 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v20;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v21;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v37 && SHIBYTE(v36) < 0) {
    operator delete((void *)v35);
  }
  if (v32 && SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  sub_2157C6F18((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  char v24 = (void (**)(void **, unsigned int *))*a2;
  v27[0] = (uint64_t)a2[1];
  int v25 = v27[0];
  unsigned int v28 = 6;
  v24[13](a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3) {
      sub_2159B6FFC((uint64_t)&v28, a2, v4, v28);
    }
    else {
      sub_2159B71F0(a2, v4, v28);
    }
  }
  else
  {
    sub_2159B6970((int *)v27, a2, v4, v28);
  }
  v27[0] = (uint64_t)a2[1];
  sub_2159F68C8((int *)v27, a2, (unsigned char *)(v3 + 200));
}

void sub_215A4A960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4A9A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A4AF10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A4AF58(uint64_t *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v26);
    sub_2159A3DA4((uint64_t)v27, v26);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v27);
        if (!v42) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v25, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v8;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v33;
    long long v10 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v11;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v12;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v40 + 1);
    uint64_t v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v40;
LABEL_45:
    *((void *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v26);
  sub_2159A3DA4((uint64_t)v27, v26);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v25, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v17;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v33;
    long long v19 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v20;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v21;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v40 + 1);
    uint64_t v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (v36 && SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (v31 && SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  sub_2157C6F18((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 2;
  sub_215DFF824(a2[6], v26);
  return sub_2159EBD20((uint64_t)v26, a2, (unsigned __int8 *)(v3 + 200), v26[0]);
}

void sub_215A4B3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4B3E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A4B950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4B998(uint64_t *a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)__p);
    sub_2159A3DA4((uint64_t)v31, (uint64_t *)__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v31);
        if (!v46) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v28, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v8;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v37;
    long long v10 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v11;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v12;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v44;
LABEL_45:
    *((void *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)__p);
  sub_2159A3DA4((uint64_t)v31, (uint64_t *)__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v28, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v17;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v37;
    long long v19 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v20;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v21;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  sub_2157C6F18((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_215DFABD4(a2, __p);
  unsigned int v24 = __p[0];
  if (LODWORD(__p[0]) >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p[0];
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          char v27 = 0;
          if (v30 < 0) {
            goto LABEL_79;
          }
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      char v27 = 1;
      if (v30 < 0) {
LABEL_79:
      }
        operator delete(__p[0]);
LABEL_65:
      if (*(unsigned char *)(a2 + 131)) {
        char v26 = 0;
      }
      else {
        char v26 = v27;
      }
    }
    while ((v26 & 1) != 0);
  }
  sub_2159F1338((uint64_t)__p, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_215A4BEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4BF04(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v25, a2, v4);
  sub_2159F38DC((uint64_t)v25, a2, v3 + 200);
}

void sub_215A4C334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_215A4C37C(uint64_t a1, uint64_t a2)
{
  v36[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v31);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v31);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v25);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v25);
  }
  uint64_t v18 = v31;
  long long v19 = &v32;
  uint64_t v20 = &v33;
  uint64_t v21 = &v34;
  int v22 = &v35;
  uint64_t v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  void v16[2] = &v27;
  v16[3] = &v28;
  float32x2_t v16[4] = &v29;
  uint64_t v17 = &v30;
  if (!sub_215AF0A90((uint64_t)&v24, &v18, v16)) {
    goto LABEL_26;
  }
  if (!*((unsigned char *)v23 + 24) || !*((unsigned char *)v17 + 24))
  {
    if ((*((unsigned char *)v23 + 24) != 0) == (*((unsigned char *)v17 + 24) != 0)) {
      goto LABEL_22;
    }
LABEL_26:
    BOOL v14 = 0;
    goto LABEL_27;
  }
  uint64_t v8 = (unsigned __int8 *)*v23;
  uint64_t v9 = (unsigned __int8 *)v23[1];
  long long v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17)) {
    goto LABEL_26;
  }
  if (v8 != v9)
  {
    while (sub_215AEF77C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
    goto LABEL_26;
  }
  if (*(void *)(a1 + 208) != *(void *)(a2 + 208)) {
    goto LABEL_26;
  }
  uint64_t v11 = *(unsigned __int8 **)(a1 + 216);
  int v12 = *v11;
  int v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13) {
    goto LABEL_26;
  }
  uint64_t v18 = v16;
  long long v19 = (uint64_t *)v11;
  uint64_t v20 = (uint64_t *)v13;
  BOOL v14 = sub_215D17264(v12, (uint64_t)&v18);
LABEL_27:
  sub_2157C6F18((uint64_t)v25);
  sub_2157C6F18((uint64_t)v31);
  return v14;
}

void sub_215A4C5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A4C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A4C5D8(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A4C814((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A4CB18(&v11, v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A4CD9C((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A4D0A0(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A4D2BC(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_2159FBA90((int *)&v11, a1, (long long *)(a2 + 200));
      }
    }
  }
}

void sub_215A4C814(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A4CB18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = a2[3];
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v20 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v20, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v7 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159CC838((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = a2[3];
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v20 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v20, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v8 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159CC718((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = a2[3];
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v20 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v20, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v6 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159A6DFC((uint64_t)a2, v4, 6u);
  }
  uint64_t v9 = a2[3];
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = a2[3];
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v20 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v20, 2u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v14 + 8);
  }
  sub_215E0076C(a2[3]);
  sub_2159FA054(a2, (long long *)(v3 + 200));
  uint64_t v15 = a2[3];
  uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
  sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
  size_t v17 = *(void *)(v15 + 48);
  if (v17) {
    memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  }
  *(void *)(v15 + 48) = 0;
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = *(void *)(v15 + 88) - 8;
  *(void *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(unsigned char *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(unsigned char *)(v15 + 40) = 0;
    }
  }
}

void sub_215A4CD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void *sub_215A4D0A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      char v20 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        char v18 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      int v10 = *(void **)(a2 + 24);
      char v21 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      int v9 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v22 = v7;
  sub_215731D94(v11, (uint64_t)&v22, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    uint64_t v13 = *(void **)(a2 + 24);
    char v23 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_2159FB124(a2, (long long *)(v3 + 200));
  char v14 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void **)(a2 + 24);
    char v24 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v15, (uint64_t)&v24, 1);
  }
  uint64_t v16 = *(void **)(a2 + 24);
  char v25 = v14;
  uint64_t result = sub_215731D94(v16, (uint64_t)&v25, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A4D2BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 2;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_215D02034((void *)a2);
  sub_2159FB6D4(a2, (long long *)(v3 + 200));
  uint64_t v10 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v10 + 10) = *(void *)(a2 + 32) - v10 - 18;
  *(void *)(a2 + 56) -= 8;
}

void sub_215A4D478(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A4DB38(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A4E0E8(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    unsigned int v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A4E578(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    unsigned int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A4EB28(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      unsigned int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A4F094(&v10, v8);
      }
      else {
        sub_215A4D644(&v9, (void **)a1);
      }
    }
  }
}

void sub_215A4D644(uint64_t *a1, void **a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v27);
    sub_2159A3DA4((uint64_t)&v28, v27);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v28);
        if (!v43) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v26, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v8;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v34;
    long long v10 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v11;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v12;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v41;
LABEL_45:
    *((void *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v27);
  sub_2159A3DA4((uint64_t)&v28, v27);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v26, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v17;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v34;
    long long v19 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v20;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v21;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v28);
  if (v43)
  {
LABEL_38:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v37 && SHIBYTE(v36) < 0) {
    operator delete((void *)v35);
  }
  if (v32 && SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  sub_2157C6F18((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  char v24 = (void (**)(void **, unsigned int *))*a2;
  v27[0] = (uint64_t)a2[1];
  int v25 = v27[0];
  unsigned int v28 = 6;
  v24[13](a2, &v28);
  if (v25 < 1)
  {
    if (v28 < 3) {
      sub_2159B6FFC((uint64_t)&v28, a2, v4, v28);
    }
    else {
      sub_2159B71F0(a2, v4, v28);
    }
  }
  else
  {
    sub_2159B6970((int *)v27, a2, v4, v28);
  }
  v27[0] = (uint64_t)a2[1];
  sub_215A0A690((int *)v27, a2, (unsigned char *)(v3 + 200));
}

void sub_215A4DAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4DB38(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A4E0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A4E0E8(uint64_t *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v26);
    sub_2159A3DA4((uint64_t)v27, v26);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v27);
        if (!v42) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v25, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v8;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v33;
    long long v10 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v11;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v12;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v40 + 1);
    uint64_t v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v40;
LABEL_45:
    *((void *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v26);
  sub_2159A3DA4((uint64_t)v27, v26);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v25, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v17;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v33;
    long long v19 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v20;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v21;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v40 + 1);
    uint64_t v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (v36 && SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (v31 && SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  sub_2157C6F18((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 2;
  sub_215DFF824(a2[6], v26);
  return sub_2159FFAF8((uint64_t)v26, a2, (unsigned __int8 *)(v3 + 200), v26[0]);
}

void sub_215A4E530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4E578(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A4EAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4EB28(uint64_t *a1, uint64_t a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)__p);
    sub_2159A3DA4((uint64_t)v31, (uint64_t *)__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v31);
        if (!v46) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v28, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v8;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v37;
    long long v10 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v11;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v12;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v44;
LABEL_45:
    *((void *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)__p);
  sub_2159A3DA4((uint64_t)v31, (uint64_t *)__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v28, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v17;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v37;
    long long v19 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v20;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v21;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v31);
  if (v46)
  {
LABEL_38:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  sub_2157C6F18((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_215DFABD4(a2, __p);
  unsigned int v24 = __p[0];
  if (LODWORD(__p[0]) >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p[0];
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v30 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_76:
          char v27 = 0;
          if (v30 < 0) {
            goto LABEL_79;
          }
          goto LABEL_65;
        }
      }
      else if (v30 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_76;
      }
      char v27 = 1;
      if (v30 < 0) {
LABEL_79:
      }
        operator delete(__p[0]);
LABEL_65:
      if (*(unsigned char *)(a2 + 131)) {
        char v26 = 0;
      }
      else {
        char v26 = v27;
      }
    }
    while ((v26 & 1) != 0);
  }
  sub_215A05100((uint64_t)__p, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_215A4F04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4F094(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v25, a2, v4);
  sub_215A076A4((uint64_t)v25, a2, v3 + 200);
}

void sub_215A4F4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A4F50C()
{
}

void sub_215A4F6E8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL sub_215A4F71C(uint64_t a1, uint64_t a2)
{
  v36[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v31);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v31);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v25);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v25);
  }
  uint64_t v18 = v31;
  long long v19 = &v32;
  uint64_t v20 = &v33;
  uint64_t v21 = &v34;
  int v22 = &v35;
  uint64_t v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  void v16[2] = &v27;
  v16[3] = &v28;
  float32x2_t v16[4] = &v29;
  uint64_t v17 = &v30;
  if (!sub_215AF0A90((uint64_t)&v24, &v18, v16)) {
    goto LABEL_26;
  }
  if (!*((unsigned char *)v23 + 24) || !*((unsigned char *)v17 + 24))
  {
    if ((*((unsigned char *)v23 + 24) != 0) == (*((unsigned char *)v17 + 24) != 0)) {
      goto LABEL_22;
    }
LABEL_26:
    BOOL v14 = 0;
    goto LABEL_27;
  }
  uint64_t v8 = (unsigned __int8 *)*v23;
  uint64_t v9 = (unsigned __int8 *)v23[1];
  long long v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17)) {
    goto LABEL_26;
  }
  if (v8 != v9)
  {
    while (sub_215AEF77C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
    goto LABEL_26;
  }
  if (*(void *)(a1 + 208) != *(void *)(a2 + 208)) {
    goto LABEL_26;
  }
  uint64_t v11 = *(unsigned __int8 **)(a1 + 216);
  int v12 = *v11;
  int v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13) {
    goto LABEL_26;
  }
  uint64_t v18 = v16;
  long long v19 = (uint64_t *)v11;
  uint64_t v20 = (uint64_t *)v13;
  BOOL v14 = sub_215D17264(v12, (uint64_t)&v18);
LABEL_27:
  sub_2157C6F18((uint64_t)v25);
  sub_2157C6F18((uint64_t)v31);
  return v14;
}

void sub_215A4F948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A4F964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A4F978(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A4FBB4((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A512E4(&v11, v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A51C6C((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A5339C(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A53B68(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_215A540E0((int *)&v11, a1, (long long *)(a2 + 200));
      }
    }
  }
}

void sub_215A4FBB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A4FEB8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  int v7 = &v4;
  sub_2159CC60C();
}

void sub_215A500F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215A50110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_215A50124(int a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      unint64_t result = sub_215A502A4(v4);
      break;
    case 1:
      unint64_t result = sub_215A50444(v4);
      break;
    case 2:
      unint64_t result = sub_215A505E4(v4);
      break;
    case 3:
      unint64_t result = sub_215A50784(v4);
      break;
    case 5:
      unint64_t result = sub_215A50924(v4);
      break;
    case 6:
      unint64_t result = sub_215A50AC4(v4);
      break;
    case 7:
      unint64_t result = sub_215A50C64(v4);
      break;
    case 8:
      unint64_t result = sub_215A50E04(v4);
      break;
    case 11:
      unint64_t result = sub_215A50FA4(v4);
      break;
    case 12:
      unint64_t result = sub_215A51144(v4);
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

uint64_t sub_215A502A4(void *a1)
{
  uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEC208(v6, &v12);
        uint64_t v7 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5 + 2;
        sub_215DEC208(v7, &v12);
        uint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEC208(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5 + 2;
        sub_215DEC208(v10, &v12);
        uint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A50444(void *a1)
{
  unint64_t result = sub_215D160E4((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEEA00(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 4;
        sub_215DEEA00(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEEA00(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 4;
        sub_215DEEA00(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A505E4(void *a1)
{
  unint64_t result = sub_215D161EC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEEC78(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DEEC78(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEEC78(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DEEC78(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A50784(void *a1)
{
  unint64_t result = sub_215D162F4((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEF168(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DEF168(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEF168(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DEF168(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t sub_215A50924(void *a1)
{
  uint64_t result = sub_215D15F58((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEE788(v6, &v12);
        uint64_t v7 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5 + 2;
        sub_215DEE788(v7, &v12);
        uint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEE788(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5 + 2;
        sub_215DEE788(v10, &v12);
        uint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A50AC4(void *a1)
{
  unint64_t result = sub_215D16060((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEE8C4(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 4;
        sub_215DEE8C4(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEE8C4(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 4;
        sub_215DEE8C4(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A50C64(void *a1)
{
  unint64_t result = sub_215D16168((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEEB3C(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DEEB3C(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEEB3C(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DEEB3C(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A50E04(void *a1)
{
  unint64_t result = sub_215D16270((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEF02C(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DEF02C(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEF02C(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DEF02C(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A50FA4(void *a1)
{
  unint64_t result = sub_215D16378((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEF750(v6, (float **)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DEF750(v7, (float **)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEF750(v9, (float **)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DEF750(v10, (float **)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A51144(void *a1)
{
  unint64_t result = sub_215D163FC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEFB74(v6, &v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DEFB74(v7, &v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEFB74(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DEFB74(v10, &v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

void sub_215A512E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = a2[3];
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v20 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v20, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v7 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159CC838((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = a2[3];
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v20 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v20, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v8 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159CC718((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = a2[3];
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v20 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v20, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v6 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159A6DFC((uint64_t)a2, v4, 6u);
  }
  uint64_t v9 = a2[3];
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = a2[3];
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v20 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v20, 1u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v14 + 8);
  }
  sub_215E0076C(a2[3]);
  sub_215A51568(a2, (long long *)(v3 + 200));
  uint64_t v15 = a2[3];
  uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
  sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
  size_t v17 = *(void *)(v15 + 48);
  if (v17) {
    memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  }
  *(void *)(v15 + 48) = 0;
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = *(void *)(v15 + 88) - 8;
  *(void *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(unsigned char *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(unsigned char *)(v15 + 40) = 0;
    }
  }
}

void sub_215A51568(uint64_t *a1, long long *a2)
{
  long long v7 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1[3];
  if (*(unsigned char *)(v4 + 40))
  {
    v10[0] = (uint64_t *)(v4 + 16);
    sub_215E053CC(v10, v7);
  }
  else
  {
    if ((char)v7 < 0)
    {
      LOBYTE(v10[0]) = -52;
      BYTE1(v10[0]) = v7;
    }
    else
    {
      LOBYTE(v10[0]) = v7;
    }
    std::ostream::write();
  }
  uint64_t v5 = a1[3];
  if (*(unsigned char *)(v5 + 40))
  {
    v10[0] = (uint64_t *)(v5 + 16);
    sub_215E069EC(v10, *((unint64_t *)&v7 + 1));
  }
  else
  {
    sub_215E06D00();
  }
  long long v11 = xmmword_26425A6E8;
  v10[0] = (uint64_t *)&v7;
  v10[1] = a1;
  v10[2] = (uint64_t *)&v11;
  sub_215A516D8(v7, v10);
  uint64_t v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_215A516C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215A516D8(int a1, void *a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      uint64_t v4 = result;
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v7 + 40))
      {
        *(void *)&long long v63 = v7 + 16;
        if (result)
        {
          do
          {
            char v8 = *v6++;
            uint64_t result = (uint64_t)sub_215E053CC((uint64_t **)&v63, v8);
            --v4;
          }
          while (v4);
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        do
        {
          while (1)
          {
            int v50 = *v6;
            if ((v50 & 0x80000000) == 0) {
              break;
            }
            LOBYTE(v63) = -52;
            BYTE1(v63) = v50;
            uint64_t result = std::ostream::write();
            ++v6;
            if (!--v4) {
              return result;
            }
          }
          LOBYTE(v63) = *v6;
          uint64_t result = std::ostream::write();
          ++v6;
          --v4;
        }
        while (v4);
      }
      return result;
    case 1:
      unint64_t v9 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      uint64_t v10 = a2[1];
      *(void *)&long long v63 = v9;
      *((void *)&v63 + 1) = v11;
      return sub_215DFF1B4(*(void *)(v10 + 24), &v63);
    case 2:
      uint64_t result = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v14 + 40))
      {
        *(void *)&long long v63 = v14 + 16;
        if (result)
        {
          uint64_t v15 = 4 * result;
          do
          {
            unsigned int v16 = *v13++;
            uint64_t result = (uint64_t)sub_215E05FEC((uint64_t **)&v63, v16);
            v15 -= 4;
          }
          while (v15);
        }
      }
      else if (result)
      {
        uint64_t v51 = v14 + 8;
        uint64_t v52 = 4 * result;
        do
        {
          ++v13;
          uint64_t result = sub_215E0626C((uint64_t)&v63, v51);
          v52 -= 4;
        }
        while (v52);
      }
      return result;
    case 3:
      uint64_t result = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v19 + 40))
      {
        *(void *)&long long v63 = v19 + 16;
        if (result)
        {
          uint64_t v20 = 8 * result;
          do
          {
            unint64_t v21 = *v18++;
            uint64_t result = (uint64_t)sub_215E069EC((uint64_t **)&v63, v21);
            v20 -= 8;
          }
          while (v20);
        }
      }
      else if (result)
      {
        uint64_t v53 = 8 * result;
        do
        {
          ++v18;
          uint64_t result = sub_215E06D00();
          v53 -= 8;
        }
        while (v53);
      }
      return result;
    case 5:
      uint64_t result = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      uint64_t v22 = result;
      char v24 = v23;
      uint64_t v25 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v25 + 40))
      {
        *(void *)&long long v63 = v25 + 16;
        if (result)
        {
          do
          {
            int v26 = (char)*v24++;
            uint64_t result = (uint64_t)sub_215E05278((uint64_t **)&v63, v26);
            --v22;
          }
          while (v22);
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        do
        {
          while (1)
          {
            int v54 = (char)*v24;
            if (v54 <= -33) {
              break;
            }
            LOBYTE(v63) = *v24;
            uint64_t result = std::ostream::write();
            ++v24;
            if (!--v22) {
              return result;
            }
          }
          LOBYTE(v63) = -48;
          BYTE1(v63) = v54;
          uint64_t result = std::ostream::write();
          ++v24;
          --v22;
        }
        while (v22);
      }
      return result;
    case 6:
      uint64_t result = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v29 + 40))
      {
        *(void *)&long long v63 = v29 + 16;
        if (result)
        {
          uint64_t v30 = 2 * result;
          do
          {
            signed int v31 = *v28++;
            uint64_t result = (uint64_t)sub_215E0551C((uint64_t **)&v63, v31);
            v30 -= 2;
          }
          while (v30);
        }
      }
      else if (result)
      {
        uint64_t v55 = 2 * result;
        do
        {
          ++v28;
          uint64_t result = sub_215E057EC();
          v55 -= 2;
        }
        while (v55);
      }
      return result;
    case 7:
      uint64_t result = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v34 + 40))
      {
        *(void *)&long long v63 = v34 + 16;
        if (result)
        {
          uint64_t v35 = 4 * result;
          do
          {
            unsigned int v36 = *v33++;
            uint64_t result = (uint64_t)sub_215E05AC4((uint64_t **)&v63, v36);
            v35 -= 4;
          }
          while (v35);
        }
      }
      else if (result)
      {
        uint64_t v56 = 4 * result;
        do
        {
          ++v33;
          uint64_t result = sub_215E05EEC();
          v56 -= 4;
        }
        while (v56);
      }
      return result;
    case 8:
      uint64_t result = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      char v38 = v37;
      uint64_t v39 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v39 + 40))
      {
        *(void *)&long long v63 = v39 + 16;
        if (result)
        {
          uint64_t v40 = 8 * result;
          do
          {
            unint64_t v41 = *v38++;
            uint64_t result = (uint64_t)sub_215E06360((uint64_t **)&v63, v41);
            v40 -= 8;
          }
          while (v40);
        }
      }
      else if (result)
      {
        uint64_t v57 = 8 * result;
        do
        {
          ++v38;
          uint64_t result = sub_215E068A8();
          v57 -= 8;
        }
        while (v57);
      }
      return result;
    case 11:
      uint64_t result = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      char v43 = v42;
      uint64_t v44 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v44 + 40))
      {
        *(void *)&long long v63 = v44 + 16;
        if (result)
        {
          uint64_t v45 = 4 * result;
          do
          {
            uint64_t result = (uint64_t)sub_215E06DFC((uint64_t)&v62, (uint64_t **)&v63, v43++);
            v45 -= 4;
          }
          while (v45);
        }
      }
      else if (result)
      {
        uint64_t v58 = 4 * result;
        do
        {
          unsigned int v59 = *v43++;
          LOBYTE(v63) = -54;
          *(_DWORD *)((char *)&v63 + 1) = bswap32(v59);
          uint64_t result = std::ostream::write();
          v58 -= 4;
        }
        while (v58);
      }
      return result;
    case 12:
      uint64_t result = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v48 + 40))
      {
        *(void *)&long long v63 = v48 + 16;
        if (result)
        {
          uint64_t v49 = 8 * result;
          do
          {
            uint64_t result = (uint64_t)sub_215E06EE4((uint64_t)&v62, (uint64_t **)&v63, v47++);
            v49 -= 8;
          }
          while (v49);
        }
      }
      else if (result)
      {
        uint64_t v60 = 8 * result;
        do
        {
          unint64_t v61 = *v47++;
          LOBYTE(v63) = -53;
          *(void *)((char *)&v63 + 1) = bswap64(v61);
          uint64_t result = std::ostream::write();
          v60 -= 8;
        }
        while (v60);
      }
      return result;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A51C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void sub_215A51F70(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  int v7 = &v4;
  sub_2159CE670();
}

void sub_215A521A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215A521C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_215A521DC(int a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      unint64_t result = sub_215A5235C(v4);
      break;
    case 1:
      unint64_t result = sub_215A524FC(v4);
      break;
    case 2:
      unint64_t result = sub_215A5269C(v4);
      break;
    case 3:
      unint64_t result = sub_215A5283C(v4);
      break;
    case 5:
      unint64_t result = sub_215A529DC(v4);
      break;
    case 6:
      unint64_t result = sub_215A52B7C(v4);
      break;
    case 7:
      unint64_t result = sub_215A52D1C(v4);
      break;
    case 8:
      unint64_t result = sub_215A52EBC(v4);
      break;
    case 11:
      unint64_t result = sub_215A5305C(v4);
      break;
    case 12:
      unint64_t result = sub_215A531FC(v4);
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

uint64_t sub_215A5235C(void *a1)
{
  uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEB984(v6, &v12);
        uint64_t v7 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5 + 2;
        sub_215DEB984(v7, &v12);
        uint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEB984(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5 + 2;
        sub_215DEB984(v10, &v12);
        uint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A524FC(void *a1)
{
  unint64_t result = sub_215D160E4((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DECBA4(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 4;
        sub_215DECBA4(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DECBA4(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 4;
        sub_215DECBA4(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A5269C(void *a1)
{
  unint64_t result = sub_215D161EC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DECE1C(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DECE1C(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DECE1C(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DECE1C(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A5283C(void *a1)
{
  unint64_t result = sub_215D162F4((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DED094(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DED094(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DED094(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DED094(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t sub_215A529DC(void *a1)
{
  uint64_t result = sub_215D15F58((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEC92C(v6, &v12);
        uint64_t v7 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5 + 2;
        sub_215DEC92C(v7, &v12);
        uint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEC92C(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        size_t v12 = 2;
        uint64_t v13 = v5 + 2;
        sub_215DEC92C(v10, &v12);
        uint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A52B7C(void *a1)
{
  unint64_t result = sub_215D16060((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DECA68(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 4;
        sub_215DECA68(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DECA68(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 4;
        sub_215DECA68(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A52D1C(void *a1)
{
  unint64_t result = sub_215D16168((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DECCE0(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DECCE0(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DECCE0(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DECCE0(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A52EBC(void *a1)
{
  unint64_t result = sub_215D16270((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DECF58(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DECF58(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DECF58(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DECF58(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A5305C(void *a1)
{
  unint64_t result = sub_215D16378((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DED67C(v6, (float **)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DED67C(v7, (float **)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DED67C(v9, (float **)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 8;
        sub_215DED67C(v10, (float **)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A531FC(void *a1)
{
  unint64_t result = sub_215D163FC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5;
        sub_215DEDAA0(v6, &v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DEDAA0(v7, &v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 2, v13 = v5, sub_215DEDAA0(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 2;
        uint64_t v13 = v5 + 16;
        sub_215DEDAA0(v10, &v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

void *sub_215A5339C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      uint64_t v8 = *(void **)(a2 + 24);
      char v20 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        uint64_t v6 = *(void **)(a2 + 24);
        char v18 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      uint64_t v10 = *(void **)(a2 + 24);
      char v21 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      uint64_t v9 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  uint64_t v11 = *(void **)(a2 + 24);
  char v22 = v7;
  sub_215731D94(v11, (uint64_t)&v22, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    uint64_t v13 = *(void **)(a2 + 24);
    char v23 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_215A535B8(a2, (long long *)(v3 + 200));
  char v14 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void **)(a2 + 24);
    char v24 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v15, (uint64_t)&v24, 1);
  }
  unsigned int v16 = *(void **)(a2 + 24);
  char v25 = v14;
  unint64_t result = sub_215731D94(v16, (uint64_t)&v25, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A535B8(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v9[0]) = v6;
  sub_215DF927C(a1, (unsigned __int8 *)v9);
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void **)(a1 + 24);
    LOBYTE(v9[0]) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)v9, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  long long v10 = xmmword_26425A6E8;
  v9[0] = &v6;
  v9[1] = a1;
  void v9[2] = &v10;
  sub_215A536E4(v6, v9);
  int v5 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_215A536D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A536E4(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      if (v3)
      {
        uint64_t v5 = v3;
        long long v6 = v4;
        uint64_t v7 = a2[1];
        do
        {
          sub_215DF927C(v7, v6++);
          --v5;
        }
        while (v5);
      }
      break;
    case 1:
      unint64_t v8 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      if (v8)
      {
        uint64_t v10 = v9;
        uint64_t v11 = a2[1];
        uint64_t v12 = *(void *)(v11 + 40);
        uint64_t v13 = 2 * v8;
        do
        {
          if (v12)
          {
            char v14 = *(void **)(v11 + 24);
            char v69 = *(unsigned char *)(v11 + 32);
            sub_215731D94(v14, (uint64_t)&v69, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          uint64_t v12 = *(void *)(v11 + 40) + 1;
          *(void *)(v11 + 40) = v12;
          v13 -= 2;
        }
        while (v13);
      }
      break;
    case 2:
      unint64_t v15 = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      if (v15)
      {
        uint64_t v17 = v16;
        uint64_t v18 = a2[1];
        uint64_t v19 = *(void *)(v18 + 40);
        uint64_t v20 = 4 * v15;
        do
        {
          if (v19)
          {
            char v21 = *(void **)(v18 + 24);
            char v70 = *(unsigned char *)(v18 + 32);
            sub_215731D94(v21, (uint64_t)&v70, 1);
          }
          v17 += 4;
          std::ostream::operator<<();
          uint64_t v19 = *(void *)(v18 + 40) + 1;
          *(void *)(v18 + 40) = v19;
          v20 -= 4;
        }
        while (v20);
      }
      break;
    case 3:
      unint64_t v22 = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      if (v22)
      {
        uint64_t v24 = v23;
        uint64_t v25 = a2[1];
        uint64_t v26 = *(void *)(v25 + 40);
        uint64_t v27 = 8 * v22;
        do
        {
          if (v26)
          {
            uint64_t v28 = *(void **)(v25 + 24);
            char v71 = *(unsigned char *)(v25 + 32);
            sub_215731D94(v28, (uint64_t)&v71, 1);
          }
          v24 += 8;
          std::ostream::operator<<();
          uint64_t v26 = *(void *)(v25 + 40) + 1;
          *(void *)(v25 + 40) = v26;
          v27 -= 8;
        }
        while (v27);
      }
      break;
    case 5:
      uint64_t v29 = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      if (v29)
      {
        uint64_t v31 = v29;
        uint64_t v32 = v30;
        uint64_t v33 = a2[1];
        do
        {
          sub_215DF9090(v33, v32++);
          --v31;
        }
        while (v31);
      }
      break;
    case 6:
      unint64_t v34 = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      if (v34)
      {
        uint64_t v36 = v35;
        uint64_t v37 = a2[1];
        uint64_t v38 = *(void *)(v37 + 40);
        uint64_t v39 = 2 * v34;
        do
        {
          if (v38)
          {
            uint64_t v40 = *(void **)(v37 + 24);
            char v72 = *(unsigned char *)(v37 + 32);
            sub_215731D94(v40, (uint64_t)&v72, 1);
          }
          v36 += 2;
          std::ostream::operator<<();
          uint64_t v38 = *(void *)(v37 + 40) + 1;
          *(void *)(v37 + 40) = v38;
          v39 -= 2;
        }
        while (v39);
      }
      break;
    case 7:
      unint64_t v41 = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      if (v41)
      {
        uint64_t v43 = v42;
        uint64_t v44 = a2[1];
        uint64_t v45 = *(void *)(v44 + 40);
        uint64_t v46 = 4 * v41;
        do
        {
          if (v45)
          {
            uint64_t v47 = *(void **)(v44 + 24);
            char v73 = *(unsigned char *)(v44 + 32);
            sub_215731D94(v47, (uint64_t)&v73, 1);
          }
          v43 += 4;
          std::ostream::operator<<();
          uint64_t v45 = *(void *)(v44 + 40) + 1;
          *(void *)(v44 + 40) = v45;
          v46 -= 4;
        }
        while (v46);
      }
      break;
    case 8:
      unint64_t v48 = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      if (v48)
      {
        uint64_t v50 = v49;
        uint64_t v51 = a2[1];
        uint64_t v52 = *(void *)(v51 + 40);
        uint64_t v53 = 8 * v48;
        do
        {
          if (v52)
          {
            int v54 = *(void **)(v51 + 24);
            char v74 = *(unsigned char *)(v51 + 32);
            sub_215731D94(v54, (uint64_t)&v74, 1);
          }
          v50 += 8;
          std::ostream::operator<<();
          uint64_t v52 = *(void *)(v51 + 40) + 1;
          *(void *)(v51 + 40) = v52;
          v53 -= 8;
        }
        while (v53);
      }
      break;
    case 11:
      unint64_t v55 = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      if (v55)
      {
        uint64_t v57 = v56;
        uint64_t v58 = a2[1];
        uint64_t v59 = *(void *)(v58 + 40);
        uint64_t v60 = 4 * v55;
        do
        {
          if (v59)
          {
            unint64_t v61 = *(void **)(v58 + 24);
            char v75 = *(unsigned char *)(v58 + 32);
            sub_215731D94(v61, (uint64_t)&v75, 1);
          }
          *(void *)(*(void *)(v58 + 24) + *(void *)(**(void **)(v58 + 24) - 24) + 16) = 9;
          v57 += 4;
          std::ostream::operator<<();
          uint64_t v59 = *(void *)(v58 + 40) + 1;
          *(void *)(v58 + 40) = v59;
          v60 -= 4;
        }
        while (v60);
      }
      break;
    case 12:
      unint64_t v62 = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      if (v62)
      {
        uint64_t v64 = v63;
        uint64_t v65 = a2[1];
        uint64_t v66 = *(void *)(v65 + 40);
        uint64_t v67 = 8 * v62;
        do
        {
          if (v66)
          {
            v68 = *(void **)(v65 + 24);
            char v76 = *(unsigned char *)(v65 + 32);
            sub_215731D94(v68, (uint64_t)&v76, 1);
          }
          *(void *)(*(void *)(v65 + 24) + *(void *)(**(void **)(v65 + 24) - 24) + 16) = 17;
          v64 += 8;
          std::ostream::operator<<();
          uint64_t v66 = *(void *)(v65 + 40) + 1;
          *(void *)(v65 + 40) = v66;
          v67 -= 8;
        }
        while (v67);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A53B68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 1;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_215D02034((void *)a2);
  sub_215A53D24(a2, (long long *)(v3 + 200));
  uint64_t v10 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v10 + 10) = *(void *)(a2 + 32) - v10 - 18;
  *(void *)(a2 + 56) -= 8;
}

void sub_215A53D24(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  unsigned int v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(__src[0]) = v5;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&v5 + 8, (char *)&v6, 8);
  long long v9 = xmmword_26425A6E8;
  __src[0] = &v5;
  __src[1] = a1;
  __src[2] = &v9;
  sub_215A53E54(v5, __src);
  uint64_t v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_215A53E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_215A53E54(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      int64_t v4 = v3;
      uint64_t v6 = v5;
      uint64_t v7 = a2[1];
      if (v5) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v3 == 0;
      }
      if (!v8) {
        goto LABEL_18;
      }
      goto LABEL_19;
    case 1:
      unint64_t v9 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      goto LABEL_23;
    case 2:
      unint64_t v11 = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      goto LABEL_32;
    case 3:
      unint64_t v13 = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      goto LABEL_39;
    case 5:
      uint64_t v15 = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      int64_t v4 = v15;
      uint64_t v6 = v16;
      uint64_t v7 = a2[1];
      if (v16) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v15 == 0;
      }
      if (v17) {
        goto LABEL_19;
      }
LABEL_18:
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_47;
      }
LABEL_19:
      uint64_t v18 = v7 + 24;
      uint64_t v19 = *(char **)(v7 + 32);
      uint64_t v20 = &v6[v4];
      char v21 = v6;
      int64_t v22 = v4;
      break;
    case 6:
      unint64_t v9 = sub_215D16060((unsigned __int8 **)(*a2 + 16));
LABEL_23:
      uint64_t v24 = v10;
      uint64_t v25 = a2[1];
      uint64_t v26 = 2 * v9;
      if (v10) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v26 == 0;
      }
      if (!v27) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 7:
      unint64_t v11 = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      goto LABEL_32;
    case 8:
      unint64_t v13 = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      goto LABEL_39;
    case 11:
      unint64_t v11 = sub_215D16378((unsigned __int8 **)(*a2 + 16));
LABEL_32:
      uint64_t v24 = v12;
      uint64_t v25 = a2[1];
      uint64_t v26 = 4 * v11;
      if (v12) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v26 == 0;
      }
      if (!v28) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 12:
      unint64_t v13 = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
LABEL_39:
      uint64_t v24 = v14;
      uint64_t v25 = a2[1];
      uint64_t v26 = 8 * v13;
      if (v14) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v26 == 0;
      }
      if (!v29)
      {
LABEL_43:
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
LABEL_47:
          abort();
        }
      }
LABEL_44:
      uint64_t v18 = v25 + 24;
      uint64_t v19 = *(char **)(v25 + 32);
      uint64_t v20 = &v24[v26];
      char v21 = v24;
      int64_t v22 = v26;
      break;
    default:
      sub_215E097D8(a1);
  }
  return sub_215D04A50(v18, v19, v21, v20, v22);
}

void sub_215A540E0(int *a1, unsigned char *a2, long long *a3)
{
  int v6 = 1;
  (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1
    || *a1 == 2 && (int v7 = 1, (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v7), *a1 <= 0))
  {
    sub_215A54228(a2, a3);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    sub_215A54228(a2, a3);
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

void sub_215A54228(unsigned char *a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  int v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[0] = &v5;
  sub_2159D0EBC(a1, v8);
  (*(void (**)(unsigned char *, char *))(*(void *)a1 + 120))(a1, (char *)&v5 + 8);
  long long v9 = xmmword_26425A6E8;
  v8[0] = &v5;
  v8[1] = a1;
  void v8[2] = &v9;
  sub_215A54348(v5, v8);
  int64_t v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_215A54334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215A54348(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v5 = result;
        uint64_t v6 = v4;
        uint64_t v7 = a2[1];
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 80))(v7, v6++);
          --v5;
        }
        while (v5);
      }
      break;
    case 1:
      uint64_t result = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v9 = v8;
        uint64_t v10 = a2[1];
        uint64_t v11 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 96))(v10, v9);
          v9 += 2;
          v11 -= 2;
        }
        while (v11);
      }
      break;
    case 2:
      uint64_t result = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v13 = v12;
        uint64_t v14 = a2[1];
        uint64_t v15 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 104))(v14, v13);
          v13 += 4;
          v15 -= 4;
        }
        while (v15);
      }
      break;
    case 3:
      uint64_t result = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v17 = v16;
        uint64_t v18 = a2[1];
        uint64_t v19 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 120))(v18, v17);
          v17 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      break;
    case 5:
      uint64_t result = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v21 = result;
        uint64_t v22 = v20;
        uint64_t v23 = a2[1];
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v23 + 88))(v23, v22++);
          --v21;
        }
        while (v21);
      }
      break;
    case 6:
      uint64_t result = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v25 = v24;
        uint64_t v26 = a2[1];
        uint64_t v27 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 48))(v26, v25);
          v25 += 2;
          v27 -= 2;
        }
        while (v27);
      }
      break;
    case 7:
      uint64_t result = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v29 = v28;
        uint64_t v30 = a2[1];
        uint64_t v31 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v30 + 56))(v30, v29);
          v29 += 4;
          v31 -= 4;
        }
        while (v31);
      }
      break;
    case 8:
      uint64_t result = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v33 = v32;
        uint64_t v34 = a2[1];
        uint64_t v35 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v34 + 72))(v34, v33);
          v33 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      break;
    case 11:
      uint64_t result = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v37 = v36;
        uint64_t v38 = a2[1];
        uint64_t v39 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v38 + 128))(v38, v37);
          v37 += 4;
          v39 -= 4;
        }
        while (v39);
      }
      break;
    case 12:
      uint64_t result = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v41 = v40;
        uint64_t v42 = a2[1];
        uint64_t v43 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 136))(v42, v41);
          v41 += 8;
          v43 -= 8;
        }
        while (v43);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

void sub_215A5475C(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A54E10(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  uint64_t v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A57ADC(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A591CC(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    uint64_t v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A5B510(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A5CCBC(&v10, v8);
      }
      else {
        sub_215A54928(&v9, (void **)a1);
      }
    }
  }
}

uint64_t *sub_215A54928(uint64_t *a1, void **a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)&v29, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v29);
        if (!v44) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(unsigned char *)(v3 + 64) = 0;
    if (v33)
    {
      uint64_t v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(void *)(v3 + 56) = v8;
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v35;
    long long v10 = v34;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v38)
    {
      uint64_t v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(void *)(v3 + 112) = v11;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v41)
    {
      uint64_t v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(void *)(v3 + 144) = v12;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(void *)(v3 + 176) = v43;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v42;
    if (!(void)v42) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v42 + 1);
    uint64_t v16 = (void *)v42;
    if (*((void *)&v42 + 1) == (void)v42) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v42;
LABEL_45:
    *((void *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)&v29, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(unsigned char *)(v3 + 64) = 0;
    if (v33)
    {
      uint64_t v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(void *)(v3 + 56) = v17;
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v35;
    long long v19 = v34;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v38)
    {
      uint64_t v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(void *)(v3 + 112) = v20;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v41)
    {
      uint64_t v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(void *)(v3 + 144) = v21;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(void *)(v3 + 176) = v43;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v29);
  if (v44)
  {
LABEL_38:
    uint64_t v14 = v42;
    if (!(void)v42) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v42 + 1);
    uint64_t v16 = (void *)v42;
    if (*((void *)&v42 + 1) == (void)v42) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v33 && SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  sub_2157C6F18((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  uint64_t v24 = (void (**)(void **, unsigned int *))*a2;
  v28[0] = (uint64_t)a2[1];
  int v25 = v28[0];
  unsigned int v29 = 6;
  v24[13](a2, &v29);
  if (v25 < 1)
  {
    if (v29 < 3) {
      sub_2159B6FFC((uint64_t)&v29, a2, v4, v29);
    }
    else {
      sub_2159B71F0(a2, v4, v29);
    }
  }
  else
  {
    sub_2159B6970((int *)v28, a2, v4, v29);
  }
  return sub_215A5E8C8((uint64_t *)a2, (unsigned char *)(v3 + 200));
}

void sub_215A54DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A54E10(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A55310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A55358(uint64_t a1, uint64_t a2)
{
  sub_215DF07E4(a2);
  int v5 = 1;
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_215DF1DC8((void *)a2, &v5);
  int v4 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "value_type";
  *(void *)(a2 + 96) = 10;
  if (!v4) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_2159D177C((void *)a2);
}

void sub_215A554B4(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_215A55634(v3);
      break;
    case 1:
      sub_215A558CC(v3);
      break;
    case 2:
      sub_215A55B70(v3);
      break;
    case 3:
      sub_215A55E18(v3);
      break;
    case 5:
      sub_215A56130(v3);
      break;
    case 6:
      sub_215A563C8(v3);
      break;
    case 7:
      sub_215A5666C(v3);
      break;
    case 8:
      sub_215A56914(v3);
      break;
    case 11:
      sub_215A56C2C(v3);
      break;
    case 12:
      sub_215A56EC0(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A55634(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157C3CEC();
    }
    int v4 = (char *)operator new(4 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, 4 * v2);
    long long v19 = v5;
  }
  if (v2)
  {
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 2;
    do
    {
      sub_215DF07E4((uint64_t)v6);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v8 = (void *)a1[1], *(void *)&v21 = 2, *((void *)&v21 + 1) = (char *)__p + v7 - 2, v9 = sub_215DF0AA0(v8), ++v8[14], sub_215DF0BCC(v9, (uint64_t)&v21), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v10 = (void *)a1[1];
      *(void *)&long long v21 = 2;
      *((void *)&v21 + 1) = (char *)__p + v7;
      unint64_t v11 = sub_215DF0AA0(v10);
      ++v10[14];
      sub_215DF0BCC(v11, (uint64_t)&v21);
      uint64_t v6 = (void *)a1[1];
      uint64_t v12 = v6[6];
      v6[4] = *(void *)(v12 - 8);
      uint64_t v13 = v6[9];
      v6[14] = *(void *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_215A57154(&v21, (uint64_t)&__p);
  uint64_t v14 = *a1;
  long long v15 = v21;
  long long v21 = 0uLL;
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_OWORD *)(v14 + 16) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A558A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A558CC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v17 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    uint64_t v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 4;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (int v5 = (void *)a1[1], *(void *)&v18 = 2, *((void *)&v18 + 1) = (char *)__p + v4 - 4, v6 = sub_215DF0AA0(v5), ++v5[14], sub_215DF2178(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 2;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF2178(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_215A57248(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_215A55B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A55B70(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v17 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    uint64_t v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 8;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (int v5 = (void *)a1[1], *(void *)&v18 = 2, *((void *)&v18 + 1) = (char *)__p + v4 - 8, v6 = sub_215DF0AA0(v5), ++v5[14], sub_215DF2328(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 2;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF2328(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_215A5733C(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_215A55DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A55E18(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  long long v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(32 * v2);
    long long v21 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    uint64_t v20 = v21;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)a1[1];
    do
    {
      sub_215DF07E4((uint64_t)v4);
      uint64_t v7 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_28;
      }
      unint64_t v8 = (void *)a1[1];
      unint64_t v9 = sub_215DF0AA0(v8);
      ++v8[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF4844(v9, (uint64_t)&v22);
      uint64_t v10 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v7[v3], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v10 = (void *)v22;
      }
      if (v10)
      {
        *((void *)&v22 + 1) = v10;
        operator delete(v10);
      }
      uint64_t v11 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
LABEL_28:
        abort();
      }
      long long v12 = (void *)a1[1];
      unint64_t v13 = sub_215DF0AA0(v12);
      ++v12[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF4844(v13, (uint64_t)&v22);
      uint64_t v14 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v11[v3 + 16], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v14 = (void *)v22;
      }
      if (v14)
      {
        *((void *)&v22 + 1) = v14;
        operator delete(v14);
      }
      uint64_t v4 = (void *)a1[1];
      uint64_t v5 = v4[6];
      v4[4] = *(void *)(v5 - 8);
      uint64_t v6 = v4[9];
      v4[14] = *(void *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_215A57430(&v22, (uint64_t)&__p);
  uint64_t v15 = *a1;
  long long v16 = v22;
  long long v22 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
  *(_OWORD *)(v15 + 16) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_215A560E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A56130(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(4 * v2);
    uint64_t v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, 4 * v2);
    long long v19 = v5;
  }
  if (v2)
  {
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 2;
    do
    {
      sub_215DF07E4((uint64_t)v6);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (unint64_t v8 = (void *)a1[1], *(void *)&v21 = 2, *((void *)&v21 + 1) = (char *)__p + v7 - 2, v9 = sub_215DF0AA0(v8), ++v8[14], sub_215DF1F38(v9, (uint64_t)&v21), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v10 = (void *)a1[1];
      *(void *)&long long v21 = 2;
      *((void *)&v21 + 1) = (char *)__p + v7;
      unint64_t v11 = sub_215DF0AA0(v10);
      ++v10[14];
      sub_215DF1F38(v11, (uint64_t)&v21);
      uint64_t v6 = (void *)a1[1];
      uint64_t v12 = v6[6];
      v6[4] = *(void *)(v12 - 8);
      uint64_t v13 = v6[9];
      v6[14] = *(void *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_215A57524(&v21, (uint64_t)&__p);
  uint64_t v14 = *a1;
  long long v15 = v21;
  long long v21 = 0uLL;
  long long v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_OWORD *)(v14 + 16) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A5639C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A563C8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v17 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 4;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v5 = (void *)a1[1], *(void *)&v18 = 2, *((void *)&v18 + 1) = (char *)__p + v4 - 4, v6 = sub_215DF0AA0(v5), ++v5[14], sub_215DF2058(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 2;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF2058(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_215A57618(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A56640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5666C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v17 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 8;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v5 = (void *)a1[1], *(void *)&v18 = 2, *((void *)&v18 + 1) = (char *)__p + v4 - 8, v6 = sub_215DF0AA0(v5), ++v5[14], sub_215DF2250(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 2;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF2250(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_215A5770C(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A568E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A56914(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  long long v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(32 * v2);
    long long v21 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    uint64_t v20 = v21;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)a1[1];
    do
    {
      sub_215DF07E4((uint64_t)v4);
      uint64_t v7 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_28;
      }
      unint64_t v8 = (void *)a1[1];
      unint64_t v9 = sub_215DF0AA0(v8);
      ++v8[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF45EC(v9, (uint64_t)&v22);
      uint64_t v10 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v7[v3], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v10 = (void *)v22;
      }
      if (v10)
      {
        *((void *)&v22 + 1) = v10;
        operator delete(v10);
      }
      uint64_t v11 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
LABEL_28:
        abort();
      }
      long long v12 = (void *)a1[1];
      unint64_t v13 = sub_215DF0AA0(v12);
      ++v12[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF45EC(v13, (uint64_t)&v22);
      uint64_t v14 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v11[v3 + 16], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v14 = (void *)v22;
      }
      if (v14)
      {
        *((void *)&v22 + 1) = v14;
        operator delete(v14);
      }
      uint64_t v4 = (void *)a1[1];
      uint64_t v5 = v4[6];
      v4[4] = *(void *)(v5 - 8);
      uint64_t v6 = v4[9];
      v4[14] = *(void *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_215A57800(&v22, (uint64_t)&__p);
  uint64_t v15 = *a1;
  long long v16 = v22;
  long long v22 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
  *(_OWORD *)(v15 + 16) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_215A56BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A56C2C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v20 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v19 = v20;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 8;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      uint64_t v5 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (v6 = (void *)a1[1], unint64_t v7 = sub_215DF0AA0(v6), ++v6[14], sub_215DF262C(v7, (float *)&v5[v4 - 8]), (v8 = (char *)__p) == 0)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v9 = (void *)a1[1];
      unint64_t v10 = sub_215DF0AA0(v9);
      ++v9[14];
      sub_215DF262C(v10, (float *)&v8[v4]);
      uint64_t v3 = (void *)a1[1];
      uint64_t v11 = v3[6];
      v3[4] = *(void *)(v11 - 8);
      uint64_t v12 = v3[9];
      v3[14] = *(void *)(v12 - 8);
      v3[6] = v11 - 8;
      _DWORD v3[9] = v12 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_215A578F4(&v17, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v17;
  long long v17 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A56E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A56EC0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(32 * v2);
    uint64_t v20 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    long long v19 = v20;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 16;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      uint64_t v5 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (v6 = (void *)a1[1], unint64_t v7 = sub_215DF0AA0(v6), ++v6[14], sub_215DF2748(v7, (double *)&v5[v4 - 16]), (v8 = (char *)__p) == 0)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v9 = (void *)a1[1];
      unint64_t v10 = sub_215DF0AA0(v9);
      ++v9[14];
      sub_215DF2748(v10, (double *)&v8[v4]);
      uint64_t v3 = (void *)a1[1];
      uint64_t v11 = v3[6];
      v3[4] = *(void *)(v11 - 8);
      uint64_t v12 = v3[9];
      v3[14] = *(void *)(v12 - 8);
      v3[6] = v11 - 8;
      _DWORD v3[9] = v12 - 8;
      v4 += 32;
      --v2;
    }
    while (v2);
  }
  sub_215A579E8(&v17, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v17;
  long long v17 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A57128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A57154(_OWORD *a1, uint64_t a2)
{
  sub_215D1429C(&v6, 0, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A571F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A57248(_OWORD *a1, uint64_t a2)
{
  sub_215D14650(&v6, 1, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A572E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A5733C(_OWORD *a1, uint64_t a2)
{
  sub_215D14A08(&v6, 2, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A573DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A57430(_OWORD *a1, uint64_t a2)
{
  sub_215D14DC0(&v6, 3, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A574D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A57524(_OWORD *a1, uint64_t a2)
{
  sub_215D140C4(&v6, 5, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A575C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A57618(_OWORD *a1, uint64_t a2)
{
  sub_215D14474(&v6, 6, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A576B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A5770C(_OWORD *a1, uint64_t a2)
{
  sub_215D1482C(&v6, 7, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A577AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A57800(_OWORD *a1, uint64_t a2)
{
  sub_215D14BE4(&v6, 8, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A578A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A578F4(_OWORD *a1, uint64_t a2)
{
  sub_215D14F9C(&v6, 11, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A57994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A579E8(_OWORD *a1, uint64_t a2)
{
  sub_215D15178(&v6, 12, a2);
  long long v5 = v6;
  sub_215D0E078((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A57A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A57ADC(uint64_t *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v26);
    sub_2159A3DA4((uint64_t)v27, v26);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v27);
        if (!v42) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v25, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v8;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v33;
    long long v10 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v11;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v12;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v40 + 1);
    long long v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    long long v16 = (void *)v40;
LABEL_45:
    *((void *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v26);
  sub_2159A3DA4((uint64_t)v27, v26);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v25, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v17;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v33;
    long long v19 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v20;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v21;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v40 + 1);
    long long v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (v36 && SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (v31 && SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  sub_2157C6F18((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 1;
  sub_215DFF824(a2[6], v26);
  return sub_215A57F6C((uint64_t)v26, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_215A57F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A57F6C(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  int v5 = a2 + 2;
  sub_2159B0060(a2 + 2);
  LOBYTE(v10[0]) = 0;
  sub_215DFF4BC(a2[6], v10);
  *a3 = v10[0];
  sub_215DFFC24(a2[6], (void *)a3 + 1);
  long long v11 = xmmword_26425A6E8;
  int v6 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_215A58068(v6, v10);
  uint64_t v7 = a2[4];
  uint64_t result = (*(uint64_t (**)(void *))(a2[2] + 32))(v5);
  uint64_t v9 = *(void *)(v7 - 16) - result + *(void *)(v7 - 8);
  if (v9) {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v5 + 40))(v5, v9);
  }
  a2[4] -= 16;
  return result;
}

void sub_215A58068(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A58144(a2);
      break;
    case 1:
      sub_215A582DC(a2);
      break;
    case 2:
      sub_215A58484(a2);
      break;
    case 3:
      sub_215A58630(a2);
      break;
    case 5:
      sub_215A587DC(a2);
      break;
    case 6:
      sub_215A58974(a2);
      break;
    case 7:
      sub_215A58B1C(a2);
      break;
    case 8:
      sub_215A58CC8(a2);
      break;
    case 11:
      sub_215A58E74(a2);
      break;
    case 12:
      sub_215A59020(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A58144(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 4 * v2;
  int v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = operator new(4 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    int v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF4BC(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_215A57154(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
}

void sub_215A582B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A582DC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF670(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A57248(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A58460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A58484(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF824(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A5733C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5860C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A58630(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 32 * v2;
    size_t v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFC24(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A57430(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A587B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A587DC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 4 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(4 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF408(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_215A57524(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A58950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A58974(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF5BC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A57618(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A58AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A58B1C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF770(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A5770C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A58CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A58CC8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 32 * v2;
    size_t v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFB20(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A57800(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A58E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A58E74(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFFD1C(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A578F4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A58FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A59020(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 32 * v2;
    size_t v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFE68(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A579E8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A591A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A591CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    long long v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    long long v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  long long v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A596CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A59714(uint64_t a1, uint64_t a2)
{
  sub_215DF01A0(a2);
  int v5 = 1;
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_215DF0F9C((void *)a2, &v5);
  int v4 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "value_type";
  *(void *)(a2 + 96) = 10;
  if (!v4) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_2159D2DC4((void *)a2);
}

void sub_215A59870(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_215A599F0(v3);
      break;
    case 1:
      sub_215A59C88(v3);
      break;
    case 2:
      sub_215A59F2C(v3);
      break;
    case 3:
      sub_215A5A1D4(v3);
      break;
    case 5:
      sub_215A5A4EC(v3);
      break;
    case 6:
      sub_215A5A784(v3);
      break;
    case 7:
      sub_215A5AA28(v3);
      break;
    case 8:
      sub_215A5ACD0(v3);
      break;
    case 11:
      sub_215A5AFE8(v3);
      break;
    case 12:
      sub_215A5B27C(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A599F0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157C3CEC();
    }
    int v4 = (char *)operator new(4 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, 4 * v2);
    long long v19 = v5;
  }
  if (v2)
  {
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 2;
    do
    {
      sub_215DF01A0((uint64_t)v6);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v8 = (void *)a1[1], *(void *)&v21 = 2, *((void *)&v21 + 1) = (char *)__p + v7 - 2, v9 = sub_215DF045C(v8), ++v8[14], sub_215DF0588(v9, (uint64_t)&v21), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v10 = (void *)a1[1];
      *(void *)&long long v21 = 2;
      *((void *)&v21 + 1) = (char *)__p + v7;
      unint64_t v11 = sub_215DF045C(v10);
      ++v10[14];
      sub_215DF0588(v11, (uint64_t)&v21);
      uint64_t v6 = (void *)a1[1];
      uint64_t v12 = v6[6];
      v6[4] = *(void *)(v12 - 8);
      uint64_t v13 = v6[9];
      v6[14] = *(void *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_215A57154(&v21, (uint64_t)&__p);
  uint64_t v14 = *a1;
  long long v15 = v21;
  long long v21 = 0uLL;
  long long v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_OWORD *)(v14 + 16) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A59C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A59C88(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v17 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 4;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (int v5 = (void *)a1[1], *(void *)&v18 = 2, *((void *)&v18 + 1) = (char *)__p + v4 - 4, v6 = sub_215DF045C(v5), ++v5[14], sub_215DF1274(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 2;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1274(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_215A57248(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A59F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A59F2C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v17 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 8;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (int v5 = (void *)a1[1], *(void *)&v18 = 2, *((void *)&v18 + 1) = (char *)__p + v4 - 8, v6 = sub_215DF045C(v5), ++v5[14], sub_215DF1424(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 2;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1424(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_215A5733C(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A5A1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5A1D4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  long long v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(32 * v2);
    long long v21 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    uint64_t v20 = v21;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)a1[1];
    do
    {
      sub_215DF01A0((uint64_t)v4);
      uint64_t v7 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_28;
      }
      unint64_t v8 = (void *)a1[1];
      unint64_t v9 = sub_215DF045C(v8);
      ++v8[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF331C(v9, (uint64_t)&v22);
      uint64_t v10 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v7[v3], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v10 = (void *)v22;
      }
      if (v10)
      {
        *((void *)&v22 + 1) = v10;
        operator delete(v10);
      }
      uint64_t v11 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
LABEL_28:
        abort();
      }
      long long v12 = (void *)a1[1];
      unint64_t v13 = sub_215DF045C(v12);
      ++v12[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF331C(v13, (uint64_t)&v22);
      uint64_t v14 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v11[v3 + 16], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v14 = (void *)v22;
      }
      if (v14)
      {
        *((void *)&v22 + 1) = v14;
        operator delete(v14);
      }
      uint64_t v4 = (void *)a1[1];
      uint64_t v5 = v4[6];
      v4[4] = *(void *)(v5 - 8);
      uint64_t v6 = v4[9];
      v4[14] = *(void *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_215A57430(&v22, (uint64_t)&__p);
  uint64_t v15 = *a1;
  long long v16 = v22;
  long long v22 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
  *(_OWORD *)(v15 + 16) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_215A5A4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5A4EC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(4 * v2);
    uint64_t v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, 4 * v2);
    long long v19 = v5;
  }
  if (v2)
  {
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 2;
    do
    {
      sub_215DF01A0((uint64_t)v6);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (unint64_t v8 = (void *)a1[1], *(void *)&v21 = 2, *((void *)&v21 + 1) = (char *)__p + v7 - 2, v9 = sub_215DF045C(v8), ++v8[14], sub_215DF1034(v9, (uint64_t)&v21), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v10 = (void *)a1[1];
      *(void *)&long long v21 = 2;
      *((void *)&v21 + 1) = (char *)__p + v7;
      unint64_t v11 = sub_215DF045C(v10);
      ++v10[14];
      sub_215DF1034(v11, (uint64_t)&v21);
      uint64_t v6 = (void *)a1[1];
      uint64_t v12 = v6[6];
      v6[4] = *(void *)(v12 - 8);
      uint64_t v13 = v6[9];
      v6[14] = *(void *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 4;
      --v2;
    }
    while (v2);
  }
  sub_215A57524(&v21, (uint64_t)&__p);
  uint64_t v14 = *a1;
  long long v15 = v21;
  long long v21 = 0uLL;
  long long v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_OWORD *)(v14 + 16) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A5A758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5A784(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (4 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v17 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 4;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v5 = (void *)a1[1], *(void *)&v18 = 2, *((void *)&v18 + 1) = (char *)__p + v4 - 4, v6 = sub_215DF045C(v5), ++v5[14], sub_215DF1154(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 2;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1154(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  sub_215A57618(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A5A9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5AA28(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v17 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 8;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v5 = (void *)a1[1], *(void *)&v18 = 2, *((void *)&v18 + 1) = (char *)__p + v4 - 8, v6 = sub_215DF045C(v5), ++v5[14], sub_215DF134C(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 2;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF134C(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_215A5770C(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A5ACA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5ACD0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  long long v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(32 * v2);
    long long v21 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    uint64_t v20 = v21;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)a1[1];
    do
    {
      sub_215DF01A0((uint64_t)v4);
      uint64_t v7 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_28;
      }
      unint64_t v8 = (void *)a1[1];
      unint64_t v9 = sub_215DF045C(v8);
      ++v8[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF2D20(v9, (uint64_t)&v22);
      uint64_t v10 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v7[v3], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v10 = (void *)v22;
      }
      if (v10)
      {
        *((void *)&v22 + 1) = v10;
        operator delete(v10);
      }
      uint64_t v11 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
LABEL_28:
        abort();
      }
      long long v12 = (void *)a1[1];
      unint64_t v13 = sub_215DF045C(v12);
      ++v12[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF2D20(v13, (uint64_t)&v22);
      uint64_t v14 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v11[v3 + 16], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v14 = (void *)v22;
      }
      if (v14)
      {
        *((void *)&v22 + 1) = v14;
        operator delete(v14);
      }
      uint64_t v4 = (void *)a1[1];
      uint64_t v5 = v4[6];
      v4[4] = *(void *)(v5 - 8);
      uint64_t v6 = v4[9];
      v4[14] = *(void *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  sub_215A57800(&v22, (uint64_t)&__p);
  uint64_t v15 = *a1;
  long long v16 = v22;
  long long v22 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
  *(_OWORD *)(v15 + 16) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_215A5AFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5AFE8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v20 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v19 = v20;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 8;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      uint64_t v5 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (v6 = (void *)a1[1], unint64_t v7 = sub_215DF045C(v6), ++v6[14], sub_215DF1750(v7, (float *)&v5[v4 - 8]), (v8 = (char *)__p) == 0)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v9 = (void *)a1[1];
      unint64_t v10 = sub_215DF045C(v9);
      ++v9[14];
      sub_215DF1750(v10, (float *)&v8[v4]);
      uint64_t v3 = (void *)a1[1];
      uint64_t v11 = v3[6];
      v3[4] = *(void *)(v11 - 8);
      uint64_t v12 = v3[9];
      v3[14] = *(void *)(v12 - 8);
      v3[6] = v11 - 8;
      _DWORD v3[9] = v12 - 8;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  sub_215A578F4(&v17, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v17;
  long long v17 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A5B250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5B27C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((unint64_t)(4 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(32 * v2);
    uint64_t v20 = (char *)__p + 32 * v2;
    bzero(__p, 32 * v2);
    long long v19 = v20;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 16;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      uint64_t v5 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (v6 = (void *)a1[1], unint64_t v7 = sub_215DF045C(v6), ++v6[14], sub_215DF1894(v7, (double *)&v5[v4 - 16]), (v8 = (char *)__p) == 0)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v9 = (void *)a1[1];
      unint64_t v10 = sub_215DF045C(v9);
      ++v9[14];
      sub_215DF1894(v10, (double *)&v8[v4]);
      uint64_t v3 = (void *)a1[1];
      uint64_t v11 = v3[6];
      v3[4] = *(void *)(v11 - 8);
      uint64_t v12 = v3[9];
      v3[14] = *(void *)(v12 - 8);
      v3[6] = v11 - 8;
      _DWORD v3[9] = v12 - 8;
      v4 += 32;
      --v2;
    }
    while (v2);
  }
  sub_215A579E8(&v17, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v17;
  long long v17 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A5B4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5B510(uint64_t *a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)&__p);
    sub_2159A3DA4((uint64_t)v35, (uint64_t *)&__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v35);
        if (!v49) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v31, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(unsigned char *)(v3 + 64) = 0;
    if (v38)
    {
      uint64_t v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(void *)(v3 + 56) = v8;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v40;
    long long v10 = v39;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v43)
    {
      uint64_t v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(void *)(v3 + 112) = v11;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v46)
    {
      uint64_t v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(void *)(v3 + 144) = v12;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(void *)(v3 + 176) = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v47;
    if (!(void)v47) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v47 + 1);
    long long v16 = (void *)v47;
    if (*((void *)&v47 + 1) == (void)v47) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    long long v16 = (void *)v47;
LABEL_45:
    *((void *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)&__p);
  sub_2159A3DA4((uint64_t)v35, (uint64_t *)&__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v31, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(unsigned char *)(v3 + 64) = 0;
    if (v38)
    {
      uint64_t v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(void *)(v3 + 56) = v17;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v40;
    long long v19 = v39;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v43)
    {
      uint64_t v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(void *)(v3 + 112) = v20;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v46)
    {
      uint64_t v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(void *)(v3 + 144) = v21;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(void *)(v3 + 176) = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v35);
  if (v49)
  {
LABEL_38:
    uint64_t v14 = v47;
    if (!(void)v47) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v47 + 1);
    long long v16 = (void *)v47;
    if (*((void *)&v47 + 1) == (void)v47) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  sub_2157C6F18((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p) = 6;
  sub_215DFABD4(a2, &__p);
  unsigned int v24 = __p;
  if (__p >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p;
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)&__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          char v30 = 0;
          if (SHIBYTE(v34) < 0) {
            goto LABEL_95;
          }
          goto LABEL_81;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      char v30 = 1;
      if (SHIBYTE(v34) < 0) {
LABEL_95:
      }
        operator delete(__p);
LABEL_81:
      if (*(unsigned char *)(a2 + 131)) {
        char v29 = 0;
      }
      else {
        char v29 = v30;
      }
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_215DFABD4(a2, &__p);
  LOBYTE(__p) = 0;
  sub_215DFA01C(a2, &__p);
  *(unsigned char *)(v3 + 200) = (_BYTE)__p;
  sub_215DFB854(a2, (void *)(v3 + 208));
  *(_OWORD *)long long v35 = xmmword_26425A6E8;
  int v26 = *(unsigned __int8 *)(v3 + 200);
  std::string __p = (void *)(v3 + 200);
  uint64_t v33 = a2;
  char v34 = v35;
  sub_215A5BB80(v26, &__p);
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          char v28 = 0;
          if (SHIBYTE(v34) < 0) {
            goto LABEL_80;
          }
          goto LABEL_66;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      char v28 = 1;
      if (SHIBYTE(v34) < 0) {
LABEL_80:
      }
        operator delete(__p);
LABEL_66:
      if (*(unsigned char *)(a2 + 131)) {
        char v27 = 0;
      }
      else {
        char v27 = v28;
      }
    }
    while ((v27 & 1) != 0);
  }
}

void sub_215A5BB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5BB80(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A5BC5C(a2);
      break;
    case 1:
      sub_215A5BDF0(a2);
      break;
    case 2:
      sub_215A5BF94(a2);
      break;
    case 3:
      sub_215A5C13C(a2);
      break;
    case 5:
      sub_215A5C2E4(a2);
      break;
    case 6:
      sub_215A5C478(a2);
      break;
    case 7:
      sub_215A5C61C(a2);
      break;
    case 8:
      sub_215A5C7C4(a2);
      break;
    case 11:
      sub_215A5C96C(a2);
      break;
    case 12:
      sub_215A5CB14(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A5BC5C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 4 * v2;
  int v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = operator new(4 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    int v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DFA01C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_215A57154(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
}

void sub_215A5BDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5BDF0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA594(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A57248(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5BF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5BF94(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFABD4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A5733C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5C118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5C13C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 32 * v2;
    size_t v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB854(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A57430(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5C2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5C2E4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 4 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(4 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DF9DC4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_215A57524(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A5C454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5C478(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA274(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A57618(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5C5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5C61C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFA8B4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A5770C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5C7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5C7C4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 32 * v2;
    size_t v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB534(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A57800(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5C948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5C96C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFBEC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A578F4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5CAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5CB14(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 32 * v2;
    size_t v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFC1E8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A579E8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5CC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5CCBC(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    long long v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    long long v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    long long v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v25, a2, v4);
  sub_215A5D134((uint64_t)v25, a2, v3 + 200);
}

void sub_215A5D0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5D134(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[6] = v3 + 4;
  sub_215D02644(a2);
  sub_215A5D210(a2, a3);
  uint64_t v9 = a2[12];
  uint64_t v10 = a2[9];
  a2[6] = *(void *)(v9 - 8) + *(void *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_215A5D1FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A5D210(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  if (v3 <= v2) {
    goto LABEL_6;
  }
  uint64_t v4 = a1[3];
  int v5 = *(unsigned __int8 *)(v4 + v2);
  unint64_t v6 = v2 + 1;
  a1[6] = v6;
  *(unsigned char *)a2 = v5;
  BOOL v7 = v3 >= v6;
  unint64_t v8 = v3 - v6;
  if (!v7) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 8) = *(void *)(v4 + v6);
  a1[6] += 8;
  long long v11 = xmmword_26425A6E8;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_215A5D31C(v5, v10);
}

void sub_215A5D2F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A5D308(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A5D31C(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A5D3F8(a2);
      break;
    case 1:
      sub_215A5D604(a2);
      break;
    case 2:
      sub_215A5D818(a2);
      break;
    case 3:
      sub_215A5DA30(a2);
      break;
    case 5:
      sub_215A5DC48(a2);
      break;
    case 6:
      sub_215A5DE54(a2);
      break;
    case 7:
      sub_215A5E068(a2);
      break;
    case 8:
      sub_215A5E280(a2);
      break;
    case 11:
      sub_215A5E498(a2);
      break;
    case 12:
      sub_215A5E6B0(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A5D3F8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 4 * v2;
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(4 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    long long v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    uint64_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_215A57154(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    long long v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5D5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5D604(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 8 * v2;
    int v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[2 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A57248(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5D7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5D818(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 16 * v2;
    int v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A5733C(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5D9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5DA30(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 32 * v2;
    int v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A57430(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5DC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5DC48(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 4 * v2;
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v4 = (char *)operator new(4 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    long long v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    size_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  size_t v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_215A57524(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  long long v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    long long v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5DE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5DE54(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 8 * v2;
    int v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[2 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A57618(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5E034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5E068(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 16 * v2;
    int v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A5770C(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5E24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5E280(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 32 * v2;
    int v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A57800(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5E464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5E498(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 16 * v2;
    int v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A578F4(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5E67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5E6B0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 32 * v2;
    int v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A579E8(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5E894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_215A5E8C8(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v7 = a1[1];
  LODWORD(v8[0]) = 1;
  (*(void (**)(uint64_t *, unsigned char **))(v4 + 104))(a1, v8);
  if ((int)v7 < 1)
  {
    v8[0] = a2;
    sub_2159D5570(a1, v8);
    (*(void (**)(uint64_t *, unsigned char *))(*a1 + 120))(a1, a2 + 8);
    long long v9 = xmmword_26425A6E8;
    int v6 = *a2;
    v8[0] = a2;
    v8[1] = a1;
    void v8[2] = &v9;
    sub_215A5EF24(v6, v8);
  }
  else
  {
    sub_215A5E9CC((int *)&v7, a1, a2);
  }
  return a1;
}

void sub_215A5E9CC(int *a1, unsigned char *a2, unsigned char *a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v10[0]) = 1;
    (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, v10);
    if (LODWORD(v10[0]) >= 2)
    {
      unsigned int v8 = v10[0];
      long long v9 = sub_215A5EB30();
      sub_215E07C10((std::string *)v9, v8, 1u);
    }
    int v5 = *a1;
  }
  if (v5 > 0) {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
  }
  v10[0] = a3;
  sub_2159D5570(a2, v10);
  (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 120))(a2, a3 + 8);
  long long v11 = xmmword_26425A6E8;
  int v7 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_215A5EF24(v7, v10);
  if (v5 >= 1) {
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

long long *sub_215A5EB30()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889A80, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889A80))
  {
    return &xmmword_267889A68;
  }
  uint64_t v1 = sub_215A5EC18();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889A68, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889A78 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889A68 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889A68, &dword_21572C000);
  __cxa_guard_release(&qword_267889A80);
  return &xmmword_267889A68;
}

void sub_215A5EC00(_Unwind_Exception *a1)
{
}

std::string *sub_215A5EC18()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889AA0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889AA0))
  {
    return &stru_267889A88;
  }
  sub_215A5ED14((uint64_t)__p);
  sub_2157E7638(__p, &stru_267889A88);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889A88, &dword_21572C000);
  __cxa_guard_release(&qword_267889AA0);
  return &stru_267889A88;
}

void sub_215A5ECD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889AA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889AA0);
  _Unwind_Resume(a1);
}

void sub_215A5ED14(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889AC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889AC0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::LinesSample<2>]", qword_267889AA8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889AA8, &dword_21572C000);
    __cxa_guard_release(&qword_267889AC0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889AE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889AE0))
  {
    size_t v3 = sub_215747D98(qword_267889AA8, "<", 0);
    sub_215747C90(qword_267889AA8, 0, v3, qword_267889AC8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889AC8, &dword_21572C000);
    __cxa_guard_release(&qword_267889AE0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889B00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889B00))
  {
    sub_215E19DF4((uint64_t)qword_267889AC8, (uint64_t)&xmmword_267889AE8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889AE8, &dword_21572C000);
    __cxa_guard_release(&qword_267889B00);
  }
  if (byte_267889AFF < 0)
  {
    long long v2 = xmmword_267889AE8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889AE8;
    *(void *)(a1 + 16) = unk_267889AF8;
  }
}

void sub_215A5EEDC(_Unwind_Exception *a1)
{
}

void sub_215A5EEF4(_Unwind_Exception *a1)
{
}

void sub_215A5EF0C(_Unwind_Exception *a1)
{
}

void sub_215A5EF24(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A5F000(a2);
      break;
    case 1:
      sub_215A5F198(a2);
      break;
    case 2:
      sub_215A5F344(a2);
      break;
    case 3:
      sub_215A5F4F4(a2);
      break;
    case 5:
      sub_215A5F6A4(a2);
      break;
    case 6:
      sub_215A5F83C(a2);
      break;
    case 7:
      sub_215A5F9E8(a2);
      break;
    case 8:
      sub_215A5FB98(a2);
      break;
    case 11:
      sub_215A5FD48(a2);
      break;
    case 12:
      sub_215A5FEF8(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A5F000(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 4 * v2;
  size_t v12 = 0;
  uint64_t v13 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(4 * v2);
    std::string __p = v4;
    uint64_t v13 = &v4[v3];
    bzero(v4, v3);
    size_t v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_215A57154(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  unsigned int v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    size_t v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5F174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5F198(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    uint64_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A57248(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5F320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5F344(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    uint64_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A5733C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5F4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5F4F4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 32 * v2;
    uint64_t v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A57430(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5F680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5F6A4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 4 * v2;
  size_t v12 = 0;
  long long v13 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = (char *)operator new(4 * v2);
    std::string __p = v4;
    long long v13 = &v4[v3];
    bzero(v4, v3);
    size_t v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_215A57524(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    size_t v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5F818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5F83C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    uint64_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A57618(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5F9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5F9E8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    uint64_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A5770C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5FB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5FB98(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 32 * v2;
    uint64_t v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A57800(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5FD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5FD48(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    uint64_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A578F4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A5FED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A5FEF8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 4 * v2;
  uint64_t v15 = 0;
  long long v16 = 0;
  std::string __p = 0;
  if (4 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 32 * v2;
    uint64_t v5 = (char *)operator new(32 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A579E8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A60084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A600A8()
{
}

void sub_215A60284(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

BOOL sub_215A602B8(uint64_t a1, uint64_t a2)
{
  v36[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v31);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v31);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v31);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v25);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v25);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v25);
  }
  long long v18 = v31;
  long long v19 = &v32;
  uint64_t v20 = &v33;
  uint64_t v21 = &v34;
  int v22 = &v35;
  uint64_t v23 = v36;
  v16[0] = v25;
  v16[1] = &v26;
  void v16[2] = &v27;
  v16[3] = &v28;
  float32x2_t v16[4] = &v29;
  long long v17 = &v30;
  if (!sub_215AF0A90((uint64_t)&v24, &v18, v16)) {
    goto LABEL_26;
  }
  if (!*((unsigned char *)v23 + 24) || !*((unsigned char *)v17 + 24))
  {
    if ((*((unsigned char *)v23 + 24) != 0) == (*((unsigned char *)v17 + 24) != 0)) {
      goto LABEL_22;
    }
LABEL_26:
    BOOL v14 = 0;
    goto LABEL_27;
  }
  uint64_t v8 = (unsigned __int8 *)*v23;
  uint64_t v9 = (unsigned __int8 *)v23[1];
  long long v10 = (unsigned __int8 *)*v17;
  if (&v9[-*v23] != (unsigned __int8 *)(v17[1] - *v17)) {
    goto LABEL_26;
  }
  if (v8 != v9)
  {
    while (sub_215AEF77C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
    goto LABEL_26;
  }
  if (*(void *)(a1 + 208) != *(void *)(a2 + 208)) {
    goto LABEL_26;
  }
  long long v11 = *(unsigned __int8 **)(a1 + 216);
  int v12 = *v11;
  long long v13 = *(unsigned __int8 **)(a2 + 216);
  if (v12 != *v13) {
    goto LABEL_26;
  }
  long long v18 = v16;
  long long v19 = (uint64_t *)v11;
  uint64_t v20 = (uint64_t *)v13;
  BOOL v14 = sub_215D17264(v12, (uint64_t)&v18);
LABEL_27:
  sub_2157C6F18((uint64_t)v25);
  sub_2157C6F18((uint64_t)v31);
  return v14;
}

void sub_215A604E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A60500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A60514(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A60750((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A61E80(&v11, v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A62808((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A63F38(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A64704(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_215A64C7C((int *)&v11, a1, (long long *)(a2 + 200));
      }
    }
  }
}

void sub_215A60750(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A60A54(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  int v7 = &v4;
  sub_2159CC60C();
}

void sub_215A60C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215A60CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_215A60CC0(int a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      unint64_t result = sub_215A60E40(v4);
      break;
    case 1:
      unint64_t result = sub_215A60FE0(v4);
      break;
    case 2:
      unint64_t result = sub_215A61180(v4);
      break;
    case 3:
      unint64_t result = sub_215A61320(v4);
      break;
    case 5:
      unint64_t result = sub_215A614C0(v4);
      break;
    case 6:
      unint64_t result = sub_215A61660(v4);
      break;
    case 7:
      unint64_t result = sub_215A61800(v4);
      break;
    case 8:
      unint64_t result = sub_215A619A0(v4);
      break;
    case 11:
      unint64_t result = sub_215A61B40(v4);
      break;
    case 12:
      unint64_t result = sub_215A61CE0(v4);
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

uint64_t sub_215A60E40(void *a1)
{
  uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEC208(v6, &v12);
        uint64_t v7 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5 + 3;
        sub_215DEC208(v7, &v12);
        uint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 6;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEC208(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5 + 3;
        sub_215DEC208(v10, &v12);
        uint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 6;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A60FE0(void *a1)
{
  unint64_t result = sub_215D160E4((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEEA00(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 6;
        sub_215DEEA00(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 12;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEEA00(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 6;
        sub_215DEEA00(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 12;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A61180(void *a1)
{
  unint64_t result = sub_215D161EC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEEC78(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DEEC78(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEEC78(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DEEC78(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A61320(void *a1)
{
  unint64_t result = sub_215D162F4((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEF168(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DEF168(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEF168(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DEF168(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t sub_215A614C0(void *a1)
{
  uint64_t result = sub_215D15F58((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEE788(v6, &v12);
        uint64_t v7 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5 + 3;
        sub_215DEE788(v7, &v12);
        uint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 6;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEE788(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5 + 3;
        sub_215DEE788(v10, &v12);
        uint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 6;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A61660(void *a1)
{
  unint64_t result = sub_215D16060((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEE8C4(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 6;
        sub_215DEE8C4(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 12;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEE8C4(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 6;
        sub_215DEE8C4(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 12;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A61800(void *a1)
{
  unint64_t result = sub_215D16168((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEEB3C(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DEEB3C(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEEB3C(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DEEB3C(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A619A0(void *a1)
{
  unint64_t result = sub_215D16270((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEF02C(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DEF02C(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEF02C(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DEF02C(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A61B40(void *a1)
{
  unint64_t result = sub_215D16378((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEF750(v6, (float **)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DEF750(v7, (float **)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEF750(v9, (float **)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DEF750(v10, (float **)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A61CE0(void *a1)
{
  unint64_t result = sub_215D163FC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEC088(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEFB74(v6, &v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DEFB74(v7, &v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEC088(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEFB74(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DEFB74(v10, &v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

void sub_215A61E80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = a2[3];
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v20 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v20, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v7 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159CC838((uint64_t)a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = a2[3];
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v20 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v20, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v8 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159CC718((uint64_t)a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = a2[3];
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v20 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v20, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v6 + 8);
    }
    sub_215E0076C(a2[3]);
    sub_2159A6DFC((uint64_t)a2, v4, 6u);
  }
  uint64_t v9 = a2[3];
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = a2[3];
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v20 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v20, 1u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v14 + 8);
  }
  sub_215E0076C(a2[3]);
  sub_215A62104(a2, (long long *)(v3 + 200));
  uint64_t v15 = a2[3];
  uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
  sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
  size_t v17 = *(void *)(v15 + 48);
  if (v17) {
    memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  }
  *(void *)(v15 + 48) = 0;
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = *(void *)(v15 + 88) - 8;
  *(void *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(unsigned char *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(unsigned char *)(v15 + 40) = 0;
    }
  }
}

void sub_215A62104(uint64_t *a1, long long *a2)
{
  long long v7 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1[3];
  if (*(unsigned char *)(v4 + 40))
  {
    v10[0] = (uint64_t *)(v4 + 16);
    sub_215E053CC(v10, v7);
  }
  else
  {
    if ((char)v7 < 0)
    {
      LOBYTE(v10[0]) = -52;
      BYTE1(v10[0]) = v7;
    }
    else
    {
      LOBYTE(v10[0]) = v7;
    }
    std::ostream::write();
  }
  uint64_t v5 = a1[3];
  if (*(unsigned char *)(v5 + 40))
  {
    v10[0] = (uint64_t *)(v5 + 16);
    sub_215E069EC(v10, *((unint64_t *)&v7 + 1));
  }
  else
  {
    sub_215E06D00();
  }
  long long v11 = xmmword_26425A6F8;
  v10[0] = (uint64_t *)&v7;
  v10[1] = a1;
  v10[2] = (uint64_t *)&v11;
  sub_215A62274(v7, v10);
  uint64_t v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_215A62260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215A62274(int a1, void *a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      uint64_t v4 = result;
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v7 + 40))
      {
        *(void *)&long long v63 = v7 + 16;
        if (result)
        {
          do
          {
            char v8 = *v6++;
            uint64_t result = (uint64_t)sub_215E053CC((uint64_t **)&v63, v8);
            --v4;
          }
          while (v4);
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        do
        {
          while (1)
          {
            int v50 = *v6;
            if ((v50 & 0x80000000) == 0) {
              break;
            }
            LOBYTE(v63) = -52;
            BYTE1(v63) = v50;
            uint64_t result = std::ostream::write();
            ++v6;
            if (!--v4) {
              return result;
            }
          }
          LOBYTE(v63) = *v6;
          uint64_t result = std::ostream::write();
          ++v6;
          --v4;
        }
        while (v4);
      }
      return result;
    case 1:
      unint64_t v9 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      uint64_t v10 = a2[1];
      *(void *)&long long v63 = v9;
      *((void *)&v63 + 1) = v11;
      return sub_215DFF1B4(*(void *)(v10 + 24), &v63);
    case 2:
      uint64_t result = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v14 + 40))
      {
        *(void *)&long long v63 = v14 + 16;
        if (result)
        {
          uint64_t v15 = 4 * result;
          do
          {
            unsigned int v16 = *v13++;
            uint64_t result = (uint64_t)sub_215E05FEC((uint64_t **)&v63, v16);
            v15 -= 4;
          }
          while (v15);
        }
      }
      else if (result)
      {
        uint64_t v51 = v14 + 8;
        uint64_t v52 = 4 * result;
        do
        {
          ++v13;
          uint64_t result = sub_215E0626C((uint64_t)&v63, v51);
          v52 -= 4;
        }
        while (v52);
      }
      return result;
    case 3:
      uint64_t result = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v19 + 40))
      {
        *(void *)&long long v63 = v19 + 16;
        if (result)
        {
          uint64_t v20 = 8 * result;
          do
          {
            unint64_t v21 = *v18++;
            uint64_t result = (uint64_t)sub_215E069EC((uint64_t **)&v63, v21);
            v20 -= 8;
          }
          while (v20);
        }
      }
      else if (result)
      {
        uint64_t v53 = 8 * result;
        do
        {
          ++v18;
          uint64_t result = sub_215E06D00();
          v53 -= 8;
        }
        while (v53);
      }
      return result;
    case 5:
      uint64_t result = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      uint64_t v22 = result;
      char v24 = v23;
      uint64_t v25 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v25 + 40))
      {
        *(void *)&long long v63 = v25 + 16;
        if (result)
        {
          do
          {
            int v26 = (char)*v24++;
            uint64_t result = (uint64_t)sub_215E05278((uint64_t **)&v63, v26);
            --v22;
          }
          while (v22);
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        do
        {
          while (1)
          {
            int v54 = (char)*v24;
            if (v54 <= -33) {
              break;
            }
            LOBYTE(v63) = *v24;
            uint64_t result = std::ostream::write();
            ++v24;
            if (!--v22) {
              return result;
            }
          }
          LOBYTE(v63) = -48;
          BYTE1(v63) = v54;
          uint64_t result = std::ostream::write();
          ++v24;
          --v22;
        }
        while (v22);
      }
      return result;
    case 6:
      uint64_t result = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v29 + 40))
      {
        *(void *)&long long v63 = v29 + 16;
        if (result)
        {
          uint64_t v30 = 2 * result;
          do
          {
            signed int v31 = *v28++;
            uint64_t result = (uint64_t)sub_215E0551C((uint64_t **)&v63, v31);
            v30 -= 2;
          }
          while (v30);
        }
      }
      else if (result)
      {
        uint64_t v55 = 2 * result;
        do
        {
          ++v28;
          uint64_t result = sub_215E057EC();
          v55 -= 2;
        }
        while (v55);
      }
      return result;
    case 7:
      uint64_t result = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v34 + 40))
      {
        *(void *)&long long v63 = v34 + 16;
        if (result)
        {
          uint64_t v35 = 4 * result;
          do
          {
            unsigned int v36 = *v33++;
            uint64_t result = (uint64_t)sub_215E05AC4((uint64_t **)&v63, v36);
            v35 -= 4;
          }
          while (v35);
        }
      }
      else if (result)
      {
        uint64_t v56 = 4 * result;
        do
        {
          ++v33;
          uint64_t result = sub_215E05EEC();
          v56 -= 4;
        }
        while (v56);
      }
      return result;
    case 8:
      uint64_t result = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      char v38 = v37;
      uint64_t v39 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v39 + 40))
      {
        *(void *)&long long v63 = v39 + 16;
        if (result)
        {
          uint64_t v40 = 8 * result;
          do
          {
            unint64_t v41 = *v38++;
            uint64_t result = (uint64_t)sub_215E06360((uint64_t **)&v63, v41);
            v40 -= 8;
          }
          while (v40);
        }
      }
      else if (result)
      {
        uint64_t v57 = 8 * result;
        do
        {
          ++v38;
          uint64_t result = sub_215E068A8();
          v57 -= 8;
        }
        while (v57);
      }
      return result;
    case 11:
      uint64_t result = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      char v43 = v42;
      uint64_t v44 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v44 + 40))
      {
        *(void *)&long long v63 = v44 + 16;
        if (result)
        {
          uint64_t v45 = 4 * result;
          do
          {
            uint64_t result = (uint64_t)sub_215E06DFC((uint64_t)&v62, (uint64_t **)&v63, v43++);
            v45 -= 4;
          }
          while (v45);
        }
      }
      else if (result)
      {
        uint64_t v58 = 4 * result;
        do
        {
          unsigned int v59 = *v43++;
          LOBYTE(v63) = -54;
          *(_DWORD *)((char *)&v63 + 1) = bswap32(v59);
          uint64_t result = std::ostream::write();
          v58 -= 4;
        }
        while (v58);
      }
      return result;
    case 12:
      uint64_t result = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      long long v47 = v46;
      uint64_t v48 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v48 + 40))
      {
        *(void *)&long long v63 = v48 + 16;
        if (result)
        {
          uint64_t v49 = 8 * result;
          do
          {
            uint64_t result = (uint64_t)sub_215E06EE4((uint64_t)&v62, (uint64_t **)&v63, v47++);
            v49 -= 8;
          }
          while (v49);
        }
      }
      else if (result)
      {
        uint64_t v60 = 8 * result;
        do
        {
          unint64_t v61 = *v47++;
          LOBYTE(v63) = -53;
          *(void *)((char *)&v63 + 1) = bswap64(v61);
          uint64_t result = std::ostream::write();
          v60 -= 8;
        }
        while (v60);
      }
      return result;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A62808(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void sub_215A62B0C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  int v7 = &v4;
  sub_2159CE670();
}

void sub_215A62D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215A62D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_215A62D78(int a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a2;
  v4[1] = a3;
  switch(a1)
  {
    case 0:
      unint64_t result = sub_215A62EF8(v4);
      break;
    case 1:
      unint64_t result = sub_215A63098(v4);
      break;
    case 2:
      unint64_t result = sub_215A63238(v4);
      break;
    case 3:
      unint64_t result = sub_215A633D8(v4);
      break;
    case 5:
      unint64_t result = sub_215A63578(v4);
      break;
    case 6:
      unint64_t result = sub_215A63718(v4);
      break;
    case 7:
      unint64_t result = sub_215A638B8(v4);
      break;
    case 8:
      unint64_t result = sub_215A63A58(v4);
      break;
    case 11:
      unint64_t result = sub_215A63BF8(v4);
      break;
    case 12:
      unint64_t result = sub_215A63D98(v4);
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

uint64_t sub_215A62EF8(void *a1)
{
  uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEB984(v6, &v12);
        uint64_t v7 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5 + 3;
        sub_215DEB984(v7, &v12);
        uint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 6;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEB984(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5 + 3;
        sub_215DEB984(v10, &v12);
        uint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 6;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A63098(void *a1)
{
  unint64_t result = sub_215D160E4((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DECBA4(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 6;
        sub_215DECBA4(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 12;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DECBA4(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 6;
        sub_215DECBA4(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 12;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A63238(void *a1)
{
  unint64_t result = sub_215D161EC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DECE1C(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DECE1C(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DECE1C(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DECE1C(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A633D8(void *a1)
{
  unint64_t result = sub_215D162F4((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DED094(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DED094(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DED094(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DED094(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t sub_215A63578(void *a1)
{
  uint64_t result = sub_215D15F58((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEC92C(v6, &v12);
        uint64_t v7 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5 + 3;
        sub_215DEC92C(v7, &v12);
        uint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 6;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEC92C(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        size_t v12 = 3;
        uint64_t v13 = v5 + 3;
        sub_215DEC92C(v10, &v12);
        uint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 6;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A63718(void *a1)
{
  unint64_t result = sub_215D16060((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DECA68(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 6;
        sub_215DECA68(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 12;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DECA68(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 6;
        sub_215DECA68(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 12;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A638B8(void *a1)
{
  unint64_t result = sub_215D16168((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DECCE0(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DECCE0(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DECCE0(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DECCE0(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A63A58(void *a1)
{
  unint64_t result = sub_215D16270((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DECF58(v6, (uint64_t)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DECF58(v7, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DECF58(v9, (uint64_t)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DECF58(v10, (uint64_t)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A63BF8(void *a1)
{
  unint64_t result = sub_215D16378((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DED67C(v6, (float **)&v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DED67C(v7, (float **)&v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DED67C(v9, (float **)&v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 12;
        sub_215DED67C(v10, (float **)&v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 24;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

unint64_t sub_215A63D98(void *a1)
{
  unint64_t result = sub_215D163FC((unsigned __int8 **)(*a1 + 16));
  uint64_t v4 = *(void *)(*a1 + 8);
  if (v4)
  {
    uint64_t v5 = v3;
    unint64_t result = a1[1];
    if (v3)
    {
      do
      {
        sub_215DEB804(result);
        uint64_t v6 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5;
        sub_215DEDAA0(v6, &v12);
        uint64_t v7 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DEDAA0(v7, &v12);
        unint64_t result = a1[1];
        uint64_t v8 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v8 - 8);
        *(void *)(result + 56) = v8 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        sub_215DEB804(result);
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v9 = a1[1], v12 = 3, v13 = v5, sub_215DEDAA0(v9, &v12), sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)))
        {
          abort();
        }
        uint64_t v10 = a1[1];
        uint64_t v12 = 3;
        uint64_t v13 = v5 + 24;
        sub_215DEDAA0(v10, &v12);
        unint64_t result = a1[1];
        uint64_t v11 = *(void *)(result + 56);
        *(void *)(result + 40) = *(void *)(v11 - 8);
        *(void *)(result + 56) = v11 - 8;
        if (*(unsigned char *)(result + 88)) {
          *(unsigned char *)(result + 88) = 0;
        }
        v5 += 48;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

void *sub_215A63F38(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      uint64_t v8 = *(void **)(a2 + 24);
      char v20 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        uint64_t v6 = *(void **)(a2 + 24);
        char v18 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      uint64_t v10 = *(void **)(a2 + 24);
      char v21 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      uint64_t v9 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  uint64_t v11 = *(void **)(a2 + 24);
  char v22 = v7;
  sub_215731D94(v11, (uint64_t)&v22, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    uint64_t v13 = *(void **)(a2 + 24);
    char v23 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_215A64154(a2, (long long *)(v3 + 200));
  char v14 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void **)(a2 + 24);
    char v24 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v15, (uint64_t)&v24, 1);
  }
  unsigned int v16 = *(void **)(a2 + 24);
  char v25 = v14;
  unint64_t result = sub_215731D94(v16, (uint64_t)&v25, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A64154(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v9[0]) = v6;
  sub_215DF927C(a1, (unsigned __int8 *)v9);
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void **)(a1 + 24);
    LOBYTE(v9[0]) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)v9, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  long long v10 = xmmword_26425A6F8;
  v9[0] = &v6;
  v9[1] = a1;
  void v9[2] = &v10;
  sub_215A64280(v6, v9);
  int v5 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_215A6426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A64280(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      if (v3)
      {
        uint64_t v5 = v3;
        long long v6 = v4;
        uint64_t v7 = a2[1];
        do
        {
          sub_215DF927C(v7, v6++);
          --v5;
        }
        while (v5);
      }
      break;
    case 1:
      unint64_t v8 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      if (v8)
      {
        uint64_t v10 = v9;
        uint64_t v11 = a2[1];
        uint64_t v12 = *(void *)(v11 + 40);
        uint64_t v13 = 2 * v8;
        do
        {
          if (v12)
          {
            char v14 = *(void **)(v11 + 24);
            char v69 = *(unsigned char *)(v11 + 32);
            sub_215731D94(v14, (uint64_t)&v69, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          uint64_t v12 = *(void *)(v11 + 40) + 1;
          *(void *)(v11 + 40) = v12;
          v13 -= 2;
        }
        while (v13);
      }
      break;
    case 2:
      unint64_t v15 = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      if (v15)
      {
        uint64_t v17 = v16;
        uint64_t v18 = a2[1];
        uint64_t v19 = *(void *)(v18 + 40);
        uint64_t v20 = 4 * v15;
        do
        {
          if (v19)
          {
            char v21 = *(void **)(v18 + 24);
            char v70 = *(unsigned char *)(v18 + 32);
            sub_215731D94(v21, (uint64_t)&v70, 1);
          }
          v17 += 4;
          std::ostream::operator<<();
          uint64_t v19 = *(void *)(v18 + 40) + 1;
          *(void *)(v18 + 40) = v19;
          v20 -= 4;
        }
        while (v20);
      }
      break;
    case 3:
      unint64_t v22 = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      if (v22)
      {
        uint64_t v24 = v23;
        uint64_t v25 = a2[1];
        uint64_t v26 = *(void *)(v25 + 40);
        uint64_t v27 = 8 * v22;
        do
        {
          if (v26)
          {
            uint64_t v28 = *(void **)(v25 + 24);
            char v71 = *(unsigned char *)(v25 + 32);
            sub_215731D94(v28, (uint64_t)&v71, 1);
          }
          v24 += 8;
          std::ostream::operator<<();
          uint64_t v26 = *(void *)(v25 + 40) + 1;
          *(void *)(v25 + 40) = v26;
          v27 -= 8;
        }
        while (v27);
      }
      break;
    case 5:
      uint64_t v29 = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      if (v29)
      {
        uint64_t v31 = v29;
        uint64_t v32 = v30;
        uint64_t v33 = a2[1];
        do
        {
          sub_215DF9090(v33, v32++);
          --v31;
        }
        while (v31);
      }
      break;
    case 6:
      unint64_t v34 = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      if (v34)
      {
        uint64_t v36 = v35;
        uint64_t v37 = a2[1];
        uint64_t v38 = *(void *)(v37 + 40);
        uint64_t v39 = 2 * v34;
        do
        {
          if (v38)
          {
            uint64_t v40 = *(void **)(v37 + 24);
            char v72 = *(unsigned char *)(v37 + 32);
            sub_215731D94(v40, (uint64_t)&v72, 1);
          }
          v36 += 2;
          std::ostream::operator<<();
          uint64_t v38 = *(void *)(v37 + 40) + 1;
          *(void *)(v37 + 40) = v38;
          v39 -= 2;
        }
        while (v39);
      }
      break;
    case 7:
      unint64_t v41 = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      if (v41)
      {
        uint64_t v43 = v42;
        uint64_t v44 = a2[1];
        uint64_t v45 = *(void *)(v44 + 40);
        uint64_t v46 = 4 * v41;
        do
        {
          if (v45)
          {
            long long v47 = *(void **)(v44 + 24);
            char v73 = *(unsigned char *)(v44 + 32);
            sub_215731D94(v47, (uint64_t)&v73, 1);
          }
          v43 += 4;
          std::ostream::operator<<();
          uint64_t v45 = *(void *)(v44 + 40) + 1;
          *(void *)(v44 + 40) = v45;
          v46 -= 4;
        }
        while (v46);
      }
      break;
    case 8:
      unint64_t v48 = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      if (v48)
      {
        uint64_t v50 = v49;
        uint64_t v51 = a2[1];
        uint64_t v52 = *(void *)(v51 + 40);
        uint64_t v53 = 8 * v48;
        do
        {
          if (v52)
          {
            int v54 = *(void **)(v51 + 24);
            char v74 = *(unsigned char *)(v51 + 32);
            sub_215731D94(v54, (uint64_t)&v74, 1);
          }
          v50 += 8;
          std::ostream::operator<<();
          uint64_t v52 = *(void *)(v51 + 40) + 1;
          *(void *)(v51 + 40) = v52;
          v53 -= 8;
        }
        while (v53);
      }
      break;
    case 11:
      unint64_t v55 = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      if (v55)
      {
        uint64_t v57 = v56;
        uint64_t v58 = a2[1];
        uint64_t v59 = *(void *)(v58 + 40);
        uint64_t v60 = 4 * v55;
        do
        {
          if (v59)
          {
            unint64_t v61 = *(void **)(v58 + 24);
            char v75 = *(unsigned char *)(v58 + 32);
            sub_215731D94(v61, (uint64_t)&v75, 1);
          }
          *(void *)(*(void *)(v58 + 24) + *(void *)(**(void **)(v58 + 24) - 24) + 16) = 9;
          v57 += 4;
          std::ostream::operator<<();
          uint64_t v59 = *(void *)(v58 + 40) + 1;
          *(void *)(v58 + 40) = v59;
          v60 -= 4;
        }
        while (v60);
      }
      break;
    case 12:
      unint64_t v62 = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      if (v62)
      {
        uint64_t v64 = v63;
        uint64_t v65 = a2[1];
        uint64_t v66 = *(void *)(v65 + 40);
        uint64_t v67 = 8 * v62;
        do
        {
          if (v66)
          {
            v68 = *(void **)(v65 + 24);
            char v76 = *(unsigned char *)(v65 + 32);
            sub_215731D94(v68, (uint64_t)&v76, 1);
          }
          *(void *)(*(void *)(v65 + 24) + *(void *)(**(void **)(v65 + 24) - 24) + 16) = 17;
          v64 += 8;
          std::ostream::operator<<();
          uint64_t v66 = *(void *)(v65 + 40) + 1;
          *(void *)(v65 + 40) = v66;
          v67 -= 8;
        }
        while (v67);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A64704(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 1;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_215D02034((void *)a2);
  sub_215A648C0(a2, (long long *)(v3 + 200));
  uint64_t v10 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v10 + 10) = *(void *)(a2 + 32) - v10 - 18;
  *(void *)(a2 + 56) -= 8;
}

void sub_215A648C0(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  unsigned int v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(__src[0]) = v5;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&v5 + 8, (char *)&v6, 8);
  long long v9 = xmmword_26425A6F8;
  __src[0] = &v5;
  __src[1] = a1;
  __src[2] = &v9;
  sub_215A649F0(v5, __src);
  uint64_t v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_215A649DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_215A649F0(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      int64_t v4 = v3;
      uint64_t v6 = v5;
      uint64_t v7 = a2[1];
      if (v5) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v3 == 0;
      }
      if (!v8) {
        goto LABEL_18;
      }
      goto LABEL_19;
    case 1:
      unint64_t v9 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      goto LABEL_23;
    case 2:
      unint64_t v11 = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      goto LABEL_32;
    case 3:
      unint64_t v13 = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      goto LABEL_39;
    case 5:
      uint64_t v15 = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      int64_t v4 = v15;
      uint64_t v6 = v16;
      uint64_t v7 = a2[1];
      if (v16) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v15 == 0;
      }
      if (v17) {
        goto LABEL_19;
      }
LABEL_18:
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_47;
      }
LABEL_19:
      uint64_t v18 = v7 + 24;
      uint64_t v19 = *(char **)(v7 + 32);
      uint64_t v20 = &v6[v4];
      char v21 = v6;
      int64_t v22 = v4;
      break;
    case 6:
      unint64_t v9 = sub_215D16060((unsigned __int8 **)(*a2 + 16));
LABEL_23:
      uint64_t v24 = v10;
      uint64_t v25 = a2[1];
      uint64_t v26 = 2 * v9;
      if (v10) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v26 == 0;
      }
      if (!v27) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 7:
      unint64_t v11 = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      goto LABEL_32;
    case 8:
      unint64_t v13 = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      goto LABEL_39;
    case 11:
      unint64_t v11 = sub_215D16378((unsigned __int8 **)(*a2 + 16));
LABEL_32:
      uint64_t v24 = v12;
      uint64_t v25 = a2[1];
      uint64_t v26 = 4 * v11;
      if (v12) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v26 == 0;
      }
      if (!v28) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 12:
      unint64_t v13 = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
LABEL_39:
      uint64_t v24 = v14;
      uint64_t v25 = a2[1];
      uint64_t v26 = 8 * v13;
      if (v14) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v26 == 0;
      }
      if (!v29)
      {
LABEL_43:
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
LABEL_47:
          abort();
        }
      }
LABEL_44:
      uint64_t v18 = v25 + 24;
      uint64_t v19 = *(char **)(v25 + 32);
      uint64_t v20 = &v24[v26];
      char v21 = v24;
      int64_t v22 = v26;
      break;
    default:
      sub_215E097D8(a1);
  }
  return sub_215D04A50(v18, v19, v21, v20, v22);
}

void sub_215A64C7C(int *a1, unsigned char *a2, long long *a3)
{
  int v6 = 1;
  (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1
    || *a1 == 2 && (int v7 = 1, (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v7), *a1 <= 0))
  {
    sub_215A64DC4(a2, a3);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    sub_215A64DC4(a2, a3);
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

void sub_215A64DC4(unsigned char *a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  int v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[0] = &v5;
  sub_2159D0EBC(a1, v8);
  (*(void (**)(unsigned char *, char *))(*(void *)a1 + 120))(a1, (char *)&v5 + 8);
  long long v9 = xmmword_26425A6F8;
  v8[0] = &v5;
  v8[1] = a1;
  void v8[2] = &v9;
  sub_215A64EE4(v5, v8);
  int64_t v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_215A64ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215A64EE4(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v5 = result;
        uint64_t v6 = v4;
        uint64_t v7 = a2[1];
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 80))(v7, v6++);
          --v5;
        }
        while (v5);
      }
      break;
    case 1:
      uint64_t result = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v9 = v8;
        uint64_t v10 = a2[1];
        uint64_t v11 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 96))(v10, v9);
          v9 += 2;
          v11 -= 2;
        }
        while (v11);
      }
      break;
    case 2:
      uint64_t result = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v13 = v12;
        uint64_t v14 = a2[1];
        uint64_t v15 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 104))(v14, v13);
          v13 += 4;
          v15 -= 4;
        }
        while (v15);
      }
      break;
    case 3:
      uint64_t result = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v17 = v16;
        uint64_t v18 = a2[1];
        uint64_t v19 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 120))(v18, v17);
          v17 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      break;
    case 5:
      uint64_t result = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v21 = result;
        uint64_t v22 = v20;
        uint64_t v23 = a2[1];
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v23 + 88))(v23, v22++);
          --v21;
        }
        while (v21);
      }
      break;
    case 6:
      uint64_t result = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v25 = v24;
        uint64_t v26 = a2[1];
        uint64_t v27 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 48))(v26, v25);
          v25 += 2;
          v27 -= 2;
        }
        while (v27);
      }
      break;
    case 7:
      uint64_t result = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v29 = v28;
        uint64_t v30 = a2[1];
        uint64_t v31 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v30 + 56))(v30, v29);
          v29 += 4;
          v31 -= 4;
        }
        while (v31);
      }
      break;
    case 8:
      uint64_t result = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v33 = v32;
        uint64_t v34 = a2[1];
        uint64_t v35 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v34 + 72))(v34, v33);
          v33 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      break;
    case 11:
      uint64_t result = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v37 = v36;
        uint64_t v38 = a2[1];
        uint64_t v39 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v38 + 128))(v38, v37);
          v37 += 4;
          v39 -= 4;
        }
        while (v39);
      }
      break;
    case 12:
      uint64_t result = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v41 = v40;
        uint64_t v42 = a2[1];
        uint64_t v43 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 136))(v42, v41);
          v41 += 8;
          v43 -= 8;
        }
        while (v43);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

void sub_215A652F8(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A659AC(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  uint64_t v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A686C0(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A69DF8(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    uint64_t v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A6C184(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A6D978(&v10, v8);
      }
      else {
        sub_215A654C4(&v9, (void **)a1);
      }
    }
  }
}

uint64_t *sub_215A654C4(uint64_t *a1, void **a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)&v29, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v29);
        if (!v44) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(unsigned char *)(v3 + 64) = 0;
    if (v33)
    {
      uint64_t v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(void *)(v3 + 56) = v8;
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v35;
    long long v10 = v34;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v38)
    {
      uint64_t v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(void *)(v3 + 112) = v11;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v41)
    {
      uint64_t v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(void *)(v3 + 144) = v12;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(void *)(v3 + 176) = v43;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v42;
    if (!(void)v42) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v42 + 1);
    uint64_t v16 = (void *)v42;
    if (*((void *)&v42 + 1) == (void)v42) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v42;
LABEL_45:
    *((void *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)&v29, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(unsigned char *)(v3 + 64) = 0;
    if (v33)
    {
      uint64_t v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(void *)(v3 + 56) = v17;
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v35;
    long long v19 = v34;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v38)
    {
      uint64_t v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(void *)(v3 + 112) = v20;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v41)
    {
      uint64_t v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(void *)(v3 + 144) = v21;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(void *)(v3 + 176) = v43;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v29);
  if (v44)
  {
LABEL_38:
    uint64_t v14 = v42;
    if (!(void)v42) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v42 + 1);
    uint64_t v16 = (void *)v42;
    if (*((void *)&v42 + 1) == (void)v42) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v33 && SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  sub_2157C6F18((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  uint64_t v24 = (void (**)(void **, unsigned int *))*a2;
  v28[0] = (uint64_t)a2[1];
  int v25 = v28[0];
  unsigned int v29 = 6;
  v24[13](a2, &v29);
  if (v25 < 1)
  {
    if (v29 < 3) {
      sub_2159B6FFC((uint64_t)&v29, a2, v4, v29);
    }
    else {
      sub_2159B71F0(a2, v4, v29);
    }
  }
  else
  {
    sub_2159B6970((int *)v28, a2, v4, v29);
  }
  return sub_215A6F5CC((uint64_t *)a2, (unsigned char *)(v3 + 200));
}

void sub_215A65964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A659AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A65EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A65EF4(uint64_t a1, uint64_t a2)
{
  sub_215DF07E4(a2);
  int v5 = 1;
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_215DF1DC8((void *)a2, &v5);
  int v4 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "value_type";
  *(void *)(a2 + 96) = 10;
  if (!v4) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_2159D177C((void *)a2);
}

void sub_215A66050(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_215A661D0(v3);
      break;
    case 1:
      sub_215A6646C(v3);
      break;
    case 2:
      sub_215A66718(v3);
      break;
    case 3:
      sub_215A669C8(v3);
      break;
    case 5:
      sub_215A66CE8(v3);
      break;
    case 6:
      sub_215A66F84(v3);
      break;
    case 7:
      sub_215A67230(v3);
      break;
    case 8:
      sub_215A674E0(v3);
      break;
    case 11:
      sub_215A67800(v3);
      break;
    case 12:
      sub_215A67A9C(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A661D0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157C3CEC();
    }
    int v4 = (char *)operator new(6 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, 6 * v2);
    long long v19 = v5;
  }
  if (v2)
  {
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3;
    do
    {
      sub_215DF07E4((uint64_t)v6);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v8 = (void *)a1[1], *(void *)&v21 = 3, *((void *)&v21 + 1) = (char *)__p + v7 - 3, v9 = sub_215DF0AA0(v8), ++v8[14], sub_215DF0BCC(v9, (uint64_t)&v21), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v10 = (void *)a1[1];
      *(void *)&long long v21 = 3;
      *((void *)&v21 + 1) = (char *)__p + v7;
      unint64_t v11 = sub_215DF0AA0(v10);
      ++v10[14];
      sub_215DF0BCC(v11, (uint64_t)&v21);
      uint64_t v6 = (void *)a1[1];
      uint64_t v12 = v6[6];
      v6[4] = *(void *)(v12 - 8);
      uint64_t v13 = v6[9];
      v6[14] = *(void *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_215A67D38(&v21, (uint64_t)&__p);
  uint64_t v14 = *a1;
  long long v15 = v21;
  long long v21 = 0uLL;
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_OWORD *)(v14 + 16) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A66440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6646C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v17 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 6;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (int v5 = (void *)a1[1], *(void *)&v18 = 3, *((void *)&v18 + 1) = (char *)__p + v4 - 6, v6 = sub_215DF0AA0(v5), ++v5[14], sub_215DF2178(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 3;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF2178(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_215A67E2C(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_215A666EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A66718(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v17 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 12;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (int v5 = (void *)a1[1], *(void *)&v18 = 3, *((void *)&v18 + 1) = (char *)__p + v4 - 12, v6 = sub_215DF0AA0(v5), ++v5[14], sub_215DF2328(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 3;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF2328(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_215A67F20(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_215A6699C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A669C8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  long long v21 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(48 * v2);
    long long v21 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    uint64_t v20 = v21;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)a1[1];
    do
    {
      sub_215DF07E4((uint64_t)v4);
      uint64_t v7 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_28;
      }
      unint64_t v8 = (void *)a1[1];
      unint64_t v9 = sub_215DF0AA0(v8);
      ++v8[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF4844(v9, (uint64_t)&v22);
      uint64_t v10 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v7[v3], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v10 = (void *)v22;
      }
      if (v10)
      {
        *((void *)&v22 + 1) = v10;
        operator delete(v10);
      }
      uint64_t v11 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
LABEL_28:
        abort();
      }
      long long v12 = (void *)a1[1];
      unint64_t v13 = sub_215DF0AA0(v12);
      ++v12[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF4844(v13, (uint64_t)&v22);
      uint64_t v14 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v11[v3 + 24], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v14 = (void *)v22;
      }
      if (v14)
      {
        *((void *)&v22 + 1) = v14;
        operator delete(v14);
      }
      uint64_t v4 = (void *)a1[1];
      uint64_t v5 = v4[6];
      v4[4] = *(void *)(v5 - 8);
      uint64_t v6 = v4[9];
      v4[14] = *(void *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_215A68014(&v22, (uint64_t)&__p);
  uint64_t v15 = *a1;
  long long v16 = v22;
  long long v22 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
  *(_OWORD *)(v15 + 16) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_215A66CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A66CE8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(6 * v2);
    uint64_t v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, 6 * v2);
    long long v19 = v5;
  }
  if (v2)
  {
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3;
    do
    {
      sub_215DF07E4((uint64_t)v6);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (unint64_t v8 = (void *)a1[1], *(void *)&v21 = 3, *((void *)&v21 + 1) = (char *)__p + v7 - 3, v9 = sub_215DF0AA0(v8), ++v8[14], sub_215DF1F38(v9, (uint64_t)&v21), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v10 = (void *)a1[1];
      *(void *)&long long v21 = 3;
      *((void *)&v21 + 1) = (char *)__p + v7;
      unint64_t v11 = sub_215DF0AA0(v10);
      ++v10[14];
      sub_215DF1F38(v11, (uint64_t)&v21);
      uint64_t v6 = (void *)a1[1];
      uint64_t v12 = v6[6];
      v6[4] = *(void *)(v12 - 8);
      uint64_t v13 = v6[9];
      v6[14] = *(void *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_215A68108(&v21, (uint64_t)&__p);
  uint64_t v14 = *a1;
  long long v15 = v21;
  long long v21 = 0uLL;
  long long v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_OWORD *)(v14 + 16) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A66F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A66F84(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v17 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 6;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v5 = (void *)a1[1], *(void *)&v18 = 3, *((void *)&v18 + 1) = (char *)__p + v4 - 6, v6 = sub_215DF0AA0(v5), ++v5[14], sub_215DF2058(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 3;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF2058(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_215A681FC(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A67204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A67230(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v17 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 12;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v5 = (void *)a1[1], *(void *)&v18 = 3, *((void *)&v18 + 1) = (char *)__p + v4 - 12, v6 = sub_215DF0AA0(v5), ++v5[14], sub_215DF2250(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 3;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF2250(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_215A682F0(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A674B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A674E0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  long long v21 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(48 * v2);
    long long v21 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    uint64_t v20 = v21;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)a1[1];
    do
    {
      sub_215DF07E4((uint64_t)v4);
      uint64_t v7 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_28;
      }
      unint64_t v8 = (void *)a1[1];
      unint64_t v9 = sub_215DF0AA0(v8);
      ++v8[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF45EC(v9, (uint64_t)&v22);
      uint64_t v10 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v7[v3], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v10 = (void *)v22;
      }
      if (v10)
      {
        *((void *)&v22 + 1) = v10;
        operator delete(v10);
      }
      uint64_t v11 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
LABEL_28:
        abort();
      }
      long long v12 = (void *)a1[1];
      unint64_t v13 = sub_215DF0AA0(v12);
      ++v12[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF45EC(v13, (uint64_t)&v22);
      uint64_t v14 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v11[v3 + 24], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v14 = (void *)v22;
      }
      if (v14)
      {
        *((void *)&v22 + 1) = v14;
        operator delete(v14);
      }
      uint64_t v4 = (void *)a1[1];
      uint64_t v5 = v4[6];
      v4[4] = *(void *)(v5 - 8);
      uint64_t v6 = v4[9];
      v4[14] = *(void *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_215A683E4(&v22, (uint64_t)&__p);
  uint64_t v15 = *a1;
  long long v16 = v22;
  long long v22 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
  *(_OWORD *)(v15 + 16) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_215A677B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A67800(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v20 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    long long v19 = v20;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 12;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      uint64_t v5 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (v6 = (void *)a1[1], unint64_t v7 = sub_215DF0AA0(v6), ++v6[14], sub_215DF262C(v7, (float *)&v5[v4 - 12]), (v8 = (char *)__p) == 0)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v9 = (void *)a1[1];
      unint64_t v10 = sub_215DF0AA0(v9);
      ++v9[14];
      sub_215DF262C(v10, (float *)&v8[v4]);
      uint64_t v3 = (void *)a1[1];
      uint64_t v11 = v3[6];
      v3[4] = *(void *)(v11 - 8);
      uint64_t v12 = v3[9];
      v3[14] = *(void *)(v12 - 8);
      v3[6] = v11 - 8;
      _DWORD v3[9] = v12 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_215A684D8(&v17, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v17;
  long long v17 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A67A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A67A9C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(48 * v2);
    uint64_t v20 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    long long v19 = v20;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 24;
    do
    {
      sub_215DF07E4((uint64_t)v3);
      uint64_t v5 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (v6 = (void *)a1[1], unint64_t v7 = sub_215DF0AA0(v6), ++v6[14], sub_215DF2748(v7, (double *)&v5[v4 - 24]), (v8 = (char *)__p) == 0)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v9 = (void *)a1[1];
      unint64_t v10 = sub_215DF0AA0(v9);
      ++v9[14];
      sub_215DF2748(v10, (double *)&v8[v4]);
      uint64_t v3 = (void *)a1[1];
      uint64_t v11 = v3[6];
      v3[4] = *(void *)(v11 - 8);
      uint64_t v12 = v3[9];
      v3[14] = *(void *)(v12 - 8);
      v3[6] = v11 - 8;
      _DWORD v3[9] = v12 - 8;
      v4 += 48;
      --v2;
    }
    while (v2);
  }
  sub_215A685CC(&v17, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v17;
  long long v17 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A67D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A67D38(_OWORD *a1, uint64_t a2)
{
  sub_215D1429C(&v6, 0, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A67DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A67E2C(_OWORD *a1, uint64_t a2)
{
  sub_215D14650(&v6, 1, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A67ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A67F20(_OWORD *a1, uint64_t a2)
{
  sub_215D14A08(&v6, 2, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A67FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A68014(_OWORD *a1, uint64_t a2)
{
  sub_215D14DC0(&v6, 3, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A680B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A68108(_OWORD *a1, uint64_t a2)
{
  sub_215D140C4(&v6, 5, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A681A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A681FC(_OWORD *a1, uint64_t a2)
{
  sub_215D14474(&v6, 6, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A6829C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A682F0(_OWORD *a1, uint64_t a2)
{
  sub_215D1482C(&v6, 7, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A68390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A683E4(_OWORD *a1, uint64_t a2)
{
  sub_215D14BE4(&v6, 8, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A68484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A684D8(_OWORD *a1, uint64_t a2)
{
  sub_215D14F9C(&v6, 11, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A68578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_215A685CC(_OWORD *a1, uint64_t a2)
{
  sub_215D15178(&v6, 12, a2);
  long long v5 = v6;
  sub_215D0E150((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_215A6866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A686C0(uint64_t *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v26);
    sub_2159A3DA4((uint64_t)v27, v26);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v27);
        if (!v42) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v25, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v8;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v33;
    long long v10 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v11;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v12;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v40 + 1);
    long long v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    long long v16 = (void *)v40;
LABEL_45:
    *((void *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v26);
  sub_2159A3DA4((uint64_t)v27, v26);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v25, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v17;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v33;
    long long v19 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v20;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v21;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v40 + 1);
    long long v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (v36 && SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (v31 && SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  sub_2157C6F18((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v26, a2, v4);
  LODWORD(v26[0]) = 1;
  sub_215DFF824(a2[6], v26);
  return sub_215A68B50((uint64_t)v26, a2, (unsigned __int8 *)(v3 + 200));
}

void sub_215A68B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A68B50(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  int v5 = a2 + 2;
  sub_2159B0060(a2 + 2);
  LOBYTE(v10[0]) = 0;
  sub_215DFF4BC(a2[6], v10);
  *a3 = v10[0];
  sub_215DFFC24(a2[6], (void *)a3 + 1);
  long long v11 = xmmword_26425A6F8;
  int v6 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_215A68C4C(v6, v10);
  uint64_t v7 = a2[4];
  uint64_t result = (*(uint64_t (**)(void *))(a2[2] + 32))(v5);
  uint64_t v9 = *(void *)(v7 - 16) - result + *(void *)(v7 - 8);
  if (v9) {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v5 + 40))(v5, v9);
  }
  a2[4] -= 16;
  return result;
}

void sub_215A68C4C(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A68D28(a2);
      break;
    case 1:
      sub_215A68EC4(a2);
      break;
    case 2:
      sub_215A69074(a2);
      break;
    case 3:
      sub_215A69228(a2);
      break;
    case 5:
      sub_215A693DC(a2);
      break;
    case 6:
      sub_215A69578(a2);
      break;
    case 7:
      sub_215A69728(a2);
      break;
    case 8:
      sub_215A698DC(a2);
      break;
    case 11:
      sub_215A69A90(a2);
      break;
    case 12:
      sub_215A69C44(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A68D28(void *a1)
{
  uint64_t v2 = 3 * *(void *)(*a1 + 8);
  int v13 = 0;
  uint64_t v14 = 0;
  size_t v3 = 2 * v2;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    int v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF4BC(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_215A67D38(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
}

void sub_215A68EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A68EC4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF670(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A67E2C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A69050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A69074(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF824(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A67F20(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A69204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A69228(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 48 * v2;
    size_t v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFC24(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A68014(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A693B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A693DC(void *a1)
{
  uint64_t v2 = 3 * *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  size_t v3 = 2 * v2;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF408(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_215A68108(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A69554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A69578(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF5BC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A681FC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A69704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A69728(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF770(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A682F0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A698B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A698DC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 48 * v2;
    size_t v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFB20(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A683E4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A69A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A69A90(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFFD1C(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A684D8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A69C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A69C44(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 48 * v2;
    size_t v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFE68(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A685CC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A69DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A69DF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    long long v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    long long v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  long long v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A6A2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6A340(uint64_t a1, uint64_t a2)
{
  sub_215DF01A0(a2);
  int v5 = 1;
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_215DF0F9C((void *)a2, &v5);
  int v4 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "value_type";
  *(void *)(a2 + 96) = 10;
  if (!v4) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_2159D2DC4((void *)a2);
}

void sub_215A6A49C(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_215A6A61C(v3);
      break;
    case 1:
      sub_215A6A8B8(v3);
      break;
    case 2:
      sub_215A6AB64(v3);
      break;
    case 3:
      sub_215A6AE14(v3);
      break;
    case 5:
      sub_215A6B134(v3);
      break;
    case 6:
      sub_215A6B3D0(v3);
      break;
    case 7:
      sub_215A6B67C(v3);
      break;
    case 8:
      sub_215A6B92C(v3);
      break;
    case 11:
      sub_215A6BC4C(v3);
      break;
    case 12:
      sub_215A6BEE8(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A6A61C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157C3CEC();
    }
    int v4 = (char *)operator new(6 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, 6 * v2);
    long long v19 = v5;
  }
  if (v2)
  {
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3;
    do
    {
      sub_215DF01A0((uint64_t)v6);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v8 = (void *)a1[1], *(void *)&v21 = 3, *((void *)&v21 + 1) = (char *)__p + v7 - 3, v9 = sub_215DF045C(v8), ++v8[14], sub_215DF0588(v9, (uint64_t)&v21), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v10 = (void *)a1[1];
      *(void *)&long long v21 = 3;
      *((void *)&v21 + 1) = (char *)__p + v7;
      unint64_t v11 = sub_215DF045C(v10);
      ++v10[14];
      sub_215DF0588(v11, (uint64_t)&v21);
      uint64_t v6 = (void *)a1[1];
      uint64_t v12 = v6[6];
      v6[4] = *(void *)(v12 - 8);
      uint64_t v13 = v6[9];
      v6[14] = *(void *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_215A67D38(&v21, (uint64_t)&__p);
  uint64_t v14 = *a1;
  long long v15 = v21;
  long long v21 = 0uLL;
  long long v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_OWORD *)(v14 + 16) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A6A88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6A8B8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v17 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 6;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (int v5 = (void *)a1[1], *(void *)&v18 = 3, *((void *)&v18 + 1) = (char *)__p + v4 - 6, v6 = sub_215DF045C(v5), ++v5[14], sub_215DF1274(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 3;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1274(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_215A67E2C(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A6AB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6AB64(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v17 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 12;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (int v5 = (void *)a1[1], *(void *)&v18 = 3, *((void *)&v18 + 1) = (char *)__p + v4 - 12, v6 = sub_215DF045C(v5), ++v5[14], sub_215DF1424(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 3;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1424(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_215A67F20(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A6ADE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6AE14(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  long long v21 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(48 * v2);
    long long v21 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    uint64_t v20 = v21;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)a1[1];
    do
    {
      sub_215DF01A0((uint64_t)v4);
      uint64_t v7 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_28;
      }
      unint64_t v8 = (void *)a1[1];
      unint64_t v9 = sub_215DF045C(v8);
      ++v8[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF331C(v9, (uint64_t)&v22);
      uint64_t v10 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v7[v3], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v10 = (void *)v22;
      }
      if (v10)
      {
        *((void *)&v22 + 1) = v10;
        operator delete(v10);
      }
      uint64_t v11 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
LABEL_28:
        abort();
      }
      long long v12 = (void *)a1[1];
      unint64_t v13 = sub_215DF045C(v12);
      ++v12[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF331C(v13, (uint64_t)&v22);
      uint64_t v14 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v11[v3 + 24], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v14 = (void *)v22;
      }
      if (v14)
      {
        *((void *)&v22 + 1) = v14;
        operator delete(v14);
      }
      uint64_t v4 = (void *)a1[1];
      uint64_t v5 = v4[6];
      v4[4] = *(void *)(v5 - 8);
      uint64_t v6 = v4[9];
      v4[14] = *(void *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_215A68014(&v22, (uint64_t)&__p);
  uint64_t v15 = *a1;
  long long v16 = v22;
  long long v22 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
  *(_OWORD *)(v15 + 16) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_215A6B0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6B134(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(6 * v2);
    uint64_t v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, 6 * v2);
    long long v19 = v5;
  }
  if (v2)
  {
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3;
    do
    {
      sub_215DF01A0((uint64_t)v6);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (unint64_t v8 = (void *)a1[1], *(void *)&v21 = 3, *((void *)&v21 + 1) = (char *)__p + v7 - 3, v9 = sub_215DF045C(v8), ++v8[14], sub_215DF1034(v9, (uint64_t)&v21), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v10 = (void *)a1[1];
      *(void *)&long long v21 = 3;
      *((void *)&v21 + 1) = (char *)__p + v7;
      unint64_t v11 = sub_215DF045C(v10);
      ++v10[14];
      sub_215DF1034(v11, (uint64_t)&v21);
      uint64_t v6 = (void *)a1[1];
      uint64_t v12 = v6[6];
      v6[4] = *(void *)(v12 - 8);
      uint64_t v13 = v6[9];
      v6[14] = *(void *)(v13 - 8);
      v6[6] = v12 - 8;
      v6[9] = v13 - 8;
      v7 += 6;
      --v2;
    }
    while (v2);
  }
  sub_215A68108(&v21, (uint64_t)&__p);
  uint64_t v14 = *a1;
  long long v15 = v21;
  long long v21 = 0uLL;
  long long v16 = *(std::__shared_weak_count **)(v14 + 24);
  *(_OWORD *)(v14 + 16) = v15;
  if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v21 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A6B3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6B3D0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if (6 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v17 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 6;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v5 = (void *)a1[1], *(void *)&v18 = 3, *((void *)&v18 + 1) = (char *)__p + v4 - 6, v6 = sub_215DF045C(v5), ++v5[14], sub_215DF1154(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 3;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1154(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 12;
      --v2;
    }
    while (v2);
  }
  sub_215A681FC(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A6B650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6B67C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v17 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    long long v16 = v17;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 12;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (uint64_t v5 = (void *)a1[1], *(void *)&v18 = 3, *((void *)&v18 + 1) = (char *)__p + v4 - 12, v6 = sub_215DF045C(v5), ++v5[14], sub_215DF134C(v6, (uint64_t)&v18), !__p)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27,
             (uint64_t)"",
             0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v18 = 3;
      *((void *)&v18 + 1) = (char *)__p + v4;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF134C(v8, (uint64_t)&v18);
      uint64_t v3 = (void *)a1[1];
      uint64_t v9 = v3[6];
      v3[4] = *(void *)(v9 - 8);
      uint64_t v10 = v3[9];
      v3[14] = *(void *)(v10 - 8);
      v3[6] = v9 - 8;
      _DWORD v3[9] = v10 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_215A682F0(&v18, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = v18;
  long long v18 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 24);
  *(_OWORD *)(v11 + 16) = v12;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  if (__p)
  {
    long long v16 = __p;
    operator delete(__p);
  }
}

void sub_215A6B900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6B92C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  long long v21 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(48 * v2);
    long long v21 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    uint64_t v20 = v21;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (void *)a1[1];
    do
    {
      sub_215DF01A0((uint64_t)v4);
      uint64_t v7 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_28;
      }
      unint64_t v8 = (void *)a1[1];
      unint64_t v9 = sub_215DF045C(v8);
      ++v8[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF2D20(v9, (uint64_t)&v22);
      uint64_t v10 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v7[v3], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v10 = (void *)v22;
      }
      if (v10)
      {
        *((void *)&v22 + 1) = v10;
        operator delete(v10);
      }
      uint64_t v11 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
LABEL_28:
        abort();
      }
      long long v12 = (void *)a1[1];
      unint64_t v13 = sub_215DF045C(v12);
      ++v12[14];
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      sub_215DF2D20(v13, (uint64_t)&v22);
      uint64_t v14 = (void *)v22;
      if (*((void *)&v22 + 1) != (void)v22)
      {
        memmove(&v11[v3 + 24], (const void *)v22, *((void *)&v22 + 1) - v22);
        uint64_t v14 = (void *)v22;
      }
      if (v14)
      {
        *((void *)&v22 + 1) = v14;
        operator delete(v14);
      }
      uint64_t v4 = (void *)a1[1];
      uint64_t v5 = v4[6];
      v4[4] = *(void *)(v5 - 8);
      uint64_t v6 = v4[9];
      v4[14] = *(void *)(v6 - 8);
      v4[6] = v5 - 8;
      v4[9] = v6 - 8;
      v3 += 48;
      --v2;
    }
    while (v2);
  }
  sub_215A683E4(&v22, (uint64_t)&__p);
  uint64_t v15 = *a1;
  long long v16 = v22;
  long long v22 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v15 + 24);
  *(_OWORD *)(v15 + 16) = v16;
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  long long v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_215A6BC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6BC4C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v20 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    long long v19 = v20;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 12;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      uint64_t v5 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (v6 = (void *)a1[1], unint64_t v7 = sub_215DF045C(v6), ++v6[14], sub_215DF1750(v7, (float *)&v5[v4 - 12]), (v8 = (char *)__p) == 0)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v9 = (void *)a1[1];
      unint64_t v10 = sub_215DF045C(v9);
      ++v9[14];
      sub_215DF1750(v10, (float *)&v8[v4]);
      uint64_t v3 = (void *)a1[1];
      uint64_t v11 = v3[6];
      v3[4] = *(void *)(v11 - 8);
      uint64_t v12 = v3[9];
      v3[14] = *(void *)(v12 - 8);
      v3[6] = v11 - 8;
      _DWORD v3[9] = v12 - 8;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  sub_215A684D8(&v17, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v17;
  long long v17 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A6BEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6BEE8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (6 * v2)
  {
    if ((unint64_t)(6 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(48 * v2);
    uint64_t v20 = (char *)__p + 48 * v2;
    bzero(__p, 48 * v2);
    long long v19 = v20;
  }
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = 24;
    do
    {
      sub_215DF01A0((uint64_t)v3);
      uint64_t v5 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8)|| (v6 = (void *)a1[1], unint64_t v7 = sub_215DF045C(v6), ++v6[14], sub_215DF1894(v7, (double *)&v5[v4 - 24]), (v8 = (char *)__p) == 0)&& sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0,
             (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v9 = (void *)a1[1];
      unint64_t v10 = sub_215DF045C(v9);
      ++v9[14];
      sub_215DF1894(v10, (double *)&v8[v4]);
      uint64_t v3 = (void *)a1[1];
      uint64_t v11 = v3[6];
      v3[4] = *(void *)(v11 - 8);
      uint64_t v12 = v3[9];
      v3[14] = *(void *)(v12 - 8);
      v3[6] = v11 - 8;
      _DWORD v3[9] = v12 - 8;
      v4 += 48;
      --v2;
    }
    while (v2);
  }
  sub_215A685CC(&v17, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v17;
  long long v17 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    long long v19 = __p;
    operator delete(__p);
  }
}

void sub_215A6C158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6C184(uint64_t *a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)&__p);
    sub_2159A3DA4((uint64_t)v35, (uint64_t *)&__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v35);
        if (!v49) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v31, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(unsigned char *)(v3 + 64) = 0;
    if (v38)
    {
      uint64_t v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(void *)(v3 + 56) = v8;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v40;
    long long v10 = v39;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v43)
    {
      uint64_t v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(void *)(v3 + 112) = v11;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v46)
    {
      uint64_t v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(void *)(v3 + 144) = v12;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(void *)(v3 + 176) = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v47;
    if (!(void)v47) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v47 + 1);
    long long v16 = (void *)v47;
    if (*((void *)&v47 + 1) == (void)v47) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    long long v16 = (void *)v47;
LABEL_45:
    *((void *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)&__p);
  sub_2159A3DA4((uint64_t)v35, (uint64_t *)&__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v31, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = *(_OWORD *)&v35[8];
    *(unsigned char *)(v3 + 64) = 0;
    if (v38)
    {
      uint64_t v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(void *)(v3 + 56) = v17;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v40;
    long long v19 = v39;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v43)
    {
      uint64_t v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(void *)(v3 + 112) = v20;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v46)
    {
      uint64_t v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(void *)(v3 + 144) = v21;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(void *)(v3 + 176) = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v35);
  if (v49)
  {
LABEL_38:
    uint64_t v14 = v47;
    if (!(void)v47) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v47 + 1);
    long long v16 = (void *)v47;
    if (*((void *)&v47 + 1) == (void)v47) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  sub_2157C6F18((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p) = 6;
  sub_215DFABD4(a2, &__p);
  unsigned int v24 = __p;
  if (__p >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p;
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)&__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          char v30 = 0;
          if (SHIBYTE(v34) < 0) {
            goto LABEL_95;
          }
          goto LABEL_81;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      char v30 = 1;
      if (SHIBYTE(v34) < 0) {
LABEL_95:
      }
        operator delete(__p);
LABEL_81:
      if (*(unsigned char *)(a2 + 131)) {
        char v29 = 0;
      }
      else {
        char v29 = v30;
      }
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_215DFABD4(a2, &__p);
  LOBYTE(__p) = 0;
  sub_215DFA01C(a2, &__p);
  *(unsigned char *)(v3 + 200) = (_BYTE)__p;
  sub_215DFB854(a2, (void *)(v3 + 208));
  *(_OWORD *)long long v35 = xmmword_26425A6F8;
  int v26 = *(unsigned __int8 *)(v3 + 200);
  std::string __p = (void *)(v3 + 200);
  uint64_t v33 = a2;
  char v34 = v35;
  sub_215A6C7F4(v26, &__p);
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (SHIBYTE(v34) < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          char v28 = 0;
          if (SHIBYTE(v34) < 0) {
            goto LABEL_80;
          }
          goto LABEL_66;
        }
      }
      else if (SHIBYTE(v34) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      char v28 = 1;
      if (SHIBYTE(v34) < 0) {
LABEL_80:
      }
        operator delete(__p);
LABEL_66:
      if (*(unsigned char *)(a2 + 131)) {
        char v27 = 0;
      }
      else {
        char v27 = v28;
      }
    }
    while ((v27 & 1) != 0);
  }
}

void sub_215A6C7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6C7F4(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A6C8D0(a2);
      break;
    case 1:
      sub_215A6CA68(a2);
      break;
    case 2:
      sub_215A6CC14(a2);
      break;
    case 3:
      sub_215A6CDC4(a2);
      break;
    case 5:
      sub_215A6CF74(a2);
      break;
    case 6:
      sub_215A6D10C(a2);
      break;
    case 7:
      sub_215A6D2B8(a2);
      break;
    case 8:
      sub_215A6D468(a2);
      break;
    case 11:
      sub_215A6D618(a2);
      break;
    case 12:
      sub_215A6D7C8(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A6C8D0(void *a1)
{
  uint64_t v2 = 3 * *(void *)(*a1 + 8);
  int v13 = 0;
  uint64_t v14 = 0;
  size_t v3 = 2 * v2;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    int v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DFA01C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_215A67D38(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    int v13 = __p;
    operator delete(__p);
  }
}

void sub_215A6CA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6CA68(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA594(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A67E2C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6CBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6CC14(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFABD4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A67F20(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6CDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6CDC4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 48 * v2;
    size_t v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB854(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A68014(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6CF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6CF74(void *a1)
{
  uint64_t v2 = 3 * *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  size_t v3 = 2 * v2;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DF9DC4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_215A68108(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A6D0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6D10C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA274(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A681FC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6D294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6D2B8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFA8B4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A682F0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6D444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6D468(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 48 * v2;
    size_t v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB534(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A683E4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6D5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6D618(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFBEC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A684D8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6D7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6D7C8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 48 * v2;
    size_t v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFC1E8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A685CC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6D954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6D978(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    long long v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    long long v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    long long v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v25, a2, v4);
  sub_215A6DDF0((uint64_t)v25, a2, v3 + 200);
}

void sub_215A6DDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6DDF0(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[6] = v3 + 4;
  sub_215D02644(a2);
  sub_215A6DECC(a2, a3);
  uint64_t v9 = a2[12];
  uint64_t v10 = a2[9];
  a2[6] = *(void *)(v9 - 8) + *(void *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_215A6DEB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A6DECC(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  if (v3 <= v2) {
    goto LABEL_6;
  }
  uint64_t v4 = a1[3];
  int v5 = *(unsigned __int8 *)(v4 + v2);
  unint64_t v6 = v2 + 1;
  a1[6] = v6;
  *(unsigned char *)a2 = v5;
  BOOL v7 = v3 >= v6;
  unint64_t v8 = v3 - v6;
  if (!v7) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7)
  {
LABEL_6:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 8) = *(void *)(v4 + v6);
  a1[6] += 8;
  long long v11 = xmmword_26425A6F8;
  v10[0] = a2;
  v10[1] = a1;
  v10[2] = &v11;
  sub_215A6DFD8(v5, v10);
}

void sub_215A6DFB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A6DFC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A6DFD8(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A6E0B4(a2);
      break;
    case 1:
      sub_215A6E2C4(a2);
      break;
    case 2:
      sub_215A6E4E0(a2);
      break;
    case 3:
      sub_215A6E700(a2);
      break;
    case 5:
      sub_215A6E920(a2);
      break;
    case 6:
      sub_215A6EB30(a2);
      break;
    case 7:
      sub_215A6ED4C(a2);
      break;
    case 8:
      sub_215A6EF6C(a2);
      break;
    case 11:
      sub_215A6F18C(a2);
      break;
    case 12:
      sub_215A6F3AC(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A6E0B4(void *a1)
{
  uint64_t v2 = 3 * *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  size_t v3 = 2 * v2;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    long long v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    uint64_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_215A67D38(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    long long v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6E290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6E2C4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 12 * v2;
    int v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[2 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A67E2C(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6E4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6E4E0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 24 * v2;
    int v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A67F20(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6E6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6E700(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 48 * v2;
    int v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A68014(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6E8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6E920(void *a1)
{
  uint64_t v2 = 3 * *(void *)(*a1 + 8);
  long long v19 = 0;
  uint64_t v20 = 0;
  size_t v3 = 2 * v2;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v4 = (char *)operator new(2 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    long long v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    size_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  size_t v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_215A68108(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  long long v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    long long v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6EAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6EB30(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 12 * v2;
    int v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[2 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A681FC(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6ED18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6ED4C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 24 * v2;
    int v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A682F0(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6EF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6EF6C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 48 * v2;
    int v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A683E4(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6F158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6F18C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 24 * v2;
    int v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A684D8(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6F378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6F3AC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 48 * v2;
    int v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_215A685CC(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  long long v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6F598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_215A6F5CC(uint64_t *a1, unsigned char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v7 = a1[1];
  LODWORD(v8[0]) = 1;
  (*(void (**)(uint64_t *, unsigned char **))(v4 + 104))(a1, v8);
  if ((int)v7 < 1)
  {
    v8[0] = a2;
    sub_2159D5570(a1, v8);
    (*(void (**)(uint64_t *, unsigned char *))(*a1 + 120))(a1, a2 + 8);
    long long v9 = xmmword_26425A6F8;
    int v6 = *a2;
    v8[0] = a2;
    v8[1] = a1;
    void v8[2] = &v9;
    sub_215A6FC28(v6, v8);
  }
  else
  {
    sub_215A6F6D0((int *)&v7, a1, a2);
  }
  return a1;
}

void sub_215A6F6D0(int *a1, unsigned char *a2, unsigned char *a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    LODWORD(v10[0]) = 1;
    (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, v10);
    if (LODWORD(v10[0]) >= 2)
    {
      unsigned int v8 = v10[0];
      long long v9 = sub_215A6F834();
      sub_215E07C10((std::string *)v9, v8, 1u);
    }
    int v5 = *a1;
  }
  if (v5 > 0) {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
  }
  v10[0] = a3;
  sub_2159D5570(a2, v10);
  (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 120))(a2, a3 + 8);
  long long v11 = xmmword_26425A6F8;
  int v7 = *a3;
  v10[0] = a3;
  v10[1] = a2;
  v10[2] = &v11;
  sub_215A6FC28(v7, v10);
  if (v5 >= 1) {
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

long long *sub_215A6F834()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889B20, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889B20))
  {
    return &xmmword_267889B08;
  }
  uint64_t v1 = sub_215A6F91C();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889B08, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889B18 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889B08 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889B08, &dword_21572C000);
  __cxa_guard_release(&qword_267889B20);
  return &xmmword_267889B08;
}

void sub_215A6F904(_Unwind_Exception *a1)
{
}

std::string *sub_215A6F91C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889B40, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889B40))
  {
    return &stru_267889B28;
  }
  sub_215A6FA18((uint64_t)__p);
  sub_2157EAAC8(__p, &stru_267889B28);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889B28, &dword_21572C000);
  __cxa_guard_release(&qword_267889B40);
  return &stru_267889B28;
}

void sub_215A6F9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889B40);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889B40);
  _Unwind_Resume(a1);
}

void sub_215A6FA18(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889B60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889B60))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::LinesSample<3>]", qword_267889B48);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889B48, &dword_21572C000);
    __cxa_guard_release(&qword_267889B60);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889B80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889B80))
  {
    size_t v3 = sub_215747D98(qword_267889B48, "<", 0);
    sub_215747C90(qword_267889B48, 0, v3, qword_267889B68);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889B68, &dword_21572C000);
    __cxa_guard_release(&qword_267889B80);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889BA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889BA0))
  {
    sub_215E19DF4((uint64_t)qword_267889B68, (uint64_t)&xmmword_267889B88);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889B88, &dword_21572C000);
    __cxa_guard_release(&qword_267889BA0);
  }
  if (byte_267889B9F < 0)
  {
    long long v2 = xmmword_267889B88;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889B88;
    *(void *)(a1 + 16) = unk_267889B98;
  }
}

void sub_215A6FBE0(_Unwind_Exception *a1)
{
}

void sub_215A6FBF8(_Unwind_Exception *a1)
{
}

void sub_215A6FC10(_Unwind_Exception *a1)
{
}

void sub_215A6FC28(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A6FD04(a2);
      break;
    case 1:
      sub_215A6FEA0(a2);
      break;
    case 2:
      sub_215A70054(a2);
      break;
    case 3:
      sub_215A7020C(a2);
      break;
    case 5:
      sub_215A703C4(a2);
      break;
    case 6:
      sub_215A70560(a2);
      break;
    case 7:
      sub_215A70714(a2);
      break;
    case 8:
      sub_215A708CC(a2);
      break;
    case 11:
      sub_215A70A84(a2);
      break;
    case 12:
      sub_215A70C3C(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A6FD04(void *a1)
{
  uint64_t v2 = 3 * *(void *)(*a1 + 8);
  size_t v12 = 0;
  uint64_t v13 = 0;
  size_t v3 = 2 * v2;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    uint64_t v13 = &v4[v3];
    bzero(v4, v3);
    size_t v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_215A67D38(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  unsigned int v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    size_t v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A6FE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A6FEA0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    uint64_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A67E2C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A70030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A70054(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    uint64_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A67F20(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A701E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A7020C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 48 * v2;
    uint64_t v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A68014(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A703A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A703C4(void *a1)
{
  uint64_t v2 = 3 * *(void *)(*a1 + 8);
  size_t v12 = 0;
  long long v13 = 0;
  size_t v3 = 2 * v2;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    long long v13 = &v4[v3];
    bzero(v4, v3);
    size_t v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_215A68108(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    size_t v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A7053C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A70560(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  uint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    uint64_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    long long v16 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_215A681FC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A706F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A70714(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    uint64_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A682F0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A708A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A708CC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 48 * v2;
    uint64_t v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A683E4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A70A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A70A84(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    uint64_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    long long v16 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_215A684D8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A70C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A70C3C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v15 = 0;
  long long v16 = 0;
  unint64_t v3 = 6 * v2;
  std::string __p = 0;
  if (6 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 48 * v2;
    uint64_t v5 = (char *)operator new(48 * v2);
    std::string __p = v5;
    long long v16 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_215A685CC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  size_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A70DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_215A70DF4(uint64_t a1, uint64_t a2)
{
  v29[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v24);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v24);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v18);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  _OWORD v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  long long v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  _OWORD v13[2] = &v20;
  _OWORD v13[3] = &v21;
  v13[4] = &v22;
  long long v14 = (unsigned __int8 **)&v23;
  if (sub_215AF0A90((uint64_t)&v17, v15, v13))
  {
    if (*((unsigned char *)v16 + 24) && *((unsigned char *)v14 + 24))
    {
      uint64_t v8 = *v16;
      uint64_t v9 = v16[1];
      long long v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_215AEF77C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9) {
              goto LABEL_23;
            }
          }
          goto LABEL_22;
        }
LABEL_23:
        BOOL v11 = sub_215D1E390((int *)(a1 + 200), (int *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((unsigned char *)v16 + 24) != 0) == (*((unsigned char *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  BOOL v11 = 0;
LABEL_24:
  sub_2157C6F18((uint64_t)v18);
  sub_2157C6F18((uint64_t)v24);
  return v11;
}

void sub_215A70FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A70FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A71010(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A7124C((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A714F0(&v11, (uint64_t)v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A716E8((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A7198C(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A71B68(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_215A11FD8((int *)&v11, (uint64_t)a1, a2 + 200);
      }
    }
  }
}

void sub_215A7124C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A714F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v15 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v15, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v15, v7 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC838(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v15 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v15, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v15, v8 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC718(a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v15 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v15, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v15, v6 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159A6DFC(a2, v4, 6u);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v15 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v15, 2u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v15, v14 + 8);
  }
  sub_215A0E5E4((uint64_t)&v15, a2, (int *)(v3 + 200));
}

void sub_215A716E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void *sub_215A7198C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      char v18 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v18, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        char v16 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v16, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      int v10 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v19, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      int v9 = *(void **)(a2 + 24);
      char v17 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v17, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v20 = v7;
  sub_215731D94(v11, (uint64_t)&v20, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    uint64_t v13 = *(void **)(a2 + 24);
    char v21 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v21, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  return sub_215A10B00((uint64_t)&v15, a2, v3 + 200);
}

char *sub_215A71B68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 2;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  return sub_215A119E0((uint64_t)&__src, (void *)a2, (int *)(v3 + 200));
}

void sub_215A71CEC(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A72414(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A729E4(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    unsigned int v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A72E5C(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    unsigned int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A7342C(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      unsigned int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A73A8C(&v10, v8);
      }
      else {
        sub_215A71EB8(&v9, (void **)a1);
      }
    }
  }
}

void sub_215A71EB8(uint64_t *a1, void **a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v30);
    sub_2159A3DA4((uint64_t)&v31, v30);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v31);
        if (!v46) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v29, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v8;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v37;
    long long v10 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v11;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v12;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v44 + 1);
    char v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v44;
LABEL_45:
    *((void *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v30);
  sub_2159A3DA4((uint64_t)&v31, v30);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v29, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v17;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v37;
    long long v19 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v20;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v21;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v44 + 1);
    char v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  sub_2157C6F18((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  char v24 = (void (**)(void **, unsigned int *))*a2;
  v30[0] = (uint64_t)a2[1];
  int v25 = v30[0];
  unsigned int v31 = 6;
  v24[13](a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3) {
      sub_2159B6FFC((uint64_t)&v31, a2, v4, v31);
    }
    else {
      sub_2159B71F0(a2, v4, v31);
    }
  }
  else
  {
    sub_2159B6970((int *)v30, a2, v4, v31);
  }
  uint64_t v26 = (void (**)(void **, unsigned int *))*a2;
  v30[0] = (uint64_t)a2[1];
  int v27 = v30[0];
  unsigned int v31 = 2;
  v26[13](a2, &v31);
  uint64_t v28 = (int *)(v3 + 200);
  if (v27 < 1)
  {
    if (v31 < 2) {
      sub_215A242DC((uint64_t)&v31, (uint64_t)a2, (uint64_t)v28);
    }
    else {
      sub_215A24524((uint64_t)a2, (int *)(v3 + 200));
    }
  }
  else
  {
    sub_215A23D70((int *)v30, (uint64_t)a2, v28, v31);
  }
}

void sub_215A723CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A72414(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    char v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  char v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A7299C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215A729E4(uint64_t *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v26);
    sub_2159A3DA4((uint64_t)v27, v26);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v27);
        if (!v42) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v25, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v8;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v33;
    long long v10 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v11;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v12;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v40 + 1);
    char v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v40;
LABEL_45:
    *((void *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v26);
  sub_2159A3DA4((uint64_t)v27, v26);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v25, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v17;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v33;
    long long v19 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v20;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v21;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v40 + 1);
    char v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (v36 && SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (v31 && SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  sub_2157C6F18((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v26, a2, v4);
  return sub_215A16E44((uint64_t)v26, a2, v3 + 200);
}

void sub_215A72E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A72E5C(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    char v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  char v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A733E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A7342C(uint64_t *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)&__p);
    sub_2159A3DA4((uint64_t)v36, (uint64_t *)&__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v36);
        if (!v51) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v32, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(unsigned char *)(v3 + 64) = 0;
    if (v40)
    {
      uint64_t v8 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(void *)(v3 + 56) = v8;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v42;
    long long v10 = v41;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v45)
    {
      uint64_t v11 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(void *)(v3 + 112) = v11;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v48)
    {
      uint64_t v12 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(void *)(v3 + 144) = v12;
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(void *)(v3 + 176) = v50;
      long long v49 = 0uLL;
      uint64_t v50 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v49;
    if (!(void)v49) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v49 + 1);
    char v16 = (void *)v49;
    if (*((void *)&v49 + 1) == (void)v49) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v49;
LABEL_45:
    *((void *)&v49 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)&__p);
  sub_2159A3DA4((uint64_t)v36, (uint64_t *)&__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v32, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(unsigned char *)(v3 + 64) = 0;
    if (v40)
    {
      uint64_t v17 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(void *)(v3 + 56) = v17;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v42;
    long long v19 = v41;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v45)
    {
      uint64_t v20 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(void *)(v3 + 112) = v20;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v48)
    {
      uint64_t v21 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(void *)(v3 + 144) = v21;
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(void *)(v3 + 176) = v50;
      long long v49 = 0uLL;
      uint64_t v50 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v36);
  if (v51)
  {
LABEL_38:
    uint64_t v14 = v49;
    if (!(void)v49) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v49 + 1);
    char v16 = (void *)v49;
    if (*((void *)&v49 + 1) == (void)v49) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v48 && SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (v45 && SHIBYTE(v44) < 0) {
    operator delete((void *)v43);
  }
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  sub_2157C6F18((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p) = 6;
  sub_215DFABD4(a2, &__p);
  unsigned int v24 = __p;
  if (__p >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p;
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)&__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          char v29 = 0;
          if (v35 < 0) {
            goto LABEL_83;
          }
          goto LABEL_69;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      char v29 = 1;
      if (v35 < 0) {
LABEL_83:
      }
        operator delete(__p);
LABEL_69:
      if (*(unsigned char *)(a2 + 131)) {
        char v28 = 0;
      }
      else {
        char v28 = v29;
      }
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_215DFABD4(a2, &__p);
  unsigned int v26 = __p;
  if (__p >= 2) {
    unsigned int v27 = 2;
  }
  else {
    unsigned int v27 = __p;
  }
  if (v27 < 2) {
    sub_215A1D200((uint64_t)&__p, a2, v3 + 200);
  }
  else {
    sub_215A1D448(a2, v3 + 200);
  }
  if (v26 >= 2 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          char v31 = 0;
          if (v35 < 0) {
            goto LABEL_102;
          }
          goto LABEL_88;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      char v31 = 1;
      if (v35 < 0) {
LABEL_102:
      }
        operator delete(__p);
LABEL_88:
      if (*(unsigned char *)(a2 + 131)) {
        char v30 = 0;
      }
      else {
        char v30 = v31;
      }
    }
    while ((v30 & 1) != 0);
  }
}

void sub_215A73A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A73A8C(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    char v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    char v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v25, a2, v4);
  sub_215A20028((uint64_t)v25, a2, v3 + 200);
}

void sub_215A73EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A73F04(uint64_t a1, uint64_t a2)
{
  v29[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v24);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v24);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v18);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  _OWORD v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  char v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  _OWORD v13[2] = &v20;
  _OWORD v13[3] = &v21;
  v13[4] = &v22;
  uint64_t v14 = (unsigned __int8 **)&v23;
  if (sub_215AF0A90((uint64_t)&v17, v15, v13))
  {
    if (*((unsigned char *)v16 + 24) && *((unsigned char *)v14 + 24))
    {
      uint64_t v8 = *v16;
      uint64_t v9 = v16[1];
      long long v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_215AEF77C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9) {
              goto LABEL_23;
            }
          }
          goto LABEL_22;
        }
LABEL_23:
        uint64_t v11 = sub_215CEBA88((uint64_t *)(a1 + 200), (uint64_t *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((unsigned char *)v16 + 24) != 0) == (*((unsigned char *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  uint64_t v11 = 0;
LABEL_24:
  sub_2157C6F18((uint64_t)v18);
  sub_2157C6F18((uint64_t)v24);
  return v11;
}

void sub_215A740F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A7410C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A74120(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A7435C((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5) {
    sub_215A74660(&v11, (uint64_t)v5);
  }
  uint64_t v11 = a2;
  uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
  if (v6) {
    sub_215A748E4((uint64_t)&v11, (uint64_t)v6);
  }
  uint64_t v11 = a2;
  int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
  if (v7) {
    sub_215A74BE8(&v11, (uint64_t)v7);
  }
  uint64_t v11 = a2;
  uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
  if (v8) {
    sub_215A74E04(&v11, (uint64_t)v8);
  }
  uint64_t v9 = a2 + 16;
  int v10 = *(_DWORD *)(a2 + 192);
  if (v10 == 2)
  {
    uint64_t v11 = a1[1];
    sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
  }
  else if (v10 == 1)
  {
    uint64_t v11 = a1[1];
    sub_2159CFA30((int *)&v11, a1, v9);
  }
  else
  {
    if (v10) {
      sub_215742D4C();
    }
    uint64_t v11 = a1[1];
    sub_2159AAEAC((int *)&v11, a1, v9);
  }
  uint64_t v11 = a1[1];
  sub_215A30524((int *)&v11, (uint64_t)a1, (void *)(a2 + 200));
}

void sub_215A7435C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A74660(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v15 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v15, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v15, v7 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC838(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v15 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v15, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v15, v8 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC718(a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v15 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v15, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v15, v6 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159A6DFC(a2, v4, 6u);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v15 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v15, 2u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v15, v14 + 8);
  }
  sub_215E0076C(*(void *)(a2 + 24));
  sub_215A2C3FC(a2, (void *)(v3 + 200));
}

void sub_215A748E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void sub_215A74BE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      char v16 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        char v14 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      int v10 = *(void **)(a2 + 24);
      char v17 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v17, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      int v9 = *(void **)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v15, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v18 = v7;
  sub_215731D94(v11, (uint64_t)&v18, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    uint64_t v13 = *(void **)(a2 + 24);
    char v19 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v19, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_215A2E5C8(a2, (void *)(v3 + 200));
}

void sub_215A74E04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 2;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
  sub_215D02034((void *)a2);
  sub_215A2F5E4(a2, (void *)(v3 + 200));
}

void sub_215A74FC0(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A756E8(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5) {
    sub_215A75CB8(&v10, v5);
  }
  uint64_t v10 = a2;
  unsigned int v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
  if (v6) {
    sub_215A76130(&v10, (uint64_t)v6);
  }
  uint64_t v10 = a2;
  unsigned int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
  if (v7) {
    sub_215A76700(&v10, (uint64_t)v7);
  }
  uint64_t v10 = a2;
  unsigned int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
  if (v8) {
    sub_215A76D60(&v10, v8);
  }
  sub_215A7518C(&v9, (void **)a1);
}

void sub_215A7518C(uint64_t *a1, void **a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v29);
    sub_2159A3DA4((uint64_t)&v30, v29);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v28, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    char v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v29);
  sub_2159A3DA4((uint64_t)&v30, v29);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)&v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v29);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        char v24 = (void (**)(void **, unsigned int *))*a2;
        v29[0] = (uint64_t)a2[1];
        int v25 = v29[0];
        unsigned int v30 = 6;
        v24[13](a2, &v30);
        if (v25 < 1)
        {
          if (v30 < 3) {
            sub_2159B6FFC((uint64_t)&v30, a2, v4, v30);
          }
          else {
            sub_2159B71F0(a2, v4, v30);
          }
        }
        else
        {
          sub_2159B6970((int *)v29, a2, v4, v30);
        }
        uint64_t v26 = (void (**)(void **, unsigned int *))*a2;
        v29[0] = (uint64_t)a2[1];
        int v27 = v29[0];
        unsigned int v30 = 2;
        v26[13](a2, &v30);
        if (v27 >= 1) {
          sub_215A3C194((int *)v29, (uint64_t)a2, v3 + 200, v30);
        }
        if (v30 >= 2) {
          sub_215A3C700();
        }
        sub_215A3C83C();
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v28, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  char v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A756A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A756E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    char v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  char v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A75C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A75CB8(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    char v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v26);
      if (!v41)
      {
LABEL_46:
        if (v38 && SHIBYTE(v37) < 0) {
          operator delete((void *)v36);
        }
        if (v35 && SHIBYTE(v34) < 0) {
          operator delete((void *)v33);
        }
        if (v30 && SHIBYTE(v29) < 0) {
          operator delete((void *)v28);
        }
        sub_2157C6F18((uint64_t)v25);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        sub_2159AFF3C((uint64_t)v25, a2, v4);
        sub_215A325B4((uint64_t)v25, (uint64_t)a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v27;
  *(unsigned char *)(v3 + 64) = 0;
  if (v30)
  {
    uint64_t v17 = v29;
    *(_OWORD *)(v3 + 40) = v28;
    *(void *)(v3 + 56) = v17;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v32;
  long long v19 = v31;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v35)
  {
    uint64_t v20 = v34;
    *(_OWORD *)(v3 + 96) = v33;
    *(void *)(v3 + 112) = v20;
    long long v33 = 0uLL;
    uint64_t v34 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v38)
  {
    uint64_t v21 = v37;
    *(_OWORD *)(v3 + 128) = v36;
    *(void *)(v3 + 144) = v21;
    long long v36 = 0uLL;
    uint64_t v37 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v41;
  if (v41)
  {
    *(_OWORD *)(v3 + 160) = v39;
    *(void *)(v3 + 176) = v40;
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v39;
  if (!(void)v39) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v39 + 1);
  char v16 = (void *)v39;
  if (*((void *)&v39 + 1) == (void)v39) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A760E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A76130(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    char v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  char v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A766B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A76700(uint64_t *a1, uint64_t a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)__p);
    sub_2159A3DA4((uint64_t)v32, (uint64_t *)__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v32);
        if (!v47) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v29, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(unsigned char *)(v3 + 64) = 0;
    if (v36)
    {
      uint64_t v8 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(void *)(v3 + 56) = v8;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v38;
    long long v10 = v37;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v41)
    {
      uint64_t v11 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(void *)(v3 + 112) = v11;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v44)
    {
      uint64_t v12 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(void *)(v3 + 144) = v12;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(void *)(v3 + 176) = v46;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v45;
    if (!(void)v45) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v45 + 1);
    char v16 = (void *)v45;
    if (*((void *)&v45 + 1) == (void)v45) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v45;
LABEL_45:
    *((void *)&v45 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)__p);
  sub_2159A3DA4((uint64_t)v32, (uint64_t *)__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v32);
      if (!v47)
      {
LABEL_46:
        if (v44 && SHIBYTE(v43) < 0) {
          operator delete((void *)v42);
        }
        if (v41 && SHIBYTE(v40) < 0) {
          operator delete((void *)v39);
        }
        if (v36 && SHIBYTE(v35) < 0) {
          operator delete((void *)v34);
        }
        sub_2157C6F18((uint64_t)__p);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        LODWORD(__p[0]) = 6;
        sub_215DFABD4(a2, __p);
        unsigned int v24 = __p[0];
        if (LODWORD(__p[0]) >= 6) {
          unsigned int v25 = 6;
        }
        else {
          unsigned int v25 = __p[0];
        }
        if (v25 < 3) {
          sub_2159B3640((uint64_t)__p, a2, v4, v25);
        }
        else {
          sub_2159B3834(a2, v4, v25);
        }
        if (v24 < 3 || *(unsigned char *)(a2 + 131))
        {
LABEL_64:
          LODWORD(__p[0]) = 2;
          sub_215DFABD4(a2, __p);
          if (LODWORD(__p[0]) >= 2) {
            unsigned int v26 = 2;
          }
          else {
            unsigned int v26 = __p[0];
          }
          if (v26 >= 2) {
            sub_215A366BC();
          }
          sub_215A367F8();
        }
        while (1)
        {
          if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
            goto LABEL_64;
          }
          sub_215DFD700(a2, (uint64_t)__p);
          if (v31 < 0)
          {
            if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
            {
LABEL_80:
              char v28 = 0;
              if (v31 < 0) {
                goto LABEL_83;
              }
              goto LABEL_69;
            }
          }
          else if (v31 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
          {
            goto LABEL_80;
          }
          char v28 = 1;
          if (v31 < 0) {
LABEL_83:
          }
            operator delete(__p[0]);
LABEL_69:
          if (*(unsigned char *)(a2 + 131)) {
            char v27 = 0;
          }
          else {
            char v27 = v28;
          }
          if ((v27 & 1) == 0) {
            goto LABEL_64;
          }
        }
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v29, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v33;
  *(unsigned char *)(v3 + 64) = 0;
  if (v36)
  {
    uint64_t v17 = v35;
    *(_OWORD *)(v3 + 40) = v34;
    *(void *)(v3 + 56) = v17;
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v38;
  long long v19 = v37;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v41)
  {
    uint64_t v20 = v40;
    *(_OWORD *)(v3 + 96) = v39;
    *(void *)(v3 + 112) = v20;
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v44)
  {
    uint64_t v21 = v43;
    *(_OWORD *)(v3 + 128) = v42;
    *(void *)(v3 + 144) = v21;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v47;
  if (v47)
  {
    *(_OWORD *)(v3 + 160) = v45;
    *(void *)(v3 + 176) = v46;
    long long v45 = 0uLL;
    uint64_t v46 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v45;
  if (!(void)v45) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v45 + 1);
  char v16 = (void *)v45;
  if (*((void *)&v45 + 1) == (void)v45) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A76D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A76D60(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    char v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v26);
      if (!v41)
      {
LABEL_46:
        if (v38 && SHIBYTE(v37) < 0) {
          operator delete((void *)v36);
        }
        if (v35 && SHIBYTE(v34) < 0) {
          operator delete((void *)v33);
        }
        if (v30 && SHIBYTE(v29) < 0) {
          operator delete((void *)v28);
        }
        sub_2157C6F18((uint64_t)v25);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        sub_2159B5060((uint64_t)v25, a2, v4);
        sub_215A39320((uint64_t)v25, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v27;
  *(unsigned char *)(v3 + 64) = 0;
  if (v30)
  {
    uint64_t v17 = v29;
    *(_OWORD *)(v3 + 40) = v28;
    *(void *)(v3 + 56) = v17;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v32;
  long long v19 = v31;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v35)
  {
    uint64_t v20 = v34;
    *(_OWORD *)(v3 + 96) = v33;
    *(void *)(v3 + 112) = v20;
    long long v33 = 0uLL;
    uint64_t v34 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v38)
  {
    uint64_t v21 = v37;
    *(_OWORD *)(v3 + 128) = v36;
    *(void *)(v3 + 144) = v21;
    long long v36 = 0uLL;
    uint64_t v37 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v41;
  if (v41)
  {
    *(_OWORD *)(v3 + 160) = v39;
    *(void *)(v3 + 176) = v40;
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v39;
  if (!(void)v39) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v39 + 1);
  char v16 = (void *)v39;
  if (*((void *)&v39 + 1) == (void)v39) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A77190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_215A771D8(uint64_t a1, uint64_t a2)
{
  v37[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v32);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v32);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v32);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v26);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v26);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v26);
  }
  v23[0] = v32;
  v23[1] = &v33;
  v23[2] = &v34;
  v23[3] = &v35;
  v23[4] = &v36;
  char v24 = v37;
  v21[0] = v26;
  v21[1] = &v27;
  void v21[2] = &v28;
  v21[3] = &v29;
  v21[4] = &v30;
  int v22 = &v31;
  if (!sub_215AF0A90((uint64_t)&v25, v23, v21)) {
    goto LABEL_35;
  }
  if (!*((unsigned char *)v24 + 24) || !*((unsigned char *)v22 + 24))
  {
    if ((*((unsigned char *)v24 + 24) != 0) == (*((unsigned char *)v22 + 24) != 0)) {
      goto LABEL_22;
    }
LABEL_35:
    BOOL v19 = 0;
    goto LABEL_36;
  }
  uint64_t v8 = (unsigned __int8 *)*v24;
  uint64_t v9 = (unsigned __int8 *)v24[1];
  long long v10 = (unsigned __int8 *)*v22;
  if (&v9[-*v24] != (unsigned __int8 *)(v22[1] - *v22)) {
    goto LABEL_35;
  }
  if (v8 != v9)
  {
    while (sub_215AEF77C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    goto LABEL_35;
  }
LABEL_22:
  if (*(void *)(a1 + 200) != *(void *)(a2 + 200)) {
    goto LABEL_35;
  }
  uint64_t v11 = *(void *)(a1 + 224);
  if (v11 != *(void *)(a2 + 224)) {
    goto LABEL_35;
  }
  uint64_t v12 = *(unsigned __int8 **)(a1 + 232);
  int v13 = *(unsigned __int8 **)(a2 + 232);
  uint64_t v14 = &v12[v11];
  uint64_t v15 = &v13[v11];
  if (v11)
  {
    uint64_t v16 = v11 - 1;
    while (1)
    {
      uint64_t v17 = v16;
      if (*v12 != *v13) {
        goto LABEL_35;
      }
      ++v12;
      ++v13;
      --v16;
      if (!v17)
      {
        int v13 = v15;
        uint64_t v12 = v14;
        break;
      }
    }
  }
  BOOL v19 = v12 == v14 && v13 == v15;
LABEL_36:
  sub_2157C6F18((uint64_t)v26);
  sub_2157C6F18((uint64_t)v32);
  return v19;
}

void sub_215A77420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A77440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A77454(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A77690((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A77994(&v11, (uint64_t)v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A77C18((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A77F1C(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A78138(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_215A40A9C((int *)&v11, (uint64_t)a1, a2 + 200);
      }
    }
  }
}

void sub_215A77690(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A77994(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v20 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v20, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v7 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC838(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v20 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v20, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v8 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC718(a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v20 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v20, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v6 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159A6DFC(a2, v4, 6u);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v20 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v20, 2u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v14 + 8);
  }
  sub_215E0076C(*(void *)(a2 + 24));
  sub_215A40340(a2, v3 + 200);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
  sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
  size_t v17 = *(void *)(v15 + 48);
  if (v17) {
    memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  }
  *(void *)(v15 + 48) = 0;
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = *(void *)(v15 + 88) - 8;
  *(void *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(unsigned char *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(unsigned char *)(v15 + 40) = 0;
    }
  }
}

void sub_215A77C18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void *sub_215A77F1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      char v20 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        char v18 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      int v10 = *(void **)(a2 + 24);
      char v21 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      int v9 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v22 = v7;
  sub_215731D94(v11, (uint64_t)&v22, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    uint64_t v13 = *(void **)(a2 + 24);
    char v23 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_215A407F0(a2, v3 + 200);
  char v14 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void **)(a2 + 24);
    char v24 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v15, (uint64_t)&v24, 1);
  }
  uint64_t v16 = *(void **)(a2 + 24);
  char v25 = v14;
  uint64_t result = sub_215731D94(v16, (uint64_t)&v25, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A78138(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 2;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_215D02034((void *)a2);
  sub_215A4094C(a2, (uint64_t *)(v3 + 200));
  uint64_t v10 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v10 + 10) = *(void *)(a2 + 32) - v10 - 18;
  *(void *)(a2 + 56) -= 8;
}

void sub_215A782F4(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A78A1C(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A78FEC(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    unsigned int v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A79464(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    unsigned int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A79A34(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      unsigned int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A7A094(&v10, v8);
      }
      else {
        sub_215A784C0(&v9, (void **)a1);
      }
    }
  }
}

void sub_215A784C0(uint64_t *a1, void **a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v30);
    sub_2159A3DA4((uint64_t)&v31, v30);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v31);
        if (!v46) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v29, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v8;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v37;
    long long v10 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v11;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v12;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v44;
LABEL_45:
    *((void *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v30);
  sub_2159A3DA4((uint64_t)&v31, v30);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v29, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v17;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v37;
    long long v19 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v20;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v21;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  sub_2157C6F18((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  char v24 = (void (**)(void **, unsigned int *))*a2;
  v30[0] = (uint64_t)a2[1];
  int v25 = v30[0];
  unsigned int v31 = 6;
  v24[13](a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3) {
      sub_2159B6FFC((uint64_t)&v31, a2, v4, v31);
    }
    else {
      sub_2159B71F0(a2, v4, v31);
    }
  }
  else
  {
    sub_2159B6970((int *)v30, a2, v4, v31);
  }
  unsigned int v26 = (void (**)(void **, unsigned int *))*a2;
  v30[0] = (uint64_t)a2[1];
  int v27 = v30[0];
  unsigned int v31 = 2;
  v26[13](a2, &v31);
  uint64_t v28 = v3 + 200;
  if (v27 < 1)
  {
    if (v31 < 2) {
      sub_215A42AFC((uint64_t)&v31, (uint64_t)a2, v28);
    }
    else {
      sub_215A42C84((uint64_t)a2, v3 + 200);
    }
  }
  else
  {
    sub_215A42768((int *)v30, (uint64_t)a2, v28, v31);
  }
}

void sub_215A789D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A78A1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A78FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A78FEC(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v25, a2, v4);
  sub_215A41244((uint64_t)v25, a2, v3 + 200);
}

void sub_215A7941C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A79464(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A799EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A79A34(uint64_t *a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)&__p);
    sub_2159A3DA4((uint64_t)v36, (uint64_t *)&__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v36);
        if (!v51) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v32, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(unsigned char *)(v3 + 64) = 0;
    if (v40)
    {
      uint64_t v8 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(void *)(v3 + 56) = v8;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v42;
    long long v10 = v41;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v45)
    {
      uint64_t v11 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(void *)(v3 + 112) = v11;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v48)
    {
      uint64_t v12 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(void *)(v3 + 144) = v12;
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(void *)(v3 + 176) = v50;
      long long v49 = 0uLL;
      uint64_t v50 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v49;
    if (!(void)v49) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v49 + 1);
    uint64_t v16 = (void *)v49;
    if (*((void *)&v49 + 1) == (void)v49) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v49;
LABEL_45:
    *((void *)&v49 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)&__p);
  sub_2159A3DA4((uint64_t)v36, (uint64_t *)&__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v32, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v37;
    *(unsigned char *)(v3 + 64) = 0;
    if (v40)
    {
      uint64_t v17 = v39;
      *(_OWORD *)(v3 + 40) = v38;
      *(void *)(v3 + 56) = v17;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v42;
    long long v19 = v41;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v45)
    {
      uint64_t v20 = v44;
      *(_OWORD *)(v3 + 96) = v43;
      *(void *)(v3 + 112) = v20;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v48)
    {
      uint64_t v21 = v47;
      *(_OWORD *)(v3 + 128) = v46;
      *(void *)(v3 + 144) = v21;
      long long v46 = 0uLL;
      uint64_t v47 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v51;
    if (v51)
    {
      *(_OWORD *)(v3 + 160) = v49;
      *(void *)(v3 + 176) = v50;
      long long v49 = 0uLL;
      uint64_t v50 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v36);
  if (v51)
  {
LABEL_38:
    uint64_t v14 = v49;
    if (!(void)v49) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v49 + 1);
    uint64_t v16 = (void *)v49;
    if (*((void *)&v49 + 1) == (void)v49) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v48 && SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  if (v45 && SHIBYTE(v44) < 0) {
    operator delete((void *)v43);
  }
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  sub_2157C6F18((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p) = 6;
  sub_215DFABD4(a2, &__p);
  unsigned int v24 = __p;
  if (__p >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p;
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)&__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          char v29 = 0;
          if (v35 < 0) {
            goto LABEL_83;
          }
          goto LABEL_69;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      char v29 = 1;
      if (v35 < 0) {
LABEL_83:
      }
        operator delete(__p);
LABEL_69:
      if (*(unsigned char *)(a2 + 131)) {
        char v28 = 0;
      }
      else {
        char v28 = v29;
      }
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_215DFABD4(a2, &__p);
  unsigned int v26 = __p;
  if (__p >= 2) {
    unsigned int v27 = 2;
  }
  else {
    unsigned int v27 = __p;
  }
  if (v27 < 2) {
    sub_215A41C40((uint64_t)&__p, a2, v3 + 200);
  }
  else {
    sub_215A41DC8(a2, v3 + 200);
  }
  if (v26 >= 2 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v35 < 0)
      {
        if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_99:
          char v31 = 0;
          if (v35 < 0) {
            goto LABEL_102;
          }
          goto LABEL_88;
        }
      }
      else if (v35 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_99;
      }
      char v31 = 1;
      if (v35 < 0) {
LABEL_102:
      }
        operator delete(__p);
LABEL_88:
      if (*(unsigned char *)(a2 + 131)) {
        char v30 = 0;
      }
      else {
        char v30 = v31;
      }
    }
    while ((v30 & 1) != 0);
  }
}

void sub_215A7A04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A7A094(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v25, a2, v4);
  sub_215A42048((uint64_t)v25, a2, v3 + 200);
}

void sub_215A7A4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A7A50C(uint64_t a1)
{
  *(void *)a1 = &unk_26C677100;
  sub_2157C6F18(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

__n128 sub_215A7A5B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C677100;
  long long v2 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v3;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  long long v5 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 96) = 0;
  long long v6 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = v6;
  *(unsigned char *)(a1 + 168) = 0;
  if (*(unsigned char *)(a2 + 168))
  {
    long long v7 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v7;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 144) = 0;
    *(unsigned char *)(a1 + 168) = 1;
  }
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  if (*(unsigned char *)(a2 + 200))
  {
    long long v8 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = v8;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 176) = 0;
    *(unsigned char *)(a1 + 200) = 1;
  }
  __n128 result = *(__n128 *)(a2 + 208);
  uint64_t v10 = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = v10;
  *(__n128 *)(a1 + 208) = result;
  *(unsigned char *)(a1 + 288) = 0;
  if (*(unsigned char *)(a2 + 288))
  {
    _X2 = 0;
    _X3 = 0;
    __n128 result = *(__n128 *)(a2 + 240);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(__n128 *)(a1 + 240) = result;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 240) = 0;
    __asm { CASPAL          X2, X3, X2, X3, [X8] }
    *(void *)(a1 + 272) = _X2;
    *(void *)(a1 + 280) = 0;
    *(unsigned char *)(a1 + 288) = 1;
  }
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  if (*(unsigned char *)(a2 + 328))
  {
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 312) = 0;
    *(void *)(a1 + 320) = 0;
    __n128 result = *(__n128 *)(a2 + 304);
    *(__n128 *)(a1 + 304) = result;
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 312) = 0;
    *(void *)(a2 + 320) = 0;
    *(unsigned char *)(a1 + 328) = 1;
  }
  return result;
}

void sub_215A7A74C(uint64_t a1)
{
  *(void *)a1 = &unk_26C677100;
  sub_2157C6F18(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    operator delete(*(void **)(a1 + 8));
LABEL_5:
    JUMPOUT(0x2166C4D20);
  }
LABEL_10:
  operator delete(*(void **)(a1 + 40));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_11;
}

uint64_t sub_215A7A80C(uint64_t a1)
{
  return a1 + 128;
}

unsigned __int8 **sub_215A7A814(char *a1, char *lpsrc)
{
  __n128 result = (unsigned __int8 **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D60, (const struct __class_type_info *)&unk_26C6770C0, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return (unsigned __int8 **)1;
    }
    else
    {
      v6[0] = a1 + 8;
      v6[1] = a1 + 32;
      v6[2] = a1 + 40;
      v6[3] = a1 + 64;
      v6[4] = a1 + 72;
      v6[5] = a1 + 96;
      v5[0] = result + 1;
      v5[1] = result + 4;
      uint64_t v5[2] = result + 5;
      v5[3] = result + 8;
      v5[4] = result + 9;
      v5[5] = result + 12;
      return (unsigned __int8 **)sub_215A7C038((uint64_t)v6, v5);
    }
  }
  return result;
}

void sub_215A7A900(uint64_t a1)
{
}

void sub_215A7A99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A7A9B8(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678899A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678899A0))
  {
    long long v2 = sub_215A7BCCC();
    uint64_t v3 = *((void *)v2 + 1);
    if (*((char *)v2 + 23) >= 0)
    {
      uint64_t v4 = *((unsigned __int8 *)v2 + 23);
    }
    else
    {
      long long v2 = *(long long **)v2;
      uint64_t v4 = v3;
    }
    sub_2157C6A10((char *)v2, v4, "::", 2, 0, (uint64_t)&v6);
    if (*(char *)(v7 - 1) < 0)
    {
      sub_215738B0C(&xmmword_267889988, *(void **)(v7 - 24), *(void *)(v7 - 16));
    }
    else
    {
      long long v5 = *(_OWORD *)(v7 - 24);
      qword_267889998 = *(void *)(v7 - 8);
      xmmword_267889988 = v5;
    }
    sub_2157352DC(&v6);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889988, &dword_21572C000);
    __cxa_guard_release(&qword_2678899A0);
  }
  sub_215A7C68C(&xmmword_267889988, "{", (const char *)(a1 + 8));
}

void sub_215A7AAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A7AAF4(_Unwind_Exception *a1)
{
}

void sub_215A7AB0C(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 10;
}

void sub_215A7AB38(void *lpsrc@<X0>, void *a2@<X8>)
{
}

uint64_t sub_215A7AB88(uint64_t a1)
{
  *(void *)a1 = &unk_26C677100;
  sub_2157C6F18(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_215A7AC34(uint64_t a1)
{
  *(void *)a1 = &unk_26C677100;
  sub_2157C6F18(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_11:
    operator delete(*(void **)(a1 + 8));
LABEL_5:
    JUMPOUT(0x2166C4D20);
  }
LABEL_10:
  operator delete(*(void **)(a1 + 40));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    goto LABEL_5;
  }
  goto LABEL_11;
}

void sub_215A7ACF4(uint64_t a1)
{
  long long v2 = sub_215A7B720();
  sub_215A7AE30(v2, "{", (const char *)(a1 + 8));
}

void sub_215A7AD50(uint64_t a1)
{
}

void sub_215A7AD58(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_215A7AD84(uint64_t a1)
{
  *(void *)a1 = &unk_26C677100;
  sub_2157C6F18(a1 + 128);
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 40));
      if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_215A7AE30(long long *a1, const char *a2, const char *a3)
{
  int v7 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_215738B0C(&v5, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long v5 = *a1;
    uint64_t v6 = *((void *)a1 + 2);
  }
  int v7 = 1;
  long long v8 = (const char *)&v5;
  uint64_t v9 = a2;
  uint64_t v10 = &v5;
  uint64_t v11 = a2;
  uint64_t v12 = a2;
  sub_2157492F0((uint64_t *)&v10, (uint64_t)&v5);
  long long v8 = a3;
  uint64_t v9 = a3 + 24;
  uint64_t v10 = (long long *)(a3 + 32);
  uint64_t v11 = a3 + 56;
  uint64_t v12 = a3 + 64;
  int v13 = a3 + 88;
  uint64_t v15 = &v5;
  uint64_t v16 = "{";
  uint64_t v17 = &v5;
  uint64_t v18 = "{";
  long long v19 = "{";
  if (v7 != -1)
  {
    uint64_t v20 = &v15;
    ((void (*)(long long ***, long long *))off_26C674C98[v7])(&v20, &v5);
    LOBYTE(v15) = 1;
    uint64_t v16 = (const char *)&v5;
    uint64_t v17 = (long long *)&v14;
    sub_215A7B114(&v8, (uint64_t)&v15);
  }
  sub_215742D4C();
}

void sub_215A7B084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7B09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7B0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7B0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7B0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7B0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7B100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7B114(const char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (!*(unsigned char *)a2)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    long long v8 = ",";
    uint64_t v9 = v7;
    uint64_t v10 = ",";
    uint64_t v11 = ",";
    uint64_t v4 = *(unsigned int *)(v7 + 24);
    if (v4 == -1) {
      goto LABEL_9;
    }
    uint64_t v12 = &v7;
    ((void (*)(uint64_t **))off_26C674C98[v4])(&v12);
  }
  *(unsigned char *)a2 = 0;
  uint64_t v7 = *(void *)(a2 + 8);
  long long v8 = v3;
  uint64_t v9 = v7;
  uint64_t v10 = v3;
  uint64_t v11 = v3;
  uint64_t v5 = *(unsigned int *)(v7 + 24);
  if (v5 != -1)
  {
    uint64_t v12 = &v7;
    ((void (*)(uint64_t **))off_26C674C80[v5])(&v12);
    if (*(unsigned char *)a2) {
      goto LABEL_8;
    }
    uint64_t v7 = *(void *)(a2 + 8);
    long long v8 = ",";
    uint64_t v9 = v7;
    uint64_t v10 = ",";
    uint64_t v11 = ",";
    uint64_t v6 = *(unsigned int *)(v7 + 24);
    if (v6 != -1)
    {
      uint64_t v12 = &v7;
      ((void (*)(uint64_t **))off_26C674C98[v6])(&v12);
LABEL_8:
      *(unsigned char *)a2 = 0;
      sub_215A7B4CC();
    }
  }
LABEL_9:
  sub_215742D4C();
}

void sub_215A7B3C0(uint64_t a1, unsigned int *a2)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = (std::string *)",";
    uint64_t v10 = v8;
    uint64_t v11 = (std::string *)",";
    uint64_t v12 = (std::string *)",";
    uint64_t v4 = *(unsigned int *)(v8 + 24);
    if (v4 == -1) {
      sub_215742D4C();
    }
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *))off_26C674C98[v4])(&v7);
  }
  *(unsigned char *)a1 = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  std::to_string(&v7, *a2);
  uint64_t v8 = v5;
  uint64_t v9 = &v7;
  uint64_t v10 = v5;
  uint64_t v11 = &v7;
  uint64_t v12 = &v7;
  uint64_t v6 = *(unsigned int *)(v5 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  int v13 = &v8;
  ((void (*)(uint64_t **, uint64_t))off_26C674B78[v6])(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_215A7B4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A7B4CC()
{
}

void sub_215A7B6B8(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215A7B6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_215A7B720()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889860, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889860))
  {
    return &xmmword_267889848;
  }
  uint64_t v1 = sub_215A7B808();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267889848, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267889858 = v1->__r_.__value_.__r.__words[2];
    xmmword_267889848 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889848, &dword_21572C000);
  __cxa_guard_release(&qword_267889860);
  return &xmmword_267889848;
}

void sub_215A7B7F0(_Unwind_Exception *a1)
{
}

std::string *sub_215A7B808()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889880, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889880))
  {
    return &stru_267889868;
  }
  sub_215A7BABC((uint64_t)__p);
  sub_215A7B904(__p, &stru_267889868);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889868, &dword_21572C000);
  __cxa_guard_release(&qword_267889880);
  return &stru_267889868;
}

void sub_215A7B8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889880);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889880);
  _Unwind_Resume(a1);
}

void sub_215A7B904(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_215A7BCCC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_215738B0C(__dst, *(void **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    uint64_t v16 = *((void *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  uint64_t v6 = sub_2157C6008();
  if (*((char *)v6 + 23) < 0)
  {
    sub_215738B0C(&v17, *(void **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    uint64_t v18 = *((void *)v6 + 2);
    long long v17 = v7;
  }
  sub_21573A150(&__p, (uint64_t)__dst, 2uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, a2, v8, v9);
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    uint64_t v11 = v14;
    uint64_t v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    char v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0) {
    goto LABEL_19;
  }
}

void sub_215A7BA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215A7BABC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889900, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889900))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::TextLog>]", qword_2678898E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678898E8, &dword_21572C000);
    __cxa_guard_release(&qword_267889900);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889920, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889920))
  {
    size_t v3 = sub_215747D98(qword_2678898E8, "<", 0);
    sub_215747C90(qword_2678898E8, 0, v3, qword_267889908);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889908, &dword_21572C000);
    __cxa_guard_release(&qword_267889920);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889940))
  {
    sub_215E19DF4((uint64_t)qword_267889908, (uint64_t)&xmmword_267889928);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889928, &dword_21572C000);
    __cxa_guard_release(&qword_267889940);
  }
  if (byte_26788993F < 0)
  {
    long long v2 = xmmword_267889928;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889928;
    *(void *)(a1 + 16) = unk_267889938;
  }
}

void sub_215A7BC84(_Unwind_Exception *a1)
{
}

void sub_215A7BC9C(_Unwind_Exception *a1)
{
}

void sub_215A7BCB4(_Unwind_Exception *a1)
{
}

long long *sub_215A7BCCC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678898A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678898A0))
  {
    return &xmmword_267889888;
  }
  uint64_t v1 = (char *)sub_215A7BDB4();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_267889888, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267889898 = *((void *)v1 + 2);
    xmmword_267889888 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889888, &dword_21572C000);
  __cxa_guard_release(&qword_2678898A0);
  return &xmmword_267889888;
}

void sub_215A7BD9C(_Unwind_Exception *a1)
{
}

void *sub_215A7BDB4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678898C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678898C0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::TextLog]", qword_2678898A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678898A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678898C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678898E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678898E0))
  {
    return &unk_2678898C8;
  }
  sub_215E19DF4((uint64_t)qword_2678898A8, (uint64_t)&unk_2678898C8);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_2678898C8, &dword_21572C000);
  __cxa_guard_release(&qword_2678898E0);
  return &unk_2678898C8;
}

void sub_215A7BEB8(_Unwind_Exception *a1)
{
}

void sub_215A7BED0(_Unwind_Exception *a1)
{
}

void sub_215A7BEE8(const char *a1)
{
  v1[6] = 0;
  v2[0] = a1;
  v2[1] = a1 + 24;
  v2[2] = a1 + 32;
  v2[3] = a1 + 56;
  v2[4] = a1 + 64;
  v2[5] = a1 + 88;
  sub_2157491FC(v1, "{");
  LOBYTE(v4[0]) = 1;
  v4[1] = v1;
  void v4[2] = &v3;
  sub_215A7B114(v2, (uint64_t)v4);
}

void sub_215A7C010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A7C024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215A7C038(uint64_t a1, unsigned __int8 ***a2)
{
  long long v2 = *(const void ***)a1;
  char v3 = *a2;
  uint64_t v4 = *(unsigned __int8 *)(*(void *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    long long v5 = (unsigned __int8 *)*(unsigned __int8 *)(*(void *)a1 + 23);
  }
  else {
    long long v5 = *(unsigned __int8 **)(*(void *)a1 + 8);
  }
  uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v7 = (char)v6;
  if ((char)v6 < 0) {
    uint64_t v6 = v3[1];
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 >= 0) {
    uint64_t v10 = *a2;
  }
  else {
    uint64_t v10 = (unsigned __int8 **)*v3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v10, *(void *)(*(void *)a1 + 8))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(*(void *)a1 + 23))
  {
    while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v10)
    {
      long long v2 = (const void **)((char *)v2 + 1);
      uint64_t v10 = (unsigned __int8 **)((char *)v10 + 1);
      if (!--v4) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  if (**(_DWORD **)(a1 + 8) != *(_DWORD *)a2[1]) {
    return 0;
  }
  uint64_t v12 = *(unsigned __int8 **)(a1 + 16);
  int v13 = (unsigned __int8 *)a2[2];
  uint64_t v14 = v12[23];
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = (unsigned __int8 *)v12[23];
  }
  else {
    uint64_t v15 = (unsigned __int8 *)*((void *)v12 + 1);
  }
  uint64_t v16 = (unsigned __int8 *)v13[23];
  int v17 = (char)v16;
  if ((char)v16 < 0) {
    uint64_t v16 = (unsigned __int8 *)*((void *)v13 + 1);
  }
  if (v15 != v16) {
    return 0;
  }
  if (v17 >= 0) {
    uint64_t v18 = (unsigned __int8 *)a2[2];
  }
  else {
    uint64_t v18 = *(unsigned __int8 **)v13;
  }
  if ((v14 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v12, v18, *((void *)v12 + 1))) {
      return 0;
    }
  }
  else if (v12[23])
  {
    while (*v12 == *v18)
    {
      ++v12;
      ++v18;
      if (!--v14) {
        goto LABEL_34;
      }
    }
    return 0;
  }
LABEL_34:
  if (**(_DWORD **)(a1 + 24) != *(_DWORD *)a2[3]) {
    return 0;
  }
  uint64_t v19 = *(unsigned __int8 **)(a1 + 32);
  uint64_t v20 = (unsigned __int8 *)a2[4];
  uint64_t v21 = v19[23];
  if ((v21 & 0x80u) == 0) {
    int v22 = (unsigned __int8 *)v19[23];
  }
  else {
    int v22 = (unsigned __int8 *)*((void *)v19 + 1);
  }
  uint64_t v23 = (unsigned __int8 *)v20[23];
  int v24 = (char)v23;
  if ((char)v23 < 0) {
    uint64_t v23 = (unsigned __int8 *)*((void *)v20 + 1);
  }
  if (v22 != v23) {
    return 0;
  }
  if (v24 >= 0) {
    unsigned int v25 = (unsigned __int8 *)a2[4];
  }
  else {
    unsigned int v25 = *(unsigned __int8 **)v20;
  }
  if ((v21 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v19, v25, *((void *)v19 + 1))) {
      goto LABEL_50;
    }
    return 0;
  }
  if (v19[23])
  {
    while (*v19 == *v25)
    {
      ++v19;
      ++v25;
      if (!--v21) {
        goto LABEL_50;
      }
    }
    return 0;
  }
LABEL_50:
  unsigned int v26 = *(unsigned __int8 **)(a1 + 40);
  long long v27 = (unsigned __int8 *)a2[5];
  uint64_t v28 = v26[23];
  if ((v28 & 0x80u) == 0) {
    uint64_t v29 = (unsigned __int8 *)v26[23];
  }
  else {
    uint64_t v29 = (unsigned __int8 *)*((void *)v26 + 1);
  }
  char v30 = (unsigned __int8 *)v27[23];
  int v31 = (char)v30;
  if ((char)v30 < 0) {
    char v30 = (unsigned __int8 *)*((void *)v27 + 1);
  }
  if (v29 != v30) {
    return 0;
  }
  if (v31 >= 0) {
    uint64_t v32 = (unsigned __int8 *)a2[5];
  }
  else {
    uint64_t v32 = *(unsigned __int8 **)v27;
  }
  if ((v28 & 0x80) != 0) {
    return memcmp(*(const void **)v26, v32, *((void *)v26 + 1)) == 0;
  }
  if (!v26[23]) {
    return 1;
  }
  uint64_t v33 = v28 - 1;
  do
  {
    int v35 = *v26++;
    int v34 = v35;
    int v37 = *v32++;
    int v36 = v37;
    BOOL v39 = v33-- != 0;
    uint64_t result = v34 == v36;
  }
  while (v34 == v36 && v39);
  return result;
}

std::string *sub_215A7C2B4()
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889960, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889960))
  {
    sub_215732BF4(v8, "viz::PackageData");
    uint64_t v1 = sub_215A7BCCC();
    if (*((char *)v1 + 23) < 0)
    {
      sub_215738B0C(__dst, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      uint64_t v11 = *((void *)v1 + 2);
      *(_OWORD *)__dst = v2;
    }
    *(_OWORD *)uint64_t v12 = *(_OWORD *)"viz::Package";
    uint64_t v13 = 0xC00000000000000;
    char v3 = sub_215A7C588();
    if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_215738B0C(&v14, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      std::string::size_type v15 = v3->__r_.__value_.__r.__words[2];
      long long v14 = v4;
    }
    *(_OWORD *)std::string __p = *(_OWORD *)"void";
    uint64_t v17 = 0x400000000000000;
    sub_21573A150(v7, (uint64_t)__dst, 4uLL);
    sub_215E19EAC(v8, (uint64_t *)v7, &stru_267889948, v5, v6);
    sub_2157352DC(v7);
    if (SHIBYTE(v17) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v15) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v13) & 0x80000000) == 0) {
          goto LABEL_13;
        }
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v15) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v14);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v12[0]);
    if ((SHIBYTE(v11) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v9 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889948, &dword_21572C000);
        __cxa_guard_release(&qword_267889960);
        return &stru_267889948;
      }
LABEL_20:
      operator delete(v8[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }
  return &stru_267889948;
}

void sub_215A7C4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_267889960);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_267889960);
  _Unwind_Resume(a1);
}

std::string *sub_215A7C588()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889980, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889980))
  {
    return &stru_267889968;
  }
  sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 10U]", __p);
  sub_215E1A038((uint64_t)__p, &stru_267889968);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267889968, &dword_21572C000);
  __cxa_guard_release(&qword_267889980);
  return &stru_267889968;
}

void sub_215A7C64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889980);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889980);
  _Unwind_Resume(a1);
}

void sub_215A7C68C(long long *a1, const char *a2, const char *a3)
{
  int v7 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_215738B0C(&v5, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long v5 = *a1;
    uint64_t v6 = *((void *)a1 + 2);
  }
  int v7 = 1;
  int64x2_t v8 = (const char *)&v5;
  char v9 = a2;
  uint64_t v10 = &v5;
  uint64_t v11 = a2;
  uint64_t v12 = a2;
  sub_2157492F0((uint64_t *)&v10, (uint64_t)&v5);
  int64x2_t v8 = a3;
  char v9 = a3 + 24;
  uint64_t v10 = (long long *)(a3 + 32);
  uint64_t v11 = a3 + 56;
  uint64_t v12 = a3 + 64;
  uint64_t v13 = a3 + 88;
  std::string::size_type v15 = &v5;
  uint64_t v16 = "{";
  uint64_t v17 = &v5;
  uint64_t v18 = "{";
  uint64_t v19 = "{";
  if (v7 != -1)
  {
    uint64_t v20 = &v15;
    ((void (*)(long long ***, long long *))off_26C674C98[v7])(&v20, &v5);
    LOBYTE(v15) = 1;
    uint64_t v16 = (const char *)&v5;
    uint64_t v17 = (long long *)&v14;
    sub_215A7B114(&v8, (uint64_t)&v15);
  }
  sub_215742D4C();
}

void sub_215A7C884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7C89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7C8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7C8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7C8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_215A7C8EC(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C677100;
  long long v4 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 6);
  long long v5 = a2[2];
  *(void *)(a1 + 56) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 40) = v5;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 14);
  long long v6 = a2[4];
  *(void *)(a1 + 88) = *((void *)a2 + 10);
  *(_OWORD *)(a1 + 72) = v6;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 8) = 0;
  long long v7 = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 112) = *((void *)a2 + 13);
  *(_OWORD *)(a1 + 96) = v7;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 11) = 0;
  sub_2157C4FB8(a1 + 128, a3);
  *(void *)a1 = &unk_26C677080;
  return a1;
}

void sub_215A7C9E4(_Unwind_Exception *exception_object)
{
  if (v1[119] < 0)
  {
    operator delete(*v5);
    if ((v1[95] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v1[63] & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v1[95] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((v1[63] & 0x80000000) == 0)
  {
LABEL_4:
    if ((v1[31] & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*v3);
  if ((v1[31] & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A7CA50(uint64_t a1, uint64_t a2)
{
  v37[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v32);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v32);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v32);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v26);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v26);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v26);
  }
  uint64_t v19 = v32;
  uint64_t v20 = &v33;
  uint64_t v21 = &v34;
  int v22 = &v35;
  uint64_t v23 = &v36;
  int v24 = (unsigned __int8 **)v37;
  uint64_t v13 = v26;
  char v14 = &v27;
  std::string::size_type v15 = &v28;
  uint64_t v16 = &v29;
  uint64_t v17 = &v30;
  uint64_t v18 = (unsigned __int8 **)&v31;
  if (sub_215AF0A90((uint64_t)&v25, &v19, &v13))
  {
    if (*((unsigned char *)v24 + 24) && *((unsigned char *)v18 + 24))
    {
      int64x2_t v8 = *v24;
      char v9 = v24[1];
      uint64_t v10 = *v18;
      if (v9 - *v24 == v18[1] - *v18)
      {
        if (v8 != v9)
        {
          while (sub_215AEF77C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9) {
              goto LABEL_23;
            }
          }
          goto LABEL_22;
        }
LABEL_23:
        uint64_t v19 = (unsigned char *)(a1 + 200);
        uint64_t v20 = (uint64_t *)(a1 + 224);
        uint64_t v21 = (uint64_t *)(a1 + 232);
        int v22 = (uint64_t *)(a1 + 256);
        uint64_t v23 = (uint64_t *)(a1 + 264);
        int v24 = (unsigned __int8 **)(a1 + 288);
        uint64_t v13 = (unsigned char *)(a2 + 200);
        char v14 = (uint64_t *)(a2 + 224);
        std::string::size_type v15 = (uint64_t *)(a2 + 232);
        uint64_t v16 = (uint64_t *)(a2 + 256);
        uint64_t v17 = (uint64_t *)(a2 + 264);
        uint64_t v18 = (unsigned __int8 **)(a2 + 288);
        uint64_t v11 = sub_215A7CCB8((uint64_t)&v25, (uint64_t)&v19, (uint64_t)&v13);
        goto LABEL_24;
      }
    }
    else if ((*((unsigned char *)v24 + 24) != 0) == (*((unsigned char *)v18 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  uint64_t v11 = 0;
LABEL_24:
  sub_2157C6F18((uint64_t)v26);
  sub_2157C6F18((uint64_t)v32);
  return v11;
}

void sub_215A7CC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A7CCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

uint64_t sub_215A7CCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_215A7CE44((uint64_t)&v27, a2, (unsigned __int8 **)a3) & 1) == 0) {
    return 0;
  }
  if (**(_DWORD **)(a2 + 24) != **(_DWORD **)(a3 + 24)) {
    return 0;
  }
  int v5 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v6 = *(unsigned __int8 ***)(a3 + 32);
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    int64x2_t v8 = (unsigned __int8 *)v5[23];
  }
  else {
    int64x2_t v8 = (unsigned __int8 *)*((void *)v5 + 1);
  }
  char v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    char v9 = v6[1];
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    uint64_t v11 = *(unsigned __int8 **)(a3 + 32);
  }
  else {
    uint64_t v11 = *v6;
  }
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v5, v11, *((void *)v5 + 1))) {
      goto LABEL_20;
    }
    return 0;
  }
  if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7) {
        goto LABEL_20;
      }
    }
    return 0;
  }
LABEL_20:
  uint64_t v13 = *(unsigned __int8 **)(a2 + 40);
  char v14 = *(unsigned __int8 ***)(a3 + 40);
  uint64_t v15 = v13[23];
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = (unsigned __int8 *)v13[23];
  }
  else {
    uint64_t v16 = (unsigned __int8 *)*((void *)v13 + 1);
  }
  uint64_t v17 = (unsigned __int8 *)*((unsigned __int8 *)v14 + 23);
  int v18 = (char)v17;
  if ((char)v17 < 0) {
    uint64_t v17 = v14[1];
  }
  if (v16 != v17) {
    return 0;
  }
  if (v18 >= 0) {
    uint64_t v19 = *(unsigned __int8 **)(a3 + 40);
  }
  else {
    uint64_t v19 = *v14;
  }
  if ((v15 & 0x80) != 0) {
    return memcmp(*(const void **)v13, v19, *((void *)v13 + 1)) == 0;
  }
  if (!v13[23]) {
    return 1;
  }
  uint64_t v20 = v15 - 1;
  do
  {
    int v22 = *v13++;
    int v21 = v22;
    int v24 = *v19++;
    int v23 = v24;
    BOOL v26 = v20-- != 0;
    uint64_t result = v21 == v23;
  }
  while (v21 == v23 && v26);
  return result;
}

uint64_t sub_215A7CE44(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v4 = *(const void ***)a2;
  int v5 = *a3;
  uint64_t v6 = *(unsigned __int8 *)(*(void *)a2 + 23);
  size_t v7 = *(void *)(*(void *)a2 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = *(unsigned __int8 *)(*(void *)a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(*(void *)a2 + 8);
  }
  uint64_t v9 = v5[23];
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)v5 + 1);
  }
  if (v8 != v9) {
    return 0;
  }
  if (v10 >= 0) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)v5;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v4, v12, v7)) {
      return 0;
    }
  }
  else if (v6)
  {
    while (*(unsigned __int8 *)v4 == *v12)
    {
      uint64_t v4 = (const void **)((char *)v4 + 1);
      ++v12;
      if (!--v6) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  if (**(unsigned __int8 **)(a2 + 8) != *a3[1]) {
    return 0;
  }
  char v14 = *(unsigned __int8 **)(a2 + 16);
  uint64_t v15 = (unsigned __int8 **)a3[2];
  uint64_t v16 = v14[23];
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = (unsigned __int8 *)v14[23];
  }
  else {
    uint64_t v17 = (unsigned __int8 *)*((void *)v14 + 1);
  }
  int v18 = (unsigned __int8 *)*((unsigned __int8 *)v15 + 23);
  int v19 = (char)v18;
  if ((char)v18 < 0) {
    int v18 = v15[1];
  }
  if (v17 != v18) {
    return 0;
  }
  if (v19 >= 0) {
    uint64_t v20 = a3[2];
  }
  else {
    uint64_t v20 = *v15;
  }
  if ((v16 & 0x80) != 0) {
    return memcmp(*(const void **)v14, v20, *((void *)v14 + 1)) == 0;
  }
  if (!v14[23]) {
    return 1;
  }
  uint64_t v21 = v16 - 1;
  do
  {
    int v23 = *v14++;
    int v22 = v23;
    int v25 = *v20++;
    int v24 = v25;
    BOOL v27 = v21-- != 0;
    uint64_t result = v22 == v24;
  }
  while (v22 == v24 && v27);
  return result;
}

void sub_215A7CFB0(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A7D21C((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A7D83C(&v11, (uint64_t)v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A7DC50((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    size_t v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A7E0E8(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A7E3EC(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        LODWORD(v11) = 1;
        (*(void (**)(void *, uint64_t *))(*a1 + 104))(a1, &v11);
        sub_215A7E694((uint64_t)a1, (long long *)(a2 + 200));
      }
    }
  }
}

void sub_215A7D21C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A7D520(uint64_t a1, long long *a2)
{
  sub_215A7D6B4(v11, a2);
  sub_215DEE538(a1, (uint64_t)v11);
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v3 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3
    || ((v4 = *(int **)(a1 + 72), int v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == *(_DWORD *)"version")
      ? (BOOL v7 = v6 == *(_DWORD *)"sion")
      : (BOOL v7 = 0),
        !v7))
  {
    char v21 = 6;
    unint64_t v22 = v13;
    int v8 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v9 = *v8;
    *int v8 = v21;
    char v21 = v9;
    int v10 = (void **)*((void *)v8 + 1);
    *((void *)v8 + 1) = v22;
    unint64_t v22 = (unint64_t)v10;
    sub_215CEB204((void ***)&v22, v9);
  }
  sub_215DEE538(a1, (uint64_t)&v14);
  sub_215DEE064(a1, &v16);
  sub_215DEE538(a1, (uint64_t)&v17);
  sub_215DEE538(a1, (uint64_t)&__p);
  if (v20 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v17);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v12 & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(v11[0]);
    return;
  }
LABEL_18:
  operator delete(v14);
  if (v12 < 0) {
    goto LABEL_19;
  }
}

void sub_215A7D680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215CEB204(v9, *(unsigned __int8 *)(v10 - 32));
  sub_2159A2CC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215A7D6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_215A7D6B4(unsigned char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_215738B0C(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[24] = *((unsigned char *)a2 + 24);
    int v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[24] = *((unsigned char *)a2 + 24);
    int v5 = __dst + 32;
    if ((*((char *)a2 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = a2[2];
      *((void *)v5 + 2) = *((void *)a2 + 6);
      *(_OWORD *)int v5 = v6;
      goto LABEL_6;
    }
  }
  sub_215738B0C(v5, *((void **)a2 + 4), *((void *)a2 + 5));
LABEL_6:
  *((_DWORD *)__dst + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    sub_215738B0C(__dst + 64, *((void **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v7 = a2[4];
    *((void *)__dst + 10) = *((void *)a2 + 10);
    *((_OWORD *)__dst + 4) = v7;
  }
  int v8 = __dst + 88;
  if (*((char *)a2 + 111) < 0)
  {
    sub_215738B0C(v8, *((void **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 88);
    *((void *)__dst + 13) = *((void *)a2 + 13);
    *(_OWORD *)int v8 = v9;
  }
  return __dst;
}

void sub_215A7D7C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_215A7D83C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v7 + 40))
    {
      char v15 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v15, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v15, v7 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC838(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
      char v15 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v15, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v15, v8 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC718(a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40))
    {
      char v15 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v15, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v15, v6 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159A6DFC(a2, v4, 6u);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    char v15 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v15, 1u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v15, v14 + 8);
  }
  sub_215A7DA30(a2, (long long *)(v3 + 200));
}

void sub_215A7DA30(uint64_t a1, long long *a2)
{
  sub_215A7D6B4(v9, a2);
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v3 + 40))
  {
    int v19 = (uint64_t *)(v3 + 16);
    sub_215E07110((uint64_t)&v20, &v19, (const void **)v9);
  }
  else
  {
    sub_215E0752C((uint64_t)&v19, v3 + 8, (uint64_t)v9);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v4 + 40))
  {
    int v19 = (uint64_t *)(v4 + 16);
    sub_215E053CC(&v19, v11);
  }
  else
  {
    if (v11 < 0)
    {
      LOBYTE(v19) = -52;
      BYTE1(v19) = v11;
    }
    else
    {
      LOBYTE(v19) = v11;
    }
    std::ostream::write();
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v5 + 40))
  {
    int v19 = (uint64_t *)(v5 + 16);
    sub_215E07110((uint64_t)&v20, &v19, (const void **)v12);
  }
  else
  {
    sub_215E0752C((uint64_t)&v19, v5 + 8, (uint64_t)v12);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v6 + 40))
  {
    int v19 = (uint64_t *)(v6 + 16);
    sub_215E05FEC(&v19, v14);
  }
  else
  {
    sub_215E0626C((uint64_t)&v19, v6 + 8);
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v7 + 40))
  {
    int v19 = (uint64_t *)(v7 + 16);
    sub_215E07110((uint64_t)&v20, &v19, (const void **)v15);
  }
  else
  {
    sub_215E0752C((uint64_t)&v19, v7 + 8, (uint64_t)v15);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v8 + 40))
  {
    int v19 = (uint64_t *)(v8 + 16);
    sub_215E07110((uint64_t)&v20, &v19, (const void **)__p);
  }
  else
  {
    sub_215E0752C((uint64_t)&v19, v8 + 8, (uint64_t)__p);
  }
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_24:
      if ((v13 & 0x80000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_29;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v15[0]);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v10 & 0x80000000) == 0) {
      return;
    }
LABEL_30:
    operator delete(v9[0]);
    return;
  }
LABEL_29:
  operator delete(v12[0]);
  if (v10 < 0) {
    goto LABEL_30;
  }
}

void sub_215A7DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7DC50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void sub_215A7DF54(uint64_t a1, long long *a2)
{
  sub_215A7D6B4(v11, a2);
  sub_215DEC818(a1, (uint64_t)v11);
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v3 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3
    || ((v4 = *(int **)(a1 + 72), int v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == *(_DWORD *)"version")
      ? (BOOL v7 = v6 == *(_DWORD *)"sion")
      : (BOOL v7 = 0),
        !v7))
  {
    char v21 = 6;
    uint64_t v22 = v13;
    int v8 = (unsigned __int8 *)sub_215DEB350(a1);
    int v9 = *v8;
    *int v8 = v21;
    char v21 = v9;
    uint64_t v10 = *((void *)v8 + 1);
    *((void *)v8 + 1) = v22;
    uint64_t v22 = v10;
    sub_215CE9D14(&v22, v9);
  }
  sub_215DEC818(a1, (uint64_t)&v14);
  sub_215DEC344(a1, &v16);
  sub_215DEC818(a1, (uint64_t)&v17);
  sub_215DEC818(a1, (uint64_t)&__p);
  if (v20 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_13:
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(v17);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v12 & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(v11[0]);
    return;
  }
LABEL_18:
  operator delete(v14);
  if (v12 < 0) {
    goto LABEL_19;
  }
}

void sub_215A7E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215CE9D14(v9, *(unsigned __int8 *)(v10 - 32));
  sub_2159A2CC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215A7E0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7E0E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      char v16 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        char v14 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      uint64_t v10 = *(void **)(a2 + 24);
      char v17 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v17, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      int v9 = *(void **)(a2 + 24);
      char v15 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v15, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v18 = v7;
  sub_215731D94(v11, (uint64_t)&v18, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    unsigned __int8 v13 = *(void **)(a2 + 24);
    char v19 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v19, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_215A7E2C0(a2, (long long *)(v3 + 200));
}

void sub_215A7E2C0(uint64_t a1, long long *a2)
{
  sub_215A7D6B4(__dst, a2);
  sub_215DF933C(a1, (uint64_t)__dst);
  sub_215DF927C(a1, v6);
  sub_215DF933C(a1, (uint64_t)&v7);
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    char v13 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v3, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  sub_215DF933C(a1, (uint64_t)&v9);
  sub_215DF933C(a1, (uint64_t)&__p);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_5:
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(__dst[0]);
    return;
  }
LABEL_10:
  operator delete(v7);
  if (v5 < 0) {
    goto LABEL_11;
  }
}

void sub_215A7E3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A2CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A7E3EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 1;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v11, 4);
  sub_215A7E56C(a2, (long long *)(v3 + 200));
}

void sub_215A7E56C(uint64_t a1, long long *a2)
{
  sub_215A7D6B4(v3, a2);
  sub_215D023C8(a1, (char *)v3);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), &v5, v6, 1);
  sub_215D023C8(a1, (char *)&v7);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), v9, v10, 4);
  sub_215D023C8(a1, (char *)&v11);
  sub_215D023C8(a1, (char *)&__p);
  if (v14 < 0)
  {
    operator delete(__p);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v12 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v11);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(v3[0]);
    return;
  }
LABEL_8:
  operator delete(v7);
  if (v4 < 0) {
    goto LABEL_9;
  }
}

void sub_215A7E680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7E694(uint64_t a1, long long *a2)
{
  sub_215A7D6B4(v3, a2);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 144))(a1, v3);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v5);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 144))(a1, &v6);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v8);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 144))(a1, &v9);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 144))(a1, &__p);
  if (v12 < 0)
  {
    operator delete(__p);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v9);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(v3[0]);
    return;
  }
LABEL_8:
  operator delete(v6);
  if (v4 < 0) {
    goto LABEL_9;
  }
}

void sub_215A7E840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A7E854(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  char v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A7F038(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  uint64_t v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A7F780(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    unsigned int v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A7FC44(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    char v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A8038C(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      uint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A80AC4(&v10, v8);
      }
      else {
        sub_215A7EA20(&v9, (void **)a1);
      }
    }
  }
}

uint64_t sub_215A7EA20(uint64_t *a1, void **a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)&v29, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v29);
        if (!v44) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(unsigned char *)(v3 + 64) = 0;
    if (v33)
    {
      uint64_t v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(void *)(v3 + 56) = v8;
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v35;
    long long v10 = v34;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v38)
    {
      uint64_t v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(void *)(v3 + 112) = v11;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v41)
    {
      uint64_t v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(void *)(v3 + 144) = v12;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(void *)(v3 + 176) = v43;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v42;
    if (!(void)v42) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v42 + 1);
    char v16 = (void *)v42;
    if (*((void *)&v42 + 1) == (void)v42) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v42;
LABEL_45:
    *((void *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)&v29, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(unsigned char *)(v3 + 64) = 0;
    if (v33)
    {
      uint64_t v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(void *)(v3 + 56) = v17;
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v35;
    long long v19 = v34;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v38)
    {
      uint64_t v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(void *)(v3 + 112) = v20;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v41)
    {
      uint64_t v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(void *)(v3 + 144) = v21;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(void *)(v3 + 176) = v43;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v29);
  if (v44)
  {
LABEL_38:
    uint64_t v14 = v42;
    if (!(void)v42) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v42 + 1);
    char v16 = (void *)v42;
    if (*((void *)&v42 + 1) == (void)v42) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v33 && SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  sub_2157C6F18((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  int v24 = (void (**)(void **, unsigned int *))*a2;
  v28[0] = (uint64_t)a2[1];
  int v25 = v28[0];
  unsigned int v29 = 6;
  v24[13](a2, &v29);
  if (v25 < 1)
  {
    if (v29 < 3) {
      sub_2159B6FFC((uint64_t)&v29, a2, v4, v29);
    }
    else {
      sub_2159B71F0(a2, v4, v29);
    }
  }
  else
  {
    sub_2159B6970((int *)v28, a2, v4, v29);
  }
  LODWORD(v28[0]) = 1;
  (*((void (**)(void **, uint64_t *))*a2 + 13))(a2, v28);
  (*((void (**)(void **, uint64_t))*a2 + 18))(a2, v3 + 200);
  (*((void (**)(void **, uint64_t))*a2 + 10))(a2, v3 + 224);
  (*((void (**)(void **, uint64_t))*a2 + 18))(a2, v3 + 232);
  (*((void (**)(void **, uint64_t))*a2 + 13))(a2, v3 + 256);
  (*((void (**)(void **, uint64_t))*a2 + 18))(a2, v3 + 264);
  return (*((uint64_t (**)(void **, uint64_t))*a2 + 18))(a2, v3 + 288);
}

void sub_215A7EFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A7F038(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    char v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    char v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        LODWORD(v29[0]) = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (LODWORD(v29[0]) >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  char v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A7F52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_215A7F574(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  sub_215DF07E4(a1);
  *(void *)&long long v17 = "version";
  *((void *)&v17 + 1) = 7;
  LODWORD(v18) = 1;
  int v5 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF1DC8((void *)a1, &v18);
  uint64_t v6 = (void **)sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_215D30C0C(v6, (uint64_t)&v17);
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  long long v7 = v17;
  *(void *)(v4 + 16) = v18;
  *(_OWORD *)uint64_t v4 = v7;
  sub_215DF1B68((void *)a1, (unsigned char *)(v4 + 24));
  uint64_t v8 = (void **)sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_215D30C0C(v8, (uint64_t)&v17);
  uint64_t v9 = (void **)(v4 + 32);
  if (*(char *)(v4 + 55) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)uint64_t v9 = v17;
  *(void *)(v4 + 48) = v18;
  sub_215DF1DC8((void *)a1, (_DWORD *)(v4 + 56));
  long long v10 = (void **)sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_215D30C0C(v10, (uint64_t)&v17);
  uint64_t v11 = (void **)(v4 + 64);
  if (*(char *)(v4 + 87) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)uint64_t v11 = v17;
  *(void *)(v4 + 80) = v18;
  uint64_t v12 = (void **)sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_215D30C0C(v12, (uint64_t)&v17);
  int v13 = (void **)(v4 + 88);
  if (*(char *)(v4 + 111) < 0) {
    operator delete(*v13);
  }
  double result = *(double *)&v17;
  *(_OWORD *)int v13 = v17;
  *(void *)(v4 + 104) = v18;
  uint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v16 - 8);
  *(void *)(a1 + 48) = v15 - 8;
  *(void *)(a1 + 72) = v16 - 8;
  return result;
}

void sub_215A7F754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A7F780(uint64_t *a1, void *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v27);
    sub_2159A3DA4((uint64_t)v28, v27);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v28);
        if (!v43) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v26, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v8 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v8;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v34;
    long long v10 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v11 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v11;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v12 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v12;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v41;
LABEL_45:
    *((void *)&v41 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v27);
  sub_2159A3DA4((uint64_t)v28, v27);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v26, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v29;
    *(unsigned char *)(v3 + 64) = 0;
    if (v32)
    {
      uint64_t v17 = v31;
      *(_OWORD *)(v3 + 40) = v30;
      *(void *)(v3 + 56) = v17;
      long long v30 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v34;
    long long v19 = v33;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v37)
    {
      uint64_t v20 = v36;
      *(_OWORD *)(v3 + 96) = v35;
      *(void *)(v3 + 112) = v20;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v40)
    {
      uint64_t v21 = v39;
      *(_OWORD *)(v3 + 128) = v38;
      *(void *)(v3 + 144) = v21;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v43;
    if (v43)
    {
      *(_OWORD *)(v3 + 160) = v41;
      *(void *)(v3 + 176) = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v28);
  if (v43)
  {
LABEL_38:
    uint64_t v14 = v41;
    if (!(void)v41) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v41 + 1);
    uint64_t v16 = (void *)v41;
    if (*((void *)&v41 + 1) == (void)v41) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v37 && SHIBYTE(v36) < 0) {
    operator delete((void *)v35);
  }
  if (v32 && SHIBYTE(v31) < 0) {
    operator delete((void *)v30);
  }
  sub_2157C6F18((uint64_t)v27);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v27, a2, v4);
  LODWORD(v27[0]) = 1;
  uint64_t v25 = a2[6];
  int v24 = a2 + 6;
  sub_215DFF824(v25, v27);
  sub_215E000A8(*v24, (void **)(v3 + 200));
  sub_215DFF4BC(*v24, (unsigned char *)(v3 + 224));
  sub_215E000A8(*v24, (void **)(v3 + 232));
  sub_215DFF824(*v24, (_DWORD *)(v3 + 256));
  sub_215E000A8(*v24, (void **)(v3 + 264));
  sub_215E000A8(*v24, (void **)(v3 + 288));
}

void sub_215A7FBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A7FC44(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        LODWORD(v29[0]) = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (LODWORD(v29[0]) >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A80138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_215A80180(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  sub_215DF01A0(a1);
  *(void *)&long long v17 = "version";
  *((void *)&v17 + 1) = 7;
  LODWORD(v18) = 1;
  int v5 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF0F9C((void *)a1, &v18);
  uint64_t v6 = (void **)sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_215D3040C(v6, (uint64_t)&v17);
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  long long v7 = v17;
  *(void *)(v4 + 16) = v18;
  *(_OWORD *)uint64_t v4 = v7;
  sub_215DF0D3C((void *)a1, (unsigned char *)(v4 + 24));
  uint64_t v8 = (void **)sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_215D3040C(v8, (uint64_t)&v17);
  uint64_t v9 = (void **)(v4 + 32);
  if (*(char *)(v4 + 55) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)uint64_t v9 = v17;
  *(void *)(v4 + 48) = v18;
  sub_215DF0F9C((void *)a1, (_DWORD *)(v4 + 56));
  long long v10 = (void **)sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_215D3040C(v10, (uint64_t)&v17);
  uint64_t v11 = (void **)(v4 + 64);
  if (*(char *)(v4 + 87) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)uint64_t v11 = v17;
  *(void *)(v4 + 80) = v18;
  uint64_t v12 = (void **)sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v18 = 0;
  long long v17 = 0uLL;
  sub_215D3040C(v12, (uint64_t)&v17);
  int v13 = (void **)(v4 + 88);
  if (*(char *)(v4 + 111) < 0) {
    operator delete(*v13);
  }
  double result = *(double *)&v17;
  *(_OWORD *)int v13 = v17;
  *(void *)(v4 + 104) = v18;
  uint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v16 - 8);
  *(void *)(a1 + 48) = v15 - 8;
  *(void *)(a1 + 72) = v16 - 8;
  return result;
}

void sub_215A80360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_215A8038C(uint64_t *a1, uint64_t a2)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)__p);
    sub_2159A3DA4((uint64_t)v40, (uint64_t *)__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v40);
        if (!v55) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v37, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v41;
    *(unsigned char *)(v3 + 64) = 0;
    if (v44)
    {
      uint64_t v8 = v43;
      *(_OWORD *)(v3 + 40) = v42;
      *(void *)(v3 + 56) = v8;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v46;
    long long v10 = v45;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v49)
    {
      uint64_t v11 = v48;
      *(_OWORD *)(v3 + 96) = v47;
      *(void *)(v3 + 112) = v11;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v52)
    {
      uint64_t v12 = v51;
      *(_OWORD *)(v3 + 128) = v50;
      *(void *)(v3 + 144) = v12;
      long long v50 = 0uLL;
      uint64_t v51 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v55;
    if (v55)
    {
      *(_OWORD *)(v3 + 160) = v53;
      *(void *)(v3 + 176) = v54;
      long long v53 = 0uLL;
      uint64_t v54 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v53;
    if (!(void)v53) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v53 + 1);
    uint64_t v16 = (void *)v53;
    if (*((void *)&v53 + 1) == (void)v53) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v53;
LABEL_45:
    *((void *)&v53 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)__p);
  sub_2159A3DA4((uint64_t)v40, (uint64_t *)__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v37, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v41;
    *(unsigned char *)(v3 + 64) = 0;
    if (v44)
    {
      uint64_t v17 = v43;
      *(_OWORD *)(v3 + 40) = v42;
      *(void *)(v3 + 56) = v17;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v46;
    long long v19 = v45;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v49)
    {
      uint64_t v20 = v48;
      *(_OWORD *)(v3 + 96) = v47;
      *(void *)(v3 + 112) = v20;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v52)
    {
      uint64_t v21 = v51;
      *(_OWORD *)(v3 + 128) = v50;
      *(void *)(v3 + 144) = v21;
      long long v50 = 0uLL;
      uint64_t v51 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v55;
    if (v55)
    {
      *(_OWORD *)(v3 + 160) = v53;
      *(void *)(v3 + 176) = v54;
      long long v53 = 0uLL;
      uint64_t v54 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v40);
  if (v55)
  {
LABEL_38:
    uint64_t v14 = v53;
    if (!(void)v53) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v53 + 1);
    uint64_t v16 = (void *)v53;
    if (*((void *)&v53 + 1) == (void)v53) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v52 && SHIBYTE(v51) < 0) {
    operator delete((void *)v50);
  }
  if (v49 && SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
  if (v44 && SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
  sub_2157C6F18((uint64_t)__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p[0]) = 6;
  sub_215DFABD4(a2, __p);
  unsigned int v24 = __p[0];
  if (LODWORD(__p[0]) >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p[0];
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (SHIBYTE(v39) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_83:
          char v29 = 0;
          if (SHIBYTE(v39) < 0) {
            goto LABEL_86;
          }
          goto LABEL_72;
        }
      }
      else if (SHIBYTE(v39) == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_83;
      }
      char v29 = 1;
      if (SHIBYTE(v39) < 0) {
LABEL_86:
      }
        operator delete(__p[0]);
LABEL_72:
      if (*(unsigned char *)(a2 + 131)) {
        char v28 = 0;
      }
      else {
        char v28 = v29;
      }
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p[0]) = 1;
  sub_215DFABD4(a2, __p);
  ++*(void *)(a2 + 80);
  if (*(unsigned char *)(a2 + 128)) {
    BOOL v26 = *(unsigned char *)(a2 + 131) == 0;
  }
  else {
    BOOL v26 = 1;
  }
  if (v26)
  {
    sub_215DFD700(a2, (uint64_t)__p);
    char v27 = (void **)(v3 + 200);
    if (*(char *)(v3 + 223) < 0) {
      operator delete(*v27);
    }
    *(_OWORD *)char v27 = *(_OWORD *)__p;
    *(void *)(v3 + 216) = v39;
    ++*(void *)(a2 + 104);
  }
  else
  {
    *(unsigned char *)(a2 + 132) = 1;
  }
  sub_215DFA01C(a2, (unsigned char *)(v3 + 224));
  ++*(void *)(a2 + 80);
  if (*(unsigned char *)(a2 + 128) && *(unsigned char *)(a2 + 131))
  {
    *(unsigned char *)(a2 + 132) = 1;
  }
  else
  {
    sub_215DFD700(a2, (uint64_t)__p);
    long long v30 = (void **)(v3 + 232);
    if (*(char *)(v3 + 255) < 0) {
      operator delete(*v30);
    }
    *(_OWORD *)long long v30 = *(_OWORD *)__p;
    *(void *)(v3 + 248) = v39;
    ++*(void *)(a2 + 104);
  }
  sub_215DFABD4(a2, (_DWORD *)(v3 + 256));
  uint64_t v32 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v32 + 1;
  if (*(unsigned char *)(a2 + 128) && *(unsigned char *)(a2 + 131))
  {
    *(unsigned char *)(a2 + 132) = 1;
    *(void *)(a2 + 80) = v32 + 2;
LABEL_100:
    *(unsigned char *)(a2 + 132) = 1;
    return result;
  }
  sub_215DFD700(a2, (uint64_t)__p);
  uint64_t v33 = (void **)(v3 + 264);
  if (*(char *)(v3 + 287) < 0) {
    operator delete(*v33);
  }
  double result = *(double *)__p;
  *(_OWORD *)uint64_t v33 = *(_OWORD *)__p;
  *(void *)(v3 + 280) = v39;
  ++*(void *)(a2 + 104);
  int v34 = *(unsigned __int8 *)(a2 + 128);
  int v35 = *(unsigned __int8 *)(a2 + 131);
  ++*(void *)(a2 + 80);
  if (v34 && v35) {
    goto LABEL_100;
  }
  sub_215DFD700(a2, (uint64_t)__p);
  uint64_t v36 = (void **)(v3 + 288);
  if (*(char *)(v3 + 311) < 0) {
    operator delete(*v36);
  }
  double result = *(double *)__p;
  *(_OWORD *)uint64_t v36 = *(_OWORD *)__p;
  *(void *)(v3 + 304) = v39;
  ++*(void *)(a2 + 104);
  return result;
}

void sub_215A80A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_215A80AC4(uint64_t *a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v31);
    sub_2159A3DA4((uint64_t)v32, v31);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v32);
        if (!v47) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v30, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(unsigned char *)(v3 + 64) = 0;
    if (v36)
    {
      uint64_t v8 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(void *)(v3 + 56) = v8;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v38;
    long long v10 = v37;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v41)
    {
      uint64_t v11 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(void *)(v3 + 112) = v11;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v44)
    {
      uint64_t v12 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(void *)(v3 + 144) = v12;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(void *)(v3 + 176) = v46;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v45;
    if (!(void)v45) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v45 + 1);
    uint64_t v16 = (void *)v45;
    if (*((void *)&v45 + 1) == (void)v45) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v45;
LABEL_45:
    *((void *)&v45 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v31);
  sub_2159A3DA4((uint64_t)v32, v31);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v30, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(unsigned char *)(v3 + 64) = 0;
    if (v36)
    {
      uint64_t v17 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(void *)(v3 + 56) = v17;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v38;
    long long v19 = v37;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v41)
    {
      uint64_t v20 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(void *)(v3 + 112) = v20;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v44)
    {
      uint64_t v21 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(void *)(v3 + 144) = v21;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(void *)(v3 + 176) = v46;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v32);
  if (v47)
  {
LABEL_38:
    uint64_t v14 = v45;
    if (!(void)v45) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v45 + 1);
    uint64_t v16 = (void *)v45;
    if (*((void *)&v45 + 1) == (void)v45) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v44 && SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
  if (v41 && SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (v36 && SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_2157C6F18((uint64_t)v31);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v31, a2, v4);
  unint64_t v24 = a2[6];
  unint64_t v25 = a2[7];
  BOOL v26 = v25 >= v24;
  unint64_t v27 = v25 - v24;
  if (!v26) {
    unint64_t v27 = 0;
  }
  if (v27 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[6] = v24 + 4;
  return sub_215A80FAC(a2, v3 + 200);
}

void sub_215A80F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_215A80FAC(void *a1, uint64_t a2)
{
  sub_215D029A0(a1, a2);
  unint64_t v4 = a1[6];
  if (a1[7] <= v4) {
    goto LABEL_8;
  }
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1[3] + v4);
  ++a1[6];
  sub_215D029A0(a1, a2 + 32);
  unint64_t v5 = a1[6];
  unint64_t v6 = a1[7];
  BOOL v7 = v6 >= v5;
  unint64_t v8 = v6 - v5;
  if (!v7) {
    unint64_t v8 = 0;
  }
  if (v8 <= 3)
  {
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1[3] + v5);
  a1[6] += 4;
  sub_215D029A0(a1, a2 + 64);

  return sub_215D029A0(a1, a2 + 88);
}

void sub_215A810A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A810BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_215A810D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)a1 = &unk_26C672FA0;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v3;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  long long v5 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = v5;
  *(unsigned char *)(a1 + 120) = 0;
  if (*(unsigned char *)(a2 + 120))
  {
    long long v6 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v6;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 96) = 0;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (*(unsigned char *)(a2 + 152))
  {
    long long v7 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v7;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 128) = 0;
    *(unsigned char *)(a1 + 152) = 1;
  }
  __n128 result = *(__n128 *)(a2 + 160);
  uint64_t v9 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = v9;
  *(__n128 *)(a1 + 160) = result;
  *(unsigned char *)(a1 + 240) = 0;
  if (*(unsigned char *)(a2 + 240))
  {
    _X2 = 0;
    _X3 = 0;
    __n128 result = *(__n128 *)(a2 + 192);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(__n128 *)(a1 + 192) = result;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 208) = 0;
    *(void *)(a2 + 192) = 0;
    __asm { CASPAL          X2, X3, X2, X3, [X8] }
    *(void *)(a1 + 224) = _X2;
    *(void *)(a1 + 232) = 0;
    *(unsigned char *)(a1 + 240) = 1;
  }
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  if (*(unsigned char *)(a2 + 280))
  {
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
    __n128 result = *(__n128 *)(a2 + 256);
    *(__n128 *)(a1 + 256) = result;
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a2 + 256) = 0;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    *(unsigned char *)(a1 + 280) = 1;
  }
  return result;
}

uint64_t sub_215A81264(uint64_t a1, uint64_t a2)
{
  v29[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v24);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v24);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v18);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  _OWORD v15[2] = &v26;
  v15[3] = &v27;
  v15[4] = &v28;
  uint64_t v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  _OWORD v13[2] = &v20;
  _OWORD v13[3] = &v21;
  v13[4] = &v22;
  uint64_t v14 = (unsigned __int8 **)&v23;
  if (sub_215AF0A90((uint64_t)&v17, v15, v13))
  {
    if (*((unsigned char *)v16 + 24) && *((unsigned char *)v14 + 24))
    {
      unint64_t v8 = *v16;
      uint64_t v9 = v16[1];
      long long v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_215AEF77C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9) {
              goto LABEL_23;
            }
          }
          goto LABEL_22;
        }
LABEL_23:
        uint64_t v11 = sub_215B29584((unsigned __int8 *)(a1 + 200), (unsigned __int8 *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((unsigned char *)v16 + 24) != 0) == (*((unsigned char *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  uint64_t v11 = 0;
LABEL_24:
  sub_2157C6F18((uint64_t)v18);
  sub_2157C6F18((uint64_t)v24);
  return v11;
}

void sub_215A81450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A8146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A81480(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A816BC((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A825A0(&v11, (uint64_t)v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A83544((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A84084(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      unint64_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A8516C(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_215A85738((int *)&v11, (uint64_t)a1, a2 + 200);
      }
    }
  }
}

void sub_215A816BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A819C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_215A81CF0((uint64_t)v3, a2);
  sub_215A81AA8(a1, (uint64_t)v3);
}

void sub_215A81A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0) {
    operator delete(__p);
  }
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A81AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "src_to_dst";
    *(void *)(a1 + 80) = 10;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC088(a1);
  int v6 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "version";
    *(void *)(a1 + 80) = 7;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEE064(a1, &v6);
  sub_215A81E20(a1, v3);
}

void sub_215A81CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A81CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_215A81CF0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 8);
  long long v9 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 144) = 0;
  if (*(unsigned char *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 120), *(void **)(a2 + 120), *(void *)(a2 + 128));
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 + 120);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v11;
    }
    *(unsigned char *)(a1 + 144) = 1;
  }
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 152), *(void **)(a2 + 152), *(void *)(a2 + 160));
    }
    else
    {
      long long v12 = *(_OWORD *)(a2 + 152);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = v12;
    }
    *(unsigned char *)(a1 + 176) = 1;
  }
  return a1;
}

void sub_215A81DDC(_Unwind_Exception *exception_object)
{
  if (v1[176] && v1[175] < 0) {
    operator delete(*v3);
  }
  if (v1[144])
  {
    if (v1[143] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A81E20(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v2 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "se3_type";
    *(void *)(a1 + 80) = 8;
    if (!v2) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v3 = a2;
  sub_215A82220();
}

void sub_215A82074(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 104)) {
    sub_215742D4C();
  }
  uint64_t v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "affine3x4";
    *(void *)(a1 + 80) = 9;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC088(a1);
  uint64_t v7 = 4;
  uint64_t v8 = v4;
  sub_215DEF750(a1, (float **)&v7);
  uint64_t v7 = 4;
  uint64_t v8 = a2 + 24;
  sub_215DEF750(a1, (float **)&v7);
  uint64_t v7 = 4;
  uint64_t v8 = a2 + 40;
  sub_215DEF750(a1, (float **)&v7);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 40) = *(void *)(v6 - 8);
  *(void *)(a1 + 56) = v6 - 8;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
}

void sub_215A82148(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 104) != 1) {
    sub_215742D4C();
  }
  uint64_t v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "affine3x4";
    *(void *)(a1 + 80) = 9;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC088(a1);
  uint64_t v7 = 4;
  uint64_t v8 = v4;
  sub_215DEFB74(a1, &v7);
  uint64_t v7 = 4;
  uint64_t v8 = a2 + 40;
  sub_215DEFB74(a1, &v7);
  uint64_t v7 = 4;
  uint64_t v8 = a2 + 72;
  sub_215DEFB74(a1, &v7);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 40) = *(void *)(v6 - 8);
  *(void *)(a1 + 56) = v6 - 8;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
}

void sub_215A82220()
{
  int v0 = 0;
  sub_215A8232C();
}

void sub_215A822E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A82304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A82318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A8232C()
{
}

void sub_215A82538(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215A8255C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A825A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v7 + 40))
    {
      uint64_t v20 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v20, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v7 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC838(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
      uint64_t v20 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v20, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v8 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC718(a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40))
    {
      uint64_t v20 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v20, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v6 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159A6DFC(a2, v4, 6u);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    uint64_t v20 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v20, 1u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v14 + 8);
  }
  sub_215E0076C(*(void *)(a2 + 24));
  sub_215A82824(a2, v3 + 200);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
  sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
  size_t v17 = *(void *)(v15 + 48);
  if (v17) {
    memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  }
  *(void *)(v15 + 48) = 0;
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = *(void *)(v15 + 88) - 8;
  *(void *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(unsigned char *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(unsigned char *)(v15 + 40) = 0;
    }
  }
}

void sub_215A82824(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sub_215A81CF0((uint64_t)v3, a2);
  sub_215A8290C(a1, (uint64_t)v3);
  if (v9 && v8 < 0) {
    operator delete(__p);
  }
  if (v6)
  {
    if (v5 < 0) {
      operator delete(v4);
    }
  }
}

void sub_215A828C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0) {
    operator delete(__p);
  }
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_215A8290C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v5 + 40))
  {
    uint64_t v20 = (uint64_t *)(v5 + 16);
    sub_215E05FEC(&v20, 1u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v5 + 8);
  }
  sub_215E0076C(*(void *)(a1 + 24));
  sub_215A82BCC(a1, v4);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(*(void *)(v6 + 88) - 8);
  sub_215E001AC((uint64_t *)(v6 + 48), *(void *)(v6 + 16) - v7 - 9);
  size_t v8 = *(void *)(v6 + 48);
  if (v8) {
    memmove((void *)(*(void *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
  }
  *(void *)(v6 + 48) = 0;
  uint64_t v9 = *(void *)(v6 + 80);
  uint64_t v10 = *(void *)(v6 + 88) - 8;
  *(void *)(v6 + 88) = v10;
  if (v9 == v10)
  {
    std::ostream::write();
    if (*(unsigned char *)(v6 + 40))
    {
      free(*(void **)(v6 + 24));
      *(unsigned char *)(v6 + 40) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 144))
  {
    uint64_t v11 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v11 + 40))
    {
      uint64_t v20 = (uint64_t *)(v11 + 16);
      sub_215E053CC(&v20, 1);
      uint64_t v12 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v12 + 40)) {
        goto LABEL_12;
      }
    }
    else
    {
      LOBYTE(v20) = 1;
      std::ostream::write();
      uint64_t v12 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v12 + 40))
      {
LABEL_12:
        uint64_t v20 = (uint64_t *)(v12 + 16);
        sub_215E07110((uint64_t)&v19, &v20, (const void **)(a2 + 120));
        if (!*(unsigned char *)(a2 + 176)) {
          goto LABEL_25;
        }
LABEL_19:
        uint64_t v14 = (const void **)(a2 + 152);
        uint64_t v15 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v15 + 40))
        {
          uint64_t v20 = (uint64_t *)(v15 + 16);
          sub_215E053CC(&v20, 1);
          uint64_t v16 = *(void *)(a1 + 24);
          if (*(unsigned char *)(v16 + 40))
          {
LABEL_21:
            uint64_t v20 = (uint64_t *)(v16 + 16);
            return (char *)sub_215E07110((uint64_t)&v19, &v20, v14);
          }
        }
        else
        {
          LOBYTE(v20) = 1;
          std::ostream::write();
          uint64_t v16 = *(void *)(a1 + 24);
          if (*(unsigned char *)(v16 + 40)) {
            goto LABEL_21;
          }
        }
        return (char *)sub_215E0752C((uint64_t)&v20, v16 + 8, (uint64_t)v14);
      }
    }
    sub_215E0752C((uint64_t)&v20, v12 + 8, a2 + 120);
    if (!*(unsigned char *)(a2 + 176)) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v13 + 40))
  {
    LOBYTE(v20) = 0;
    std::ostream::write();
    if (!*(unsigned char *)(a2 + 176)) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  uint64_t v20 = (uint64_t *)(v13 + 16);
  sub_215E053CC(&v20, 0);
  if (*(unsigned char *)(a2 + 176)) {
    goto LABEL_19;
  }
LABEL_25:
  uint64_t v18 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v18 + 40))
  {
    uint64_t v20 = (uint64_t *)(v18 + 16);
    return sub_215E053CC(&v20, 0);
  }
  else
  {
    LOBYTE(v20) = 0;
    return (char *)std::ostream::write();
  }
}

uint64_t sub_215A82BCC(uint64_t a1, char *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v5 + 40))
  {
    *(void *)char v49 = v5 + 16;
    uint64_t result = (uint64_t)sub_215E053CC((uint64_t **)v49, v4);
  }
  else
  {
    if (v4 < 0)
    {
      v49[0] = -52;
      v49[1] = v4;
    }
    else
    {
      v49[0] = *a2;
    }
    uint64_t result = std::ostream::write();
  }
  switch(*a2)
  {
    case 1:
      if (*((_DWORD *)a2 + 26) != 2) {
        sub_215742D4C();
      }
      uint64_t v7 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v7 + 40))
      {
        *(void *)char v49 = v7 + 16;
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 2);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 3);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 4);
      }
      else
      {
        unsigned int v16 = *((_DWORD *)a2 + 2);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v16);
        std::ostream::write();
        unsigned int v17 = *((_DWORD *)a2 + 3);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v17);
        std::ostream::write();
        unsigned int v18 = *((_DWORD *)a2 + 4);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v18);
        std::ostream::write();
      }
      uint64_t v19 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v19 + 40))
      {
        *(void *)char v49 = v19 + 16;
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 5);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 6);
        uint64_t result = (uint64_t)sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 7);
      }
      else
      {
        unsigned int v27 = *((_DWORD *)a2 + 5);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v27);
        std::ostream::write();
        unsigned int v28 = *((_DWORD *)a2 + 6);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v28);
        std::ostream::write();
        unsigned int v29 = *((_DWORD *)a2 + 7);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v29);
        uint64_t result = std::ostream::write();
      }
      break;
    case 2:
      if (*((_DWORD *)a2 + 26) != 3) {
        sub_215742D4C();
      }
      uint64_t v9 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v9 + 40))
      {
        *(void *)char v49 = v9 + 16;
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 1);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 2);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 3);
      }
      else
      {
        *(void *)&v49[1] = bswap64(*((void *)a2 + 1));
        v49[0] = -53;
        std::ostream::write();
        unint64_t v20 = *((void *)a2 + 2);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v20);
        std::ostream::write();
        unint64_t v21 = *((void *)a2 + 3);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v21);
        std::ostream::write();
      }
      uint64_t v22 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v22 + 40))
      {
        *(void *)char v49 = v22 + 16;
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 4);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 5);
        uint64_t result = (uint64_t)sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 6);
      }
      else
      {
        *(void *)&v49[1] = bswap64(*((void *)a2 + 4));
        v49[0] = -53;
        std::ostream::write();
        unint64_t v30 = *((void *)a2 + 5);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v30);
        std::ostream::write();
        unint64_t v31 = *((void *)a2 + 6);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v31);
        uint64_t result = std::ostream::write();
      }
      break;
    case 4:
      if (*((_DWORD *)a2 + 26)) {
        sub_215742D4C();
      }
      uint64_t v8 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v8 + 40))
      {
        *(void *)char v49 = v8 + 16;
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 2);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 3);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 4);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 5);
      }
      else
      {
        unsigned int v11 = *((_DWORD *)a2 + 2);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v11);
        std::ostream::write();
        unsigned int v12 = *((_DWORD *)a2 + 3);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v12);
        std::ostream::write();
        unsigned int v13 = *((_DWORD *)a2 + 4);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v13);
        std::ostream::write();
        unsigned int v14 = *((_DWORD *)a2 + 5);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v14);
        std::ostream::write();
      }
      uint64_t v15 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v15 + 40))
      {
        *(void *)char v49 = v15 + 16;
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 6);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 7);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 8);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 9);
      }
      else
      {
        unsigned int v32 = *((_DWORD *)a2 + 6);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v32);
        std::ostream::write();
        unsigned int v33 = *((_DWORD *)a2 + 7);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v33);
        std::ostream::write();
        unsigned int v34 = *((_DWORD *)a2 + 8);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v34);
        std::ostream::write();
        unsigned int v35 = *((_DWORD *)a2 + 9);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v35);
        std::ostream::write();
      }
      uint64_t v36 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v36 + 40))
      {
        *(void *)char v49 = v36 + 16;
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 10);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 11);
        sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 12);
        uint64_t result = (uint64_t)sub_215E06DFC((uint64_t)&v48, (uint64_t **)v49, (unsigned int *)a2 + 13);
      }
      else
      {
        unsigned int v41 = *((_DWORD *)a2 + 10);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v41);
        std::ostream::write();
        unsigned int v42 = *((_DWORD *)a2 + 11);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v42);
        std::ostream::write();
        unsigned int v43 = *((_DWORD *)a2 + 12);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v43);
        std::ostream::write();
        unsigned int v44 = *((_DWORD *)a2 + 13);
        v49[0] = -54;
        *(_DWORD *)&v49[1] = bswap32(v44);
        uint64_t result = std::ostream::write();
      }
      break;
    case 5:
      if (*((_DWORD *)a2 + 26) != 1) {
        sub_215742D4C();
      }
      uint64_t v10 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v10 + 40))
      {
        *(void *)char v49 = v10 + 16;
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 1);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 2);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 3);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 4);
      }
      else
      {
        *(void *)&v49[1] = bswap64(*((void *)a2 + 1));
        v49[0] = -53;
        std::ostream::write();
        unint64_t v23 = *((void *)a2 + 2);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v23);
        std::ostream::write();
        unint64_t v24 = *((void *)a2 + 3);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v24);
        std::ostream::write();
        unint64_t v25 = *((void *)a2 + 4);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v25);
        std::ostream::write();
      }
      uint64_t v26 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v26 + 40))
      {
        *(void *)char v49 = v26 + 16;
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 5);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 6);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 7);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 8);
      }
      else
      {
        *(void *)&v49[1] = bswap64(*((void *)a2 + 5));
        v49[0] = -53;
        std::ostream::write();
        unint64_t v37 = *((void *)a2 + 6);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v37);
        std::ostream::write();
        unint64_t v38 = *((void *)a2 + 7);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v38);
        std::ostream::write();
        unint64_t v39 = *((void *)a2 + 8);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v39);
        std::ostream::write();
      }
      uint64_t v40 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v40 + 40))
      {
        *(void *)char v49 = v40 + 16;
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 9);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 10);
        sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 11);
        uint64_t result = (uint64_t)sub_215E06EE4((uint64_t)&v48, (uint64_t **)v49, (unint64_t *)a2 + 12);
      }
      else
      {
        *(void *)&v49[1] = bswap64(*((void *)a2 + 9));
        v49[0] = -53;
        std::ostream::write();
        unint64_t v45 = *((void *)a2 + 10);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v45);
        std::ostream::write();
        unint64_t v46 = *((void *)a2 + 11);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v46);
        std::ostream::write();
        unint64_t v47 = *((void *)a2 + 12);
        v49[0] = -53;
        *(void *)&v49[1] = bswap64(v47);
        uint64_t result = std::ostream::write();
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_215A83544(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void sub_215A83848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_215A81CF0((uint64_t)v3, a2);
  sub_215A83930(a1, (uint64_t)v3);
}

void sub_215A838E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0) {
    operator delete(__p);
  }
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A83930(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "src_to_dst";
    *(void *)(a1 + 80) = 10;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEB804(a1);
  int v6 = 1;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "version";
    *(void *)(a1 + 80) = 7;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC344(a1, &v6);
  sub_215A83B78(a1, v3);
}

void sub_215A83B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A83B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A83B78(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v2 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "se3_type";
    *(void *)(a1 + 80) = 8;
    if (!v2) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v3 = a2;
  sub_215A83F78();
}

void sub_215A83DCC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 104)) {
    sub_215742D4C();
  }
  uint64_t v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "affine3x4";
    *(void *)(a1 + 80) = 9;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEB804(a1);
  uint64_t v7 = 4;
  uint64_t v8 = v4;
  sub_215DED67C(a1, (float **)&v7);
  uint64_t v7 = 4;
  uint64_t v8 = a2 + 24;
  sub_215DED67C(a1, (float **)&v7);
  uint64_t v7 = 4;
  uint64_t v8 = a2 + 40;
  sub_215DED67C(a1, (float **)&v7);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 40) = *(void *)(v6 - 8);
  *(void *)(a1 + 56) = v6 - 8;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
}

void sub_215A83EA0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 104) != 1) {
    sub_215742D4C();
  }
  uint64_t v4 = a2 + 8;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "affine3x4";
    *(void *)(a1 + 80) = 9;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEB804(a1);
  uint64_t v7 = 4;
  uint64_t v8 = v4;
  sub_215DEDAA0(a1, &v7);
  uint64_t v7 = 4;
  uint64_t v8 = a2 + 40;
  sub_215DEDAA0(a1, &v7);
  uint64_t v7 = 4;
  uint64_t v8 = a2 + 72;
  sub_215DEDAA0(a1, &v7);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)(a1 + 40) = *(void *)(v6 - 8);
  *(void *)(a1 + 56) = v6 - 8;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
}

void sub_215A83F78()
{
  int v0 = 0;
  sub_215A8232C();
}

void sub_215A84040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A8405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A84070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215A84084(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      uint64_t v8 = *(void **)(a2 + 24);
      char v20 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        uint64_t v6 = *(void **)(a2 + 24);
        char v18 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      int v10 = *(void **)(a2 + 24);
      char v21 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      int v9 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v22 = v7;
  sub_215731D94(v11, (uint64_t)&v22, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    unsigned int v13 = *(void **)(a2 + 24);
    char v23 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_215A842A0(a2, v3 + 200);
  char v14 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void **)(a2 + 24);
    char v24 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v15, (uint64_t)&v24, 1);
  }
  unsigned int v16 = *(void **)(a2 + 24);
  char v25 = v14;
  uint64_t result = sub_215731D94(v16, (uint64_t)&v25, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A842A0(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sub_215A81CF0((uint64_t)v3, a2);
  sub_215A84388(a1, (uint64_t)v3);
  if (v9 && v8 < 0) {
    operator delete(__p);
  }
  if (v6)
  {
    if (v5 < 0) {
      operator delete(v4);
    }
  }
}

void sub_215A84340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0) {
    operator delete(__p);
  }
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_215A84388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  if (*(void *)(a1 + 40))
  {
    char v5 = *(void **)(a1 + 24);
    char v13 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v5, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  sub_215A844E0(a1, v4);
  char v6 = *(unsigned char *)(a1 + 34);
  if (*(void *)(a1 + 40))
  {
    char v7 = *(void **)(a1 + 24);
    char v14 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v7, (uint64_t)&v14, 1);
  }
  char v8 = *(void **)(a1 + 24);
  char v15 = v6;
  sub_215731D94(v8, (uint64_t)&v15, 1);
  ++*(void *)(a1 + 40);
  if (*(unsigned char *)(a2 + 144))
  {
    unsigned __int8 v10 = 1;
    sub_215DF927C(a1, &v10);
    sub_215DF933C(a1, a2 + 120);
    if (*(unsigned char *)(a2 + 176))
    {
LABEL_7:
      unsigned __int8 v12 = 1;
      sub_215DF927C(a1, &v12);
      sub_215DF933C(a1, a2 + 152);
      return;
    }
  }
  else
  {
    unsigned __int8 v9 = 0;
    sub_215DF927C(a1, &v9);
    if (*(unsigned char *)(a2 + 176)) {
      goto LABEL_7;
    }
  }
  unsigned __int8 v11 = 0;
  sub_215DF927C(a1, &v11);
}

void sub_215A844E0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v73 = *(unsigned char *)a2;
  sub_215DF927C(a1, &v73);
  switch(*(unsigned char *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2) {
        goto LABEL_84;
      }
      uint64_t v4 = (void *)(a1 + 40);
      if (*(void *)(a1 + 40))
      {
        char v5 = *(void **)(a1 + 24);
        char v74 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v5, (uint64_t)&v74, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v6 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v6 + 1;
      if (v6 != -1)
      {
        char v7 = *(void **)(a1 + 24);
        char v74 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v7, (uint64_t)&v74, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v8 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v8 + 1;
      if (v8 != -1)
      {
        unsigned __int8 v9 = *(void **)(a1 + 24);
        char v74 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v9, (uint64_t)&v74, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v10 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v10 + 1;
      if (v10 != -1)
      {
        unsigned __int8 v11 = *(void **)(a1 + 24);
        char v75 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v11, (uint64_t)&v75, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v12 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v12 + 1;
      if (v12 != -1)
      {
        char v13 = *(void **)(a1 + 24);
        char v75 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v13, (uint64_t)&v75, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v14 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v14 + 1;
      if (v14 != -1)
      {
        char v15 = *(void **)(a1 + 24);
        char v75 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v15, (uint64_t)&v75, 1);
      }
      goto LABEL_15;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3) {
        goto LABEL_84;
      }
      uint64_t v4 = (void *)(a1 + 40);
      if (*(void *)(a1 + 40))
      {
        unint64_t v39 = *(void **)(a1 + 24);
        char v76 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v39, (uint64_t)&v76, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v40 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v40 + 1;
      if (v40 != -1)
      {
        unsigned int v41 = *(void **)(a1 + 24);
        char v76 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v41, (uint64_t)&v76, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v42 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v42 + 1;
      if (v42 != -1)
      {
        unsigned int v43 = *(void **)(a1 + 24);
        char v76 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v43, (uint64_t)&v76, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v44 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v44 + 1;
      if (v44 != -1)
      {
        unint64_t v45 = *(void **)(a1 + 24);
        char v77 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v45, (uint64_t)&v77, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v46 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v46 + 1;
      if (v46 != -1)
      {
        unint64_t v47 = *(void **)(a1 + 24);
        char v77 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v47, (uint64_t)&v77, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v48 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v48 + 1;
      if (v48 != -1)
      {
        char v49 = *(void **)(a1 + 24);
        char v77 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v49, (uint64_t)&v77, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      goto LABEL_82;
    case 4:
      if (*(_DWORD *)(a2 + 104)) {
        goto LABEL_84;
      }
      uint64_t v4 = (void *)(a1 + 40);
      if (*(void *)(a1 + 40))
      {
        unsigned int v16 = *(void **)(a1 + 24);
        char v78 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v16, (uint64_t)&v78, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v17 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v17 + 1;
      if (v17 != -1)
      {
        char v18 = *(void **)(a1 + 24);
        char v78 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v18, (uint64_t)&v78, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v19 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v19 + 1;
      if (v19 != -1)
      {
        char v20 = *(void **)(a1 + 24);
        char v78 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v20, (uint64_t)&v78, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v21 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v21 + 1;
      if (v21 != -1)
      {
        char v22 = *(void **)(a1 + 24);
        char v78 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v22, (uint64_t)&v78, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v23 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v23 + 1;
      if (v23 != -1)
      {
        char v24 = *(void **)(a1 + 24);
        char v79 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v24, (uint64_t)&v79, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v25 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v25 + 1;
      if (v25 != -1)
      {
        uint64_t v26 = *(void **)(a1 + 24);
        char v79 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v26, (uint64_t)&v79, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v27 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v27 + 1;
      if (v27 != -1)
      {
        unsigned int v28 = *(void **)(a1 + 24);
        char v79 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v28, (uint64_t)&v79, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v29 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v29 + 1;
      if (v29 != -1)
      {
        unint64_t v30 = *(void **)(a1 + 24);
        char v79 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v30, (uint64_t)&v79, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v31 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v31 + 1;
      if (v31 != -1)
      {
        unsigned int v32 = *(void **)(a1 + 24);
        char v80 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v32, (uint64_t)&v80, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v33 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v33 + 1;
      if (v33 != -1)
      {
        unsigned int v34 = *(void **)(a1 + 24);
        char v80 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v34, (uint64_t)&v80, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v35 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v35 + 1;
      if (v35 != -1)
      {
        uint64_t v36 = *(void **)(a1 + 24);
        char v80 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v36, (uint64_t)&v80, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v37 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v37 + 1;
      if (v37 != -1)
      {
        unint64_t v38 = *(void **)(a1 + 24);
        char v80 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v38, (uint64_t)&v80, 1);
      }
LABEL_15:
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      goto LABEL_83;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1) {
LABEL_84:
      }
        sub_215742D4C();
      uint64_t v4 = (void *)(a1 + 40);
      if (*(void *)(a1 + 40))
      {
        uint64_t v50 = *(void **)(a1 + 24);
        char v81 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v50, (uint64_t)&v81, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v51 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v51 + 1;
      if (v51 != -1)
      {
        char v52 = *(void **)(a1 + 24);
        char v81 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v52, (uint64_t)&v81, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v53 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v53 + 1;
      if (v53 != -1)
      {
        uint64_t v54 = *(void **)(a1 + 24);
        char v81 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v54, (uint64_t)&v81, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v55 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v55 + 1;
      if (v55 != -1)
      {
        uint64_t v56 = *(void **)(a1 + 24);
        char v81 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v56, (uint64_t)&v81, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v57 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v57 + 1;
      if (v57 != -1)
      {
        uint64_t v58 = *(void **)(a1 + 24);
        char v82 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v58, (uint64_t)&v82, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v59 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v59 + 1;
      if (v59 != -1)
      {
        uint64_t v60 = *(void **)(a1 + 24);
        char v82 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v60, (uint64_t)&v82, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v61 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v61 + 1;
      if (v61 != -1)
      {
        unint64_t v62 = *(void **)(a1 + 24);
        char v82 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v62, (uint64_t)&v82, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v63 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v63 + 1;
      if (v63 != -1)
      {
        uint64_t v64 = *(void **)(a1 + 24);
        char v82 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v64, (uint64_t)&v82, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v65 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v65 + 1;
      if (v65 != -1)
      {
        uint64_t v66 = *(void **)(a1 + 24);
        char v83 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v66, (uint64_t)&v83, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v67 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v67 + 1;
      if (v67 != -1)
      {
        v68 = *(void **)(a1 + 24);
        char v83 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v68, (uint64_t)&v83, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v69 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v69 + 1;
      if (v69 != -1)
      {
        char v70 = *(void **)(a1 + 24);
        char v83 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v70, (uint64_t)&v83, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
      uint64_t v71 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v71 + 1;
      if (v71 != -1)
      {
        char v72 = *(void **)(a1 + 24);
        char v83 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v72, (uint64_t)&v83, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 17;
LABEL_82:
      std::ostream::operator<<();
LABEL_83:
      ++*v4;
      break;
    default:
      return;
  }
}

void sub_215A8516C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  int __src = 1;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v12, 4);
  sub_215D02034((void *)a2);
  sub_215A85328(a2, v3 + 200);
  uint64_t v10 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v10 + 10) = *(void *)(a2 + 32) - v10 - 18;
  *(void *)(a2 + 56) -= 8;
}

void sub_215A85328(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sub_215A81CF0((uint64_t)v3, a2);
  sub_215A85410(a1, v3);
  if (v9 && v8 < 0) {
    operator delete(__p);
  }
  if (v6)
  {
    if (v5 < 0) {
      operator delete(v4);
    }
  }
}

void sub_215A853C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0) {
    operator delete(__p);
  }
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_215A85410(uint64_t a1, char *a2)
{
  uint64_t v4 = (uint64_t)(a2 + 8);
  int __src = 1;
  uint64_t v5 = a1 + 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, &v9, 4);
  sub_215D02034((void *)a1);
  sub_215A85590(a1, v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
  *(void *)(v6 + 10) = *(void *)(a1 + 32) - v6 - 18;
  *(void *)(a1 + 56) -= 8;
  if (a2[144])
  {
    char v10 = 1;
    sub_215D04A50(v5, *(char **)(a1 + 32), &v10, &v11, 1);
    sub_215D023C8(a1, a2 + 120);
    if (a2[176])
    {
LABEL_3:
      char v12 = 1;
      sub_215D04A50(v5, *(char **)(a1 + 32), &v12, (char *)&v13, 1);
      return sub_215D023C8(a1, a2 + 152);
    }
  }
  else
  {
    char v9 = 0;
    sub_215D04A50(v5, *(char **)(a1 + 32), &v9, &v10, 1);
    if (a2[176]) {
      goto LABEL_3;
    }
  }
  char v11 = 0;
  return sub_215D04A50(v5, *(char **)(a1 + 32), &v11, &v12, 1);
}

char *sub_215A85590(uint64_t a1, uint64_t a2)
{
  char __src = *(unsigned char *)a2;
  uint64_t v4 = a1 + 24;
  uint64_t result = sub_215D04A50(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v16, 1);
  switch(*(unsigned char *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2) {
        goto LABEL_11;
      }
      uint64_t v6 = (char *)(a2 + 8);
      unsigned int v7 = *(char **)(a1 + 32);
      char v8 = (char *)(a2 + 20);
      int64_t v9 = 12;
      uint64_t v10 = v4;
      char v11 = v8;
      int64_t v12 = 12;
      goto LABEL_10;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3) {
        goto LABEL_11;
      }
      uint64_t v6 = (char *)(a2 + 8);
      unsigned int v7 = *(char **)(a1 + 32);
      char v8 = (char *)(a2 + 32);
      int64_t v9 = 24;
      uint64_t v10 = v4;
      char v11 = v8;
      int64_t v12 = 24;
      goto LABEL_10;
    case 4:
      if (*(_DWORD *)(a2 + 104)) {
        goto LABEL_11;
      }
      uint64_t v13 = (char *)(a2 + 24);
      int64_t v9 = 16;
      sub_215D04A50(v4, *(char **)(a1 + 32), (char *)(a2 + 8), (char *)(a2 + 24), 16);
      unsigned int v7 = *(char **)(a1 + 32);
      char v8 = (char *)(a2 + 40);
      uint64_t v10 = v4;
      uint64_t v6 = v13;
      char v11 = v8;
      int64_t v12 = 16;
      goto LABEL_10;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1) {
LABEL_11:
      }
        sub_215742D4C();
      uint64_t v14 = (char *)(a2 + 40);
      int64_t v9 = 32;
      sub_215D04A50(v4, *(char **)(a1 + 32), (char *)(a2 + 8), (char *)(a2 + 40), 32);
      unsigned int v7 = *(char **)(a1 + 32);
      char v8 = (char *)(a2 + 72);
      uint64_t v10 = v4;
      uint64_t v6 = v14;
      char v11 = v8;
      int64_t v12 = 32;
LABEL_10:
      sub_215D04A50(v10, v7, v6, v11, v12);
      uint64_t result = sub_215D04A50(v4, *(char **)(a1 + 32), v8, &v8[v9], v9);
      break;
    default:
      return result;
  }
  return result;
}

void sub_215A85738(int *a1, uint64_t a2, uint64_t a3)
{
  int v6 = 1;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1
    || *a1 == 2 && (int v7 = 1, (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7), *a1 <= 0))
  {
    sub_215A85880(a2, a3);
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    sub_215A85880(a2, a3);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
}

void sub_215A85880(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  sub_215A81CF0((uint64_t)v3, a2);
  sub_215A85968(a1, (uint64_t)v3);
  if (v9 && v8 < 0) {
    operator delete(__p);
  }
  if (v6)
  {
    if (v5 < 0) {
      operator delete(v4);
    }
  }
}

void sub_215A85920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a37 && a36 < 0) {
    operator delete(__p);
  }
  if (a30)
  {
    if (a29 < 0)
    {
      operator delete(a24);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A85968(uint64_t a1, uint64_t a2)
{
  *(void *)char v5 = *(void *)(a1 + 8);
  sub_215A85B08(v5, (unsigned char *)a1, a2 + 8);
  if (*(unsigned char *)(a2 + 144))
  {
    char v7 = 1;
    (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, a2 + 120);
    if (*(unsigned char *)(a2 + 176))
    {
LABEL_3:
      char v9 = 1;
      (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v9);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, a2 + 152);
    }
  }
  else
  {
    char v6 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v6);
    if (*(unsigned char *)(a2 + 176)) {
      goto LABEL_3;
    }
  }
  char v8 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v8);
}

uint64_t sub_215A85B08(int *a1, unsigned char *a2, uint64_t a3)
{
  int v7 = 1;
  (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v7);
  if (*a1 < 1) {
    return sub_215A85C50(a2, a3);
  }
  if (*a1 == 2)
  {
    int v8 = 1;
    (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v8);
    if (*a1 <= 0) {
      return sub_215A85C50(a2, a3);
    }
  }
  (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
  sub_215A85C50(a2, a3);
  return (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 24))(a2);
}

uint64_t sub_215A85C50(unsigned char *a1, uint64_t a2)
{
  char v5 = (unsigned char *)a2;
  uint64_t result = sub_215A85F64(a1, &v5);
  switch(*(unsigned char *)a2)
  {
    case 1:
      if (*(_DWORD *)(a2 + 104) != 2) {
        goto LABEL_10;
      }
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 8);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 12);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 16);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 20);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 24);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 28);
      break;
    case 2:
      if (*(_DWORD *)(a2 + 104) != 3) {
        goto LABEL_10;
      }
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 8);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 16);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 24);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 32);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 40);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 48);
      break;
    case 4:
      if (*(_DWORD *)(a2 + 104)) {
        goto LABEL_10;
      }
      char v5 = (unsigned char *)(a2 + 8);
      uint64_t result = sub_215A860D0((uint64_t)a1, &v5);
      break;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1) {
LABEL_10:
      }
        sub_215742D4C();
      char v5 = (unsigned char *)(a2 + 8);
      uint64_t result = sub_215A8630C((uint64_t)a1, &v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_215A85F64(unsigned char *a1, unsigned char **a2)
{
  if ((a1[12] & 2) != 0)
  {
    int v4 = 0;
    sub_215A8232C();
  }
  v3[0] = **a2;
  return (*(uint64_t (**)(unsigned char *, unsigned char *))(*(void *)a1 + 80))(a1, v3);
}

void sub_215A8608C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A860A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A860BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215A860D0(uint64_t a1, void *a2)
{
  uint64_t v3 = *a2;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 128))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 36);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 40);
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128);

  return v4(a1, v3 + 44);
}

uint64_t sub_215A8630C(uint64_t a1, void *a2)
{
  uint64_t v3 = *a2;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 136))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 80);
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136);

  return v4(a1, v3 + 88);
}

void sub_215A86548(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  int v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A86C58(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  char v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A8780C(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    char v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A881C0(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A88D74(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A89930(&v10, v8);
      }
      else {
        sub_215A86714(&v9, (void **)a1);
      }
    }
  }
}

void sub_215A86714(uint64_t *a1, void **a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v29);
    sub_2159A3DA4((uint64_t)&v30, v29);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v28, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v29);
  sub_2159A3DA4((uint64_t)&v30, v29);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v28, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v17 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v17;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v36;
    long long v19 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v20 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v20;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v21 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v21;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v30);
  if (v45)
  {
LABEL_38:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v42 && SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  if (v39 && SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (v34 && SHIBYTE(v33) < 0) {
    operator delete((void *)v32);
  }
  sub_2157C6F18((uint64_t)v29);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  char v24 = (void (**)(void **, unsigned int *))*a2;
  v29[0] = (uint64_t)a2[1];
  int v25 = v29[0];
  unsigned int v30 = 6;
  v24[13](a2, &v30);
  if (v25 < 1)
  {
    if (v30 < 3) {
      sub_2159B6FFC((uint64_t)&v30, a2, v4, v30);
    }
    else {
      sub_2159B71F0(a2, v4, v30);
    }
  }
  else
  {
    sub_2159B6970((int *)v29, a2, v4, v30);
  }
  uint64_t v26 = (void (**)(void **, unsigned int *))*a2;
  v29[0] = (uint64_t)a2[1];
  int v27 = v29[0];
  unsigned int v30 = 1;
  v26[13](a2, &v30);
  if (v27 < 1) {
    sub_215A8A864((uint64_t *)a2, v3 + 200);
  }
  else {
    sub_215A8A510((int *)v29, (uint64_t *)a2, v3 + 200);
  }
}

void sub_215A86C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A86C58(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A871B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A87200(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "src_to_dst";
  *(void *)(a1 + 96) = 10;
  if (!v2) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF07E4(a1);
  int v4 = 1;
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF1DC8((void *)a1, &v4);
  sub_215A87328(a1);
}

void sub_215A87328(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "se3_type";
  *(void *)(a1 + 96) = 8;
  if (!v1) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215A876A4((void *)a1);
}

void sub_215A876A4(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  int v2 = (void **)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D30C0C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_215A8779C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A8780C(uint64_t *a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v29, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v29);
        if (!v44) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(unsigned char *)(v3 + 64) = 0;
    if (v33)
    {
      uint64_t v8 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(void *)(v3 + 56) = v8;
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v35;
    long long v10 = v34;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v38)
    {
      uint64_t v11 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(void *)(v3 + 112) = v11;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v41)
    {
      uint64_t v12 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(void *)(v3 + 144) = v12;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(void *)(v3 + 176) = v43;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v42;
    if (!(void)v42) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v42 + 1);
    uint64_t v16 = (void *)v42;
    if (*((void *)&v42 + 1) == (void)v42) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v42;
LABEL_45:
    *((void *)&v42 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v29, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v30;
    *(unsigned char *)(v3 + 64) = 0;
    if (v33)
    {
      uint64_t v17 = v32;
      *(_OWORD *)(v3 + 40) = v31;
      *(void *)(v3 + 56) = v17;
      long long v31 = 0uLL;
      uint64_t v32 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v35;
    long long v19 = v34;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v38)
    {
      uint64_t v20 = v37;
      *(_OWORD *)(v3 + 96) = v36;
      *(void *)(v3 + 112) = v20;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v41)
    {
      uint64_t v21 = v40;
      *(_OWORD *)(v3 + 128) = v39;
      *(void *)(v3 + 144) = v21;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v44;
    if (v44)
    {
      *(_OWORD *)(v3 + 160) = v42;
      *(void *)(v3 + 176) = v43;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v29);
  if (v44)
  {
LABEL_38:
    uint64_t v14 = v42;
    if (!(void)v42) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v42 + 1);
    uint64_t v16 = (void *)v42;
    if (*((void *)&v42 + 1) == (void)v42) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v41 && SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v33 && SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  sub_2157C6F18((uint64_t)v28);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v28, a2, v4);
  LODWORD(v28[0]) = 1;
  sub_215DFF824(a2[6], v28);
  sub_2159B0060(a2 + 2);
  sub_215A87D24(a2, v3 + 200);
  uint64_t v24 = a2[4];
  uint64_t result = (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2);
  uint64_t v26 = *(void *)(v24 - 16) - result + *(void *)(v24 - 8);
  if (v26) {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a2[2] + 40))(a2 + 2, v26);
  }
  a2[4] -= 16;
  return result;
}

void sub_215A87CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A87D24(void *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  int v9 = 1;
  sub_215DFF824(a1[6], &v9);
  sub_2159B0060(a1 + 2);
  sub_215A87ED8((uint64_t)a1, v4);
  uint64_t v5 = a1[4];
  uint64_t v6 = *(void *)(v5 - 16) - (*(uint64_t (**)(void *))(a1[2] + 32))(a1 + 2) + *(void *)(v5 - 8);
  if (v6) {
    (*(void (**)(void *, uint64_t))(a1[2] + 40))(a1 + 2, v6);
  }
  a1[4] -= 16;
  uint64_t v7 = (void **)(a2 + 120);
  char v10 = 0;
  sub_215DFF4BC(a1[6], &v10);
  if (v10)
  {
    if (!*(unsigned char *)(a2 + 144))
    {
      *uint64_t v7 = 0;
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(unsigned char *)(a2 + 144) = 1;
    }
    sub_215E000A8(a1[6], (void **)(a2 + 120));
  }
  else if (*(unsigned char *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0) {
      operator delete(*v7);
    }
    *(unsigned char *)(a2 + 144) = 0;
  }
  uint64_t v8 = (void **)(a2 + 152);
  char v11 = 0;
  sub_215DFF4BC(a1[6], &v11);
  if (v11)
  {
    if (!*(unsigned char *)(a2 + 176))
    {
      *uint64_t v8 = 0;
      *(void *)(a2 + 160) = 0;
      *(void *)(a2 + 168) = 0;
      *(unsigned char *)(a2 + 176) = 1;
    }
    sub_215E000A8(a1[6], (void **)(a2 + 152));
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0) {
      operator delete(*v8);
    }
    *(unsigned char *)(a2 + 176) = 0;
  }
}

void sub_215A87ED8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v19 = 0;
  sub_215DFF4BC(*(void *)(a1 + 48), &v19);
  int v4 = v19;
  *(unsigned char *)a2 = v19;
  switch(v4)
  {
    case 1:
      uint64_t v5 = (float *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(void *)uint64_t v5 = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      uint64_t v6 = *(void *)(a1 + 48);
      sub_215DFFD1C(v6, v5);
      sub_215DFFD1C(v6, (float *)(a2 + 12));
      sub_215DFFD1C(v6, (float *)(a2 + 16));
      uint64_t v7 = *(void *)(a1 + 48);
      sub_215DFFD1C(v7, (float *)(a2 + 20));
      sub_215DFFD1C(v7, (float *)(a2 + 24));
      uint64_t v8 = (float *)(a2 + 28);
      goto LABEL_11;
    case 2:
      int v9 = (double *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)int v9 = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      uint64_t v10 = *(void *)(a1 + 48);
      sub_215DFFE68(v10, v9);
      sub_215DFFE68(v10, (double *)(a2 + 16));
      sub_215DFFE68(v10, (double *)(a2 + 24));
      uint64_t v11 = *(void *)(a1 + 48);
      sub_215DFFE68(v11, (double *)(a2 + 32));
      sub_215DFFE68(v11, (double *)(a2 + 40));
      uint64_t v12 = (double *)(a2 + 48);
      goto LABEL_15;
    case 4:
      int v13 = (float *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)int v13 = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      uint64_t v14 = *(void *)(a1 + 48);
      sub_215DFFD1C(v14, v13);
      sub_215DFFD1C(v14, (float *)(a2 + 12));
      sub_215DFFD1C(v14, (float *)(a2 + 16));
      sub_215DFFD1C(v14, (float *)(a2 + 20));
      uint64_t v15 = *(void *)(a1 + 48);
      sub_215DFFD1C(v15, (float *)(a2 + 24));
      sub_215DFFD1C(v15, (float *)(a2 + 28));
      sub_215DFFD1C(v15, (float *)(a2 + 32));
      sub_215DFFD1C(v15, (float *)(a2 + 36));
      uint64_t v7 = *(void *)(a1 + 48);
      sub_215DFFD1C(v7, (float *)(a2 + 40));
      sub_215DFFD1C(v7, (float *)(a2 + 44));
      sub_215DFFD1C(v7, (float *)(a2 + 48));
      uint64_t v8 = (float *)(a2 + 52);
LABEL_11:
      sub_215DFFD1C(v7, v8);
      return;
    case 5:
      uint64_t v16 = (double *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)uint64_t v16 = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      uint64_t v17 = *(void *)(a1 + 48);
      sub_215DFFE68(v17, v16);
      sub_215DFFE68(v17, (double *)(a2 + 16));
      sub_215DFFE68(v17, (double *)(a2 + 24));
      sub_215DFFE68(v17, (double *)(a2 + 32));
      uint64_t v18 = *(void *)(a1 + 48);
      sub_215DFFE68(v18, (double *)(a2 + 40));
      sub_215DFFE68(v18, (double *)(a2 + 48));
      sub_215DFFE68(v18, (double *)(a2 + 56));
      sub_215DFFE68(v18, (double *)(a2 + 64));
      uint64_t v11 = *(void *)(a1 + 48);
      sub_215DFFE68(v11, (double *)(a2 + 72));
      sub_215DFFE68(v11, (double *)(a2 + 80));
      sub_215DFFE68(v11, (double *)(a2 + 88));
      uint64_t v12 = (double *)(a2 + 96);
LABEL_15:
      sub_215DFFE68(v11, v12);
      break;
    default:
      return;
  }
}

void sub_215A881C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A88720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A88768(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "src_to_dst";
  *(void *)(a1 + 96) = 10;
  if (!v2) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF01A0(a1);
  int v4 = 1;
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF0F9C((void *)a1, &v4);
  sub_215A88890(a1);
}

void sub_215A88890(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "se3_type";
  *(void *)(a1 + 96) = 8;
  if (!v1) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215A88C0C((void *)a1);
}

void sub_215A88C0C(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  int v2 = (void **)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D3040C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_215A88D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A88D74(uint64_t *a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)&__p);
    sub_2159A3DA4((uint64_t)v34, (uint64_t *)&__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v34);
        if (!v49) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v30, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(unsigned char *)(v3 + 64) = 0;
    if (v38)
    {
      uint64_t v8 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(void *)(v3 + 56) = v8;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v40;
    long long v10 = v39;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v43)
    {
      uint64_t v11 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(void *)(v3 + 112) = v11;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v46)
    {
      uint64_t v12 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(void *)(v3 + 144) = v12;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(void *)(v3 + 176) = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v47;
    if (!(void)v47) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v47 + 1);
    uint64_t v16 = (void *)v47;
    if (*((void *)&v47 + 1) == (void)v47) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v47;
LABEL_45:
    *((void *)&v47 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)&__p);
  sub_2159A3DA4((uint64_t)v34, (uint64_t *)&__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v30, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v35;
    *(unsigned char *)(v3 + 64) = 0;
    if (v38)
    {
      uint64_t v17 = v37;
      *(_OWORD *)(v3 + 40) = v36;
      *(void *)(v3 + 56) = v17;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v40;
    long long v19 = v39;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v43)
    {
      uint64_t v20 = v42;
      *(_OWORD *)(v3 + 96) = v41;
      *(void *)(v3 + 112) = v20;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v46)
    {
      uint64_t v21 = v45;
      *(_OWORD *)(v3 + 128) = v44;
      *(void *)(v3 + 144) = v21;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v49;
    if (v49)
    {
      *(_OWORD *)(v3 + 160) = v47;
      *(void *)(v3 + 176) = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v34);
  if (v49)
  {
LABEL_38:
    uint64_t v14 = v47;
    if (!(void)v47) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v47 + 1);
    uint64_t v16 = (void *)v47;
    if (*((void *)&v47 + 1) == (void)v47) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v46 && SHIBYTE(v45) < 0) {
    operator delete((void *)v44);
  }
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  sub_2157C6F18((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p) = 6;
  sub_215DFABD4(a2, &__p);
  unsigned int v24 = __p;
  if (__p >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p;
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)&__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_92:
          char v29 = 0;
          if (v33 < 0) {
            goto LABEL_95;
          }
          goto LABEL_81;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_92;
      }
      char v29 = 1;
      if (v33 < 0) {
LABEL_95:
      }
        operator delete(__p);
LABEL_81:
      if (*(unsigned char *)(a2 + 131)) {
        char v28 = 0;
      }
      else {
        char v28 = v29;
      }
    }
    while ((v28 & 1) != 0);
  }
  LODWORD(__p) = 1;
  sub_215DFABD4(a2, &__p);
  sub_215A893AC(a2, v3 + 200);
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v33 < 0)
      {
        if (v32 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_77:
          char v27 = 0;
          if (v33 < 0) {
            goto LABEL_80;
          }
          goto LABEL_66;
        }
      }
      else if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_77;
      }
      char v27 = 1;
      if (v33 < 0) {
LABEL_80:
      }
        operator delete(__p);
LABEL_66:
      if (*(unsigned char *)(a2 + 131)) {
        char v26 = 0;
      }
      else {
        char v26 = v27;
      }
    }
    while ((v26 & 1) != 0);
  }
}

void sub_215A89364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_215A893AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  LODWORD(__p[0]) = 1;
  sub_215DFABD4(a1, __p);
  sub_215A8966C(a1, v4);
  if (!*(unsigned char *)(a1 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a1, (uint64_t)__p);
      if (SHIBYTE(v12) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_17:
          char v7 = 0;
          if (SHIBYTE(v12) < 0) {
            goto LABEL_20;
          }
          goto LABEL_6;
        }
      }
      else if (SHIBYTE(v12) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_17;
      }
      char v7 = 1;
      if (SHIBYTE(v12) < 0) {
LABEL_20:
      }
        operator delete(__p[0]);
LABEL_6:
      if (*(unsigned char *)(a1 + 131)) {
        char v6 = 0;
      }
      else {
        char v6 = v7;
      }
    }
    while ((v6 & 1) != 0);
  }
  int v5 = (void **)(a2 + 120);
  char v10 = 0;
  sub_215DFA01C(a1, &v10);
  if (v10)
  {
    if (*(unsigned char *)(a2 + 144))
    {
      ++*(void *)(a1 + 80);
      if (!*(unsigned char *)(a1 + 128)) {
        goto LABEL_28;
      }
    }
    else
    {
      *int v5 = 0;
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(unsigned char *)(a2 + 144) = 1;
      ++*(void *)(a1 + 80);
      if (!*(unsigned char *)(a1 + 128))
      {
LABEL_28:
        sub_215DFD700(a1, (uint64_t)__p);
        if (*(char *)(a2 + 143) < 0) {
          operator delete(*v5);
        }
        *(_OWORD *)int v5 = *(_OWORD *)__p;
        *(void *)(a2 + 136) = v12;
        ++*(void *)(a1 + 104);
        goto LABEL_31;
      }
    }
    if (*(unsigned char *)(a1 + 131))
    {
      *(unsigned char *)(a1 + 132) = 1;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  if (*(unsigned char *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0) {
      operator delete(*v5);
    }
    *(unsigned char *)(a2 + 144) = 0;
  }
LABEL_31:
  uint64_t v8 = (void **)(a2 + 152);
  char v10 = 0;
  sub_215DFA01C(a1, &v10);
  if (v10)
  {
    if (*(unsigned char *)(a2 + 176))
    {
      ++*(void *)(a1 + 80);
      if (!*(unsigned char *)(a1 + 128)) {
        goto LABEL_43;
      }
    }
    else
    {
      *uint64_t v8 = 0;
      *(void *)(a2 + 160) = 0;
      *(void *)(a2 + 168) = 0;
      *(unsigned char *)(a2 + 176) = 1;
      ++*(void *)(a1 + 80);
      if (!*(unsigned char *)(a1 + 128))
      {
LABEL_43:
        sub_215DFD700(a1, (uint64_t)__p);
        if (*(char *)(a2 + 175) < 0) {
          operator delete(*v8);
        }
        double result = *(double *)__p;
        *(_OWORD *)uint64_t v8 = *(_OWORD *)__p;
        *(void *)(a2 + 168) = v12;
        ++*(void *)(a1 + 104);
        return result;
      }
    }
    if (*(unsigned char *)(a1 + 131))
    {
      *(unsigned char *)(a1 + 132) = 1;
      return result;
    }
    goto LABEL_43;
  }
  if (*(unsigned char *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0) {
      operator delete(*v8);
    }
    *(unsigned char *)(a2 + 176) = 0;
  }
  return result;
}

void sub_215A8966C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v10 = 0;
  sub_215DFA01C(a1, &v10);
  int v4 = v10;
  *(unsigned char *)a2 = v10;
  switch(v4)
  {
    case 1:
      int v5 = (_DWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *(void *)int v5 = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      sub_215DFBEC8(a1, v5);
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 12));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 16));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 20));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 24));
      char v6 = (_DWORD *)(a2 + 28);
      goto LABEL_11;
    case 2:
      char v7 = (void *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)char v7 = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      sub_215DFC1E8(a1, v7);
      sub_215DFC1E8(a1, (void *)(a2 + 16));
      sub_215DFC1E8(a1, (void *)(a2 + 24));
      sub_215DFC1E8(a1, (void *)(a2 + 32));
      sub_215DFC1E8(a1, (void *)(a2 + 40));
      sub_215DFC1E8(a1, (void *)(a2 + 48));
      break;
    case 4:
      uint64_t v8 = (_DWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)uint64_t v8 = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      sub_215DFBEC8(a1, v8);
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 12));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 16));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 20));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 24));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 28));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 32));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 36));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 40));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 44));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 48));
      char v6 = (_DWORD *)(a2 + 52);
LABEL_11:
      sub_215DFBEC8(a1, v6);
      break;
    case 5:
      uint64_t v9 = (void *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)uint64_t v9 = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      sub_215DFC1E8(a1, v9);
      sub_215DFC1E8(a1, (void *)(a2 + 16));
      sub_215DFC1E8(a1, (void *)(a2 + 24));
      sub_215DFC1E8(a1, (void *)(a2 + 32));
      sub_215DFC1E8(a1, (void *)(a2 + 40));
      sub_215DFC1E8(a1, (void *)(a2 + 48));
      sub_215DFC1E8(a1, (void *)(a2 + 56));
      sub_215DFC1E8(a1, (void *)(a2 + 64));
      sub_215DFC1E8(a1, (void *)(a2 + 72));
      sub_215DFC1E8(a1, (void *)(a2 + 80));
      sub_215DFC1E8(a1, (void *)(a2 + 88));
      sub_215DFC1E8(a1, (void *)(a2 + 96));
      break;
    default:
      return;
  }
}

void sub_215A89930(uint64_t *a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v25);
    sub_2159A3DA4((uint64_t)v26, v25);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v26);
        if (!v41) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v24, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v8 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v8;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v32;
    long long v10 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v11 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v11;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v12 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v12;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v39;
LABEL_45:
    *((void *)&v39 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v25);
  sub_2159A3DA4((uint64_t)v26, v25);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v24, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v27;
    *(unsigned char *)(v3 + 64) = 0;
    if (v30)
    {
      uint64_t v17 = v29;
      *(_OWORD *)(v3 + 40) = v28;
      *(void *)(v3 + 56) = v17;
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v32;
    long long v19 = v31;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v35)
    {
      uint64_t v20 = v34;
      *(_OWORD *)(v3 + 96) = v33;
      *(void *)(v3 + 112) = v20;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v38)
    {
      uint64_t v21 = v37;
      *(_OWORD *)(v3 + 128) = v36;
      *(void *)(v3 + 144) = v21;
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v41;
    if (v41)
    {
      *(_OWORD *)(v3 + 160) = v39;
      *(void *)(v3 + 176) = v40;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v26);
  if (v41)
  {
LABEL_38:
    uint64_t v14 = v39;
    if (!(void)v39) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v39 + 1);
    uint64_t v16 = (void *)v39;
    if (*((void *)&v39 + 1) == (void)v39) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v38 && SHIBYTE(v37) < 0) {
    operator delete((void *)v36);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  if (v30 && SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  sub_2157C6F18((uint64_t)v25);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v25, a2, v4);
  sub_215A89DA8((uint64_t)v25, a2, v3 + 200);
}

void sub_215A89D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A89DA8(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[6] = v3 + 4;
  sub_215D02644(a2);
  sub_215A89E90((uint64_t)&v12, a2, a3 + 8);
  sub_2159B5724(a2, a3 + 120);
  sub_2159B5724(a2, a3 + 152);
  uint64_t v9 = a2[12];
  uint64_t v10 = a2[9];
  a2[6] = *(void *)(v9 - 8) + *(void *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_215A89E7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A89E90(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[6] = v3 + 4;
  sub_215D02644(a2);
  sub_215A89F6C(a2, a3);
  uint64_t v9 = a2[12];
  uint64_t v10 = a2[9];
  a2[6] = *(void *)(v9 - 8) + *(void *)(v10 - 8) + 8;
  a2[9] = v10 - 8;
  a2[12] = v9 - 8;
}

void sub_215A89F58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_215A89F6C(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  int v3 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  *(unsigned char *)a2 = v3;
  switch(v3)
  {
    case 1:
      sub_215A8A0E8(a1, a2);
      break;
    case 2:
      *(void *)&double result = sub_215A8A20C(a1, a2).n128_u64[0];
      break;
    case 4:
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      unint64_t v6 = (_OWORD *)(a2 + 8);
      *(void *)&double result = sub_215A8A334(a1, &v6).n128_u64[0];
      break;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      unint64_t v6 = (_OWORD *)(a2 + 8);
      *(void *)&double result = sub_215A8A41C(a1, &v6).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

void sub_215A8A0C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A8A0E8(void *result, uint64_t a2)
{
  unint64_t v2 = (void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104) != 2)
  {
    *unint64_t v2 = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 104) = 2;
  }
  unint64_t v3 = result[6];
  unint64_t v4 = result[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 0xB) {
    goto LABEL_10;
  }
  uint64_t v7 = (uint64_t *)(result[3] + v3);
  uint64_t v8 = *v7;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)v7 + 2);
  *unint64_t v2 = v8;
  unint64_t v9 = result[7];
  unint64_t v10 = result[6] + 12;
  result[6] = v10;
  BOOL v5 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v5) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0xB)
  {
LABEL_10:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unint64_t v12 = result[3] + v10;
  uint64_t v13 = *(void *)v12;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(v12 + 8);
  *(void *)(a2 + 20) = v13;
  result[6] += 12;
  return result;
}

void sub_215A8A1E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A8A1F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_215A8A20C(void *a1, uint64_t a2)
{
  unint64_t v2 = (_OWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 104) != 3)
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *unint64_t v2 = 0u;
    *(_DWORD *)(a2 + 104) = 3;
  }
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 0x17) {
    goto LABEL_10;
  }
  uint64_t v7 = (long long *)(a1[3] + v3);
  long long v8 = *v7;
  *(void *)(a2 + 24) = *((void *)v7 + 2);
  *unint64_t v2 = v8;
  unint64_t v9 = a1[7];
  unint64_t v10 = a1[6] + 24;
  a1[6] = v10;
  BOOL v5 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v5) {
    unint64_t v11 = 0;
  }
  if (v11 <= 0x17)
  {
LABEL_10:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unint64_t v12 = (__n128 *)(a1[3] + v10);
  __n128 result = *v12;
  *(void *)(a2 + 48) = v12[1].n128_u64[0];
  *(__n128 *)(a2 + 32) = result;
  a1[6] += 24;
  return result;
}

void sub_215A8A30C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A8A320(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_215A8A334(void *a1, void *a2)
{
  unint64_t v3 = a1[6];
  unint64_t v2 = a1[7];
  BOOL v4 = v2 >= v3;
  unint64_t v5 = v2 - v3;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xF) {
    goto LABEL_11;
  }
  unint64_t v6 = (_OWORD *)*a2;
  *(_OWORD *)*a2 = *(_OWORD *)(a1[3] + v3);
  unint64_t v7 = a1[7];
  unint64_t v8 = a1[6] + 16;
  a1[6] = v8;
  BOOL v4 = v7 >= v8;
  unint64_t v9 = v7 - v8;
  if (!v4) {
    unint64_t v9 = 0;
  }
  if (v9 < 0x10) {
    goto LABEL_11;
  }
  v6[1] = *(_OWORD *)(a1[3] + v8);
  unint64_t v10 = a1[7];
  unint64_t v11 = a1[6] + 16;
  a1[6] = v11;
  BOOL v4 = v10 >= v11;
  unint64_t v12 = v10 - v11;
  if (!v4) {
    unint64_t v12 = 0;
  }
  if (v12 < 0x10)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  __n128 result = *(__n128 *)(a1[3] + v11);
  v6[2] = result;
  a1[6] += 16;
  return result;
}

void sub_215A8A408(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_215A8A41C(void *a1, _OWORD **a2)
{
  unint64_t v3 = a1[6];
  unint64_t v2 = a1[7];
  BOOL v4 = v2 >= v3;
  unint64_t v5 = v2 - v3;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0x1F) {
    goto LABEL_11;
  }
  unint64_t v6 = *a2;
  unint64_t v7 = (_OWORD *)(a1[3] + v3);
  long long v8 = v7[1];
  *unint64_t v6 = *v7;
  v6[1] = v8;
  unint64_t v9 = a1[7];
  unint64_t v10 = a1[6] + 32;
  a1[6] = v10;
  BOOL v4 = v9 >= v10;
  unint64_t v11 = v9 - v10;
  if (!v4) {
    unint64_t v11 = 0;
  }
  if (v11 < 0x20) {
    goto LABEL_11;
  }
  unint64_t v12 = (_OWORD *)(a1[3] + v10);
  long long v13 = v12[1];
  v6[2] = *v12;
  v6[3] = v13;
  unint64_t v14 = a1[7];
  unint64_t v15 = a1[6] + 32;
  a1[6] = v15;
  BOOL v4 = v14 >= v15;
  unint64_t v16 = v14 - v15;
  if (!v4) {
    unint64_t v16 = 0;
  }
  if (v16 < 0x20)
  {
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unint64_t v17 = a1[3] + v15;
  __n128 result = *(__n128 *)v17;
  long long v19 = *(_OWORD *)(v17 + 16);
  v6[4] = *(_OWORD *)v17;
  v6[5] = v19;
  a1[6] += 32;
  return result;
}

void sub_215A8A4FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A8A510(int *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    unsigned int v9 = 1;
    (*(void (**)(uint64_t *, unsigned int *))(*a2 + 104))(a2, &v9);
    if (v9 >= 2)
    {
      unsigned int v7 = v9;
      long long v8 = sub_215A8A648();
      sub_215E07C10((std::string *)v8, v7, 1u);
    }
    int v5 = *a1;
  }
  if (v5 <= 0)
  {
    sub_215A8A864(a2, a3);
  }
  else
  {
    (*(void (**)(uint64_t *))(*a2 + 16))(a2);
    sub_215A8A864(a2, a3);
    (*(void (**)(uint64_t *))(*a2 + 24))(a2);
  }
}

long long *sub_215A8A648()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678899C0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678899C0))
  {
    return &xmmword_2678899A8;
  }
  int v1 = (char *)sub_215A8A730();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_2678899A8, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_2678899B8 = *((void *)v1 + 2);
    xmmword_2678899A8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678899A8, &dword_21572C000);
  __cxa_guard_release(&qword_2678899C0);
  return &xmmword_2678899A8;
}

void sub_215A8A718(_Unwind_Exception *a1)
{
}

void *sub_215A8A730()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678899E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678899E0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Transform3Sample]", qword_2678899C8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678899C8, &dword_21572C000);
    __cxa_guard_release(&qword_2678899E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889A00, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889A00))
  {
    return &unk_2678899E8;
  }
  sub_215E19DF4((uint64_t)qword_2678899C8, (uint64_t)&unk_2678899E8);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_2678899E8, &dword_21572C000);
  __cxa_guard_release(&qword_267889A00);
  return &unk_2678899E8;
}

void sub_215A8A834(_Unwind_Exception *a1)
{
}

void sub_215A8A84C(_Unwind_Exception *a1)
{
}

void sub_215A8A864(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 8;
  uint64_t v5 = *a1;
  uint64_t v8 = a1[1];
  int v9 = 1;
  (*(void (**)(uint64_t *, int *))(v5 + 104))(a1, &v9);
  if ((int)v8 < 1) {
    sub_215A8ADB4(a1, v4);
  }
  else {
    sub_215A8AA60((int *)&v8, a1, v4);
  }
  unint64_t v6 = (void **)(a2 + 120);
  char v10 = 0;
  (*(void (**)(uint64_t *, char *))(*a1 + 80))(a1, &v10);
  if (v10)
  {
    if (!*(unsigned char *)(a2 + 144))
    {
      *unint64_t v6 = 0;
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(unsigned char *)(a2 + 144) = 1;
    }
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 120);
  }
  else if (*(unsigned char *)(a2 + 144))
  {
    if (*(char *)(a2 + 143) < 0) {
      operator delete(*v6);
    }
    *(unsigned char *)(a2 + 144) = 0;
  }
  unsigned int v7 = (void **)(a2 + 152);
  char v11 = 0;
  (*(void (**)(uint64_t *, char *))(*a1 + 80))(a1, &v11);
  if (v11)
  {
    if (!*(unsigned char *)(a2 + 176))
    {
      *unsigned int v7 = 0;
      *(void *)(a2 + 160) = 0;
      *(void *)(a2 + 168) = 0;
      *(unsigned char *)(a2 + 176) = 1;
    }
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 152);
  }
  else if (*(unsigned char *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) < 0) {
      operator delete(*v7);
    }
    *(unsigned char *)(a2 + 176) = 0;
  }
}

uint64_t sub_215A8AA60(int *a1, unsigned char *a2, uint64_t a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    unsigned int v10 = 1;
    (*(void (**)(unsigned char *, unsigned int *))(*(void *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      unsigned int v8 = v10;
      int v9 = sub_215A8AB98();
      sub_215E07C10((std::string *)v9, v8, 1u);
    }
    int v5 = *a1;
  }
  if (v5 <= 0) {
    return sub_215A8ADB4(a2, a3);
  }
  (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
  sub_215A8ADB4(a2, a3);
  return (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 24))(a2);
}

long long *sub_215A8AB98()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889A20, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889A20))
  {
    return &xmmword_267889A08;
  }
  int v1 = (char *)sub_215A8AC80();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_267889A08, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267889A18 = *((void *)v1 + 2);
    xmmword_267889A08 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889A08, &dword_21572C000);
  __cxa_guard_release(&qword_267889A20);
  return &xmmword_267889A08;
}

void sub_215A8AC68(_Unwind_Exception *a1)
{
}

void *sub_215A8AC80()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889A40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889A40))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::SE3Sample]", qword_267889A28);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889A28, &dword_21572C000);
    __cxa_guard_release(&qword_267889A40);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889A60, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889A60))
  {
    return &unk_267889A48;
  }
  sub_215E19DF4((uint64_t)qword_267889A28, (uint64_t)&unk_267889A48);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267889A48, &dword_21572C000);
  __cxa_guard_release(&qword_267889A60);
  return &unk_267889A48;
}

void sub_215A8AD84(_Unwind_Exception *a1)
{
}

void sub_215A8AD9C(_Unwind_Exception *a1)
{
}

uint64_t sub_215A8ADB4(unsigned char *a1, uint64_t a2)
{
  unsigned int v7 = (unsigned char *)a2;
  uint64_t result = sub_215A8B110(a1, &v7);
  switch(*(unsigned char *)a2)
  {
    case 1:
      int v5 = (void *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 2)
      {
        *int v5 = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 104) = 2;
      }
      (*(void (**)(unsigned char *, void *))(*(void *)a1 + 128))(a1, v5);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 12);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 16);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 20);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 24);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, a2 + 28);
      break;
    case 2:
      unint64_t v6 = (_OWORD *)(a2 + 8);
      if (*(_DWORD *)(a2 + 104) != 3)
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *unint64_t v6 = 0u;
        *(_DWORD *)(a2 + 104) = 3;
      }
      (*(void (**)(unsigned char *, _OWORD *))(*(void *)a1 + 136))(a1, v6);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 16);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 24);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 32);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 40);
      uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 136))(a1, a2 + 48);
      break;
    case 4:
      if (*(_DWORD *)(a2 + 104))
      {
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_DWORD *)(a2 + 104) = 0;
      }
      unsigned int v7 = (unsigned char *)(a2 + 8);
      uint64_t result = sub_215A8B2B4((uint64_t)a1, &v7);
      break;
    case 5:
      if (*(_DWORD *)(a2 + 104) != 1)
      {
        *(_OWORD *)(a2 + 72) = 0u;
        *(_OWORD *)(a2 + 88) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(_OWORD *)(a2 + 8) = 0u;
        *(_OWORD *)(a2 + 24) = 0u;
        *(_DWORD *)(a2 + 104) = 1;
      }
      unsigned int v7 = (unsigned char *)(a2 + 8);
      uint64_t result = sub_215A8B4F0((uint64_t)a1, &v7);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_215A8B110(unsigned char *a1, unsigned char **a2)
{
  if ((a1[12] & 2) != 0)
  {
    memset(__p, 0, sizeof(__p));
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, __p);
    operator new();
  }
  LOBYTE(__p[0]) = 0;
  uint64_t result = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a1 + 80))(a1, __p);
  **a2 = __p[0];
  return result;
}

void sub_215A8B23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    sub_215E15464((uint64_t)&a17, v18);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_215A8B2B4(uint64_t a1, void *a2)
{
  uint64_t v3 = *a2;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 128))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 36);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v3 + 40);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128);

  return v4(a1, v3 + 44);
}

uint64_t sub_215A8B4F0(uint64_t a1, void *a2)
{
  uint64_t v3 = *a2;
  (*(void (**)(uint64_t, void))(*(void *)a1 + 136))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 56);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 136))(a1, v3 + 80);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 136);

  return v4(a1, v3 + 88);
}

void sub_215A8B72C()
{
}

void sub_215A8B91C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215A8B950(uint64_t a1, uint64_t a2)
{
  v33[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v28);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v28);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v28);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v22);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v22);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v22);
  }
  v19[0] = v28;
  v19[1] = &v29;
  _OWORD v19[2] = &v30;
  v19[3] = &v31;
  v19[4] = &v32;
  uint64_t v20 = v33;
  v17[0] = v22;
  v17[1] = &v23;
  v17[2] = &v24;
  v17[3] = &v25;
  v17[4] = &v26;
  uint64_t v18 = &v27;
  if (!sub_215AF0A90((uint64_t)&v21, v19, v17)) {
    goto LABEL_34;
  }
  if (!*((unsigned char *)v20 + 24) || !*((unsigned char *)v18 + 24))
  {
    if ((*((unsigned char *)v20 + 24) != 0) == (*((unsigned char *)v18 + 24) != 0)) {
      goto LABEL_22;
    }
LABEL_34:
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  unsigned int v8 = (unsigned __int8 *)*v20;
  int v9 = (unsigned __int8 *)v20[1];
  unsigned int v10 = (unsigned __int8 *)*v18;
  if (&v9[-*v20] != (unsigned __int8 *)(v18[1] - *v18)) {
    goto LABEL_34;
  }
  if (v8 != v9)
  {
    while (sub_215AEF77C(v8, v10))
    {
      v8 += 96;
      v10 += 96;
      if (v8 == v9) {
        goto LABEL_22;
      }
    }
    goto LABEL_34;
  }
LABEL_22:
  if (*(unsigned __int8 *)(a1 + 200) != *(unsigned __int8 *)(a2 + 200)) {
    goto LABEL_34;
  }
  uint64_t v11 = (*(unsigned char *)(a1 + 256) != 0) == (*(unsigned char *)(a2 + 256) != 0);
  if (*(unsigned char *)(a1 + 256) && *(unsigned char *)(a2 + 256))
  {
    uint64_t v12 = *(unsigned int *)(a1 + 248);
    int v13 = *(_DWORD *)(a2 + 248);
    BOOL v14 = v13 == -1;
    BOOL v15 = v13 != -1 && v13 == v12;
    if (v12 == -1) {
      uint64_t v11 = v14;
    }
    else {
      uint64_t v11 = v15;
    }
    if (v12 != -1 && v15)
    {
      v19[0] = v17;
      uint64_t v11 = ((uint64_t (*)(void *, uint64_t, uint64_t))off_26C674DA0[v12])(v19, a1 + 208, a2 + 208);
    }
  }
LABEL_35:
  sub_2157C6F18((uint64_t)v22);
  sub_2157C6F18((uint64_t)v28);
  return v11;
}

void sub_215A8BBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A8BBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

BOOL sub_215A8BBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 != *(void *)a3) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a3 + 16);
  if (*(unsigned char *)(a2 + 16)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if ((*(unsigned char *)(a2 + 16) != 0) == (v3 != 0)) {
      goto LABEL_10;
    }
    return 0;
  }
  if (*(void *)(a2 + 8) != *(void *)(a3 + 8)) {
    return 0;
  }
LABEL_10:
  BOOL result = (*(unsigned char *)(a2 + 32) != 0) == (*(unsigned char *)(a3 + 32) != 0);
  if (*(unsigned char *)(a2 + 32))
  {
    if (*(unsigned char *)(a3 + 32)) {
      return *(void *)(a2 + 24) == *(void *)(a3 + 24);
    }
  }
  return result;
}

BOOL sub_215A8BC78(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*a2 != *a3 || *((void *)a2 + 1) != *((void *)a3 + 1)) {
    return 0;
  }
  if (a2[24]) {
    BOOL v3 = a3[24] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return (a2[24] != 0) == (a3[24] != 0);
  }
  else {
    return *((void *)a2 + 2) == *((void *)a3 + 2);
  }
}

void sub_215A8BCE4(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  BOOL v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A8BF20((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A8CC34(&v11, (uint64_t)v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A8D540((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A8E254(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      unsigned int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A8E8A0(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_215A8EE50((int *)&v11, a1, (long long *)(a2 + 200));
      }
    }
  }
}

void sub_215A8BF20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        LODWORD(v11) = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    LODWORD(v11) = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  LODWORD(v11) = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A8C234(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(void *)(a1 + 72) = "sync_type";
    uint64_t v6 = a1 + 72;
    int v8 = (unsigned char *)(a1 + 88);
    int v7 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 80) = 9;
    int v9 = (void *)(a1 + 80);
    if (!v7) {
      *int v8 = 1;
    }
    unsigned int v10 = *a2;
    goto LABEL_14;
  }
  int v9 = (void *)(a1 + 80);
  uint64_t v6 = a1 + 72;
  int v8 = (unsigned char *)(a1 + 88);
  unsigned int v10 = *a2;
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v11 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11
    || (**(_DWORD **)v6 == *(_DWORD *)"version"
      ? (BOOL v12 = *(_DWORD *)(*(void *)v6 + 3) == *(_DWORD *)"sion")
      : (BOOL v12 = 0),
        !v12))
  {
LABEL_14:
    LOBYTE(v23) = 6;
    unint64_t v24 = v10;
    int v13 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v14 = *v13;
    *int v13 = 6;
    LOBYTE(v23) = v14;
    BOOL v15 = (void **)*((void *)v13 + 1);
    *((void *)v13 + 1) = v24;
    unint64_t v24 = (unint64_t)v15;
    sub_215CEB204((void ***)&v24, v14);
  }
  if (a3 < 2) {
    return;
  }
  int v16 = *a2;
  if (!*a2) {
    return;
  }
  if (v16 != 2)
  {
    if (v16 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sync type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (!*((_DWORD *)a2 + 12))
    {
      uint64_t v17 = (uint64_t)(a2 + 8);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        int v18 = *v8;
        *(void *)uint64_t v6 = "value";
        void *v9 = 5;
        if (!v18) {
          *int v8 = 1;
        }
      }
      sub_215DEC088(a1);
      uint64_t v23 = "version";
      unint64_t v24 = 7;
      int v25 = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        int v19 = *v8;
        *(void *)uint64_t v6 = "version";
        void *v9 = 7;
        if (!v19) {
          *int v8 = 1;
        }
      }
      sub_215DEE064(a1, &v25);
      sub_215A8C4FC(a1, v17);
      uint64_t v20 = *(void *)(a1 + 56);
      *(void *)(a1 + 40) = *(void *)(v20 - 8);
      *(void *)(a1 + 56) = v20 - 8;
      if (*(unsigned char *)(a1 + 88)) {
        *int v8 = 0;
      }
      return;
    }
LABEL_34:
    sub_215742D4C();
  }
  if (*((_DWORD *)a2 + 12) != 1) {
    goto LABEL_34;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v21 = *v8;
    *(void *)uint64_t v6 = "value";
    void *v9 = 5;
    if (!v21) {
      *int v8 = 1;
    }
  }
  sub_215A8C870((uint64_t)&v23, a1, a2 + 8);
}

void sub_215A8C4D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A8C4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A8C4FC(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(void *)(a1 + 72) = "sync_command_id";
    uint64_t v5 = a1 + 72;
    int v7 = (unsigned char *)(a1 + 88);
    int v6 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 80) = 15;
    int v8 = (void *)(a1 + 80);
    if (!v6) {
      *int v7 = 1;
    }
    goto LABEL_13;
  }
  int v8 = (void *)(a1 + 80);
  uint64_t v5 = a1 + 72;
  int v7 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v9 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (BOOL v10 = *(_DWORD *)(*(void *)v5 + 3) == *(_DWORD *)"sion")
      : (BOOL v10 = 0),
        !v10))
  {
LABEL_13:
    uint64_t v27 = *(void ***)a2;
    BOOL v11 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v12 = *v11;
    *BOOL v11 = 6;
    int v13 = (void **)*((void *)v11 + 1);
    *((void *)v11 + 1) = v27;
    uint64_t v27 = v13;
    sub_215CEB204(&v27, v12);
    int v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(void *)uint64_t v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(unsigned char *)(a2 + 16)) {
      goto LABEL_17;
    }
LABEL_25:
    char v26 = 0;
    uint64_t v27 = 0;
    int v16 = (unsigned __int8 *)sub_215DEBCD0(a1);
    goto LABEL_26;
  }
  *int v7 = 1;
  if (!*(unsigned char *)(a2 + 16)) {
    goto LABEL_25;
  }
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (BOOL v15 = *(_DWORD *)(*(void *)v5 + 3) == *(_DWORD *)"sion")
      : (BOOL v15 = 0),
        !v15))
  {
    char v26 = 6;
    uint64_t v27 = *(void ***)(a2 + 8);
    int v16 = (unsigned __int8 *)sub_215DEBCD0(a1);
LABEL_26:
    int v17 = *v16;
    *int v16 = v26;
    int v18 = (void **)*((void *)v16 + 1);
    *((void *)v16 + 1) = v27;
    uint64_t v27 = v18;
    sub_215CEB204(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(void *)uint64_t v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(unsigned char *)(a2 + 32)) {
      goto LABEL_30;
    }
LABEL_38:
    uint64_t v27 = 0;
    unint64_t v24 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v22 = *v24;
    unsigned __int8 *v24 = 0;
    int v25 = (void **)*((void *)v24 + 1);
    *((void *)v24 + 1) = v27;
    uint64_t v27 = v25;
    goto LABEL_39;
  }
  *int v7 = 1;
  if (!*(unsigned char *)(a2 + 32)) {
    goto LABEL_38;
  }
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (BOOL v20 = *(_DWORD *)(*(void *)v5 + 3) == *(_DWORD *)"sion")
      : (BOOL v20 = 0),
        !v20))
  {
    uint64_t v27 = *(void ***)(a2 + 24);
    int v21 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v22 = *v21;
    unsigned __int8 *v21 = 6;
    uint64_t v23 = (void **)*((void *)v21 + 1);
    *((void *)v21 + 1) = v27;
    uint64_t v27 = v23;
LABEL_39:
    sub_215CEB204(&v27, v22);
  }
}

void sub_215A8C7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8C810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8C828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8C840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8C858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8C870(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  sub_215DEC088(a2);
  unint64_t v31 = 7;
  int v32 = 1;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEE064(a2, &v32);
    int v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u) {
      goto LABEL_4;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEE064(a2, &v32);
    int v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
    {
LABEL_4:
      *(void *)(a2 + 72) = "status";
      int v7 = (const char **)(a2 + 72);
      BOOL v9 = (unsigned char *)(a2 + 88);
      int v8 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 80) = 6;
      BOOL v10 = (void *)(a2 + 80);
      if (!v8) {
        unsigned char *v9 = 1;
      }
      goto LABEL_13;
    }
  }
  BOOL v10 = (void *)(a2 + 80);
  int v7 = (const char **)(a2 + 72);
  BOOL v9 = (unsigned char *)(a2 + 88);
  if (!*(unsigned char *)(a2 + 88)
    || *(void *)(a2 + 80) != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (BOOL v11 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (BOOL v11 = 0), !v11))
  {
LABEL_13:
    unint64_t v31 = *a3;
    int v12 = (unsigned __int8 *)sub_215DEBCD0(a2);
    int v13 = *v12;
    *int v12 = 6;
    int v14 = (void **)*((void *)v12 + 1);
    *((void *)v12 + 1) = v31;
    unint64_t v31 = (unint64_t)v14;
    sub_215CEB204((void ***)&v31, v13);
    int v6 = *(unsigned __int8 **)(a2 + 40);
  }
  int v15 = *v9;
  if (*v6 > 1u)
  {
    if (!*v9 || *v10 != 7)
    {
LABEL_25:
      unint64_t v31 = *((void *)a3 + 1);
      BOOL v20 = (unsigned __int8 *)sub_215DEBCD0(a2);
      int v21 = *v20;
      *BOOL v20 = 6;
      int v22 = (void **)*((void *)v20 + 1);
      *((void *)v20 + 1) = v31;
      unint64_t v31 = (unint64_t)v22;
      sub_215CEB204((void ***)&v31, v21);
      int v6 = *(unsigned __int8 **)(a2 + 40);
      goto LABEL_26;
    }
    int v16 = *v7;
  }
  else
  {
    *int v7 = "sync_id";
    *BOOL v10 = 7;
    if (!v15) {
      unsigned char *v9 = 1;
    }
    int v16 = "sync_id";
  }
  int v17 = *(_DWORD *)v16;
  int v18 = *(_DWORD *)(v16 + 3);
  if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion") {
    goto LABEL_25;
  }
LABEL_26:
  if (*v6 > 1u || (v23 = *v9, *int v7 = "acknowledge_until", *v10 = 17, v23))
  {
    if (a3[24]) {
      goto LABEL_29;
    }
LABEL_37:
    unint64_t v31 = 0;
    long long v28 = (unsigned __int8 *)sub_215DEBCD0(a2);
    int v26 = *v28;
    unsigned __int8 *v28 = 0;
    uint64_t v29 = (void **)*((void *)v28 + 1);
    *((void *)v28 + 1) = v31;
    unint64_t v31 = (unint64_t)v29;
    goto LABEL_38;
  }
  unsigned char *v9 = 1;
  if (!a3[24]) {
    goto LABEL_37;
  }
LABEL_29:
  if (!*v9
    || *v10 != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (BOOL v24 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (BOOL v24 = 0), !v24))
  {
    unint64_t v31 = *((void *)a3 + 2);
    int v25 = (unsigned __int8 *)sub_215DEBCD0(a2);
    int v26 = *v25;
    *int v25 = 6;
    uint64_t v27 = (void **)*((void *)v25 + 1);
    *((void *)v25 + 1) = v31;
    unint64_t v31 = (unint64_t)v27;
LABEL_38:
    sub_215CEB204((void ***)&v31, v26);
  }
  uint64_t v30 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v30 - 8);
  *(void *)(a2 + 56) = v30 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    unsigned char *v9 = 0;
  }
}

void sub_215A8CBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A8CBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A8CC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A8CC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A8CC34(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v7 + 40))
    {
      *(void *)&v22[0] = v7 + 16;
      sub_215E05FEC((uint64_t **)v22, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)v22, v7 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC838(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
      *(void *)&v22[0] = v8 + 16;
      sub_215E05FEC((uint64_t **)v22, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)v22, v8 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC718(a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40))
    {
      *(void *)&v22[0] = v6 + 16;
      sub_215E05FEC((uint64_t **)v22, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)v22, v6 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159A6DFC(a2, v4, 6u);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    *(void *)&v22[0] = v14 + 16;
    sub_215E05FEC((uint64_t **)v22, 2u);
  }
  else
  {
    sub_215E0626C((uint64_t)v22, v14 + 8);
  }
  sub_215E0076C(*(void *)(a2 + 24));
  long long v15 = *(_OWORD *)(v3 + 216);
  v22[0] = *(_OWORD *)(v3 + 200);
  v22[1] = v15;
  long long v16 = *(_OWORD *)(v3 + 248);
  double v22[2] = *(_OWORD *)(v3 + 232);
  v22[3] = v16;
  sub_215A8CEC8(a2, (char *)v22, 2u);
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v18 = *(void *)(*(void *)(v17 + 88) - 8);
  sub_215E001AC((uint64_t *)(v17 + 48), *(void *)(v17 + 16) - v18 - 9);
  size_t v19 = *(void *)(v17 + 48);
  if (v19) {
    memmove((void *)(*(void *)(v17 + 24) + v18), *(const void **)(v17 + 56), v19);
  }
  *(void *)(v17 + 48) = 0;
  uint64_t v20 = *(void *)(v17 + 80);
  uint64_t v21 = *(void *)(v17 + 88) - 8;
  *(void *)(v17 + 88) = v21;
  if (v20 == v21)
  {
    std::ostream::write();
    if (*(unsigned char *)(v17 + 40))
    {
      free(*(void **)(v17 + 24));
      *(unsigned char *)(v17 + 40) = 0;
    }
  }
}

void sub_215A8CEC8(uint64_t a1, char *a2, unsigned int a3)
{
  int v6 = *a2;
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v7 + 40))
  {
    size_t v19 = (uint64_t *)(v7 + 16);
    sub_215E053CC(&v19, v6);
    if (a3 < 2) {
      return;
    }
  }
  else if (v6 < 0)
  {
    LOBYTE(v19) = -52;
    BYTE1(v19) = v6;
    std::ostream::write();
    if (a3 < 2) {
      return;
    }
  }
  else
  {
    LOBYTE(v19) = *a2;
    std::ostream::write();
    if (a3 < 2) {
      return;
    }
  }
  int v8 = *a2;
  if (*a2)
  {
    if (v8 == 2)
    {
      if (*((_DWORD *)a2 + 12) == 1)
      {
        size_t v11 = a2 + 8;
        uint64_t v12 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v12 + 40))
        {
          size_t v19 = (uint64_t *)(v12 + 16);
          sub_215E05FEC(&v19, 1u);
        }
        else
        {
          sub_215E0626C((uint64_t)&v19, v12 + 8);
        }
        sub_215A8D32C((uint64_t)&v19, a1, v11);
        return;
      }
    }
    else
    {
      if (v8 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if (!*((_DWORD *)a2 + 12))
      {
        uint64_t v9 = (uint64_t)(a2 + 8);
        uint64_t v10 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v10 + 40))
        {
          size_t v19 = (uint64_t *)(v10 + 16);
          sub_215E05FEC(&v19, 1u);
        }
        else
        {
          sub_215E0626C((uint64_t)&v19, v10 + 8);
        }
        sub_215E0076C(*(void *)(a1 + 24));
        sub_215A8D124(a1, v9);
        uint64_t v13 = *(void *)(a1 + 24);
        uint64_t v14 = *(void *)(*(void *)(v13 + 88) - 8);
        sub_215E001AC((uint64_t *)(v13 + 48), *(void *)(v13 + 16) - v14 - 9);
        size_t v15 = *(void *)(v13 + 48);
        if (v15) {
          memmove((void *)(*(void *)(v13 + 24) + v14), *(const void **)(v13 + 56), v15);
        }
        *(void *)(v13 + 48) = 0;
        uint64_t v16 = *(void *)(v13 + 80);
        uint64_t v17 = *(void *)(v13 + 88) - 8;
        *(void *)(v13 + 88) = v17;
        if (v16 == v17)
        {
          std::ostream::write();
          if (*(unsigned char *)(v13 + 40))
          {
            free(*(void **)(v13 + 24));
            *(unsigned char *)(v13 + 40) = 0;
          }
        }
        return;
      }
    }
    sub_215742D4C();
  }
}

void sub_215A8D110(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_215A8D124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v4 + 40))
  {
    uint64_t v12 = (uint64_t *)(v4 + 16);
    sub_215E069EC(&v12, *(void *)a2);
    if (*(unsigned char *)(a2 + 16)) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_215E06D00();
    if (*(unsigned char *)(a2 + 16))
    {
LABEL_3:
      uint64_t v5 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v5 + 40))
      {
        uint64_t v12 = (uint64_t *)(v5 + 16);
        sub_215E053CC(&v12, 1);
        uint64_t v6 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v6 + 40)) {
          goto LABEL_5;
        }
      }
      else
      {
        LOBYTE(v12) = 1;
        std::ostream::write();
        uint64_t v6 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v6 + 40))
        {
LABEL_5:
          uint64_t v12 = (uint64_t *)(v6 + 16);
          sub_215E069EC(&v12, *(void *)(a2 + 8));
          if (!*(unsigned char *)(a2 + 32)) {
            goto LABEL_19;
          }
LABEL_13:
          uint64_t v8 = *(void *)(a1 + 24);
          if (*(unsigned char *)(v8 + 40))
          {
            uint64_t v12 = (uint64_t *)(v8 + 16);
            sub_215E053CC(&v12, 1);
            uint64_t v9 = *(void *)(a1 + 24);
            if (*(unsigned char *)(v9 + 40))
            {
LABEL_15:
              uint64_t v12 = (uint64_t *)(v9 + 16);
              return sub_215E069EC(&v12, *(void *)(a2 + 24));
            }
          }
          else
          {
            LOBYTE(v12) = 1;
            std::ostream::write();
            uint64_t v9 = *(void *)(a1 + 24);
            if (*(unsigned char *)(v9 + 40)) {
              goto LABEL_15;
            }
          }
          return (char *)sub_215E06D00();
        }
      }
      sub_215E06D00();
      if (!*(unsigned char *)(a2 + 32)) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v7 + 40))
  {
    LOBYTE(v12) = 0;
    std::ostream::write();
    if (!*(unsigned char *)(a2 + 32)) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  uint64_t v12 = (uint64_t *)(v7 + 16);
  sub_215E053CC(&v12, 0);
  if (*(unsigned char *)(a2 + 32)) {
    goto LABEL_13;
  }
LABEL_19:
  uint64_t v11 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v11 + 40))
  {
    uint64_t v12 = (uint64_t *)(v11 + 16);
    return sub_215E053CC(&v12, 0);
  }
  else
  {
    LOBYTE(v12) = 0;
    return (char *)std::ostream::write();
  }
}

void sub_215A8D32C(uint64_t a1, uint64_t a2, char *a3)
{
  sub_215E0076C(*(void *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v5 + 40))
  {
    uint64_t v16 = (uint64_t *)(v5 + 16);
    sub_215E053CC(&v16, *a3);
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40)) {
      goto LABEL_3;
    }
LABEL_13:
    sub_215E06D00();
    if (a3[24]) {
      goto LABEL_4;
    }
LABEL_14:
    uint64_t v10 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v10 + 40))
    {
      uint64_t v16 = (uint64_t *)(v10 + 16);
      sub_215E053CC(&v16, 0);
    }
    else
    {
      LOBYTE(v16) = 0;
      std::ostream::write();
    }
    goto LABEL_17;
  }
  int v9 = *a3;
  if (v9 < 0)
  {
    LOBYTE(v16) = -52;
    BYTE1(v16) = v9;
    std::ostream::write();
    uint64_t v6 = *(void *)(a2 + 24);
    if (!*(unsigned char *)(v6 + 40)) {
      goto LABEL_13;
    }
  }
  else
  {
    LOBYTE(v16) = *a3;
    std::ostream::write();
    uint64_t v6 = *(void *)(a2 + 24);
    if (!*(unsigned char *)(v6 + 40)) {
      goto LABEL_13;
    }
  }
LABEL_3:
  uint64_t v16 = (uint64_t *)(v6 + 16);
  sub_215E069EC(&v16, *((void *)a3 + 1));
  if (!a3[24]) {
    goto LABEL_14;
  }
LABEL_4:
  uint64_t v7 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v7 + 40))
  {
    uint64_t v16 = (uint64_t *)(v7 + 16);
    sub_215E053CC(&v16, 1);
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
LABEL_6:
      uint64_t v16 = (uint64_t *)(v8 + 16);
      sub_215E069EC(&v16, *((void *)a3 + 2));
      goto LABEL_17;
    }
  }
  else
  {
    LOBYTE(v16) = 1;
    std::ostream::write();
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40)) {
      goto LABEL_6;
    }
  }
  sub_215E06D00();
LABEL_17:
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(*(void *)(v11 + 88) - 8);
  sub_215E001AC((uint64_t *)(v11 + 48), *(void *)(v11 + 16) - v12 - 9);
  size_t v13 = *(void *)(v11 + 48);
  if (v13) {
    memmove((void *)(*(void *)(v11 + 24) + v12), *(const void **)(v11 + 56), v13);
  }
  *(void *)(v11 + 48) = 0;
  uint64_t v14 = *(void *)(v11 + 80);
  uint64_t v15 = *(void *)(v11 + 88) - 8;
  *(void *)(v11 + 88) = v15;
  if (v14 == v15)
  {
    std::ostream::write();
    if (*(unsigned char *)(v11 + 40))
    {
      free(*(void **)(v11 + 24));
      *(unsigned char *)(v11 + 40) = 0;
    }
  }
}

void sub_215A8D540(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        LODWORD(v11) = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    LODWORD(v11) = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  LODWORD(v11) = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void sub_215A8D854(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    *(void *)(a1 + 72) = "sync_type";
    uint64_t v6 = a1 + 72;
    int v8 = (unsigned char *)(a1 + 88);
    int v7 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 80) = 9;
    int v9 = (void *)(a1 + 80);
    if (!v7) {
      *int v8 = 1;
    }
    unsigned int v10 = *a2;
    goto LABEL_14;
  }
  int v9 = (void *)(a1 + 80);
  uint64_t v6 = a1 + 72;
  int v8 = (unsigned char *)(a1 + 88);
  unsigned int v10 = *a2;
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v11 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v11 = 0;
  }
  if (!v11
    || (**(_DWORD **)v6 == *(_DWORD *)"version"
      ? (BOOL v12 = *(_DWORD *)(*(void *)v6 + 3) == *(_DWORD *)"sion")
      : (BOOL v12 = 0),
        !v12))
  {
LABEL_14:
    LOBYTE(v23) = 6;
    uint64_t v24 = v10;
    size_t v13 = (unsigned __int8 *)sub_215DEB350(a1);
    int v14 = *v13;
    *size_t v13 = 6;
    LOBYTE(v23) = v14;
    uint64_t v15 = *((void *)v13 + 1);
    *((void *)v13 + 1) = v24;
    uint64_t v24 = v15;
    sub_215CE9D14(&v24, v14);
  }
  if (a3 < 2) {
    return;
  }
  int v16 = *a2;
  if (!*a2) {
    return;
  }
  if (v16 != 2)
  {
    if (v16 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sync type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (!*((_DWORD *)a2 + 12))
    {
      uint64_t v17 = (uint64_t)(a2 + 8);
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        int v18 = *v8;
        *(void *)uint64_t v6 = "value";
        void *v9 = 5;
        if (!v18) {
          *int v8 = 1;
        }
      }
      sub_215DEB804(a1);
      int v23 = "version";
      uint64_t v24 = 7;
      int v25 = 1;
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        int v19 = *v8;
        *(void *)uint64_t v6 = "version";
        void *v9 = 7;
        if (!v19) {
          *int v8 = 1;
        }
      }
      sub_215DEC344(a1, &v25);
      sub_215A8DB1C(a1, v17);
      uint64_t v20 = *(void *)(a1 + 56);
      *(void *)(a1 + 40) = *(void *)(v20 - 8);
      *(void *)(a1 + 56) = v20 - 8;
      if (*(unsigned char *)(a1 + 88)) {
        *int v8 = 0;
      }
      return;
    }
LABEL_34:
    sub_215742D4C();
  }
  if (*((_DWORD *)a2 + 12) != 1) {
    goto LABEL_34;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v21 = *v8;
    *(void *)uint64_t v6 = "value";
    void *v9 = 5;
    if (!v21) {
      *int v8 = 1;
    }
  }
  sub_215A8DE90((uint64_t)&v23, a1, a2 + 8);
}

void sub_215A8DAF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A8DB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A8DB1C(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 **)(a1 + 40);
  if (*v4 <= 1u)
  {
    *(void *)(a1 + 72) = "sync_command_id";
    uint64_t v5 = a1 + 72;
    int v7 = (unsigned char *)(a1 + 88);
    int v6 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 80) = 15;
    int v8 = (void *)(a1 + 80);
    if (!v6) {
      *int v7 = 1;
    }
    goto LABEL_13;
  }
  int v8 = (void *)(a1 + 80);
  uint64_t v5 = a1 + 72;
  int v7 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v9 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (BOOL v10 = *(_DWORD *)(*(void *)v5 + 3) == *(_DWORD *)"sion")
      : (BOOL v10 = 0),
        !v10))
  {
LABEL_13:
    uint64_t v27 = *(void *)a2;
    BOOL v11 = (unsigned __int8 *)sub_215DEB350(a1);
    int v12 = *v11;
    *BOOL v11 = 6;
    uint64_t v13 = *((void *)v11 + 1);
    *((void *)v11 + 1) = v27;
    uint64_t v27 = v13;
    sub_215CE9D14(&v27, v12);
    int v4 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v4 > 1u || (v14 = *v7, *(void *)uint64_t v5 = "proceed_n", *v8 = 9, v14))
  {
    if (*(unsigned char *)(a2 + 16)) {
      goto LABEL_17;
    }
LABEL_25:
    char v26 = 0;
    uint64_t v27 = 0;
    int v16 = (unsigned __int8 *)sub_215DEB350(a1);
    goto LABEL_26;
  }
  *int v7 = 1;
  if (!*(unsigned char *)(a2 + 16)) {
    goto LABEL_25;
  }
LABEL_17:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (BOOL v15 = *(_DWORD *)(*(void *)v5 + 3) == *(_DWORD *)"sion")
      : (BOOL v15 = 0),
        !v15))
  {
    char v26 = 6;
    uint64_t v27 = *(void *)(a2 + 8);
    int v16 = (unsigned __int8 *)sub_215DEB350(a1);
LABEL_26:
    int v17 = *v16;
    *int v16 = v26;
    uint64_t v18 = *((void *)v16 + 1);
    *((void *)v16 + 1) = v27;
    uint64_t v27 = v18;
    sub_215CE9D14(&v27, v17);
  }
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v19 = *v7, *(void *)uint64_t v5 = "proceed_until", *v8 = 13, v19))
  {
    if (*(unsigned char *)(a2 + 32)) {
      goto LABEL_30;
    }
LABEL_38:
    uint64_t v27 = 0;
    uint64_t v24 = (unsigned __int8 *)sub_215DEB350(a1);
    int v22 = *v24;
    unsigned __int8 *v24 = 0;
    uint64_t v25 = *((void *)v24 + 1);
    *((void *)v24 + 1) = v27;
    uint64_t v27 = v25;
    goto LABEL_39;
  }
  *int v7 = 1;
  if (!*(unsigned char *)(a2 + 32)) {
    goto LABEL_38;
  }
LABEL_30:
  if (!*v7
    || *v8 != 7
    || (**(_DWORD **)v5 == *(_DWORD *)"version"
      ? (BOOL v20 = *(_DWORD *)(*(void *)v5 + 3) == *(_DWORD *)"sion")
      : (BOOL v20 = 0),
        !v20))
  {
    uint64_t v27 = *(void *)(a2 + 24);
    int v21 = (unsigned __int8 *)sub_215DEB350(a1);
    int v22 = *v21;
    unsigned __int8 *v21 = 6;
    uint64_t v23 = *((void *)v21 + 1);
    *((void *)v21 + 1) = v27;
    uint64_t v27 = v23;
LABEL_39:
    sub_215CE9D14(&v27, v22);
  }
}

void sub_215A8DE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8DE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8DE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8DE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8DE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_215A8DE90(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  sub_215DEB804(a2);
  uint64_t v31 = 7;
  int v32 = 1;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEC344(a2, &v32);
    int v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u) {
      goto LABEL_4;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEC344(a2, &v32);
    int v6 = *(unsigned __int8 **)(a2 + 40);
    if (*v6 <= 1u)
    {
LABEL_4:
      *(void *)(a2 + 72) = "status";
      int v7 = (const char **)(a2 + 72);
      BOOL v9 = (unsigned char *)(a2 + 88);
      int v8 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 80) = 6;
      BOOL v10 = (void *)(a2 + 80);
      if (!v8) {
        unsigned char *v9 = 1;
      }
      goto LABEL_13;
    }
  }
  BOOL v10 = (void *)(a2 + 80);
  int v7 = (const char **)(a2 + 72);
  BOOL v9 = (unsigned char *)(a2 + 88);
  if (!*(unsigned char *)(a2 + 88)
    || *(void *)(a2 + 80) != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (BOOL v11 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (BOOL v11 = 0), !v11))
  {
LABEL_13:
    uint64_t v31 = *a3;
    int v12 = (unsigned __int8 *)sub_215DEB350(a2);
    int v13 = *v12;
    *int v12 = 6;
    uint64_t v14 = *((void *)v12 + 1);
    *((void *)v12 + 1) = v31;
    uint64_t v31 = v14;
    sub_215CE9D14(&v31, v13);
    int v6 = *(unsigned __int8 **)(a2 + 40);
  }
  int v15 = *v9;
  if (*v6 > 1u)
  {
    if (!*v9 || *v10 != 7)
    {
LABEL_25:
      uint64_t v31 = *((void *)a3 + 1);
      BOOL v20 = (unsigned __int8 *)sub_215DEB350(a2);
      int v21 = *v20;
      *BOOL v20 = 6;
      uint64_t v22 = *((void *)v20 + 1);
      *((void *)v20 + 1) = v31;
      uint64_t v31 = v22;
      sub_215CE9D14(&v31, v21);
      int v6 = *(unsigned __int8 **)(a2 + 40);
      goto LABEL_26;
    }
    int v16 = *v7;
  }
  else
  {
    *int v7 = "sync_id";
    *BOOL v10 = 7;
    if (!v15) {
      unsigned char *v9 = 1;
    }
    int v16 = "sync_id";
  }
  int v17 = *(_DWORD *)v16;
  int v18 = *(_DWORD *)(v16 + 3);
  if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion") {
    goto LABEL_25;
  }
LABEL_26:
  if (*v6 > 1u || (v23 = *v9, *int v7 = "acknowledge_until", *v10 = 17, v23))
  {
    if (a3[24]) {
      goto LABEL_29;
    }
LABEL_37:
    uint64_t v31 = 0;
    long long v28 = (unsigned __int8 *)sub_215DEB350(a2);
    int v26 = *v28;
    unsigned __int8 *v28 = 0;
    uint64_t v29 = *((void *)v28 + 1);
    *((void *)v28 + 1) = v31;
    uint64_t v31 = v29;
    goto LABEL_38;
  }
  unsigned char *v9 = 1;
  if (!a3[24]) {
    goto LABEL_37;
  }
LABEL_29:
  if (!*v9
    || *v10 != 7
    || (*(_DWORD *)*v7 == *(_DWORD *)"version" ? (BOOL v24 = *(_DWORD *)(*v7 + 3) == *(_DWORD *)"sion") : (BOOL v24 = 0), !v24))
  {
    uint64_t v31 = *((void *)a3 + 2);
    uint64_t v25 = (unsigned __int8 *)sub_215DEB350(a2);
    int v26 = *v25;
    *uint64_t v25 = 6;
    uint64_t v27 = *((void *)v25 + 1);
    *((void *)v25 + 1) = v31;
    uint64_t v31 = v27;
LABEL_38:
    sub_215CE9D14(&v31, v26);
  }
  uint64_t v30 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v30 - 8);
  *(void *)(a2 + 56) = v30 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    unsigned char *v9 = 0;
  }
}

void sub_215A8E1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A8E20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A8E224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A8E23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void *sub_215A8E254(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      LOBYTE(v20[0]) = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        LOBYTE(v20[0]) = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)v20, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      BOOL v10 = *(void **)(a2 + 24);
      LOBYTE(v20[0]) = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)v20, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      BOOL v9 = *(void **)(a2 + 24);
      LOBYTE(v20[0]) = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  BOOL v11 = *(void **)(a2 + 24);
  LOBYTE(v20[0]) = v7;
  sub_215731D94(v11, (uint64_t)v20, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    int v13 = *(void **)(a2 + 24);
    LOBYTE(v20[0]) = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)v20, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  long long v14 = *(_OWORD *)(v3 + 216);
  v20[0] = *(_OWORD *)(v3 + 200);
  v20[1] = v14;
  long long v15 = *(_OWORD *)(v3 + 248);
  _OWORD v20[2] = *(_OWORD *)(v3 + 232);
  v20[3] = v15;
  sub_215A8E480(a2, (unsigned __int8 *)v20, 2u);
  char v16 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    int v17 = *(void **)(a2 + 24);
    LOBYTE(v20[0]) = *(unsigned char *)(a2 + 32);
    sub_215731D94(v17, (uint64_t)v20, 1);
  }
  int v18 = *(void **)(a2 + 24);
  LOBYTE(v20[0]) = v16;
  BOOL result = sub_215731D94(v18, (uint64_t)v20, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A8E480(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned __int8 v13 = *a2;
  sub_215DF927C(a1, &v13);
  if (a3 < 2) {
    return;
  }
  int v6 = *a2;
  if (!*a2) {
    return;
  }
  if (v6 == 2)
  {
    if (*((_DWORD *)a2 + 12) == 1)
    {
      sub_215A8E744((uint64_t)&v14, a1, a2 + 8);
      return;
    }
LABEL_14:
    sub_215742D4C();
  }
  if (v6 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid sync type");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*((_DWORD *)a2 + 12)) {
    goto LABEL_14;
  }
  uint64_t v7 = (uint64_t)(a2 + 8);
  if (*(void *)(a1 + 40))
  {
    int v8 = *(void **)(a1 + 24);
    char v15 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v8, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  sub_215A8E600(a1, v7);
  char v9 = *(unsigned char *)(a1 + 34);
  if (*(void *)(a1 + 40))
  {
    BOOL v10 = *(void **)(a1 + 24);
    char v16 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v10, (uint64_t)&v16, 1);
  }
  BOOL v11 = *(void **)(a1 + 24);
  char v17 = v9;
  sub_215731D94(v11, (uint64_t)&v17, 1);
  ++*(void *)(a1 + 40);
}

void sub_215A8E5EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A8E600(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void **)(a1 + 24);
    char v11 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)&v11, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned __int8 v8 = 1;
    sub_215DF927C(a1, &v8);
    if (*(void *)(a1 + 40))
    {
      int v5 = *(void **)(a1 + 24);
      char v12 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v5, (uint64_t)&v12, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a1 + 40);
    if (*(unsigned char *)(a2 + 32)) {
      goto LABEL_7;
    }
LABEL_11:
    unsigned __int8 v9 = 0;
    sub_215DF927C(a1, &v9);
    return;
  }
  unsigned __int8 v7 = 0;
  sub_215DF927C(a1, &v7);
  if (!*(unsigned char *)(a2 + 32)) {
    goto LABEL_11;
  }
LABEL_7:
  unsigned __int8 v10 = 1;
  sub_215DF927C(a1, &v10);
  if (*(void *)(a1 + 40))
  {
    int v6 = *(void **)(a1 + 24);
    char v13 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v6, (uint64_t)&v13, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
}

void *sub_215A8E744(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (*(void *)(a2 + 40))
  {
    int v5 = *(void **)(a2 + 24);
    char v15 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v5, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_215DF927C(a2, a3);
  if (*(void *)(a2 + 40))
  {
    int v6 = *(void **)(a2 + 24);
    char v16 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v6, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  if (!a3[24])
  {
    unsigned __int8 v13 = 0;
    sub_215DF927C(a2, &v13);
    char v9 = *(unsigned char *)(a2 + 34);
    if (!*(void *)(a2 + 40)) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  unsigned __int8 v14 = 1;
  sub_215DF927C(a2, &v14);
  if (*(void *)(a2 + 40))
  {
    unsigned __int8 v7 = *(void **)(a2 + 24);
    char v17 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v7, (uint64_t)&v17, 1);
  }
  std::ostream::operator<<();
  uint64_t v8 = *(void *)(a2 + 40) + 1;
  *(void *)(a2 + 40) = v8;
  char v9 = *(unsigned char *)(a2 + 34);
  if (v8)
  {
LABEL_9:
    unsigned __int8 v10 = *(void **)(a2 + 24);
    char v18 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v10, (uint64_t)&v18, 1);
  }
LABEL_10:
  char v11 = *(void **)(a2 + 24);
  char v19 = v9;
  BOOL result = sub_215731D94(v11, (uint64_t)&v19, 1);
  ++*(void *)(a2 + 40);
  return result;
}

char *sub_215A8E8A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    LODWORD(v15[0]) = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
    unsigned int v7 = v15[0];
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    LODWORD(v15[0]) = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
    unsigned int v8 = v15[0];
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    LODWORD(v15[0]) = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
    unsigned int v6 = v15[0];
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  LODWORD(v15[0]) = 2;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)v15, (char *)v15 + 4, 4);
  unsigned int v10 = v15[0];
  sub_215D02034((void *)a2);
  long long v11 = *(_OWORD *)(v3 + 216);
  v15[0] = *(_OWORD *)(v3 + 200);
  v15[1] = v11;
  long long v12 = *(_OWORD *)(v3 + 248);
  _OWORD v15[2] = *(_OWORD *)(v3 + 232);
  v15[3] = v12;
  BOOL result = sub_215A8EA70(a2, (char *)v15, v10);
  uint64_t v14 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v14 + 10) = *(void *)(a2 + 32) - v14 - 18;
  *(void *)(a2 + 56) -= 8;
  return result;
}

char *sub_215A8EA70(uint64_t a1, char *a2, unsigned int a3)
{
  char __src = *a2;
  uint64_t v6 = a1 + 24;
  BOOL result = sub_215D04A50(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v12, 1);
  if (a3 >= 2)
  {
    int v8 = *a2;
    if (*a2)
    {
      if (v8 == 2)
      {
        if (*((_DWORD *)a2 + 12) == 1)
        {
          int v15 = 1;
          sub_215D04A50(v6, *(char **)(a1 + 32), (char *)&v15, (char *)&v16, 4);
          return sub_215A8ED48((uint64_t)&v14, a1, a2 + 8);
        }
      }
      else
      {
        if (v8 != 1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "invalid sync type");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        if (!*((_DWORD *)a2 + 12))
        {
          int v12 = 1;
          sub_215D04A50(v6, *(char **)(a1 + 32), (char *)&v12, v13, 4);
          sub_215D02034((void *)a1);
          BOOL result = sub_215A8EC0C(a1, a2 + 8);
          uint64_t v9 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
          *(void *)(v9 + 10) = *(void *)(a1 + 32) - v9 - 18;
          *(void *)(a1 + 56) -= 8;
          return result;
        }
      }
      sub_215742D4C();
    }
  }
  return result;
}

void sub_215A8EBF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_215A8EC0C(uint64_t a1, char *__src)
{
  uint64_t v4 = a1 + 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), __src, __src + 8, 8);
  if (!__src[16])
  {
    char v12 = 0;
    sub_215D04A50(v4, *(char **)(a1 + 32), &v12, &__srca, 1);
    int v5 = __src + 32;
    if (__src[32]) {
      goto LABEL_3;
    }
LABEL_5:
    char v14 = 0;
    uint64_t v6 = *(char **)(a1 + 32);
    uint64_t v9 = &v15;
    int v8 = &v14;
    uint64_t v7 = v4;
    int64_t v10 = 1;
    return sub_215D04A50(v7, v6, v8, v9, v10);
  }
  char __srca = 1;
  sub_215D04A50(v4, *(char **)(a1 + 32), &__srca, &v14, 1);
  sub_215D04A50(v4, *(char **)(a1 + 32), __src + 8, __src + 16, 8);
  int v5 = __src + 32;
  if (!__src[32]) {
    goto LABEL_5;
  }
LABEL_3:
  char v15 = 1;
  sub_215D04A50(v4, *(char **)(a1 + 32), &v15, (char *)&v16, 1);
  uint64_t v6 = *(char **)(a1 + 32);
  uint64_t v7 = v4;
  int v8 = __src + 24;
  uint64_t v9 = v5;
  int64_t v10 = 8;
  return sub_215D04A50(v7, v6, v8, v9, v10);
}

char *sub_215A8ED48(uint64_t a1, uint64_t a2, char *a3)
{
  sub_215D02034((void *)a2);
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), a3, a3 + 1, 1);
  int v5 = a3 + 16;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), a3 + 8, a3 + 16, 8);
  int v7 = a3[24];
  uint64_t v6 = a3 + 24;
  if (v7)
  {
    char __src = 1;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), &__src, (char *)&v17, 1);
    int v8 = *(char **)(a2 + 32);
    uint64_t v9 = a2 + 24;
    int64_t v10 = v5;
    p_src = v6;
    int64_t v12 = 8;
  }
  else
  {
    char v15 = 0;
    int v8 = *(char **)(a2 + 32);
    p_src = &__src;
    int64_t v10 = &v15;
    uint64_t v9 = a2 + 24;
    int64_t v12 = 1;
  }
  BOOL result = sub_215D04A50(v9, v8, v10, p_src, v12);
  uint64_t v14 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v14 + 10) = *(void *)(a2 + 32) - v14 - 18;
  *(void *)(a2 + 56) -= 8;
  return result;
}

uint64_t sub_215A8EE50(int *a1, void *a2, long long *a3)
{
  LODWORD(v12) = 2;
  (*(void (**)(void *, long long *))(*a2 + 104))(a2, &v12);
  unsigned int v6 = v12;
  if (*a1 < 1
    || *a1 == 2 && (LODWORD(v12) = 1, (*(void (**)(void *, long long *))(*a2 + 104))(a2, &v12), *a1 <= 0))
  {
    long long v10 = a3[1];
    long long v12 = *a3;
    long long v13 = v10;
    long long v11 = a3[3];
    long long v14 = a3[2];
    long long v15 = v11;
    return sub_215A8EFB8(a2, (unsigned __int8 *)&v12, v6);
  }
  else
  {
    (*(void (**)(void *))(*a2 + 16))(a2);
    long long v7 = a3[1];
    long long v12 = *a3;
    long long v13 = v7;
    long long v8 = a3[3];
    long long v14 = a3[2];
    long long v15 = v8;
    sub_215A8EFB8(a2, (unsigned __int8 *)&v12, v6);
    return (*(uint64_t (**)(void *))(*a2 + 24))(a2);
  }
}

uint64_t sub_215A8EFB8(void *a1, unsigned __int8 *a2, unsigned int a3)
{
  LOBYTE(v9) = *a2;
  uint64_t result = (*(uint64_t (**)(void *, uint64_t *))(*a1 + 80))(a1, &v9);
  if (a3 >= 2)
  {
    int v7 = *a2;
    if (*a2)
    {
      if (v7 == 2)
      {
        if (*((_DWORD *)a2 + 12) == 1)
        {
          uint64_t v9 = a1[1];
          return sub_215A8F3DC((int *)&v9, (uint64_t)a1, (uint64_t)(a2 + 8));
        }
      }
      else
      {
        if (v7 != 1)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "invalid sync type");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        if (!*((_DWORD *)a2 + 12))
        {
          uint64_t v9 = a1[1];
          return sub_215A8F0E8((int *)&v9, (uint64_t)a1, (uint64_t)(a2 + 8));
        }
      }
      sub_215742D4C();
    }
  }
  return result;
}

void sub_215A8F0D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215A8F0E8(int *a1, uint64_t a2, uint64_t a3)
{
  int v7 = 1;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7);
  if (*a1 < 1) {
    return sub_215A8F230(a2, a3);
  }
  if (*a1 == 2)
  {
    int v8 = 1;
    (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v8);
    if (*a1 <= 0) {
      return sub_215A8F230(a2, a3);
    }
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  sub_215A8F230(a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

uint64_t sub_215A8F230(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (*(unsigned char *)(a2 + 16))
  {
    char v6 = 1;
    (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2 + 8);
    if (*(unsigned char *)(a2 + 32))
    {
LABEL_3:
      char v8 = 1;
      (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v8);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2 + 24);
    }
  }
  else
  {
    char v5 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v5);
    if (*(unsigned char *)(a2 + 32)) {
      goto LABEL_3;
    }
  }
  char v7 = 0;
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v7);
}

uint64_t sub_215A8F3DC(int *a1, uint64_t a2, uint64_t a3)
{
  int v7 = 1;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7);
  if (*a1 >= 1) {
    return sub_215A8F584(a1, a2, a3);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a2, a3 + 8);
  if (*(unsigned char *)(a3 + 24))
  {
    char v9 = 1;
    (*(void (**)(uint64_t, char *))(*(void *)a2 + 80))(a2, &v9);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a2, a3 + 16);
  }
  else
  {
    char v8 = 0;
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)a2 + 80))(a2, &v8);
  }
}

uint64_t sub_215A8F584(int *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    int v8 = 1;
    (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v8);
    int v5 = *a1;
  }
  if (v5 > 0) {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a2, a3 + 8);
  if (*(unsigned char *)(a3 + 24))
  {
    char v10 = 1;
    (*(void (**)(uint64_t, char *))(*(void *)a2 + 80))(a2, &v10);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a2, a3 + 16);
    if (v5 < 1) {
      return result;
    }
  }
  else
  {
    char v9 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)a2 + 80))(a2, &v9);
    if (v5 < 1) {
      return result;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

void sub_215A8F744(void *a1, uint64_t a2)
{
  uint64_t v9 = a2;
  uint64_t v10 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4) {
    sub_215A8FE54(&v10, (uint64_t)v4);
  }
  uint64_t v10 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v5)
  {
    sub_215A90960(&v10, v5);
  }
  else
  {
    uint64_t v10 = a2;
    char v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
    if (v6) {
      sub_215A9128C(&v10, (uint64_t)v6);
    }
    uint64_t v10 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
    if (v7)
    {
      sub_215A91D98(&v10, (uint64_t)v7);
    }
    else
    {
      uint64_t v10 = a2;
      int v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
      if (v8) {
        sub_215A92830(&v10, v8);
      }
      else {
        sub_215A8F910(&v9, (void **)a1);
      }
    }
  }
}

uint64_t sub_215A8F910(uint64_t *a1, void **a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v30);
    sub_2159A3DA4((uint64_t)&v31, v30);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)&v31);
        if (!v46) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v29, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v8 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v8;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v37;
    long long v10 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v11 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v11;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v12 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v12;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v44;
LABEL_45:
    *((void *)&v44 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v30);
  sub_2159A3DA4((uint64_t)&v31, v30);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v29, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v32;
    *(unsigned char *)(v3 + 64) = 0;
    if (v35)
    {
      uint64_t v17 = v34;
      *(_OWORD *)(v3 + 40) = v33;
      *(void *)(v3 + 56) = v17;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v37;
    long long v19 = v36;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v40)
    {
      uint64_t v20 = v39;
      *(_OWORD *)(v3 + 96) = v38;
      *(void *)(v3 + 112) = v20;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v43)
    {
      uint64_t v21 = v42;
      *(_OWORD *)(v3 + 128) = v41;
      *(void *)(v3 + 144) = v21;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v46;
    if (v46)
    {
      *(_OWORD *)(v3 + 160) = v44;
      *(void *)(v3 + 176) = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)&v31);
  if (v46)
  {
LABEL_38:
    uint64_t v14 = v44;
    if (!(void)v44) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v44 + 1);
    uint64_t v16 = (void *)v44;
    if (*((void *)&v44 + 1) == (void)v44) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v43 && SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  if (v40 && SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v35 && SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  sub_2157C6F18((uint64_t)v30);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  BOOL v24 = (void (**)(void **, unsigned int *))*a2;
  v30[0] = (uint64_t)a2[1];
  int v25 = v30[0];
  unsigned int v31 = 6;
  v24[13](a2, &v31);
  if (v25 < 1)
  {
    if (v31 < 3) {
      sub_2159B6FFC((uint64_t)&v31, a2, v4, v31);
    }
    else {
      sub_2159B71F0(a2, v4, v31);
    }
  }
  else
  {
    sub_2159B6970((int *)v30, a2, v4, v31);
  }
  int v26 = (void (**)(void **, unsigned int *))*a2;
  v30[0] = (uint64_t)a2[1];
  int v27 = v30[0];
  unsigned int v31 = 2;
  v26[13](a2, &v31);
  if (v27 < 1) {
    return sub_215A93718(a2, v3 + 200, v31);
  }
  else {
    return sub_215A933BC((int *)v30, a2, v3 + 200, v31);
  }
}

void sub_215A8FE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A8FE54(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF07E4(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF1DC8((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159AC908(a2, v4);
        }
        sub_2159AC714((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A903BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A90404(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "sync_type";
  *(void *)(a1 + 96) = 9;
  if (!v6) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  LOBYTE(v19) = 0;
  sub_215DF1B68((void *)a1, &v19);
  int v7 = v19;
  *(unsigned char *)a2 = (_BYTE)v19;
  if (a3 >= 2 && v7)
  {
    if (v7 == 2)
    {
      if (*(unsigned char *)(a2 + 56))
      {
        int v9 = *(_DWORD *)(a2 + 48);
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        if (v9 != 1) {
          *(_DWORD *)(a2 + 48) = 1;
        }
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(unsigned char *)(a2 + 56) = 1;
      }
      uint64_t v13 = a2 + 8;
      int v14 = *(unsigned __int8 *)(a1 + 104);
      *(void *)(a1 + 88) = "value";
      *(void *)(a1 + 96) = 5;
      if (!v14) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      sub_215DF07E4(a1);
      long long v19 = "version";
      uint64_t v20 = 7;
      int v21 = 1;
      int v15 = *(unsigned __int8 *)(a1 + 104);
      *(void *)(a1 + 88) = "version";
      *(void *)(a1 + 96) = 7;
      if (!v15) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      sub_215DF1DC8((void *)a1, &v21);
      sub_215A90828(a1, v13);
    }
    else
    {
      if (v7 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if (*(unsigned char *)(a2 + 56))
      {
        int v8 = *(_DWORD *)(a2 + 48);
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        if (v8) {
          *(_DWORD *)(a2 + 48) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(unsigned char *)(a2 + 56) = 1;
      }
      uint64_t v10 = a2 + 8;
      int v11 = *(unsigned __int8 *)(a1 + 104);
      *(void *)(a1 + 88) = "value";
      *(void *)(a1 + 96) = 5;
      if (!v11) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      sub_215DF07E4(a1);
      long long v19 = "version";
      uint64_t v20 = 7;
      int v21 = 1;
      int v12 = *(unsigned __int8 *)(a1 + 104);
      *(void *)(a1 + 88) = "version";
      *(void *)(a1 + 96) = 7;
      if (!v12) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      sub_215DF1DC8((void *)a1, &v21);
      sub_215A90690(a1, v10);
    }
    uint64_t v16 = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = *(void *)(v16 - 8);
    uint64_t v17 = *(void *)(a1 + 72);
    *(void *)(a1 + 112) = *(void *)(v17 - 8);
    *(void *)(a1 + 48) = v16 - 8;
    *(void *)(a1 + 72) = v17 - 8;
  }
}

void sub_215A9067C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A90690(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "sync_command_id";
  *(void *)(a1 + 96) = 15;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  int v5 = (char *)sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v10 = 0;
  sub_215D306DC(v5, &v10);
  *(void *)a2 = v10;
  int v6 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "proceed_n";
  *(void *)(a1 + 96) = 9;
  if (v6)
  {
    if (*(unsigned char *)sub_215DF0AA0((void *)a1))
    {
LABEL_5:
      int v7 = (char *)sub_215DF0AA0((void *)a1);
      ++*(void *)(a1 + 112);
      uint64_t v10 = 0;
      sub_215D306DC(v7, &v10);
      *(void *)(a2 + 8) = v10;
      *(unsigned char *)(a2 + 16) = 1;
      goto LABEL_9;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 104) = 1;
    if (*(unsigned char *)sub_215DF0AA0((void *)a1)) {
      goto LABEL_5;
    }
  }
  ++*(void *)(a1 + 112);
  if (*(unsigned char *)(a2 + 16)) {
    *(unsigned char *)(a2 + 16) = 0;
  }
LABEL_9:
  int v8 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "proceed_until";
  *(void *)(a1 + 96) = 13;
  if (v8)
  {
    if (*(unsigned char *)sub_215DF0AA0((void *)a1))
    {
LABEL_11:
      int v9 = (char *)sub_215DF0AA0((void *)a1);
      ++*(void *)(a1 + 112);
      uint64_t v10 = 0;
      sub_215D306DC(v9, &v10);
      *(void *)(a2 + 24) = v10;
      *(unsigned char *)(a2 + 32) = 1;
      return;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 104) = 1;
    if (*(unsigned char *)sub_215DF0AA0((void *)a1)) {
      goto LABEL_11;
    }
  }
  ++*(void *)(a1 + 112);
  if (*(unsigned char *)(a2 + 32)) {
    *(unsigned char *)(a2 + 32) = 0;
  }
}

void sub_215A90828(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "status";
  *(void *)(a1 + 96) = 6;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF1B68((void *)a1, (unsigned char *)a2);
  int v5 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "sync_id";
  *(void *)(a1 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  int v6 = (char *)sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v9 = 0;
  sub_215D306DC(v6, &v9);
  *(void *)(a2 + 8) = v9;
  int v7 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "acknowledge_until";
  *(void *)(a1 + 96) = 17;
  if (v7)
  {
    if (*(unsigned char *)sub_215DF0AA0((void *)a1))
    {
LABEL_7:
      int v8 = (char *)sub_215DF0AA0((void *)a1);
      ++*(void *)(a1 + 112);
      uint64_t v9 = 0;
      sub_215D306DC(v8, &v9);
      *(void *)(a2 + 16) = v9;
      *(unsigned char *)(a2 + 24) = 1;
      return;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 104) = 1;
    if (*(unsigned char *)sub_215DF0AA0((void *)a1)) {
      goto LABEL_7;
    }
  }
  ++*(void *)(a1 + 112);
  if (*(unsigned char *)(a2 + 24)) {
    *(unsigned char *)(a2 + 24) = 0;
  }
}

uint64_t sub_215A90960(uint64_t *a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v31);
    sub_2159A3DA4((uint64_t)v32, v31);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v32);
        if (!v47) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v30, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(unsigned char *)(v3 + 64) = 0;
    if (v36)
    {
      uint64_t v8 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(void *)(v3 + 56) = v8;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v38;
    long long v10 = v37;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v41)
    {
      uint64_t v11 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(void *)(v3 + 112) = v11;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v44)
    {
      uint64_t v12 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(void *)(v3 + 144) = v12;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(void *)(v3 + 176) = v46;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v45;
    if (!(void)v45) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v45 + 1);
    uint64_t v16 = (void *)v45;
    if (*((void *)&v45 + 1) == (void)v45) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v45;
LABEL_45:
    *((void *)&v45 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v31);
  sub_2159A3DA4((uint64_t)v32, v31);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v30, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v33;
    *(unsigned char *)(v3 + 64) = 0;
    if (v36)
    {
      uint64_t v17 = v35;
      *(_OWORD *)(v3 + 40) = v34;
      *(void *)(v3 + 56) = v17;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v38;
    long long v19 = v37;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v41)
    {
      uint64_t v20 = v40;
      *(_OWORD *)(v3 + 96) = v39;
      *(void *)(v3 + 112) = v20;
      long long v39 = 0uLL;
      uint64_t v40 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v44)
    {
      uint64_t v21 = v43;
      *(_OWORD *)(v3 + 128) = v42;
      *(void *)(v3 + 144) = v21;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v47;
    if (v47)
    {
      *(_OWORD *)(v3 + 160) = v45;
      *(void *)(v3 + 176) = v46;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v32);
  if (v47)
  {
LABEL_38:
    uint64_t v14 = v45;
    if (!(void)v45) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v45 + 1);
    uint64_t v16 = (void *)v45;
    if (*((void *)&v45 + 1) == (void)v45) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v44 && SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
  if (v41 && SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  if (v36 && SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_2157C6F18((uint64_t)v31);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159AFF3C((uint64_t)v31, a2, v4);
  LODWORD(v31[0]) = 2;
  sub_215DFF824(a2[6], v31);
  unsigned int v24 = v31[0];
  int v25 = a2 + 2;
  sub_2159B0060(a2 + 2);
  if (v24 >= 2) {
    unsigned int v26 = 2;
  }
  else {
    unsigned int v26 = v24;
  }
  sub_215A90E7C(a2, v3 + 200, v26);
  uint64_t v27 = a2[4];
  uint64_t result = (*(uint64_t (**)(void *))(*v25 + 32))(a2 + 2);
  uint64_t v29 = *(void *)(v27 - 16) - result + *(void *)(v27 - 8);
  if (v29) {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v25 + 40))(a2 + 2, v29);
  }
  a2[4] -= 16;
  return result;
}

void sub_215A90E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A90E7C(void *a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 v12 = 0;
  sub_215DFF4BC(a1[6], &v12);
  int v6 = v12;
  *(unsigned char *)a2 = v12;
  if (a3 >= 2 && v6)
  {
    if (v6 == 2)
    {
      if (*(unsigned char *)(a2 + 56))
      {
        int v8 = *(_DWORD *)(a2 + 48);
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        if (v8 != 1) {
          *(_DWORD *)(a2 + 48) = 1;
        }
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(unsigned char *)(a2 + 56) = 1;
      }
      int v15 = 1;
      sub_215DFF824(a1[6], &v15);
      sub_215A91180((uint64_t)&v14, a1, a2 + 8);
    }
    else
    {
      if (v6 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if (*(unsigned char *)(a2 + 56))
      {
        int v7 = *(_DWORD *)(a2 + 48);
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        if (v7) {
          *(_DWORD *)(a2 + 48) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(unsigned char *)(a2 + 56) = 1;
      }
      int v13 = 1;
      sub_215DFF824(a1[6], &v13);
      sub_2159B0060(a1 + 2);
      sub_215A910B8((uint64_t)a1, a2 + 8);
      uint64_t v9 = a1[4];
      uint64_t v10 = *(void *)(v9 - 16) - (*(uint64_t (**)(void *))(a1[2] + 32))(a1 + 2) + *(void *)(v9 - 8);
      if (v10) {
        (*(void (**)(void *, uint64_t))(a1[2] + 40))(a1 + 2, v10);
      }
      a1[4] -= 16;
    }
  }
}

void sub_215A910A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A910B8(uint64_t a1, uint64_t a2)
{
  sub_215DFFC24(*(void *)(a1 + 48), (void *)a2);
  char v4 = 0;
  sub_215DFF4BC(*(void *)(a1 + 48), &v4);
  if (v4)
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
    }
    sub_215DFFC24(*(void *)(a1 + 48), (void *)(a2 + 8));
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(a2 + 16) = 0;
  }
  char v5 = 0;
  sub_215DFF4BC(*(void *)(a1 + 48), &v5);
  if (v5)
  {
    if (!*(unsigned char *)(a2 + 32))
    {
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 32) = 1;
    }
    sub_215DFFC24(*(void *)(a1 + 48), (void *)(a2 + 24));
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)(a2 + 32) = 0;
  }
}

uint64_t sub_215A91180(uint64_t a1, void *a2, uint64_t a3)
{
  char v5 = a2 + 2;
  sub_2159B0060(a2 + 2);
  sub_215DFF4BC(a2[6], (unsigned char *)a3);
  sub_215DFFC24(a2[6], (void *)(a3 + 8));
  char v9 = 0;
  sub_215DFF4BC(a2[6], &v9);
  if (v9)
  {
    if (!*(unsigned char *)(a3 + 24))
    {
      *(void *)(a3 + 16) = 0;
      *(unsigned char *)(a3 + 24) = 1;
    }
    sub_215DFFC24(a2[6], (void *)(a3 + 16));
  }
  else if (*(unsigned char *)(a3 + 24))
  {
    *(unsigned char *)(a3 + 24) = 0;
  }
  uint64_t v6 = a2[4];
  uint64_t result = (*(uint64_t (**)(void *))(a2[2] + 32))(v5);
  uint64_t v8 = *(void *)(v6 - 16) - result + *(void *)(v6 - 8);
  if (v8) {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v5 + 40))(v5, v8);
  }
  a2[4] -= 16;
  return result;
}

void sub_215A9128C(uint64_t *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v28);
    sub_2159A3DA4((uint64_t)v30, v28);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v30);
        if (!v45) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v27, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v31;
    *(unsigned char *)(v3 + 64) = 0;
    if (v34)
    {
      uint64_t v8 = v33;
      *(_OWORD *)(v3 + 40) = v32;
      *(void *)(v3 + 56) = v8;
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v36;
    long long v10 = v35;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v39)
    {
      uint64_t v11 = v38;
      *(_OWORD *)(v3 + 96) = v37;
      *(void *)(v3 + 112) = v11;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v42)
    {
      uint64_t v12 = v41;
      *(_OWORD *)(v3 + 128) = v40;
      *(void *)(v3 + 144) = v12;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v45;
    if (v45)
    {
      *(_OWORD *)(v3 + 160) = v43;
      *(void *)(v3 + 176) = v44;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v43;
    if (!(void)v43) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v43 + 1);
    uint64_t v16 = (void *)v43;
    if (*((void *)&v43 + 1) == (void)v43) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v43;
LABEL_45:
    *((void *)&v43 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v28);
  sub_2159A3DA4((uint64_t)v30, v28);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 != -1)
  {
    if (!v7)
    {
      sub_2159ADAB8(v4, (uint64_t)v30);
      if (!v45)
      {
LABEL_46:
        if (v42 && SHIBYTE(v41) < 0) {
          operator delete((void *)v40);
        }
        if (v39 && SHIBYTE(v38) < 0) {
          operator delete((void *)v37);
        }
        if (v34 && SHIBYTE(v33) < 0) {
          operator delete((void *)v32);
        }
        sub_2157C6F18((uint64_t)v28);
        if (*(_DWORD *)(v3 + 192)) {
          sub_215742D4C();
        }
LABEL_56:
        int v24 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "info";
        *(void *)(a2 + 96) = 4;
        if (!v24) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF01A0(a2);
        v28[0] = (uint64_t)"version";
        v28[1] = 7;
        v29[0] = 6;
        int v25 = *(unsigned __int8 *)(a2 + 104);
        *(void *)(a2 + 88) = "version";
        *(void *)(a2 + 96) = 7;
        if (!v25) {
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215DF0F9C((void *)a2, v29);
        if (v29[0] >= 6) {
          unsigned int v26 = 6;
        }
        else {
          unsigned int v26 = v29[0];
        }
        if (v26 >= 3) {
          sub_2159B191C(a2, v4);
        }
        sub_2159B1728((uint64_t)v28, a2);
      }
      goto LABEL_38;
    }
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v27, v4);
  }
  *(unsigned char *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 192) = -1;
  *(_OWORD *)(v3 + 24) = v31;
  *(unsigned char *)(v3 + 64) = 0;
  if (v34)
  {
    uint64_t v17 = v33;
    *(_OWORD *)(v3 + 40) = v32;
    *(void *)(v3 + 56) = v17;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    *(unsigned char *)(v3 + 64) = 1;
  }
  uint64_t v18 = v36;
  long long v19 = v35;
  *(unsigned char *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 72) = v19;
  *(void *)(v3 + 88) = v18;
  *(unsigned char *)(v3 + 120) = 0;
  if (v39)
  {
    uint64_t v20 = v38;
    *(_OWORD *)(v3 + 96) = v37;
    *(void *)(v3 + 112) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    *(unsigned char *)(v3 + 120) = 1;
  }
  *(unsigned char *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 152) = 0;
  if (v42)
  {
    uint64_t v21 = v41;
    *(_OWORD *)(v3 + 128) = v40;
    *(void *)(v3 + 144) = v21;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    *(unsigned char *)(v3 + 152) = 1;
  }
  *(unsigned char *)(v3 + 160) = 0;
  *(unsigned char *)(v3 + 184) = 0;
  int v22 = v45;
  if (v45)
  {
    *(_OWORD *)(v3 + 160) = v43;
    *(void *)(v3 + 176) = v44;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(unsigned char *)(v3 + 184) = 1;
  }
  *(_DWORD *)(v3 + 192) = 0;
  if (!v22) {
    goto LABEL_46;
  }
LABEL_38:
  uint64_t v14 = v43;
  if (!(void)v43) {
    goto LABEL_46;
  }
  uint64_t v23 = *((void *)&v43 + 1);
  uint64_t v16 = (void *)v43;
  if (*((void *)&v43 + 1) == (void)v43) {
    goto LABEL_45;
  }
  do
  {
    if (*(char *)(v23 - 1) < 0) {
      operator delete(*(void **)(v23 - 24));
    }
    v23 -= 24;
  }
  while (v23 != v14);
  goto LABEL_44;
}

void sub_215A917F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A9183C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "sync_type";
  *(void *)(a1 + 96) = 9;
  if (!v6) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  LOBYTE(v19) = 0;
  sub_215DF0D3C((void *)a1, &v19);
  int v7 = v19;
  *(unsigned char *)a2 = (_BYTE)v19;
  if (a3 >= 2 && v7)
  {
    if (v7 == 2)
    {
      if (*(unsigned char *)(a2 + 56))
      {
        int v9 = *(_DWORD *)(a2 + 48);
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        if (v9 != 1) {
          *(_DWORD *)(a2 + 48) = 1;
        }
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(unsigned char *)(a2 + 56) = 1;
      }
      uint64_t v13 = a2 + 8;
      int v14 = *(unsigned __int8 *)(a1 + 104);
      *(void *)(a1 + 88) = "value";
      *(void *)(a1 + 96) = 5;
      if (!v14) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      sub_215DF01A0(a1);
      long long v19 = "version";
      uint64_t v20 = 7;
      int v21 = 1;
      int v15 = *(unsigned __int8 *)(a1 + 104);
      *(void *)(a1 + 88) = "version";
      *(void *)(a1 + 96) = 7;
      if (!v15) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      sub_215DF0F9C((void *)a1, &v21);
      sub_215A91C60(a1, v13);
    }
    else
    {
      if (v7 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if (*(unsigned char *)(a2 + 56))
      {
        int v8 = *(_DWORD *)(a2 + 48);
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        if (v8) {
          *(_DWORD *)(a2 + 48) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(unsigned char *)(a2 + 56) = 1;
      }
      uint64_t v10 = a2 + 8;
      int v11 = *(unsigned __int8 *)(a1 + 104);
      *(void *)(a1 + 88) = "value";
      *(void *)(a1 + 96) = 5;
      if (!v11) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      sub_215DF01A0(a1);
      long long v19 = "version";
      uint64_t v20 = 7;
      int v21 = 1;
      int v12 = *(unsigned __int8 *)(a1 + 104);
      *(void *)(a1 + 88) = "version";
      *(void *)(a1 + 96) = 7;
      if (!v12) {
        *(unsigned char *)(a1 + 104) = 1;
      }
      sub_215DF0F9C((void *)a1, &v21);
      sub_215A91AC8(a1, v10);
    }
    uint64_t v16 = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = *(void *)(v16 - 8);
    uint64_t v17 = *(void *)(a1 + 72);
    *(void *)(a1 + 112) = *(void *)(v17 - 8);
    *(void *)(a1 + 48) = v16 - 8;
    *(void *)(a1 + 72) = v17 - 8;
  }
}

void sub_215A91AB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A91AC8(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "sync_command_id";
  *(void *)(a1 + 96) = 15;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  int v5 = (char *)sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v10 = 0;
  sub_215D2FEDC(v5, &v10);
  *(void *)a2 = v10;
  int v6 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "proceed_n";
  *(void *)(a1 + 96) = 9;
  if (v6)
  {
    if (*(unsigned char *)sub_215DF045C((void *)a1))
    {
LABEL_5:
      int v7 = (char *)sub_215DF045C((void *)a1);
      ++*(void *)(a1 + 112);
      uint64_t v10 = 0;
      sub_215D2FEDC(v7, &v10);
      *(void *)(a2 + 8) = v10;
      *(unsigned char *)(a2 + 16) = 1;
      goto LABEL_9;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 104) = 1;
    if (*(unsigned char *)sub_215DF045C((void *)a1)) {
      goto LABEL_5;
    }
  }
  ++*(void *)(a1 + 112);
  if (*(unsigned char *)(a2 + 16)) {
    *(unsigned char *)(a2 + 16) = 0;
  }
LABEL_9:
  int v8 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "proceed_until";
  *(void *)(a1 + 96) = 13;
  if (v8)
  {
    if (*(unsigned char *)sub_215DF045C((void *)a1))
    {
LABEL_11:
      int v9 = (char *)sub_215DF045C((void *)a1);
      ++*(void *)(a1 + 112);
      uint64_t v10 = 0;
      sub_215D2FEDC(v9, &v10);
      *(void *)(a2 + 24) = v10;
      *(unsigned char *)(a2 + 32) = 1;
      return;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 104) = 1;
    if (*(unsigned char *)sub_215DF045C((void *)a1)) {
      goto LABEL_11;
    }
  }
  ++*(void *)(a1 + 112);
  if (*(unsigned char *)(a2 + 32)) {
    *(unsigned char *)(a2 + 32) = 0;
  }
}

void sub_215A91C60(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "status";
  *(void *)(a1 + 96) = 6;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF0D3C((void *)a1, (unsigned char *)a2);
  int v5 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "sync_id";
  *(void *)(a1 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  int v6 = (char *)sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v9 = 0;
  sub_215D2FEDC(v6, &v9);
  *(void *)(a2 + 8) = v9;
  int v7 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "acknowledge_until";
  *(void *)(a1 + 96) = 17;
  if (v7)
  {
    if (*(unsigned char *)sub_215DF045C((void *)a1))
    {
LABEL_7:
      int v8 = (char *)sub_215DF045C((void *)a1);
      ++*(void *)(a1 + 112);
      uint64_t v9 = 0;
      sub_215D2FEDC(v8, &v9);
      *(void *)(a2 + 16) = v9;
      *(unsigned char *)(a2 + 24) = 1;
      return;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 104) = 1;
    if (*(unsigned char *)sub_215DF045C((void *)a1)) {
      goto LABEL_7;
    }
  }
  ++*(void *)(a1 + 112);
  if (*(unsigned char *)(a2 + 24)) {
    *(unsigned char *)(a2 + 24) = 0;
  }
}

void sub_215A91D98(uint64_t *a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)&__p);
    sub_2159A3DA4((uint64_t)v35, (uint64_t *)&__p);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v35);
        if (!v50) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v31, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(unsigned char *)(v3 + 64) = 0;
    if (v39)
    {
      uint64_t v8 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(void *)(v3 + 56) = v8;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v41;
    long long v10 = v40;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v44)
    {
      uint64_t v11 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(void *)(v3 + 112) = v11;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v47)
    {
      uint64_t v12 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(void *)(v3 + 144) = v12;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(void *)(v3 + 176) = v49;
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v48;
    if (!(void)v48) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v48 + 1);
    uint64_t v16 = (void *)v48;
    if (*((void *)&v48 + 1) == (void)v48) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v48;
LABEL_45:
    *((void *)&v48 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)&__p);
  sub_2159A3DA4((uint64_t)v35, (uint64_t *)&__p);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v31, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v36;
    *(unsigned char *)(v3 + 64) = 0;
    if (v39)
    {
      uint64_t v17 = v38;
      *(_OWORD *)(v3 + 40) = v37;
      *(void *)(v3 + 56) = v17;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v41;
    long long v19 = v40;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v44)
    {
      uint64_t v20 = v43;
      *(_OWORD *)(v3 + 96) = v42;
      *(void *)(v3 + 112) = v20;
      long long v42 = 0uLL;
      uint64_t v43 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v47)
    {
      uint64_t v21 = v46;
      *(_OWORD *)(v3 + 128) = v45;
      *(void *)(v3 + 144) = v21;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v50;
    if (v50)
    {
      *(_OWORD *)(v3 + 160) = v48;
      *(void *)(v3 + 176) = v49;
      long long v48 = 0uLL;
      uint64_t v49 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v35);
  if (v50)
  {
LABEL_38:
    uint64_t v14 = v48;
    if (!(void)v48) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v48 + 1);
    uint64_t v16 = (void *)v48;
    if (*((void *)&v48 + 1) == (void)v48) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v47 && SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (v44 && SHIBYTE(v43) < 0) {
    operator delete((void *)v42);
  }
  if (v39 && SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  sub_2157C6F18((uint64_t)&__p);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  LODWORD(__p) = 6;
  sub_215DFABD4(a2, &__p);
  unsigned int v24 = __p;
  if (__p >= 6) {
    unsigned int v25 = 6;
  }
  else {
    unsigned int v25 = __p;
  }
  if (v25 < 3) {
    sub_2159B3640((uint64_t)&__p, a2, v4, v25);
  }
  else {
    sub_2159B3834(a2, v4, v25);
  }
  if (v24 >= 3 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        break;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_95:
          char v30 = 0;
          if (v34 < 0) {
            goto LABEL_98;
          }
          goto LABEL_84;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_95;
      }
      char v30 = 1;
      if (v34 < 0) {
LABEL_98:
      }
        operator delete(__p);
LABEL_84:
      if (*(unsigned char *)(a2 + 131)) {
        char v29 = 0;
      }
      else {
        char v29 = v30;
      }
    }
    while ((v29 & 1) != 0);
  }
  LODWORD(__p) = 2;
  sub_215DFABD4(a2, &__p);
  if (__p >= 2) {
    unsigned int v26 = 2;
  }
  else {
    unsigned int v26 = __p;
  }
  sub_215A923D0(a2, v3 + 200, v26);
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (v34 < 0)
      {
        if (v33 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_80:
          char v28 = 0;
          if (v34 < 0) {
            goto LABEL_83;
          }
          goto LABEL_69;
        }
      }
      else if (v34 == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_80;
      }
      char v28 = 1;
      if (v34 < 0) {
LABEL_83:
      }
        operator delete(__p);
LABEL_69:
      if (*(unsigned char *)(a2 + 131)) {
        char v27 = 0;
      }
      else {
        char v27 = v28;
      }
    }
    while ((v27 & 1) != 0);
  }
}

void sub_215A92388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A923D0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  LOBYTE(__p[0]) = 0;
  sub_215DFA01C(a1, __p);
  int v6 = LOBYTE(__p[0]);
  *(unsigned char *)a2 = __p[0];
  if (a3 < 2 || !v6) {
    return;
  }
  if (v6 != 2)
  {
    if (v6 != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid sync type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if (*(unsigned char *)(a2 + 56))
    {
      int v7 = *(_DWORD *)(a2 + 48);
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 32) = 0;
      *(unsigned char *)(a2 + 40) = 0;
      if (v7) {
        *(_DWORD *)(a2 + 48) = 0;
      }
    }
    else
    {
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 32) = 0;
      *(unsigned char *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 48) = 0;
      *(unsigned char *)(a2 + 56) = 1;
    }
    LODWORD(__p[0]) = 1;
    sub_215DFABD4(a1, __p);
    sub_215A92620(a1, a2 + 8);
    if (*(unsigned char *)(a1 + 131)) {
      return;
    }
    while (1)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a1, (uint64_t)__p);
      if (v13 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_25:
          char v10 = 0;
          if (v13 < 0) {
            goto LABEL_28;
          }
          goto LABEL_14;
        }
      }
      else if (v13 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_25;
      }
      char v10 = 1;
      if (v13 < 0) {
LABEL_28:
      }
        operator delete(__p[0]);
LABEL_14:
      if (*(unsigned char *)(a1 + 131)) {
        char v9 = 0;
      }
      else {
        char v9 = v10;
      }
      if ((v9 & 1) == 0) {
        return;
      }
    }
  }
  if (*(unsigned char *)(a2 + 56))
  {
    int v8 = *(_DWORD *)(a2 + 48);
    *(unsigned char *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = 0;
    if (v8 != 1) {
      *(_DWORD *)(a2 + 48) = 1;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = 1;
    *(unsigned char *)(a2 + 56) = 1;
  }
  sub_215A926E4((uint64_t)__p, a1, a2 + 8);
}

void sub_215A9260C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A92620(uint64_t a1, uint64_t a2)
{
  sub_215DFB854(a1, (void *)a2);
  char v4 = 0;
  sub_215DFA01C(a1, &v4);
  if (v4)
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
    }
    sub_215DFB854(a1, (void *)(a2 + 8));
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(a2 + 16) = 0;
  }
  char v5 = 0;
  sub_215DFA01C(a1, &v5);
  if (v5)
  {
    if (!*(unsigned char *)(a2 + 32))
    {
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 32) = 1;
    }
    sub_215DFB854(a1, (void *)(a2 + 24));
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)(a2 + 32) = 0;
  }
}

void sub_215A926E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(__p[0]) = 1;
  sub_215DFABD4(a2, __p);
  sub_215DFA01C(a2, (unsigned char *)a3);
  sub_215DFB854(a2, (void *)(a3 + 8));
  LOBYTE(__p[0]) = 0;
  sub_215DFA01C(a2, __p);
  if (LOBYTE(__p[0]))
  {
    if (!*(unsigned char *)(a3 + 24))
    {
      *(void *)(a3 + 16) = 0;
      *(unsigned char *)(a3 + 24) = 1;
    }
    sub_215DFB854(a2, (void *)(a3 + 16));
  }
  else if (*(unsigned char *)(a3 + 24))
  {
    *(unsigned char *)(a3 + 24) = 0;
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v8 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_20:
          char v6 = 0;
          if (v8 < 0) {
            goto LABEL_23;
          }
          goto LABEL_9;
        }
      }
      else if (v8 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_20;
      }
      char v6 = 1;
      if (v8 < 0) {
LABEL_23:
      }
        operator delete(__p[0]);
LABEL_9:
      if (*(unsigned char *)(a2 + 131)) {
        char v5 = 0;
      }
      else {
        char v5 = v6;
      }
    }
    while ((v5 & 1) != 0);
  }
}

void *sub_215A92830(uint64_t *a1, void *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (!v5) {
    goto LABEL_56;
  }
  if (v5 == 1)
  {
    sub_2159CA9D4(*a1 + 16, (uint64_t)v26);
    sub_2159A3DA4((uint64_t)v27, v26);
    uint64_t v6 = *(unsigned int *)(v3 + 192);
    if (v6 != -1)
    {
      if (!v6)
      {
        sub_2159ADAB8(v4, (uint64_t)v27);
        if (!v42) {
          goto LABEL_46;
        }
        goto LABEL_22;
      }
      ((void (*)(char *, uint64_t))off_26C674B60[v6])(&v25, v4);
    }
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v8 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v8;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v9 = v33;
    long long v10 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v10;
    *(void *)(v3 + 88) = v9;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v11 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v11;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v12 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v12;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v13 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v13) {
      goto LABEL_46;
    }
LABEL_22:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v15 = *((void *)&v40 + 1);
    uint64_t v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v15 - 1) < 0) {
        operator delete(*(void **)(v15 - 24));
      }
      v15 -= 24;
    }
    while (v15 != v14);
LABEL_44:
    uint64_t v16 = (void *)v40;
LABEL_45:
    *((void *)&v40 + 1) = v14;
    operator delete(v16);
    goto LABEL_46;
  }
  if (v5 != 2) {
    sub_215742D4C();
  }
  sub_21598FB5C(*a1 + 16, (uint64_t)v26);
  sub_2159A3DA4((uint64_t)v27, v26);
  uint64_t v7 = *(unsigned int *)(v3 + 192);
  if (v7 == -1) {
    goto LABEL_29;
  }
  if (v7)
  {
    ((void (*)(char *, uint64_t))off_26C674B60[v7])(&v25, v4);
LABEL_29:
    *(unsigned char *)(v3 + 40) = 0;
    *(_DWORD *)(v3 + 192) = -1;
    *(_OWORD *)(v3 + 24) = v28;
    *(unsigned char *)(v3 + 64) = 0;
    if (v31)
    {
      uint64_t v17 = v30;
      *(_OWORD *)(v3 + 40) = v29;
      *(void *)(v3 + 56) = v17;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      *(unsigned char *)(v3 + 64) = 1;
    }
    uint64_t v18 = v33;
    long long v19 = v32;
    *(unsigned char *)(v3 + 96) = 0;
    *(_OWORD *)(v3 + 72) = v19;
    *(void *)(v3 + 88) = v18;
    *(unsigned char *)(v3 + 120) = 0;
    if (v36)
    {
      uint64_t v20 = v35;
      *(_OWORD *)(v3 + 96) = v34;
      *(void *)(v3 + 112) = v20;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      *(unsigned char *)(v3 + 120) = 1;
    }
    *(unsigned char *)(v3 + 128) = 0;
    *(unsigned char *)(v3 + 152) = 0;
    if (v39)
    {
      uint64_t v21 = v38;
      *(_OWORD *)(v3 + 128) = v37;
      *(void *)(v3 + 144) = v21;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      *(unsigned char *)(v3 + 152) = 1;
    }
    *(unsigned char *)(v3 + 160) = 0;
    *(unsigned char *)(v3 + 184) = 0;
    int v22 = v42;
    if (v42)
    {
      *(_OWORD *)(v3 + 160) = v40;
      *(void *)(v3 + 176) = v41;
      long long v40 = 0uLL;
      uint64_t v41 = 0;
      *(unsigned char *)(v3 + 184) = 1;
    }
    *(_DWORD *)(v3 + 192) = 0;
    if (!v22) {
      goto LABEL_46;
    }
    goto LABEL_38;
  }
  sub_2159ADAB8(v4, (uint64_t)v27);
  if (v42)
  {
LABEL_38:
    uint64_t v14 = v40;
    if (!(void)v40) {
      goto LABEL_46;
    }
    uint64_t v23 = *((void *)&v40 + 1);
    uint64_t v16 = (void *)v40;
    if (*((void *)&v40 + 1) == (void)v40) {
      goto LABEL_45;
    }
    do
    {
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*(void **)(v23 - 24));
      }
      v23 -= 24;
    }
    while (v23 != v14);
    goto LABEL_44;
  }
LABEL_46:
  if (v39 && SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  if (v36 && SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  if (v31 && SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  sub_2157C6F18((uint64_t)v26);
  if (*(_DWORD *)(v3 + 192)) {
    sub_215742D4C();
  }
LABEL_56:
  sub_2159B5060((uint64_t)v26, a2, v4);
  return sub_215A92CA8((uint64_t)v26, a2, v3 + 200);
}

void sub_215A92C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215A92CA8(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  sub_215D02644(a2);
  if (v9 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t result = sub_215A92D88(a2, a3, v10);
  uint64_t v12 = a2[12];
  uint64_t v13 = a2[9];
  a2[6] = *(void *)(v12 - 8) + *(void *)(v13 - 8) + 8;
  a2[9] = v13 - 8;
  a2[12] = v12 - 8;
  return result;
}

void sub_215A92D74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A92D88(void *result, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = result[6];
  if (result[7] <= v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  int v4 = *(unsigned __int8 *)(result[3] + v3);
  result[6] = v3 + 1;
  *(unsigned char *)a2 = v4;
  if (a3 >= 2 && v4)
  {
    if (v4 == 2)
    {
      if (*(unsigned char *)(a2 + 56))
      {
        int v6 = *(_DWORD *)(a2 + 48);
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        if (v6 != 1) {
          *(_DWORD *)(a2 + 48) = 1;
        }
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(unsigned char *)(a2 + 56) = 1;
      }
      return sub_215A931E8((uint64_t)&v10, result, a2 + 8);
    }
    else
    {
      if (v4 != 1)
      {
        uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v8, "invalid sync type");
        __cxa_throw(v8, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if (*(unsigned char *)(a2 + 56))
      {
        int v5 = *(_DWORD *)(a2 + 48);
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        if (v5) {
          *(_DWORD *)(a2 + 48) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(unsigned char *)(a2 + 56) = 1;
      }
      return sub_215A92F4C((uint64_t)&v9, result, (void *)(a2 + 8));
    }
  }
  return result;
}

void sub_215A92F24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A92F38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A92F4C(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[6] = v3 + 4;
  sub_215D02644(a2);
  uint64_t result = sub_215A93028(a2, a3);
  uint64_t v10 = a2[12];
  uint64_t v11 = a2[9];
  a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_215A93014(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A93028(void *a1, void *a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *a2 = *(void *)(a1[3] + v2);
  a1[6] += 8;
  sub_215A930E4(a1, (uint64_t)(a2 + 1));

  return sub_215A930E4(a1, (uint64_t)(a2 + 3));
}

void sub_215A930D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A930E4(void *result, uint64_t a2)
{
  unint64_t v3 = result[6];
  unint64_t v2 = result[7];
  if (v2 <= v3) {
    goto LABEL_12;
  }
  uint64_t v4 = result[3];
  int v5 = *(unsigned __int8 *)(v4 + v3);
  unint64_t v6 = v3 + 1;
  result[6] = v6;
  if (v5)
  {
    if (!*(unsigned char *)(a2 + 8))
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
    }
    BOOL v7 = v2 >= v6;
    unint64_t v8 = v2 - v6;
    if (!v7) {
      unint64_t v8 = 0;
    }
    if (v8 > 7)
    {
      *(void *)a2 = *(void *)(v4 + v6);
      result[6] += 8;
      return result;
    }
LABEL_12:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  if (*(unsigned char *)(a2 + 8)) {
    *(unsigned char *)(a2 + 8) = 0;
  }
  return result;
}

void sub_215A931C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A931D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A931E8(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[6] = v3 + 4;
  sub_215D02644(a2);
  uint64_t result = sub_215A932C4(a2, a3);
  uint64_t v10 = a2[12];
  uint64_t v11 = a2[9];
  a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
  return result;
}

void sub_215A932B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_215A932C4(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  if (a1[7] <= v2) {
    goto LABEL_8;
  }
  *(unsigned char *)a2 = *(unsigned char *)(a1[3] + v2);
  unint64_t v3 = a1[7];
  unint64_t v4 = a1[6] + 1;
  a1[6] = v4;
  BOOL v5 = v3 >= v4;
  unint64_t v6 = v3 - v4;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 7)
  {
LABEL_8:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 8) = *(void *)(a1[3] + v4);
  a1[6] += 8;
  uint64_t v7 = a2 + 16;

  return sub_215A930E4(a1, v7);
}

void sub_215A93394(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A933A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215A933BC(int *a1, void *a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    unsigned int v14 = 1;
    (*(void (**)(void *, unsigned int *))(*a2 + 104))(a2, &v14);
    if (v14 >= 3)
    {
      unsigned int v12 = v14;
      uint64_t v13 = sub_215A934FC();
      sub_215E07C10((std::string *)v13, v12, 2u);
    }
    int v7 = *a1;
  }
  if (v7 <= 0)
  {
    if (a4 >= 2) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a4;
    }
    return sub_215A93718(a2, a3, v11);
  }
  else
  {
    (*(void (**)(void *))(*a2 + 16))(a2);
    if (a4 >= 2) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = a4;
    }
    sub_215A93718(a2, a3, v9);
    return (*(uint64_t (**)(void *))(*a2 + 24))(a2);
  }
}

long long *sub_215A934FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678886E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678886E0))
  {
    return &xmmword_2678886C8;
  }
  uint64_t v1 = (char *)sub_215A935E4();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_2678886C8, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_2678886D8 = *((void *)v1 + 2);
    xmmword_2678886C8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678886C8, &dword_21572C000);
  __cxa_guard_release(&qword_2678886E0);
  return &xmmword_2678886C8;
}

void sub_215A935CC(_Unwind_Exception *a1)
{
}

void *sub_215A935E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888700, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888700))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::SyncSample]", qword_2678886E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678886E8, &dword_21572C000);
    __cxa_guard_release(&qword_267888700);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888720, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888720))
  {
    return &unk_267888708;
  }
  sub_215E19DF4((uint64_t)qword_2678886E8, (uint64_t)&unk_267888708);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267888708, &dword_21572C000);
  __cxa_guard_release(&qword_267888720);
  return &unk_267888708;
}

void sub_215A936E8(_Unwind_Exception *a1)
{
}

void sub_215A93700(_Unwind_Exception *a1)
{
}

uint64_t sub_215A93718(void *a1, uint64_t a2, unsigned int a3)
{
  LOBYTE(v15) = 0;
  uint64_t result = (*(uint64_t (**)(void *, uint64_t *))(*a1 + 80))(a1, &v15);
  int v7 = v15;
  *(unsigned char *)a2 = v15;
  if (a3 >= 2 && v7)
  {
    if (v7 == 2)
    {
      if (*(unsigned char *)(a2 + 56))
      {
        int v10 = *(_DWORD *)(a2 + 48);
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        if (v10 != 1) {
          *(_DWORD *)(a2 + 48) = 1;
        }
      }
      else
      {
        *(unsigned char *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(_DWORD *)(a2 + 48) = 1;
        *(unsigned char *)(a2 + 56) = 1;
      }
      uint64_t v15 = a1[1];
      return sub_215A93DE4((int *)&v15, (uint64_t)a1, a2 + 8);
    }
    else
    {
      if (v7 != 1)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "invalid sync type");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      uint64_t v8 = a2 + 8;
      if (*(unsigned char *)(a2 + 56))
      {
        int v9 = *(_DWORD *)(a2 + 48);
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        if (v9) {
          *(_DWORD *)(a2 + 48) = 0;
        }
      }
      else
      {
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(unsigned char *)(a2 + 24) = 0;
        *(unsigned char *)(a2 + 32) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        *(unsigned char *)(a2 + 56) = 1;
      }
      uint64_t v11 = *a1;
      uint64_t v15 = a1[1];
      int v12 = v15;
      int v14 = 1;
      (*(void (**)(void *, int *))(v11 + 104))(a1, &v14);
      if (v12 < 1) {
        return sub_215A93C80((uint64_t)a1, v8);
      }
      else {
        return sub_215A9392C((int *)&v15, (uint64_t)a1, v8);
      }
    }
  }
  return result;
}

void sub_215A93918(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215A9392C(int *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    unsigned int v10 = 1;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      unsigned int v8 = v10;
      int v9 = sub_215A93A64();
      sub_215E07C10((std::string *)v9, v8, 1u);
    }
    int v5 = *a1;
  }
  if (v5 <= 0) {
    return sub_215A93C80(a2, a3);
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  sub_215A93C80(a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
}

long long *sub_215A93A64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888740, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888740))
  {
    return &xmmword_267888728;
  }
  uint64_t v1 = (char *)sub_215A93B4C();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_267888728, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267888738 = *((void *)v1 + 2);
    xmmword_267888728 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888728, &dword_21572C000);
  __cxa_guard_release(&qword_267888740);
  return &xmmword_267888728;
}

void sub_215A93B34(_Unwind_Exception *a1)
{
}

void *sub_215A93B4C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888760, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888760))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::SyncCommandSample]", qword_267888748);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888748, &dword_21572C000);
    __cxa_guard_release(&qword_267888760);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888780, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888780))
  {
    return &unk_267888768;
  }
  sub_215E19DF4((uint64_t)qword_267888748, (uint64_t)&unk_267888768);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267888768, &dword_21572C000);
  __cxa_guard_release(&qword_267888780);
  return &unk_267888768;
}

void sub_215A93C50(_Unwind_Exception *a1)
{
}

void sub_215A93C68(_Unwind_Exception *a1)
{
}

uint64_t sub_215A93C80(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
  char v5 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v5);
  if (v5)
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2 + 8);
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(a2 + 16) = 0;
  }
  char v6 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v6);
  if (v6)
  {
    if (!*(unsigned char *)(a2 + 32))
    {
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 32) = 1;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2 + 24);
  }
  else if (*(unsigned char *)(a2 + 32))
  {
    *(unsigned char *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t sub_215A93DE4(int *a1, uint64_t a2, uint64_t a3)
{
  int v7 = 1;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7);
  if (*a1 >= 1) {
    return sub_215A93F70(a1, a2, a3);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a2, a3 + 8);
  char v8 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)a2 + 80))(a2, &v8);
  if (v8)
  {
    if (!*(unsigned char *)(a3 + 24))
    {
      *(void *)(a3 + 16) = 0;
      *(unsigned char *)(a3 + 24) = 1;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a2, a3 + 16);
  }
  else if (*(unsigned char *)(a3 + 24))
  {
    *(unsigned char *)(a3 + 24) = 0;
  }
  return result;
}

uint64_t sub_215A93F70(int *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *a1;
  if (*a1 == 2)
  {
    unsigned int v10 = 1;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v10);
    if (v10 >= 2)
    {
      unsigned int v8 = v10;
      int v9 = sub_215A94138();
      sub_215E07C10((std::string *)v9, v8, 1u);
    }
    int v5 = *a1;
  }
  if (v5 > 0) {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 80))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a2, a3 + 8);
  char v11 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)a2 + 80))(a2, &v11);
  if (v11)
  {
    if (!*(unsigned char *)(a3 + 24))
    {
      *(void *)(a3 + 16) = 0;
      *(unsigned char *)(a3 + 24) = 1;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 120))(a2, a3 + 16);
  }
  else if (*(unsigned char *)(a3 + 24))
  {
    *(unsigned char *)(a3 + 24) = 0;
  }
  if (v5 >= 1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
  return result;
}

long long *sub_215A94138()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678887A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678887A0))
  {
    return &xmmword_267888788;
  }
  uint64_t v1 = (char *)sub_215A94220();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_267888788, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267888798 = *((void *)v1 + 2);
    xmmword_267888788 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888788, &dword_21572C000);
  __cxa_guard_release(&qword_2678887A0);
  return &xmmword_267888788;
}

void sub_215A94208(_Unwind_Exception *a1)
{
}

void *sub_215A94220()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678887C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678887C0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ClientSyncUpdateSample]", qword_2678887A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678887A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678887C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678887E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678887E0))
  {
    return &unk_2678887C8;
  }
  sub_215E19DF4((uint64_t)qword_2678887A8, (uint64_t)&unk_2678887C8);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_2678887C8, &dword_21572C000);
  __cxa_guard_release(&qword_2678887E0);
  return &unk_2678887C8;
}

void sub_215A94324(_Unwind_Exception *a1)
{
}

void sub_215A9433C(_Unwind_Exception *a1)
{
}

uint64_t sub_215A94354(uint64_t a1)
{
  *(void *)a1 = &unk_26C675198;
  sub_2157C6F18(a1 + 240);
  sub_2157B69B0(a1 + 64);
  if (!*(unsigned char *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_215A943C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)(a1 + 24));
  return a1;
}

__n128 sub_215A9441C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C675198;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = v2;
  *(unsigned char *)(a1 + 56) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v3;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  if (*(unsigned char *)(a2 + 208))
  {
    long long v4 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v4;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 64) = 0;
    long long v5 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v5;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 88) = 0;
    long long v6 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v6;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = 0;
    *(void *)(a2 + 112) = 0;
    long long v7 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v7;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 152) = 0;
    long long v8 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v8;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    long long v9 = *(_OWORD *)(a2 + 184);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v9;
    *(void *)(a2 + 184) = 0;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(unsigned char *)(a1 + 208) = 1;
  }
  long long v10 = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  if (*(unsigned char *)(a2 + 280))
  {
    long long v11 = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = v11;
    *(void *)(a2 + 264) = 0;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 256) = 0;
    *(unsigned char *)(a1 + 280) = 1;
  }
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  if (*(unsigned char *)(a2 + 312))
  {
    long long v12 = *(_OWORD *)(a2 + 288);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = v12;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 288) = 0;
    *(unsigned char *)(a1 + 312) = 1;
  }
  __n128 result = *(__n128 *)(a2 + 320);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(__n128 *)(a1 + 320) = result;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  if (*(unsigned char *)(a2 + 400))
  {
    _X2 = 0;
    _X3 = 0;
    __n128 result = *(__n128 *)(a2 + 352);
    *(void *)(a1 + 368) = *(void *)(a2 + 368);
    *(__n128 *)(a1 + 352) = result;
    *(void *)(a2 + 360) = 0;
    *(void *)(a2 + 368) = 0;
    *(void *)(a2 + 352) = 0;
    __asm { CASPAL          X2, X3, X2, X3, [X8] }
    *(void *)(a1 + 384) = _X2;
    *(void *)(a1 + 392) = 0;
    *(unsigned char *)(a1 + 400) = 1;
  }
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 440) = 0;
  if (*(unsigned char *)(a2 + 440))
  {
    *(void *)(a1 + 416) = 0;
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + 432) = 0;
    __n128 result = *(__n128 *)(a2 + 416);
    *(__n128 *)(a1 + 416) = result;
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    *(void *)(a2 + 416) = 0;
    *(void *)(a2 + 424) = 0;
    *(void *)(a2 + 432) = 0;
    *(unsigned char *)(a1 + 440) = 1;
  }
  return result;
}

void sub_215A94640(uint64_t a1)
{
  *(void *)a1 = &unk_26C675198;
  sub_2157C6F18(a1 + 240);
  sub_2157B69B0(a1 + 64);
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215A946C4(uint64_t a1)
{
  return a1 + 240;
}

uint64_t sub_215A946CC(void *a1, void *lpsrc)
{
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D60, (const struct __class_type_info *)&unk_26C675158, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v6[0] = (uint64_t)a1 + 8;
      v6[1] = (uint64_t)a1 + 24;
      v6[2] = (uint64_t)a1 + 64;
      v6[3] = (uint64_t)a1 + 216;
      v5[0] = result + 8;
      v5[1] = result + 24;
      uint64_t v5[2] = result + 64;
      int v5[3] = result + 216;
      return sub_215AED0B0((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

void sub_215A9479C()
{
}

void sub_215A94838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A94854()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678888C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678888C0))
  {
    int v0 = sub_2157B73A8();
    uint64_t v1 = *((void *)v0 + 1);
    if (*((char *)v0 + 23) >= 0)
    {
      uint64_t v2 = *((unsigned __int8 *)v0 + 23);
    }
    else
    {
      int v0 = *(long long **)v0;
      uint64_t v2 = v1;
    }
    sub_2157C6A10((char *)v0, v2, "::", 2, 0, (uint64_t)&v4);
    if (*(char *)(v5 - 1) < 0)
    {
      sub_215738B0C(&xmmword_2678888A8, *(void **)(v5 - 24), *(void *)(v5 - 16));
    }
    else
    {
      long long v3 = *(_OWORD *)(v5 - 24);
      qword_2678888B8 = *(void *)(v5 - 8);
      xmmword_2678888A8 = v3;
    }
    sub_2157352DC(&v4);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678888A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678888C0);
  }
  sub_215A959A4(&xmmword_2678888A8, (uint64_t)"{");
}

void sub_215A94970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215A94990(_Unwind_Exception *a1)
{
}

void sub_215A949A8(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 1;
}

double sub_215A949D4@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_215B0D000(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_215A94A2C(uint64_t a1)
{
  *(void *)a1 = &unk_26C675198;
  sub_2157C6F18(a1 + 240);
  sub_2157B69B0(a1 + 64);
  if (!*(unsigned char *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_215A94AA0(uint64_t a1)
{
  *(void *)a1 = &unk_26C675198;
  sub_2157C6F18(a1 + 240);
  sub_2157B69B0(a1 + 64);
  if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215A94B24()
{
  int v0 = sub_215A95104();
  sub_215A94C80(v0, (uint64_t)"{");
}

void sub_215A94B80()
{
  int v0 = 0;
  sub_215A94EB0();
}

void sub_215A94C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_26C674B90[a13])(v13 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A94C54(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_215A94C80(long long *a1, uint64_t a2)
{
  int v5 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_215738B0C(&__dst, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __dst = *a1;
    uint64_t v4 = *((void *)a1 + 2);
  }
  int v5 = 1;
  p_dst = &__dst;
  uint64_t v7 = a2;
  v8[0] = (uint64_t)&__dst;
  v8[1] = a2;
  void v8[2] = a2;
  sub_2157492F0(v8, (uint64_t)&__dst);
  sub_215A94EB0();
}

void sub_215A94E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A94E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A94E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A94E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A94E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A94E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A94E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A94EB0()
{
}

void sub_215A9509C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215A950C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_215A95104()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888800, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888800))
  {
    return &xmmword_2678887E8;
  }
  uint64_t v1 = sub_215A951EC();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_2678887E8, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_2678887F8 = v1->__r_.__value_.__r.__words[2];
    xmmword_2678887E8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678887E8, &dword_21572C000);
  __cxa_guard_release(&qword_267888800);
  return &xmmword_2678887E8;
}

void sub_215A951D4(_Unwind_Exception *a1)
{
}

std::string *sub_215A951EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888820, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888820))
  {
    return &stru_267888808;
  }
  sub_215A954A0((uint64_t)__p);
  sub_215A952E8(__p, &stru_267888808);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888808, &dword_21572C000);
  __cxa_guard_release(&qword_267888820);
  return &stru_267888808;
}

void sub_215A952A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267888820);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267888820);
  _Unwind_Resume(a1);
}

void sub_215A952E8(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2157B73A8();
  if (*((char *)v4 + 23) < 0)
  {
    sub_215738B0C(__dst, *(void **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    uint64_t v16 = *((void *)v4 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  long long v6 = sub_2157C6008();
  if (*((char *)v6 + 23) < 0)
  {
    sub_215738B0C(&v17, *(void **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    uint64_t v18 = *((void *)v6 + 2);
    long long v17 = v7;
  }
  sub_21573A150(&__p, (uint64_t)__dst, 2uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, a2, v8, v9);
  long long v10 = (void **)__p;
  if (__p)
  {
    long long v11 = v14;
    long long v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      long long v12 = __p;
    }
    int v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0) {
    goto LABEL_19;
  }
}

void sub_215A95450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_215A954A0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888840, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888840))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::PeerInfo>]", qword_267888828);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888828, &dword_21572C000);
    __cxa_guard_release(&qword_267888840);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888860, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888860))
  {
    size_t v3 = sub_215747D98(qword_267888828, "<", 0);
    sub_215747C90(qword_267888828, 0, v3, qword_267888848);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888848, &dword_21572C000);
    __cxa_guard_release(&qword_267888860);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888880, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888880))
  {
    sub_215E19DF4((uint64_t)qword_267888848, (uint64_t)&xmmword_267888868);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888868, &dword_21572C000);
    __cxa_guard_release(&qword_267888880);
  }
  if (byte_26788887F < 0)
  {
    long long v2 = xmmword_267888868;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267888868;
    *(void *)(a1 + 16) = unk_267888878;
  }
}

void sub_215A95668(_Unwind_Exception *a1)
{
}

void sub_215A95680(_Unwind_Exception *a1)
{
}

void sub_215A95698(_Unwind_Exception *a1)
{
}

std::string *sub_215A956B0()
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678888A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678888A0))
  {
    sub_215732BF4(v10, "viz::PackageData");
    uint64_t v1 = sub_2157B73A8();
    if (*((char *)v1 + 23) < 0)
    {
      sub_215738B0C(__dst, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      uint64_t v13 = *((void *)v1 + 2);
      *(_OWORD *)long long __dst = v2;
    }
    size_t v3 = sub_21598B2CC();
    if (*((char *)v3 + 23) < 0)
    {
      sub_215738B0C(&v14, *(void **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v4 = *v3;
      uint64_t v15 = *((void *)v3 + 2);
      long long v14 = v4;
    }
    long long v5 = sub_215995408();
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_215738B0C(&v16, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      std::string::size_type v17 = v5->__r_.__value_.__r.__words[2];
      long long v16 = v6;
    }
    *(_OWORD *)std::string __p = *(_OWORD *)"void";
    uint64_t v19 = 0x400000000000000;
    sub_21573A150(v9, (uint64_t)__dst, 4uLL);
    sub_215E19EAC(v10, (uint64_t *)v9, &stru_267888888, v7, v8);
    sub_2157352DC(v9);
    if (SHIBYTE(v19) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v17) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v15) & 0x80000000) == 0) {
          goto LABEL_16;
        }
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v16);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v14);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v11 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888888, &dword_21572C000);
        __cxa_guard_release(&qword_2678888A0);
        return &stru_267888888;
      }
LABEL_23:
      operator delete(v10[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_23;
  }
  return &stru_267888888;
}

void sub_215A958C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0) {
        operator delete(a13);
      }
      __cxa_guard_abort(&qword_2678888A0);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_215A9597C()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1) {
      JUMPOUT(0x215A95958);
    }
  }
}

void sub_215A959A4(long long *a1, uint64_t a2)
{
  int v5 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_215738B0C(&__dst, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __dst = *a1;
    uint64_t v4 = *((void *)a1 + 2);
  }
  int v5 = 1;
  p_dst = &__dst;
  uint64_t v7 = a2;
  v8[0] = (uint64_t)&__dst;
  v8[1] = a2;
  void v8[2] = a2;
  sub_2157492F0(v8, (uint64_t)&__dst);
  sub_215A94EB0();
}

void sub_215A95AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A95B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A95B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A95B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A95B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_215A95B50(uint64_t a1, uint64_t a2)
{
  v29[5] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v24);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v24);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v24);
  }
  uint64_t v6 = a2 + 16;
  int v7 = *(_DWORD *)(a2 + 192);
  if (v7 == 2)
  {
    sub_21598FB5C(v6, (uint64_t)v18);
  }
  else if (v7 == 1)
  {
    sub_2159CA9D4(v6, (uint64_t)v18);
  }
  else
  {
    if (v7) {
      sub_215742D4C();
    }
    sub_215995568(v6, (uint64_t)v18);
  }
  v15[0] = v24;
  v15[1] = &v25;
  _OWORD v15[2] = &v26;
  v15[3] = &v27;
  _OWORD v15[4] = &v28;
  long long v16 = (unsigned __int8 **)v29;
  v13[0] = v18;
  v13[1] = &v19;
  _OWORD v13[2] = &v20;
  char v13[3] = &v21;
  v13[4] = &v22;
  long long v14 = (unsigned __int8 **)&v23;
  if (sub_215AF0A90((uint64_t)&v17, v15, v13))
  {
    if (*((unsigned char *)v16 + 24) && *((unsigned char *)v14 + 24))
    {
      int8x16_t v8 = *v16;
      int8x16_t v9 = v16[1];
      long long v10 = *v14;
      if (v9 - *v16 == v14[1] - *v14)
      {
        if (v8 != v9)
        {
          while (sub_215AEF77C(v8, v10))
          {
            v8 += 96;
            v10 += 96;
            if (v8 == v9) {
              goto LABEL_23;
            }
          }
          goto LABEL_22;
        }
LABEL_23:
        BOOL v11 = sub_215998BEC((unsigned __int8 *)(a1 + 200), (unsigned __int8 *)(a2 + 200));
        goto LABEL_24;
      }
    }
    else if ((*((unsigned char *)v16 + 24) != 0) == (*((unsigned char *)v14 + 24) != 0))
    {
      goto LABEL_23;
    }
  }
LABEL_22:
  BOOL v11 = 0;
LABEL_24:
  sub_2157C6F18((uint64_t)v18);
  sub_2157C6F18((uint64_t)v24);
  return v11;
}

void sub_215A95D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A95D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_215A95D6C(void *a1, uint64_t a2)
{
  uint64_t v11 = a2;
  uint64_t v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4) {
    sub_215A95FA8((uint64_t)&v11, (uint64_t)v4);
  }
  uint64_t v11 = a2;
  int v5 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v5)
  {
    sub_215A96F8C(&v11, (uint64_t)v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v6) {
      sub_215A97CA0((uint64_t)&v11, (uint64_t)v6);
    }
    uint64_t v11 = a2;
    int v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v7)
    {
      sub_215A987A0(&v11, (uint64_t)v7);
    }
    else
    {
      uint64_t v11 = a2;
      int8x16_t v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v8)
      {
        sub_215A98E38(&v11, (uint64_t)v8);
      }
      else
      {
        uint64_t v9 = a2 + 16;
        int v10 = *(_DWORD *)(a2 + 192);
        if (v10 == 2)
        {
          uint64_t v11 = a1[1];
          sub_2159D04F0((int *)&v11, (uint64_t)a1, v9);
        }
        else if (v10 == 1)
        {
          uint64_t v11 = a1[1];
          sub_2159CFA30((int *)&v11, a1, v9);
        }
        else
        {
          if (v10) {
            sub_215742D4C();
          }
          uint64_t v11 = a1[1];
          sub_2159AAEAC((int *)&v11, a1, v9);
        }
        uint64_t v11 = a1[1];
        sub_215A99300((int *)&v11, a1, (long long *)(a2 + 200));
      }
    }
  }
}

void sub_215A95FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC088(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEE064(a2, &v11);
        sub_2159A439C(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC088(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v11);
    sub_2159CAD4C(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC088(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, &v11);
  sub_2159CB6C8(a2, v3);
}

void sub_215A962AC(uint64_t a1, long long *a2)
{
  v3[27] = *(void **)MEMORY[0x263EF8340];
  sub_215A96890((char *)v3, a2);
  sub_215A963F4(a1, (uint64_t)v3);
}

void sub_215A963DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A963F4(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "user_given_name";
    *(void *)(a1 + 80) = 15;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEE538(a1, a2);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "product_name";
    *(void *)(a1 + 80) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEE538(a1, a2 + 24);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v6 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "type";
    *(void *)(a1 + 80) = 4;
    if (!v6) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEE538(a1, a2 + 48);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "serial_number";
    *(void *)(a1 + 80) = 13;
    if (!v7) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEE538(a1, a2 + 72);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "os_build_version";
    *(void *)(a1 + 80) = 16;
    if (!v8) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEE538(a1, a2 + 96);
  uint64_t v9 = a2 + 120;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (int v10 = *(unsigned __int8 *)(a1 + 88),
        *(void *)(a1 + 72) = "os_product_version",
        *(void *)(a1 + 80) = 18,
        v10))
  {
    sub_215DEE538(a1, v9);
    int v11 = *(unsigned __int8 **)(a1 + 40);
    if (*v11 <= 1u) {
      goto LABEL_19;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = 1;
    sub_215DEE538(a1, v9);
    int v11 = *(unsigned __int8 **)(a1 + 40);
    if (*v11 <= 1u)
    {
LABEL_19:
      *(void *)(a1 + 72) = "process_id";
      uint64_t v12 = a1 + 72;
      long long v14 = (unsigned char *)(a1 + 88);
      int v13 = *(unsigned __int8 *)(a1 + 88);
      *(void *)(a1 + 80) = 10;
      uint64_t v15 = (void *)(a1 + 80);
      if (!v13) {
        unsigned char *v14 = 1;
      }
      goto LABEL_28;
    }
  }
  uint64_t v15 = (void *)(a1 + 80);
  uint64_t v12 = a1 + 72;
  long long v14 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && **(_DWORD **)v12 == *(_DWORD *)"version"
    && *(_DWORD *)(*(void *)v12 + 3) == *(_DWORD *)"sion")
  {
LABEL_29:
    if (*v11 <= 1u)
    {
      int v20 = *v14;
      *(void *)uint64_t v12 = "process_name";
      *uint64_t v15 = 12;
      if (!v20) {
        unsigned char *v14 = 1;
      }
    }
    sub_215DEE538(a1, a2 + 152);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      int v21 = *v14;
      *(void *)uint64_t v12 = "uuid";
      *uint64_t v15 = 4;
      if (!v21)
      {
        unsigned char *v14 = 1;
        sub_215A96B20();
      }
    }
    sub_215A96B20();
  }
LABEL_28:
  uint64_t v22 = (void **)*(int *)(a2 + 144);
  char v17 = (unsigned __int8 *)sub_215DEBCD0(a1);
  int v18 = *v17;
  unsigned __int8 *v17 = 5;
  uint64_t v19 = (void **)*((void *)v17 + 1);
  *((void *)v17 + 1) = v22;
  uint64_t v22 = v19;
  sub_215CEB204(&v22, v18);
  int v11 = *(unsigned __int8 **)(a1 + 40);
  goto LABEL_29;
}

void sub_215A96878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

char *sub_215A96890(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_215738B0C(__dst, *(void **)a2, *((void *)a2 + 1));
    int v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    int v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      *((void *)v5 + 2) = *((void *)a2 + 5);
      *(_OWORD *)int v5 = v6;
      goto LABEL_6;
    }
  }
  sub_215738B0C(v5, *((void **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  if (*((char *)a2 + 71) < 0)
  {
    sub_215738B0C(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v7;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_215738B0C(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v8;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_215738B0C(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v9;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_215738B0C(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v10;
  }
  *((_DWORD *)__dst + 36) = *((_DWORD *)a2 + 36);
  int v11 = __dst + 152;
  if (*((char *)a2 + 175) < 0)
  {
    sub_215738B0C(v11, *((void **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v12 = *(long long *)((char *)a2 + 152);
    *((void *)__dst + 21) = *((void *)a2 + 21);
    *(_OWORD *)int v11 = v12;
  }
  long long v13 = a2[11];
  long long v14 = a2[12];
  *((void *)__dst + 26) = *((void *)a2 + 26);
  *((_OWORD *)__dst + 11) = v13;
  *((_OWORD *)__dst + 12) = v14;
  return __dst;
}

void sub_215A96A34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_215A96B20()
{
  int v0 = 0;
  sub_2159651D4();
}

void sub_215A96BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A96C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A96C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A96C2C()
{
  int v0 = 0;
  sub_215A96D38();
}

void sub_215A96CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A96D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A96D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A96D38()
{
}

void sub_215A96F24(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215A96F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A96F8C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v7 + 40))
    {
      int v20 = (uint64_t *)(v7 + 16);
      sub_215E05FEC(&v20, 4u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v7 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC838(a2, v4, 4u);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
      int v20 = (uint64_t *)(v8 + 16);
      sub_215E05FEC(&v20, 5u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v8 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159CC718(a2, v4, 5u);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    uint64_t v6 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v6 + 40))
    {
      int v20 = (uint64_t *)(v6 + 16);
      sub_215E05FEC(&v20, 6u);
    }
    else
    {
      sub_215E0626C((uint64_t)&v20, v6 + 8);
    }
    sub_215E0076C(*(void *)(a2 + 24));
    sub_2159A6DFC(a2, v4, 6u);
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    int v20 = (uint64_t *)(v14 + 16);
    sub_215E05FEC(&v20, 2u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v20, v14 + 8);
  }
  sub_215E0076C(*(void *)(a2 + 24));
  sub_215A97210(a2, (long long *)(v3 + 200), 2u);
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
  sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
  size_t v17 = *(void *)(v15 + 48);
  if (v17) {
    memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
  }
  *(void *)(v15 + 48) = 0;
  uint64_t v18 = *(void *)(v15 + 80);
  uint64_t v19 = *(void *)(v15 + 88) - 8;
  *(void *)(v15 + 88) = v19;
  if (v18 == v19)
  {
    std::ostream::write();
    if (*(unsigned char *)(v15 + 40))
    {
      free(*(void **)(v15 + 24));
      *(unsigned char *)(v15 + 40) = 0;
    }
  }
}

void sub_215A97210(uint64_t a1, long long *a2, unsigned int a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  sub_215A96890((char *)v5, a2);
  sub_215A97358(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0) {
    goto LABEL_15;
  }
}

void sub_215A97340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A97358(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v6 + 40))
  {
    unsigned __int8 v50 = (uint64_t *)(v6 + 16);
    sub_215E07110((uint64_t)&v49, &v50, (const void **)a2);
    uint64_t v7 = (const void **)(a2 + 24);
    uint64_t v8 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v8 + 40)) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_215E0752C((uint64_t)&v50, v6 + 8, a2);
    uint64_t v7 = (const void **)(a2 + 24);
    uint64_t v8 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v8 + 40))
    {
LABEL_3:
      unsigned __int8 v50 = (uint64_t *)(v8 + 16);
      sub_215E07110((uint64_t)&v49, &v50, v7);
      uint64_t v9 = (const void **)(a2 + 48);
      uint64_t v10 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v10 + 40)) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  sub_215E0752C((uint64_t)&v50, v8 + 8, (uint64_t)v7);
  uint64_t v9 = (const void **)(a2 + 48);
  uint64_t v10 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v10 + 40))
  {
LABEL_4:
    unsigned __int8 v50 = (uint64_t *)(v10 + 16);
    sub_215E07110((uint64_t)&v49, &v50, v9);
    size_t v11 = (const void **)(a2 + 72);
    uint64_t v12 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v12 + 40)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  sub_215E0752C((uint64_t)&v50, v10 + 8, (uint64_t)v9);
  size_t v11 = (const void **)(a2 + 72);
  uint64_t v12 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v12 + 40))
  {
LABEL_5:
    unsigned __int8 v50 = (uint64_t *)(v12 + 16);
    sub_215E07110((uint64_t)&v49, &v50, v11);
    uint64_t v13 = (const void **)(a2 + 96);
    uint64_t v14 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v14 + 40)) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  sub_215E0752C((uint64_t)&v50, v12 + 8, (uint64_t)v11);
  uint64_t v13 = (const void **)(a2 + 96);
  uint64_t v14 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
LABEL_6:
    unsigned __int8 v50 = (uint64_t *)(v14 + 16);
    sub_215E07110((uint64_t)&v49, &v50, v13);
    uint64_t v15 = (const void **)(a2 + 120);
    uint64_t v16 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v16 + 40)) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  sub_215E0752C((uint64_t)&v50, v14 + 8, (uint64_t)v13);
  uint64_t v15 = (const void **)(a2 + 120);
  uint64_t v16 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v16 + 40))
  {
LABEL_7:
    unsigned __int8 v50 = (uint64_t *)(v16 + 16);
    sub_215E07110((uint64_t)&v49, &v50, v15);
    uint64_t v17 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v17 + 40)) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  sub_215E0752C((uint64_t)&v50, v16 + 8, (uint64_t)v15);
  uint64_t v17 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v17 + 40))
  {
LABEL_8:
    unsigned __int8 v50 = (uint64_t *)(v17 + 16);
    sub_215E05AC4(&v50, *(_DWORD *)(a2 + 144));
    char v18 = (const void **)(a2 + 152);
    uint64_t v19 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v19 + 40)) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  sub_215E05EEC();
  char v18 = (const void **)(a2 + 152);
  uint64_t v19 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v19 + 40))
  {
LABEL_9:
    unsigned __int8 v50 = (uint64_t *)(v19 + 16);
    sub_215E07110((uint64_t)&v49, &v50, v18);
    uint64_t v20 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v20 + 40)) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  sub_215E0752C((uint64_t)&v50, v19 + 8, (uint64_t)v18);
  uint64_t v20 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v20 + 40))
  {
LABEL_10:
    unsigned __int8 v50 = (uint64_t *)(v20 + 16);
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 176));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 177));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 178));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 179));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 180));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 181));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 182));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 183));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 184));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 185));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 186));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 187));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 188));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 189));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 190));
    sub_215E053CC(&v50, *(unsigned char *)(a2 + 191));
    if (a3 < 2) {
      return;
    }
    goto LABEL_54;
  }
LABEL_20:
  int v21 = *(char *)(a2 + 176);
  if (v21 < 0)
  {
    LOBYTE(v50) = -52;
    BYTE1(v50) = v21;
    std::ostream::write();
    int v22 = *(char *)(a2 + 177);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_22:
      LOBYTE(v50) = v22;
      std::ostream::write();
      int v23 = *(char *)(a2 + 178);
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_23;
      }
      goto LABEL_40;
    }
  }
  else
  {
    LOBYTE(v50) = *(unsigned char *)(a2 + 176);
    std::ostream::write();
    int v22 = *(char *)(a2 + 177);
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  LOBYTE(v50) = -52;
  BYTE1(v50) = v22;
  std::ostream::write();
  int v23 = *(char *)(a2 + 178);
  if ((v23 & 0x80000000) == 0)
  {
LABEL_23:
    LOBYTE(v50) = v23;
    std::ostream::write();
    int v24 = *(char *)(a2 + 179);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_41;
  }
LABEL_40:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v23;
  std::ostream::write();
  int v24 = *(char *)(a2 + 179);
  if ((v24 & 0x80000000) == 0)
  {
LABEL_24:
    LOBYTE(v50) = v24;
    std::ostream::write();
    int v25 = *(char *)(a2 + 180);
    if ((v25 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_42;
  }
LABEL_41:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v24;
  std::ostream::write();
  int v25 = *(char *)(a2 + 180);
  if ((v25 & 0x80000000) == 0)
  {
LABEL_25:
    LOBYTE(v50) = v25;
    std::ostream::write();
    int v26 = *(char *)(a2 + 181);
    if ((v26 & 0x80000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_43;
  }
LABEL_42:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v25;
  std::ostream::write();
  int v26 = *(char *)(a2 + 181);
  if ((v26 & 0x80000000) == 0)
  {
LABEL_26:
    LOBYTE(v50) = v26;
    std::ostream::write();
    int v27 = *(char *)(a2 + 182);
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_44;
  }
LABEL_43:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v26;
  std::ostream::write();
  int v27 = *(char *)(a2 + 182);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_27:
    LOBYTE(v50) = v27;
    std::ostream::write();
    int v28 = *(char *)(a2 + 183);
    if ((v28 & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_45;
  }
LABEL_44:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v27;
  std::ostream::write();
  int v28 = *(char *)(a2 + 183);
  if ((v28 & 0x80000000) == 0)
  {
LABEL_28:
    LOBYTE(v50) = v28;
    std::ostream::write();
    int v29 = *(char *)(a2 + 184);
    if ((v29 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_46;
  }
LABEL_45:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v28;
  std::ostream::write();
  int v29 = *(char *)(a2 + 184);
  if ((v29 & 0x80000000) == 0)
  {
LABEL_29:
    LOBYTE(v50) = v29;
    std::ostream::write();
    int v30 = *(char *)(a2 + 185);
    if ((v30 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_47;
  }
LABEL_46:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v29;
  std::ostream::write();
  int v30 = *(char *)(a2 + 185);
  if ((v30 & 0x80000000) == 0)
  {
LABEL_30:
    LOBYTE(v50) = v30;
    std::ostream::write();
    int v31 = *(char *)(a2 + 186);
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_48;
  }
LABEL_47:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v30;
  std::ostream::write();
  int v31 = *(char *)(a2 + 186);
  if ((v31 & 0x80000000) == 0)
  {
LABEL_31:
    LOBYTE(v50) = v31;
    std::ostream::write();
    int v32 = *(char *)(a2 + 187);
    if ((v32 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_49;
  }
LABEL_48:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v31;
  std::ostream::write();
  int v32 = *(char *)(a2 + 187);
  if ((v32 & 0x80000000) == 0)
  {
LABEL_32:
    LOBYTE(v50) = v32;
    std::ostream::write();
    int v33 = *(char *)(a2 + 188);
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_50;
  }
LABEL_49:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v32;
  std::ostream::write();
  int v33 = *(char *)(a2 + 188);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_33:
    LOBYTE(v50) = v33;
    std::ostream::write();
    int v34 = *(char *)(a2 + 189);
    if ((v34 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_51;
  }
LABEL_50:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v33;
  std::ostream::write();
  int v34 = *(char *)(a2 + 189);
  if ((v34 & 0x80000000) == 0)
  {
LABEL_34:
    LOBYTE(v50) = v34;
    std::ostream::write();
    int v35 = *(char *)(a2 + 190);
    if ((v35 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_52;
  }
LABEL_51:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v34;
  std::ostream::write();
  int v35 = *(char *)(a2 + 190);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_35:
    LOBYTE(v50) = v35;
    std::ostream::write();
    int v36 = *(char *)(a2 + 191);
    if ((v36 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_53;
  }
LABEL_52:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v35;
  std::ostream::write();
  int v36 = *(char *)(a2 + 191);
  if ((v36 & 0x80000000) == 0)
  {
LABEL_36:
    LOBYTE(v50) = v36;
    std::ostream::write();
    if (a3 < 2) {
      return;
    }
    goto LABEL_54;
  }
LABEL_53:
  LOBYTE(v50) = -52;
  BYTE1(v50) = v36;
  std::ostream::write();
  if (a3 < 2) {
    return;
  }
LABEL_54:
  uint64_t v37 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v37 + 40))
  {
    unsigned __int8 v50 = (uint64_t *)(v37 + 16);
    sub_215E05FEC(&v50, 1u);
    sub_215E0076C(*(void *)(a1 + 24));
    uint64_t v38 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v38 + 40)) {
      goto LABEL_56;
    }
  }
  else
  {
    sub_215E0626C((uint64_t)&v50, v37 + 8);
    sub_215E0076C(*(void *)(a1 + 24));
    uint64_t v38 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v38 + 40))
    {
LABEL_56:
      unsigned __int8 v50 = (uint64_t *)(v38 + 16);
      sub_215E05FEC(&v50, *(_DWORD *)(a2 + 192));
      uint64_t v39 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v39 + 40)) {
        goto LABEL_57;
      }
      goto LABEL_64;
    }
  }
  sub_215E0626C((uint64_t)&v50, v38 + 8);
  uint64_t v39 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v39 + 40))
  {
LABEL_57:
    unsigned __int8 v50 = (uint64_t *)(v39 + 16);
    sub_215E05FEC(&v50, *(_DWORD *)(a2 + 196));
    uint64_t v40 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v40 + 40)) {
      goto LABEL_58;
    }
    goto LABEL_65;
  }
LABEL_64:
  sub_215E0626C((uint64_t)&v50, v39 + 8);
  uint64_t v40 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v40 + 40))
  {
LABEL_58:
    unsigned __int8 v50 = (uint64_t *)(v40 + 16);
    sub_215E05FEC(&v50, *(_DWORD *)(a2 + 200));
    uint64_t v41 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v41 + 40)) {
      goto LABEL_59;
    }
    goto LABEL_66;
  }
LABEL_65:
  sub_215E0626C((uint64_t)&v50, v40 + 8);
  uint64_t v41 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v41 + 40))
  {
LABEL_59:
    unsigned __int8 v50 = (uint64_t *)(v41 + 16);
    sub_215E05FEC(&v50, *(_DWORD *)(a2 + 204));
    uint64_t v42 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v42 + 40)) {
      goto LABEL_60;
    }
LABEL_67:
    sub_215E0626C((uint64_t)&v50, v42 + 8);
    uint64_t v43 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v43 + 40)) {
      goto LABEL_61;
    }
LABEL_68:
    sub_215E0626C((uint64_t)&v50, v43 + 8);
    goto LABEL_69;
  }
LABEL_66:
  sub_215E0626C((uint64_t)&v50, v41 + 8);
  uint64_t v42 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v42 + 40)) {
    goto LABEL_67;
  }
LABEL_60:
  unsigned __int8 v50 = (uint64_t *)(v42 + 16);
  sub_215E05FEC(&v50, *(_DWORD *)(a2 + 208));
  uint64_t v43 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v43 + 40)) {
    goto LABEL_68;
  }
LABEL_61:
  unsigned __int8 v50 = (uint64_t *)(v43 + 16);
  sub_215E05FEC(&v50, *(_DWORD *)(a2 + 212));
LABEL_69:
  uint64_t v44 = *(void *)(a1 + 24);
  uint64_t v45 = *(void *)(*(void *)(v44 + 88) - 8);
  sub_215E001AC((uint64_t *)(v44 + 48), *(void *)(v44 + 16) - v45 - 9);
  size_t v46 = *(void *)(v44 + 48);
  if (v46) {
    memmove((void *)(*(void *)(v44 + 24) + v45), *(const void **)(v44 + 56), v46);
  }
  *(void *)(v44 + 48) = 0;
  uint64_t v47 = *(void *)(v44 + 80);
  uint64_t v48 = *(void *)(v44 + 88) - 8;
  *(void *)(v44 + 88) = v48;
  if (v47 == v48)
  {
    std::ostream::write();
    if (*(unsigned char *)(v44 + 40))
    {
      free(*(void **)(v44 + 24));
      *(unsigned char *)(v44 + 40) = 0;
    }
  }
}

void sub_215A97CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1 + 16;
  int v4 = *(_DWORD *)(*(void *)a1 + 192);
  if (v4 != 2)
  {
    if (v4 != 1)
    {
      if (!v4)
      {
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v5 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "info";
          *(void *)(a2 + 80) = 4;
          if (!v5) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEB804(a2);
        int v11 = 6;
        if (**(unsigned __int8 **)(a2 + 40) <= 1u)
        {
          int v6 = *(unsigned __int8 *)(a2 + 88);
          *(void *)(a2 + 72) = "version";
          *(void *)(a2 + 80) = 7;
          if (!v6) {
            *(unsigned char *)(a2 + 88) = 1;
          }
        }
        sub_215DEC344(a2, &v11);
        sub_2159A7F64(a2, v3);
      }
      sub_215742D4C();
    }
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "info";
      *(void *)(a2 + 80) = 4;
      if (!v9) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEB804(a2);
    int v11 = 5;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v10 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "version";
      *(void *)(a2 + 80) = 7;
      if (!v10) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v11);
    sub_2159CD210(a2, v3);
  }
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "info";
    *(void *)(a2 + 80) = 4;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEB804(a2);
  int v11 = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEC344(a2, &v11);
  sub_2159CD95C(a2, v3);
}

void sub_215A97FA4(uint64_t a1, long long *a2)
{
  v3[27] = *(void **)MEMORY[0x263EF8340];
  sub_215A96890((char *)v3, a2);
  sub_215A980EC(a1, (uint64_t)v3);
}

void sub_215A980D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A980EC(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "user_given_name";
    *(void *)(a1 + 80) = 15;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC818(a1, a2);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "product_name";
    *(void *)(a1 + 80) = 12;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC818(a1, a2 + 24);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v6 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "type";
    *(void *)(a1 + 80) = 4;
    if (!v6) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC818(a1, a2 + 48);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "serial_number";
    *(void *)(a1 + 80) = 13;
    if (!v7) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC818(a1, a2 + 72);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "os_build_version";
    *(void *)(a1 + 80) = 16;
    if (!v8) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC818(a1, a2 + 96);
  uint64_t v9 = a2 + 120;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (int v10 = *(unsigned __int8 *)(a1 + 88),
        *(void *)(a1 + 72) = "os_product_version",
        *(void *)(a1 + 80) = 18,
        v10))
  {
    sub_215DEC818(a1, v9);
    int v11 = *(unsigned __int8 **)(a1 + 40);
    if (*v11 <= 1u) {
      goto LABEL_19;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = 1;
    sub_215DEC818(a1, v9);
    int v11 = *(unsigned __int8 **)(a1 + 40);
    if (*v11 <= 1u)
    {
LABEL_19:
      *(void *)(a1 + 72) = "process_id";
      uint64_t v12 = a1 + 72;
      uint64_t v14 = (unsigned char *)(a1 + 88);
      int v13 = *(unsigned __int8 *)(a1 + 88);
      *(void *)(a1 + 80) = 10;
      uint64_t v15 = (void *)(a1 + 80);
      if (!v13) {
        unsigned char *v14 = 1;
      }
      goto LABEL_28;
    }
  }
  uint64_t v15 = (void *)(a1 + 80);
  uint64_t v12 = a1 + 72;
  uint64_t v14 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && **(_DWORD **)v12 == *(_DWORD *)"version"
    && *(_DWORD *)(*(void *)v12 + 3) == *(_DWORD *)"sion")
  {
LABEL_29:
    if (*v11 <= 1u)
    {
      int v20 = *v14;
      *(void *)uint64_t v12 = "process_name";
      *uint64_t v15 = 12;
      if (!v20) {
        unsigned char *v14 = 1;
      }
    }
    sub_215DEC818(a1, a2 + 152);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      int v21 = *v14;
      *(void *)uint64_t v12 = "uuid";
      *uint64_t v15 = 4;
      if (!v21)
      {
        unsigned char *v14 = 1;
        sub_215A98588();
      }
    }
    sub_215A98588();
  }
LABEL_28:
  uint64_t v22 = *(int *)(a2 + 144);
  uint64_t v17 = (unsigned __int8 *)sub_215DEB350(a1);
  int v18 = *v17;
  unsigned __int8 *v17 = 5;
  uint64_t v19 = *((void *)v17 + 1);
  *((void *)v17 + 1) = v22;
  uint64_t v22 = v19;
  sub_215CE9D14(&v22, v18);
  int v11 = *(unsigned __int8 **)(a1 + 40);
  goto LABEL_29;
}

void sub_215A98570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_215A98588()
{
  int v0 = 0;
  sub_2159651D4();
}

void sub_215A98650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A9866C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A98680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A98694()
{
  int v0 = 0;
  sub_215A96D38();
}

void sub_215A9875C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A98778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A9878C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215A987A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    if (*(void *)(a2 + 40))
    {
      int v8 = *(void **)(a2 + 24);
      char v20 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v8, (uint64_t)&v20, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CED28(a2, v4, 4u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5) {
        sub_215742D4C();
      }
      if (*(void *)(a2 + 40))
      {
        int v6 = *(void **)(a2 + 24);
        char v18 = *(unsigned char *)(a2 + 32);
        sub_215731D94(v6, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(a2 + 40);
      sub_2159A95B4(a2, v4, 6u);
      char v7 = *(unsigned char *)(a2 + 34);
      if (!*(void *)(a2 + 40)) {
        goto LABEL_16;
      }
LABEL_15:
      int v10 = *(void **)(a2 + 24);
      char v21 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v10, (uint64_t)&v21, 1);
      goto LABEL_16;
    }
    if (*(void *)(a2 + 40))
    {
      uint64_t v9 = *(void **)(a2 + 24);
      char v19 = *(unsigned char *)(a2 + 32);
      sub_215731D94(v9, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a2 + 40);
    sub_2159CE77C(a2, v4, 5u);
    char v7 = *(unsigned char *)(a2 + 34);
    if (*(void *)(a2 + 40)) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v11 = *(void **)(a2 + 24);
  char v22 = v7;
  sub_215731D94(v11, (uint64_t)&v22, 1);
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v12 + 1;
  if (v12 != -1)
  {
    int v13 = *(void **)(a2 + 24);
    char v23 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v13, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a2 + 40);
  sub_215A989BC(a2, (long long *)(v3 + 200), 2u);
  char v14 = *(unsigned char *)(a2 + 34);
  if (*(void *)(a2 + 40))
  {
    uint64_t v15 = *(void **)(a2 + 24);
    char v24 = *(unsigned char *)(a2 + 32);
    sub_215731D94(v15, (uint64_t)&v24, 1);
  }
  uint64_t v16 = *(void **)(a2 + 24);
  char v25 = v14;
  double result = sub_215731D94(v16, (uint64_t)&v25, 1);
  ++*(void *)(a2 + 40);
  return result;
}

void sub_215A989BC(uint64_t a1, long long *a2, unsigned int a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  sub_215A96890((char *)v5, a2);
  sub_215A98B04(a1, (unsigned __int8 *)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0) {
    goto LABEL_15;
  }
}

void sub_215A98AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_215A98B04(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  sub_215DF933C(a1, (uint64_t)a2);
  sub_215DF933C(a1, (uint64_t)(a2 + 24));
  sub_215DF933C(a1, (uint64_t)(a2 + 48));
  sub_215DF933C(a1, (uint64_t)(a2 + 72));
  sub_215DF933C(a1, (uint64_t)(a2 + 96));
  sub_215DF933C(a1, (uint64_t)(a2 + 120));
  if (*(void *)(a1 + 40))
  {
    char v6 = *(void **)(a1 + 24);
    char v24 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v6, (uint64_t)&v24, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  sub_215DF933C(a1, (uint64_t)(a2 + 152));
  sub_215DF927C(a1, a2 + 176);
  sub_215DF927C(a1, a2 + 177);
  sub_215DF927C(a1, a2 + 178);
  sub_215DF927C(a1, a2 + 179);
  sub_215DF927C(a1, a2 + 180);
  sub_215DF927C(a1, a2 + 181);
  sub_215DF927C(a1, a2 + 182);
  sub_215DF927C(a1, a2 + 183);
  sub_215DF927C(a1, a2 + 184);
  sub_215DF927C(a1, a2 + 185);
  sub_215DF927C(a1, a2 + 186);
  sub_215DF927C(a1, a2 + 187);
  sub_215DF927C(a1, a2 + 188);
  sub_215DF927C(a1, a2 + 189);
  sub_215DF927C(a1, a2 + 190);
  sub_215DF927C(a1, a2 + 191);
  if (a3 >= 2)
  {
    if (*(void *)(a1 + 40))
    {
      char v7 = *(void **)(a1 + 24);
      char v25 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v7, (uint64_t)&v25, 1);
    }
    std::ostream::operator<<();
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v8 + 1;
    if (v8 != -1)
    {
      uint64_t v9 = *(void **)(a1 + 24);
      char v26 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v9, (uint64_t)&v26, 1);
    }
    std::ostream::operator<<();
    uint64_t v10 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10 + 1;
    if (v10 != -1)
    {
      int v11 = *(void **)(a1 + 24);
      char v27 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v11, (uint64_t)&v27, 1);
    }
    std::ostream::operator<<();
    uint64_t v12 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12 + 1;
    if (v12 != -1)
    {
      int v13 = *(void **)(a1 + 24);
      char v28 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v13, (uint64_t)&v28, 1);
    }
    std::ostream::operator<<();
    uint64_t v14 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14 + 1;
    if (v14 != -1)
    {
      uint64_t v15 = *(void **)(a1 + 24);
      char v29 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v15, (uint64_t)&v29, 1);
    }
    std::ostream::operator<<();
    uint64_t v16 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v16 + 1;
    if (v16 != -1)
    {
      uint64_t v17 = *(void **)(a1 + 24);
      char v30 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v17, (uint64_t)&v30, 1);
    }
    std::ostream::operator<<();
    uint64_t v18 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v18 + 1;
    if (v18 != -1)
    {
      uint64_t v19 = *(void **)(a1 + 24);
      char v31 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v19, (uint64_t)&v31, 1);
    }
    std::ostream::operator<<();
    uint64_t v20 = *(void *)(a1 + 40);
    char v21 = *(unsigned char *)(a1 + 34);
    *(void *)(a1 + 40) = v20 + 1;
    if (v20 != -1)
    {
      char v22 = *(void **)(a1 + 24);
      char v32 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v22, (uint64_t)&v32, 1);
    }
    char v23 = *(void **)(a1 + 24);
    char v33 = v21;
    sub_215731D94(v23, (uint64_t)&v33, 1);
    ++*(void *)(a1 + 40);
  }
}

void sub_215A98E38(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 16;
  int v5 = *(_DWORD *)(*a1 + 192);
  if (v5 == 2)
  {
    int __src = 4;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
    unsigned int v7 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF4E8(a2, v4, v7);
  }
  else if (v5 == 1)
  {
    int __src = 5;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
    unsigned int v8 = __src;
    sub_215D02034((void *)a2);
    sub_2159CF3C8(a2, v4, v8);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    int __src = 6;
    sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
    unsigned int v6 = __src;
    sub_215D02034((void *)a2);
    sub_2159AA330(a2, v4, v6);
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v9 + 10) = *(void *)(a2 + 32) - v9 - 18;
  *(void *)(a2 + 56) -= 8;
  uint64_t v10 = (long long *)(v3 + 200);
  int __src = 2;
  sub_215D04A50(a2 + 24, *(char **)(a2 + 32), (char *)&__src, (char *)&v14, 4);
  unsigned int v11 = __src;
  sub_215D02034((void *)a2);
  sub_215A98FF4(a2, v10, v11);
  uint64_t v12 = *(void *)(*(void *)(a2 + 56) - 8) + *(void *)(a2 + 24);
  *(void *)(v12 + 10) = *(void *)(a2 + 32) - v12 - 18;
  *(void *)(a2 + 56) -= 8;
}

void sub_215A98FF4(uint64_t a1, long long *a2, unsigned int a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  sub_215A96890((char *)v5, a2);
  sub_215A9913C(a1, (char *)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0) {
    goto LABEL_15;
  }
}

void sub_215A99124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_215A9913C(uint64_t a1, char *a2, unsigned int a3)
{
  sub_215D023C8(a1, a2);
  sub_215D023C8(a1, a2 + 24);
  sub_215D023C8(a1, a2 + 48);
  sub_215D023C8(a1, a2 + 72);
  sub_215D023C8(a1, a2 + 96);
  sub_215D023C8(a1, a2 + 120);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), a2 + 144, a2 + 148, 4);
  sub_215D023C8(a1, a2 + 152);
  double result = sub_215D04A50(a1 + 24, *(char **)(a1 + 32), a2 + 176, a2 + 192, 16);
  if (a3 >= 2)
  {
    int __src = 1;
    sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v9, 4);
    sub_215D02034((void *)a1);
    sub_215D04A50(a1 + 24, *(char **)(a1 + 32), a2 + 192, a2 + 196, 4);
    sub_215D04A50(a1 + 24, *(char **)(a1 + 32), a2 + 196, a2 + 200, 4);
    sub_215D04A50(a1 + 24, *(char **)(a1 + 32), a2 + 200, a2 + 204, 4);
    sub_215D04A50(a1 + 24, *(char **)(a1 + 32), a2 + 204, a2 + 208, 4);
    sub_215D04A50(a1 + 24, *(char **)(a1 + 32), a2 + 208, a2 + 212, 4);
    double result = sub_215D04A50(a1 + 24, *(char **)(a1 + 32), a2 + 212, a2 + 216, 4);
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
    *(void *)(v7 + 10) = *(void *)(a1 + 32) - v7 - 18;
    *(void *)(a1 + 56) -= 8;
  }
  return result;
}

void sub_215A99300(int *a1, unsigned char *a2, long long *a3)
{
  int v7 = 2;
  (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v7);
  unsigned int v6 = v7;
  if (*a1 < 1
    || *a1 == 2 && (int v8 = 1, (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v8), *a1 <= 0))
  {
    sub_215A99448(a2, a3, v6);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    sub_215A99448(a2, a3, v6);
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

void sub_215A99448(unsigned char *a1, long long *a2, unsigned int a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  sub_215A96890((char *)v5, a2);
  sub_215A99590(a1, (uint64_t)v5, a3);
  if (v18 < 0)
  {
    operator delete(__p);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v14 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if ((v14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(v13);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(v11);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_6:
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v9);
  if ((v8 & 0x80000000) == 0)
  {
LABEL_7:
    if ((v6 & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v5[0]);
    return;
  }
LABEL_14:
  operator delete(v7);
  if (v6 < 0) {
    goto LABEL_15;
  }
}