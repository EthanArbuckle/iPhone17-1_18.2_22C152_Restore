void sub_215986AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  char a72;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  void *v76;

  if (a41 && a40 < 0) {
    operator delete(__p);
  }
  if (v72) {
    std::__shared_weak_count::__release_weak(v72);
  }
  sub_215733368((uint64_t)&a72);
  std::__shared_weak_count::~__shared_weak_count(v73);
  operator delete(v76);
  sub_215733368(v74 - 152);
  if (v72)
  {
    std::__shared_weak_count::__release_weak(v72);
    sub_215733368((uint64_t)&a54);
    sub_215986E24(&a69);
    _Unwind_Resume(a1);
  }
  sub_215733368((uint64_t)&a54);
  sub_215986E24(&a69);
  _Unwind_Resume(a1);
}

void **sub_215986E24(void **a1)
{
  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_215986ED8(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 32))(v3);
  if (v12 || !v11) {
    return a1 + 8;
  }
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_11:
      operator delete(v6);
      if (!v5) {
        return a1 + 8;
      }
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0) {
      goto LABEL_11;
    }
  }
LABEL_7:
  if (!v5) {
    return a1 + 8;
  }
LABEL_8:
  if ((v4 & 0x80000000) == 0) {
    return a1 + 8;
  }
  operator delete(v3[2]);
  return a1 + 8;
}

uint64_t sub_215986FA4(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)(a1 - 8) + 32))(v3);
  if (v12 || !v11) {
    return a1;
  }
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_11:
      operator delete(v6);
      if (!v5) {
        return a1;
      }
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0) {
      goto LABEL_11;
    }
  }
LABEL_7:
  if (!v5) {
    return a1;
  }
LABEL_8:
  if ((v4 & 0x80000000) == 0) {
    return a1;
  }
  operator delete(v3[2]);
  return a1;
}

void sub_215987070(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 24))(&v12, a2);
  if (!v12) {
    goto LABEL_21;
  }
  v3 = *(uint64_t **)(a1 + 1120);
  char v4 = (std::mutex *)v3[4];
  if (v4)
  {
    std::mutex::lock((std::mutex *)v3[4]);
    char v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        uint64_t v7 = *v3;
        std::mutex::unlock(v4);
        if (!v7) {
          goto LABEL_10;
        }
LABEL_19:
        if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        goto LABEL_21;
      }
      std::mutex::unlock(v4);
    }
    else
    {
      v6 = 0;
      std::mutex::unlock(v4);
    }
  }
  else
  {
    v8 = (std::__shared_weak_count *)v3[1];
    if (!v8 || (char v9 = std::__shared_weak_count::lock(v8)) == 0)
    {
      if (!*(unsigned char *)(a1 + 1112)) {
        goto LABEL_17;
      }
      goto LABEL_21;
    }
    v6 = v9;
    if (*v3) {
      goto LABEL_19;
    }
  }
LABEL_10:
  int v10 = *(unsigned __int8 *)(a1 + 1112);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (!v10) {
LABEL_17:
  }
    sub_215AB96D4();
LABEL_21:
  char v11 = v13;
  if (v13)
  {
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_2159876A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28)
{
  sub_21573AE84((uint64_t)&a27, a28);
  sub_215733368((uint64_t)&a12);
  std::mutex::unlock(v28);
  sub_215733368((uint64_t)&a10);
  sub_215733368(v29 - 96);
  _Unwind_Resume(a1);
}

void sub_215987740(_Unwind_Exception *a1)
{
  sub_215733368(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_215987754(uint64_t a1, uint64_t a2)
{
}

BOOL sub_215987764(unsigned __int8 *a1, unsigned __int8 *a2)
{
  v2 = a2;
  int v4 = a2[40];
  if (a1[40]) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (v4 | a1[40]) {
      return 0;
    }
  }
  else
  {
    uint64_t v6 = a1[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = a1[23];
    }
    else {
      uint64_t v7 = *((void *)a1 + 1);
    }
    uint64_t v8 = a2[23];
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *((void *)a2 + 1);
    }
    if (v7 != v8) {
      return 0;
    }
    if (v9 < 0) {
      a2 = *(unsigned __int8 **)a2;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
        return 0;
      }
    }
    else if (a1[23])
    {
      int v10 = a1;
      while (*v10 == *a2)
      {
        ++v10;
        ++a2;
        if (!--v6) {
          goto LABEL_23;
        }
      }
      return 0;
    }
LABEL_23:
    if (*((unsigned __int16 *)a1 + 12) != *((unsigned __int16 *)v2 + 12) || *((_DWORD *)a1 + 8) != *((_DWORD *)v2 + 8)) {
      return 0;
    }
  }
  if (a1[48] != v2[48]
    || (a1[50] == 0) == (v2[50] != 0)
    || (a1[64] != 0) != (v2[64] != 0)
    || a1[64] && *((void *)a1 + 7) != *((void *)v2 + 7))
  {
    return 0;
  }
  int v12 = a1[128];
  int v13 = v2[128];
  if (!a1[128] || !v2[128] || (int v12 = a1[120], v13 = v2[120], !a1[120]) || !v2[120])
  {
    if ((v12 != 0) == (v13 != 0)) {
      goto LABEL_40;
    }
    return 0;
  }
  if (*((void *)a1 + 14) != *((void *)v2 + 14)) {
    return 0;
  }
LABEL_40:
  if (a1[104]) {
    return 0;
  }
  return v2[104] == 0;
}

void sub_215987910(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *a1 = &unk_26C673DD8;
  a1[1] = &unk_26C673E38;
  LOBYTE(v18[0]) = 0;
  char v20 = 0;
  if (*(unsigned char *)(a3 + 32))
  {
    uint64_t v10 = *(void *)(a3 + 24);
    if (v10)
    {
      if (v10 == a3)
      {
        v19 = v18;
        (*(void (**)(uint64_t, void *))(*(void *)a3 + 24))(a3, v18);
      }
      else
      {
        v19 = *(void **)(a3 + 24);
        *(void *)(a3 + 24) = 0;
      }
    }
    else
    {
      v19 = 0;
    }
    char v20 = 1;
  }
  LOBYTE(v15[0]) = 0;
  char v17 = 0;
  if (*(unsigned char *)(a4 + 32))
  {
    uint64_t v11 = *(void *)(a4 + 24);
    if (v11)
    {
      if (v11 == a4)
      {
        v16 = v15;
        (*(void (**)(uint64_t, void *))(*(void *)a4 + 24))(a4, v15);
      }
      else
      {
        v16 = *(void **)(a4 + 24);
        *(void *)(a4 + 24) = 0;
      }
    }
    else
    {
      v16 = 0;
    }
    char v17 = 1;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    uint64_t v12 = *(void *)(*(void *)(a2 + 56) + 8);
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
  }
  sub_2159806F8((uint64_t)v14, a2, (uint64_t)v18, (uint64_t)v15, v12, v13, a5, a6, 0);
}

void sub_215987BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215987C3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  *a1 = &unk_26C673DD8;
  a1[1] = &unk_26C673E38;
  LOBYTE(v14[0]) = 0;
  char v16 = 0;
  if (*(unsigned char *)(a3 + 32))
  {
    uint64_t v6 = *(void *)(a3 + 24);
    if (v6)
    {
      if (v6 == a3)
      {
        v15 = v14;
        (*(void (**)(uint64_t, void *))(*(void *)a3 + 24))(a3, v14);
      }
      else
      {
        v15 = *(void **)(a3 + 24);
        *(void *)(a3 + 24) = 0;
      }
    }
    else
    {
      v15 = 0;
    }
    char v16 = 1;
  }
  LOBYTE(v11[0]) = 0;
  char v13 = 0;
  if (*(unsigned char *)(a4 + 32))
  {
    uint64_t v7 = *(void *)(a4 + 24);
    if (v7)
    {
      if (v7 == a4)
      {
        uint64_t v12 = v11;
        (*(void (**)(uint64_t, void *))(*(void *)a4 + 24))(a4, v11);
      }
      else
      {
        uint64_t v12 = *(void **)(a4 + 24);
        *(void *)(a4 + 24) = 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    char v13 = 1;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    uint64_t v8 = *(void *)(*(void *)(a2 + 56) + 8);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  sub_2159806F8((uint64_t)v10, a2, (uint64_t)v14, (uint64_t)v11, v8, v9, 0, 0, 1);
}

void sub_215987F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_215987F5C(void *a1)
{
  *a1 = &unk_26C673DD8;
  v2 = (std::__shared_weak_count *)a1[3];
  a1[1] = &unk_26C673E38;
  a1[2] = 0;
  a1[3] = 0;
  if (!v2) {
    return a1;
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_215988060(void *a1)
{
  *(a1 - 1) = &unk_26C673DD8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  *a1 = &unk_26C673E38;
  a1[1] = 0;
  a1[2] = 0;
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v3 = (std::__shared_weak_count *)a1[2];
    if (v3)
    {
      if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void sub_21598815C(void *a1)
{
  *a1 = &unk_26C673DD8;
  v2 = (std::__shared_weak_count *)a1[3];
  a1[1] = &unk_26C673E38;
  a1[2] = 0;
  a1[3] = 0;
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    v3 = (std::__shared_weak_count *)a1[3];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  JUMPOUT(0x2166C4D20);
}

void sub_215988270(void *a1)
{
  *(a1 - 1) = &unk_26C673DD8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  *a1 = &unk_26C673E38;
  a1[1] = 0;
  a1[2] = 0;
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v3 = (std::__shared_weak_count *)a1[2];
    if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_21598838C(uint64_t a1)
{
  return *(void *)(a1 + 16) + 8;
}

uint64_t sub_215988398(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t sub_2159883C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t sub_2159883E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t sub_215988410(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t sub_215988438(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 32))(v3);
  if (v12 || !v11) {
    return a1 + 8;
  }
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_11:
      operator delete(v6);
      if (!v5) {
        return a1 + 8;
      }
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0) {
      goto LABEL_11;
    }
  }
LABEL_7:
  if (!v5) {
    return a1 + 8;
  }
LABEL_8:
  if ((v4 & 0x80000000) == 0) {
    return a1 + 8;
  }
  operator delete(v3[2]);
  return a1 + 8;
}

uint64_t sub_215988508(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 32))(v3);
  if (v12 || !v11) {
    return a1;
  }
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_11:
      operator delete(v6);
      if (!v5) {
        return a1;
      }
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0) {
      goto LABEL_11;
    }
  }
LABEL_7:
  if (!v5) {
    return a1;
  }
LABEL_8:
  if ((v4 & 0x80000000) == 0) {
    return a1;
  }
  operator delete(v3[2]);
  return a1;
}

void sub_2159885D8(uint64_t a1, uint64_t a2)
{
}

void sub_2159885E0(uint64_t a1, uint64_t a2)
{
}

void *sub_2159885F0(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  v3 = sub_215731D94(a1, (uint64_t)"Client<", 7);
  uint64_t v17 = a2;
  int v23 = 0;
  sub_215748F40((uint64_t)&v21, (uint64_t)v22, &v17);
  if (v23 == -1) {
    sub_215742D4C();
  }
  uint64_t v21 = &v20;
  ((void (*)(void **__return_ptr, char **, unsigned char *))off_26C674038[v23])(__p, &v21, v22);
  if (v23 != -1) {
    ((void (*)(char **, unsigned char *))off_26C673FF0[v23])(&v21, v22);
  }
  if ((v19 & 0x80u) == 0) {
    char v4 = __p;
  }
  else {
    char v4 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v5 = v19;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  uint64_t v6 = sub_215731D94(v3, (uint64_t)v4, v5);
  char v7 = sub_215731D94(v6, (uint64_t)">{", 2);
  uint64_t v8 = *(unsigned char **)(a2 + 16);
  char v9 = (unsigned __int8 *)(*(uint64_t (**)(unsigned char *))(*(void *)v8 + 24))(v8);
  sub_215E08B14(v9, v22);
  char v10 = sub_215731D94(v7, (uint64_t)v22, 36);
  char v11 = sub_215731D94(v10, (uint64_t)", tcp/ip ", 9);
  if (v8[144]) {
    char v12 = "enabled";
  }
  else {
    char v12 = "disabled";
  }
  if (v8[144]) {
    uint64_t v13 = 7;
  }
  else {
    uint64_t v13 = 8;
  }
  v14 = sub_215731D94(v11, (uint64_t)v12, v13);
  v15 = sub_215731D94(v14, (uint64_t)"}", 1);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_2159887A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159887FC(void *a1)
{
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v3 = (std::mutex *)a1[4];
    a1[4] = 0;
    if (!v3) {
      goto LABEL_5;
    }
  }
  else
  {
    v3 = (std::mutex *)a1[4];
    a1[4] = 0;
    if (!v3)
    {
LABEL_5:
      char v4 = (std::__shared_weak_count *)a1[3];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
        uint64_t v5 = (std::__shared_weak_count *)a1[1];
        if (!v5)
        {
LABEL_9:
          JUMPOUT(0x2166C4D20);
        }
      }
      else
      {
        uint64_t v5 = (std::__shared_weak_count *)a1[1];
        if (!v5) {
          goto LABEL_9;
        }
      }
      std::__shared_weak_count::__release_weak(v5);
      goto LABEL_9;
    }
  }
  std::mutex::~mutex(v3);
  MEMORY[0x2166C4D20]();
  goto LABEL_5;
}

void sub_215988920()
{
}

void sub_215988934(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(uint64_t ***)(a1 + 8);
  uint64_t v2 = (uint64_t)v1[1];
  int v3 = *(_DWORD *)(v2 + 32);
  long long v6 = *(_OWORD *)(v2 + 112);
  uint64_t v7 = *(void *)(v2 + 128);
  uint64_t v4 = **v1;
  v12[0] = &unk_26C673F30;
  v12[1] = v4;
  v12[3] = v12;
  char v13 = 1;
  v11[0] = 0;
  v11[1] = 0;
  *(void *)&long long v10 = v4;
  *((void *)&v10 + 1) = 1;
  int v9 = v3;
  uint64_t v8 = &unk_26C6790C8;
  uint64_t v5 = operator new(0x110uLL);
  v5[1] = 0;
  v5[2] = 0;
  void *v5 = &unk_26C679F70;
  sub_215B0A458((uint64_t)(v5 + 3), &v9, v2, (uint64_t)v11, &v6, &v10, (uint64_t)v12);
}

void sub_215988BA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  if (*(unsigned char *)(v2 - 48))
  {
    uint64_t v5 = *(void *)(v2 - 56);
    if (v5 == v2 - 80)
    {
      (*(void (**)(uint64_t))(*(void *)(v2 - 80) + 32))(v2 - 80);
      _Unwind_Resume(a1);
    }
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 40))(v5);
    }
  }
  _Unwind_Resume(a1);
}

void sub_215988C3C()
{
}

void *sub_215988C50(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C673F30;
  result[1] = v3;
  return result;
}

uint64_t sub_215988C98(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C673F30;
  a2[1] = v2;
  return result;
}

void sub_215988CC4(uint64_t a1, uint64_t *a2)
{
  sub_215984B30(*(void *)(a1 + 8), a2, (uint64_t)&v3);
  if (v13 || !v12) {
    return;
  }
  if (!v11) {
    goto LABEL_7;
  }
  if (v10 < 0)
  {
    operator delete(__p);
    if ((v8 & 0x80000000) == 0)
    {
LABEL_7:
      if (!v6) {
        return;
      }
      goto LABEL_8;
    }
  }
  else if ((v8 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v7);
  if (!v6) {
    return;
  }
LABEL_8:
  if (v5 < 0)
  {
    uint64_t v2 = v4;
    operator delete(v2);
  }
}

uint64_t sub_215988D68(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3viz6Client4Impl15CommandReceiverE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3kit3viz6Client4Impl15CommandReceiverE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3viz6Client4Impl15CommandReceiverE")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3viz6Client4Impl15CommandReceiverE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_215988DD8()
{
  return &unk_26C673FA0;
}

uint64_t sub_215988DE4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v4 = a1 + 24;
  char v5 = (long long *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
  {
    if (!*(unsigned char *)(a1 + 48))
    {
      long long v10 = *v5;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)uint64_t v4 = v10;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(void *)char v5 = 0;
      *(unsigned char *)(a1 + 48) = 1;
      uint64_t v7 = a1 + 56;
      uint64_t v8 = a2 + 56;
      int v9 = *(unsigned __int8 *)(a1 + 200);
      if (v9 == *(unsigned __int8 *)(a2 + 200)) {
        goto LABEL_12;
      }
LABEL_15:
      if (v9)
      {
        sub_2159890F0(v7);
      }
      else
      {
        long long v11 = *(_OWORD *)v8;
        *(void *)(v7 + 16) = *(void *)(v8 + 16);
        *(_OWORD *)uint64_t v7 = v11;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = 0;
        long long v12 = *(_OWORD *)(a2 + 80);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = v12;
        *(void *)(a2 + 88) = 0;
        *(void *)(a2 + 96) = 0;
        *(void *)(a2 + 80) = 0;
        long long v13 = *(_OWORD *)(a2 + 104);
        *(void *)(a1 + 120) = *(void *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = v13;
        *(void *)(a2 + 112) = 0;
        *(void *)(a2 + 120) = 0;
        *(void *)(a2 + 104) = 0;
        long long v14 = *(_OWORD *)(a2 + 128);
        *(void *)(a1 + 144) = *(void *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = v14;
        *(void *)(a2 + 128) = 0;
        *(void *)(a2 + 136) = 0;
        *(void *)(a2 + 144) = 0;
        long long v15 = *(_OWORD *)(a2 + 152);
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = v15;
        *(void *)(a2 + 152) = 0;
        *(void *)(a2 + 160) = 0;
        *(void *)(a2 + 168) = 0;
        long long v16 = *(_OWORD *)(a2 + 176);
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
        *(_OWORD *)(a1 + 176) = v16;
        *(void *)(a2 + 176) = 0;
        *(void *)(a2 + 184) = 0;
        *(void *)(a2 + 192) = 0;
        *(unsigned char *)(a1 + 200) = 1;
      }
      goto LABEL_18;
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)v4);
    }
    *(unsigned char *)(a1 + 48) = 0;
LABEL_11:
    uint64_t v7 = a1 + 56;
    uint64_t v8 = a2 + 56;
    int v9 = *(unsigned __int8 *)(a1 + 200);
    if (v9 == *(unsigned __int8 *)(a2 + 200)) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 48)) {
    goto LABEL_11;
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)v4);
  }
  long long v6 = *v5;
  *(void *)(v4 + 16) = *((void *)v5 + 2);
  *(_OWORD *)uint64_t v4 = v6;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  uint64_t v7 = a1 + 56;
  uint64_t v8 = a2 + 56;
  int v9 = *(unsigned __int8 *)(a1 + 200);
  if (v9 != *(unsigned __int8 *)(a2 + 200)) {
    goto LABEL_15;
  }
LABEL_12:
  if (v9) {
    sub_215988FAC(v7, (long long *)v8);
  }
LABEL_18:
  long long v17 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v17;
  return a1;
}

uint64_t sub_215988FAC(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  char v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)char v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  uint64_t v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  int v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)int v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  long long v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  long long v12 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)long long v11 = v12;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  long long v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v13);
  }
  long long v14 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)long long v13 = v14;
  *((unsigned char *)a2 + 143) = 0;
  *((unsigned char *)a2 + 120) = 0;
  return a1;
}

void sub_2159890F0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0)
    {
      operator delete(*(void **)(a1 + 120));
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
          goto LABEL_5;
        }
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
LABEL_8:
        *(unsigned char *)(a1 + 144) = 0;
        return;
      }
LABEL_15:
      operator delete(*(void **)a1);
      goto LABEL_8;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
}

uint64_t sub_2159891A8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v4 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
    }
    else
    {
      long long v5 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  if (*(unsigned char *)(a2 + 200))
  {
    sub_2157B6F84((char *)(a1 + 56), (long long *)(a2 + 56));
    *(unsigned char *)(a1 + 200) = 1;
  }
  long long v6 = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v6;
  return a1;
}

void sub_215989268(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21598929C(uint64_t a1, unsigned int a2, long long *a3)
{
  long long v6 = sub_215AB78E8();
  sub_215741BFC(__dst, a3);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (!v18) {
    return a1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  if (v11)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(void *)(a1 + 32) = v10;
    __dst[1] = 0;
    uint64_t v10 = 0;
    __dst[0] = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  if (!v17)
  {
    *(unsigned char *)(a1 + 112) = 1;
    if (!v11) {
      return a1;
    }
    goto LABEL_13;
  }
  uint64_t v7 = v14;
  *(void *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v12;
  v12[0] = 0;
  v12[1] = 0;
  *(void *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(void *)(a1 + 96) = v16;
  __p[1] = 0;
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  __p[0] = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(unsigned char *)(a1 + 112) = 1;
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(v12[0]);
    if (!v11) {
      return a1;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if (!v11) {
    return a1;
  }
LABEL_13:
  if ((SHIBYTE(v10) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(__dst[0]);
  return a1;
}

void *sub_2159893FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_215989490()
{
}

void sub_2159894A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v7 = 0;
  LOWORD(__p) = 0;
  char v9 = 0;
  uint64_t v2 = *(_OWORD **)(v1 + 8);
  long long v3 = v2[1];
  v4[0] = *v2;
  v4[1] = v3;
  int v5 = 1;
  char v6 = 1;
  sub_2159897A8((uint64_t)v4);
}

void sub_2159896B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,uint64_t a36)
{
  if (!*(unsigned char *)(v36 - 40) && *(unsigned char *)(v36 - 48))
  {
    if (*(unsigned char *)(v36 - 56))
    {
      if (*(char *)(v36 - 57) < 0) {
        operator delete(*(void **)(v36 - 80));
      }
      if (*(char *)(v36 - 89) < 0) {
        operator delete(*(void **)(v36 - 112));
      }
    }
    if (*(unsigned char *)(v36 - 120))
    {
      if (*(char *)(v36 - 121) < 0) {
        operator delete(*(void **)(v36 - 144));
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159897A8(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = mach_continuous_time();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890888, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_267890888))
    {
      mach_timebase_info(info);
      LODWORD(v4) = info[0].numer;
      LODWORD(v5) = info[0].denom;
      *(double *)&qword_267890880 = (double)v4 / (double)v5;
      __cxa_guard_release(&qword_267890888);
    }
  }
  unint64_t v10 = llround(*(double *)&qword_267890880 * (double)v2);
  uint64_t v11 = 2;
  char v12 = 0;
  char v13 = 0;
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  char v17 = 0;
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  char v21 = 0;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&info[0].numer = *(_OWORD *)a1;
  long long v7 = v3;
  long long v8 = *(_OWORD *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  operator new();
}

void sub_2159899BC(_Unwind_Exception *a1)
{
}

void sub_2159899D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  sub_2157C6F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215989A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MEMORY[0x2166C4D20](v11, 0x10B3C40A30D6217);
  sub_2157C6F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215989A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2157C6F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_215989A54(void *a1, uint64_t a2, uint64_t a3)
{
  char v6 = (char *)operator new(0x50uLL);
  long long v7 = (std::__shared_weak_count *)v6;
  *((void *)v6 + 1) = 0;
  long long v8 = (atomic_ullong *)(v6 + 8);
  *((void *)v6 + 2) = 0;
  *(void *)char v6 = &unk_26C6580D8;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
  *((void *)v6 + 5) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  v6[48] = 0;
  v6[72] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    *((_OWORD *)v6 + 3) = *(_OWORD *)(a2 + 24);
    *((void *)v6 + 8) = *(void *)(a2 + 40);
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 24) = 0;
    v6[72] = 1;
  }
  uint64_t v9 = *(atomic_ullong **)(a3 + 16);
  uint64_t v11 = *(void *)(a3 + 8);
  char v12 = (std::__shared_weak_count *)v9;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *a1 = v6 + 24;
  a1[1] = v6;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v6 + 1, 1uLL, memory_order_relaxed);
  a1[2] = &unk_26C678D20;
  a1[3] = v11;
  a1[4] = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(v9 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      (*(void (**)(atomic_ullong *))(*v9 + 16))(v9);
      std::__shared_weak_count::__release_weak(v12);
      if (atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL)) {
        return a1;
      }
      goto LABEL_6;
    }
  }
  if (!atomic_fetch_add(v8, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_6:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void *sub_215989C20(void *a1)
{
  *a1 = &unk_26C6744E0;
  sub_2157C6F18((uint64_t)(a1 + 8));
  return a1;
}

void sub_215989C64(void *a1)
{
  *a1 = &unk_26C6744E0;
  sub_2157C6F18((uint64_t)(a1 + 8));

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_215989CC8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_215989CD0(uint64_t a1, void *lpsrc)
{
  unint64_t v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D60, (const struct __class_type_info *)&unk_26C6744A0, 0);
  if (!v4) {
    return 0;
  }
  if ((void *)a1 == lpsrc) {
    return 1;
  }
  uint64_t v5 = (*(unsigned char *)(a1 + 56) != 0) == (v4[56] != 0);
  if (*(unsigned char *)(a1 + 56) && v4[56])
  {
    uint64_t v6 = *(unsigned int *)(a1 + 48);
    int v7 = *((_DWORD *)v4 + 12);
    BOOL v8 = v7 == v6;
    BOOL v9 = v7 == -1;
    LODWORD(v5) = v7 == -1;
    if (v9) {
      BOOL v8 = 0;
    }
    if (v6 == -1) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v8;
    }
    if (v6 != -1 && v8)
    {
      char v12 = &v11;
      return ((uint64_t (*)(char **, uint64_t, unsigned char *))off_26C674050[v6])(&v12, a1 + 8, v4 + 8);
    }
  }
  return v5;
}

void sub_215989DFC()
{
}

void sub_215989E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215989EB4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888540))
  {
    v0 = sub_21598ACC0();
    uint64_t v1 = *((void *)v0 + 1);
    if (*((char *)v0 + 23) >= 0)
    {
      uint64_t v2 = *((unsigned __int8 *)v0 + 23);
    }
    else
    {
      v0 = *(long long **)v0;
      uint64_t v2 = v1;
    }
    sub_2157C6A10((char *)v0, v2, "::", 2, 0, (uint64_t)&v4);
    if (*(char *)(v5 - 1) < 0)
    {
      sub_215738B0C(&xmmword_267888528, *(void **)(v5 - 24), *(void *)(v5 - 16));
    }
    else
    {
      long long v3 = *(_OWORD *)(v5 - 24);
      qword_267888538 = *(void *)(v5 - 8);
      xmmword_267888528 = v3;
    }
    sub_2157352DC(&v4);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888528, &dword_21572C000);
    __cxa_guard_release(&qword_267888540);
  }
  sub_21598B4E8(&xmmword_267888528, (uint64_t)"{");
}

void sub_215989FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_215989FF0(_Unwind_Exception *a1)
{
}

void sub_21598A008(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 2;
}

double sub_21598A034@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_215B0CD98(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void *sub_21598A08C(void *a1)
{
  *a1 = &unk_26C6744E0;
  sub_2157C6F18((uint64_t)(a1 + 8));
  return a1;
}

void sub_21598A0D0(void *a1)
{
  *a1 = &unk_26C6744E0;
  sub_2157C6F18((uint64_t)(a1 + 8));

  JUMPOUT(0x2166C4D20);
}

void sub_21598A134()
{
  v0 = sub_21598A714();
  sub_21598A290(v0, (uint64_t)"{");
}

void sub_21598A190()
{
  int v0 = 0;
  sub_21598A4C0();
}

void sub_21598A22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_26C673FF0[a13])(v13 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21598A264(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_21598A290(long long *a1, uint64_t a2)
{
  int v5 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_215738B0C(&__dst, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __dst = *a1;
    uint64_t v4 = *((void *)a1 + 2);
  }
  int v5 = 1;
  p_dst = &__dst;
  uint64_t v7 = a2;
  v8[0] = (uint64_t)&__dst;
  v8[1] = a2;
  v8[2] = a2;
  sub_2157492F0(v8, (uint64_t)&__dst);
  sub_21598A4C0();
}

void sub_21598A430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598A448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598A45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598A470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598A484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598A498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598A4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598A4C0()
{
}

void sub_21598A6AC(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_21598A6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_21598A714()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888420, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888420))
  {
    return &xmmword_267888408;
  }
  uint64_t v1 = sub_21598A7FC();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267888408, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267888418 = v1->__r_.__value_.__r.__words[2];
    xmmword_267888408 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888408, &dword_21572C000);
  __cxa_guard_release(&qword_267888420);
  return &xmmword_267888408;
}

void sub_21598A7E4(_Unwind_Exception *a1)
{
}

std::string *sub_21598A7FC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888440, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888440))
  {
    return &stru_267888428;
  }
  sub_21598AAB0((uint64_t)__p);
  sub_21598A8F8(__p, &stru_267888428);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888428, &dword_21572C000);
  __cxa_guard_release(&qword_267888440);
  return &stru_267888428;
}

void sub_21598A8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267888440);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267888440);
  _Unwind_Resume(a1);
}

void sub_21598A8F8(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_21598ACC0();
  if (*((char *)v4 + 23) < 0)
  {
    sub_215738B0C(__dst, *(void **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    uint64_t v16 = *((void *)v4 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  uint64_t v6 = sub_2157C6008();
  if (*((char *)v6 + 23) < 0)
  {
    sub_215738B0C(&v17, *(void **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    uint64_t v18 = *((void *)v6 + 2);
    long long v17 = v7;
  }
  sub_21573A150(&__p, (uint64_t)__dst, 2uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, a2, v8, v9);
  unint64_t v10 = (void **)__p;
  if (__p)
  {
    char v11 = v14;
    char v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      char v12 = __p;
    }
    char v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0) {
    goto LABEL_19;
  }
}

void sub_21598AA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21598AAB0(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678884C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678884C0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::Sync>]", qword_2678884A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678884A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678884C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678884E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678884E0))
  {
    size_t v3 = sub_215747D98(qword_2678884A8, "<", 0);
    sub_215747C90(qword_2678884A8, 0, v3, qword_2678884C8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678884C8, &dword_21572C000);
    __cxa_guard_release(&qword_2678884E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888500, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888500))
  {
    sub_215E19DF4((uint64_t)qword_2678884C8, (uint64_t)&xmmword_2678884E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678884E8, &dword_21572C000);
    __cxa_guard_release(&qword_267888500);
  }
  if (byte_2678884FF < 0)
  {
    long long v2 = xmmword_2678884E8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2678884E8;
    *(void *)(a1 + 16) = unk_2678884F8;
  }
}

void sub_21598AC78(_Unwind_Exception *a1)
{
}

void sub_21598AC90(_Unwind_Exception *a1)
{
}

void sub_21598ACA8(_Unwind_Exception *a1)
{
}

long long *sub_21598ACC0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888460, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888460))
  {
    return &xmmword_267888448;
  }
  uint64_t v1 = (char *)sub_21598ADA8();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_267888448, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267888458 = *((void *)v1 + 2);
    xmmword_267888448 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888448, &dword_21572C000);
  __cxa_guard_release(&qword_267888460);
  return &xmmword_267888448;
}

void sub_21598AD90(_Unwind_Exception *a1)
{
}

void *sub_21598ADA8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888480, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888480))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Sync]", qword_267888468);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888468, &dword_21572C000);
    __cxa_guard_release(&qword_267888480);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678884A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678884A0))
  {
    return &unk_267888488;
  }
  sub_215E19DF4((uint64_t)qword_267888468, (uint64_t)&unk_267888488);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267888488, &dword_21572C000);
  __cxa_guard_release(&qword_2678884A0);
  return &unk_267888488;
}

void sub_21598AEAC(_Unwind_Exception *a1)
{
}

void sub_21598AEC4(_Unwind_Exception *a1)
{
}

BOOL sub_21598AEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 != *(void *)a3) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a3 + 16);
  if (*(unsigned char *)(a2 + 16)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    if ((*(unsigned char *)(a2 + 16) != 0) == (v3 != 0)) {
      goto LABEL_10;
    }
    return 0;
  }
  if (*(void *)(a2 + 8) != *(void *)(a3 + 8)) {
    return 0;
  }
LABEL_10:
  BOOL result = (*(unsigned char *)(a2 + 32) != 0) == (*(unsigned char *)(a3 + 32) != 0);
  if (*(unsigned char *)(a2 + 32))
  {
    if (*(unsigned char *)(a3 + 32)) {
      return *(void *)(a2 + 24) == *(void *)(a3 + 24);
    }
  }
  return result;
}

BOOL sub_21598AF6C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*a2 != *a3 || *((void *)a2 + 1) != *((void *)a3 + 1)) {
    return 0;
  }
  if (a2[24]) {
    BOOL v3 = a3[24] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return (a2[24] != 0) == (a3[24] != 0);
  }
  else {
    return *((void *)a2 + 2) == *((void *)a3 + 2);
  }
}

std::string *sub_21598AFD8()
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888520, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888520))
  {
    sub_215732BF4(v10, "viz::PackageData");
    uint64_t v1 = sub_21598ACC0();
    if (*((char *)v1 + 23) < 0)
    {
      sub_215738B0C(__dst, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      uint64_t v13 = *((void *)v1 + 2);
      *(_OWORD *)long long __dst = v2;
    }
    BOOL v3 = sub_21598B2CC();
    if (*((char *)v3 + 23) < 0)
    {
      sub_215738B0C(&v14, *(void **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v4 = *v3;
      uint64_t v15 = *((void *)v3 + 2);
      long long v14 = v4;
    }
    long long v5 = sub_2157E7974();
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_215738B0C(&v16, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      std::string::size_type v17 = v5->__r_.__value_.__r.__words[2];
      long long v16 = v6;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    uint64_t v19 = 0x400000000000000;
    sub_21573A150(v9, (uint64_t)__dst, 4uLL);
    sub_215E19EAC(v10, (uint64_t *)v9, &stru_267888508, v7, v8);
    sub_2157352DC(v9);
    if (SHIBYTE(v19) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v17) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v15) & 0x80000000) == 0) {
          goto LABEL_16;
        }
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v16);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v14);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v11 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888508, &dword_21572C000);
        __cxa_guard_release(&qword_267888520);
        return &stru_267888508;
      }
LABEL_23:
      operator delete(v10[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_23;
  }
  return &stru_267888508;
}

void sub_21598B1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0) {
        operator delete(a13);
      }
      __cxa_guard_abort(&qword_267888520);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_21598B2A4()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1) {
      JUMPOUT(0x21598B280);
    }
  }
}

long long *sub_21598B2CC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678882E0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678882E0))
  {
    return &xmmword_2678882C8;
  }
  uint64_t v1 = (char *)sub_21598B3B4();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_2678882C8, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_2678882D8 = *((void *)v1 + 2);
    xmmword_2678882C8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678882C8, &dword_21572C000);
  __cxa_guard_release(&qword_2678882E0);
  return &xmmword_2678882C8;
}

void sub_21598B39C(_Unwind_Exception *a1)
{
}

void *sub_21598B3B4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888300, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888300))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::NetworkPackage]", qword_2678882E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678882E8, &dword_21572C000);
    __cxa_guard_release(&qword_267888300);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888320, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888320))
  {
    return &unk_267888308;
  }
  sub_215E19DF4((uint64_t)qword_2678882E8, (uint64_t)&unk_267888308);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267888308, &dword_21572C000);
  __cxa_guard_release(&qword_267888320);
  return &unk_267888308;
}

void sub_21598B4B8(_Unwind_Exception *a1)
{
}

void sub_21598B4D0(_Unwind_Exception *a1)
{
}

void sub_21598B4E8(long long *a1, uint64_t a2)
{
  int v5 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_215738B0C(&__dst, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __dst = *a1;
    uint64_t v4 = *((void *)a1 + 2);
  }
  int v5 = 1;
  p_dst = &__dst;
  uint64_t v7 = a2;
  v8[0] = (uint64_t)&__dst;
  v8[1] = a2;
  v8[2] = a2;
  sub_2157492F0(v8, (uint64_t)&__dst);
  sub_21598A4C0();
}

void sub_21598B62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598B644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598B658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598B66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598B680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598B698()
{
}

void *sub_21598B6AC(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C674070;
  result[1] = v3;
  return result;
}

uint64_t sub_21598B6F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C674070;
  a2[1] = v2;
  return result;
}

uint64_t sub_21598B720(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 440))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 400);
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = *(void *)(v1 + 392);
        if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          if (v5)
          {
LABEL_6:
            unsigned int v6 = 0;
            goto LABEL_9;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v4);
          if (v5) {
            goto LABEL_6;
          }
        }
      }
    }
  }
  unsigned int v6 = 1;
LABEL_9:
  if (*(unsigned char *)(v1 + 144)) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t sub_21598B7C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl10000"
                     "00000EEEEEEEENK3$_0clEvEUlvE0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioI"
                                "Ll1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *sub_21598B838()
{
  return &unk_26C6740D0;
}

char *sub_21598B844(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v7) {
    unint64_t v7 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  if (v7 > 0xAAAAAAAAAAAAAAALL) {
    sub_215738AD8();
  }
  uint64_t v10 = 24 * v7;
  char v11 = (char *)operator new(24 * v7);
  char v12 = &v11[24 * v6];
  *(void *)char v12 = &unk_26C678D20;
  *((void *)v12 + 1) = a2;
  *((void *)v12 + 2) = a3;
  if (a3)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
  }
  uint64_t v13 = &v11[v10];
  long long v14 = v12 + 24;
  if (v5 == v4)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      long long v16 = &v12[v15];
      *((void *)v16 - 3) = &unk_26C678D20;
      std::string::size_type v17 = &v5[v15];
      *((_OWORD *)v16 - 1) = *(_OWORD *)&v5[v15 - 16];
      *((void *)v17 - 2) = 0;
      *((void *)v17 - 1) = 0;
      v15 -= 24;
    }
    while (&v5[v15] != v4);
    uint64_t v4 = *a1;
    uint64_t v18 = a1[1];
    *a1 = &v12[v15];
    a1[1] = v14;
    for (a1[2] = v13; v18 != v4; v18 -= 24)
    {
      uint64_t v19 = (std::__shared_weak_count *)*((void *)v18 - 1);
      if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  if (v4) {
    operator delete(v4);
  }
  return v14;
}

void sub_21598BA30()
{
}

uint64_t sub_21598BA44(uint64_t a1)
{
  uint64_t v1 = *(void *)(**(void **)(a1 + 8) + 64);
  if (!v1) {
    sub_21573D7DC();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *sub_21598BAA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
    uint64_t v5 = *(void ***)(a2 + 8);
    if (*(unsigned char *)(v4 + 40)) {
      goto LABEL_3;
    }
LABEL_7:
    sub_215731D94(*v5, (uint64_t)"nullopt", 7);
    int8x16_t v9 = (unsigned char *)a1[1];
    if (*(unsigned char *)a2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_215731D94(**(void ***)(a2 + 8), (uint64_t)",", 1);
  *(unsigned char *)a2 = 0;
  uint64_t v5 = *(void ***)(a2 + 8);
  if (!*(unsigned char *)(v4 + 40)) {
    goto LABEL_7;
  }
LABEL_3:
  sub_215731D94(*v5, (uint64_t)"{", 1);
  sub_215CF6964(*v5, v4);
  sub_215731D94(*v5, (uint64_t)",", 1);
  int v6 = *(_DWORD *)(v4 + 32);
  if (v6 == 1)
  {
    unint64_t v7 = "Memory";
    uint64_t v8 = 6;
  }
  else if (v6)
  {
    unint64_t v7 = "invalid network type";
    uint64_t v8 = 20;
  }
  else
  {
    unint64_t v7 = "Socket";
    uint64_t v8 = 6;
  }
  sub_215731D94(*v5, (uint64_t)v7, v8);
  sub_215731D94(*v5, (uint64_t)"}", 1);
  int8x16_t v9 = (unsigned char *)a1[1];
  if (!*(unsigned char *)a2) {
LABEL_12:
  }
    sub_215731D94(**(void ***)(a2 + 8), (uint64_t)",", 1);
LABEL_13:
  *(unsigned char *)a2 = 0;
  uint64_t v10 = *(void ***)(a2 + 8);
  sub_215731D94(*v10, (uint64_t)"{", 1);
  sub_21598E6E4(*v10, v9);
  sub_215731D94(*v10, (uint64_t)",", 1);
  if (v9[2])
  {
    char v11 = "kDeferFirstSync";
    uint64_t v12 = 15;
  }
  else
  {
    char v11 = "nullopt";
    uint64_t v12 = 7;
  }
  sub_215731D94(*v10, (uint64_t)v11, v12);
  sub_215731D94(*v10, (uint64_t)"}", 1);
  uint64_t v13 = a1[2];
  if (*(unsigned char *)a2)
  {
    *(unsigned char *)a2 = 0;
    long long v14 = *(void ***)(a2 + 8);
    if (*(unsigned char *)(v13 + 8)) {
      goto LABEL_18;
    }
  }
  else
  {
    sub_215731D94(**(void ***)(a2 + 8), (uint64_t)",", 1);
    *(unsigned char *)a2 = 0;
    long long v14 = *(void ***)(a2 + 8);
    if (*(unsigned char *)(v13 + 8))
    {
LABEL_18:
      sub_215B1C80C(*v14, *(void *)v13);
      uint64_t v15 = a1[3];
      if (*(unsigned char *)a2) {
        goto LABEL_19;
      }
      goto LABEL_31;
    }
  }
  sub_215731D94(*v14, (uint64_t)"nullopt", 7);
  uint64_t v15 = a1[3];
  if (*(unsigned char *)a2)
  {
LABEL_19:
    *(unsigned char *)a2 = 0;
    long long v16 = *(void ***)(a2 + 8);
    if (*(unsigned char *)(v15 + 32)) {
      goto LABEL_20;
    }
LABEL_32:
    sub_215731D94(*v16, (uint64_t)"nullopt", 7);
    uint64_t v20 = a1[4];
    if (*(unsigned char *)a2) {
      goto LABEL_27;
    }
LABEL_33:
    sub_215731D94(**(void ***)(a2 + 8), (uint64_t)",", 1);
    *(unsigned char *)a2 = 0;
    char v21 = *(void ***)(a2 + 8);
    if (*(unsigned char *)(v20 + 16)) {
      goto LABEL_28;
    }
    goto LABEL_34;
  }
LABEL_31:
  sub_215731D94(**(void ***)(a2 + 8), (uint64_t)",", 1);
  *(unsigned char *)a2 = 0;
  long long v16 = *(void ***)(a2 + 8);
  if (!*(unsigned char *)(v15 + 32)) {
    goto LABEL_32;
  }
LABEL_20:
  uint64_t v17 = *(void *)(v15 + 24);
  if (v17) {
    uint64_t v18 = "f(){*}";
  }
  else {
    uint64_t v18 = "f(){nullptr}";
  }
  if (v17) {
    uint64_t v19 = 6;
  }
  else {
    uint64_t v19 = 12;
  }
  sub_215731D94(*v16, (uint64_t)v18, v19);
  uint64_t v20 = a1[4];
  if (!*(unsigned char *)a2) {
    goto LABEL_33;
  }
LABEL_27:
  *(unsigned char *)a2 = 0;
  char v21 = *(void ***)(a2 + 8);
  if (*(unsigned char *)(v20 + 16))
  {
LABEL_28:
    sub_215731D94(*v21, (uint64_t)"{", 1);
    v25[0] = 1;
    v26 = v21;
    v27 = &v24;
    sub_2158B3AA8((uint64_t)v25, v20);
    return sub_215731D94(*v21, (uint64_t)"}", 1);
  }
LABEL_34:
  int v23 = *v21;

  return sub_215731D94(v23, (uint64_t)"nullopt", 7);
}

void sub_21598BE28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C674130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21598BE48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C674130;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_21598BE9C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21598BEC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C674180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21598BEE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C674180;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_21598BF38(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21598BF60(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x9C0uLL);
  uint64_t v5 = v4 + 2496;
  __p = v4;
  uint64_t v13 = v4 + 2496;
  memcpy(v4, a1, 0x9C0uLL);
  uint64_t v12 = v5;
  sub_215E07C8C((int **)&__p, &v9);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  unint64_t v7 = &unk_26C686198;
  long long v8 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_21598C0DC((void *)a2, (uint64_t)&v7);
  *(void *)(a2 + 2504) = &unk_26C686198;
  *(_OWORD *)(a2 + 2512) = v8;
  long long v8 = 0uLL;
  int v6 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_21598C0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_215E07DE4((uint64_t)va);
  sub_215E07DE4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_21598C0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21598C0DC(void *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  unint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not a seed sequence");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  sub_21598C204(v3, __src, &v9);
  BOOL result = memcpy(a1, __src, 0x9C0uLL);
  a1[312] = 0;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    uint64_t v6 = 4;
    while (!*(_DWORD *)((char *)a1 + v6))
    {
      v6 += 4;
      if (v6 == 2496)
      {
        *(_DWORD *)a1 = 0x80000000;
        return result;
      }
    }
  }
  return result;
}

void sub_21598C1EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_21598C204(unint64_t result, _DWORD *__b, unsigned char *a3)
{
  if (__b == (_DWORD *)a3) {
    return result;
  }
  char v4 = (int **)result;
  uint64_t v5 = a3 - (unsigned char *)__b;
  if (a3 - (unsigned char *)__b >= 1) {
    memset(__b, 139, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  }
  unint64_t v6 = v5 >> 2;
  long long v8 = *v4;
  unint64_t v7 = v4[1];
  uint64_t v9 = (char *)v7 - (char *)*v4;
  uint64_t v10 = v9 >> 2;
  uint64_t v11 = 11;
  uint64_t v12 = 7;
  uint64_t v13 = 5;
  uint64_t v14 = 3;
  unint64_t v15 = (v5 >> 2) - 1;
  if ((unint64_t)v5 <= 0x18) {
    uint64_t v14 = v15 >> 1;
  }
  if ((unint64_t)v5 <= 0x98) {
    uint64_t v13 = v14;
  }
  if ((unint64_t)v5 <= 0x10C) {
    uint64_t v12 = v13;
  }
  if ((unint64_t)v5 <= 0x9B8) {
    uint64_t v11 = v12;
  }
  unint64_t v16 = (unint64_t)v9 >> 2;
  unint64_t v17 = (v6 - v11) >> 1;
  unint64_t v18 = v17 + v11;
  unint64_t v19 = v10 + 1;
  if (v10 + 1 > v6) {
    unint64_t v20 = v10 + 1;
  }
  else {
    unint64_t v20 = v5 >> 2;
  }
  unsigned int v21 = __b[v17];
  unsigned int v22 = 1664525 * (*__b ^ __b[v15] ^ v21 ^ ((*__b ^ __b[v15] ^ v21) >> 27));
  __b[v17] = v22 + v21;
  int v23 = v22 + v16;
  __b[v18] += v23;
  *__b = v23;
  unint64_t v24 = v17 % v6;
  BOOL result = v18 / v6;
  unint64_t v25 = v18 % v6;
  if (v7 == v8)
  {
    uint64_t v26 = 0;
    if (v19 >= v6) {
      goto LABEL_49;
    }
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 2;
    if (v19 > 2) {
      uint64_t v27 = v10 + 1;
    }
    BOOL result = v27 - 1;
    do
    {
      if (v26 + 1 == v6) {
        uint64_t v26 = 0;
      }
      else {
        ++v26;
      }
      if (v15 + 1 == v6) {
        unint64_t v15 = 0;
      }
      else {
        ++v15;
      }
      if (v24 + 1 == v6) {
        unint64_t v24 = 0;
      }
      else {
        ++v24;
      }
      int v28 = __b[v24];
      unsigned int v29 = __b[v26] ^ __b[v15] ^ v28;
      int v30 = 1664525 * (v29 ^ (v29 >> 27));
      __b[v24] = v30 + v28;
      int v32 = *v8++;
      int v31 = v32;
      if (v25 + 1 == v6) {
        unint64_t v25 = 0;
      }
      else {
        ++v25;
      }
      int v33 = v31 + v26 + v30;
      __b[v25] += v33;
      __b[v26] = v33;
      --result;
    }
    while (result);
    if (v19 >= v6) {
      goto LABEL_49;
    }
  }
  unint64_t v34 = ~v10 + v20;
  do
  {
    if (v26 + 1 == v6) {
      uint64_t v26 = 0;
    }
    else {
      ++v26;
    }
    if (v15 + 1 == v6) {
      unint64_t v15 = 0;
    }
    else {
      ++v15;
    }
    if (v24 + 1 == v6) {
      unint64_t v24 = 0;
    }
    else {
      ++v24;
    }
    unsigned int v35 = __b[v24];
    if (v25 + 1 == v6) {
      unint64_t v25 = 0;
    }
    else {
      ++v25;
    }
    unsigned int v36 = 1664525 * (__b[v26] ^ __b[v15] ^ v35 ^ ((__b[v26] ^ __b[v15] ^ v35) >> 27));
    __b[v24] = v36 + v35;
    int v37 = v36 + v26;
    BOOL result = 4 * v25;
    __b[v25] += v37;
    __b[v26] = v37;
    --v34;
  }
  while (v34);
LABEL_49:
  if (v20 < v20 + v6)
  {
    uint64_t v38 = v5 >> 2;
    do
    {
      if (v26 + 1 == v6) {
        uint64_t v26 = 0;
      }
      else {
        ++v26;
      }
      if (v15 + 1 == v6) {
        unint64_t v15 = 0;
      }
      else {
        ++v15;
      }
      if (v24 + 1 == v6) {
        unint64_t v24 = 0;
      }
      else {
        ++v24;
      }
      if (v25 + 1 == v6) {
        unint64_t v25 = 0;
      }
      else {
        ++v25;
      }
      int v39 = __b[v24];
      unsigned int v40 = v39 + __b[v26] + __b[v15];
      int v41 = 1566083941 * (v40 ^ (v40 >> 27));
      __b[v24] = v41 ^ v39;
      unsigned int v42 = v41 - v26;
      BOOL result = v42 ^ __b[v25];
      __b[v25] = result;
      __b[v26] = v42;
      --v38;
    }
    while (v38);
  }
  return result;
}

void sub_21598C4F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C674310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21598C518(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C674310;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_21598C56C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 2544);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

unsigned int *sub_21598C5EC(unsigned int *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(*a2 + 2496);
  unint64_t v4 = (v3 + 1) % 0x270uLL;
  uint64_t v5 = 4 * v4;
  unsigned int v6 = *(_DWORD *)(*a2 + 4 * ((v3 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(*a2 + 4 * v4) & 0x7FFFFFFE | *(_DWORD *)(*a2 + 4 * v3) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(*a2 + 4 * v4) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(*a2 + 4 * v3) = v6;
  unsigned int v7 = ((v6 ^ (v6 >> 11)) << 7) & 0x9D2C5680 ^ v6 ^ (v6 >> 11);
  void *result = (v7 << 15) & 0xEFC60000 ^ v7 ^ (((v7 << 15) & 0xEFC60000 ^ v7) >> 18);
  if (v4 == 623) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = v4 + 1;
  }
  if (v4 >= 0xE3) {
    uint64_t v9 = -227;
  }
  else {
    uint64_t v9 = 397;
  }
  unsigned int v10 = *(_DWORD *)(v2 + 4 * (v9 + v4)) ^ ((*(_DWORD *)(v2 + 4 * v8) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v4) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v8) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + v5) = v10;
  unsigned int v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
  result[1] = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
  unint64_t v12 = (v8 + 1) % 0x270;
  unsigned int v13 = *(_DWORD *)(v2 + 4 * ((v8 + 397) % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v12) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v12) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 4 * v8) = v13;
  unsigned int v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
  result[2] = (v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18);
  if (v12 == 623) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v12 + 1;
  }
  if (v12 >= 0xE3) {
    uint64_t v16 = -227;
  }
  else {
    uint64_t v16 = 397;
  }
  unsigned int v17 = *(_DWORD *)(v2 + 4 * (v16 + v12)) ^ ((*(_DWORD *)(v2 + 4 * v15) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v12) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v15) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 4 * v12) = v17;
  unsigned int v18 = ((v17 ^ (v17 >> 11)) << 7) & 0x9D2C5680 ^ v17 ^ (v17 >> 11);
  result[3] = (v18 << 15) & 0xEFC60000 ^ v18 ^ (((v18 << 15) & 0xEFC60000 ^ v18) >> 18);
  *(void *)(v2 + 2496) = v15;
  return result;
}

void sub_21598C7E0()
{
}

void sub_21598C7F4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  unint64_t v4 = *(std::__shared_weak_count **)(v3 + 8);
  unint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 32);
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(v2 + 712);
  if (!v6) {
    sub_21573D7DC();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v6 + 48))(v10);
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    unsigned int v7 = v8;
    if (!v8) {
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v7 = v8;
    if (!v8) {
      goto LABEL_10;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if (v19) {
      return;
    }
    goto LABEL_11;
  }
LABEL_10:
  if (v19) {
    return;
  }
LABEL_11:
  sub_215983BB0(v1[2], (uint64_t)v10);
  if (!v19 && v18)
  {
    if (v17)
    {
      if (v16 < 0) {
        operator delete(__p);
      }
      if (v14 < 0) {
        operator delete(v13);
      }
    }
    if (v12)
    {
      if (v11 < 0) {
        operator delete(v10[2]);
      }
    }
  }
}

void sub_21598C9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45)
{
  if (!(_BYTE)a43 && (_BYTE)a39)
  {
    if (a37)
    {
      if (a36 < 0) {
        operator delete(__p);
      }
      if (a29 < 0) {
        operator delete(a24);
      }
    }
    if (a23)
    {
      if (a22 < 0)
      {
        operator delete(a17);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21598CA88()
{
}

void sub_21598CA9C(uint64_t a1)
{
}

void sub_21598CAB0()
{
}

void sub_21598CAC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = 0;
  LOWORD(__p) = 0;
  char v4 = 0;
  sub_21598CDA8(*(void **)(v1 + 8));
}

void sub_21598CCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,char a49,int a50,char a51)
{
  if (!a51 && a49)
  {
    if (a47)
    {
      if (a46 < 0) {
        operator delete(__p);
      }
      if (a39 < 0) {
        operator delete(a34);
      }
    }
    if (a33)
    {
      if (a32 < 0) {
        operator delete(a27);
      }
    }
  }
  _Unwind_Resume(a1);
}

void sub_21598CDA8(void *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = mach_continuous_time();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267890888, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_267890888))
    {
      mach_timebase_info(&info);
      LODWORD(v3) = info.numer;
      LODWORD(v4) = info.denom;
      *(double *)&qword_267890880 = (double)v3 / (double)v4;
      __cxa_guard_release(&qword_267890888);
    }
  }
  unint64_t v6 = llround(*(double *)&qword_267890880 * (double)v2);
  uint64_t v7 = 2;
  char v8 = 0;
  char v9 = 0;
  char v10 = 0;
  char v11 = 0;
  char v12 = 0;
  char v13 = 0;
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  char v17 = 0;
  sub_21598CF14((uint64_t)&info, a1);
}

void sub_21598CEE4(_Unwind_Exception *a1)
{
}

void sub_21598CEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2157C6F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598CF14(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  uint64_t v3 = a2[1];
  unint64_t v4 = (uint64_t *)*a2;
  uint64_t v5 = v3;
  if (a2[2])
  {
    *(void *)(v3 + 16) = &v5;
    *a2 = v2;
    void *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    unint64_t v4 = &v5;
  }
  operator new();
}

void sub_21598D080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  sub_21573AE84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_21598D0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_21573AE84(v12, *(char **)(v11 + 16));
  MEMORY[0x2166C4D20](v11, 0x10B3C407C1CE13ALL);
  sub_21573AE84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_21598D0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_21598D114(uint64_t a1)
{
  *(void *)a1 = &unk_26C674410;
  sub_2157C6F18(a1 + 32);
  sub_21573AE84(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void sub_21598D164(uint64_t a1)
{
  *(void *)a1 = &unk_26C674410;
  sub_2157C6F18(a1 + 32);
  sub_21573AE84(a1 + 8, *(char **)(a1 + 16));

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_21598D1D4(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_21598D1DC(char *a1, char *lpsrc)
{
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D60, (const struct __class_type_info *)&unk_26C6743D0, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      uint64_t v5 = (void *)(result + 8);
      unint64_t v6 = a1 + 8;
      return sub_2157BDB2C((uint64_t)&v6, &v5);
    }
  }
  return result;
}

void sub_21598D28C()
{
}

void sub_21598D328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21598D344()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888400, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888400))
  {
    uint64_t v0 = sub_2157BA2F0();
    uint64_t v1 = *((void *)v0 + 1);
    if (*((char *)v0 + 23) >= 0)
    {
      uint64_t v2 = *((unsigned __int8 *)v0 + 23);
    }
    else
    {
      uint64_t v0 = *(long long **)v0;
      uint64_t v2 = v1;
    }
    sub_2157C6A10((char *)v0, v2, "::", 2, 0, (uint64_t)&v4);
    if (*(char *)(v5 - 1) < 0)
    {
      sub_215738B0C(&xmmword_2678883E8, *(void **)(v5 - 24), *(void *)(v5 - 16));
    }
    else
    {
      long long v3 = *(_OWORD *)(v5 - 24);
      qword_2678883F8 = *(void *)(v5 - 8);
      xmmword_2678883E8 = v3;
    }
    sub_2157352DC(&v4);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678883E8, &dword_21572C000);
    __cxa_guard_release(&qword_267888400);
  }
  sub_21598E48C(&xmmword_2678883E8, (uint64_t)"{");
}

void sub_21598D460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_21598D480(_Unwind_Exception *a1)
{
}

void sub_21598D498(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 3;
}

double sub_21598D4C4@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_215B0D3A4(a1, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_21598D51C(uint64_t a1)
{
  *(void *)a1 = &unk_26C674410;
  sub_2157C6F18(a1 + 32);
  sub_21573AE84(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void sub_21598D56C(uint64_t a1)
{
  *(void *)a1 = &unk_26C674410;
  sub_2157C6F18(a1 + 32);
  sub_21573AE84(a1 + 8, *(char **)(a1 + 16));

  JUMPOUT(0x2166C4D20);
}

void sub_21598D5DC()
{
  uint64_t v0 = sub_21598DBEC();
  sub_21598D738(v0, (uint64_t)"{");
}

void sub_21598D638()
{
  int v0 = 0;
  sub_21598D968();
}

void sub_21598D6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  if (a13 != -1) {
    ((void (*)(uint64_t, char *))off_26C673FF0[a13])(v13 - 17, &a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21598D70C(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_21598D738(long long *a1, uint64_t a2)
{
  int v5 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_215738B0C(&__dst, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __dst = *a1;
    uint64_t v4 = *((void *)a1 + 2);
  }
  int v5 = 1;
  p_dst = &__dst;
  uint64_t v7 = a2;
  v8[0] = (uint64_t)&__dst;
  v8[1] = a2;
  v8[2] = a2;
  sub_2157492F0(v8, (uint64_t)&__dst);
  sub_21598D968();
}

void sub_21598D8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598D8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598D904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598D918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598D940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598D954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598D968()
{
}

void sub_21598DB84(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_21598DBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_21598DBEC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888340, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888340))
  {
    return &xmmword_267888328;
  }
  uint64_t v1 = sub_21598DCD4();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267888328, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267888338 = v1->__r_.__value_.__r.__words[2];
    xmmword_267888328 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888328, &dword_21572C000);
  __cxa_guard_release(&qword_267888340);
  return &xmmword_267888328;
}

void sub_21598DCBC(_Unwind_Exception *a1)
{
}

std::string *sub_21598DCD4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888360, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888360))
  {
    return &stru_267888348;
  }
  sub_21598DF88((uint64_t)__p);
  sub_21598DDD0(__p, &stru_267888348);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888348, &dword_21572C000);
  __cxa_guard_release(&qword_267888360);
  return &stru_267888348;
}

void sub_21598DD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267888360);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267888360);
  _Unwind_Resume(a1);
}

void sub_21598DDD0(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_2157BA2F0();
  if (*((char *)v4 + 23) < 0)
  {
    sub_215738B0C(__dst, *(void **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    uint64_t v16 = *((void *)v4 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  unint64_t v6 = sub_2157C6008();
  if (*((char *)v6 + 23) < 0)
  {
    sub_215738B0C(&v17, *(void **)v6, *((void *)v6 + 1));
  }
  else
  {
    long long v7 = *v6;
    uint64_t v18 = *((void *)v6 + 2);
    long long v17 = v7;
  }
  sub_21573A150(&__p, (uint64_t)__dst, 2uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, a2, v8, v9);
  char v10 = (void **)__p;
  if (__p)
  {
    uint64_t v11 = v14;
    uint64_t v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    char v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0) {
    goto LABEL_19;
  }
}

void sub_21598DF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21598DF88(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888380, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888380))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::UpdateEnabledContexts>]", qword_267888368);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888368, &dword_21572C000);
    __cxa_guard_release(&qword_267888380);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678883A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678883A0))
  {
    size_t v3 = sub_215747D98(qword_267888368, "<", 0);
    sub_215747C90(qword_267888368, 0, v3, qword_267888388);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888388, &dword_21572C000);
    __cxa_guard_release(&qword_2678883A0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678883C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678883C0))
  {
    sub_215E19DF4((uint64_t)qword_267888388, (uint64_t)&xmmword_2678883A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678883A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678883C0);
  }
  if (byte_2678883BF < 0)
  {
    long long v2 = xmmword_2678883A8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2678883A8;
    *(void *)(a1 + 16) = unk_2678883B8;
  }
}

void sub_21598E150(_Unwind_Exception *a1)
{
}

void sub_21598E168(_Unwind_Exception *a1)
{
}

void sub_21598E180(_Unwind_Exception *a1)
{
}

std::string *sub_21598E198()
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678883E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678883E0))
  {
    sub_215732BF4(v10, "viz::PackageData");
    uint64_t v1 = sub_2157BA2F0();
    if (*((char *)v1 + 23) < 0)
    {
      sub_215738B0C(__dst, *(void **)v1, *((void *)v1 + 1));
    }
    else
    {
      long long v2 = *v1;
      uint64_t v13 = *((void *)v1 + 2);
      *(_OWORD *)long long __dst = v2;
    }
    size_t v3 = sub_21598B2CC();
    if (*((char *)v3 + 23) < 0)
    {
      sub_215738B0C(&v14, *(void **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v4 = *v3;
      uint64_t v15 = *((void *)v3 + 2);
      long long v14 = v4;
    }
    long long v5 = sub_2157E7D4C();
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_215738B0C(&v16, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      std::string::size_type v17 = v5->__r_.__value_.__r.__words[2];
      long long v16 = v6;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    uint64_t v19 = 0x400000000000000;
    sub_21573A150(v9, (uint64_t)__dst, 4uLL);
    sub_215E19EAC(v10, (uint64_t *)v9, &stru_2678883C8, v7, v8);
    sub_2157352DC(v9);
    if (SHIBYTE(v19) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v17) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v15) & 0x80000000) == 0) {
          goto LABEL_16;
        }
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v16);
    if ((SHIBYTE(v15) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v13) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v14);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v11 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit(MEMORY[0x263F8C0B8], &stru_2678883C8, &dword_21572C000);
        __cxa_guard_release(&qword_2678883E0);
        return &stru_2678883C8;
      }
LABEL_23:
      operator delete(v10[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_23;
  }
  return &stru_2678883C8;
}

void sub_21598E3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0) {
        operator delete(a13);
      }
      __cxa_guard_abort(&qword_2678883E0);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void sub_21598E464()
{
  while (1)
  {
    if (*(char *)(v0 - 1) < 0) {
      operator delete(*(void **)(v0 - 24));
    }
    v0 -= 24;
    if (v0 == v1) {
      JUMPOUT(0x21598E440);
    }
  }
}

void sub_21598E48C(long long *a1, uint64_t a2)
{
  int v5 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_215738B0C(&__dst, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __dst = *a1;
    uint64_t v4 = *((void *)a1 + 2);
  }
  int v5 = 1;
  p_dst = &__dst;
  uint64_t v7 = a2;
  v8[0] = (uint64_t)&__dst;
  v8[1] = a2;
  v8[2] = a2;
  sub_2157492F0(v8, (uint64_t)&__dst);
  sub_21598D968();
}

void sub_21598E5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598E5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598E5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598E610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598E624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598E638(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C674290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_21598E658(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C674290;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_21598E6AC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_21598E6D4(uint64_t a1)
{
}

void *sub_21598E6E4(void *a1, unsigned char *a2)
{
  int v2 = *a2;
  if (v2 == 2)
  {
    size_t v3 = "Enabled";
    uint64_t v4 = 7;
  }
  else if (v2 == 1)
  {
    size_t v3 = "DisabledIgnoreSync";
    uint64_t v4 = 18;
  }
  else if (*a2)
  {
    sub_215731D94(a1, (uint64_t)"invalid client sync type (", 26);
    a1 = (void *)std::ostream::operator<<();
    size_t v3 = ")";
    uint64_t v4 = 1;
  }
  else
  {
    size_t v3 = "Disabled";
    uint64_t v4 = 8;
  }
  return sub_215731D94(a1, (uint64_t)v3, v4);
}

void *sub_21598E7C8(void *a1, unsigned char *a2)
{
  switch(*a2)
  {
    case 0:
      int v2 = "NotSyncing";
      uint64_t v3 = 10;
      break;
    case 1:
      int v2 = "Waiting";
      uint64_t v3 = 7;
      break;
    case 2:
      int v2 = "Proceeding";
      uint64_t v3 = 10;
      break;
    case 3:
      int v2 = "ProceedingConditionally";
      uint64_t v3 = 23;
      break;
    default:
      sub_215731D94(a1, (uint64_t)"invalid sync status (", 21);
      a1 = (void *)std::ostream::operator<<();
      int v2 = ")";
      uint64_t v3 = 1;
      break;
  }
  return sub_215731D94(a1, (uint64_t)v2, v3);
}

uint64_t sub_21598E8F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  long long v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    int8x16_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  uint64_t result = (a1[48] != 0) == (v6[48] != 0);
  if (!a1[48] || !v6[48]) {
    return result;
  }
  uint64_t v10 = a1[47];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = a1[47];
  }
  else {
    uint64_t v11 = *((void *)a1 + 4);
  }
  uint64_t v12 = v6[47];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)v6 + 4);
  }
  if (v11 != v12) {
    return 0;
  }
  long long v14 = (const void **)(a1 + 24);
  if (v13 >= 0) {
    uint64_t v15 = v6 + 24;
  }
  else {
    uint64_t v15 = (unsigned __int8 *)*((void *)v6 + 3);
  }
  if ((v10 & 0x80) != 0) {
    return memcmp(*v14, v15, *((void *)a1 + 4)) == 0;
  }
  if (!a1[47]) {
    return 1;
  }
  uint64_t v16 = v10 - 1;
  do
  {
    int v18 = *(unsigned __int8 *)v14;
    long long v14 = (const void **)((char *)v14 + 1);
    int v17 = v18;
    int v20 = *v15++;
    int v19 = v20;
    BOOL v22 = v16-- != 0;
    uint64_t result = v17 == v19;
  }
  while (v17 == v19 && v22);
  return result;
}

void sub_21598EA70(uint64_t a1, uint64_t a2)
{
  sub_215CE9884((uint64_t)&v2, a2);
}

void sub_21598ECD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_guard_abort(&qword_26788E640);
  sub_215733368((uint64_t)va);
  sub_21598EDDC(v2);
  _Unwind_Resume(a1);
}

void sub_21598ED00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    sub_215733368((uint64_t)&a10);
    sub_21598EDDC(v23);
    _Unwind_Resume(a1);
  }
  sub_215733368((uint64_t)&a10);
  sub_21598EDDC(v23);
  _Unwind_Resume(a1);
}

void *sub_21598EDDC(void *a1)
{
  *a1 = &unk_26C65FA88;
  sub_2157C6F18((uint64_t)(a1 + 4));
  std::string v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void *sub_21598EE78(void *a1)
{
  *a1 = &unk_26C65FA88;
  sub_2157C6F18((uint64_t)(a1 + 4));
  std::string v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_21598EF14(void *a1)
{
  *a1 = &unk_26C65FA88;
  sub_2157C6F18((uint64_t)(a1 + 4));
  std::string v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x2166C4D20);
}

void sub_21598EFC0()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E648, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_26788E648))
  {
LABEL_2:
    sub_21598F30C();
  }
  sub_215732BF4(v7, "viz::PackageData");
  uint64_t v0 = sub_215836428();
  if (*((char *)v0 + 23) < 0)
  {
    sub_215738B0C(__p, *(void **)v0, *((void *)v0 + 1));
  }
  else
  {
    long long v1 = *v0;
    uint64_t v10 = *((void *)v0 + 2);
    *(_OWORD *)__p = v1;
  }
  *(_OWORD *)uint64_t v11 = *(_OWORD *)"viz::Package";
  uint64_t v12 = 0xC00000000000000;
  std::string v2 = sub_21598F82C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&v13, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v2->__r_.__value_.__r.__words[2];
    long long v13 = v3;
  }
  *(_OWORD *)uint64_t v15 = *(_OWORD *)"void";
  uint64_t v16 = 0x400000000000000;
  sub_21573A150(v6, (uint64_t)__p, 4uLL);
  sub_215E19EAC(v7, (uint64_t *)v6, &stru_26788E658, v4, v5);
  sub_2157352DC(v6);
  if (SHIBYTE(v16) < 0)
  {
    operator delete(v15[0]);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v12) & 0x80000000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_18;
    }
  }
  else if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete((void *)v13);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v10) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v11[0]);
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
LABEL_14:
    if ((v8 & 0x80000000) == 0)
    {
LABEL_15:
      __cxa_atexit(MEMORY[0x263F8C0B8], &stru_26788E658, &dword_21572C000);
      __cxa_guard_release(&qword_26788E648);
      goto LABEL_2;
    }
LABEL_20:
    operator delete(v7[0]);
    goto LABEL_15;
  }
LABEL_19:
  operator delete(__p[0]);
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_15;
  }
  goto LABEL_20;
}

void sub_21598F200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_26788E648);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_26788E648);
  _Unwind_Resume(a1);
}

void sub_21598F2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21598F30C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E650, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E650))
  {
    uint64_t v0 = sub_215836428();
    uint64_t v1 = *((void *)v0 + 1);
    if (*((char *)v0 + 23) >= 0)
    {
      uint64_t v2 = *((unsigned __int8 *)v0 + 23);
    }
    else
    {
      uint64_t v0 = *(long long **)v0;
      uint64_t v2 = v1;
    }
    sub_2157C6A10((char *)v0, v2, "::", 2, 0, (uint64_t)&p_dst);
    if (*(v8 - 1) < 0)
    {
      sub_215738B0C(&xmmword_26788E670, *((void **)v8 - 3), *((void *)v8 - 2));
    }
    else
    {
      long long v3 = *(_OWORD *)(v8 - 24);
      unk_26788E680 = *((void *)v8 - 1);
      xmmword_26788E670 = v3;
    }
    sub_2157352DC((void **)&p_dst);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788E670, &dword_21572C000);
    __cxa_guard_release(&qword_26788E650);
  }
  int v6 = -1;
  if (byte_26788E687 < 0)
  {
    sub_215738B0C(&__dst, (void *)xmmword_26788E670, *((unint64_t *)&xmmword_26788E670 + 1));
  }
  else
  {
    long long __dst = xmmword_26788E670;
    uint64_t v5 = unk_26788E680;
  }
  int v6 = 1;
  p_dst = &__dst;
  char v8 = "{";
  v9[0] = (uint64_t)&__dst;
  v9[1] = (uint64_t)"{";
  v9[2] = (uint64_t)"{";
  sub_2157492F0(v9, (uint64_t)&__dst);
  sub_215835BD4();
}

void sub_21598F534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2157352DC((void **)va);
  __cxa_guard_abort(&qword_26788E650);
  _Unwind_Resume(a1);
}

void sub_21598F554(_Unwind_Exception *a1)
{
}

void sub_21598F56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598F584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598F598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598F5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598F5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21598F5D4(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 6;
}

void sub_21598F600(void *lpsrc@<X0>, void *a2@<X8>)
{
}

void sub_21598F650(std::string *a1, uint64_t *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  v4[0] = "DictionaryData must only contain Number, Boolean, String, Array or Dictionary values, but contains ";
  v4[1] = 99;
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0) {
    long long v3 = a2;
  }
  else {
    long long v3 = (uint64_t *)*a2;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = a2[1];
  }
  _OWORD v4[2] = v3;
  v4[3] = v2;
  sub_2157430CC((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

void *sub_21598F6E4(void *a1)
{
  *a1 = &unk_26C65FA88;
  sub_2157C6F18((uint64_t)(a1 + 4));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_21598F780(void *a1)
{
  *a1 = &unk_26C65FA88;
  sub_2157C6F18((uint64_t)(a1 + 4));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  JUMPOUT(0x2166C4D20);
}

std::string *sub_21598F82C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888560, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888560))
  {
    return &stru_267888548;
  }
  sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 6U]", __p);
  sub_215E1A038((uint64_t)__p, &stru_267888548);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888548, &dword_21572C000);
  __cxa_guard_release(&qword_267888560);
  return &stru_267888548;
}

void sub_21598F8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267888560);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267888560);
  _Unwind_Resume(a1);
}

uint64_t sub_21598F930(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      long long v6 = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  if (*((unsigned char *)a2 + 96))
  {
    char v7 = *((unsigned char *)a2 + 88);
    *(void *)(a1 + 56) = a2[10];
    *(unsigned char *)(a1 + 64) = v7;
    *(unsigned char *)(a1 + 80) = 0;
    uint64_t v8 = a1 + 80;
    *(unsigned char *)(a1 + 72) = 1;
    *(unsigned char *)(a1 + 104) = 0;
    if (!*((unsigned char *)a2 + 72)) {
      goto LABEL_8;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 56) = 0;
    *(unsigned char *)(a1 + 80) = 0;
    uint64_t v8 = a1 + 80;
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 104) = 0;
    if (!*((unsigned char *)a2 + 72))
    {
LABEL_8:
      uint64_t v9 = a1 + 112;
      if (*((unsigned char *)a2 + 160)) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_215738B0C((unsigned char *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 3);
    *(void *)(v8 + 16) = a2[8];
    *(_OWORD *)uint64_t v8 = v10;
  }
  *(unsigned char *)(a1 + 104) = 1;
  uint64_t v9 = a1 + 112;
  if (*((unsigned char *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_215738B0C(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      long long v13 = *((_OWORD *)a2 + 7);
      uint64_t v14 = a2[16];
    }
    *(_OWORD *)uint64_t v9 = v13;
    *(void *)(v9 + 16) = v14;
    *(unsigned char *)(a1 + 136) = 1;
    char v11 = *((unsigned char *)a2 + 200);
    if (v11) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  char v11 = *((unsigned char *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_215992CCC(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(void *)(a1 + 160) = v14;
    char v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(unsigned char *)(a1 + 144) = 0;
LABEL_21:
  *(unsigned char *)(a1 + 168) = v11;
  return a1;
}

void sub_21598FAF0(_Unwind_Exception *exception_object)
{
  if (v1[104] && v1[103] < 0) {
    operator delete(*v3);
  }
  if (v1[48])
  {
    if (v1[47] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

double sub_21598FB5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  *(void *)a2 = *(void *)(a1 + 8);
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = 0;
  char v5 = (unsigned char *)(a2 + 16);
  *(unsigned char *)(a2 + 40) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_215738B0C(v5, *(void **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)char v5 = v6;
      *(void *)(a2 + 32) = *(void *)(a1 + 40);
    }
    *(unsigned char *)(a2 + 40) = 1;
  }
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  if (*(unsigned char *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_215738B0C((unsigned char *)(a2 + 48), *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      long long v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(void *)(a2 + 64) = *(void *)(a1 + 96);
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
    *(void *)(a2 + 80) = *(void *)(a1 + 56);
    *(void *)(a2 + 88) = v7;
    *(unsigned char *)(a2 + 96) = 1;
    if (*(unsigned char *)(a1 + 136)) {
      goto LABEL_13;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 80) = 0;
    *(unsigned char *)(a2 + 96) = 0;
    if (*(unsigned char *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_215738B0C(__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
      }
      else
      {
        long long v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)long long __dst = v6;
        *(void *)&__dst[16] = *(void *)(a1 + 128);
      }
      uint64_t v9 = *(void *)&__dst[8];
      uint64_t v10 = *(void *)&__dst[15];
      *(void *)(a2 + 112) = *(void *)__dst;
      *(void *)(a2 + 120) = v9;
      *(void *)(a2 + 127) = v10;
      *(unsigned char *)(a2 + 135) = __dst[23];
      *(void *)(a2 + 144) = 0;
      *(void *)(a2 + 152) = 0;
      *(unsigned char *)(a2 + 160) = 1;
      char v8 = *(unsigned char *)(a1 + 168);
      if (v8) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
  }
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  char v8 = *(unsigned char *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_215992F3C((uint64_t **)(a1 + 144), (uint64_t)__dst);
    *(void *)&long long v6 = *(void *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(void *)(a2 + 192) = *(void *)&__dst[16];
    *(unsigned char *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(unsigned char *)(a2 + 176) = 0;
  *(unsigned char *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_21598FD0C(_Unwind_Exception *exception_object)
{
  if (v1[72] && v1[71] < 0) {
    operator delete(*v3);
  }
  if (v1[40])
  {
    if (v1[39] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21598FD78(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674850[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t sub_21598FDD4(void *a1, uint64_t a2)
{
  uint64_t result = sub_215AF09EC(a2);
  if (!*a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_215AF0948(a2);
    sub_215994E5C((uint64_t)&v7, (uint64_t)v6);
    std::logic_error::logic_error(exception, &v7);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A320, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_21598FE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      sub_215733368(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_21598FEFC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 64);
  long long v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
  {
LABEL_33:
    sub_215AB89CC((uint64_t *)(a1 + 8), (uint64_t)v21);
    sub_21598E6D4((uint64_t)v21);
  }
  char v4 = (long long *)(a1 + 8);
  while (1)
  {
    uint64_t v5 = *v2;
    uint64_t v24 = *v2;
    long long v6 = (std::__shared_weak_count *)v2[1];
    unint64_t v25 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      break;
    }
    uint64_t v10 = *(const void **)(a1 + 8);
    size_t v9 = *(void *)(a1 + 16);
    if (v8 == v9) {
      goto LABEL_10;
    }
LABEL_11:
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v2 += 2;
    if (v2 == v3) {
      goto LABEL_33;
    }
  }
  size_t v9 = *(unsigned __int8 *)(a1 + 31);
  uint64_t v10 = (const void *)(a1 + 8);
  if (v8 != v9) {
    goto LABEL_11;
  }
LABEL_10:
  if (memcmp(v7, v10, v9)) {
    goto LABEL_11;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v5 + 24))(&v22, v5, *(unsigned int *)(a1 + 32));
  uint64_t v11 = v22;
  if (!v22)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_215738B0C(&v18, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long v18 = *v4;
      uint64_t v19 = *(void *)(a1 + 24);
    }
    int v20 = *(_DWORD *)(a1 + 32);
    sub_215AB8C54((uint64_t)&v18, (uint64_t)v21);
    sub_21598E6D4((uint64_t)v21);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 56);
  if (v12 != -1)
  {
    if (!v12)
    {
      long long v13 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(std::__shared_weak_count **)(a1 + 48);
      *(void *)(a1 + 40) = v11;
      *(void *)(a1 + 48) = v13;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_26;
    }
    ((void (*)(unsigned char *, uint64_t))off_26C674850[v12])(v21, a1 + 40);
    uint64_t v11 = v22;
  }
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v15 = v23;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 56) = 0;
LABEL_26:
  uint64_t v16 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_215990204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_215733368(v17 - 112);
  sub_215733368(v17 - 96);
  _Unwind_Resume(a1);
}

void sub_21599024C(_Unwind_Exception *a1)
{
  sub_215733368(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_215990260(_Unwind_Exception *a1)
{
  sub_215733368(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_215990274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21573FF04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_215990288(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 8;
  sub_215AF0948(a2);
  if (SHIBYTE(v10) < 0)
  {
    sub_215738B0C((unsigned char *)v6, __p[0], (unint64_t)__p[1]);
    int v7 = SHIBYTE(v10);
    *(_DWORD *)(a1 + 32) = v11;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
    *(void *)(v6 + 16) = v10;
    *(_DWORD *)(a1 + 32) = v11;
  }
  sub_21598FDD4(__p, a2);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 56) = 1;
  sub_2157BB1A4((void *)(a1 + 64), a3);
  return a1;
}

void sub_215990348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215990388(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_215738B0C((unsigned char *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  int v9 = *((_DWORD *)a2 + 6);
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v10 = *(unsigned int *)(a3 + 16);
  if (v10 != -1)
  {
    ((void (*)(unsigned char *, uint64_t, uint64_t))off_26C674860[v10])(v12, a1 + 40, a3);
    *(_DWORD *)(a1 + 56) = v10;
  }
  sub_2157BB1A4((void *)(a1 + 64), a4);
  return a1;
}

void sub_21599044C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v17 = *(unsigned int *)(v14 + 56);
  if (v17 != -1) {
    ((void (*)(char *, uint64_t))off_26C674850[v17])(&a13, v15);
  }
  *(_DWORD *)(v14 + 56) = -1;
  if (*(char *)(v14 + 31) < 0) {
    operator delete(*v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159904A8(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 56) > 1u) {
LABEL_11:
  }
    sub_215742D4C();
  uint64_t v5 = *(void *)(a1 + 40);
  char v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v4
    || (atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed),
        atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)))
  {
    if (v5) {
      goto LABEL_5;
    }
LABEL_10:
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &unk_26C678D20;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  if (!v5) {
    goto LABEL_10;
  }
LABEL_5:
  if (*(_DWORD *)(a1 + 56)) {
    goto LABEL_11;
  }
  uint64_t v6 = *(void (**)(void))(**(void **)(a1 + 40) + 48);

  v6();
}

void sub_2159905B0(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 64);
  long long v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
  {
LABEL_33:
    sub_215AB89CC((uint64_t *)(a1 + 8), (uint64_t)v21);
    sub_21598E6D4((uint64_t)v21);
  }
  char v4 = (long long *)(a1 + 8);
  while (1)
  {
    uint64_t v5 = *v2;
    uint64_t v24 = *v2;
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    unint64_t v25 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v7 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      break;
    }
    uint64_t v10 = *(const void **)(a1 + 8);
    size_t v9 = *(void *)(a1 + 16);
    if (v8 == v9) {
      goto LABEL_10;
    }
LABEL_11:
    if (v6)
    {
      if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v2 += 2;
    if (v2 == v3) {
      goto LABEL_33;
    }
  }
  size_t v9 = *(unsigned __int8 *)(a1 + 31);
  uint64_t v10 = (const void *)(a1 + 8);
  if (v8 != v9) {
    goto LABEL_11;
  }
LABEL_10:
  if (memcmp(v7, v10, v9)) {
    goto LABEL_11;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v5 + 24))(&v22, v5, *(unsigned int *)(a1 + 32));
  uint64_t v11 = v22;
  if (!v22)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_215738B0C(&v18, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      long long v18 = *v4;
      uint64_t v19 = *(void *)(a1 + 24);
    }
    int v20 = *(_DWORD *)(a1 + 32);
    sub_215AB8C54((uint64_t)&v18, (uint64_t)v21);
    sub_21598E6D4((uint64_t)v21);
  }
  uint64_t v12 = *(unsigned int *)(a1 + 56);
  if (v12 != -1)
  {
    if (!v12)
    {
      long long v13 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(std::__shared_weak_count **)(a1 + 48);
      *(void *)(a1 + 40) = v11;
      *(void *)(a1 + 48) = v13;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
      goto LABEL_26;
    }
    ((void (*)(unsigned char *, uint64_t))off_26C674850[v12])(v21, a1 + 40);
    uint64_t v11 = v22;
  }
  *(_DWORD *)(a1 + 56) = -1;
  uint64_t v15 = v23;
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 56) = 0;
LABEL_26:
  uint64_t v16 = v23;
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = v25;
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_2159908B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_215733368(v17 - 112);
  sub_215733368(v17 - 96);
  _Unwind_Resume(a1);
}

void sub_215990900(_Unwind_Exception *a1)
{
  sub_215733368(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_215990914(_Unwind_Exception *a1)
{
  sub_215733368(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_215990928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21573FF04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21599093C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_215990964(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_21599098C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t sub_2159909B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_2159909DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_215990A04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))();
}

uint64_t sub_215990A2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_215990A54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

void sub_215990A7C()
{
}

uint64_t *sub_215990AC4(int a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_26788E6B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_26788E6B0))
  {
    uint64_t v8 = operator new(0x28uLL);
    v8[1] = 0;
    v8[2] = 0;
    void *v8 = &unk_26C665BA8;
    uint64_t v8[3] = &unk_26C67A2B0;
    *((_DWORD *)v8 + 8) = 0;
    v17[0] = v8 + 3;
    v17[1] = v8;
    v13[0] = 0;
    v13[1] = 0;
    sub_2158B2BE0(&v14, (uint64_t)v17, 1uLL);
    LODWORD(v18) = 0;
    long long v19 = v14;
    uint64_t v20 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    size_t v9 = operator new(0x28uLL);
    v9[1] = 0;
    v9[2] = 0;
    *size_t v9 = &unk_26C665BA8;
    uint64_t v9[3] = &unk_26C67A2B0;
    *((_DWORD *)v9 + 8) = 1;
    v16[0] = v9 + 3;
    v16[1] = v9;
    v10[0] = 0;
    v10[1] = 0;
    sub_2158B2BE0(&v11, (uint64_t)v16, 1uLL);
    int v21 = 1;
    long long v22 = v11;
    uint64_t v23 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    sub_215990DE0(&v18, 2);
    sub_215990FA8((uint64_t)&v21);
    sub_215990FA8((uint64_t)&v18);
    sub_215831280((void **)&v11);
    sub_215733368((uint64_t)v16);
    sub_215733368((uint64_t)v10);
    sub_215831280((void **)&v14);
    sub_215733368((uint64_t)v17);
    sub_215733368((uint64_t)v13);
    __cxa_atexit((void (*)(void *))sub_21599105C, &qword_26788E6E0, &dword_21572C000);
    __cxa_guard_release(qword_26788E6B0);
  }
  uint64_t v2 = qword_26788E6E8;
  if (!qword_26788E6E8) {
    goto LABEL_12;
  }
  long long v3 = &qword_26788E6E8;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < a1;
    if (v4 >= a1) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      long long v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_26788E6E8 || *((_DWORD *)v3 + 8) > a1) {
LABEL_12:
  }
    long long v3 = &qword_26788E6E8;
  return v3 + 5;
}

void sub_215990D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  sub_215990FA8(v24);
  sub_215990FA8((uint64_t)&a24);
  sub_215831280(&a11);
  sub_215733368((uint64_t)&a20);
  sub_215733368((uint64_t)&a9);
  sub_215831280(&a17);
  sub_215733368((uint64_t)&a22);
  sub_215733368((uint64_t)&a15);
  __cxa_guard_abort(qword_26788E6B0);
  _Unwind_Resume(a1);
}

uint64_t *sub_215990DE0(uint64_t *result, uint64_t a2)
{
  qword_26788E6F0 = 0;
  qword_26788E6E8 = 0;
  qword_26788E6E0 = (uint64_t)&qword_26788E6E8;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    int v4 = &result[4 * a2];
    int v5 = *(_DWORD *)result;
LABEL_6:
    int v7 = &qword_26788E6E8;
LABEL_10:
    if (v3)
    {
      uint64_t v10 = v7 + 1;
      if (v7[1]) {
        goto LABEL_24;
      }
    }
    else
    {
LABEL_20:
      uint64_t v10 = &qword_26788E6E8;
      int v7 = &qword_26788E6E8;
    }
LABEL_21:
    long long v13 = operator new(0x40uLL);
    v13[8] = v5;
    sub_2157BB1A4((void *)v13 + 5, v2 + 1);
    *(void *)long long v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v7;
    *uint64_t v10 = (uint64_t)v13;
    if (*(void *)qword_26788E6E0)
    {
      qword_26788E6E0 = *(void *)qword_26788E6E0;
      long long v13 = (_DWORD *)*v10;
    }
    uint64_t result = sub_21573B048((uint64_t *)qword_26788E6E8, (uint64_t *)v13);
    ++qword_26788E6F0;
LABEL_24:
    while (1)
    {
      v2 += 4;
      if (v2 == v4) {
        break;
      }
      uint64_t v3 = qword_26788E6E8;
      int v5 = *(_DWORD *)v2;
      if ((uint64_t *)qword_26788E6E0 == &qword_26788E6E8) {
        goto LABEL_6;
      }
      uint64_t v6 = qword_26788E6E8;
      if (qword_26788E6E8)
      {
        do
        {
          int v7 = (uint64_t *)v6;
          uint64_t v6 = *(void *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        uint64_t v8 = &qword_26788E6E8;
        do
        {
          int v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          uint64_t v8 = v7;
        }
        while (v9);
      }
      if (*((_DWORD *)v7 + 8) < v5) {
        goto LABEL_10;
      }
      if (!qword_26788E6E8) {
        goto LABEL_20;
      }
      uint64_t v11 = qword_26788E6E8;
      while (1)
      {
        while (1)
        {
          int v7 = (uint64_t *)v11;
          int v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v5) {
            break;
          }
          uint64_t v11 = *v7;
          uint64_t v10 = v7;
          if (!*v7) {
            goto LABEL_21;
          }
        }
        if (v12 >= v5) {
          break;
        }
        uint64_t v11 = v7[1];
        if (!v11)
        {
          uint64_t v10 = v7 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_215990F70(_Unwind_Exception *a1)
{
  sub_215995050(v1);
  _Unwind_Resume(a1);
}

void sub_215990F84(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_215995050((void *)qword_26788E6E8);
  _Unwind_Resume(a1);
}

uint64_t sub_215990FA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    int v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        int v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      int v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_21599105C(uint64_t a1)
{
  return a1;
}

void sub_215991088(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v64[0] = a1;
  v64[1] = a2;
  LOBYTE(v51) = 0;
  char v63 = 0;
  v50[0] = &unk_26C674880;
  v50[1] = &v51;
  v50[2] = v64;
  sub_215E12638((uint64_t)v50, (uint64_t)__dst);
  if (v49)
  {
    char v26 = v62;
    if (v62)
    {
      long long v4 = v51;
      long long v51 = 0uLL;
      long long v15 = v4;
      *(_OWORD *)uint64_t v16 = v52;
    }
    else
    {
      long long v15 = v51;
      LOBYTE(v16[0]) = 0;
      char v25 = 0;
      if (v61)
      {
        char v18 = 0;
        if (v54)
        {
          *(_OWORD *)uint64_t v16 = v52;
          uint64_t v17 = v53;
          uint64_t v53 = 0;
          long long v52 = 0uLL;
          char v18 = 1;
        }
        LOBYTE(v19) = 0;
        char v24 = 0;
        if (v60)
        {
          uint64_t v20 = v56;
          long long v19 = v55;
          long long v55 = 0uLL;
          uint64_t v21 = v57;
          *(_OWORD *)long long v22 = v58;
          uint64_t v23 = v59;
          uint64_t v56 = 0;
          long long v58 = 0uLL;
          uint64_t v59 = 0;
          char v24 = 1;
        }
        char v25 = 1;
      }
    }
  }
  else
  {
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
    int v5 = sub_215741BFC(&v27.__r_.__value_.__s.__data_[16], &v38);
    long long v15 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
    LOBYTE(v16[0]) = 0;
    char v25 = 0;
    if (v36)
    {
      char v18 = 0;
      int v6 = v29;
      if (v29)
      {
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v5;
        uint64_t v17 = *((void *)v5 + 2);
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
        *(void *)int v5 = 0;
        char v18 = 1;
      }
      LOBYTE(v19) = 0;
      char v24 = 0;
      if (v35)
      {
        uint64_t v20 = v31;
        long long v19 = v30;
        long long v30 = 0uLL;
        uint64_t v21 = v32;
        *(_OWORD *)long long v22 = v33;
        uint64_t v23 = v34;
        uint64_t v31 = 0;
        long long v33 = 0uLL;
        uint64_t v34 = 0;
        char v24 = 1;
      }
      char v25 = 1;
      char v26 = 0;
      if (v6 && v28 < 0) {
        operator delete((void *)v27.__r_.__value_.__r.__words[2]);
      }
    }
    else
    {
      char v26 = 0;
    }
    if (!v49 && v48)
    {
      if (v47)
      {
        if (v46 < 0) {
          operator delete(v43);
        }
        if (SHIBYTE(v42) < 0) {
          operator delete(v41);
        }
      }
      if (v40 && SHIBYTE(v39) < 0) {
        operator delete((void *)v38);
      }
    }
  }
  if (v63)
  {
    if (v62)
    {
      int v7 = (std::__shared_weak_count *)*((void *)&v51 + 1);
      if (*((void *)&v51 + 1)
        && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v51 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    else if (v61)
    {
      if (v60)
      {
        if (SHIBYTE(v59) < 0) {
          operator delete((void *)v58);
        }
        if (SHIBYTE(v56) < 0) {
          operator delete((void *)v55);
        }
      }
      if (v54 && SHIBYTE(v53) < 0) {
        operator delete((void *)v52);
      }
    }
  }
  if (v26)
  {
    long long v8 = v15;
    long long v9 = *(_OWORD *)v16;
    long long v15 = 0uLL;
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v9;
    *(unsigned char *)(a3 + 120) = 1;
  }
  else if (sub_215AB74CC() == *((void (****)(std::error_category *__hidden))&v15 + 1))
  {
    sub_215741BFC(__dst, (long long *)v16);
    sub_21599512C(v15, (long long *)__dst, (uint64_t)&v51);
    *(_OWORD *)a3 = v51;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 112) = 0;
    if (v61)
    {
      *(unsigned char *)(a3 + 40) = 0;
      int v11 = v54;
      if (v54)
      {
        *(_OWORD *)(a3 + 16) = v52;
        *(void *)(a3 + 32) = v53;
        uint64_t v53 = 0;
        long long v52 = 0uLL;
        *(unsigned char *)(a3 + 40) = 1;
      }
      *(unsigned char *)(a3 + 48) = 0;
      *(unsigned char *)(a3 + 104) = 0;
      if (v60)
      {
        uint64_t v12 = v57;
        *(void *)(a3 + 64) = v56;
        *(_OWORD *)(a3 + 48) = v55;
        long long v55 = 0uLL;
        *(void *)(a3 + 72) = v12;
        *(_OWORD *)(a3 + 80) = v58;
        *(void *)(a3 + 96) = v59;
        uint64_t v56 = 0;
        long long v58 = 0uLL;
        uint64_t v59 = 0;
        *(unsigned char *)(a3 + 104) = 1;
      }
      *(unsigned char *)(a3 + 112) = 1;
      *(unsigned char *)(a3 + 120) = 0;
      if (v11 && SHIBYTE(v53) < 0) {
        operator delete((void *)v52);
      }
    }
    else
    {
      *(unsigned char *)(a3 + 120) = 0;
    }
    if (v45)
    {
      if (v44)
      {
        if (SHIBYTE(v43) < 0) {
          operator delete(v42);
        }
        if (SHIBYTE(v41) < 0) {
          operator delete(v39);
        }
      }
      if (BYTE8(v38) && SBYTE7(v38) < 0) {
        operator delete(__dst[0]);
      }
    }
  }
  else
  {
    sub_215E10780((uint64_t)&v15, &v27);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_215738B0C(__dst, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
      *(void *)&long long v38 = *((void *)&v27.__r_.__value_.__l + 2);
    }
    BYTE8(v38) = 1;
    LOBYTE(v39) = 0;
    char v44 = 0;
    char v45 = 1;
    sub_21599512C(3u, (long long *)__dst, (uint64_t)&v51);
    *(_OWORD *)a3 = v51;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 112) = 0;
    if (v61)
    {
      *(unsigned char *)(a3 + 40) = 0;
      int v13 = v54;
      if (v54)
      {
        *(_OWORD *)(a3 + 16) = v52;
        *(void *)(a3 + 32) = v53;
        uint64_t v53 = 0;
        long long v52 = 0uLL;
        *(unsigned char *)(a3 + 40) = 1;
      }
      *(unsigned char *)(a3 + 48) = 0;
      *(unsigned char *)(a3 + 104) = 0;
      if (v60)
      {
        uint64_t v14 = v57;
        *(void *)(a3 + 64) = v56;
        *(_OWORD *)(a3 + 48) = v55;
        long long v55 = 0uLL;
        *(void *)(a3 + 72) = v14;
        *(_OWORD *)(a3 + 80) = v58;
        *(void *)(a3 + 96) = v59;
        uint64_t v56 = 0;
        long long v58 = 0uLL;
        uint64_t v59 = 0;
        *(unsigned char *)(a3 + 104) = 1;
      }
      *(unsigned char *)(a3 + 112) = 1;
      *(unsigned char *)(a3 + 120) = 0;
      if (v13 && SHIBYTE(v53) < 0) {
        operator delete((void *)v52);
      }
    }
    else
    {
      *(unsigned char *)(a3 + 120) = 0;
    }
    if (v45)
    {
      if (v44)
      {
        if (SHIBYTE(v43) < 0) {
          operator delete(v42);
        }
        if (SHIBYTE(v41) < 0) {
          operator delete(v39);
        }
      }
      if (BYTE8(v38) && SBYTE7(v38) < 0) {
        operator delete(__dst[0]);
      }
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  if (v26)
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1))
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else if (v25)
  {
    if (v24)
    {
      if (SHIBYTE(v23) < 0) {
        operator delete(v22[0]);
      }
      if (SHIBYTE(v20) < 0) {
        operator delete((void *)v19);
      }
    }
    if (v18 && SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
  }
}

void sub_215991740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_21574A71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159917B8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v59[0] = a2;
  v59[1] = a1;
  v47[0] = 0;
  char v58 = 0;
  v46[0] = &unk_26C674920;
  v46[1] = v47;
  v46[2] = v59;
  sub_215E12638((uint64_t)v46, (uint64_t)__dst);
  if (v45)
  {
    char v22 = v57;
    if (v57)
    {
      *(void *)uint64_t v12 = &unk_26C678D20;
      *(_OWORD *)&v12[8] = *(_OWORD *)&v47[8];
      *(void *)&v47[8] = 0;
      *(void *)&v47[16] = 0;
    }
    else
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v47;
      v12[16] = 0;
      char v21 = 0;
      if (v56)
      {
        char v14 = 0;
        if (v49)
        {
          *(_OWORD *)&v12[16] = *(_OWORD *)&v47[16];
          uint64_t v13 = v48;
          *(void *)&v47[24] = 0;
          uint64_t v48 = 0;
          *(void *)&v47[16] = 0;
          char v14 = 1;
        }
        LOBYTE(v15) = 0;
        char v20 = 0;
        if (v55)
        {
          uint64_t v16 = v51;
          long long v15 = v50;
          long long v50 = 0uLL;
          uint64_t v17 = v52;
          *(_OWORD *)char v18 = v53;
          uint64_t v19 = v54;
          uint64_t v51 = 0;
          long long v53 = 0uLL;
          uint64_t v54 = 0;
          char v20 = 1;
        }
        char v21 = 1;
      }
    }
  }
  else
  {
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
    long long v4 = sub_215741BFC(&v23.__r_.__value_.__s.__data_[16], &v34);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
    v12[16] = 0;
    char v21 = 0;
    if (v32)
    {
      char v14 = 0;
      int v5 = v25;
      if (v25)
      {
        *(_OWORD *)&v12[16] = *(_OWORD *)v4;
        uint64_t v13 = *((void *)v4 + 2);
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)long long v4 = 0;
        char v14 = 1;
      }
      LOBYTE(v15) = 0;
      char v20 = 0;
      if (v31)
      {
        uint64_t v16 = v27;
        long long v15 = v26;
        long long v26 = 0uLL;
        uint64_t v17 = v28;
        *(_OWORD *)char v18 = v29;
        uint64_t v19 = v30;
        uint64_t v27 = 0;
        long long v29 = 0uLL;
        uint64_t v30 = 0;
        char v20 = 1;
      }
      char v21 = 1;
      char v22 = 0;
      if (v5 && v24 < 0) {
        operator delete((void *)v23.__r_.__value_.__r.__words[2]);
      }
    }
    else
    {
      char v22 = 0;
    }
    if (!v45 && v44)
    {
      if (v43)
      {
        if (v42 < 0) {
          operator delete(v39);
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(v37);
        }
      }
      if (v36 && SHIBYTE(v35) < 0) {
        operator delete((void *)v34);
      }
    }
  }
  if (v58)
  {
    if (v57)
    {
      int v6 = *(std::__shared_weak_count **)&v47[16];
      if (*(void *)&v47[16]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v47[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    else if (v56)
    {
      if (v55)
      {
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)v53);
        }
        if (SHIBYTE(v51) < 0) {
          operator delete((void *)v50);
        }
      }
      if (v49 && SHIBYTE(v48) < 0) {
        operator delete(*(void **)&v47[16]);
      }
    }
  }
  if (v22)
  {
    *(void *)a3 = &unk_26C678D20;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v12[8];
    *(void *)&v12[8] = 0;
    *(void *)&v12[16] = 0;
    *(unsigned char *)(a3 + 120) = 1;
  }
  else if (sub_215AB74CC() == *(void (****)(std::error_category *__hidden))&v12[8])
  {
    sub_215741BFC(__dst, (long long *)&v12[16]);
    sub_21599512C(v12[0], (long long *)__dst, (uint64_t)v47);
    *(_OWORD *)a3 = *(_OWORD *)v47;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 112) = 0;
    if (v56)
    {
      *(unsigned char *)(a3 + 40) = 0;
      int v8 = v49;
      if (v49)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)&v47[16];
        *(void *)(a3 + 32) = v48;
        *(void *)&v47[24] = 0;
        uint64_t v48 = 0;
        *(void *)&v47[16] = 0;
        *(unsigned char *)(a3 + 40) = 1;
      }
      *(unsigned char *)(a3 + 48) = 0;
      *(unsigned char *)(a3 + 104) = 0;
      if (v55)
      {
        uint64_t v9 = v52;
        *(void *)(a3 + 64) = v51;
        *(_OWORD *)(a3 + 48) = v50;
        long long v50 = 0uLL;
        *(void *)(a3 + 72) = v9;
        *(_OWORD *)(a3 + 80) = v53;
        *(void *)(a3 + 96) = v54;
        uint64_t v51 = 0;
        long long v53 = 0uLL;
        uint64_t v54 = 0;
        *(unsigned char *)(a3 + 104) = 1;
      }
      *(unsigned char *)(a3 + 112) = 1;
      *(unsigned char *)(a3 + 120) = 0;
      if (v8 && SHIBYTE(v48) < 0) {
        operator delete(*(void **)&v47[16]);
      }
    }
    else
    {
      *(unsigned char *)(a3 + 120) = 0;
    }
    if (v41)
    {
      if (v40)
      {
        if (SHIBYTE(v39) < 0) {
          operator delete(v38);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(v35);
        }
      }
      if (BYTE8(v34) && SBYTE7(v34) < 0) {
        operator delete(__dst[0]);
      }
    }
  }
  else
  {
    sub_215E10780((uint64_t)v12, &v23);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_215738B0C(__dst, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
      *(void *)&long long v34 = *((void *)&v23.__r_.__value_.__l + 2);
    }
    BYTE8(v34) = 1;
    LOBYTE(v35) = 0;
    char v40 = 0;
    char v41 = 1;
    sub_21599512C(3u, (long long *)__dst, (uint64_t)v47);
    *(_OWORD *)a3 = *(_OWORD *)v47;
    *(unsigned char *)(a3 + 16) = 0;
    *(unsigned char *)(a3 + 112) = 0;
    if (v56)
    {
      *(unsigned char *)(a3 + 40) = 0;
      int v10 = v49;
      if (v49)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)&v47[16];
        *(void *)(a3 + 32) = v48;
        *(void *)&v47[24] = 0;
        uint64_t v48 = 0;
        *(void *)&v47[16] = 0;
        *(unsigned char *)(a3 + 40) = 1;
      }
      *(unsigned char *)(a3 + 48) = 0;
      *(unsigned char *)(a3 + 104) = 0;
      if (v55)
      {
        uint64_t v11 = v52;
        *(void *)(a3 + 64) = v51;
        *(_OWORD *)(a3 + 48) = v50;
        long long v50 = 0uLL;
        *(void *)(a3 + 72) = v11;
        *(_OWORD *)(a3 + 80) = v53;
        *(void *)(a3 + 96) = v54;
        uint64_t v51 = 0;
        long long v53 = 0uLL;
        uint64_t v54 = 0;
        *(unsigned char *)(a3 + 104) = 1;
      }
      *(unsigned char *)(a3 + 112) = 1;
      *(unsigned char *)(a3 + 120) = 0;
      if (v10 && SHIBYTE(v48) < 0) {
        operator delete(*(void **)&v47[16]);
      }
    }
    else
    {
      *(unsigned char *)(a3 + 120) = 0;
    }
    if (v41)
    {
      if (v40)
      {
        if (SHIBYTE(v39) < 0) {
          operator delete(v38);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(v35);
        }
      }
      if (BYTE8(v34) && SBYTE7(v34) < 0) {
        operator delete(__dst[0]);
      }
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  if (v22)
  {
    int v7 = *(std::__shared_weak_count **)&v12[16];
    if (*(void *)&v12[16])
    {
      if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v12[16] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else if (v21)
  {
    if (v20)
    {
      if (SHIBYTE(v19) < 0) {
        operator delete(v18[0]);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete((void *)v15);
      }
    }
    if (v14 && SHIBYTE(v13) < 0) {
      operator delete(*(void **)&v12[16]);
    }
  }
}

void sub_215991EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a30 < 0)
  {
    operator delete(__p);
    sub_215831770((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_215831770((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_215991F2C(_Unwind_Exception *a1)
{
  sub_215993CE4(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_215991F44()
{
}

uint64_t sub_215991F58()
{
  return 1;
}

uint64_t sub_215991F60()
{
  return 0;
}

void sub_215991F6C()
{
}

uint64_t sub_215991F80()
{
  return 1;
}

uint64_t sub_215991F88()
{
  return 1;
}

void sub_215991F94()
{
}

void sub_215991FA8()
{
}

void sub_2159921F0(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215992214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215992258(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      sub_215738AC0();
    }
    long long v4 = *(void ***)(a1 + 8);
    uint64_t v5 = 96 * a2;
    int v6 = (char *)operator new(96 * a2);
    int v7 = &v6[(char *)v4 - (char *)v2];
    *(void *)&long long v10 = v7;
    *((void *)&v10 + 1) = &v6[v5];
    if (v4 != v2)
    {
      uint64_t v8 = 0;
      do
      {
        sub_21574709C(&v7[v8 * 8 - 96], (long long *)&v4[v8 - 12]);
        v8 -= 12;
      }
      while (&v4[v8] != v2);
      uint64_t v2 = *(void ***)a1;
      uint64_t v9 = *(void ***)(a1 + 8);
      *(void *)a1 = &v7[v8 * 8];
      *(_OWORD *)(a1 + 8) = v10;
      while (1)
      {
        if (v9 == v2) {
          goto LABEL_17;
        }
        if (*((unsigned char *)v9 - 16) && *((char *)v9 - 41) < 0)
        {
          operator delete(*(v9 - 8));
          if (!*((unsigned char *)v9 - 72)) {
            goto LABEL_7;
          }
        }
        else if (!*((unsigned char *)v9 - 72))
        {
          goto LABEL_7;
        }
        if (*((char *)v9 - 73) < 0) {
          operator delete(*(v9 - 12));
        }
LABEL_7:
        v9 -= 12;
      }
    }
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[v5];
LABEL_17:
    if (v2) {
      operator delete(v2);
    }
  }
}

uint64_t sub_21599240C(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void **__return_ptr, uint64_t *, uint64_t))
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    int v7 = a1;
    do
    {
      if (*((char *)v7 + 23) < 0)
      {
        uint64_t v9 = (uint64_t *)*v7;
        uint64_t v8 = v7[1];
      }
      else
      {
        uint64_t v8 = *((unsigned __int8 *)v7 + 23);
        uint64_t v9 = v7;
      }
      a4(v22, v9, v8);
      unint64_t v10 = *(void *)(a3 + 8);
      if (v10 >= *(void *)(a3 + 16))
      {
        char v20 = sub_2159925AC((char **)a3, (uint64_t)v22);
      }
      else
      {
        *(unsigned char *)unint64_t v10 = 0;
        *(unsigned char *)(v10 + 24) = 0;
        if (v24)
        {
          long long v11 = *(_OWORD *)v22;
          *(void *)(v10 + 16) = v23;
          *(_OWORD *)unint64_t v10 = v11;
          v22[1] = 0;
          uint64_t v23 = 0;
          v22[0] = 0;
          *(unsigned char *)(v10 + 24) = 1;
        }
        *(unsigned char *)(v10 + 32) = 0;
        *(unsigned char *)(v10 + 80) = 0;
        if (v27)
        {
          _X0 = 0;
          _X1 = 0;
          long long v14 = __p;
          *(void *)(v10 + 48) = v26;
          *(_OWORD *)(v10 + 32) = v14;
          uint64_t v26 = 0;
          long long __p = 0uLL;
          __asm { CASPAL          X0, X1, X0, X1, [X9] }
          *(void *)(v10 + 64) = _X0;
          *(void *)(v10 + 72) = 0;
          *(unsigned char *)(v10 + 80) = 1;
        }
        char v20 = (char *)(v10 + 96);
      }
      *(void *)(a3 + 8) = v20;
      if (v27 && SHIBYTE(v26) < 0) {
        operator delete((void *)__p);
      }
      if (v24 && SHIBYTE(v23) < 0) {
        operator delete(v22[0]);
      }
      v7 += 3;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_215992594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_2159925AC(char **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_215738AC0();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL) {
      sub_215738AD8();
    }
    int v7 = (char *)operator new(96 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = &v7[96 * v3];
  *((void *)&v25 + 1) = &v7[96 * v6];
  char *v8 = 0;
  v8[24] = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
    *((void *)v8 + 2) = *(void *)(a2 + 16);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    v8[24] = 1;
  }
  uint64_t v9 = &v7[96 * v3];
  v9[32] = 0;
  unint64_t v10 = v9 + 32;
  v10[48] = 0;
  long long v11 = &v7[96 * v3];
  if (*(unsigned char *)(a2 + 80))
  {
    _X2 = 0;
    _X3 = 0;
    long long v11 = &v7[96 * v3];
    *((void *)v10 + 2) = *(void *)(a2 + 48);
    *(_OWORD *)unint64_t v10 = *(_OWORD *)(a2 + 32);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    __asm { CASPAL          X2, X3, X2, X3, [X9] }
    *((void *)v11 + 8) = _X2;
    *((void *)v11 + 9) = 0;
    v10[48] = 1;
  }
  uint64_t v19 = v11 + 96;
  *(void *)&long long v25 = v11 + 96;
  char v21 = *a1;
  char v20 = a1[1];
  if (v20 != *a1)
  {
    uint64_t v22 = 0;
    do
    {
      sub_21574709C(&v8[v22 - 96], (long long *)&v20[v22 - 96]);
      v22 -= 96;
    }
    while (&v20[v22] != v21);
    char v20 = *a1;
    uint64_t v23 = (void **)a1[1];
    *a1 = &v8[v22];
    *(_OWORD *)(a1 + 1) = v25;
    uint64_t v19 = (char *)v25;
    while (1)
    {
      if (v23 == (void **)v20) {
        goto LABEL_29;
      }
      if (*((unsigned char *)v23 - 16) && *((char *)v23 - 41) < 0)
      {
        operator delete(*(v23 - 8));
        if (!*((unsigned char *)v23 - 72)) {
          goto LABEL_19;
        }
      }
      else if (!*((unsigned char *)v23 - 72))
      {
        goto LABEL_19;
      }
      if (*((char *)v23 - 73) < 0) {
        operator delete(*(v23 - 12));
      }
LABEL_19:
      v23 -= 12;
    }
  }
  *a1 = v8;
  a1[1] = v19;
  a1[2] = (char *)*((void *)&v25 + 1);
LABEL_29:
  if (v20) {
    operator delete(v20);
  }
  return v19;
}

uint64_t sub_215992840(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = sub_21599298C((uint64_t)&v18, a2, a3);
  if (result)
  {
    unint64_t v6 = (uint64_t *)a2[5];
    int v7 = (unsigned __int8 ***)a3[5];
    if (*((unsigned char *)v6 + 24)) {
      BOOL v8 = *((unsigned char *)v7 + 24) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (v8)
    {
      return (*((unsigned char *)v6 + 24) != 0) == (*((unsigned char *)v7 + 24) != 0);
    }
    else
    {
      uint64_t v10 = *v6;
      uint64_t v9 = v6[1];
      long long v11 = *v7;
      if (v9 - *v6 == (char *)v7[1] - (char *)*v7)
      {
        if (v10 == v9) {
          return 1;
        }
        while (1)
        {
          uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
          if ((v12 & 0x80u) == 0) {
            uint64_t v13 = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 23);
          }
          else {
            uint64_t v13 = *(unsigned __int8 **)(v10 + 8);
          }
          long long v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
          int v15 = (char)v14;
          if ((char)v14 < 0) {
            long long v14 = v11[1];
          }
          if (v13 != v14) {
            break;
          }
          if (v15 >= 0) {
            uint64_t v16 = (unsigned __int8 *)v11;
          }
          else {
            uint64_t v16 = *v11;
          }
          if ((v12 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v16, *(void *)(v10 + 8))) {
              return 0;
            }
          }
          else if (*(unsigned char *)(v10 + 23))
          {
            uint64_t v17 = 0;
            while (*(unsigned __int8 *)(v10 + v17) == v16[v17])
            {
              if (v12 == ++v17) {
                goto LABEL_13;
              }
            }
            return 0;
          }
LABEL_13:
          v10 += 24;
          v11 += 3;
          uint64_t result = 1;
          if (v10 == v9) {
            return result;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_21599298C(uint64_t a1, void *a2, void *a3)
{
  if (!sub_215992B68((uint64_t)&v30, a2, a3)) {
    return 0;
  }
  uint64_t v5 = (unsigned __int8 *)a2[3];
  unint64_t v6 = (unsigned __int8 **)a3[3];
  int v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24]) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0)) {
      return 0;
    }
    goto LABEL_25;
  }
  uint64_t v10 = v5[23];
  if ((v10 & 0x80u) == 0) {
    long long v11 = (unsigned __int8 *)v5[23];
  }
  else {
    long long v11 = (unsigned __int8 *)*((void *)v5 + 1);
  }
  uint64_t v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  int v13 = (char)v12;
  if ((char)v12 < 0) {
    uint64_t v12 = v6[1];
  }
  if (v11 != v12) {
    return 0;
  }
  if (v13 >= 0) {
    long long v14 = (unsigned __int8 *)a3[3];
  }
  else {
    long long v14 = *v6;
  }
  if ((v10 & 0x80) == 0)
  {
    if (v5[23])
    {
      while (*v5 == *v14)
      {
        ++v5;
        ++v14;
        if (!--v10) {
          goto LABEL_25;
        }
      }
      return 0;
    }
    goto LABEL_25;
  }
  if (memcmp(*(const void **)v5, v14, *((void *)v5 + 1))) {
    return 0;
  }
LABEL_25:
  int v15 = (unsigned __int8 *)a2[4];
  uint64_t v16 = (unsigned __int8 **)a3[4];
  if (v15[24]) {
    BOOL v17 = *((unsigned char *)v16 + 24) == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    return (v15[24] != 0) == (*((unsigned char *)v16 + 24) != 0);
  }
  uint64_t v18 = v15[23];
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = (unsigned __int8 *)v15[23];
  }
  else {
    uint64_t v19 = (unsigned __int8 *)*((void *)v15 + 1);
  }
  char v20 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  int v21 = (char)v20;
  if ((char)v20 < 0) {
    char v20 = v16[1];
  }
  if (v19 != v20) {
    return 0;
  }
  if (v21 >= 0) {
    uint64_t v22 = (unsigned __int8 *)a3[4];
  }
  else {
    uint64_t v22 = *v16;
  }
  if ((v18 & 0x80) != 0) {
    return memcmp(*(const void **)v15, v22, *((void *)v15 + 1)) == 0;
  }
  if (!v15[23]) {
    return 1;
  }
  uint64_t v23 = v18 - 1;
  do
  {
    int v25 = *v15++;
    int v24 = v25;
    int v27 = *v22++;
    int v26 = v27;
    BOOL v29 = v23-- != 0;
    uint64_t result = v24 == v26;
  }
  while (v24 == v26 && v29);
  return result;
}

BOOL sub_215992B68(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)*a2 != *(void *)*a3 || *(unsigned __int8 *)(*a2 + 8) != *(unsigned __int8 *)(*a3 + 8)) {
    return 0;
  }
  uint64_t v5 = (unsigned __int8 *)a2[1];
  unint64_t v6 = (unsigned __int8 **)a3[1];
  int v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24]) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0)) {
      return 0;
    }
  }
  else
  {
    uint64_t v13 = v5[23];
    if ((v13 & 0x80u) == 0) {
      long long v14 = (unsigned __int8 *)v5[23];
    }
    else {
      long long v14 = (unsigned __int8 *)*((void *)v5 + 1);
    }
    int v15 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    int v16 = (char)v15;
    if ((char)v15 < 0) {
      int v15 = v6[1];
    }
    if (v14 != v15) {
      return 0;
    }
    if (v16 >= 0) {
      BOOL v17 = (unsigned __int8 *)a3[1];
    }
    else {
      BOOL v17 = *v6;
    }
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v17, *((void *)v5 + 1))) {
        return 0;
      }
    }
    else if (v5[23])
    {
      while (*v5 == *v17)
      {
        ++v5;
        ++v17;
        if (!--v13) {
          goto LABEL_9;
        }
      }
      return 0;
    }
  }
LABEL_9:
  uint64_t v9 = a2[2];
  uint64_t v10 = a3[2];
  if (*(unsigned char *)(v9 + 16)) {
    BOOL v11 = *(unsigned char *)(v10 + 16) == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    return (*(unsigned char *)(v9 + 16) != 0) == (*(unsigned char *)(v10 + 16) != 0);
  }
  if (*(void *)v9 == *(void *)v10) {
    return *(unsigned __int8 *)(v9 + 8) == *(unsigned __int8 *)(v10 + 8);
  }
  return 0;
}

double sub_215992CCC@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  sub_215742B04((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_215992DD8(*a1, a1[1], (uint64_t)&v6);
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  return result;
}

void sub_215992D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  if (__p)
  {
    BOOL v11 = a10;
    uint64_t v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != __p);
      uint64_t v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215992DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215991FA8();
  }
  return a3;
}

void sub_215992EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_215992F3C@<D0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[1] - *a1;
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  sub_215992258((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_21599240C(*a1, a1[1], (uint64_t)&v6, (void (*)(void **__return_ptr, uint64_t *, uint64_t))sub_215AEF2F0);
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  return result;
}

void sub_215992FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  if (__p)
  {
    BOOL v11 = a10;
    uint64_t v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((unsigned char *)v11 - 16) && *((char *)v11 - 41) < 0) {
          operator delete(*(v11 - 8));
        }
        if (*((unsigned char *)v11 - 72))
        {
          if (*((char *)v11 - 73) < 0) {
            operator delete(*(v11 - 12));
          }
        }
        v11 -= 12;
      }
      while (v11 != __p);
      uint64_t v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_215993098(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_215993114(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_215993190(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2159931AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2159931CC()
{
}

double sub_2159931E0(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  sub_215990288((uint64_t)&v44, **(void **)(a1 + 16), *(uint64_t **)(*(void *)(a1 + 16) + 8));
  sub_2157328B8((uint64_t)v29);
  v28[1] = 1;
  v28[2] = v30;
  v28[0] = &unk_26C685248;
  LODWORD(v53) = 2;
  std::ostream::write();
  LODWORD(v53) = 2;
  std::ostream::write();
  uint64_t v2 = v47;
  if ((v47 & 0x80u) != 0) {
    uint64_t v2 = v46;
  }
  *(void *)&long long v53 = v2;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  if (v50 > 1) {
    sub_215742D4C();
  }
  uint64_t v3 = v48;
  uint64_t v4 = v49;
  if (v49)
  {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(void *)&long long v53 = &unk_26C6746E8;
  *((void *)&v53 + 1) = v3;
  LODWORD(v40) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  std::ostream::write();
  (*(void (**)(void, void *, void))(**((void **)&v53 + 1) + 32))(*((void *)&v53 + 1), v28, v40);
  if ((v38 & 0x10) != 0)
  {
    unint64_t v7 = v37;
    if (v37 < v34)
    {
      unint64_t v37 = v34;
      unint64_t v7 = v34;
    }
    BOOL v8 = v33;
    size_t v5 = v7 - (void)v33;
    if (v7 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_54;
    }
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      size_t v5 = 0;
      HIBYTE(v27) = 0;
      p_dst = &__dst;
      goto LABEL_20;
    }
    BOOL v8 = v31;
    size_t v5 = v32 - (void)v31;
    if ((unint64_t)(v32 - (void)v31) >= 0x7FFFFFFFFFFFFFF8) {
LABEL_54:
    }
      sub_215731CD8();
  }
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v5;
    unint64_t v27 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v27) = v5;
  p_dst = &__dst;
  if (v5) {
LABEL_19:
  }
    memmove(p_dst, v8, v5);
LABEL_20:
  *((unsigned char *)p_dst + v5) = 0;
  BOOL v11 = (char *)operator new(0x30uLL);
  uint64_t v12 = (std::__shared_weak_count *)v11;
  *((void *)v11 + 1) = 0;
  uint64_t v13 = (atomic_ullong *)(v11 + 8);
  *((void *)v11 + 2) = 0;
  *(void *)BOOL v11 = &unk_26C6748C0;
  long long v14 = v11 + 24;
  unint64_t v15 = v27;
  *((void *)v11 + 5) = v27;
  *(_OWORD *)(v11 + 24) = __dst;
  long long __dst = 0uLL;
  unint64_t v27 = 0;
  char v42 = v11 + 24;
  char v43 = v11;
  uint64_t v16 = HIBYTE(v15);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = (uint64_t)(v11 + 24);
  }
  else {
    uint64_t v17 = *((void *)v11 + 3);
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = *((void *)v11 + 4);
  }
  if (!v17
    && v18
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  *((void *)&v53 + 1) = v14;
  uint64_t v54 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  *(void *)&long long v53 = sub_215993B38;
  sub_215D0C048(&v40, (void (**)(uint64_t))&v53, v18, v17);
  if ((void)v53) {
    ((void (*)(void, long long *, void, void, void))v53)(0, &v53, 0, 0, 0);
  }
  if (atomic_fetch_add(v13, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v25 = v40;
    long long v53 = v41;
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_33;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v25 = v40;
    long long v53 = v41;
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_33;
    }
  }
  operator delete((void *)__dst);
LABEL_33:
  v29[0] = *MEMORY[0x263F8C2B8];
  uint64_t v19 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v29 + *(void *)(v29[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v30[0] = v19;
  v30[1] = MEMORY[0x263F8C318] + 16;
  if (v36 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2166C4BF0](&v39);
  char v20 = v51;
  if (v51)
  {
    int v21 = v52;
    uint64_t v22 = v51;
    if (v52 != v51)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      uint64_t v22 = v51;
    }
    uint64_t v52 = v20;
    operator delete(v22);
  }
  if (v50 != -1) {
    ((void (*)(void *, uint64_t *))off_26C674850[v50])(v29, &v48);
  }
  unsigned int v50 = -1;
  if ((char)v47 < 0) {
    operator delete(v45);
  }
  if (*(unsigned char *)(v1 + 128))
  {
    sub_21574A71C(v1);
    *(unsigned char *)(v1 + 128) = 0;
  }
  *(_OWORD *)uint64_t v1 = v25;
  double result = *(double *)&v53;
  *(_OWORD *)(v1 + 16) = v53;
  *(unsigned char *)(v1 + 120) = 1;
  *(unsigned char *)(v1 + 128) = 1;
  return result;
}

void sub_21599386C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

void sub_215993AAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6748C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_215993ACC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C6748C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_215993B20(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void *sub_215993B38(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  double result = &unk_26C674900;
  switch(v5)
  {
    case 1:
      uint64_t v9 = a2[2];
      a3[1] = a2[1];
      a3[2] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      double result = 0;
      *a3 = sub_215993B38;
      return result;
    case 2:
      double result = 0;
      *(_OWORD *)(a3 + 1) = *(_OWORD *)(a2 + 1);
      a2[1] = 0;
      a2[2] = 0;
      *a3 = sub_215993B38;
      *a2 = 0;
      return result;
    case 3:
      if (a4)
      {
        uint64_t v10 = *(void *)(a4 + 8);
        if (v10 != 0x8000000215ED1041)
        {
          if (((v10 & 0x8000000215ED1041 & 0x8000000000000000) != 0) == __OFSUB__(v10, 0x8000000215ED1041)) {
            return 0;
          }
          if (strcmp((const char *)(v10 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000215ED1041 & 0x7FFFFFFFFFFFFFFFLL)))
          {
            return 0;
          }
        }
      }
      else if (a5 != &unk_215ED1094)
      {
        return 0;
      }
      return a2 + 1;
    case 4:
      return result;
    default:
      BOOL v8 = (std::__shared_weak_count *)a2[2];
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      double result = 0;
      *a2 = 0;
      return result;
  }
}

uint64_t sub_215993CE4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 128)) {
    return a1;
  }
  if (*(unsigned char *)(a1 + 120))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
      return a1;
    }
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    return a1;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 112)) {
      return a1;
    }
    if (*(unsigned char *)(a1 + 104))
    {
      if (*(char *)(a1 + 103) < 0) {
        operator delete(*(void **)(a1 + 80));
      }
      if (*(char *)(a1 + 71) < 0) {
        operator delete(*(void **)(a1 + 48));
      }
    }
    if (!*(unsigned char *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
}

void sub_215993DC8()
{
}

double sub_215993DDC(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v3 = *(uint64_t **)v1;
  int v40 = 0;
  long long v39 = 0u;
  long long v38 = 0u;
  *(_OWORD *)unint64_t v37 = 0u;
  sub_2157BB1A4(&v41, v3);
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 24);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  sub_215CF5F74(&v32, v5, v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 16))(v33);
  v31[1] = 1;
  v31[2] = v8;
  v31[0] = &unk_26C685388;
  LODWORD(v50) = 2;
  std::istream::read();
  unsigned int v9 = v50;
  if (v50 >= 2) {
    unsigned int v9 = 2;
  }
  if (v9 >= 2)
  {
    LODWORD(v50) = 2;
    std::istream::read();
    unsigned int v10 = v50;
    if (v50 >= 2) {
      unsigned int v10 = 2;
    }
    if (v10 < 2)
    {
      sub_215994750((uint64_t)v31, (uint64_t)v37);
LABEL_31:
      sub_2159905B0((uint64_t)&v36);
      if (v40) {
        sub_215742D4C();
      }
      unint64_t v50 = (unint64_t)&unk_26C6746A0;
      *(void *)&long long v51 = v39;
      LODWORD(v43) = 2;
      std::istream::read();
      (*(void (**)(void, void *, void))(*(void *)v51 + 40))(v51, v31, v43);
      goto LABEL_63;
    }
    unint64_t v50 = 0;
    std::istream::read();
    if (SBYTE7(v38) < 0)
    {
      BOOL v11 = v37[1];
      if (v37[1] >= (void *)v50)
      {
        uint64_t v12 = (void **)v37[0];
        v37[1] = (void *)v50;
        goto LABEL_29;
      }
    }
    else
    {
      BOOL v11 = (void *)BYTE7(v38);
      if (v50 <= BYTE7(v38))
      {
        BYTE7(v38) = v50 & 0x7F;
        uint64_t v12 = v37;
LABEL_29:
        *((unsigned char *)v12 + v50) = 0;
        goto LABEL_30;
      }
    }
    std::string::append((std::string *)v37, v50 - (void)v11, 0);
LABEL_30:
    std::istream::read();
    std::istream::read();
    goto LABEL_31;
  }
  int v54 = 0;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  sub_2157BB1A4(&v55, (uint64_t *)&v41);
  LODWORD(v43) = 2;
  std::istream::read();
  unsigned int v13 = v43;
  if (v43 >= 2) {
    unsigned int v13 = 2;
  }
  if (v13 >= 2)
  {
    unint64_t v43 = 0;
    std::istream::read();
    if (SBYTE7(v52) < 0)
    {
      uint64_t v14 = *((void *)&v51 + 1);
      if (*((void *)&v51 + 1) >= v43)
      {
        unint64_t v15 = (long long *)v51;
        *((void *)&v51 + 1) = v43;
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v14 = BYTE7(v52);
      if (v43 <= BYTE7(v52))
      {
        BYTE7(v52) = v43 & 0x7F;
        unint64_t v15 = &v51;
LABEL_34:
        *((unsigned char *)v15 + v43) = 0;
        goto LABEL_35;
      }
    }
    std::string::append((std::string *)&v51, v43 - v14, 0);
LABEL_35:
    std::istream::read();
    std::istream::read();
    goto LABEL_36;
  }
  sub_215994750((uint64_t)v31, (uint64_t)&v51);
LABEL_36:
  sub_21598FEFC((uint64_t)&v50);
  if (v54) {
    sub_215742D4C();
  }
  unint64_t v43 = (unint64_t)&unk_26C674658;
  char v44 = (void *)v53;
  unsigned int v35 = 1;
  std::istream::read();
  (*(void (**)(void *, void *, void))(*(void *)v44 + 40))(v44, v31, v35);
  sub_215994890((uint64_t)&v43, (uint64_t)&v50);
  sub_2159949FC((uint64_t)&v36, (uint64_t)&v43);
  uint64_t v16 = (char *)__p;
  if (__p)
  {
    uint64_t v17 = v49;
    uint64_t v18 = __p;
    if (v49 != __p)
    {
      do
      {
        uint64_t v19 = (std::__shared_weak_count *)*((void *)v17 - 1);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v17 -= 16;
      }
      while (v17 != v16);
      uint64_t v18 = __p;
    }
    unsigned __int8 v49 = v16;
    operator delete(v18);
  }
  if (v47 != -1) {
    ((void (*)(unsigned int *, uint64_t *))off_26C674850[v47])(&v35, &v46);
  }
  int v47 = -1;
  if (v45 < 0) {
    operator delete(v44);
  }
  char v20 = v55;
  if (v55)
  {
    int v21 = v56;
    uint64_t v22 = v55;
    if (v56 != v55)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      uint64_t v22 = v55;
    }
    char v56 = v20;
    operator delete(v22);
  }
  if (v54 != -1) {
    ((void (*)(unint64_t *, long long *))off_26C674850[v54])(&v43, &v53);
  }
  int v54 = -1;
  if (SBYTE7(v52) < 0) {
    operator delete((void *)v51);
  }
LABEL_63:
  sub_2159904A8((uint64_t)&v36, &v50);
  int v24 = v34;
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  long long v25 = (char *)v41;
  if (v41)
  {
    int v26 = v42;
    unint64_t v27 = v41;
    if (v42 != v41)
    {
      do
      {
        uint64_t v28 = (std::__shared_weak_count *)*((void *)v26 - 1);
        if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
        v26 -= 16;
      }
      while (v26 != v25);
      unint64_t v27 = v41;
    }
    char v42 = v25;
    operator delete(v27);
  }
  if (v40 != -1) {
    ((void (*)(unint64_t *, long long *))off_26C674850[v40])(&v43, &v39);
  }
  int v40 = -1;
  if (SBYTE7(v38) < 0) {
    operator delete(v37[0]);
  }
  if (*(unsigned char *)(v2 + 128))
  {
    if (*(unsigned char *)(v2 + 120))
    {
      BOOL v29 = *(std::__shared_weak_count **)(v2 + 16);
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    else if (*(unsigned char *)(v2 + 112))
    {
      if (*(unsigned char *)(v2 + 104))
      {
        if (*(char *)(v2 + 103) < 0) {
          operator delete(*(void **)(v2 + 80));
        }
        if (*(char *)(v2 + 71) < 0) {
          operator delete(*(void **)(v2 + 48));
        }
      }
      if (*(unsigned char *)(v2 + 40) && *(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
  }
  *(void *)uint64_t v2 = &unk_26C678D20;
  double result = *(double *)&v51;
  *(_OWORD *)(v2 + 8) = v51;
  *(unsigned char *)(v2 + 120) = 1;
  *(unsigned char *)(v2 + 128) = 1;
  return result;
}

void sub_2159945B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,void *__p,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_215731D80(exception_object);
}

void sub_215994750(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  __n.__r_.__value_.__r.__words[0] = 0;
  std::istream::read();
  *((unsigned char *)&v6.__r_.__value_.__s + 23) = 0;
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::istream::read();
  std::istream::read();
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    sub_215738B0C(&__n, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __n = v6;
  }
  int v3 = v7;
  int v5 = v7;
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    int v3 = v5;
  }
  *(std::string *)a2 = __n;
  *(_DWORD *)(a2 + 24) = v3;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_215994870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_215994890(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0)
  {
    sub_215738B0C(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 24);
  }
  int v10 = *(_DWORD *)(a2 + 32);
  v6[0] = 0;
  int v7 = -1;
  uint64_t v4 = *(unsigned int *)(a2 + 56);
  if (v4 != -1)
  {
    ((void (*)(char *, unsigned char *, uint64_t))off_26C674860[v4])(&v11, v6, a2 + 40);
    int v7 = v4;
  }
  sub_215990388(a1, (long long *)__p, (uint64_t)v6, (uint64_t *)(a2 + 64));
  if (v7 != -1) {
    ((void (*)(char *, unsigned char *))off_26C674850[v7])(&v12, v6);
  }
  int v7 = -1;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_2159949A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12 != -1) {
    ((void (*)(uint64_t, char *))off_26C674850[a12])(v18 - 33, &a10);
  }
  a12 = -1;
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159949FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  int v5 = (long long *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  long long v6 = *v5;
  *(void *)(v4 + 16) = *((void *)v5 + 2);
  *(_OWORD *)uint64_t v4 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v7 = *(unsigned int *)(a1 + 56);
  uint64_t v8 = *(unsigned int *)(a2 + 56);
  if (v7 == -1)
  {
    if (v8 == -1) {
      goto LABEL_8;
    }
  }
  else if (v8 == -1)
  {
    ((void (*)(char *, uint64_t))off_26C674850[v7])(&v16, a1 + 40);
    *(_DWORD *)(a1 + 56) = -1;
    goto LABEL_8;
  }
  uint64_t v15 = a1 + 40;
  ((void (*)(uint64_t *))off_26C674950[v8])(&v15);
LABEL_8:
  uint64_t v9 = (void **)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 64);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 72);
    char v12 = *(void **)(a1 + 64);
    if (v11 != v10)
    {
      do
      {
        unsigned int v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v11 -= 16;
      }
      while (v11 != v10);
      char v12 = *v9;
    }
    *(void *)(a1 + 72) = v10;
    operator delete(v12);
    *uint64_t v9 = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  return a1;
}

uint64_t sub_215994B88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        int v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 64);
    }
    *(void *)(a1 + 72) = v2;
    operator delete(v4);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 56);
  if (v6 != -1) {
    ((void (*)(char *, uint64_t))off_26C674850[v6])(&v8, a1 + 40);
  }
  *(_DWORD *)(a1 + 56) = -1;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_215994C84(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 16);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26C674850[v5])(&v8, v4);
LABEL_7:
    *(_OWORD *)uint64_t v4 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    return;
  }
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_215994D6C(uint64_t *a1, uint64_t a2, long long *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 16);
  if (v5 == -1) {
    goto LABEL_7;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_26C674850[v5])(&v8, v4);
LABEL_7:
    *(_OWORD *)uint64_t v4 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 1;
    return;
  }
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t sub_215994E5C(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  sub_2157EC664(v4, "data of type ");
  v6[0] = a2;
  v6[1] = a2 + 24;
  uint64_t v9 = v4;
  uint64_t v10 = "{";
  uint64_t v11 = (char *)v4;
  char v12 = "{";
  unsigned int v13 = "{";
  if (v5 == -1) {
    goto LABEL_8;
  }
  char v8 = &v9;
  ((void (*)(void ***, _DWORD *))off_26C674960[v5])(&v8, v4);
  LOBYTE(v9) = 1;
  uint64_t v10 = (const char *)v4;
  uint64_t v11 = &v7;
  sub_2158B26CC((uint64_t)v6, (uint64_t)&v9);
  uint64_t v9 = v4;
  uint64_t v10 = "}";
  uint64_t v11 = (char *)v4;
  char v12 = "}";
  unsigned int v13 = "}";
  if (v5 == -1) {
LABEL_8:
  }
    sub_215742D4C();
  char v8 = &v9;
  ((void (*)(void ***, _DWORD *))off_26C674960[v5])(&v8, v4);
  uint64_t v9 = v4;
  uint64_t v10 = " is not serializable";
  uint64_t v11 = (char *)v4;
  char v12 = " is not serializable";
  unsigned int v13 = " is not serializable";
  if (v5 == -1) {
    sub_215742D4C();
  }
  v6[0] = &v9;
  ((void (*)(void *, _DWORD *))off_26C674978[v5])(v6, v4);
  if (v5 == -1) {
    sub_215742D4C();
  }
  uint64_t v9 = v6;
  uint64_t result = ((uint64_t (*)(void **, _DWORD *))off_26C674838[v5])(&v9, v4);
  if (v5 != -1) {
    return ((uint64_t (*)(void **, _DWORD *))off_26C674820[v5])(&v9, v4);
  }
  return result;
}

void sub_215995000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215995014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215995028(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21599503C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215995050(void *a1)
{
  if (a1)
  {
    sub_215995050(*a1);
    sub_215995050(a1[1]);
    uint64_t v2 = a1[5];
    if (v2)
    {
      uint64_t v3 = a1[6];
      uint64_t v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          int v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          v3 -= 16;
        }
        while (v3 != v2);
        uint64_t v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

void sub_21599512C(unsigned int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_215741BFC(v7, a2);
  sub_2159952A8((uint64_t)&v16, a1, (long long *)v7);
  *(_OWORD *)a3 = v16;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 112) = 0;
  if (v26)
  {
    *(unsigned char *)(a3 + 40) = 0;
    int v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(void *)(a3 + 32) = v18;
      uint64_t v18 = 0;
      long long __p = 0uLL;
      *(unsigned char *)(a3 + 40) = 1;
    }
    *(unsigned char *)(a3 + 48) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    if (v25)
    {
      uint64_t v6 = v22;
      *(void *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      long long v20 = 0uLL;
      *(void *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(void *)(a3 + 96) = v24;
      uint64_t v21 = 0;
      long long v23 = 0uLL;
      uint64_t v24 = 0;
      *(unsigned char *)(a3 + 104) = 1;
    }
    *(unsigned char *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0) {
      operator delete((void *)__p);
    }
  }
  if (v15)
  {
    if (!v14) {
      goto LABEL_13;
    }
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9) {
          return;
        }
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9) {
      return;
    }
LABEL_14:
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_215995294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159952A8(uint64_t a1, unsigned int a2, long long *a3)
{
  uint64_t v6 = sub_215AB74CC();
  sub_215741BFC(__dst, a3);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (!v18) {
    return a1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  if (v11)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(void *)(a1 + 32) = v10;
    __dst[1] = 0;
    uint64_t v10 = 0;
    __dst[0] = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  if (!v17)
  {
    *(unsigned char *)(a1 + 112) = 1;
    if (!v11) {
      return a1;
    }
    goto LABEL_13;
  }
  uint64_t v7 = v14;
  *(void *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v12;
  v12[0] = 0;
  v12[1] = 0;
  *(void *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(void *)(a1 + 96) = v16;
  __p[1] = 0;
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  __p[0] = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(unsigned char *)(a1 + 112) = 1;
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(v12[0]);
    if (!v11) {
      return a1;
    }
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v13) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if (!v11) {
    return a1;
  }
LABEL_13:
  if ((SHIBYTE(v10) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(__dst[0]);
  return a1;
}

std::string *sub_215995408()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888580, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888580))
  {
    return &stru_267888568;
  }
  sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 1U]", __p);
  sub_215E1A038((uint64_t)__p, &stru_267888568);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888568, &dword_21572C000);
  __cxa_guard_release(&qword_267888580);
  return &stru_267888568;
}

void sub_2159954CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267888580);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267888580);
  _Unwind_Resume(a1);
}

uint64_t sub_21599550C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 96);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674AF0[v2])(&v4, a1 + 32);
  }
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

double sub_215995568@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  *(void *)a2 = *(void *)(a1 + 8);
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = 0;
  int v5 = (unsigned char *)(a2 + 16);
  *(unsigned char *)(a2 + 40) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_215738B0C(v5, *(void **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)int v5 = v6;
      *(void *)(a2 + 32) = *(void *)(a1 + 40);
    }
    *(unsigned char *)(a2 + 40) = 1;
  }
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  if (*(unsigned char *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_215738B0C((unsigned char *)(a2 + 48), *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      long long v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(void *)(a2 + 64) = *(void *)(a1 + 96);
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
    *(void *)(a2 + 80) = *(void *)(a1 + 56);
    *(void *)(a2 + 88) = v7;
    *(unsigned char *)(a2 + 96) = 1;
    if (*(unsigned char *)(a1 + 136)) {
      goto LABEL_13;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 80) = 0;
    *(unsigned char *)(a2 + 96) = 0;
    if (*(unsigned char *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_215738B0C(__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
      }
      else
      {
        long long v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)long long __dst = v6;
        *(void *)&__dst[16] = *(void *)(a1 + 128);
      }
      uint64_t v9 = *(void *)&__dst[8];
      uint64_t v10 = *(void *)&__dst[15];
      *(void *)(a2 + 112) = *(void *)__dst;
      *(void *)(a2 + 120) = v9;
      *(void *)(a2 + 127) = v10;
      *(unsigned char *)(a2 + 135) = __dst[23];
      *(void *)(a2 + 144) = 0;
      *(void *)(a2 + 152) = 0;
      *(unsigned char *)(a2 + 160) = 1;
      char v8 = *(unsigned char *)(a1 + 168);
      if (v8) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
  }
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  char v8 = *(unsigned char *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_2159A4240((uint64_t **)(a1 + 144), (uint64_t)__dst);
    *(void *)&long long v6 = *(void *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(void *)(a2 + 192) = *(void *)&__dst[16];
    *(unsigned char *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(unsigned char *)(a2 + 176) = 0;
  *(unsigned char *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_215995718(_Unwind_Exception *exception_object)
{
  if (v1[72] && v1[71] < 0) {
    operator delete(*v3);
  }
  if (v1[40])
  {
    if (v1[39] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_215995784(void *a1, uint64_t a2)
{
  *a1 = &unk_26C6749C8;
  a1[1] = &unk_26C674A40;
  sub_2159A3DA4((uint64_t)(a1 + 2), (uint64_t *)(a2 + 64));
  v16[0] = &unk_26C65F5B0;
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(std::__shared_weak_count **)(a2 + 24);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = *(void *)(a2 + 48);
    int v12 = *(_DWORD *)(a2 + 56);
    __int16 v13 = *(_WORD *)(a2 + 60);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 48);
    int v12 = *(_DWORD *)(a2 + 56);
    __int16 v13 = *(_WORD *)(a2 + 60);
  }
  v16[1] = v9;
  char v17 = v10;
  uint64_t v18 = *(void *)(a2 + 32);
  int v19 = *(_DWORD *)(a2 + 40);
  uint64_t v20 = v11;
  int v21 = v12;
  __int16 v22 = v13;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_215BAEB78((uint64_t)(a1 + 24), (uint64_t)v16, 0, v4, v5, v6, v7, v8);
  uint64_t v14 = v17;
  if (!v17 || atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  return a1;
}

void sub_215995930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215822608((uint64_t)va);
  sub_21599FF58(v2);
  _Unwind_Resume(a1);
}

void sub_21599594C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6749C8;
  *(void *)(a1 + 8) = &unk_26C674A40;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v1 = &unk_26C665E60;
  sub_2159AF3B0();
}

void sub_215995A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2158B8D1C((uint64_t)&a9);
  sub_21599FF58(v9);
  _Unwind_Resume(a1);
}

void sub_215995A80(_Unwind_Exception *a1)
{
  sub_21599FF58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_215995A94(uint64_t a1)
{
  *(void *)a1 = &unk_26C6749C8;
  *(void *)(a1 + 8) = &unk_26C674A40;
  uint64_t v2 = *(unsigned int *)(a1 + 288);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674AF0[v2])(&v4, a1 + 224);
  }
  *(_DWORD *)(a1 + 288) = -1;
  sub_21599FF58(a1 + 16);
  return a1;
}

uint64_t sub_215995B34(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6749C8;
  *(void *)a1 = &unk_26C674A40;
  uint64_t v2 = *(unsigned int *)(a1 + 280);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674AF0[v2])(&v4, a1 + 216);
  }
  *(_DWORD *)(a1 + 280) = -1;
  return sub_21599FF58(a1 + 8);
}

uint64_t sub_215995BD0(uint64_t a1)
{
  *(void *)a1 = &unk_26C6749C8;
  *(void *)(a1 + 8) = &unk_26C674A40;
  uint64_t v2 = *(unsigned int *)(a1 + 288);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674AF0[v2])(&v4, a1 + 224);
  }
  *(_DWORD *)(a1 + 288) = -1;
  sub_21599FF58(a1 + 16);
  return MEMORY[0x2166C4D20](a1, 0x10F3C406E56456ELL);
}

uint64_t sub_215995C84(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C6749C8;
  *(void *)a1 = &unk_26C674A40;
  uint64_t v3 = *(unsigned int *)(a1 + 280);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674AF0[v3])(&v5, a1 + 216);
  }
  *(_DWORD *)(a1 + 280) = -1;
  sub_21599FF58(a1 + 8);
  return MEMORY[0x2166C4D20](v2, 0x10F3C406E56456ELL);
}

void sub_215995D38(uint64_t a1, void *a2)
{
}

void sub_215995D48(void *a1, uint64_t a2)
{
  char v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    if (*(unsigned __int8 *)v4[5] <= 1u)
    {
      int v6 = *((unsigned __int8 *)v4 + 88);
      v4[9] = "info";
      v4[10] = 4;
      if (!v6) {
        *((unsigned char *)v4 + 88) = 1;
      }
    }
    sub_215DEC088((uint64_t)v4);
    __src = "version";
    uint64_t v46 = 7;
    int v47 = 6;
    if (**(unsigned __int8 **)(v5 + 40) <= 1u)
    {
      int v7 = *(unsigned __int8 *)(v5 + 88);
      *(void *)(v5 + 72) = "version";
      *(void *)(v5 + 80) = 7;
      if (!v7) {
        *(unsigned char *)(v5 + 88) = 1;
      }
    }
    sub_215DEE064(v5, &v47);
    sub_2159A439C(v5, a2 + 16);
  }
  uint64_t v8 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = v8[3];
    if (*(unsigned char *)(v10 + 40))
    {
      __src = (const char *)(v10 + 16);
      sub_215E05FEC((uint64_t **)&__src, 6u);
    }
    else
    {
      LOBYTE(__src) = 6;
      std::ostream::write();
    }
    sub_215E0076C(v9[3]);
    sub_2159A6DFC((uint64_t)v9, a2 + 16, 6u);
    uint64_t v15 = v9[3];
    uint64_t v16 = *(void *)(*(void *)(v15 + 88) - 8);
    sub_215E001AC((uint64_t *)(v15 + 48), *(void *)(v15 + 16) - v16 - 9);
    size_t v17 = *(void *)(v15 + 48);
    if (v17) {
      memmove((void *)(*(void *)(v15 + 24) + v16), *(const void **)(v15 + 56), v17);
    }
    *(void *)(v15 + 48) = 0;
    uint64_t v18 = *(void *)(v15 + 80);
    uint64_t v19 = *(void *)(v15 + 88) - 8;
    *(void *)(v15 + 88) = v19;
    if (v18 == v19)
    {
      std::ostream::write();
      if (*(unsigned char *)(v15 + 40))
      {
        free(*(void **)(v15 + 24));
        *(unsigned char *)(v15 + 40) = 0;
      }
    }
    uint64_t v20 = a2 + 192;
    uint64_t v21 = v9[3];
    if (*(unsigned char *)(v21 + 40))
    {
      __src = (const char *)(v21 + 16);
      sub_215E05FEC((uint64_t **)&__src, 2u);
    }
    else
    {
      LOBYTE(__src) = 2;
      std::ostream::write();
    }
    sub_215E0076C(v9[3]);
    sub_2159A77A8(v9, v20);
    uint64_t v22 = v9[3];
    uint64_t v23 = *(void *)(*(void *)(v22 + 88) - 8);
    sub_215E001AC((uint64_t *)(v22 + 48), *(void *)(v22 + 16) - v23 - 9);
    size_t v24 = *(void *)(v22 + 48);
    if (v24) {
      memmove((void *)(*(void *)(v22 + 24) + v23), *(const void **)(v22 + 56), v24);
    }
    *(void *)(v22 + 48) = 0;
    uint64_t v25 = *(void *)(v22 + 80);
    uint64_t v26 = *(void *)(v22 + 88) - 8;
    *(void *)(v22 + 88) = v26;
    if (v25 == v26)
    {
      std::ostream::write();
      if (*(unsigned char *)(v22 + 40))
      {
        free(*(void **)(v22 + 24));
        *(unsigned char *)(v22 + 40) = 0;
      }
    }
  }
  else
  {
    uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v11)
    {
      uint64_t v12 = (uint64_t)v11;
      if (*(unsigned __int8 *)v11[5] <= 1u)
      {
        int v13 = *((unsigned __int8 *)v11 + 88);
        v11[9] = "info";
        v11[10] = 4;
        if (!v13) {
          *((unsigned char *)v11 + 88) = 1;
        }
      }
      sub_215DEB804((uint64_t)v11);
      __src = "version";
      uint64_t v46 = 7;
      int v47 = 6;
      if (**(unsigned __int8 **)(v12 + 40) <= 1u)
      {
        int v14 = *(unsigned __int8 *)(v12 + 88);
        *(void *)(v12 + 72) = "version";
        *(void *)(v12 + 80) = 7;
        if (!v14) {
          *(unsigned char *)(v12 + 88) = 1;
        }
      }
      sub_215DEC344(v12, &v47);
      sub_2159A7F64(v12, a2 + 16);
    }
    unint64_t v27 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v27)
    {
      uint64_t v28 = (uint64_t)v27;
      if (v27[5])
      {
        BOOL v29 = (void *)v27[3];
        LOBYTE(__src) = *(unsigned char *)(v28 + 32);
        sub_215731D94(v29, (uint64_t)&__src, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(v28 + 40);
      sub_2159A95B4(v28, a2 + 16, 6u);
      char v30 = *(unsigned char *)(v28 + 34);
      if (*(void *)(v28 + 40))
      {
        char v31 = *(void **)(v28 + 24);
        LOBYTE(__src) = *(unsigned char *)(v28 + 32);
        sub_215731D94(v31, (uint64_t)&__src, 1);
      }
      uint64_t v32 = *(void **)(v28 + 24);
      LOBYTE(__src) = v30;
      sub_215731D94(v32, (uint64_t)&__src, 1);
      uint64_t v33 = *(void *)(v28 + 40);
      uint64_t v34 = a2 + 192;
      *(void *)(v28 + 40) = v33 + 1;
      if (v33 != -1)
      {
        unsigned int v35 = *(void **)(v28 + 24);
        LOBYTE(__src) = *(unsigned char *)(v28 + 32);
        sub_215731D94(v35, (uint64_t)&__src, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(v28 + 40);
      sub_2159A9C8C(v28, v34);
      char v36 = *(unsigned char *)(v28 + 34);
      if (*(void *)(v28 + 40))
      {
        unint64_t v37 = *(void **)(v28 + 24);
        LOBYTE(__src) = *(unsigned char *)(v28 + 32);
        sub_215731D94(v37, (uint64_t)&__src, 1);
      }
      long long v38 = *(void **)(v28 + 24);
      LOBYTE(__src) = v36;
      sub_215731D94(v38, (uint64_t)&__src, 1);
      ++*(void *)(v28 + 40);
    }
    else
    {
      long long v39 = (char **)__dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      if (v39)
      {
        uint64_t v40 = (uint64_t)v39;
        LODWORD(__src) = 6;
        uint64_t v41 = (uint64_t)(v39 + 3);
        sub_215D04A50((uint64_t)(v39 + 3), v39[4], (char *)&__src, (char *)&__src + 4, 4);
        unsigned int v42 = __src;
        sub_215D02034((void *)v40);
        sub_2159AA330(v40, a2 + 16, v42);
        uint64_t v43 = *(void *)(*(void *)(v40 + 56) - 8) + *(void *)(v40 + 24);
        *(void *)(v43 + 10) = *(void *)(v40 + 32) - v43 - 18;
        *(void *)(v40 + 56) -= 8;
        LODWORD(__src) = 2;
        sub_215D04A50(v41, *(char **)(v40 + 32), (char *)&__src, (char *)&__src + 4, 4);
        sub_215D02034((void *)v40);
        sub_2159AA8AC(v40, a2 + 192);
        uint64_t v44 = *(void *)(*(void *)(v40 + 56) - 8) + *(void *)(v40 + 24);
        *(void *)(v44 + 10) = *(void *)(v40 + 32) - v44 - 18;
        *(void *)(v40 + 56) -= 8;
      }
      else
      {
        __src = (const char *)a1[1];
        sub_2159AAEAC((int *)&__src, a1, a2 + 16);
        __src = (const char *)a1[1];
        sub_2159ABC88((int *)&__src, (int *)a1, a2 + 192);
      }
    }
  }
}

void sub_215996540(uint64_t a1, void *a2)
{
}

void sub_215996550(void *a1, uint64_t a2)
{
  char v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  if (v4)
  {
    uint64_t v5 = (uint64_t)v4;
    int v6 = *((unsigned __int8 *)v4 + 104);
    v4[11] = "info";
    v4[12] = 4;
    if (!v6) {
      *((unsigned char *)v4 + 104) = 1;
    }
    sub_215DF07E4((uint64_t)v4);
    long long __p = "version";
    uint64_t v27 = 7;
    unsigned int v28 = 6;
    int v7 = *(unsigned __int8 *)(v5 + 104);
    *(void *)(v5 + 88) = "version";
    *(void *)(v5 + 96) = 7;
    if (!v7) {
      *(unsigned char *)(v5 + 104) = 1;
    }
    sub_215DF1DC8((void *)v5, &v28);
    if (v28 >= 6) {
      unsigned int v8 = 6;
    }
    else {
      unsigned int v8 = v28;
    }
    if (v8 >= 3) {
      sub_2159AC908(v5, a2 + 16);
    }
    sub_2159AC714((uint64_t)&__p, v5);
  }
  uint64_t v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
  if (v9)
  {
    uint64_t v10 = v9;
    sub_2159AFF3C((uint64_t)&__p, v9, a2 + 16);
    sub_2159B0B48(v10, (unsigned __int16 *)(a2 + 192));
  }
  uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    int v13 = *((unsigned __int8 *)v11 + 104);
    v11[11] = "info";
    v11[12] = 4;
    if (!v13) {
      *((unsigned char *)v11 + 104) = 1;
    }
    sub_215DF01A0((uint64_t)v11);
    long long __p = "version";
    uint64_t v27 = 7;
    unsigned int v28 = 6;
    int v14 = *(unsigned __int8 *)(v12 + 104);
    *(void *)(v12 + 88) = "version";
    *(void *)(v12 + 96) = 7;
    if (!v14) {
      *(unsigned char *)(v12 + 104) = 1;
    }
    sub_215DF0F9C((void *)v12, &v28);
    if (v28 >= 6) {
      unsigned int v15 = 6;
    }
    else {
      unsigned int v15 = v28;
    }
    if (v15 >= 3) {
      sub_2159B191C(v12, a2 + 16);
    }
    sub_2159B1728((uint64_t)&__p, v12);
  }
  uint64_t v16 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
  if (!v16)
  {
    uint64_t v20 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
    if (v20)
    {
      uint64_t v21 = v20;
      sub_2159B5060((uint64_t)&__p, v20, a2 + 16);
      sub_2159B5B94(v21, (unsigned __int16 *)(a2 + 192));
    }
    sub_2159B9E48(a2, (void **)a1);
  }
  uint64_t v17 = (uint64_t)v16;
  LODWORD(__p) = 6;
  sub_215DFABD4((uint64_t)v16, &__p);
  unsigned int v18 = __p;
  if (__p >= 6) {
    unsigned int v19 = 6;
  }
  else {
    unsigned int v19 = __p;
  }
  if (v19 < 3) {
    sub_2159B3640((uint64_t)&__p, v17, a2 + 16, v19);
  }
  else {
    sub_2159B3834(v17, a2 + 16, v19);
  }
  if (v18 < 3 || *(unsigned char *)(v17 + 131))
  {
LABEL_36:
    uint64_t v22 = (unsigned __int16 *)(a2 + 192);
    LODWORD(__p) = 2;
    sub_215DFABD4(v17, &__p);
    if (__p >= 2) {
      unsigned int v23 = 2;
    }
    else {
      unsigned int v23 = __p;
    }
    if (v23 >= 2) {
      sub_2159B4A28(v17, v22);
    }
    sub_2159B4594();
  }
  while (1)
  {
    if ((*(unsigned char *)(*(void *)(v17 + 16) + *(void *)(**(void **)(v17 + 16) - 24) + 32) & 2) != 0) {
      goto LABEL_36;
    }
    sub_215DFD700(v17, (uint64_t)&__p);
    if (v29 < 0)
    {
      if (v27 != 1 || *(unsigned __int8 *)(v17 + 72) != *(unsigned __int8 *)__p)
      {
LABEL_53:
        char v25 = 1;
        goto LABEL_54;
      }
    }
    else if (v29 != 1 || *(unsigned __int8 *)(v17 + 72) != __p)
    {
      goto LABEL_53;
    }
    char v25 = 0;
LABEL_54:
    if (v29 < 0) {
      operator delete(__p);
    }
    if (*(unsigned char *)(v17 + 131)) {
      char v24 = 0;
    }
    else {
      char v24 = v25;
    }
    if ((v24 & 1) == 0) {
      goto LABEL_36;
    }
  }
}

uint64_t sub_215996B10()
{
  return 2;
}

uint64_t sub_215996B18()
{
  return 2;
}

uint64_t sub_215996B20()
{
  return 1;
}

uint64_t sub_215996B28()
{
  return 1;
}

void sub_215996B30(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_215BAEFFC(a1 + 192, (uint64_t)v2);
  sub_215995568(a1 + 16, (uint64_t)v3);
  sub_2159B9D2C();
}

void sub_215996C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_2157C6F18((uint64_t)va1);
  sub_2158B8D1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215996C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2158B8D1C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215996C40(uint64_t a1)
{
}

uint64_t sub_215996C48(uint64_t a1, void *lpsrc)
{
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C674AB8, 8);
  if (result)
  {
    uint64_t v4 = result;
    v6[0] = a1 + 24;
    v6[1] = a1 + 40;
    void v6[2] = a1 + 72;
    v6[3] = a1 + 96;
    v6[4] = a1 + 128;
    v6[5] = a1 + 160;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    uint64_t result = sub_215992840((uint64_t)&v7, v6, v5);
    if (result) {
      return sub_215BAF3D0((unsigned __int16 *)(a1 + 192), (unsigned __int16 *)(v4 + 192));
    }
  }
  return result;
}

uint64_t sub_215996D28(uint64_t a1, void *lpsrc)
{
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C674AB8, 8);
  if (result)
  {
    uint64_t v4 = result;
    v6[0] = a1 + 16;
    v6[1] = a1 + 32;
    void v6[2] = a1 + 64;
    v6[3] = a1 + 88;
    v6[4] = a1 + 120;
    v6[5] = a1 + 152;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    uint64_t result = sub_215992840((uint64_t)&v7, v6, v5);
    if (result) {
      return sub_215BAF3D0((unsigned __int16 *)(a1 + 184), (unsigned __int16 *)(v4 + 192));
    }
  }
  return result;
}

void sub_215996E08(uint64_t a1, void *a2)
{
}

void sub_215996E18(uint64_t a1, void *a2)
{
}

void sub_215996E28(uint64_t a1, void *a2)
{
}

void sub_215996E38(uint64_t a1, void *a2)
{
}

uint64_t sub_215996E48(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C676B18;
  *(void *)(a1 + 8) = &unk_26C676B90;
  sub_2159A3DA4(a1 + 16, (uint64_t *)(a2 + 32));
  sub_215CF2B28(a1 + 192, *(uint64_t **)(a2 + 8));
  *(void *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(unsigned char *)(v4 + 408)) {
    *(void *)(a1 + 584) = sub_215738E60((char **)(a1 + 576), v4 + 384);
  }
  return a1;
}

void sub_215996F00(_Unwind_Exception *a1)
{
  sub_2157352DC(v3);
  sub_2159A0134(v2);
  sub_21599FF58(v1);
  _Unwind_Resume(a1);
}

void sub_215996F24(_Unwind_Exception *a1)
{
  sub_21599FF58(v1);
  _Unwind_Resume(a1);
}

void *sub_215996F38(void *a1)
{
  *a1 = &unk_26C676B18;
  a1[1] = &unk_26C676B90;
  uint64_t v2 = a1[72];
  if (v2)
  {
    uint64_t v3 = a1[73];
    uint64_t v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_2159A0134(a1 + 24);
  sub_21599FF58((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_215996FF8(void *a1)
{
  *(a1 - 1) = &unk_26C676B18;
  *a1 = &unk_26C676B90;
  uint64_t v2 = a1[71];
  if (v2)
  {
    uint64_t v3 = a1[72];
    uint64_t v4 = (void *)a1[71];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[71];
    }
    a1[72] = v2;
    operator delete(v4);
  }
  sub_2159A0134(a1 + 23);

  return sub_21599FF58((uint64_t)(a1 + 1));
}

void sub_2159970C0(void *a1)
{
  *a1 = &unk_26C676B18;
  a1[1] = &unk_26C676B90;
  uint64_t v2 = a1[72];
  if (v2)
  {
    uint64_t v3 = a1[73];
    uint64_t v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_2159A0134(a1 + 24);
  sub_21599FF58((uint64_t)(a1 + 2));

  JUMPOUT(0x2166C4D20);
}

void sub_2159971A0(void *a1)
{
  *(a1 - 1) = &unk_26C676B18;
  *a1 = &unk_26C676B90;
  uint64_t v2 = a1[71];
  if (v2)
  {
    uint64_t v3 = a1[72];
    uint64_t v4 = (void *)a1[71];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[71];
    }
    a1[72] = v2;
    operator delete(v4);
  }
  sub_2159A0134(a1 + 23);
  sub_21599FF58((uint64_t)(a1 + 1));

  JUMPOUT(0x2166C4D20);
}

void sub_215997280(uint64_t a1, void *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  sub_2159972B4(a2, a1, &v3);
}

void sub_2159972B4(void *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B18, 0);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    if (*(unsigned __int8 *)v6[5] <= 1u)
    {
      int v8 = *((unsigned __int8 *)v6 + 88);
      v6[9] = "info";
      v6[10] = 4;
      if (!v8) {
        *((unsigned char *)v6 + 88) = 1;
      }
    }
    sub_215DEC088((uint64_t)v6);
    unint64_t v56 = (unint64_t)"version";
    uint64_t v57 = 7;
    v58[0] = 6;
    if (**(unsigned __int8 **)(v7 + 40) <= 1u)
    {
      int v9 = *(unsigned __int8 *)(v7 + 88);
      *(void *)(v7 + 72) = "version";
      *(void *)(v7 + 80) = 7;
      if (!v9) {
        *(unsigned char *)(v7 + 88) = 1;
      }
    }
    sub_215DEE064(v7, v58);
    sub_2159A439C(v7, a2 + 16);
  }
  uint64_t v10 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675B60, 0);
  if (v10)
  {
    uint64_t v11 = (uint64_t)v10;
    unsigned int v12 = *a3;
    uint64_t v13 = v10[3];
    if (*(unsigned char *)(v13 + 40))
    {
      unint64_t v56 = v13 + 16;
      sub_215E05FEC((uint64_t **)&v56, 6u);
    }
    else
    {
      LOBYTE(v56) = 6;
      std::ostream::write();
    }
    sub_215E0076C(*(void *)(v11 + 24));
    sub_2159A6DFC(v11, a2 + 16, 6u);
    uint64_t v18 = *(void *)(v11 + 24);
    uint64_t v19 = *(void *)(*(void *)(v18 + 88) - 8);
    sub_215E001AC((uint64_t *)(v18 + 48), *(void *)(v18 + 16) - v19 - 9);
    size_t v20 = *(void *)(v18 + 48);
    if (v20) {
      memmove((void *)(*(void *)(v18 + 24) + v19), *(const void **)(v18 + 56), v20);
    }
    *(void *)(v18 + 48) = 0;
    uint64_t v21 = *(void *)(v18 + 80);
    uint64_t v22 = *(void *)(v18 + 88) - 8;
    *(void *)(v18 + 88) = v22;
    if (v21 == v22)
    {
      std::ostream::write();
      if (*(unsigned char *)(v18 + 40))
      {
        free(*(void **)(v18 + 24));
        *(unsigned char *)(v18 + 40) = 0;
      }
    }
    sub_2159BBAF0(v11, a2 + 192);
    if (v12 >= 3)
    {
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 584) - *(void *)(a2 + 576)) >> 3);
      uint64_t v24 = *(void *)(v11 + 24);
      if (*(unsigned char *)(v24 + 40))
      {
        unint64_t v56 = v24 + 16;
        sub_215E069EC((uint64_t **)&v56, v23);
      }
      else
      {
        sub_215E06D00();
      }
      unsigned int v42 = *(const void ***)(a2 + 576);
      uint64_t v43 = *(const void ***)(a2 + 584);
      uint64_t v44 = ((char *)v43 - (char *)v42) / 24;
      uint64_t v45 = *(void *)(v11 + 24);
      if (*(unsigned char *)(v45 + 40))
      {
        unint64_t v56 = v45 + 16;
        if (v43 != v42)
        {
          uint64_t v46 = 24 * v44;
          do
          {
            sub_215E07110((uint64_t)&v55, (uint64_t **)&v56, v42);
            v42 += 3;
            v46 -= 24;
          }
          while (v46);
        }
      }
      else if (v43 != v42)
      {
        uint64_t v47 = v45 + 8;
        uint64_t v48 = 24 * v44;
        do
        {
          sub_215E0752C((uint64_t)&v56, v47, (uint64_t)v42);
          v42 += 3;
          v48 -= 24;
        }
        while (v48);
      }
    }
  }
  else
  {
    int v14 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675BE8, 0);
    if (v14)
    {
      uint64_t v15 = (uint64_t)v14;
      if (*(unsigned __int8 *)v14[5] <= 1u)
      {
        int v16 = *((unsigned __int8 *)v14 + 88);
        v14[9] = "info";
        v14[10] = 4;
        if (!v16) {
          *((unsigned char *)v14 + 88) = 1;
        }
      }
      sub_215DEB804((uint64_t)v14);
      unint64_t v56 = (unint64_t)"version";
      uint64_t v57 = 7;
      v58[0] = 6;
      if (**(unsigned __int8 **)(v15 + 40) <= 1u)
      {
        int v17 = *(unsigned __int8 *)(v15 + 88);
        *(void *)(v15 + 72) = "version";
        *(void *)(v15 + 80) = 7;
        if (!v17) {
          *(unsigned char *)(v15 + 88) = 1;
        }
      }
      sub_215DEC344(v15, v58);
      sub_2159A7F64(v15, a2 + 16);
    }
    char v25 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C675C30, 0);
    if (v25)
    {
      uint64_t v26 = (uint64_t)v25;
      unsigned int v27 = *a3;
      if (v25[5])
      {
        unsigned int v28 = (void *)v25[3];
        LOBYTE(v56) = *(unsigned char *)(v26 + 32);
        sub_215731D94(v28, (uint64_t)&v56, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(v26 + 40);
      sub_2159A95B4(v26, a2 + 16, 6u);
      char v29 = *(unsigned char *)(v26 + 34);
      if (*(void *)(v26 + 40))
      {
        char v30 = *(void **)(v26 + 24);
        LOBYTE(v56) = *(unsigned char *)(v26 + 32);
        sub_215731D94(v30, (uint64_t)&v56, 1);
      }
      char v31 = *(void **)(v26 + 24);
      LOBYTE(v56) = v29;
      sub_215731D94(v31, (uint64_t)&v56, 1);
      uint64_t v32 = *(void *)(v26 + 40);
      *(void *)(v26 + 40) = v32 + 1;
      if (v32 != -1)
      {
        uint64_t v33 = *(void **)(v26 + 24);
        LOBYTE(v56) = *(unsigned char *)(v26 + 32);
        sub_215731D94(v33, (uint64_t)&v56, 1);
      }
      std::ostream::operator<<();
      ++*(void *)(v26 + 40);
      sub_2159BA998((uint64_t)&v56, a2 + 192);
      sub_2159BD914(v26, (uint64_t *)&v56, 4u);
      sub_2159A0134((uint64_t *)&v56);
      char v34 = *(unsigned char *)(v26 + 34);
      if (*(void *)(v26 + 40))
      {
        unsigned int v35 = *(void **)(v26 + 24);
        LOBYTE(v56) = *(unsigned char *)(v26 + 32);
        sub_215731D94(v35, (uint64_t)&v56, 1);
      }
      char v36 = *(void **)(v26 + 24);
      LOBYTE(v56) = v34;
      sub_215731D94(v36, (uint64_t)&v56, 1);
      uint64_t v37 = *(void *)(v26 + 40) + 1;
      *(void *)(v26 + 40) = v37;
      if (v27 >= 3)
      {
        if (v37)
        {
          long long v38 = *(void **)(v26 + 24);
          LOBYTE(v56) = *(unsigned char *)(v26 + 32);
          sub_215731D94(v38, (uint64_t)&v56, 1);
        }
        std::ostream::operator<<();
        ++*(void *)(v26 + 40);
        uint64_t v39 = *(void *)(a2 + 576);
        uint64_t v40 = *(void *)(a2 + 584) - v39;
        if (v40)
        {
          uint64_t v41 = 24 * (v40 / 24);
          do
          {
            sub_215DF933C(v26, v39);
            v39 += 24;
            v41 -= 24;
          }
          while (v41);
        }
      }
    }
    else
    {
      unsigned __int8 v49 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C685210, (const struct __class_type_info *)&unk_26C6833D8, 0);
      unsigned int v50 = *a3;
      if (v49)
      {
        unsigned int v51 = *a3;
        sub_2159C9788((uint64_t)v49, a2, v51);
      }
      else
      {
        unint64_t v56 = a1[1];
        sub_2159AAEAC((int *)&v56, a1, a2 + 16);
        sub_2159BEE88(a1, a2 + 192);
        if (v50 >= 3)
        {
          unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 584) - *(void *)(a2 + 576)) >> 3);
          (*(void (**)(void *, unint64_t *))(*a1 + 120))(a1, &v56);
          uint64_t v52 = *(void *)(a2 + 576);
          uint64_t v53 = *(void *)(a2 + 584) - v52;
          if (v53)
          {
            uint64_t v54 = 24 * (v53 / 24);
            do
            {
              (*(void (**)(void *, uint64_t))(*a1 + 144))(a1, v52);
              v52 += 24;
              v54 -= 24;
            }
            while (v54);
          }
        }
      }
    }
  }
}

void sub_215997B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2159A0134((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_215997B58(uint64_t a1, void *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  sub_215997B8C(a2, a1, &v3);
}

void sub_215997B8C(void *a1, uint64_t a2, unsigned int *a3)
{
  if ((sub_2159C98D0(a1, a2) & 1) == 0)
  {
    uint64_t v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CF0, 0);
    if (v6)
    {
      uint64_t v7 = v6;
      unsigned int v8 = *a3;
      sub_2159AFF3C((uint64_t)&v14, v6, a2 + 16);
      sub_2159C2AC4((uint64_t)&v15, v7, a2 + 192);
      if (v8 >= 3) {
        sub_2159B0844((uint64_t)v7, (char **)(a2 + 576));
      }
    }
    else if ((sub_2159C9B2C(a1, a2) & 1) == 0)
    {
      int v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675DB0, 0);
      if (v9)
      {
        unsigned int v10 = *a3;
        sub_2159C9D88((uint64_t)v9, a2, v10);
      }
      else
      {
        uint64_t v11 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C683378, 0);
        unsigned int v12 = *a3;
        if (v11)
        {
          uint64_t v13 = v11;
          sub_2159B5060((uint64_t)&v16, v11, a2 + 16);
          sub_2159C6278((uint64_t)&v17, v13, a2 + 192);
          if (v12 >= 3) {
            sub_2159B5A34(v13, a2 + 576);
          }
        }
        else
        {
          sub_2159C9FF8((void **)a1, a2, v12);
        }
      }
    }
  }
}

uint64_t sub_215997D80()
{
  return 3;
}

uint64_t sub_215997D88()
{
  return 3;
}

uint64_t sub_215997D90()
{
  return 1;
}

uint64_t sub_215997D98()
{
  return 1;
}

void sub_215997DA0(uint64_t *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v4 = sub_215CEE350(1uLL);
  uint64_t v5 = a1[72];
  uint64_t v6 = a1[73];
  if (v5 == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *(void **)v5;
    uint64_t v1 = *(void **)(v5 + 8);
    v13[0] = *(_DWORD *)(v5 + 16);
    *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)(v5 + 19);
    char v2 = *(unsigned char *)(v5 + 23);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)uint64_t v5 = 0;
  }
  sub_215CF34D4(a1 + 24, v4, (uint64_t)v12);
  LOBYTE(__p[0]) = 0;
  char v11 = 0;
  if (v5 != v6)
  {
    if (v2 < 0)
    {
      sub_215738B0C(__p, v7, (unint64_t)v1);
    }
    else
    {
      __p[0] = v7;
      __p[1] = v1;
      *(_DWORD *)int v9 = v13[0];
      *(_DWORD *)&uint64_t v9[3] = *(_DWORD *)((char *)v13 + 3);
      char v10 = v2;
    }
    char v11 = 1;
  }
  sub_215B29C7C();
}

void sub_215997F64(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, ...)
{
  va_start(va, a9);
  if (a9 && a8 < 0) {
    operator delete(__p);
  }
  sub_215956690((uint64_t *)va);
  if (v10 != v11 && v12 < 0) {
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_215997FD0(uint64_t a1)
{
}

uint64_t sub_215997FD8(uint64_t a1, void *lpsrc)
{
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C676C58, 8);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = sub_2159C90DC(a1 + 192, result + 192);
    if (result)
    {
      v6[0] = a1 + 24;
      v6[1] = a1 + 40;
      void v6[2] = a1 + 72;
      v6[3] = a1 + 96;
      v6[4] = a1 + 128;
      v6[5] = a1 + 160;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_215992840((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

uint64_t sub_2159980B8(uint64_t a1, void *lpsrc)
{
  uint64_t result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C676C58, 8);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = sub_2159C90DC(a1 + 184, result + 192);
    if (result)
    {
      v6[0] = a1 + 16;
      v6[1] = a1 + 32;
      void v6[2] = a1 + 64;
      v6[3] = a1 + 88;
      v6[4] = a1 + 120;
      v6[5] = a1 + 152;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_215992840((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

void sub_215998198(uint64_t a1, void *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  sub_2159972B4(a2, a1, &v3);
}

void sub_2159981CC(uint64_t a1, void *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  sub_2159972B4(a2, a1 - 8, &v3);
}

void sub_215998200(uint64_t a1, void *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  sub_215997B8C(a2, a1, &v3);
}

void sub_215998234(uint64_t a1, void *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  sub_215997B8C(a2, a1 - 8, &v3);
}

uint64_t sub_215998268(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 24;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v5 = a1 + 48;
  uint64_t v6 = a1 + 72;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v7 = a1 + 96;
  uint64_t v8 = a1 + 120;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 4);
  if (*((unsigned char *)a2 + 48))
  {
    if (*((char *)a2 + 47) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 152), (void *)a2[3], a2[4]);
    }
    else
    {
      long long v9 = *(_OWORD *)(a2 + 3);
      *(void *)(a1 + 168) = a2[5];
      *(_OWORD *)(a1 + 152) = v9;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 175) = 0;
    *(unsigned char *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)a2;
  long long v10 = *((_OWORD *)a2 + 13);
  *(void *)(a1 + 208) = a2[28];
  *(_OWORD *)(a1 + 192) = v10;
  if (*((unsigned char *)a2 + 200))
  {
    if (a2 + 7 != (void *)a1)
    {
      char v11 = *((unsigned char *)a2 + 79);
      if (*(char *)(a1 + 23) < 0)
      {
        if (v11 >= 0) {
          uint64_t v13 = a2 + 7;
        }
        else {
          uint64_t v13 = (void *)a2[7];
        }
        if (v11 >= 0) {
          size_t v14 = *((unsigned __int8 *)a2 + 79);
        }
        else {
          size_t v14 = a2[8];
        }
        sub_21573ABD0((void **)a1, v13, v14);
      }
      else if ((*((unsigned char *)a2 + 79) & 0x80) != 0)
      {
        sub_21573AB08((void *)a1, (void *)a2[7], a2[8]);
      }
      else
      {
        long long v12 = *(_OWORD *)(a2 + 7);
        *(void *)(a1 + 16) = a2[9];
        *(_OWORD *)a1 = v12;
      }
    }
    if ((void *)v4 != a2 + 10)
    {
      char v15 = *((unsigned char *)a2 + 103);
      if (*(char *)(a1 + 47) < 0)
      {
        if (v15 >= 0) {
          char v17 = a2 + 10;
        }
        else {
          char v17 = (void *)a2[10];
        }
        if (v15 >= 0) {
          size_t v18 = *((unsigned __int8 *)a2 + 103);
        }
        else {
          size_t v18 = a2[11];
        }
        sub_21573ABD0((void **)v4, v17, v18);
      }
      else if ((*((unsigned char *)a2 + 103) & 0x80) != 0)
      {
        sub_21573AB08((void *)v4, (void *)a2[10], a2[11]);
      }
      else
      {
        long long v16 = *((_OWORD *)a2 + 5);
        *(void *)(v4 + 16) = a2[12];
        *(_OWORD *)uint64_t v4 = v16;
      }
    }
    if ((void *)v5 != a2 + 13)
    {
      char v19 = *((unsigned char *)a2 + 127);
      if (*(char *)(a1 + 71) < 0)
      {
        if (v19 >= 0) {
          uint64_t v21 = a2 + 13;
        }
        else {
          uint64_t v21 = (void *)a2[13];
        }
        if (v19 >= 0) {
          size_t v22 = *((unsigned __int8 *)a2 + 127);
        }
        else {
          size_t v22 = a2[14];
        }
        sub_21573ABD0((void **)v5, v21, v22);
      }
      else if ((*((unsigned char *)a2 + 127) & 0x80) != 0)
      {
        sub_21573AB08((void *)v5, (void *)a2[13], a2[14]);
      }
      else
      {
        long long v20 = *(_OWORD *)(a2 + 13);
        *(void *)(v5 + 16) = a2[15];
        *(_OWORD *)uint64_t v5 = v20;
      }
    }
    if ((void *)v6 != a2 + 16)
    {
      char v23 = *((unsigned char *)a2 + 151);
      if (*(char *)(a1 + 95) < 0)
      {
        if (v23 >= 0) {
          char v25 = a2 + 16;
        }
        else {
          char v25 = (void *)a2[16];
        }
        if (v23 >= 0) {
          size_t v26 = *((unsigned __int8 *)a2 + 151);
        }
        else {
          size_t v26 = a2[17];
        }
        sub_21573ABD0((void **)v6, v25, v26);
      }
      else if ((*((unsigned char *)a2 + 151) & 0x80) != 0)
      {
        sub_21573AB08((void *)v6, (void *)a2[16], a2[17]);
      }
      else
      {
        long long v24 = *((_OWORD *)a2 + 8);
        *(void *)(v6 + 16) = a2[18];
        *(_OWORD *)uint64_t v6 = v24;
      }
    }
    if ((void *)v7 != a2 + 19)
    {
      char v27 = *((unsigned char *)a2 + 175);
      if (*(char *)(a1 + 119) < 0)
      {
        if (v27 >= 0) {
          char v29 = a2 + 19;
        }
        else {
          char v29 = (void *)a2[19];
        }
        if (v27 >= 0) {
          size_t v30 = *((unsigned __int8 *)a2 + 175);
        }
        else {
          size_t v30 = a2[20];
        }
        sub_21573ABD0((void **)v7, v29, v30);
      }
      else if ((*((unsigned char *)a2 + 175) & 0x80) != 0)
      {
        sub_21573AB08((void *)v7, (void *)a2[19], a2[20]);
      }
      else
      {
        long long v28 = *(_OWORD *)(a2 + 19);
        *(void *)(v7 + 16) = a2[21];
        *(_OWORD *)uint64_t v7 = v28;
      }
    }
    if ((void *)v8 != a2 + 22)
    {
      char v31 = *((unsigned char *)a2 + 199);
      if (*(char *)(a1 + 143) < 0)
      {
        if (v31 >= 0) {
          uint64_t v33 = a2 + 22;
        }
        else {
          uint64_t v33 = (void *)a2[22];
        }
        if (v31 >= 0) {
          size_t v34 = *((unsigned __int8 *)a2 + 199);
        }
        else {
          size_t v34 = a2[23];
        }
        sub_21573ABD0((void **)v8, v33, v34);
      }
      else if ((*((unsigned char *)a2 + 199) & 0x80) != 0)
      {
        sub_21573AB08((void *)v8, (void *)a2[22], a2[23]);
      }
      else
      {
        long long v32 = *((_OWORD *)a2 + 11);
        *(void *)(v8 + 16) = a2[24];
        *(_OWORD *)uint64_t v8 = v32;
      }
    }
  }
  return a1;
}

void sub_21599856C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_215998620(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_21;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_21;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    if (*(void *)(a1 + 56)) {
      goto LABEL_21;
    }
  }
  else if (*(unsigned char *)(a1 + 71))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(void *)(a1 + 80)) {
      goto LABEL_21;
    }
  }
  else if (*(unsigned char *)(a1 + 95))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 119) < 0) {
    uint64_t v4 = *(void *)(a1 + 104);
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 119);
  }
  if (v4)
  {
LABEL_21:
    BOOL v5 = 1;
    int v6 = *(char *)(a1 + 175);
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_28:
    uint64_t v7 = *(void *)(a1 + 160);
    LOBYTE(__p[0]) = 0;
    char v38 = 0;
    if (!v5) {
      goto LABEL_55;
    }
LABEL_29:
    sub_215E0FA18((char *)v15, (long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), (long long *)(a1 + 72), (long long *)(a1 + 96), (long long *)(a1 + 120));
    if (!v38)
    {
      *(_OWORD *)long long __p = *(_OWORD *)v15;
      char v11 = v15[2];
      memset(v15, 0, sizeof(v15));
      long long v12 = *(_OWORD *)v16;
      v16[0] = 0;
      long long v28 = v12;
      char v27 = v11;
      uint64_t v29 = v17;
      v16[1] = 0;
      uint64_t v17 = 0;
      *(_OWORD *)size_t v30 = *(_OWORD *)v18;
      v18[0] = 0;
      v18[1] = 0;
      uint64_t v31 = v19;
      uint64_t v33 = v21;
      long long v32 = *(_OWORD *)v20;
      uint64_t v19 = 0;
      v20[0] = 0;
      v20[1] = 0;
      uint64_t v21 = 0;
      *(_OWORD *)size_t v34 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      uint64_t v35 = v23;
      uint64_t v37 = v25;
      long long v36 = v24;
      uint64_t v23 = 0;
      long long v24 = 0uLL;
      uint64_t v25 = 0;
      char v38 = 1;
      goto LABEL_52;
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)long long __p = *(_OWORD *)v15;
    char v27 = v15[2];
    HIBYTE(v15[2]) = 0;
    LOBYTE(v15[0]) = 0;
    if (SHIBYTE(v29) < 0) {
      operator delete((void *)v28);
    }
    long long v28 = *(_OWORD *)v16;
    uint64_t v29 = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16[0]) = 0;
    if (SHIBYTE(v31) < 0) {
      operator delete(v30[0]);
    }
    *(_OWORD *)size_t v30 = *(_OWORD *)v18;
    uint64_t v31 = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18[0]) = 0;
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)v32);
    }
    long long v32 = *(_OWORD *)v20;
    uint64_t v33 = v21;
    HIBYTE(v21) = 0;
    LOBYTE(v20[0]) = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
    *(_OWORD *)size_t v34 = *(_OWORD *)v22;
    uint64_t v35 = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22[0]) = 0;
    if ((SHIBYTE(v37) & 0x80000000) == 0)
    {
      long long v36 = v24;
      uint64_t v37 = v25;
      HIBYTE(v25) = 0;
      LOBYTE(v24) = 0;
      if (SHIBYTE(v21) < 0) {
        goto LABEL_42;
      }
LABEL_52:
      if (SHIBYTE(v19) < 0)
      {
LABEL_43:
        operator delete(v18[0]);
        if (SHIBYTE(v17) < 0) {
          goto LABEL_44;
        }
        goto LABEL_54;
      }
LABEL_53:
      if (SHIBYTE(v17) < 0)
      {
LABEL_44:
        operator delete(v16[0]);
        if ((SHIBYTE(v15[2]) & 0x80000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_45;
      }
LABEL_54:
      if ((SHIBYTE(v15[2]) & 0x80000000) == 0) {
        goto LABEL_55;
      }
LABEL_45:
      operator delete(v15[0]);
      int v9 = *(_DWORD *)(a1 + 144);
      LODWORD(v15[0]) = v9;
      if (v7) {
        goto LABEL_56;
      }
      goto LABEL_46;
    }
    operator delete((void *)v36);
    long long v36 = v24;
    uint64_t v37 = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(v22[0]);
      if ((SHIBYTE(v21) & 0x80000000) == 0) {
        goto LABEL_52;
      }
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
LABEL_42:
    operator delete(v20[0]);
    if (SHIBYTE(v19) < 0) {
      goto LABEL_43;
    }
    goto LABEL_53;
  }
  if (*(char *)(a1 + 143) < 0) {
    uint64_t v8 = *(void *)(a1 + 128);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 143);
  }
  BOOL v5 = v8 != 0;
  int v6 = *(char *)(a1 + 175);
  if (v6 < 0) {
    goto LABEL_28;
  }
LABEL_22:
  uint64_t v7 = v6;
  LOBYTE(__p[0]) = 0;
  char v38 = 0;
  if (v5) {
    goto LABEL_29;
  }
LABEL_55:
  int v9 = *(_DWORD *)(a1 + 144);
  LODWORD(v15[0]) = v9;
  if (v7)
  {
LABEL_56:
    if (*(char *)(a1 + 175) < 0)
    {
      sub_215738B0C(&v15[1], *(void **)(a1 + 152), *(void *)(a1 + 160));
      int v9 = (int)v15[0];
    }
    else
    {
      *(_OWORD *)&v15[1] = *(_OWORD *)(a1 + 152);
      v16[0] = *(void **)(a1 + 168);
    }
    LOBYTE(v16[1]) = 1;
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
    *(_DWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v15[1];
    *(void **)(a2 + 40) = v16[0];
    v15[1] = 0;
    v15[2] = 0;
    v16[0] = 0;
    *(unsigned char *)(a2 + 48) = 1;
    *(unsigned char *)(a2 + 56) = 0;
    long long v10 = (char *)(a2 + 56);
    *(unsigned char *)(a2 + 200) = 0;
    if (v38) {
      goto LABEL_60;
    }
LABEL_47:
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
    *(void *)(a2 + 224) = *(void *)(a1 + 208);
    if (!v38) {
      return;
    }
    goto LABEL_64;
  }
LABEL_46:
  LOBYTE(v15[1]) = 0;
  LOBYTE(v16[1]) = 0;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
  *(_DWORD *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  long long v10 = (char *)(a2 + 56);
  *(unsigned char *)(a2 + 200) = 0;
  if (!v38) {
    goto LABEL_47;
  }
LABEL_60:
  sub_2157B6F84(v10, (long long *)__p);
  *(unsigned char *)(a2 + 200) = 1;
  int v13 = LOBYTE(v16[1]);
  int v14 = SHIBYTE(v16[0]);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
  *(void *)(a2 + 224) = *(void *)(a1 + 208);
  if (v13)
  {
    if (v14 < 0) {
      operator delete(v15[1]);
    }
  }
  if (!v38) {
    return;
  }
LABEL_64:
  if (SHIBYTE(v37) < 0)
  {
    operator delete((void *)v36);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v33) & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v34[0]);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_68;
    }
LABEL_74:
    operator delete(v30[0]);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_69:
      if ((SHIBYTE(v27) & 0x80000000) == 0) {
        return;
      }
LABEL_76:
      operator delete(__p[0]);
      return;
    }
    goto LABEL_75;
  }
LABEL_73:
  operator delete((void *)v32);
  if (SHIBYTE(v31) < 0) {
    goto LABEL_74;
  }
LABEL_68:
  if ((SHIBYTE(v29) & 0x80000000) == 0) {
    goto LABEL_69;
  }
LABEL_75:
  operator delete((void *)v28);
  if (SHIBYTE(v27) < 0) {
    goto LABEL_76;
  }
}

void sub_215998B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_215998B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_215998BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2157B69B0(v31);
  if (*(unsigned char *)(v30 + 48) && *(char *)(v30 + 47) < 0) {
    operator delete(*v32);
  }
  if (a16)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  sub_2157B69B0((uint64_t)&a30);
  _Unwind_Resume(a1);
}

BOOL sub_215998BEC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  int v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    uint64_t v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v9 = a1[47];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[47];
  }
  else {
    uint64_t v10 = *((void *)a1 + 4);
  }
  uint64_t v11 = v6[47];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v6 + 4);
  }
  if (v10 != v11) {
    return 0;
  }
  int v13 = (const void **)(a1 + 24);
  if (v12 >= 0) {
    int v14 = v6 + 24;
  }
  else {
    int v14 = (unsigned __int8 *)*((void *)v6 + 3);
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((void *)a1 + 4))) {
      return 0;
    }
  }
  else if (a1[47])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      int v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9) {
        goto LABEL_31;
      }
    }
    return 0;
  }
LABEL_31:
  uint64_t v15 = a1[71];
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = a1[71];
  }
  else {
    uint64_t v16 = *((void *)a1 + 7);
  }
  uint64_t v17 = v6[71];
  int v18 = (char)v17;
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *((void *)v6 + 7);
  }
  if (v16 != v17) {
    return 0;
  }
  uint64_t v19 = (const void **)(a1 + 48);
  if (v18 >= 0) {
    long long v20 = v6 + 48;
  }
  else {
    long long v20 = (unsigned __int8 *)*((void *)v6 + 6);
  }
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v19, v20, *((void *)a1 + 7))) {
      return 0;
    }
  }
  else if (a1[71])
  {
    while (*(unsigned __int8 *)v19 == *v20)
    {
      uint64_t v19 = (const void **)((char *)v19 + 1);
      ++v20;
      if (!--v15) {
        goto LABEL_46;
      }
    }
    return 0;
  }
LABEL_46:
  uint64_t v21 = a1[95];
  if ((v21 & 0x80u) == 0) {
    uint64_t v22 = a1[95];
  }
  else {
    uint64_t v22 = *((void *)a1 + 10);
  }
  uint64_t v23 = v6[95];
  int v24 = (char)v23;
  if ((v23 & 0x80u) != 0) {
    uint64_t v23 = *((void *)v6 + 10);
  }
  if (v22 != v23) {
    return 0;
  }
  uint64_t v25 = (const void **)(a1 + 72);
  if (v24 >= 0) {
    size_t v26 = v6 + 72;
  }
  else {
    size_t v26 = (unsigned __int8 *)*((void *)v6 + 9);
  }
  if ((v21 & 0x80) != 0)
  {
    if (memcmp(*v25, v26, *((void *)a1 + 10))) {
      return 0;
    }
  }
  else if (a1[95])
  {
    while (*(unsigned __int8 *)v25 == *v26)
    {
      uint64_t v25 = (const void **)((char *)v25 + 1);
      ++v26;
      if (!--v21) {
        goto LABEL_61;
      }
    }
    return 0;
  }
LABEL_61:
  uint64_t v27 = a1[119];
  if ((v27 & 0x80u) == 0) {
    uint64_t v28 = a1[119];
  }
  else {
    uint64_t v28 = *((void *)a1 + 13);
  }
  uint64_t v29 = v6[119];
  int v30 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    uint64_t v29 = *((void *)v6 + 13);
  }
  if (v28 != v29) {
    return 0;
  }
  uint64_t v31 = (const void **)(a1 + 96);
  if (v30 >= 0) {
    long long v32 = v6 + 96;
  }
  else {
    long long v32 = (unsigned __int8 *)*((void *)v6 + 12);
  }
  if ((v27 & 0x80) != 0)
  {
    if (memcmp(*v31, v32, *((void *)a1 + 13))) {
      return 0;
    }
  }
  else if (a1[119])
  {
    while (*(unsigned __int8 *)v31 == *v32)
    {
      uint64_t v31 = (const void **)((char *)v31 + 1);
      ++v32;
      if (!--v27) {
        goto LABEL_76;
      }
    }
    return 0;
  }
LABEL_76:
  uint64_t v33 = a1[143];
  if ((v33 & 0x80u) == 0) {
    uint64_t v34 = a1[143];
  }
  else {
    uint64_t v34 = *((void *)a1 + 16);
  }
  uint64_t v35 = v6[143];
  int v36 = (char)v35;
  if ((v35 & 0x80u) != 0) {
    uint64_t v35 = *((void *)v6 + 16);
  }
  if (v34 != v35) {
    return 0;
  }
  uint64_t v37 = (const void **)(a1 + 120);
  if (v36 >= 0) {
    char v38 = v6 + 120;
  }
  else {
    char v38 = (unsigned __int8 *)*((void *)v6 + 15);
  }
  if ((v33 & 0x80) != 0)
  {
    if (memcmp(*v37, v38, *((void *)a1 + 16))) {
      return 0;
    }
  }
  else if (a1[143])
  {
    while (*(unsigned __int8 *)v37 == *v38)
    {
      uint64_t v37 = (const void **)((char *)v37 + 1);
      ++v38;
      if (!--v33) {
        goto LABEL_91;
      }
    }
    return 0;
  }
LABEL_91:
  if (*((_DWORD *)a1 + 36) != *((_DWORD *)v6 + 36)) {
    return 0;
  }
  uint64_t v39 = a1[175];
  if ((v39 & 0x80u) == 0) {
    uint64_t v40 = a1[175];
  }
  else {
    uint64_t v40 = *((void *)a1 + 20);
  }
  uint64_t v41 = v6[175];
  int v42 = (char)v41;
  if ((v41 & 0x80u) != 0) {
    uint64_t v41 = *((void *)v6 + 20);
  }
  if (v40 != v41) {
    return 0;
  }
  uint64_t v43 = (const void **)(a1 + 152);
  if (v42 >= 0) {
    uint64_t v44 = v6 + 152;
  }
  else {
    uint64_t v44 = (unsigned __int8 *)*((void *)v6 + 19);
  }
  if ((v39 & 0x80) != 0)
  {
    if (!memcmp(*v43, v44, *((void *)a1 + 20))) {
      goto LABEL_107;
    }
    return 0;
  }
  if (a1[175])
  {
    while (*(unsigned __int8 *)v43 == *v44)
    {
      uint64_t v43 = (const void **)((char *)v43 + 1);
      ++v44;
      if (!--v39) {
        goto LABEL_107;
      }
    }
    return 0;
  }
LABEL_107:
  if (*((void *)a1 + 22) != *((void *)v6 + 22) || *((void *)a1 + 23) != *((void *)v6 + 23)) {
    return 0;
  }
  if (*((void *)a1 + 24) != *((void *)v6 + 24)
    || *((_DWORD *)a1 + 50) != (unint64_t)*((unsigned int *)v6 + 50))
  {
    return 0;
  }
  return *(void *)(a1 + 204) == *(void *)(v6 + 204)
      && *((_DWORD *)a1 + 53) == (unint64_t)*((unsigned int *)v6 + 53);
}

uint64_t sub_215998FF8(uint64_t a1)
{
  *(void *)a1 = &unk_26C675910;
  *(void *)(a1 + 8) = &unk_26C675970;
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159990A0(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C675910;
  *(void *)a1 = &unk_26C675970;
  uint64_t v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(void *)(a1 + 216) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_215999144(uint64_t a1)
{
  *(void *)a1 = &unk_26C675910;
  *(void *)(a1 + 8) = &unk_26C675970;
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_215999200(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C675910;
  *(void *)a1 = &unk_26C675970;
  uint64_t v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 184);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v4])(&v6, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_2159992BC(uint64_t a1)
{
  *(void *)a1 = &unk_26C675EA0;
  *(void *)(a1 + 8) = &unk_26C675F00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159993AC(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C675EA0;
  *(void *)a1 = &unk_26C675F00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_215999498(uint64_t a1)
{
  *(void *)a1 = &unk_26C675EA0;
  *(void *)(a1 + 8) = &unk_26C675F00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_2159995A8(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C675EA0;
  *(void *)a1 = &unk_26C675F00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_2159996C0(uint64_t a1)
{
  *(void *)a1 = &unk_26C676090;
  *(void *)(a1 + 8) = &unk_26C6760F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159997B0(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676090;
  *(void *)a1 = &unk_26C6760F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_21599989C(uint64_t a1)
{
  *(void *)a1 = &unk_26C676090;
  *(void *)(a1 + 8) = &unk_26C6760F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_2159999AC(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676090;
  *(void *)a1 = &unk_26C6760F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_215999AC4(uint64_t a1)
{
  *(void *)a1 = &unk_26C676280;
  *(void *)(a1 + 8) = &unk_26C6762E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_215999BB4(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676280;
  *(void *)a1 = &unk_26C6762E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_215999CA0(uint64_t a1)
{
  *(void *)a1 = &unk_26C676280;
  *(void *)(a1 + 8) = &unk_26C6762E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_215999DB0(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676280;
  *(void *)a1 = &unk_26C6762E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_215999EC8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6773C8;
  *(void *)(a1 + 8) = &unk_26C677428;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_215999FB8(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6773C8;
  *(void *)a1 = &unk_26C677428;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_21599A0A4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6773C8;
  *(void *)(a1 + 8) = &unk_26C677428;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_21599A1B4(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6773C8;
  *(void *)a1 = &unk_26C677428;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_21599A2CC(uint64_t a1)
{
  *(void *)a1 = &unk_26C677580;
  *(void *)(a1 + 8) = &unk_26C6775E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_21599A3BC(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C677580;
  *(void *)a1 = &unk_26C6775E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_21599A4A8(uint64_t a1)
{
  *(void *)a1 = &unk_26C677580;
  *(void *)(a1 + 8) = &unk_26C6775E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_21599A5B8(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C677580;
  *(void *)a1 = &unk_26C6775E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_21599A6D0(uint64_t a1)
{
  *(void *)a1 = &unk_26C676470;
  *(void *)(a1 + 8) = &unk_26C6764D0;
  uint64_t v2 = *(void (**)(void, uint64_t, void, void, void))(a1 + 208);
  if (v2) {
    v2(0, a1 + 208, 0, 0, 0);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void *sub_21599A78C(void *result)
{
  uint64_t v1 = result;
  *(result - 1) = &unk_26C676470;
  void *result = &unk_26C6764D0;
  uint64_t v2 = (uint64_t (*)(void, void *, void, void, void))result[25];
  if (v2) {
    uint64_t result = (void *)v2(0, result + 25, 0, 0, 0);
  }
  uint64_t v3 = *((unsigned int *)v1 + 46);
  if (v3 != -1) {
    uint64_t result = (void *)((uint64_t (*)(char *, void *))off_26C674B60[v3])(&v4, v1 + 1);
  }
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

uint64_t sub_21599A844(uint64_t a1)
{
  *(void *)a1 = &unk_26C676470;
  *(void *)(a1 + 8) = &unk_26C6764D0;
  uint64_t v2 = *(void (**)(void, uint64_t, void, void, void))(a1 + 208);
  if (v2) {
    v2(0, a1 + 208, 0, 0, 0);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40294CF2FDLL);
}

uint64_t sub_21599A914(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C676470;
  *(void *)a1 = &unk_26C6764D0;
  uint64_t v3 = *(void (**)(void, uint64_t, void, void, void))(a1 + 200);
  if (v3) {
    v3(0, a1 + 200, 0, 0, 0);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 184);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v4])(&v6, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40294CF2FDLL);
}

uint64_t sub_21599A9E4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6768E0;
  *(void *)(a1 + 8) = &unk_26C676940;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_21599AAD4(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6768E0;
  *(void *)a1 = &unk_26C676940;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_21599ABC0(uint64_t a1)
{
  *(void *)a1 = &unk_26C6768E0;
  *(void *)(a1 + 8) = &unk_26C676940;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_21599ACD0(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6768E0;
  *(void *)a1 = &unk_26C676940;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_21599ADE8(uint64_t a1)
{
  *(void *)a1 = &unk_26C676D48;
  *(void *)(a1 + 8) = &unk_26C676DA8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_21599AED8(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676D48;
  *(void *)a1 = &unk_26C676DA8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_21599AFC4(uint64_t a1)
{
  *(void *)a1 = &unk_26C676D48;
  *(void *)(a1 + 8) = &unk_26C676DA8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_21599B0D4(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676D48;
  *(void *)a1 = &unk_26C676DA8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

unsigned char *sub_21599B1EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_215738B0C((unsigned char *)a2, *(void **)a1, *(void *)(a1 + 8));
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    uint64_t v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    uint64_t v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)uint64_t v4 = *(_OWORD *)(a1 + 32);
      *(void *)(v4 + 16) = *(void *)(a1 + 48);
      goto LABEL_6;
    }
  }
  sub_215738B0C((unsigned char *)v4, *(void **)(a1 + 32), *(void *)(a1 + 40));
LABEL_6:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  if (*(char *)(a1 + 87) < 0)
  {
    sub_215738B0C((unsigned char *)(a2 + 64), *(void **)(a1 + 64), *(void *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
    *(void *)(a2 + 80) = *(void *)(a1 + 80);
  }
  uint64_t result = (unsigned char *)(a2 + 88);
  if (*(char *)(a1 + 111) < 0) {
    return sub_215738B0C(result, *(void **)(a1 + 88), *(void *)(a1 + 96));
  }
  *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 88);
  *(void *)(a2 + 104) = *(void *)(a1 + 104);
  return result;
}

void sub_21599B2F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_21599B36C(uint64_t a1)
{
  *(void *)a1 = &unk_26C676F38;
  *(void *)(a1 + 8) = &unk_26C676F98;
  if (*(char *)(a1 + 311) < 0)
  {
    operator delete(*(void **)(a1 + 288));
    if ((*(char *)(a1 + 287) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 255) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 264));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 223) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 232));
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_5:
    uint64_t v2 = *(unsigned int *)(a1 + 192);
    if (v2 == -1) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 200));
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
LABEL_11:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
LABEL_12:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_21599B470(uint64_t a1)
{
  return sub_21599B36C(a1 - 8);
}

void sub_21599B478(uint64_t a1)
{
  sub_21599B36C(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_21599B4B0(uint64_t a1)
{
  sub_21599B36C(a1 - 8);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_21599B4EC(uint64_t a1)
{
  *(void *)a1 = &unk_26C677210;
  *(void *)(a1 + 8) = &unk_26C677270;
  if (*(unsigned char *)(a1 + 376) && *(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(unsigned char *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    uint64_t v2 = *(unsigned int *)(a1 + 192);
    if (v2 == -1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
LABEL_7:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_21599B5C4(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C677210;
  *(void *)a1 = &unk_26C677270;
  if (*(unsigned char *)(a1 + 368) && *(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  if (*(unsigned char *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    uint64_t v2 = *(unsigned int *)(a1 + 184);
    if (v2 == -1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2 != -1) {
LABEL_7:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_21599B698(uint64_t a1)
{
  *(void *)a1 = &unk_26C677210;
  *(void *)(a1 + 8) = &unk_26C677270;
  if (*(unsigned char *)(a1 + 376) && *(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(unsigned char *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    uint64_t v2 = *(unsigned int *)(a1 + 192);
    if (v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 192);
    if (v2 == -1) {
      goto LABEL_8;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v3, a1 + 16);
  goto LABEL_8;
}

void sub_21599B790(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C677210;
  *(void *)a1 = &unk_26C677270;
  if (*(unsigned char *)(a1 + 368) && *(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  if (*(unsigned char *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    uint64_t v2 = *(unsigned int *)(a1 + 184);
    if (v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 184);
    if (v2 == -1) {
      goto LABEL_8;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v3, a1 + 8);
  goto LABEL_8;
}

uint64_t sub_21599B888(uint64_t a1)
{
  *(void *)a1 = &unk_26C674E68;
  *(void *)(a1 + 8) = &unk_26C674EC8;
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_21599B920(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)(result - 8) = &unk_26C674E68;
  *(void *)uint64_t result = &unk_26C674EC8;
  uint64_t v2 = *(unsigned int *)(result + 184);
  if (v2 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C674B60[v2])(&v3, result + 8);
  }
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_21599B9B4(uint64_t a1)
{
  *(void *)a1 = &unk_26C674E68;
  *(void *)(a1 + 8) = &unk_26C674EC8;
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40CF772451);
}

uint64_t sub_21599BA60(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C674E68;
  *(void *)a1 = &unk_26C674EC8;
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40CF772451);
}

uint64_t sub_21599BB0C(uint64_t a1)
{
  *(void *)a1 = &unk_26C675020;
  *(void *)(a1 + 8) = &unk_26C675080;
  sub_2159A3688(a1 + 200);
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_21599BBAC(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C675020;
  *(void *)a1 = &unk_26C675080;
  uint64_t result = sub_2159A3688(a1 + 192);
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_21599BC44(uint64_t a1)
{
  *(void *)a1 = &unk_26C675020;
  *(void *)(a1 + 8) = &unk_26C675080;
  sub_2159A3688(a1 + 200);
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40DC57CB27);
}

uint64_t sub_21599BCF8(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C675020;
  *(void *)a1 = &unk_26C675080;
  sub_2159A3688(a1 + 192);
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40DC57CB27);
}

uint64_t sub_21599BDA8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6752A8;
  *(void *)(a1 + 8) = &unk_26C675308;
  sub_21573AE84(a1 + 200, *(char **)(a1 + 208));
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_21599BE4C(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6752A8;
  *(void *)a1 = &unk_26C675308;
  sub_21573AE84(a1 + 192, *(char **)(a1 + 200));
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v3, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_21599BEE8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6752A8;
  *(void *)(a1 + 8) = &unk_26C675308;
  sub_21573AE84(a1 + 200, *(char **)(a1 + 208));
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40546963AFLL);
}

uint64_t sub_21599BFA0(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C6752A8;
  *(void *)a1 = &unk_26C675308;
  sub_21573AE84(a1 + 192, *(char **)(a1 + 200));
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40546963AFLL);
}

uint64_t sub_21599C054(uint64_t a1)
{
  *(void *)a1 = &unk_26C675460;
  *(void *)(a1 + 8) = &unk_26C6754C0;
  if (*(unsigned char *)(a1 + 248) && *(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  uint64_t v2 = *(void *)(a1 + 200);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 208);
    char v4 = *(void **)(a1 + 200);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0) {
          operator delete(*(void **)(v3 - 32));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      char v4 = *(void **)(a1 + 200);
    }
    *(void *)(a1 + 208) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 192);
  if (v5 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v5])(&v7, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_21599C158(uint64_t a1)
{
  return sub_21599C054(a1 - 8);
}

void sub_21599C160(uint64_t a1)
{
  sub_21599C054(a1);

  JUMPOUT(0x2166C4D20);
}

void sub_21599C198(uint64_t a1)
{
  sub_21599C054(a1 - 8);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_21599C1D4(uint64_t a1)
{
  *(void *)a1 = &unk_26C6756B8;
  *(void *)(a1 + 8) = &unk_26C675718;
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_21599C26C(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)(result - 8) = &unk_26C6756B8;
  *(void *)uint64_t result = &unk_26C675718;
  uint64_t v2 = *(unsigned int *)(result + 184);
  if (v2 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C674B60[v2])(&v3, result + 8);
  }
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_21599C300(uint64_t a1)
{
  *(void *)a1 = &unk_26C6756B8;
  *(void *)(a1 + 8) = &unk_26C675718;
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40956CF698);
}

uint64_t sub_21599C3AC(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C6756B8;
  *(void *)a1 = &unk_26C675718;
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40956CF698);
}

uint64_t sub_21599C458()
{
  return 2;
}

uint64_t sub_21599C460()
{
  return 1;
}

uint64_t sub_21599C468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599C48C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599C4B0(uint64_t a1)
{
  v14[27] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v8);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v8);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v8);
  }
  uint64_t v9 = &unk_26C65A790;
  char v10 = *(unsigned char *)(a1 + 208);
  int v12 = 0;
  int v13 = 0;
  long long __p = 0;
  char v5 = *(unsigned char **)(a1 + 216);
  char v4 = *(unsigned char **)(a1 + 224);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    long long __p = operator new(v4 - v5);
    int v12 = __p;
    char v7 = (char *)__p + v6;
    int v13 = (char *)__p + v6;
    memcpy(__p, v5, v6);
    int v12 = v7;
  }
  sub_2157C4FB8((uint64_t)v14, (uint64_t)v8);
  uint64_t v9 = &unk_26C65A710;
  operator new();
}

void sub_21599C6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  sub_2157F4AEC(&a35);
  sub_2157C6F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21599C710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_2157C6F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_21599C73C(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C675A90, 0);
  if (result)
  {
    return (void *)sub_215A42F94(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599C7CC(uint64_t a1, void *a2)
{
}

void sub_21599C7DC(uint64_t a1, void *a2)
{
}

uint64_t sub_21599C7EC()
{
  return 2;
}

uint64_t sub_21599C7F4()
{
  return 2;
}

uint64_t sub_21599C7FC()
{
  return 1;
}

void sub_21599C804(uint64_t a1, void *a2)
{
}

void sub_21599C814(uint64_t a1, void *a2)
{
}

uint64_t sub_21599C824()
{
  return 2;
}

uint64_t sub_21599C82C()
{
  return 1;
}

uint64_t sub_21599C834(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599C858(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599C87C(uint64_t a1)
{
  v10[27] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v6);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v6);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v6);
  }
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v4 = *(void *)(a1 + 224);
  char v7 = &unk_26C65A860;
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_2157C4FB8((uint64_t)v10, (uint64_t)v6);
  char v7 = &unk_26C65A7E0;
  sub_2159D5B84();
}

void sub_21599C9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

void sub_21599CA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  char v38 = a37;
  if (a37)
  {
    if (!atomic_fetch_add(&a37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2157C6F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_21599CA6C(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C675FC0, 0);
  if (result)
  {
    return (void *)sub_215A4612C(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599CAFC(uint64_t a1, void *a2)
{
}

void sub_21599CB0C(uint64_t a1, void *a2)
{
}

void sub_21599CB1C(uint64_t a1, void *a2)
{
}

void sub_21599CB2C(uint64_t a1, void *a2)
{
}

uint64_t sub_21599CB3C()
{
  return 2;
}

uint64_t sub_21599CB44()
{
  return 1;
}

uint64_t sub_21599CB4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599CB70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599CB94(uint64_t a1)
{
  v10[27] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v6);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v6);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v6);
  }
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v4 = *(void *)(a1 + 224);
  char v7 = &unk_26C65A930;
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_2157C4FB8((uint64_t)v10, (uint64_t)v6);
  char v7 = &unk_26C65A8B0;
  sub_2159E5690();
}

void sub_21599CD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

void sub_21599CD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  char v38 = a37;
  if (a37)
  {
    if (!atomic_fetch_add(&a37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2157C6F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_21599CD84(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C6761B0, 0);
  if (result)
  {
    return (void *)sub_215A491EC(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599CE14(uint64_t a1, void *a2)
{
}

void sub_21599CE24(uint64_t a1, void *a2)
{
}

void sub_21599CE34(uint64_t a1, void *a2)
{
}

void sub_21599CE44(uint64_t a1, void *a2)
{
}

uint64_t sub_21599CE54()
{
  return 2;
}

uint64_t sub_21599CE5C()
{
  return 1;
}

uint64_t sub_21599CE64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599CE88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599CEAC(uint64_t a1)
{
  v10[27] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v6);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v6);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v6);
  }
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v4 = *(void *)(a1 + 224);
  char v7 = &unk_26C65AA00;
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_2157C4FB8((uint64_t)v10, (uint64_t)v6);
  char v7 = &unk_26C65A980;
  sub_2159F9478();
}

void sub_21599D020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

void sub_21599D03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  char v38 = a37;
  if (a37)
  {
    if (!atomic_fetch_add(&a37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2157C6F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_21599D09C(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C6763A0, 0);
  if (result)
  {
    return (void *)sub_215A4C37C(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599D12C(uint64_t a1, void *a2)
{
}

void sub_21599D13C(uint64_t a1, void *a2)
{
}

void sub_21599D14C(uint64_t a1, void *a2)
{
}

void sub_21599D15C(uint64_t a1, void *a2)
{
}

uint64_t sub_21599D16C()
{
  return 1;
}

uint64_t sub_21599D174()
{
  return 1;
}

uint64_t sub_21599D17C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599D1A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599D1C4(uint64_t a1)
{
  v10[27] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v6);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v6);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v6);
  }
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v4 = *(void *)(a1 + 224);
  char v7 = &unk_26C65AAD0;
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_2157C4FB8((uint64_t)v10, (uint64_t)v6);
  char v7 = &unk_26C65AA50;
  sub_215A4F50C();
}

void sub_21599D338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

void sub_21599D354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  char v38 = a37;
  if (a37)
  {
    if (!atomic_fetch_add(&a37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2157C6F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_21599D3B4(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C6774B0, 0);
  if (result)
  {
    return (void *)sub_215A4F71C(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599D444(uint64_t a1, void *a2)
{
}

void sub_21599D454(uint64_t a1, void *a2)
{
}

uint64_t sub_21599D464()
{
  return 1;
}

uint64_t sub_21599D46C()
{
  return 1;
}

uint64_t sub_21599D474()
{
  return 1;
}

void sub_21599D47C(uint64_t a1, void *a2)
{
}

void sub_21599D48C(uint64_t a1, void *a2)
{
}

uint64_t sub_21599D49C()
{
  return 1;
}

uint64_t sub_21599D4A4()
{
  return 1;
}

uint64_t sub_21599D4AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599D4D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599D4F4(uint64_t a1)
{
  v10[27] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v6);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v6);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v6);
  }
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v4 = *(void *)(a1 + 224);
  char v7 = &unk_26C65ABA0;
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_2157C4FB8((uint64_t)v10, (uint64_t)v6);
  char v7 = &unk_26C65AB20;
  sub_215A600A8();
}

void sub_21599D668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

void sub_21599D684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  char v38 = a37;
  if (a37)
  {
    if (!atomic_fetch_add(&a37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2157C6F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_21599D6E4(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C677668, 0);
  if (result)
  {
    return (void *)sub_215A602B8(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599D774(uint64_t a1, void *a2)
{
}

void sub_21599D784(uint64_t a1, void *a2)
{
}

void sub_21599D794(uint64_t a1, void *a2)
{
}

void sub_21599D7A4(uint64_t a1, void *a2)
{
}

uint64_t sub_21599D7B4()
{
  return 2;
}

uint64_t sub_21599D7BC()
{
  return 1;
}

uint64_t sub_21599D7C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599D7E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599D80C(uint64_t a1)
{
  v10[27] = *MEMORY[0x263EF8340];
  sub_215D1D9E4((int *)(a1 + 200), &v4);
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v6);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v6);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v6);
  }
  char v7 = &unk_26C65A408;
  uint64_t v8 = &unk_26C684548;
  long long v9 = v5;
  long long v5 = 0uLL;
  sub_2157C4FB8((uint64_t)v10, (uint64_t)v6);
  char v7 = &unk_26C65A388;
  sub_215A0D280();
}

void sub_21599DA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
}

void sub_21599DA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_215D2319C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21599DA6C(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C676590, 0);
  if (result)
  {
    return (void *)sub_215A70DF4(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599DAFC(uint64_t a1, void *a2)
{
}

void sub_21599DB0C(uint64_t a1, void *a2)
{
}

void sub_21599DB1C(uint64_t a1, void *a2)
{
}

void sub_21599DB2C(uint64_t a1, void *a2)
{
}

uint64_t sub_21599DB3C()
{
  return 2;
}

uint64_t sub_21599DB44()
{
  return 1;
}

uint64_t sub_21599DB4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599DB70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599DB94(uint64_t a1)
{
  v10[27] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 200);
  uint64_t v3 = *(void *)(a1 + 208);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v6);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v6);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v6);
  }
  char v7 = &unk_26C65FA88;
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  sub_2157C4FB8((uint64_t)v10, (uint64_t)v6);
  char v7 = &unk_26C6745F0;
  sub_215A2BE10();
}

void sub_21599DD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
}

void sub_21599DDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21599DDE8(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C676A00, 0);
  if (result)
  {
    return (void *)sub_215A73F04(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599DE78(uint64_t a1, void *a2)
{
}

void sub_21599DE88(uint64_t a1, void *a2)
{
}

void sub_21599DE98(uint64_t a1, void *a2)
{
}

void sub_21599DEA8(uint64_t a1, void *a2)
{
}

uint64_t sub_21599DEB8()
{
  return 2;
}

uint64_t sub_21599DEC0()
{
  return 1;
}

uint64_t sub_21599DEC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599DEEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599DF10(uint64_t a1)
{
  v11[27] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v6);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v6);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v6);
  }
  uint64_t v5 = *(void *)(a1 + 208);
  uint64_t v4 = *(void *)(a1 + 216);
  char v7 = &unk_26C6598C8;
  uint64_t v8 = v5;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v10 = *(_OWORD *)(a1 + 224);
  sub_2157C4FB8((uint64_t)v11, (uint64_t)v6);
  char v7 = &unk_26C659848;
  sub_215A3FE70();
}

void sub_21599E08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
}

void sub_21599E0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  char v38 = a37;
  if (a37)
  {
    if (!atomic_fetch_add(&a37->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_2157C6F18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_21599E108(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C676E68, 0);
  if (result)
  {
    return (void *)sub_215A771D8(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599E198(uint64_t a1, void *a2)
{
}

void sub_21599E1A8(uint64_t a1, void *a2)
{
}

void sub_21599E1B8(uint64_t a1, void *a2)
{
}

void sub_21599E1C8(uint64_t a1, void *a2)
{
}

uint64_t sub_21599E1D8()
{
  return 1;
}

uint64_t sub_21599E1E0()
{
  return 1;
}

uint64_t sub_21599E1E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599E20C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599E230(uint64_t a1)
{
  v6[43] = *(void **)MEMORY[0x263EF8340];
  sub_21599B1EC(a1 + 200, (uint64_t)&v4);
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v5);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v5);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v5);
  }
  sub_215A7C8EC((uint64_t)v6, &v4, (uint64_t)v5);
  operator new();
}

void sub_21599E490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  a49 = &unk_26C677080;
  sub_215A7AD84((uint64_t)&a49);
  sub_2157C6F18((uint64_t)&a23);
  sub_2159A2CC0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_21599E530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21599E544(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C677140, 0);
  if (result)
  {
    return (void *)sub_215A7CA50(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599E5D4(uint64_t a1, void *a2)
{
}

void sub_21599E5E4(uint64_t a1, void *a2)
{
}

void sub_21599E5F4(uint64_t a1, void *a2)
{
}

void sub_21599E604(uint64_t a1, void *a2)
{
}

uint64_t sub_21599E614()
{
  return 1;
}

uint64_t sub_21599E61C()
{
  return 1;
}

uint64_t sub_21599E624(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599E648(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599E66C(uint64_t a1)
{
  v20[27] = *MEMORY[0x263EF8340];
  sub_215B29098(a1 + 200);
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v11);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v11);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v11);
  }
  int v12 = &unk_26C672FA0;
  uint64_t v13 = v4;
  LOBYTE(v14) = 0;
  char v16 = 0;
  if (v7)
  {
    long long v14 = *(_OWORD *)v5;
    uint64_t v15 = v6;
    char v16 = 1;
  }
  LOBYTE(__p) = 0;
  char v19 = 0;
  if (v10)
  {
    long long __p = *(_OWORD *)v8;
    uint64_t v18 = v9;
    char v19 = 1;
  }
  sub_2157C4FB8((uint64_t)v20, (uint64_t)v11);
  int v12 = &unk_26C672F20;
  operator new();
}

void sub_21599E934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  sub_21596F548((uint64_t)&a45);
  sub_2157C6F18((uint64_t)&a19);
  sub_21596F318(&a10);
  _Unwind_Resume(a1);
}

void sub_21599E9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21596F318((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_21599E9D0(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C6772F8, 0);
  if (result)
  {
    return (void *)sub_215A81264(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599EA60(uint64_t a1, void *a2)
{
}

void sub_21599EA70(uint64_t a1, void *a2)
{
}

void sub_21599EA80(uint64_t a1, void *a2)
{
}

void sub_21599EA90(uint64_t a1, void *a2)
{
}

uint64_t sub_21599EAA0()
{
  return 1;
}

uint64_t sub_21599EAA8()
{
  return 1;
}

uint64_t sub_21599EAB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599EAD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599EAF8(uint64_t a1)
{
  v21[27] = *MEMORY[0x263EF8340];
  int v5 = *(unsigned __int8 *)(a1 + 200);
  if (v5 == 2)
  {
    if (*(_DWORD *)(a1 + 248) != 1) {
      goto LABEL_15;
    }
    unint64_t v7 = 0;
    LOBYTE(v6) = *(unsigned char *)(a1 + 208);
    uint64_t v2 = *(void *)(a1 + 216);
    char v1 = *(unsigned char *)(a1 + 224);
    char v8 = 1;
    int v3 = 1;
    unint64_t v4 = *(void *)(a1 + 225);
    uint64_t v9 = a1 + 16;
    int v10 = *(_DWORD *)(a1 + 192);
    if (v10 != 2) {
      goto LABEL_10;
    }
  }
  else
  {
    if (v5 == 1)
    {
      if (*(_DWORD *)(a1 + 248)) {
        goto LABEL_15;
      }
      int v3 = 0;
      uint64_t v6 = *(void *)(a1 + 208);
      uint64_t v2 = *(void *)(a1 + 216);
      char v1 = *(unsigned char *)(a1 + 224);
      unint64_t v4 = (unint64_t)*(unsigned __int8 *)(a1 + 232) << 56;
      uint64_t v11 = *(void *)(a1 + 233);
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFF00;
      char v8 = 1;
      uint64_t v9 = a1 + 16;
      int v10 = *(_DWORD *)(a1 + 192);
      if (v10 == 2) {
        goto LABEL_8;
      }
      goto LABEL_10;
    }
    LOBYTE(v6) = 0;
    char v8 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = a1 + 16;
    int v10 = *(_DWORD *)(a1 + 192);
    if (v10 != 2)
    {
LABEL_10:
      if (v10 == 1)
      {
        sub_2159CA9D4(v9, (uint64_t)v12);
LABEL_14:
        uint64_t v13 = &unk_26C6744E0;
        unint64_t v14 = v7 | v6;
        uint64_t v15 = v2;
        char v16 = v1;
        unint64_t v17 = v4;
        uint64_t v18 = v11;
        int v19 = v3;
        char v20 = v8;
        sub_2157C4FB8((uint64_t)v21, (uint64_t)v12);
        uint64_t v13 = &unk_26C674460;
        sub_215A8B72C();
      }
      if (!v10)
      {
        sub_215995568(v9, (uint64_t)v12);
        goto LABEL_14;
      }
LABEL_15:
      sub_215742D4C();
    }
  }
LABEL_8:
  sub_21598FB5C(v9, (uint64_t)v12);
  goto LABEL_14;
}

void sub_21599ECE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2157C6F18(v3);
  sub_2157C6F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21599ED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2157C6F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21599ED20(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C674F50, 0);
  if (result)
  {
    return (void *)sub_215A8B950(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599EDB0(uint64_t a1, void *a2)
{
}

void sub_21599EDC0(uint64_t a1, void *a2)
{
}

void sub_21599EDD0(uint64_t a1, void *a2)
{
}

void sub_21599EDE0(uint64_t a1, void *a2)
{
}

uint64_t sub_21599EDF0()
{
  return 1;
}

uint64_t sub_21599EDF8()
{
  return 1;
}

uint64_t sub_21599EE00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599EE24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599EE48(uint64_t a1)
{
  v47[27] = *MEMORY[0x263EF8340];
  sub_215998620(a1 + 200, (uint64_t)&v6);
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v5);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v5);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v5);
  }
  size_t v26 = &unk_26C675198;
  long long v27 = v6;
  int v28 = v7;
  LOBYTE(__p) = 0;
  char v31 = 0;
  if (v10)
  {
    long long __p = v8;
    uint64_t v30 = v9;
    uint64_t v9 = 0;
    long long v8 = 0uLL;
    char v31 = 1;
  }
  LOBYTE(v32) = 0;
  char v44 = 0;
  if (v23)
  {
    uint64_t v33 = v12;
    long long v32 = v11;
    long long v11 = 0uLL;
    long long v4 = v13;
    uint64_t v12 = 0;
    long long v13 = 0uLL;
    long long v34 = v4;
    uint64_t v35 = v14;
    uint64_t v14 = 0;
    *(_OWORD *)int v36 = v15;
    long long v15 = 0uLL;
    uint64_t v37 = v16;
    uint64_t v39 = v18;
    long long v38 = v17;
    uint64_t v16 = 0;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    *(_OWORD *)uint64_t v40 = v19;
    long long v19 = 0uLL;
    uint64_t v41 = v20;
    uint64_t v43 = v22;
    long long v42 = v21;
    uint64_t v20 = 0;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    char v44 = 1;
  }
  long long v45 = v24;
  uint64_t v46 = v25;
  sub_2157C4FB8((uint64_t)v47, (uint64_t)v5);
  size_t v26 = &unk_26C675118;
  operator new();
}

void sub_21599F268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  sub_215A94354((uint64_t)&a65);
  sub_2157C6F18((uint64_t)&a9);
  sub_215A943C8((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_21599F2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void *sub_21599F304(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C6751D8, 0);
  if (result)
  {
    return (void *)sub_215A95B50(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599F394(uint64_t a1, void *a2)
{
}

void sub_21599F3A4(uint64_t a1, void *a2)
{
}

void sub_21599F3B4(uint64_t a1, void *a2)
{
}

void sub_21599F3C4(uint64_t a1, void *a2)
{
}

uint64_t sub_21599F3D4()
{
  return 1;
}

uint64_t sub_21599F3DC()
{
  return 1;
}

uint64_t sub_21599F3E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599F408(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599F42C(uint64_t a1)
{
  v16[27] = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = &v10;
  uint64_t v2 = *(const void ***)(a1 + 200);
  int v3 = (const void ***)(a1 + 208);
  if (v2 != (const void **)(a1 + 208))
  {
    do
    {
      sub_2157B75C4(&v9, &v10, v2 + 4, (uint64_t)(v2 + 4));
      long long v6 = (const void **)v2[1];
      if (v6)
      {
        do
        {
          int v7 = (const void ***)v6;
          long long v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (const void ***)v2[2];
          BOOL v8 = *v7 == v2;
          uint64_t v2 = (const void **)v7;
        }
        while (!v8);
      }
      uint64_t v2 = (const void **)v7;
    }
    while (v7 != v3);
  }
  uint64_t v4 = a1 + 16;
  int v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_21598FB5C(v4, (uint64_t)v12);
  }
  else if (v5 == 1)
  {
    sub_2159CA9D4(v4, (uint64_t)v12);
  }
  else
  {
    if (v5) {
      sub_215742D4C();
    }
    sub_215995568(v4, (uint64_t)v12);
  }
  long long v13 = &unk_26C674410;
  uint64_t v14 = v9;
  v15[0] = v10;
  v15[1] = v11;
  if (v11)
  {
    *(void *)(v10 + 16) = v15;
    uint64_t v9 = &v10;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v14 = v15;
  }
  sub_2157C4FB8((uint64_t)v16, (uint64_t)v12);
  long long v13 = &unk_26C674390;
  operator new();
}

void sub_21599F68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  sub_21598D114((uint64_t)&a39);
  sub_2157C6F18((uint64_t)&a13);
  sub_21573AE84((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_21599F718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_21599F730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void *sub_21599F748(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C675390, 0);
  if (result)
  {
    return (void *)sub_215A9F678(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599F7D8(uint64_t a1, void *a2)
{
}

void sub_21599F7E8(uint64_t a1, void *a2)
{
}

void sub_21599F7F8(uint64_t a1, void *a2)
{
}

void sub_21599F808(uint64_t a1, void *a2)
{
}

uint64_t sub_21599F818()
{
  return 1;
}

uint64_t sub_21599F820()
{
  return 1;
}

uint64_t sub_21599F828(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599F84C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599F870(uint64_t a1)
{
  v6[35] = *(void **)MEMORY[0x263EF8340];
  sub_215AA57D4(a1 + 200, (uint64_t)&v4);
  uint64_t v2 = a1 + 16;
  int v3 = *(_DWORD *)(a1 + 192);
  if (v3 == 2)
  {
    sub_21598FB5C(v2, (uint64_t)v5);
  }
  else if (v3 == 1)
  {
    sub_2159CA9D4(v2, (uint64_t)v5);
  }
  else
  {
    if (v3) {
      sub_215742D4C();
    }
    sub_215995568(v2, (uint64_t)v5);
  }
  sub_215AA7BA0((uint64_t)v6, (uint64_t)&v4, (uint64_t)v5);
  operator new();
}

void sub_21599FAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  a43 = &unk_26C675558;
  sub_215AA61E0((uint64_t)&a43);
  sub_2157C6F18((uint64_t)&a17);
  sub_2159A3A08((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_21599FB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A3A08((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21599FB6C(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C6755E8, 0);
  if (result)
  {
    return (void *)sub_215AA7CDC(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599FBFC(uint64_t a1, void *a2)
{
}

void sub_21599FC0C(uint64_t a1, void *a2)
{
}

void sub_21599FC1C(uint64_t a1, void *a2)
{
}

void sub_21599FC2C(uint64_t a1, void *a2)
{
}

uint64_t sub_21599FC3C()
{
  return 1;
}

uint64_t sub_21599FC44()
{
  return 1;
}

uint64_t sub_21599FC4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 40))();
}

uint64_t sub_21599FC70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 48))();
}

void sub_21599FC94(uint64_t a1)
{
  v17[27] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 248))
  {
    uint64_t v1 = *(void *)(a1 + 208);
    uint64_t v7 = *(void *)(a1 + 216);
    char v8 = *(unsigned char *)(a1 + 224);
    *(void *)((char *)v9 + 7) = *(void *)(a1 + 232);
    HIBYTE(v9[0]) = *(unsigned char *)(a1 + 240);
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFF00;
    long long v10 = v9[0];
    uint64_t v3 = v1;
    char v4 = 1;
    uint64_t v5 = a1 + 16;
    int v6 = *(_DWORD *)(a1 + 192);
    if (v6 != 2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v2 = 0;
    char v4 = 0;
    uint64_t v5 = a1 + 16;
    int v6 = *(_DWORD *)(a1 + 192);
    if (v6 != 2)
    {
LABEL_3:
      if (v6 == 1)
      {
        sub_2159CA9D4(v5, (uint64_t)v9);
      }
      else
      {
        if (v6) {
          sub_215742D4C();
        }
        sub_215995568(v5, (uint64_t)v9);
      }
LABEL_9:
      uint64_t v11 = &unk_26C675800;
      unint64_t v12 = v2 | v3;
      uint64_t v13 = v7;
      char v14 = v8;
      long long v15 = v10;
      char v16 = v4;
      sub_2157C4FB8((uint64_t)v17, (uint64_t)v9);
      uint64_t v11 = &unk_26C6757B0;
      sub_215AAE1B8();
    }
  }
  sub_21598FB5C(v5, (uint64_t)v9);
  goto LABEL_9;
}

void sub_21599FE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2157C6F18(v3);
  sub_2157C6F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21599FE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2157C6F18((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_21599FE70(uint64_t a1, void *lpsrc)
{
  uint64_t result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C678D98, (const struct __class_type_info *)&unk_26C675840, 0);
  if (result)
  {
    return (void *)sub_215AAFE54(a1, (uint64_t)result);
  }
  return result;
}

void sub_21599FF00(uint64_t a1, void *a2)
{
}

void sub_21599FF10(uint64_t a1, void *a2)
{
}

void sub_21599FF20(uint64_t a1, void *a2)
{
}

void sub_21599FF30(uint64_t a1, void *a2)
{
}

uint64_t sub_21599FF40()
{
  return 3;
}

uint64_t sub_21599FF48()
{
  return 2;
}

uint64_t sub_21599FF50()
{
  return 1;
}

uint64_t sub_21599FF58(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 168))
  {
    uint64_t v2 = *(void *)(a1 + 144);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 152);
      char v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 24;
        }
        while (v3 != v2);
        char v4 = *(void **)(a1 + 144);
      }
      *(void *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  if (*(unsigned char *)(a1 + 136) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(unsigned char *)(a1 + 104)) {
      goto LABEL_16;
    }
  }
  else if (!*(unsigned char *)(a1 + 104))
  {
    goto LABEL_16;
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
LABEL_16:
  if (!*(unsigned char *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0) {
    return a1;
  }
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_2159A003C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_2159A00B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t *sub_2159A0134(uint64_t *a1)
{
  uint64_t v2 = a1[44];
  if (v2)
  {
    a1[45] = v2;
    unint64_t v3 = (unint64_t)(a1[46] - v2) >> 2;
    uint64_t v33 = v2;
    int v34 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 95);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B00[v4])(&v35, a1 + 47);
  }
  uint64_t v5 = a1[36];
  if (v5)
  {
    a1[37] = v5;
    int v6 = -1431655765 * ((unint64_t)(a1[38] - v5) >> 2);
    uint64_t v33 = v5;
    int v34 = v6;
    uint64_t v7 = *((unsigned int *)a1 + 79);
    if (v7 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B10[v7])(&v35, a1 + 39);
  }
  uint64_t v8 = a1[32];
  if (v8)
  {
    a1[33] = v8;
    unint64_t v9 = (unint64_t)(a1[34] - v8) >> 3;
    uint64_t v33 = v8;
    int v34 = v9;
    uint64_t v10 = *((unsigned int *)a1 + 71);
    if (v10 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B20[v10])(&v35, a1 + 35);
  }
  uint64_t v11 = a1[28];
  if (v11)
  {
    a1[29] = v11;
    unint64_t v12 = (unint64_t)(a1[30] - v11) >> 3;
    uint64_t v33 = v11;
    int v34 = v12;
    uint64_t v13 = *((unsigned int *)a1 + 63);
    if (v13 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B30[v13])(&v35, a1 + 31);
  }
  uint64_t v14 = a1[24];
  if (v14)
  {
    a1[25] = v14;
    int v15 = -1431655765 * ((unint64_t)(a1[26] - v14) >> 2);
    uint64_t v33 = v14;
    int v34 = v15;
    uint64_t v16 = *((unsigned int *)a1 + 55);
    if (v16 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B10[v16])(&v35, a1 + 27);
  }
  uint64_t v17 = a1[20];
  if (v17)
  {
    a1[21] = v17;
    int v18 = *((_DWORD *)a1 + 44) - v17;
    uint64_t v33 = v17;
    int v34 = v18;
    uint64_t v19 = *((unsigned int *)a1 + 47);
    if (v19 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B40[v19])(&v35, a1 + 23);
  }
  uint64_t v20 = a1[15];
  if (v20)
  {
    a1[16] = v20;
    int v21 = *((_DWORD *)a1 + 34) - v20;
    uint64_t v33 = v20;
    int v34 = v21;
    uint64_t v22 = *((unsigned int *)a1 + 37);
    if (v22 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B40[v22])(&v35, a1 + 18);
  }
  uint64_t v23 = a1[10];
  if (v23)
  {
    a1[11] = v23;
    int v24 = -1431655765 * ((unint64_t)(a1[12] - v23) >> 2);
    uint64_t v33 = v23;
    int v34 = v24;
    uint64_t v25 = *((unsigned int *)a1 + 27);
    if (v25 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v25])(&v35, a1 + 13);
  }
  uint64_t v26 = a1[5];
  if (v26)
  {
    a1[6] = v26;
    int v27 = -1431655765 * ((unint64_t)(a1[7] - v26) >> 2);
    uint64_t v33 = v26;
    int v34 = v27;
    uint64_t v28 = *((unsigned int *)a1 + 17);
    if (v28 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v28])(&v35, a1 + 8);
  }
  uint64_t v29 = *a1;
  if (*a1)
  {
    a1[1] = v29;
    int v30 = -1431655765 * ((unint64_t)(a1[2] - v29) >> 2);
    uint64_t v33 = v29;
    int v34 = v30;
    uint64_t v31 = *((unsigned int *)a1 + 7);
    if (v31 == -1) {
      sub_215742D4C();
    }
    uint64_t v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v31])(&v35, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2159A04E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    int v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B10[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2159A0574(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    unint64_t v3 = (unint64_t)(a1[2] - v2) >> 3;
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B20[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2159A05F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    unint64_t v3 = (unint64_t)(a1[2] - v2) >> 3;
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B30[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2159A067C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    int v3 = *((_DWORD *)a1 + 4) - v2;
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B40[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2159A06FC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    int v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_2159A078C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    unint64_t v3 = (unint64_t)(a1[2] - v2) >> 2;
    uint64_t v6 = v2;
    int v7 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 7);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B00[v4])(&v8, a1 + 3);
  }
  return a1;
}

void sub_2159A0810(void ***a1)
{
}

uint64_t sub_2159A081C(void **a1)
{
  uint64_t result = MEMORY[0x2166C5410](*MEMORY[0x263EF8960], **a1, 12 * *((unsigned int *)*a1 + 2));
  if (result)
  {
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
  return result;
}

void sub_2159A089C(void ***a1)
{
}

uint64_t sub_2159A08A8(void **a1)
{
  uint64_t result = MEMORY[0x2166C5410](*MEMORY[0x263EF8960], **a1, 8 * *((unsigned int *)*a1 + 2));
  if (result)
  {
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
  return result;
}

void sub_2159A0924(void ***a1)
{
}

uint64_t sub_2159A0930(void **a1)
{
  uint64_t result = MEMORY[0x2166C5410](*MEMORY[0x263EF8960], **a1, 8 * *((unsigned int *)*a1 + 2));
  if (result)
  {
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
  return result;
}

void sub_2159A09AC(void ***a1)
{
}

uint64_t sub_2159A09B8(void **a1)
{
  uint64_t result = MEMORY[0x2166C5410](*MEMORY[0x263EF8960], **a1, 12 * *((unsigned int *)*a1 + 2));
  if (result)
  {
    sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_215E1ABD8);
    abort();
  }
  return result;
}

uint64_t sub_2159A0A38(uint64_t a1, uint64_t a2)
{
  return sub_21599FF58(a2);
}

uint64_t sub_2159A0A40(uint64_t a1, uint64_t a2)
{
  return sub_21599FF58(a2);
}

uint64_t sub_2159A0A48(uint64_t a1, uint64_t a2)
{
  return sub_21599FF58(a2);
}

uint64_t sub_2159A0A50(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_2159A0ACC(uint64_t a1)
{
  *(void *)a1 = &unk_26C675910;
  *(void *)(a1 + 8) = &unk_26C675970;
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_2159A0B74(uint64_t a1)
{
  *(void *)a1 = &unk_26C675910;
  *(void *)(a1 + 8) = &unk_26C675970;
  uint64_t v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(void *)(a1 + 224) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40B4DE50DDLL);
}

void sub_2159A0C30(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C675910;
  *(void *)a1 = &unk_26C675970;
  uint64_t v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(void *)(a1 + 216) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_2159A0CD4(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C675910;
  *(void *)a1 = &unk_26C675970;
  uint64_t v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 184);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v4])(&v6, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_2159A0D90(uint64_t a1)
{
  *(void *)a1 = &unk_26C675EA0;
  *(void *)(a1 + 8) = &unk_26C675F00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159A0E80(uint64_t a1)
{
  *(void *)a1 = &unk_26C675EA0;
  *(void *)(a1 + 8) = &unk_26C675F00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_2159A0F90(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C675EA0;
  *(void *)a1 = &unk_26C675F00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_2159A107C(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C675EA0;
  *(void *)a1 = &unk_26C675F00;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_2159A1194(uint64_t a1)
{
  *(void *)a1 = &unk_26C676090;
  *(void *)(a1 + 8) = &unk_26C6760F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159A1284(uint64_t a1)
{
  *(void *)a1 = &unk_26C676090;
  *(void *)(a1 + 8) = &unk_26C6760F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_2159A1394(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676090;
  *(void *)a1 = &unk_26C6760F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_2159A1480(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676090;
  *(void *)a1 = &unk_26C6760F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_2159A1598(uint64_t a1)
{
  *(void *)a1 = &unk_26C676280;
  *(void *)(a1 + 8) = &unk_26C6762E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159A1688(uint64_t a1)
{
  *(void *)a1 = &unk_26C676280;
  *(void *)(a1 + 8) = &unk_26C6762E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_2159A1798(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676280;
  *(void *)a1 = &unk_26C6762E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_2159A1884(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676280;
  *(void *)a1 = &unk_26C6762E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_2159A199C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6773C8;
  *(void *)(a1 + 8) = &unk_26C677428;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159A1A8C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6773C8;
  *(void *)(a1 + 8) = &unk_26C677428;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_2159A1B9C(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6773C8;
  *(void *)a1 = &unk_26C677428;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_2159A1C88(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6773C8;
  *(void *)a1 = &unk_26C677428;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_2159A1DA0(uint64_t a1)
{
  *(void *)a1 = &unk_26C677580;
  *(void *)(a1 + 8) = &unk_26C6775E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159A1E90(uint64_t a1)
{
  *(void *)a1 = &unk_26C677580;
  *(void *)(a1 + 8) = &unk_26C6775E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_2159A1FA0(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C677580;
  *(void *)a1 = &unk_26C6775E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_2159A208C(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C677580;
  *(void *)a1 = &unk_26C6775E0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_2159A21A4(uint64_t a1)
{
  *(void *)a1 = &unk_26C676470;
  *(void *)(a1 + 8) = &unk_26C6764D0;
  uint64_t v2 = *(void (**)(void, uint64_t, void, void, void))(a1 + 208);
  if (v2) {
    v2(0, a1 + 208, 0, 0, 0);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_2159A2260(uint64_t a1)
{
  *(void *)a1 = &unk_26C676470;
  *(void *)(a1 + 8) = &unk_26C6764D0;
  uint64_t v2 = *(void (**)(void, uint64_t, void, void, void))(a1 + 208);
  if (v2) {
    v2(0, a1 + 208, 0, 0, 0);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40294CF2FDLL);
}

void *sub_2159A2330(void *result)
{
  uint64_t v1 = result;
  *(result - 1) = &unk_26C676470;
  void *result = &unk_26C6764D0;
  uint64_t v2 = (uint64_t (*)(void, void *, void, void, void))result[25];
  if (v2) {
    uint64_t result = (void *)v2(0, result + 25, 0, 0, 0);
  }
  uint64_t v3 = *((unsigned int *)v1 + 46);
  if (v3 != -1) {
    uint64_t result = (void *)((uint64_t (*)(char *, void *))off_26C674B60[v3])(&v4, v1 + 1);
  }
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

uint64_t sub_2159A23E8(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C676470;
  *(void *)a1 = &unk_26C6764D0;
  uint64_t v3 = *(void (**)(void, uint64_t, void, void, void))(a1 + 200);
  if (v3) {
    v3(0, a1 + 200, 0, 0, 0);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 184);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v4])(&v6, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40294CF2FDLL);
}

uint64_t sub_2159A24B8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6768E0;
  *(void *)(a1 + 8) = &unk_26C676940;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159A25A8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6768E0;
  *(void *)(a1 + 8) = &unk_26C676940;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_2159A26B8(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6768E0;
  *(void *)a1 = &unk_26C676940;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_2159A27A4(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6768E0;
  *(void *)a1 = &unk_26C676940;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_2159A28BC(uint64_t a1)
{
  *(void *)a1 = &unk_26C676D48;
  *(void *)(a1 + 8) = &unk_26C676DA8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 192);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 16);
LABEL_5:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159A29AC(uint64_t a1)
{
  *(void *)a1 = &unk_26C676D48;
  *(void *)(a1 + 8) = &unk_26C676DA8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 192);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 16);
  goto LABEL_5;
}

void sub_2159A2ABC(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676D48;
  *(void *)a1 = &unk_26C676DA8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
LABEL_4:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
LABEL_5:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_2159A2BA8(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C676D48;
  *(void *)a1 = &unk_26C676DA8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1)
    {
LABEL_5:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(a1 + 184);
    if (v3 == -1) {
      goto LABEL_5;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  goto LABEL_5;
}

uint64_t sub_2159A2CC0(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_9:
  operator delete(*(void **)a1);
  return a1;
}

void sub_2159A2D50(uint64_t a1)
{
  sub_21599B36C(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_2159A2D88(uint64_t a1)
{
  return sub_21599B36C(a1 - 8);
}

void sub_2159A2D90(uint64_t a1)
{
  sub_21599B36C(a1 - 8);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_2159A2DCC(uint64_t a1)
{
  *(void *)a1 = &unk_26C677210;
  *(void *)(a1 + 8) = &unk_26C677270;
  if (*(unsigned char *)(a1 + 376) && *(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(unsigned char *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    uint64_t v2 = *(unsigned int *)(a1 + 192);
    if (v2 == -1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
LABEL_7:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_2159A2EA4(uint64_t a1)
{
  *(void *)a1 = &unk_26C677210;
  *(void *)(a1 + 8) = &unk_26C677270;
  if (*(unsigned char *)(a1 + 376) && *(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(unsigned char *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    uint64_t v2 = *(unsigned int *)(a1 + 192);
    if (v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 192);
    if (v2 == -1) {
      goto LABEL_8;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v3, a1 + 16);
  goto LABEL_8;
}

void sub_2159A2F9C(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C677210;
  *(void *)a1 = &unk_26C677270;
  if (*(unsigned char *)(a1 + 368) && *(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  if (*(unsigned char *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    uint64_t v2 = *(unsigned int *)(a1 + 184);
    if (v2 == -1) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2 != -1) {
LABEL_7:
  }
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_2159A3070(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C677210;
  *(void *)a1 = &unk_26C677270;
  if (*(unsigned char *)(a1 + 368) && *(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  if (*(unsigned char *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    uint64_t v2 = *(unsigned int *)(a1 + 184);
    if (v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x2166C4D20);
    }
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 184);
    if (v2 == -1) {
      goto LABEL_8;
    }
  }
  ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v3, a1 + 8);
  goto LABEL_8;
}

uint64_t sub_2159A3168(uint64_t a1)
{
  *(void *)a1 = &unk_26C674E68;
  *(void *)(a1 + 8) = &unk_26C674EC8;
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_2159A3200(uint64_t a1)
{
  *(void *)a1 = &unk_26C674E68;
  *(void *)(a1 + 8) = &unk_26C674EC8;
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40CF772451);
}

uint64_t sub_2159A32AC(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)(result - 8) = &unk_26C674E68;
  *(void *)uint64_t result = &unk_26C674EC8;
  uint64_t v2 = *(unsigned int *)(result + 184);
  if (v2 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C674B60[v2])(&v3, result + 8);
  }
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_2159A3340(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C674E68;
  *(void *)a1 = &unk_26C674EC8;
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40CF772451);
}

uint64_t sub_2159A33EC(uint64_t a1)
{
  *(void *)a1 = &unk_26C675020;
  *(void *)(a1 + 8) = &unk_26C675080;
  sub_2159A3688(a1 + 200);
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_2159A348C(uint64_t a1)
{
  *(void *)a1 = &unk_26C675020;
  *(void *)(a1 + 8) = &unk_26C675080;
  sub_2159A3688(a1 + 200);
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40DC57CB27);
}

uint64_t sub_2159A3540(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C675020;
  *(void *)a1 = &unk_26C675080;
  uint64_t result = sub_2159A3688(a1 + 192);
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C674B60[v3])(&v4, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_2159A35D8(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C675020;
  *(void *)a1 = &unk_26C675080;
  sub_2159A3688(a1 + 192);
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40DC57CB27);
}

uint64_t sub_2159A3688(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_15;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_15:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2159A375C(uint64_t a1)
{
  *(void *)a1 = &unk_26C6752A8;
  *(void *)(a1 + 8) = &unk_26C675308;
  sub_21573AE84(a1 + 200, *(char **)(a1 + 208));
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_2159A3800(uint64_t a1)
{
  *(void *)a1 = &unk_26C6752A8;
  *(void *)(a1 + 8) = &unk_26C675308;
  sub_21573AE84(a1 + 200, *(char **)(a1 + 208));
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40546963AFLL);
}

void sub_2159A38B8(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_26C6752A8;
  *(void *)a1 = &unk_26C675308;
  sub_21573AE84(a1 + 192, *(char **)(a1 + 200));
  uint64_t v2 = *(unsigned int *)(a1 + 184);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v3, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_2159A3954(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C6752A8;
  *(void *)a1 = &unk_26C675308;
  sub_21573AE84(a1 + 192, *(char **)(a1 + 200));
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40546963AFLL);
}

uint64_t sub_2159A3A08(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    uint64_t v2 = *(void ***)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  else
  {
    uint64_t v2 = *(void ***)a1;
    if (!*(void *)a1) {
      return a1;
    }
  }
  uint64_t v3 = *(void ***)(a1 + 8);
  char v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0) {
        operator delete(*(v3 - 4));
      }
      v3 -= 4;
    }
    while (v3 != v2);
    char v4 = *(void ***)a1;
  }
  *(void *)(a1 + 8) = v2;
  operator delete(v4);
  return a1;
}

void sub_2159A3AA4(uint64_t a1)
{
  sub_21599C054(a1);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_2159A3ADC(uint64_t a1)
{
  return sub_21599C054(a1 - 8);
}

void sub_2159A3AE4(uint64_t a1)
{
  sub_21599C054(a1 - 8);

  JUMPOUT(0x2166C4D20);
}

uint64_t sub_2159A3B20(uint64_t a1)
{
  *(void *)a1 = &unk_26C6756B8;
  *(void *)(a1 + 8) = &unk_26C675718;
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_2159A3BB8(uint64_t a1)
{
  *(void *)a1 = &unk_26C6756B8;
  *(void *)(a1 + 8) = &unk_26C675718;
  uint64_t v2 = *(unsigned int *)(a1 + 192);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x2166C4D20](a1, 0x10B3C40956CF698);
}

uint64_t sub_2159A3C64(uint64_t result)
{
  uint64_t v1 = result;
  *(void *)(result - 8) = &unk_26C6756B8;
  *(void *)uint64_t result = &unk_26C675718;
  uint64_t v2 = *(unsigned int *)(result + 184);
  if (v2 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C674B60[v2])(&v3, result + 8);
  }
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_2159A3CF8(uint64_t a1)
{
  uint64_t v2 = a1 - 8;
  *(void *)(a1 - 8) = &unk_26C6756B8;
  *(void *)a1 = &unk_26C675718;
  uint64_t v3 = *(unsigned int *)(a1 + 184);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))off_26C674B60[v3])(&v5, a1 + 8);
  }
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x2166C4D20](v2, 0x10B3C40956CF698);
}

uint64_t sub_2159A3DA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      long long v6 = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  if (*((unsigned char *)a2 + 96))
  {
    char v7 = *((unsigned char *)a2 + 88);
    *(void *)(a1 + 56) = a2[10];
    *(unsigned char *)(a1 + 64) = v7;
    *(unsigned char *)(a1 + 80) = 0;
    uint64_t v8 = a1 + 80;
    *(unsigned char *)(a1 + 72) = 1;
    *(unsigned char *)(a1 + 104) = 0;
    if (!*((unsigned char *)a2 + 72)) {
      goto LABEL_8;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 56) = 0;
    *(unsigned char *)(a1 + 80) = 0;
    uint64_t v8 = a1 + 80;
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 104) = 0;
    if (!*((unsigned char *)a2 + 72))
    {
LABEL_8:
      uint64_t v9 = a1 + 112;
      if (*((unsigned char *)a2 + 160)) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_215738B0C((unsigned char *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 3);
    *(void *)(v8 + 16) = a2[8];
    *(_OWORD *)uint64_t v8 = v10;
  }
  *(unsigned char *)(a1 + 104) = 1;
  uint64_t v9 = a1 + 112;
  if (*((unsigned char *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_215738B0C(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      long long v13 = *((_OWORD *)a2 + 7);
      uint64_t v14 = a2[16];
    }
    *(_OWORD *)uint64_t v9 = v13;
    *(void *)(v9 + 16) = v14;
    *(unsigned char *)(a1 + 136) = 1;
    char v11 = *((unsigned char *)a2 + 200);
    if (v11) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  char v11 = *((unsigned char *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_2159A3FD0(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(void *)(a1 + 160) = v14;
    char v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(unsigned char *)(a1 + 144) = 0;
LABEL_21:
  *(unsigned char *)(a1 + 168) = v11;
  return a1;
}

void sub_2159A3F64(_Unwind_Exception *exception_object)
{
  if (v1[104] && v1[103] < 0) {
    operator delete(*v3);
  }
  if (v1[48])
  {
    if (v1[47] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

double sub_2159A3FD0@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (a1[1] - *a1) >> 5;
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  sub_215742B04((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_2159A40DC(*a1, a1[1], (uint64_t)&v6);
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  return result;
}

void sub_2159A4048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  if (__p)
  {
    char v11 = a10;
    unint64_t v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != __p);
      unint64_t v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159A40DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2) {
    sub_215991FA8();
  }
  return a3;
}

void sub_2159A41EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_2159A4240@<D0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[1] - *a1;
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  sub_215992258((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_21599240C(*a1, a1[1], (uint64_t)&v6, (void (*)(void **__return_ptr, uint64_t *, uint64_t))sub_215AEF2F0);
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  return result;
}

void sub_2159A42C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  if (__p)
  {
    char v11 = a10;
    unint64_t v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((unsigned char *)v11 - 16) && *((char *)v11 - 41) < 0) {
          operator delete(*(v11 - 8));
        }
        if (*((unsigned char *)v11 - 72))
        {
          if (*((char *)v11 - 73) < 0) {
            operator delete(*(v11 - 12));
          }
        }
        v11 -= 12;
      }
      while (v11 != __p);
      unint64_t v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A439C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_2159A4AE8((uint64_t)v3, a2);
  sub_2159A44BC(a1, (uint64_t)v3);
}

void sub_2159A44A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A44BC(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "auto_timestamp";
    *(void *)(a1 + 80) = 14;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC088(a1);
  uint64_t v16 = 7;
  int v17 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a1 + 88), *(void *)(a1 + 72) = "version", *(void *)(a1 + 80) = 7, v5))
  {
    sub_215DEE064(a1, &v17);
    long long v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = 1;
    sub_215DEE064(a1, &v17);
    long long v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u)
    {
LABEL_7:
      *(void *)(a1 + 72) = "ns";
      uint64_t v7 = a1 + 72;
      uint64_t v9 = (unsigned char *)(a1 + 88);
      int v8 = *(unsigned __int8 *)(a1 + 88);
      *(void *)(a1 + 80) = 2;
      long long v10 = (void *)(a1 + 80);
      if (!v8) {
        *uint64_t v9 = 1;
      }
LABEL_16:
      uint64_t v16 = *(void *)(a2 + 8);
      unint64_t v12 = (unsigned __int8 *)sub_215DEBCD0(a1);
      int v13 = *v12;
      *unint64_t v12 = 5;
      uint64_t v14 = (void **)*((void *)v12 + 1);
      *((void *)v12 + 1) = v16;
      uint64_t v16 = (uint64_t)v14;
      sub_215CEB204((void ***)&v16, v13);
      long long v6 = *(unsigned __int8 **)(a1 + 40);
LABEL_17:
      if (*v6 <= 1u)
      {
        int v15 = *v9;
        *(void *)uint64_t v7 = "clock_type";
        *long long v10 = 10;
        if (!v15) {
          *uint64_t v9 = 1;
        }
      }
      sub_2159A4E4C();
    }
  }
  long long v10 = (void *)(a1 + 80);
  uint64_t v7 = a1 + 72;
  uint64_t v9 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && **(_DWORD **)v7 == *(_DWORD *)"version"
    && *(_DWORD *)(*(void *)v7 + 3) == *(_DWORD *)"sion")
  {
    goto LABEL_17;
  }
  goto LABEL_16;
}

void sub_2159A4A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A4AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A4AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A4AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2159A4AE8(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
    }
    else
    {
      long long v5 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  long long v6 = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 104) = 0;
  if (*(unsigned char *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(unsigned char *)(a1 + 104) = 1;
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 112), *(void **)(a2 + 112), *(void *)(a2 + 120));
    }
    else
    {
      long long v9 = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(unsigned char *)(a1 + 136) = 1;
  }
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  if (*(unsigned char *)(a2 + 168))
  {
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    sub_2159A4D18((char *)(a1 + 144), *(void *)(a2 + 144), *(void *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3));
    *(unsigned char *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_2159A4C5C(_Unwind_Exception *exception_object)
{
  if (v2[136] && v2[135] < 0) {
    operator delete(*v4);
  }
  if (v2[104] && v2[103] < 0) {
    operator delete(*v3);
  }
  if (v2[48])
  {
    if (v2[47] < 0) {
      operator delete(*v1);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_2159A4D18(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_215738AC0();
    }
    double result = (char *)operator new(24 * a4);
    long long v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          double result = (char *)sub_215738B0C(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)double result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_2159A4DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_2159A4E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0) {
      operator delete(*(void **)(v10 + v11 - 24));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_21573A27C(&a9);
  _Unwind_Resume(a1);
}

void sub_2159A4E4C()
{
  int v0 = 0;
  sub_2159A4F58();
}

void sub_2159A4F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A4F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A4F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A4F58()
{
}

void sub_2159A5154(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2159A5178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A51BC(int *a1, uint64_t a2, long long *a3)
{
  sub_215DEC088(a2);
  uint64_t v22 = "version";
  uint64_t v23 = 7;
  int v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v6 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v6))
  {
    sub_215DEE064(a2, &v24);
    int v7 = *a1;
    if (*a1 >= 1) {
      goto LABEL_4;
    }
LABEL_20:
    long long v25 = *a3;
    uint64_t v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(void *)(a2 + 72) = "ns";
      uint64_t v10 = a2 + 72;
      unint64_t v12 = (unsigned char *)(a2 + 88);
      int v15 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 80) = 2;
      int v13 = (void *)(a2 + 80);
      if (!v15) {
        *unint64_t v12 = 1;
      }
      goto LABEL_29;
    }
    int v13 = (void *)(a2 + 80);
    uint64_t v10 = a2 + 72;
    unint64_t v12 = (unsigned char *)(a2 + 88);
    if (!*(unsigned char *)(a2 + 88) || *(void *)(a2 + 80) != 7) {
      goto LABEL_29;
    }
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(void *)v10 + 3) != *(_DWORD *)"sion") {
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  *(unsigned char *)(a2 + 88) = 1;
  sub_215DEE064(a2, &v24);
  int v7 = *a1;
  if (*a1 < 1) {
    goto LABEL_20;
  }
LABEL_4:
  if (v7 == 2)
  {
    uint64_t v22 = "min_version";
    uint64_t v23 = 11;
    int v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v8 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "min_version";
      *(void *)(a2 + 80) = 11;
      if (!v8) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEE064(a2, &v24);
  }
  long long v25 = *a3;
  uint64_t v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(void *)(a2 + 72) = "ns";
    uint64_t v10 = a2 + 72;
    unint64_t v12 = (unsigned char *)(a2 + 88);
    int v11 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 80) = 2;
    int v13 = (void *)(a2 + 80);
    if (!v11) {
      *unint64_t v12 = 1;
    }
    goto LABEL_29;
  }
  int v13 = (void *)(a2 + 80);
  uint64_t v10 = a2 + 72;
  unint64_t v12 = (unsigned char *)(a2 + 88);
  if (!*(unsigned char *)(a2 + 88)
    || *(void *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (BOOL v14 = *(_DWORD *)(*(void *)v10 + 3) == *(_DWORD *)"sion")
      : (BOOL v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    uint64_t v23 = v25;
    int v17 = (unsigned __int8 *)sub_215DEBCD0(a2);
    int v18 = *v17;
    *int v17 = 5;
    LOBYTE(v22) = v18;
    uint64_t v19 = (void **)*((void *)v17 + 1);
    *((void *)v17 + 1) = v23;
    uint64_t v23 = (uint64_t)v19;
    sub_215CEB204((void ***)&v23, v18);
    uint64_t v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    int v20 = *v12;
    *(void *)uint64_t v10 = "clock_type";
    void *v13 = 10;
    if (!v20) {
      *unint64_t v12 = 1;
    }
  }
  uint64_t v22 = (char *)&v25 + 8;
  sub_2159A54F8(a2, (unsigned __int8 **)&v22);
  uint64_t v21 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v21 - 8);
  *(void *)(a2 + 56) = v21 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void sub_2159A54C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A54E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A54F8(uint64_t a1, unsigned __int8 **a2)
{
  if ((*(unsigned char *)(a1 + 12) & 2) != 0)
  {
    int v11 = 0;
    sub_2159A4F58();
  }
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v2 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2
    || ((v3 = *(int **)(a1 + 72), int v4 = *v3, v5 = *(int *)((char *)v3 + 3), v4 == *(_DWORD *)"version")
      ? (BOOL v6 = v5 == *(_DWORD *)"sion")
      : (BOOL v6 = 0),
        !v6))
  {
    uint64_t v10 = (void **)**a2;
    int v7 = (unsigned __int8 *)sub_215DEBCD0(a1);
    int v8 = *v7;
    *int v7 = 6;
    uint64_t v9 = (void **)*((void *)v7 + 1);
    *((void *)v7 + 1) = v10;
    uint64_t v10 = v9;
    sub_215CEB204(&v10, v8);
  }
}

void sub_2159A5650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  _Unwind_Resume(a1);
}

void sub_2159A5668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A5684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A5698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A56AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string::value_type *a4@<X4>, std::string::size_type a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v11 = 0x5555555555555555 * ((a1 - a3) >> 3);
  if (v11 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = 0x5555555555555555 * ((a1 - a3) >> 3);
  }
  uint64_t v13 = (v12 - 1) * a5;
  *(void *)&long long v24 = a1;
  *((void *)&v24 + 1) = a2;
  uint64_t v14 = 0;
  uint64_t v15 = a1 - a3;
  if (a1 != a3)
  {
    do
    {
      sub_2159A58C0((unsigned __int8 **)&v24, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v14 += size;
      *(void *)&long long v24 = v24 + 24;
    }
    while ((void)v24 != a3);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, v14 + v13);
  *(void *)&long long v24 = a1;
  *((void *)&v24 + 1) = a2;
  if (v15 < 0)
  {
    sub_2159A58C0((unsigned __int8 **)&v24, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a6, (const std::string::value_type *)p_p, v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((unint64_t)v11 < 2) {
        return;
      }
    }
    else if ((unint64_t)v11 < 2)
    {
      return;
    }
    *(void *)&long long v24 = v24 + 24;
    for (long long i = v24; (void)i != a3; *(void *)&long long i = i + 24)
    {
      std::string::append(a6, a4, a5);
      sub_2159A58C0((unsigned __int8 **)&i, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = &__p;
      }
      else {
        uint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a6, (const std::string::value_type *)v19, v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_2159A587C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 + 23) < 0) {
    operator delete(*(void **)v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A58C0(unsigned __int8 **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if ((v3[23] & 0x80u) == 0) {
    std::string::size_type v4 = v3[23];
  }
  else {
    std::string::size_type v4 = *((void *)v3 + 1);
  }
  std::string::reserve(a2, v4);
  uint64_t v5 = *((void *)v3 + 1);
  if ((v3[23] & 0x80u) == 0)
  {
    uint64_t v6 = v3[23];
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 **)v3;
    uint64_t v6 = v5;
  }
  if (v6)
  {
    while (1)
    {
      int v7 = *v3;
      if (v7 == 59) {
        break;
      }
      if (v7 == 92)
      {
        int v8 = "\\\\"";
LABEL_15:
        std::string::append(a2, v8, 2uLL);
        goto LABEL_10;
      }
      std::string::push_back(a2, v7);
LABEL_10:
      ++v3;
      if (!--v6) {
        return;
      }
    }
    int v8 = "\\;";
    goto LABEL_15;
  }
}

void sub_2159A5990(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A59B0(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  int v6 = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 96);
  if (v3 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, uint64_t))off_26C674BC0[v3])(&v8, v5, a2 + 32);
    int v6 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "io_format";
    *(void *)(a1 + 80) = 9;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  int v7 = 0;
  sub_2159A6140();
}

void sub_2159A5E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_2159A6B4C((uint64_t)&a25);
  uint64_t v41 = *(std::__shared_weak_count **)(v39 - 112);
  if (v41)
  {
    if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      sub_21599550C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_21599550C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159A6008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26C65F5B0;
  uint64_t v3 = *(void *)(a3 + 8);
  int v4 = *(std::__shared_weak_count **)(a3 + 16);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *(void *)(a3 + 40);
    int v6 = *(_DWORD *)(a3 + 48);
    __int16 v7 = *(_WORD *)(a3 + 52);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v5 = *(void *)(a3 + 40);
    int v6 = *(_DWORD *)(a3 + 48);
    __int16 v7 = *(_WORD *)(a3 + 52);
  }
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  uint64_t v8 = *(void *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 40) = v5;
  *(_DWORD *)(a2 + 48) = v6;
  *(_WORD *)(a2 + 52) = v7;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

__n128 sub_2159A60F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v3 = *(void *)(a3 + 16);
  *(void *)a2 = &unk_26C665E60;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a3 + 24);
  long long v6 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 54) = *(void *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v6;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_2159A6140()
{
}

void sub_2159A633C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2159A6360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A63A4()
{
}

void sub_2159A6590(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2159A65B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A65F8(_DWORD *a1, char *a2, int a3)
{
  sub_215BA1938(a1, a2, a3, (uint64_t)v15);
  if (!v15[120])
  {
    v17[0] = "save";
    v17[1] = 4;
    int v16 = a3;
    sub_215BA1760("Failure during ", (uint64_t)v17, (uint64_t)" from stream with file format ");
  }
  char v14 = 1;
  sub_2159A6928((uint64_t)&v4);
  if (!v14 && v13)
  {
    if (v12)
    {
      if (SHIBYTE(v11) < 0) {
        operator delete(v10[0]);
      }
      if (v9 < 0) {
        operator delete(v8);
      }
    }
    if (v7)
    {
      if (v6 < 0) {
        operator delete(v5[0]);
      }
    }
  }
}

void sub_2159A68D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  sub_21573FF04((uint64_t)&a31);
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_2157407D4(v31 - 168);
  _Unwind_Resume(a1);
}

void sub_2159A6914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159A6928(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 120))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v4 = sub_215983058(a1);
    sub_215E10780(v4, &v5);
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }

  return sub_2159A6A00(a1);
}

void sub_2159A69C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_2159A6A00(uint64_t result)
{
  uint64_t v1 = (long long *)result;
  if (!*(unsigned char *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    long long v3 = *v1;
    sub_215741BFC(v4, v1 + 1);
    sub_215742684((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_26C656710, (void (*)(void *))sub_2157426E8);
  }
  return result;
}

void sub_2159A6A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159A6A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_21573FF04((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_2159A6AB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2159A6ACC(uint64_t a1)
{
  *(void *)a1 = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return std::streambuf::~streambuf();
}

uint64_t sub_2159A6B4C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a1 + 96);
    unint64_t v6 = *(void *)(a1 + 56);
    if (v5 < v6)
    {
      *(void *)(a1 + 96) = v6;
      unint64_t v5 = v6;
    }
    char v7 = *(const void **)(a1 + 48);
    size_t v3 = v5 - (void)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_36;
    }
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      size_t v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    char v7 = *(const void **)(a1 + 24);
    size_t v3 = *(void *)(a1 + 40) - (void)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_36:
    }
      sub_215731CD8();
  }
  if (v3 >= 0x17)
  {
    uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v8 = v3 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    size_t v24 = v3;
    int64_t v25 = v9 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3) {
LABEL_13:
  }
    memmove(p_dst, v7, v3);
LABEL_14:
  *((unsigned char *)p_dst + v3) = 0;
  char v10 = HIBYTE(v25);
  if (v25 >= 0) {
    size_t v11 = HIBYTE(v25);
  }
  else {
    size_t v11 = v24;
  }
  uint64_t v12 = *(void *)a1;
  if (!*(unsigned char *)(*(void *)a1 + 88)
    || *(void *)(v12 + 80) != 7
    || ((char v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (BOOL v16 = v15 == *(_DWORD *)"sion")
      : (BOOL v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    int v27 = (void **)v11;
    std::string::size_type v17 = (unsigned __int8 *)sub_215DEBCD0(v12);
    int v18 = *v17;
    *std::string::size_type v17 = v26;
    LOBYTE(v26) = v18;
    uint64_t v19 = (void **)*((void *)v17 + 1);
    *((void *)v17 + 1) = v27;
    int v27 = v19;
    sub_215CEB204(&v27, v18);
    char v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    std::string::size_type v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      std::string::size_type v20 = 0;
    }
  }
  else
  {
    std::string::size_type v20 = (void **)&__dst;
  }
  uint64_t v21 = *(void *)a1;
  size_t v26 = v11;
  int v27 = v20;
  sub_215DEC208(v21, &v26);
  if (SHIBYTE(v25) < 0)
  {
    operator delete(__dst);
    std::ostream::~ostream();
    *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_34:
    operator delete(*(void **)(a1 + 72));
    goto LABEL_32;
  }
  std::ostream::~ostream();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    goto LABEL_34;
  }
LABEL_32:
  std::streambuf::~streambuf();
  return a1;
}

void sub_2159A6DE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  sub_215731D80(a1);
}

void sub_2159A6DFC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159A4AE8((uint64_t)v8, a2);
  sub_2159A6F1C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    unint64_t v5 = (void **)__p;
    if (__p)
    {
      unint64_t v6 = v19;
      char v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        char v7 = __p;
      }
      uint64_t v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159A6F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A6F1C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v6 + 40))
  {
    uint64_t v39 = (uint64_t *)(v6 + 16);
    sub_215E05FEC(&v39, 2u);
    sub_215E0076C(*(void *)(a1 + 24));
    uint64_t v7 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v7 + 40)) {
      goto LABEL_3;
    }
LABEL_6:
    sub_215E068A8();
    int v8 = *(char *)(a2 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v9 + 40)) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  sub_215E0626C((uint64_t)&v39, v6 + 8);
  sub_215E0076C(*(void *)(a1 + 24));
  uint64_t v7 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v7 + 40)) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v39 = (uint64_t *)(v7 + 16);
  sub_215E06360(&v39, *(void *)(a2 + 8));
  int v8 = *(char *)(a2 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v9 + 40))
  {
LABEL_4:
    uint64_t v39 = (uint64_t *)(v9 + 16);
    sub_215E053CC(&v39, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v39) = -52;
    BYTE1(v39) = v8;
  }
  else
  {
    LOBYTE(v39) = v8;
  }
  std::ostream::write();
LABEL_11:
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(*(void *)(v10 + 88) - 8);
  sub_215E001AC((uint64_t *)(v10 + 48), *(void *)(v10 + 16) - v11 - 9);
  size_t v12 = *(void *)(v10 + 48);
  if (v12) {
    memmove((void *)(*(void *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  }
  *(void *)(v10 + 48) = 0;
  uint64_t v13 = *(void *)(v10 + 80);
  uint64_t v14 = *(void *)(v10 + 88) - 8;
  *(void *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(unsigned char *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(unsigned char *)(v10 + 40) = 0;
    }
  }
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v15 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v15 + 40))
    {
      uint64_t v39 = (uint64_t *)(v15 + 16);
      sub_215E053CC(&v39, 1);
      uint64_t v16 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v16 + 40)) {
        goto LABEL_19;
      }
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      uint64_t v16 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v16 + 40))
      {
LABEL_19:
        uint64_t v39 = (uint64_t *)(v16 + 16);
        sub_215E07110((uint64_t)&v38, &v39, (const void **)(a2 + 24));
        if (a3 < 4) {
          return;
        }
        goto LABEL_28;
      }
    }
    sub_215E0752C((uint64_t)&v39, v16 + 8, a2 + 24);
    if (a3 < 4) {
      return;
    }
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v17 + 40))
    {
      uint64_t v39 = (uint64_t *)(v17 + 16);
      sub_215E053CC(&v39, 0);
      if (a3 < 4) {
        return;
      }
    }
    else
    {
      LOBYTE(v39) = 0;
      std::ostream::write();
      if (a3 < 4) {
        return;
      }
    }
  }
LABEL_28:
  sub_2159A7590(a1, a2 + 56);
  if (a3 != 5)
  {
    if (a3 < 6) {
      return;
    }
    if (!*(unsigned char *)(a2 + 104))
    {
      uint64_t v23 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v23 + 40))
      {
        uint64_t v39 = (uint64_t *)(v23 + 16);
        sub_215E053CC(&v39, 0);
        if (!*(unsigned char *)(a2 + 136))
        {
LABEL_54:
          uint64_t v26 = *(void *)(a1 + 24);
          if (*(unsigned char *)(v26 + 40))
          {
            uint64_t v39 = (uint64_t *)(v26 + 16);
            sub_215E053CC(&v39, 0);
            if (*(unsigned char *)(a2 + 168)) {
              goto LABEL_56;
            }
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
            if (*(unsigned char *)(a2 + 168))
            {
LABEL_56:
              uint64_t v27 = *(void *)(a1 + 24);
              if (*(unsigned char *)(v27 + 40))
              {
                uint64_t v39 = (uint64_t *)(v27 + 16);
                sub_215E053CC(&v39, 1);
              }
              else
              {
                LOBYTE(v39) = 1;
                std::ostream::write();
              }
              unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3);
              uint64_t v29 = *(void *)(a1 + 24);
              if (*(unsigned char *)(v29 + 40))
              {
                uint64_t v39 = (uint64_t *)(v29 + 16);
                sub_215E069EC(&v39, v28);
              }
              else
              {
                sub_215E06D00();
              }
              uint64_t v31 = *(const void ***)(a2 + 144);
              int v30 = *(const void ***)(a2 + 152);
              uint64_t v32 = ((char *)v30 - (char *)v31) / 24;
              uint64_t v33 = *(void *)(a1 + 24);
              if (*(unsigned char *)(v33 + 40))
              {
                uint64_t v39 = (uint64_t *)(v33 + 16);
                if (v30 != v31)
                {
                  uint64_t v34 = 24 * v32;
                  do
                  {
                    sub_215E07110((uint64_t)&v38, &v39, v31);
                    v31 += 3;
                    v34 -= 24;
                  }
                  while (v34);
                }
              }
              else if (v30 != v31)
              {
                uint64_t v35 = v33 + 8;
                uint64_t v36 = 24 * v32;
                do
                {
                  sub_215E0752C((uint64_t)&v39, v35, (uint64_t)v31);
                  v31 += 3;
                  v36 -= 24;
                }
                while (v36);
              }
              return;
            }
          }
LABEL_72:
          uint64_t v37 = *(void *)(a1 + 24);
          if (*(unsigned char *)(v37 + 40))
          {
            uint64_t v39 = (uint64_t *)(v37 + 16);
            sub_215E053CC(&v39, 0);
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
          }
          return;
        }
      }
      else
      {
        LOBYTE(v39) = 0;
        std::ostream::write();
        if (!*(unsigned char *)(a2 + 136)) {
          goto LABEL_54;
        }
      }
LABEL_46:
      uint64_t v24 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v24 + 40))
      {
        uint64_t v39 = (uint64_t *)(v24 + 16);
        sub_215E053CC(&v39, 1);
        uint64_t v25 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v25 + 40)) {
          goto LABEL_48;
        }
      }
      else
      {
        LOBYTE(v39) = 1;
        std::ostream::write();
        uint64_t v25 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v25 + 40))
        {
LABEL_48:
          uint64_t v39 = (uint64_t *)(v25 + 16);
          sub_215E07110((uint64_t)&v38, &v39, (const void **)(a2 + 112));
          if (*(unsigned char *)(a2 + 168)) {
            goto LABEL_56;
          }
          goto LABEL_72;
        }
      }
      sub_215E0752C((uint64_t)&v39, v25 + 8, a2 + 112);
      if (*(unsigned char *)(a2 + 168)) {
        goto LABEL_56;
      }
      goto LABEL_72;
    }
    uint64_t v21 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v21 + 40))
    {
      uint64_t v39 = (uint64_t *)(v21 + 16);
      sub_215E053CC(&v39, 1);
      uint64_t v22 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v22 + 40)) {
        goto LABEL_37;
      }
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      uint64_t v22 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v22 + 40))
      {
LABEL_37:
        uint64_t v39 = (uint64_t *)(v22 + 16);
        sub_215E07110((uint64_t)&v38, &v39, (const void **)(a2 + 80));
        if (!*(unsigned char *)(a2 + 136)) {
          goto LABEL_54;
        }
        goto LABEL_46;
      }
    }
    sub_215E0752C((uint64_t)&v39, v22 + 8, a2 + 80);
    if (!*(unsigned char *)(a2 + 136)) {
      goto LABEL_54;
    }
    goto LABEL_46;
  }
  if (!*(unsigned char *)(a2 + 104)) {
    goto LABEL_72;
  }
  int v18 = (const void **)(a2 + 80);
  uint64_t v19 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v19 + 40))
  {
    uint64_t v39 = (uint64_t *)(v19 + 16);
    sub_215E053CC(&v39, 1);
    uint64_t v20 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v20 + 40))
    {
LABEL_32:
      uint64_t v39 = (uint64_t *)(v20 + 16);
      sub_215E07110((uint64_t)&v38, &v39, v18);
      return;
    }
  }
  else
  {
    LOBYTE(v39) = 1;
    std::ostream::write();
    uint64_t v20 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v20 + 40)) {
      goto LABEL_32;
    }
  }
  sub_215E0752C((uint64_t)&v39, v20 + 8, (uint64_t)v18);
}

void sub_2159A7590(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(a2 + 16))
  {
    if (*(unsigned char *)(v2 + 40))
    {
      uint64_t v14 = (uint64_t *)(v2 + 16);
      sub_215E053CC(&v14, 0);
    }
    else
    {
      LOBYTE(v14) = 0;
      std::ostream::write();
    }
    return;
  }
  if (*(unsigned char *)(v2 + 40))
  {
    uint64_t v14 = (uint64_t *)(v2 + 16);
    sub_215E053CC(&v14, 1);
    uint64_t v5 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v5 + 40)) {
      goto LABEL_4;
    }
  }
  else
  {
    LOBYTE(v14) = 1;
    std::ostream::write();
    uint64_t v5 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v5 + 40))
    {
LABEL_4:
      uint64_t v14 = (uint64_t *)(v5 + 16);
      sub_215E05FEC(&v14, 2u);
      sub_215E0076C(*(void *)(a1 + 24));
      uint64_t v6 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v6 + 40)) {
        goto LABEL_5;
      }
LABEL_12:
      sub_215E068A8();
      int v7 = *(char *)(a2 + 8);
      uint64_t v8 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v8 + 40)) {
        goto LABEL_6;
      }
LABEL_13:
      if (v7 < 0)
      {
        LOBYTE(v14) = -52;
        BYTE1(v14) = v7;
      }
      else
      {
        LOBYTE(v14) = v7;
      }
      std::ostream::write();
      goto LABEL_18;
    }
  }
  sub_215E0626C((uint64_t)&v14, v5 + 8);
  sub_215E0076C(*(void *)(a1 + 24));
  uint64_t v6 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v6 + 40)) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v14 = (uint64_t *)(v6 + 16);
  sub_215E06360(&v14, *(void *)a2);
  int v7 = *(char *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v8 + 40)) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v14 = (uint64_t *)(v8 + 16);
  sub_215E053CC(&v14, v7);
LABEL_18:
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
}

void sub_2159A77A8(uint64_t *a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
  *(_OWORD *)&v17[12] = *(_OWORD *)(a2 + 12);
  v18[0] = 0;
  unsigned int v19 = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 96);
  if (v3 != -1)
  {
    ((void (*)(_DWORD *, unsigned char *, uint64_t))off_26C674BC0[v3])(v30, v18, a2 + 32);
    unsigned int v19 = v3;
  }
  uint64_t v4 = a1[3];
  if (*(unsigned char *)(v4 + 40))
  {
    uint64_t v20 = (uint64_t *)(v4 + 16);
    sub_215E058EC(&v20, *(unsigned __int16 *)v17);
  }
  else if (*(unsigned __int16 *)v17 > 0x7Fu)
  {
    if (*(unsigned __int16 *)v17 > 0xFFu)
    {
      LOBYTE(v20) = -51;
      *(_WORD *)((char *)&v20 + 1) = __rev16(*(unsigned __int16 *)v17);
    }
    else
    {
      LOBYTE(v20) = -52;
      BYTE1(v20) = v17[0];
    }
    std::ostream::write();
  }
  else
  {
    LOBYTE(v20) = v17[0];
    std::ostream::write();
  }
  uint64_t v5 = a1[3];
  if (*(unsigned char *)(v5 + 40))
  {
    uint64_t v20 = (uint64_t *)(v5 + 16);
    sub_215E05FEC(&v20, 2u);
  }
  else
  {
    LOBYTE(v20) = 2;
    std::ostream::write();
  }
  sub_215E0076C(a1[3]);
  uint64_t v6 = a1[3];
  if (*(unsigned char *)(v6 + 40))
  {
    uint64_t v20 = (uint64_t *)(v6 + 16);
    sub_215E069EC(&v20, *(unint64_t *)&v17[8]);
  }
  else
  {
    sub_215E06D00();
  }
  uint64_t v7 = a1[3];
  if (*(unsigned char *)(v7 + 40))
  {
    uint64_t v20 = (uint64_t *)(v7 + 16);
    sub_215E05FEC(&v20, *(unsigned int *)&v17[16]);
    sub_215E05FEC(&v20, *(unsigned int *)&v17[20]);
  }
  else
  {
    uint64_t v8 = v7 + 8;
    sub_215E0626C((uint64_t)&v20, v7 + 8);
    sub_215E0626C((uint64_t)&v20, v8);
  }
  uint64_t v9 = a1[3];
  uint64_t v10 = *(void *)(*(void *)(v9 + 88) - 8);
  sub_215E001AC((uint64_t *)(v9 + 48), *(void *)(v9 + 16) - v10 - 9);
  size_t v11 = *(void *)(v9 + 48);
  if (v11) {
    memmove((void *)(*(void *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  }
  *(void *)(v9 + 48) = 0;
  uint64_t v12 = *(void *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 88) - 8;
  *(void *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(unsigned char *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(unsigned char *)(v9 + 40) = 0;
    }
  }
  if (*(unsigned __int16 *)v17 == 1)
  {
    sub_215BAEED0((uint64_t)v17, (uint64_t)&v20);
    sub_215BB1A7C(a1, (uint64_t)&v20);
    uint64_t v14 = v22;
    if (!v22)
    {
LABEL_30:
      uint64_t v16 = v19;
      if (v19 == -1) {
        return;
      }
      goto LABEL_31;
    }
  }
  else
  {
    int v15 = sub_215BB14AC(*(unsigned __int16 *)v17);
    sub_215BAEED0((uint64_t)v17, (uint64_t)v30);
    uint64_t v20 = a1;
    std::streambuf::basic_streambuf();
    uint64_t v21 = MEMORY[0x263F8C318] + 16;
    long long v23 = 0u;
    long long v24 = 0u;
    int v25 = 24;
    uint64_t v26 = MEMORY[0x263F8C2F8] + 24;
    v27.__vftable = (std::ios_base_vtbl *)(MEMORY[0x263F8C2F8] + 64);
    std::ios_base::init(&v27, &v21);
    uint64_t v28 = 0;
    int v29 = -1;
    sub_2159A65F8(v30, (char *)&v26, v15);
    sub_2159A7C6C((uint64_t)&v20);
    uint64_t v14 = v31;
    if (!v31) {
      goto LABEL_30;
    }
  }
  if (atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_30;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  uint64_t v16 = v19;
  if (v19 == -1) {
    return;
  }
LABEL_31:
  ((void (*)(uint64_t **, unsigned char *))off_26C674AF0[v16])(&v20, v18);
}

void sub_2159A7B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_2159A7C6C((uint64_t)&a23);
  uint64_t v39 = *(std::__shared_weak_count **)(v37 - 104);
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      sub_21599550C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_21599550C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2159A7C6C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a1 + 96);
    unint64_t v6 = *(void *)(a1 + 56);
    if (v5 < v6)
    {
      *(void *)(a1 + 96) = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = *(const void **)(a1 + 48);
    size_t v3 = v5 - (void)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_31;
    }
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      size_t v3 = 0;
      HIBYTE(v17) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    uint64_t v7 = *(const void **)(a1 + 24);
    size_t v3 = *(void *)(a1 + 40) - (void)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_31:
    }
      sub_215731CD8();
  }
  if (v3 >= 0x17)
  {
    uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v8 = v3 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    size_t v16 = v3;
    int64_t v17 = v9 | 0x8000000000000000;
    long long __dst = (uint64_t *)p_dst;
    goto LABEL_13;
  }
  HIBYTE(v17) = v3;
  p_dst = (void **)&__dst;
  if (v3) {
LABEL_13:
  }
    memmove(p_dst, v7, v3);
LABEL_14:
  *((unsigned char *)p_dst + v3) = 0;
  if (v17 >= 0) {
    unint64_t v10 = HIBYTE(v17);
  }
  else {
    unint64_t v10 = v16;
  }
  uint64_t v11 = *(void *)(*(void *)a1 + 24);
  if (*(unsigned char *)(v11 + 40))
  {
    v19[0] = (uint64_t *)(v11 + 16);
    sub_215E069EC(v19, v10);
  }
  else
  {
    sub_215E06D00();
  }
  if (SHIBYTE(v17) < 0)
  {
    uint64_t v12 = __dst;
    if (v10 && !__dst)
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = (uint64_t *)&__dst;
  }
  uint64_t v13 = *(void *)(*(void *)a1 + 24);
  if (*(unsigned char *)(v13 + 40))
  {
    int v18 = (uint64_t *)(v13 + 16);
    LODWORD(v19[0]) = v10;
    v19[1] = v12;
    sub_215E04FC4((uint64_t)&v20, &v18, (unsigned int *)v19);
  }
  else
  {
    if (v10 > 0xFF)
    {
      if (WORD1(v10))
      {
        LOBYTE(v19[0]) = -58;
        *(_DWORD *)((char *)v19 + 1) = bswap32(v10);
      }
      else
      {
        LOBYTE(v19[0]) = -59;
        *(_WORD *)((char *)v19 + 1) = bswap32(v10) >> 16;
      }
      std::ostream::write();
    }
    else
    {
      LOBYTE(v19[0]) = -60;
      BYTE1(v19[0]) = v10;
      std::ostream::write();
    }
    std::ostream::write();
  }
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__dst);
    std::ostream::~ostream();
    *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_39;
    }
LABEL_41:
    operator delete(*(void **)(a1 + 72));
    goto LABEL_39;
  }
  std::ostream::~ostream();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    goto LABEL_41;
  }
LABEL_39:
  std::streambuf::~streambuf();
  return a1;
}

void sub_2159A7F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_2159A4AE8((uint64_t)v3, a2);
  sub_2159A8084(a1, (uint64_t)v3);
}

void sub_2159A806C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A8084(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "auto_timestamp";
    *(void *)(a1 + 80) = 14;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEB804(a1);
  uint64_t v16 = 7;
  int v17 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a1 + 88), *(void *)(a1 + 72) = "version", *(void *)(a1 + 80) = 7, v5))
  {
    sub_215DEC344(a1, &v17);
    unint64_t v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = 1;
    sub_215DEC344(a1, &v17);
    unint64_t v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u)
    {
LABEL_7:
      *(void *)(a1 + 72) = "ns";
      uint64_t v7 = a1 + 72;
      uint64_t v9 = (unsigned char *)(a1 + 88);
      int v8 = *(unsigned __int8 *)(a1 + 88);
      *(void *)(a1 + 80) = 2;
      unint64_t v10 = (void *)(a1 + 80);
      if (!v8) {
        *uint64_t v9 = 1;
      }
LABEL_16:
      uint64_t v16 = *(void *)(a2 + 8);
      uint64_t v12 = (unsigned __int8 *)sub_215DEB350(a1);
      int v13 = *v12;
      *uint64_t v12 = 5;
      uint64_t v14 = *((void *)v12 + 1);
      *((void *)v12 + 1) = v16;
      uint64_t v16 = v14;
      sub_215CE9D14(&v16, v13);
      unint64_t v6 = *(unsigned __int8 **)(a1 + 40);
LABEL_17:
      if (*v6 <= 1u)
      {
        int v15 = *v9;
        *(void *)uint64_t v7 = "clock_type";
        *unint64_t v10 = 10;
        if (!v15) {
          *uint64_t v9 = 1;
        }
      }
      sub_2159A86B0();
    }
  }
  unint64_t v10 = (void *)(a1 + 80);
  uint64_t v7 = a1 + 72;
  uint64_t v9 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && **(_DWORD **)v7 == *(_DWORD *)"version"
    && *(_DWORD *)(*(void *)v7 + 3) == *(_DWORD *)"sion")
  {
    goto LABEL_17;
  }
  goto LABEL_16;
}

void sub_2159A8630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A8668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A8680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A8698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A86B0()
{
  int v0 = 0;
  sub_2159A4F58();
}

void sub_2159A8778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A8794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A87A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A87BC(int *a1, uint64_t a2, long long *a3)
{
  sub_215DEB804(a2);
  uint64_t v22 = "version";
  uint64_t v23 = 7;
  int v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v6 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v6))
  {
    sub_215DEC344(a2, &v24);
    int v7 = *a1;
    if (*a1 >= 1) {
      goto LABEL_4;
    }
LABEL_20:
    long long v25 = *a3;
    uint64_t v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(void *)(a2 + 72) = "ns";
      uint64_t v10 = a2 + 72;
      uint64_t v12 = (unsigned char *)(a2 + 88);
      int v15 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 80) = 2;
      int v13 = (void *)(a2 + 80);
      if (!v15) {
        *uint64_t v12 = 1;
      }
      goto LABEL_29;
    }
    int v13 = (void *)(a2 + 80);
    uint64_t v10 = a2 + 72;
    uint64_t v12 = (unsigned char *)(a2 + 88);
    if (!*(unsigned char *)(a2 + 88) || *(void *)(a2 + 80) != 7) {
      goto LABEL_29;
    }
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(void *)v10 + 3) != *(_DWORD *)"sion") {
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  *(unsigned char *)(a2 + 88) = 1;
  sub_215DEC344(a2, &v24);
  int v7 = *a1;
  if (*a1 < 1) {
    goto LABEL_20;
  }
LABEL_4:
  if (v7 == 2)
  {
    uint64_t v22 = "min_version";
    uint64_t v23 = 11;
    int v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      int v8 = *(unsigned __int8 *)(a2 + 88);
      *(void *)(a2 + 72) = "min_version";
      *(void *)(a2 + 80) = 11;
      if (!v8) {
        *(unsigned char *)(a2 + 88) = 1;
      }
    }
    sub_215DEC344(a2, &v24);
  }
  long long v25 = *a3;
  uint64_t v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(void *)(a2 + 72) = "ns";
    uint64_t v10 = a2 + 72;
    uint64_t v12 = (unsigned char *)(a2 + 88);
    int v11 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 80) = 2;
    int v13 = (void *)(a2 + 80);
    if (!v11) {
      *uint64_t v12 = 1;
    }
    goto LABEL_29;
  }
  int v13 = (void *)(a2 + 80);
  uint64_t v10 = a2 + 72;
  uint64_t v12 = (unsigned char *)(a2 + 88);
  if (!*(unsigned char *)(a2 + 88)
    || *(void *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (BOOL v14 = *(_DWORD *)(*(void *)v10 + 3) == *(_DWORD *)"sion")
      : (BOOL v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    uint64_t v23 = v25;
    int v17 = (unsigned __int8 *)sub_215DEB350(a2);
    int v18 = *v17;
    *int v17 = 5;
    LOBYTE(v22) = v18;
    uint64_t v19 = *((void *)v17 + 1);
    *((void *)v17 + 1) = v23;
    uint64_t v23 = v19;
    sub_215CE9D14(&v23, v18);
    uint64_t v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    int v20 = *v12;
    *(void *)uint64_t v10 = "clock_type";
    void *v13 = 10;
    if (!v20) {
      *uint64_t v12 = 1;
    }
  }
  uint64_t v22 = (char *)&v25 + 8;
  sub_2159A8AF8(a2, (unsigned __int8 **)&v22);
  uint64_t v21 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v21 - 8);
  *(void *)(a2 + 56) = v21 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void sub_2159A8AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A8AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159A8AF8(uint64_t a1, unsigned __int8 **a2)
{
  if ((*(unsigned char *)(a1 + 12) & 2) != 0)
  {
    int v11 = 0;
    sub_2159A4F58();
  }
  if (*(unsigned char *)(a1 + 88)) {
    BOOL v2 = *(void *)(a1 + 80) == 7;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2
    || ((v3 = *(int **)(a1 + 72), int v4 = *v3, v5 = *(int *)((char *)v3 + 3), v4 == *(_DWORD *)"version")
      ? (BOOL v6 = v5 == *(_DWORD *)"sion")
      : (BOOL v6 = 0),
        !v6))
  {
    uint64_t v10 = **a2;
    int v7 = (unsigned __int8 *)sub_215DEB350(a1);
    int v8 = *v7;
    *int v7 = 6;
    uint64_t v9 = *((void *)v7 + 1);
    *((void *)v7 + 1) = v10;
    uint64_t v10 = v9;
    sub_215CE9D14(&v10, v8);
  }
}

void sub_2159A8C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v13, a13);
  _Unwind_Resume(a1);
}

void sub_2159A8C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A8C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A8C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A8CAC(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  int v6 = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 96);
  if (v3 != -1)
  {
    ((void (*)(uint64_t *, unsigned char *, uint64_t))off_26C674BC0[v3])(&v8, v5, a2 + 32);
    int v6 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "io_format";
    *(void *)(a1 + 80) = 9;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  int v7 = 0;
  sub_2159A6140();
}

void sub_2159A9178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,int a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_2159A9304((uint64_t)&a25);
  uint64_t v41 = *(std::__shared_weak_count **)(v39 - 112);
  if (v41)
  {
    if (!atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      sub_21599550C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_21599550C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2159A9304(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a1 + 96);
    unint64_t v6 = *(void *)(a1 + 56);
    if (v5 < v6)
    {
      *(void *)(a1 + 96) = v6;
      unint64_t v5 = v6;
    }
    int v7 = *(const void **)(a1 + 48);
    size_t v3 = v5 - (void)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_36;
    }
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      size_t v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    int v7 = *(const void **)(a1 + 24);
    size_t v3 = *(void *)(a1 + 40) - (void)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_36:
    }
      sub_215731CD8();
  }
  if (v3 >= 0x17)
  {
    uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v8 = v3 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    size_t v24 = v3;
    int64_t v25 = v9 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3) {
LABEL_13:
  }
    memmove(p_dst, v7, v3);
LABEL_14:
  *((unsigned char *)p_dst + v3) = 0;
  char v10 = HIBYTE(v25);
  if (v25 >= 0) {
    uint64_t v11 = HIBYTE(v25);
  }
  else {
    uint64_t v11 = v24;
  }
  uint64_t v12 = *(void *)a1;
  if (!*(unsigned char *)(*(void *)a1 + 88)
    || *(void *)(v12 + 80) != 7
    || ((int v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (BOOL v16 = v15 == *(_DWORD *)"sion")
      : (BOOL v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    uint64_t v27 = v11;
    int v17 = (unsigned __int8 *)sub_215DEB350(v12);
    int v18 = *v17;
    *int v17 = v26;
    LOBYTE(v26) = v18;
    uint64_t v19 = *((void *)v17 + 1);
    *((void *)v17 + 1) = v27;
    uint64_t v27 = v19;
    sub_215CE9D14(&v27, v18);
    char v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    int v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      int v20 = 0;
    }
  }
  else
  {
    int v20 = (void **)&__dst;
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v26 = v11;
  uint64_t v27 = (uint64_t)v20;
  sub_215DEB984(v21, (size_t *)&v26);
  if (SHIBYTE(v25) < 0)
  {
    operator delete(__dst);
    std::ostream::~ostream();
    *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_34:
    operator delete(*(void **)(a1 + 72));
    goto LABEL_32;
  }
  std::ostream::~ostream();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    goto LABEL_34;
  }
LABEL_32:
  std::streambuf::~streambuf();
  return a1;
}

void sub_2159A9598(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v13, a13);
  sub_215731D80(a1);
}

void sub_2159A95B4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159A4AE8((uint64_t)v8, a2);
  sub_2159A96D4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    unint64_t v5 = (void **)__p;
    if (__p)
    {
      unint64_t v6 = v19;
      int v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        int v7 = __p;
      }
      uint64_t v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159A96BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159A96D4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(void *)(a1 + 40))
  {
    unint64_t v6 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    uint64_t v8 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 16);
  sub_215DF927C(a1, (unsigned __int8 *)&__p);
  std::string::value_type v9 = *(unsigned char *)(a1 + 34);
  if (*(void *)(a1 + 40))
  {
    char v10 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v10, (uint64_t)&__p, 1);
  }
  char v11 = *(void **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_215731D94(v11, (uint64_t)&__p, 1);
  ++*(void *)(a1 + 40);
  if (*(unsigned char *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_215DF927C(a1, (unsigned __int8 *)&__p);
    sub_215DF933C(a1, a2 + 24);
    if (a3 < 4) {
      return;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_215DF927C(a1, (unsigned __int8 *)&__p);
    if (a3 < 4) {
      return;
    }
  }
  sub_2159A9B60(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(unsigned char *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_215DF927C(a1, (unsigned __int8 *)&__p);
      sub_215DF933C(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_215DF927C(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6) {
    return;
  }
  if (*(unsigned char *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_215DF927C(a1, (unsigned __int8 *)&__p);
    sub_215DF933C(a1, a2 + 80);
    if (*(unsigned char *)(a2 + 136)) {
      goto LABEL_17;
    }
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_215DF927C(a1, (unsigned __int8 *)&__p);
    if (*(void *)(a1 + 40))
    {
      uint64_t v22 = *(void **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
      sub_215731D94(v22, (uint64_t)&__p, 1);
      ++*(void *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      char v27 = 0;
      if (*(unsigned char *)(a2 + 168)) {
        goto LABEL_18;
      }
    }
    else
    {
      *(void *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      char v27 = 0;
      if (*(unsigned char *)(a2 + 168)) {
        goto LABEL_18;
      }
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_215DF927C(a1, (unsigned __int8 *)&v25);
    if (*(void *)(a1 + 40))
    {
      uint64_t v23 = *(void **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
      sub_215731D94(v23, (uint64_t)&v25, 1);
      uint64_t v24 = *(void *)(a1 + 40) + 1;
    }
    else
    {
      uint64_t v24 = 1;
    }
    *(void *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_215DF927C(a1, (unsigned __int8 *)&__p);
  if (*(void *)(a1 + 40))
  {
    uint64_t v21 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v21, (uint64_t)&__p, 1);
    ++*(void *)(a1 + 40);
    if (!*(unsigned char *)(a2 + 136)) {
      goto LABEL_43;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 1;
    if (!*(unsigned char *)(a2 + 136)) {
      goto LABEL_43;
    }
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_215DF927C(a1, (unsigned __int8 *)&__p);
  sub_215DF933C(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v27 = 0;
  if (!*(unsigned char *)(a2 + 168)) {
    goto LABEL_45;
  }
LABEL_18:
  uint64_t v14 = *(void *)(a2 + 144);
  uint64_t v15 = *(void *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_215742E98(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    char v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      uint64_t v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0) {
        int v18 = v16;
      }
      else {
        int v18 = (uint64_t *)*v16;
      }
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = v16[1];
      }
      if (v17)
      {
        uint64_t v19 = 0;
        while (1)
        {
          int v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92) {
            break;
          }
          if (v17 == ++v19) {
            goto LABEL_20;
          }
        }
        if (v17 != v19 && v19 != -1) {
          break;
        }
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15) {
        goto LABEL_36;
      }
    }
    sub_2159A56AC(v14, v15, *(void *)(a2 + 152), ";", 1uLL, &v25);
  }
  std::string __p = v25;
  char v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_215DF927C(a1, (unsigned __int8 *)&v25);
  sub_215DF933C(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2159A9B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159A9B60(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16))
  {
    unsigned __int8 v11 = 1;
    sub_215DF927C(a1, &v11);
    if (*(void *)(a1 + 40))
    {
      int v4 = *(void **)(a1 + 24);
      char v13 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v4, (uint64_t)&v13, 1);
    }
    std::ostream::operator<<();
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v5 + 1;
    if (v5 != -1)
    {
      unint64_t v6 = *(void **)(a1 + 24);
      char v14 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v6, (uint64_t)&v14, 1);
    }
    std::ostream::operator<<();
    ++*(void *)(a1 + 40);
    unsigned __int8 v12 = *(unsigned char *)(a2 + 8);
    sub_215DF927C(a1, &v12);
    char v7 = *(unsigned char *)(a1 + 34);
    if (*(void *)(a1 + 40))
    {
      uint64_t v8 = *(void **)(a1 + 24);
      char v15 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v8, (uint64_t)&v15, 1);
    }
    std::string::value_type v9 = *(void **)(a1 + 24);
    char v16 = v7;
    sub_215731D94(v9, (uint64_t)&v16, 1);
    ++*(void *)(a1 + 40);
  }
  else
  {
    unsigned __int8 v10 = 0;
    sub_215DF927C(a1, &v10);
  }
}

void sub_2159A9C8C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)int v20 = *(_OWORD *)a2;
  *(_OWORD *)&v20[12] = *(_OWORD *)(a2 + 12);
  v21[0] = 0;
  unsigned int v22 = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 96);
  if (v3 != -1)
  {
    ((void (*)(_DWORD *, unsigned char *, uint64_t))off_26C674BC0[v3])(v33, v21, a2 + 32);
    unsigned int v22 = v3;
  }
  if (*(void *)(a1 + 40))
  {
    int v4 = *(void **)(a1 + 24);
    LOBYTE(v23) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v5 + 1;
  if (v5 != -1)
  {
    unint64_t v6 = *(void **)(a1 + 24);
    LOBYTE(v23) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v6, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    uint64_t v8 = *(void **)(a1 + 24);
    LOBYTE(v23) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v8, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v9 + 1;
  if (v9 != -1)
  {
    unsigned __int8 v10 = *(void **)(a1 + 24);
    LOBYTE(v23) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v10, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v11 + 1;
  if (v11 != -1)
  {
    unsigned __int8 v12 = *(void **)(a1 + 24);
    LOBYTE(v23) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v12, (uint64_t)&v23, 1);
  }
  std::ostream::operator<<();
  uint64_t v13 = *(void *)(a1 + 40);
  char v14 = *(unsigned char *)(a1 + 34);
  *(void *)(a1 + 40) = v13 + 1;
  if (v13 != -1)
  {
    char v15 = *(void **)(a1 + 24);
    LOBYTE(v23) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v15, (uint64_t)&v23, 1);
  }
  char v16 = *(void **)(a1 + 24);
  LOBYTE(v23) = v14;
  sub_215731D94(v16, (uint64_t)&v23, 1);
  ++*(void *)(a1 + 40);
  if (*(unsigned __int16 *)v20 == 1)
  {
    sub_215BAEED0((uint64_t)v20, (uint64_t)&v23);
    sub_215BB1A7C((const void *)a1, (uint64_t)&v23);
    uint64_t v17 = v25;
    if (!v25)
    {
LABEL_20:
      uint64_t v19 = v22;
      if (v22 == -1) {
        return;
      }
      goto LABEL_21;
    }
  }
  else
  {
    int v18 = sub_215BB14AC(*(unsigned __int16 *)v20);
    sub_215BAEED0((uint64_t)v20, (uint64_t)v33);
    uint64_t v23 = a1;
    std::streambuf::basic_streambuf();
    uint64_t v24 = MEMORY[0x263F8C318] + 16;
    long long v26 = 0u;
    long long v27 = 0u;
    int v28 = 24;
    uint64_t v29 = MEMORY[0x263F8C2F8] + 24;
    v30.__vftable = (std::ios_base_vtbl *)(MEMORY[0x263F8C2F8] + 64);
    std::ios_base::init(&v30, &v24);
    uint64_t v31 = 0;
    int v32 = -1;
    sub_2159A65F8(v33, (char *)&v29, v18);
    sub_2159AA0DC(&v23);
    uint64_t v17 = v34;
    if (!v34) {
      goto LABEL_20;
    }
  }
  if (atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  uint64_t v19 = v22;
  if (v22 == -1) {
    return;
  }
LABEL_21:
  ((void (*)(uint64_t *, unsigned char *))off_26C674AF0[v19])(&v23, v21);
}

void sub_2159A9FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_2159AA0DC(&a23);
  uint64_t v39 = *(std::__shared_weak_count **)(v37 - 104);
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      sub_21599550C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_21599550C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2159AA0DC(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    unint64_t v5 = a1[12];
    unint64_t v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = (const void *)a1[6];
    size_t v3 = v5 - (void)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_31;
    }
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      size_t v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    uint64_t v7 = (const void *)a1[3];
    size_t v3 = a1[5] - (void)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_31:
    }
      sub_215731CD8();
  }
  if (v3 >= 0x17)
  {
    uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v8 = v3 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    size_t v18 = v3;
    int64_t v19 = v9 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3) {
LABEL_13:
  }
    memmove(p_dst, v7, v3);
LABEL_14:
  *((unsigned char *)p_dst + v3) = 0;
  if (v19 >= 0) {
    std::string::size_type v10 = HIBYTE(v19);
  }
  else {
    std::string::size_type v10 = v18;
  }
  uint64_t v11 = *a1;
  if (*(void *)(*a1 + 40))
  {
    unsigned __int8 v12 = *(void **)(v11 + 24);
    LOBYTE(v16[0]) = *(unsigned char *)(v11 + 32);
    sub_215731D94(v12, (uint64_t)v16, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(v11 + 40);
  if (SHIBYTE(v19) < 0)
  {
    uint64_t v13 = __dst;
    if (v10 && !__dst)
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = (void **)&__dst;
  }
  uint64_t v14 = *a1;
  v16[0] = v10;
  v16[1] = (std::string::size_type)v13;
  sub_215DF9898(v14, v16);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst);
    std::ostream::~ostream();
    a1[1] = MEMORY[0x263F8C318] + 16;
    if ((*((char *)a1 + 95) & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_29:
    operator delete((void *)a1[9]);
    goto LABEL_27;
  }
  std::ostream::~ostream();
  a1[1] = MEMORY[0x263F8C318] + 16;
  if (*((char *)a1 + 95) < 0) {
    goto LABEL_29;
  }
LABEL_27:
  std::streambuf::~streambuf();
  return a1;
}

void sub_2159AA330(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159A4AE8((uint64_t)v8, a2);
  sub_2159AA450(a1, (uint64_t)v8, a3);
  if (v20)
  {
    unint64_t v5 = (void **)__p;
    if (__p)
    {
      unint64_t v6 = v19;
      uint64_t v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      int64_t v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159AA438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2159AA450(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = (char *)(a2 + 8);
  LODWORD(__src) = 2;
  uint64_t v7 = a1 + 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_215D02034((void *)a1);
  sub_215D04A50(v7, *(char **)(a1 + 32), v6, (char *)(a2 + 16), 8);
  LOBYTE(__src) = *(unsigned char *)(a2 + 16);
  sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
  *(void *)(v8 + 10) = *(void *)(a1 + 32) - v8 - 18;
  *(void *)(a1 + 56) -= 8;
  if (*(unsigned char *)(a2 + 48))
  {
    LOBYTE(__src) = 1;
    sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    __n128 result = sub_215D023C8(a1, (char *)(a2 + 24));
    if (a3 < 4) {
      return result;
    }
  }
  else
  {
    LOBYTE(__src) = 0;
    __n128 result = sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (a3 < 4) {
      return result;
    }
  }
  __n128 result = sub_2159AA784(a1, (char *)(a2 + 56));
  if (a3 == 5)
  {
    if (*(unsigned char *)(a2 + 104))
    {
      LOBYTE(__src) = 1;
      sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      return sub_215D023C8(a1, (char *)(a2 + 80));
    }
    goto LABEL_18;
  }
  if (a3 < 6) {
    return result;
  }
  if (*(unsigned char *)(a2 + 104))
  {
    LOBYTE(__src) = 1;
    sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    sub_215D023C8(a1, (char *)(a2 + 80));
    if (*(unsigned char *)(a2 + 136)) {
      goto LABEL_11;
    }
  }
  else
  {
    LOBYTE(__src) = 0;
    sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (*(unsigned char *)(a2 + 136))
    {
LABEL_11:
      LOBYTE(__src) = 1;
      sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      sub_215D023C8(a1, (char *)(a2 + 112));
      if (*(unsigned char *)(a2 + 168)) {
        goto LABEL_12;
      }
LABEL_18:
      LOBYTE(__src) = 0;
      return sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    }
  }
  LOBYTE(__src) = 0;
  sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  if (!*(unsigned char *)(a2 + 168)) {
    goto LABEL_18;
  }
LABEL_12:
  LOBYTE(__src) = 1;
  sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  unint64_t __src = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3);
  __n128 result = sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v14, 8);
  char v10 = *(char **)(a2 + 144);
  uint64_t v11 = *(void *)(a2 + 152) - (void)v10;
  if (v11)
  {
    uint64_t v12 = 24 * (v11 / 24);
    do
    {
      __n128 result = sub_215D023C8(a1, v10);
      v10 += 24;
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

char *sub_2159AA784(uint64_t a1, char *a2)
{
  uint64_t v3 = a1 + 24;
  if (a2[16])
  {
    char __src = 1;
    sub_215D04A50(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v9, 1);
    int v9 = 2;
    sub_215D04A50(v3, *(char **)(a1 + 32), (char *)&v9, v10, 4);
    sub_215D02034((void *)a1);
    sub_215D04A50(v3, *(char **)(a1 + 32), a2, a2 + 8, 8);
    char v11 = a2[8];
    __n128 result = sub_215D04A50(v3, *(char **)(a1 + 32), &v11, (char *)&v12, 1);
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
    *(void *)(v6 + 10) = *(void *)(a1 + 32) - v6 - 18;
    *(void *)(a1 + 56) -= 8;
  }
  else
  {
    char v7 = 0;
    return sub_215D04A50(a1 + 24, *(char **)(a1 + 32), &v7, &__src, 1);
  }
  return result;
}

void sub_2159AA8AC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)&v8[12] = *(_OWORD *)(a2 + 12);
  v9[0] = 0;
  unsigned int v10 = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 96);
  if (v3 != -1)
  {
    ((void (*)(_DWORD *, unsigned char *, uint64_t))off_26C674BC0[v3])(v21, v9, a2 + 32);
    unsigned int v10 = v3;
  }
  LOWORD(__src) = *(_WORD *)v8;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 2, 2);
  LODWORD(__src) = 2;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_215D02034((void *)a1);
  uint64_t __src = *(void *)&v8[8];
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v12, 8);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), &v8[16], &v8[24], 8);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
  *(void *)(v4 + 10) = *(void *)(a1 + 32) - v4 - 18;
  *(void *)(a1 + 56) -= 8;
  if (*(unsigned __int16 *)v8 == 1)
  {
    sub_215BAEED0((uint64_t)v8, (uint64_t)&__src);
    sub_215BB1A7C((const void *)a1, (uint64_t)&__src);
    unint64_t v5 = v13;
    if (!v13)
    {
LABEL_8:
      uint64_t v7 = v10;
      if (v10 == -1) {
        return;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int v6 = sub_215BB14AC(*(unsigned __int16 *)v8);
    sub_215BAEED0((uint64_t)v8, (uint64_t)v21);
    uint64_t __src = a1;
    std::streambuf::basic_streambuf();
    uint64_t v12 = MEMORY[0x263F8C318] + 16;
    long long v14 = 0u;
    long long v15 = 0u;
    int v16 = 24;
    uint64_t v17 = MEMORY[0x263F8C2F8] + 24;
    v18.__vftable = (std::ios_base_vtbl *)(MEMORY[0x263F8C2F8] + 64);
    std::ios_base::init(&v18, &v12);
    uint64_t v19 = 0;
    int v20 = -1;
    sub_2159A65F8(v21, (char *)&v17, v6);
    sub_2159AAC64((uint64_t)&__src);
    unint64_t v5 = v22;
    if (!v22) {
      goto LABEL_8;
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_8;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  uint64_t v7 = v10;
  if (v10 == -1) {
    return;
  }
LABEL_9:
  ((void (*)(uint64_t *, unsigned char *))off_26C674AF0[v7])(&__src, v9);
}

void sub_2159AAB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_2159AAC64((uint64_t)&a23);
  uint64_t v39 = *(std::__shared_weak_count **)(v37 - 104);
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      sub_21599550C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_21599550C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2159AAC64(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a1 + 96);
    unint64_t v6 = *(void *)(a1 + 56);
    if (v5 < v6)
    {
      *(void *)(a1 + 96) = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = *(const void **)(a1 + 48);
    size_t v3 = v5 - (void)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_28;
    }
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      size_t v3 = 0;
      HIBYTE(v17) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    uint64_t v7 = *(const void **)(a1 + 24);
    size_t v3 = *(void *)(a1 + 40) - (void)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_28:
    }
      sub_215731CD8();
  }
  if (v3 >= 0x17)
  {
    uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v8 = v3 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    size_t v16 = v3;
    int64_t v17 = v9 | 0x8000000000000000;
    long long __dst = (char *)p_dst;
    goto LABEL_13;
  }
  HIBYTE(v17) = v3;
  p_dst = (void **)&__dst;
  if (v3) {
LABEL_13:
  }
    memmove(p_dst, v7, v3);
LABEL_14:
  *((unsigned char *)p_dst + v3) = 0;
  size_t v10 = HIBYTE(v17);
  if (v17 < 0) {
    size_t v10 = v16;
  }
  int64_t v14 = v10;
  sub_215D04A50(*(void *)a1 + 24, *(char **)(*(void *)a1 + 32), (char *)&v14, (char *)&__dst, 8);
  if (SHIBYTE(v17) < 0)
  {
    int64_t v12 = v14;
    char v11 = __dst;
    if (!__dst && v14)
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      char v11 = 0;
    }
  }
  else
  {
    char v11 = (char *)&__dst;
    int64_t v12 = v14;
  }
  sub_215D04A50(*(void *)a1 + 24, *(char **)(*(void *)a1 + 32), v11, &v11[v12], v12);
  if (SHIBYTE(v17) < 0)
  {
    operator delete(__dst);
    std::ostream::~ostream();
    *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
    if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_26:
    operator delete(*(void **)(a1 + 72));
    goto LABEL_24;
  }
  std::ostream::~ostream();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    goto LABEL_26;
  }
LABEL_24:
  std::streambuf::~streambuf();
  return a1;
}

void sub_2159AAEAC(int *a1, uint64_t *a2, uint64_t a3)
{
  int v7 = 6;
  (*(void (**)(uint64_t *, int *))(*a2 + 104))(a2, &v7);
  unsigned int v6 = v7;
  if (*a1 < 1 || *a1 == 2 && (int v8 = 3, (*(void (**)(uint64_t *, int *))(*a2 + 104))(a2, &v8), *a1 <= 0))
  {
    sub_2159AAFF4(a2, a3, v6);
  }
  else
  {
    (*(void (**)(uint64_t *))(*a2 + 16))(a2);
    sub_2159AAFF4(a2, a3, v6);
    (*(void (**)(uint64_t *))(*a2 + 24))(a2);
  }
}

void sub_2159AAFF4(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159A4AE8((uint64_t)v8, a2);
  sub_2159AB114(a1, (uint64_t)v8, a3);
  if (v20)
  {
    unint64_t v5 = (void **)__p;
    if (__p)
    {
      unsigned int v6 = v19;
      int v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        int v7 = __p;
      }
      uint64_t v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159AB0FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159AB114(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  __p.__r_.__value_.__r.__words[0] = a1[1];
  sub_2159AB96C((int *)&__p, a1, a2 + 8);
  if (*(unsigned char *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 24);
    if (a3 < 4) {
      return;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    if (a3 < 4) {
      return;
    }
  }
  if (*(unsigned char *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = a1[1];
    sub_2159AB96C((int *)&__p, a1, a2 + 56);
    if (a3 == 5) {
      goto LABEL_7;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(unsigned char *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*((unsigned char *)a1 + 12) & 4) == 0)
    {
      if (*(unsigned char *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 80);
        if (*(unsigned char *)(a2 + 136)) {
          goto LABEL_14;
        }
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        if (*(unsigned char *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 112);
          if (*(unsigned char *)(a2 + 168)) {
            goto LABEL_15;
          }
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
      if (*(unsigned char *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t *, std::string *))(*a1 + 120))(a1, &__p);
        uint64_t v6 = *(void *)(a2 + 144);
        uint64_t v7 = *(void *)(a2 + 152) - v6;
        if (v7)
        {
          uint64_t v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
      return;
    }
    if (*(unsigned char *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 80);
      if (*(unsigned char *)(a2 + 136)) {
        goto LABEL_21;
      }
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t *, void *))(*a1 + 288))(a1, &unk_215ED14AF);
      if (*(unsigned char *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        char v22 = 0;
        if (*(unsigned char *)(a2 + 168))
        {
LABEL_22:
          uint64_t v11 = *(void *)(a2 + 144);
          uint64_t v12 = *(void *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_215742E98(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            char v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              uint64_t v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0) {
                long long v15 = v13;
              }
              else {
                long long v15 = (uint64_t *)*v13;
              }
              if ((v14 & 0x80u) != 0) {
                uint64_t v14 = v13[1];
              }
              if (v14)
              {
                uint64_t v16 = 0;
                while (1)
                {
                  int v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92) {
                    break;
                  }
                  if (v14 == ++v16) {
                    goto LABEL_24;
                  }
                }
                if (v14 != v16 && v16 != -1) {
                  break;
                }
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12) {
                goto LABEL_39;
              }
            }
            sub_2159A56AC(v11, v12, *(void *)(a2 + 152), ";", 1uLL, &v20);
          }
          std::string __p = v20;
          char v22 = 1;
          uint64_t v18 = *a1;
          v20.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t *, std::string *))(v18 + 80))(a1, &v20);
          (*(void (**)(uint64_t *, std::string *))(*a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_48:
        uint64_t v19 = *a1;
        v20.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t *, std::string *))(v19 + 80))(a1, &v20);
        (*(void (**)(uint64_t *, void *))(*a1 + 288))(a1, &unk_215ED14AF);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t *, void *))(*a1 + 288))(a1, &unk_215ED14AF);
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v22 = 0;
    if (*(unsigned char *)(a2 + 168)) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
}

void sub_2159AB948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159AB96C(int *a1, unsigned char *a2, uint64_t a3)
{
  LODWORD(v8) = 2;
  (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, &v8);
  if (*a1 < 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a2 + 72))(a2, a3);
    uint64_t v8 = (unsigned char *)(a3 + 8);
    return sub_2159ABB1C(a2, &v8);
  }
  else
  {
    if (*a1 == 2
      && (LODWORD(v8) = 2, (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, &v8), *a1 < 1))
    {
      int v6 = 0;
    }
    else
    {
      (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
      int v6 = 1;
    }
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a2 + 72))(a2, a3);
    uint64_t v8 = (unsigned char *)(a3 + 8);
    uint64_t result = sub_2159ABB1C(a2, &v8);
    if (v6) {
      return (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 24))(a2);
    }
  }
  return result;
}

uint64_t sub_2159ABB1C(unsigned char *a1, unsigned char **a2)
{
  if ((a1[12] & 2) != 0)
  {
    int v4 = 0;
    sub_2159A4F58();
  }
  v3[0] = **a2;
  return (*(uint64_t (**)(unsigned char *, unsigned char *))(*(void *)a1 + 80))(a1, v3);
}

void sub_2159ABC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ABC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159ABC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159ABC88(int *a1, int *a2, uint64_t a3)
{
  int v6 = 2;
  (*(void (**)(int *, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1
    || *a1 == 2 && (int v7 = 2, (*(void (**)(int *, int *))(*(void *)a2 + 104))(a2, &v7), *a1 <= 0))
  {
    sub_2159ABDC0(a2, a3);
  }
  else
  {
    (*(void (**)(int *))(*(void *)a2 + 16))(a2);
    sub_2159ABDC0(a2, a3);
    (*(void (**)(int *))(*(void *)a2 + 24))(a2);
  }
}

void sub_2159ABDC0(int *a1, uint64_t a2)
{
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)&v8[12] = *(_OWORD *)(a2 + 12);
  v9[0] = 0;
  unsigned int v10 = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 96);
  if (v3 != -1)
  {
    ((void (*)(_DWORD *, unsigned char *, uint64_t))off_26C674BC0[v3])(v22, v9, a2 + 32);
    unsigned int v10 = v3;
  }
  if ((a1[3] & 2) != 0)
  {
    int v14 = 0;
    sub_2159A6140();
  }
  LOWORD(v11) = *(_WORD *)v8;
  (*(void (**)(int *, int **))(*(void *)a1 + 96))(a1, &v11);
  int v4 = a1[2];
  LODWORD(v11) = 2;
  (*(void (**)(int *, int **))(*(void *)a1 + 104))(a1, &v11);
  if (v4 < 1)
  {
    sub_2159AC338(a1, &v8[8]);
    (*(void (**)(int *, unsigned char *))(*(void *)a1 + 104))(a1, &v8[16]);
    (*(void (**)(int *, unsigned char *))(*(void *)a1 + 104))(a1, &v8[20]);
  }
  else
  {
    if (v4 == 2)
    {
      LODWORD(v11) = 2;
      (*(void (**)(int *, int **))(*(void *)a1 + 104))(a1, &v11);
    }
    (*(void (**)(int *))(*(void *)a1 + 16))(a1);
    sub_2159AC338(a1, &v8[8]);
    (*(void (**)(int *, unsigned char *))(*(void *)a1 + 104))(a1, &v8[16]);
    (*(void (**)(int *, unsigned char *))(*(void *)a1 + 104))(a1, &v8[20]);
    (*(void (**)(int *))(*(void *)a1 + 24))(a1);
  }
  if (*(unsigned __int16 *)v8 == 1)
  {
    sub_215BAEED0((uint64_t)v8, (uint64_t)&v11);
    sub_215BB1A7C(a1, (uint64_t)&v11);
    unint64_t v5 = v13;
    if (!v13)
    {
LABEL_16:
      uint64_t v7 = v10;
      if (v10 == -1) {
        return;
      }
      goto LABEL_17;
    }
  }
  else
  {
    int v6 = sub_215BB14AC(*(unsigned __int16 *)v8);
    sub_215BAEED0((uint64_t)v8, (uint64_t)v22);
    uint64_t v11 = a1;
    std::streambuf::basic_streambuf();
    uint64_t v12 = MEMORY[0x263F8C318] + 16;
    long long v15 = 0u;
    long long v16 = 0u;
    int v17 = 24;
    uint64_t v18 = MEMORY[0x263F8C2F8] + 24;
    v19.__vftable = (std::ios_base_vtbl *)(MEMORY[0x263F8C2F8] + 64);
    std::ios_base::init(&v19, &v12);
    uint64_t v20 = 0;
    int v21 = -1;
    sub_2159A65F8(v22, (char *)&v18, v6);
    sub_2159AC4A0(&v11);
    unint64_t v5 = v23;
    if (!v23) {
      goto LABEL_16;
    }
  }
  if (atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  uint64_t v7 = v10;
  if (v10 == -1) {
    return;
  }
LABEL_17:
  ((void (*)(int **, unsigned char *))off_26C674AF0[v7])(&v11, v9);
}

void sub_2159AC234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  sub_2159AC4A0(&a24);
  sub_215822608(v38 - 120);
  sub_21599550C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159AC28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_2159AC2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 97) < 0)
  {
    operator delete(*(void **)(v9 - 120));
    sub_21599550C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_21599550C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2159AC338(unsigned char *a1, void *a2)
{
  if ((a1[12] & 2) != 0)
  {
    int v4 = 0;
    sub_2159A63A4();
  }
  v3[0] = *a2;
  return (*(uint64_t (**)(unsigned char *, void *))(*(void *)a1 + 120))(a1, v3);
}

void sub_2159AC45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159AC478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159AC48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2159AC4A0(void *a1)
{
  int v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    unint64_t v5 = a1[12];
    unint64_t v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = (const void *)a1[6];
    size_t v3 = v5 - (void)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_28;
    }
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      size_t v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    uint64_t v7 = (const void *)a1[3];
    size_t v3 = a1[5] - (void)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_28:
    }
      sub_215731CD8();
  }
  if (v3 >= 0x17)
  {
    uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v8 = v3 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    size_t v18 = v3;
    int64_t v19 = v9 | 0x8000000000000000;
    long long __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3) {
LABEL_13:
  }
    memmove(p_dst, v7, v3);
LABEL_14:
  *((unsigned char *)p_dst + v3) = 0;
  size_t v10 = HIBYTE(v19);
  if (v19 < 0) {
    size_t v10 = v18;
  }
  size_t v16 = v10;
  (*(void (**)(void, size_t *))(*(void *)*a1 + 120))(*a1, &v16);
  if (SHIBYTE(v19) < 0)
  {
    size_t v12 = v16;
    uint64_t v11 = __dst;
    if (!__dst && v16)
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = (void **)&__dst;
    size_t v12 = v16;
  }
  uint64_t v13 = *a1;
  v15[0] = v12;
  v15[1] = v11;
  (*(void (**)(uint64_t, void *))(*(void *)v13 + 272))(v13, v15);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__dst);
    std::ostream::~ostream();
    a1[1] = MEMORY[0x263F8C318] + 16;
    if ((*((char *)a1 + 95) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_26:
    operator delete((void *)a1[9]);
    goto LABEL_24;
  }
  std::ostream::~ostream();
  a1[1] = MEMORY[0x263F8C318] + 16;
  if (*((char *)a1 + 95) < 0) {
    goto LABEL_26;
  }
LABEL_24:
  std::streambuf::~streambuf();
  return a1;
}

void sub_2159AC714(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = 0;
  char v4 = 0;
  LOBYTE(v5) = 0;
  char v6 = 0;
  sub_2159ADCD0(a2, (uint64_t)v2);
}

void sub_2159AC8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0) {
      operator delete(*(void **)(v18 - 72));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159AC908(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (char **)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "auto_timestamp";
  *(void *)(a1 + 96) = 14;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF07E4(a1);
  unsigned int v7 = 2;
  int v5 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF1DC8((void *)a1, &v7);
  if (v7 >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = v7;
  }
  sub_2159ACDDC(a1, v3, v6);
}

void sub_2159ACBA8(void **a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v3 = *((char *)a1 + 23) < 0;
  if (*((char *)a1 + 23) >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = (size_t)a1[1];
  }
  if (*((char *)a1 + 23) >= 0) {
    int v5 = a1;
  }
  else {
    int v5 = *a1;
  }
  if (v4)
  {
    unsigned int v7 = memchr(v5, 92, v4);
    if (v7 && v7 - (unsigned char *)v5 != -1)
    {
      unint64_t v9 = 0;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      memset(&v19, 0, sizeof(v19));
      while (1)
      {
        uint64_t v11 = *a1;
        if (!v3) {
          uint64_t v11 = a1;
        }
        int v12 = v11[v9];
        if (v12 != 59)
        {
          if (v12 == 92) {
            ++v9;
          }
          std::string::push_back(&v19, v11[v9]);
          goto LABEL_19;
        }
        unint64_t v13 = *(void *)(a2 + 8);
        if (v13 >= *(void *)(a2 + 16))
        {
          *(void *)(a2 + 8) = sub_215738E60((char **)a2, (uint64_t)&v19);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_32;
          }
        }
        else
        {
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_215738B0C(*(unsigned char **)(a2 + 8), v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v14 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
            *(void *)(v13 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v13 = v14;
          }
          *(void *)(a2 + 8) = v13 + 24;
          *(void *)(a2 + 8) = v13 + 24;
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_32:
            v19.__r_.__value_.__l.__size_ = 0;
            *v19.__r_.__value_.__l.__data_ = 0;
            goto LABEL_19;
          }
        }
        *((unsigned char *)&v19.__r_.__value_.__s + 23) = 0;
        v19.__r_.__value_.__s.__data_[0] = 0;
LABEL_19:
        ++v9;
        BOOL v3 = *((char *)a1 + 23) < 0;
        size_t v10 = (void *)*((unsigned __int8 *)a1 + 23);
        if ((char)v10 < 0) {
          size_t v10 = a1[1];
        }
        if (v9 >= (unint64_t)v10)
        {
          unint64_t v15 = *(void *)(a2 + 8);
          if (v15 >= *(void *)(a2 + 16))
          {
            int v17 = sub_21573AD18((void **)a2, (uint64_t)&v19);
            int v18 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
            *(void *)(a2 + 8) = v17;
            if (v18 < 0) {
              operator delete(v19.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v16 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
            *(void *)(v15 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v15 = v16;
            *(void *)(a2 + 8) = v15 + 24;
          }
          return;
        }
      }
    }
  }

  sub_2157C6A10((char *)v5, v4, ";", 1, 1, a2);
}

void sub_2159ACDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_2157352DC(v15);
  _Unwind_Resume(a1);
}

void sub_2159ACDDC(uint64_t a1, char **a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "ns";
    *(void *)(a1 + 96) = 2;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unsigned int v6 = (char *)sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    int v12 = 0;
    sub_215D30830(v6, &v12);
    *a2 = v12;
    unsigned int v7 = (char *)(a2 + 1);
    int v8 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "clock_type";
    *(void *)(a1 + 96) = 10;
    if (!v8) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    int v12 = v7;
    sub_2159ACF38((void *)a1);
  }
  char v13 = 0;
  int v9 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "ns";
  *(void *)(a1 + 96) = 2;
  if (!v9) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  size_t v10 = (char *)sub_215DF0AA0((void *)a1);
  ++*(void *)(a1 + 112);
  long long v14 = 0;
  sub_215D30830(v10, &v14);
  int v12 = v14;
  int v11 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "clock_type";
  *(void *)(a1 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  long long v14 = &v13;
  sub_2159ACF38((void *)a1);
}

void sub_2159ACF38(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  int v2 = (void **)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D30C0C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159AD030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159AD0A0(void *a1, uint64_t a2)
{
  void v10[2] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)sub_215DF0AA0(a1))
  {
    uint64_t v4 = (void **)sub_215DF0AA0(a1);
    ++a1[14];
    long long v9 = 0uLL;
    uint64_t v8 = 0;
    sub_215D30C0C(v4, (uint64_t)&v8);
    uint64_t v5 = v8;
    v10[0] = v9;
    *(void *)((char *)v10 + 7) = *(void *)((char *)&v9 + 7);
    char v6 = HIBYTE(v9);
    if (*(unsigned char *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(unsigned char *)(a2 + 24) = 0;
    }
    uint64_t v7 = v10[0];
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 15) = *(void *)((char *)v10 + 7);
    *(unsigned char *)(a2 + 23) = v6;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(unsigned char *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
}

void sub_2159AD1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159AD1C4(int *a1, uint64_t a2, uint64_t a3)
{
  sub_215DF07E4(a2);
  unsigned int v15 = 2;
  int v6 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (v6)
  {
    sub_215DF1DC8((void *)a2, &v15);
    unsigned int v7 = v15;
    int v8 = *a1;
    if (*a1 < 1) {
      goto LABEL_15;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 104) = 1;
    sub_215DF1DC8((void *)a2, &v15);
    unsigned int v7 = v15;
    int v8 = *a1;
    if (*a1 < 1) {
      goto LABEL_15;
    }
  }
  if (v7 >= 2 && v8 == 2)
  {
    unsigned int v15 = 2;
    int v10 = *(unsigned __int8 *)(a2 + 104);
    *(void *)(a2 + 88) = "min_version";
    *(void *)(a2 + 96) = 11;
    if (!v10) {
      *(unsigned char *)(a2 + 104) = 1;
    }
    sub_215DF1DC8((void *)a2, &v15);
    unsigned int v11 = v15;
    if (v15 >= 3)
    {
      long long v14 = sub_2159AD310();
      sub_215E07C10((std::string *)v14, v11, 2u);
    }
  }
  if (v7 >= 2) {
    unsigned int v7 = 2;
  }
LABEL_15:
  sub_2159AD52C(a2, a3, v7);
  uint64_t v12 = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(a2 + 72);
  *(void *)(a2 + 112) = *(void *)(v13 - 8);
  *(void *)(a2 + 48) = v12 - 8;
  *(void *)(a2 + 72) = v13 - 8;
}

long long *sub_2159AD310()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888D80, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888D80))
  {
    return &xmmword_267888D68;
  }
  uint64_t v1 = (char *)sub_2159AD3F8();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_267888D68, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267888D78 = *((void *)v1 + 2);
    xmmword_267888D68 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888D68, &dword_21572C000);
  __cxa_guard_release(&qword_267888D80);
  return &xmmword_267888D68;
}

void sub_2159AD3E0(_Unwind_Exception *a1)
{
}

void *sub_2159AD3F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888DA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888DA0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::timeio::TimestampSample]", qword_267888D88);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888D88, &dword_21572C000);
    __cxa_guard_release(&qword_267888DA0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888DC0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888DC0))
  {
    return &unk_267888DA8;
  }
  sub_215E19DF4((uint64_t)qword_267888D88, (uint64_t)&unk_267888DA8);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267888DA8, &dword_21572C000);
  __cxa_guard_release(&qword_267888DC0);
  return &unk_267888DA8;
}

void sub_2159AD4FC(_Unwind_Exception *a1)
{
}

void sub_2159AD514(_Unwind_Exception *a1)
{
}

void sub_2159AD52C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    char v14 = 0;
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "ns";
    *(void *)(a1 + 96) = 2;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    int v10 = (char *)sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    unsigned int v15 = 0;
    sub_215D30830(v10, &v15);
    uint64_t v13 = v15;
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "clock_type";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unsigned int v15 = &v14;
    sub_2159AD688(a1, &v15);
    char v12 = v14;
    *(void *)a2 = v13;
    *(unsigned char *)(a2 + 8) = v12;
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "ns";
    *(void *)(a1 + 96) = 2;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    int v6 = (char *)sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    uint64_t v13 = 0;
    sub_215D30830(v6, &v13);
    *(void *)a2 = v13;
    unsigned int v7 = (char *)(a2 + 8);
    int v8 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "clock_type";
    *(void *)(a1 + 96) = 10;
    if (!v8) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    uint64_t v13 = v7;
    sub_2159AD688(a1, &v13);
  }
}

void sub_2159AD688(uint64_t a1, unsigned char **a2)
{
  if ((*(unsigned char *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v6 = 0;
    uint64_t v4 = (void **)sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    uint64_t v8 = 0;
    long long v7 = 0uLL;
    sub_215D30C0C(v4, (uint64_t)&v7);
    uint64_t v6 = v8;
    *(_OWORD *)std::string __p = v7;
    operator new();
  }
  LOBYTE(v7) = 0;
  sub_215DF1B68((void *)a1, &v7);
  **a2 = v7;
}

void sub_2159AD7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159AD818(void *a1, uint64_t a2)
{
  if (*(unsigned char *)sub_215DF0AA0(a1))
  {
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    char v13 = 0;
    uint64_t v4 = (unsigned __int8 *)sub_215DF0AA0(a1);
    ++a1[14];
    sub_215DF2ADC((uint64_t)&v13, v4, (void **)&v11);
    if (*(unsigned char *)(a2 + 24))
    {
      int v5 = *(void ***)a2;
      if (*(void *)a2)
      {
        uint64_t v6 = *(void ***)(a2 + 8);
        long long v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0) {
              operator delete(*(v6 - 3));
            }
            v6 -= 3;
          }
          while (v6 != v5);
          long long v7 = *(void ***)a2;
        }
        *(void *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(void *)(a2 + 16) = v12;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v8 = *(void ***)a2;
      if (*(void *)a2)
      {
        int v9 = *(void ***)(a2 + 8);
        int v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0) {
              operator delete(*(v9 - 3));
            }
            v9 -= 3;
          }
          while (v9 != v8);
          int v10 = *(void ***)a2;
        }
        *(void *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
}

void sub_2159AD964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_2159AD978(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v4 = *(void ***)a1;
      if (*(void *)a1)
      {
        int v5 = *(void ***)(a1 + 8);
        uint64_t v6 = *(void ***)a1;
        if (v5 != v4)
        {
          do
          {
            if (*((char *)v5 - 1) < 0) {
              operator delete(*(v5 - 3));
            }
            v5 -= 3;
          }
          while (v5 != v4);
          uint64_t v6 = *(void ***)a1;
        }
        *(void *)(a1 + 8) = v4;
        operator delete(v6);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v7 = *(void ***)a1;
    if (*(void *)a1)
    {
      uint64_t v8 = *(void ***)(a1 + 8);
      int v9 = *(void ***)a1;
      if (v8 != v7)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        int v9 = *(void ***)a1;
      }
      *(void *)(a1 + 8) = v7;
      operator delete(v9);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
}

uint64_t sub_2159ADAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a1 + 24;
  uint64_t v6 = (long long *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0) {
        operator delete(*(void **)v5);
      }
      long long v7 = *v6;
      *(void *)(v5 + 16) = *((void *)v6 + 2);
      *(_OWORD *)uint64_t v5 = v7;
      *(unsigned char *)(a2 + 47) = 0;
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)v5);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
  else
  {
    long long v8 = *v6;
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)uint64_t v5 = v8;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)uint64_t v6 = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  long long v9 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v9;
  int v10 = (void **)(a1 + 80);
  long long v11 = (long long *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
  {
    if (!*(unsigned char *)(a1 + 104))
    {
      long long v17 = *v11;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(_OWORD *)int v10 = v17;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0;
      *(void *)long long v11 = 0;
      *(unsigned char *)(a1 + 104) = 1;
      uint64_t v13 = a1 + 112;
      char v14 = (long long *)(a2 + 112);
      int v15 = *(unsigned __int8 *)(a1 + 136);
      if (v15 == *(unsigned __int8 *)(a2 + 136)) {
        goto LABEL_22;
      }
LABEL_27:
      if (v15)
      {
        if (*(char *)(a1 + 135) < 0) {
          operator delete(*(void **)v13);
        }
        *(unsigned char *)(a1 + 136) = 0;
      }
      else
      {
        long long v18 = *v14;
        *(void *)(v13 + 16) = *((void *)v14 + 2);
        *(_OWORD *)uint64_t v13 = v18;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *(void *)char v14 = 0;
        *(unsigned char *)(a1 + 136) = 1;
      }
      goto LABEL_32;
    }
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*v10);
    }
    *(unsigned char *)(a1 + 104) = 0;
LABEL_21:
    uint64_t v13 = a1 + 112;
    char v14 = (long long *)(a2 + 112);
    int v15 = *(unsigned __int8 *)(a1 + 136);
    if (v15 == *(unsigned __int8 *)(a2 + 136)) {
      goto LABEL_22;
    }
    goto LABEL_27;
  }
  if (!*(unsigned char *)(a1 + 104)) {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v10);
  }
  long long v12 = *v11;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)int v10 = v12;
  *(unsigned char *)(a2 + 103) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  uint64_t v13 = a1 + 112;
  char v14 = (long long *)(a2 + 112);
  int v15 = *(unsigned __int8 *)(a1 + 136);
  if (v15 != *(unsigned __int8 *)(a2 + 136)) {
    goto LABEL_27;
  }
LABEL_22:
  if (v15)
  {
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*(void **)v13);
    }
    long long v16 = *v14;
    *(void *)(v13 + 16) = *((void *)v14 + 2);
    *(_OWORD *)uint64_t v13 = v16;
    *(unsigned char *)(a2 + 135) = 0;
    *(unsigned char *)(a2 + 112) = 0;
  }
LABEL_32:
  sub_2159AD978(a1 + 144, a2 + 144);
  return a1;
}

void sub_2159ADCD0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (char **)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "auto_timestamp";
  *(void *)(a1 + 96) = 14;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF07E4(a1);
  unsigned int v7 = 2;
  int v5 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF1DC8((void *)a1, &v7);
  if (v7 >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = v7;
  }
  sub_2159ACDDC(a1, v3, v6);
}

void sub_2159ADDE4(uint64_t a1)
{
  sub_215DF07E4(a1);
  unsigned int v5 = 2;
  int v2 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v2) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF1DC8((void *)a1, &v5);
  unsigned int v3 = v5;
  if (v5 >= 2) {
    unsigned int v3 = 2;
  }
  if (v3 >= 2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "io_format";
    *(void *)(a1 + 96) = 9;
    if (!v4) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    sub_2159AE8D0((void *)a1);
  }
  sub_215BAE2E4();
}

void sub_2159AE7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_2159AE7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  std::istream::~istream();
  a24 = MEMORY[0x263F8C318] + 16;
  if (a37 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  if (a21 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_26C674AF0[a21])(v39 - 65, &a13);
  }
  _Unwind_Resume(a1);
}

void sub_2159AE8D0(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  int v2 = (void **)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D30C0C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159AE9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159AEA38(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  int v2 = (void **)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D30C0C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159AEB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159AEB98()
{
}

void sub_2159AED3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_215831770((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_2159AED7C()
{
  int v0 = &unk_26C665E60;
  sub_2159AF3B0();
}

void sub_2159AEFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_2157407D4((uint64_t)va);
  sub_2158B8D1C(v17 - 112);
  _Unwind_Resume(a1);
}

void sub_2159AEFF8(_Unwind_Exception *a1)
{
  sub_2158B8D1C(v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_2159AF00C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v11[0] = &unk_26C674BE0;
  v11[1] = a1;
  long long v12 = v11;
  sub_215BA0FCC(v11, 0, a2, a3, (uint64_t)v7);
  uint64_t result = (uint64_t)v12;
  if (v12 == v11)
  {
    uint64_t result = (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
    if (v8) {
      goto LABEL_5;
    }
LABEL_7:
    v10[0] = "load";
    v10[1] = 4;
    int v9 = a3;
    sub_215BA1760("Failure during ", (uint64_t)v10, (uint64_t)" from stream with file format ");
  }
  if (v12) {
    uint64_t result = (*(uint64_t (**)(void *))(*v12 + 40))(v12);
  }
  if (!v8) {
    goto LABEL_7;
  }
LABEL_5:
  *(unsigned char *)(a4 + 120) = 1;
  return result;
}

void sub_2159AF354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_21573FF04((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2157407D4(v15 - 224);
  _Unwind_Resume(a1);
}

void sub_2159AF39C(_Unwind_Exception *a1)
{
  sub_2159AF530((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_2159AF3B0()
{
}

void sub_2159AF4A4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2159AF4D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2159AF530(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_2159AF5C4()
{
}

void *sub_2159AF5D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C674BE0;
  result[1] = v3;
  return result;
}

uint64_t sub_2159AF620(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C674BE0;
  a2[1] = v2;
  return result;
}

double sub_2159AF64C@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_2159AF6D4((uint64_t *)(a1 + 8), a2, *a3, a4);
}

uint64_t sub_2159AF658(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE"))return 0; {
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  }
  return 0;
}

void *sub_2159AF6C8()
{
  return &unk_26C674C50;
}

double sub_2159AF6D4@<D0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (!a3
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/include/Kit/ImageIO/ImageIO.h", 387, (uint64_t)"format != img::Format::Dynamic", 30, (uint64_t)"loader must specify the format to load as", 41, (void (*)(void **))sub_215E1ABD8))
  {
    abort();
  }
  uint64_t v8 = *a1;
  if (*(_DWORD *)(*a1 + 32) != *a2
    || (*(_DWORD *)(v8 + 56) == a3 ? (BOOL v9 = *(_DWORD *)(v8 + 36) == a2[1]) : (BOOL v9 = 0), !v9))
  {
    sub_2159AF8B0(v8, a3, (uint64_t)a2, (uint64_t)&v17);
    uint64_t v10 = *a1;
    long long v11 = v18;
    long long v18 = 0uLL;
    long long v12 = *(std::__shared_weak_count **)(v10 + 16);
    *(_OWORD *)(v10 + 8) = v11;
    if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    long long v13 = *(_OWORD *)v19;
    long long v14 = *(_OWORD *)&v19[16];
    *(void *)(v10 + 54) = *(void *)&v19[30];
    *(_OWORD *)(v10 + 40) = v14;
    *(_OWORD *)(v10 + 24) = v13;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v18 + 1);
    if (*((void *)&v18 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    uint64_t v8 = *a1;
  }
  uint64_t v17 = &unk_26C6674A0;
  sub_2158C8FBC(v8, (uint64_t)&v18);
  *(void *)a4 = &unk_26C6674A0;
  *(_OWORD *)(a4 + 8) = v18;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v19;
  double result = *(double *)&v19[14];
  *(_OWORD *)(a4 + 38) = *(_OWORD *)&v19[14];
  *(unsigned char *)(a4 + 120) = 1;
  return result;
}

void sub_2159AF8B0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = v5;
    long long v11 = v4;
    uint64_t v15 = &v10;
    uint64_t v16 = a3;
    uint64_t v17 = &v12;
    sub_215D64468(a2, &v15, a4);
    uint64_t v6 = v11;
    if (!v11) {
      return;
    }
LABEL_9:
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  unsigned int v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v8;
  long long v13 = v7;
  int v9 = *(_DWORD *)(a1 + 56);
  uint64_t v15 = &v12;
  uint64_t v16 = a3;
  uint64_t v17 = (uint64_t *)&v14;
  sub_215D64468(v9, &v15, a4);
  uint64_t v6 = v13;
  if (v13) {
    goto LABEL_9;
  }
}

void sub_2159AF9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_215733368((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159AF9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159AF9CC(uint64_t a1, void *a2)
{
  uint64_t v4 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v4 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  uint64_t v5 = (void **)(v4 + 64);
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 24;
  *(void *)(v4 + 104) = MEMORY[0x263F8C2F0] + 24;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = MEMORY[0x263F8C2F0] + 64;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  uint64_t v6 = (char *)sub_215DF0AA0(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_215D306DC(v6, &__n);
  std::string::size_type v7 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v7 && (std::string::append(&__n, v7, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v11[0] = v7;
  v11[1] = p_n;
  unint64_t v9 = sub_215DF0AA0(a2);
  ++a2[14];
  sub_215DF0BCC(v9, (uint64_t)v11);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v5);
  }
  *(std::string *)uint64_t v5 = __n;
  *((unsigned char *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_21573B8E0(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__n.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_2159AFB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::istream::~istream();
  sub_2159A6ACC(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_2159AFC08(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 96);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C674AF0[v2])(&v4, a1 + 32);
  }
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

__n128 sub_2159AFC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26C65F5B0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  __n128 result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_2159AFCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26C665E60;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  __n128 result = *(__n128 *)(a3 + 24);
  long long v4 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 54) = *(void *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v4;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_2159AFCE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 64);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5)
  {
    ((void (*)(char *, uint64_t))off_26C674AF0[v5])(&v10, v4);
LABEL_8:
    *(_DWORD *)(v4 + 64) = -1;
    *(void *)uint64_t v4 = &unk_26C65F5B0;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    __n128 result = *(__n128 *)(a3 + 24);
    *(_OWORD *)(v4 + 38) = *(_OWORD *)(a3 + 38);
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 0;
    return result;
  }
  long long v7 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __n128 result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_2159AFE04(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(unsigned int *)(*a1 + 64);
  if (v5 == -1) {
    goto LABEL_8;
  }
  if (v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_26C674AF0[v5])(&v12, v4);
LABEL_8:
    *(_DWORD *)(v4 + 64) = -1;
    *(void *)uint64_t v4 = &unk_26C665E60;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    __n128 result = *(__n128 *)(a3 + 24);
    long long v11 = *(_OWORD *)(a3 + 40);
    *(void *)(v4 + 54) = *(void *)(a3 + 54);
    *(_OWORD *)(v4 + 40) = v11;
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 1;
    return result;
  }
  long long v7 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  __n128 result = *(__n128 *)(a3 + 24);
  long long v10 = *(_OWORD *)(a3 + 40);
  *(void *)(a2 + 54) = *(void *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v10;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_2159AFF3C(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v9 = 6;
  sub_215DFF824(a2[6], &v9);
  unsigned int v5 = v9;
  if (v9 >= 3) {
    sub_2159B0060(a2 + 2);
  }
  if (v5 >= 6) {
    unsigned int v6 = 6;
  }
  else {
    unsigned int v6 = v5;
  }
  if (v6 < 3)
  {
    sub_2159B01C4((uint64_t)&v10, a2, a3, v6);
    if (v5 < 3) {
      return;
    }
  }
  else
  {
    sub_2159B0424(a2, a3, v6);
    if (v5 < 3) {
      return;
    }
  }
  uint64_t v7 = a2[4];
  uint64_t v8 = *(void *)(v7 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v7 - 8);
  if (v8) {
    (*(void (**)(void *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  }
  a2[4] -= 16;
}

void sub_2159B0060(void *a1)
{
  uint64_t v16 = 0;
  sub_215DFFC24(a1[4], &v16);
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  uint64_t v3 = v2;
  uint64_t v4 = v16;
  unsigned int v6 = (uint64_t *)a1[2];
  unint64_t v5 = a1[3];
  if ((unint64_t)v6 < v5)
  {
    uint64_t *v6 = v2;
    v6[1] = v4;
    uint64_t v7 = (uint64_t)(v6 + 2);
    goto LABEL_18;
  }
  uint64_t v8 = (uint64_t *)a1[1];
  uint64_t v9 = ((char *)v6 - (char *)v8) >> 4;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60) {
    sub_215738AC0();
  }
  uint64_t v11 = v5 - (void)v8;
  if (v11 >> 3 > v10) {
    unint64_t v10 = v11 >> 3;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 60) {
      sub_215738AD8();
    }
    long long v13 = (char *)operator new(16 * v12);
    char v14 = (uint64_t *)&v13[16 * v9];
    uint64_t v15 = &v13[16 * v12];
    uint64_t *v14 = v3;
    v14[1] = v4;
    uint64_t v7 = (uint64_t)(v14 + 2);
    if (v6 == v8) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  char v14 = (uint64_t *)(16 * v9);
  uint64_t v15 = 0;
  uint64_t *v14 = v2;
  v14[1] = v4;
  uint64_t v7 = 16 * v9 + 16;
  if (v6 != v8)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
      v14 -= 2;
      v6 -= 2;
    }
    while (v6 != v8);
    unsigned int v6 = (uint64_t *)a1[1];
  }
LABEL_16:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6) {
    operator delete(v6);
  }
LABEL_18:
  a1[2] = v7;
}

void sub_2159B01C4(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  *(void *)&long long v26 = 0;
  BYTE8(v26) = 0;
  LOBYTE(v27) = 0;
  char v29 = 0;
  sub_2159B0708((uint64_t)v10, a2, (uint64_t)&v26);
  if (a4 >= 2)
  {
    v10[0] = 0;
    sub_215DFF4BC(a2[6], v10);
    if (v10[0])
    {
      if (!v29)
      {
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        char v29 = 1;
      }
      sub_215E000A8(a2[6], (void **)&v27);
    }
    else if (v29)
    {
      if (SHIBYTE(v28) < 0) {
        operator delete((void *)v27);
      }
      char v29 = 0;
    }
  }
  long long v11 = v26;
  LOBYTE(v12) = 0;
  char v14 = 0;
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
    {
      sub_215738B0C(&v12, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      long long v12 = v27;
      uint64_t v13 = v28;
    }
    char v14 = 1;
  }
  char v15 = 0;
  char v16 = 0;
  LOBYTE(v17) = 0;
  char v19 = 0;
  LOBYTE(v20) = 0;
  char v22 = 0;
  LOBYTE(__p) = 0;
  char v25 = 0;
  sub_2159ADAB8(a3, (uint64_t)v10);
  if (v25)
  {
    uint64_t v7 = (void **)__p;
    if (__p)
    {
      uint64_t v8 = v24;
      uint64_t v9 = __p;
      if (v24 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      uint64_t v24 = v7;
      operator delete(v9);
    }
  }
  if (v22 && v21 < 0) {
    operator delete(v20);
  }
  if (v19 && v18 < 0) {
    operator delete(v17);
  }
  if (v14 && SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
  if (v29)
  {
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)v27);
    }
  }
}

void sub_2159B03E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0) {
      operator delete(*(void **)(v18 - 88));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B0424(void *a1, uint64_t a2, unsigned int a3)
{
  sub_2159B0708((uint64_t)&v14, a1, a2 + 8);
  unsigned int v6 = (void **)(a2 + 24);
  char v15 = 0;
  sub_215DFF4BC(a1[6], &v15);
  if (v15)
  {
    if (!*(unsigned char *)(a2 + 48))
    {
      uint64_t *v6 = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(unsigned char *)(a2 + 48) = 1;
    }
    sub_215E000A8(a1[6], (void **)(a2 + 24));
  }
  else if (*(unsigned char *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*v6);
    }
    *(unsigned char *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    char v16 = 0;
    sub_215DFF4BC(a1[6], &v16);
    if (v16)
    {
      if (!*(unsigned char *)(a2 + 72))
      {
        *(void *)(a2 + 56) = 0;
        *(unsigned char *)(a2 + 64) = 0;
        *(unsigned char *)(a2 + 72) = 1;
      }
      sub_2159B0708((uint64_t)&v17, a1, a2 + 56);
    }
    else if (*(unsigned char *)(a2 + 72))
    {
      *(unsigned char *)(a2 + 72) = 0;
    }
    if (a3 == 5)
    {
      uint64_t v7 = (void **)(a2 + 80);
      char v18 = 0;
      sub_215DFF4BC(a1[6], &v18);
      if (v18)
      {
        if (!*(unsigned char *)(a2 + 104))
        {
          *uint64_t v7 = 0;
          *(void *)(a2 + 88) = 0;
          *(void *)(a2 + 96) = 0;
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215E000A8(a1[6], (void **)(a2 + 80));
      }
      else if (*(unsigned char *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0) {
          operator delete(*v7);
        }
        *(unsigned char *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      uint64_t v8 = (void **)(a2 + 80);
      char v19 = 0;
      sub_215DFF4BC(a1[6], &v19);
      if (v19)
      {
        if (!*(unsigned char *)(a2 + 104))
        {
          uint64_t *v8 = 0;
          *(void *)(a2 + 88) = 0;
          *(void *)(a2 + 96) = 0;
          *(unsigned char *)(a2 + 104) = 1;
        }
        sub_215E000A8(a1[6], (void **)(a2 + 80));
      }
      else if (*(unsigned char *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0) {
          operator delete(*v8);
        }
        *(unsigned char *)(a2 + 104) = 0;
      }
      uint64_t v9 = (void **)(a2 + 112);
      char v20 = 0;
      sub_215DFF4BC(a1[6], &v20);
      if (v20)
      {
        if (!*(unsigned char *)(a2 + 136))
        {
          *uint64_t v9 = 0;
          *(void *)(a2 + 120) = 0;
          *(void *)(a2 + 128) = 0;
          *(unsigned char *)(a2 + 136) = 1;
        }
        sub_215E000A8(a1[6], (void **)(a2 + 112));
      }
      else if (*(unsigned char *)(a2 + 136))
      {
        if (*(char *)(a2 + 135) < 0) {
          operator delete(*v9);
        }
        *(unsigned char *)(a2 + 136) = 0;
      }
      unint64_t v10 = (void **)(a2 + 144);
      char v21 = 0;
      sub_215DFF4BC(a1[6], &v21);
      if (v21)
      {
        if (!*(unsigned char *)(a2 + 168))
        {
          *unint64_t v10 = 0;
          *(void *)(a2 + 152) = 0;
          *(void *)(a2 + 160) = 0;
          *(unsigned char *)(a2 + 168) = 1;
        }
        sub_2159B0844((uint64_t)a1, (char **)(a2 + 144));
      }
      else if (*(unsigned char *)(a2 + 168))
      {
        long long v11 = (void **)*v10;
        if (*v10)
        {
          long long v12 = *(void ***)(a2 + 152);
          uint64_t v13 = *v10;
          if (v12 != v11)
          {
            do
            {
              if (*((char *)v12 - 1) < 0) {
                operator delete(*(v12 - 3));
              }
              v12 -= 3;
            }
            while (v12 != v11);
            uint64_t v13 = *v10;
          }
          *(void *)(a2 + 152) = v11;
          operator delete(v13);
        }
        *(unsigned char *)(a2 + 168) = 0;
      }
    }
  }
}

void sub_2159B0708(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v8) = 2;
  sub_215DFF824(a2[6], &v8);
  if (v8 <= 1)
  {
    uint64_t v8 = 0;
    char v9 = 0;
    sub_215DFFB20(a2[6], &v8);
    char v10 = 0;
    sub_215DFF4BC(a2[6], &v10);
    char v7 = v10;
    *(void *)a3 = v8;
    *(unsigned char *)(a3 + 8) = v7;
  }
  else
  {
    sub_2159B0060(a2 + 2);
    sub_215DFFB20(a2[6], (void *)a3);
    LOBYTE(v8) = 0;
    sub_215DFF4BC(a2[6], &v8);
    *(unsigned char *)(a3 + 8) = v8;
    uint64_t v5 = a2[4];
    uint64_t v6 = *(void *)(v5 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v5 - 8);
    if (v6) {
      (*(void (**)(void *, uint64_t))(a2[2] + 40))(a2 + 2, v6);
    }
    a2[4] -= 16;
  }
}

void sub_2159B0844(uint64_t a1, char **a2)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_215DFFC24(*(void *)(a1 + 48), &v13);
  uint64_t v4 = a2[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v13 > v5)
  {
    sub_2159B0964(a2, v13 - v5);
    uint64_t v8 = a2;
    uint64_t v6 = *a2;
    char v7 = v8[1];
    uint64_t v9 = v7 - v6;
    if (v7 == v6) {
      return;
    }
    goto LABEL_13;
  }
  if (v13 >= v5)
  {
    uint64_t v6 = *a2;
    uint64_t v9 = v4 - v6;
    if (v4 == v6) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v10 = (uint64_t)&(*a2)[24 * v13];
  while (v4 != (char *)v10)
  {
    if (*(v4 - 1) < 0) {
      operator delete(*((void **)v4 - 3));
    }
    v4 -= 24;
  }
  a2[1] = (char *)v10;
  uint64_t v6 = *a2;
  uint64_t v9 = v10 - (void)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = 24 * (v9 / 24);
    do
    {
      sub_215E000A8(v11, (void **)v6);
      v6 += 24;
      v12 -= 24;
    }
    while (v12);
  }
}

void sub_2159B0964(char **a1, unint64_t a2)
{
  unint64_t v5 = (void **)a1[1];
  uint64_t v4 = (void **)a1[2];
  if (0xAAAAAAAAAAAAAAABLL * (v4 - v5) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      unint64_t v5 = (void **)((char *)v5 + v12);
    }
    a1[1] = (char *)v5;
  }
  else
  {
    uint64_t v6 = (void **)*a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - *a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_215738AC0();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v4 - v6);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        sub_215738AD8();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    unint64_t v13 = &v11[24 * v7];
    char v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    char v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      do
      {
        long long v17 = *(_OWORD *)(v5 - 3);
        *((void *)v13 - 1) = *(v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        *(v5 - 2) = 0;
        *(v5 - 1) = 0;
        *(v5 - 3) = 0;
        v5 -= 3;
      }
      while (v5 != v6);
      unint64_t v5 = (void **)*a1;
      char v18 = (void **)a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      while (v18 != v5)
      {
        if (*((char *)v18 - 1) < 0) {
          operator delete(*(v18 - 3));
        }
        v18 -= 3;
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_2159B0B48(void *a1, unsigned __int16 *a2)
{
  unsigned int v4 = 2;
  sub_215DFF824(a1[6], &v4);
  if (v4 > 1)
  {
    sub_2159B0060(a1 + 2);
    sub_2159B0C48(a1, a2, 2u);
  }
  sub_2159B0C48(a1, a2, v4);
}

void sub_2159B0C48(void *a1, unsigned __int16 *a2, unsigned int a3)
{
  if (a3 < 2) {
    sub_215BAE2E4();
  }
  LOWORD(v11) = 0;
  sub_215DFF670(a1[6], &v11);
  *a2 = v11;
  LODWORD(v11) = 2;
  sub_215DFF824(a1[6], &v11);
  if (v11 <= 1)
  {
    *((void *)&v11 + 1) = 0;
    uint64_t v10 = 0;
    sub_215DFFC24(a1[6], &v10);
    *(void *)&long long v11 = v10;
    uint64_t v9 = a1[6];
    sub_215DFF824(v9, (_DWORD *)&v11 + 2);
    sub_215DFF824(v9, (_DWORD *)((unint64_t)&v11 | 0xC));
    *(_OWORD *)(a2 + 4) = v11;
    int v8 = *a2;
    if (v8 != 1) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_2159B0060(a1 + 2);
    *(void *)&long long v11 = 0;
    sub_215DFFC24(a1[6], &v11);
    *((void *)a2 + 1) = v11;
    uint64_t v5 = a1[6];
    sub_215DFF824(v5, (_DWORD *)a2 + 4);
    sub_215DFF824(v5, (_DWORD *)a2 + 5);
    uint64_t v6 = a1[4];
    uint64_t v7 = *(void *)(v6 - 16) - (*(uint64_t (**)(void *))(a1[2] + 32))(a1 + 2) + *(void *)(v6 - 8);
    if (v7) {
      (*(void (**)(void *, uint64_t))(a1[2] + 40))(a1 + 2, v7);
    }
    a1[4] -= 16;
    int v8 = *a2;
    if (v8 != 1)
    {
LABEL_6:
      sub_215BB14AC(v8);
      sub_2159B1504((uint64_t)&v11, (uint64_t)a1);
      sub_2159AEB98();
    }
  }
  sub_215BAE0AC((uint64_t)(a2 + 4), *((_DWORD *)a2 + 6));
}

void sub_2159B13E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_2159B147C((uint64_t)va1);
  sub_2159AFC08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159B1400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_2159B147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159B141C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_21599550C((uint64_t)va1);
  sub_2159AFC08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159B1438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  if (a35 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C674AF0[a35])(v36 - 136, v35);
  }
  sub_2159AFC08((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2159B147C(uint64_t a1)
{
  std::istream::~istream();
  *(void *)a1 = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return std::streambuf::~streambuf();
}

uint64_t sub_2159B1504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v4 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  uint64_t v5 = (void **)(v4 + 64);
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 24;
  *(void *)(v4 + 104) = MEMORY[0x263F8C2F0] + 24;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = MEMORY[0x263F8C2F0] + 64;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  std::string::size_type __n = 0;
  sub_215DFFC24(*(void *)(a2 + 48), &__n);
  memset(&v10, 0, sizeof(v10));
  if (!__n)
  {
    std::string::size_type v6 = 0;
    goto LABEL_8;
  }
  std::string::append(&v10, __n, 0);
  std::string::size_type v6 = __n;
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    uint64_t v7 = &v10;
    goto LABEL_9;
  }
  uint64_t v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if (!v10.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    uint64_t v7 = 0;
  }
LABEL_9:
  v9[0] = v6;
  v9[1] = v7;
  sub_215E013C0(a2, v9);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v5);
  }
  *(std::string *)uint64_t v5 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  sub_21573B8E0(a1);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_2159B16BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::istream::~istream();
  sub_2159A6ACC(v16);
  _Unwind_Resume(a1);
}

void sub_2159B1728(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = 0;
  char v4 = 0;
  LOBYTE(v5) = 0;
  char v6 = 0;
  sub_2159B253C(a2, (uint64_t)v2);
}

void sub_2159B18D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0) {
      operator delete(*(void **)(v18 - 72));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B191C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (char **)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "auto_timestamp";
  *(void *)(a1 + 96) = 14;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF01A0(a1);
  unsigned int v7 = 2;
  int v5 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF0F9C((void *)a1, &v7);
  if (v7 >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = v7;
  }
  sub_2159B1BBC(a1, v3, v6);
}

void sub_2159B1BBC(uint64_t a1, char **a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "ns";
    *(void *)(a1 + 96) = 2;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unsigned int v6 = (char *)sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    uint64_t v12 = 0;
    sub_215D30030(v6, &v12);
    *a2 = v12;
    unsigned int v7 = (char *)(a2 + 1);
    int v8 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "clock_type";
    *(void *)(a1 + 96) = 10;
    if (!v8) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    uint64_t v12 = v7;
    sub_2159B1D18((void *)a1);
  }
  char v13 = 0;
  int v9 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "ns";
  *(void *)(a1 + 96) = 2;
  if (!v9) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  std::string v10 = (char *)sub_215DF045C((void *)a1);
  ++*(void *)(a1 + 112);
  uint64_t v14 = 0;
  sub_215D30030(v10, &v14);
  uint64_t v12 = v14;
  int v11 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "clock_type";
  *(void *)(a1 + 96) = 10;
  if (!v11) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v14 = &v13;
  sub_2159B1D18((void *)a1);
}

void sub_2159B1D18(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  uint64_t v2 = (void **)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D3040C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159B1E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B1E80(void *a1, uint64_t a2)
{
  void v10[2] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)sub_215DF045C(a1))
  {
    uint64_t v4 = (void **)sub_215DF045C(a1);
    ++a1[14];
    long long v9 = 0uLL;
    uint64_t v8 = 0;
    sub_215D3040C(v4, (uint64_t)&v8);
    uint64_t v5 = v8;
    v10[0] = v9;
    *(void *)((char *)v10 + 7) = *(void *)((char *)&v9 + 7);
    char v6 = HIBYTE(v9);
    if (*(unsigned char *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(unsigned char *)(a2 + 24) = 0;
    }
    uint64_t v7 = v10[0];
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 15) = *(void *)((char *)v10 + 7);
    *(unsigned char *)(a2 + 23) = v6;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(unsigned char *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
}

void sub_2159B1F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B1FA4(int *a1, uint64_t a2, uint64_t a3)
{
  sub_215DF01A0(a2);
  unsigned int v15 = 2;
  int v6 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (v6)
  {
    sub_215DF0F9C((void *)a2, &v15);
    unsigned int v7 = v15;
    int v8 = *a1;
    if (*a1 < 1) {
      goto LABEL_15;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 104) = 1;
    sub_215DF0F9C((void *)a2, &v15);
    unsigned int v7 = v15;
    int v8 = *a1;
    if (*a1 < 1) {
      goto LABEL_15;
    }
  }
  if (v7 >= 2 && v8 == 2)
  {
    unsigned int v15 = 2;
    int v10 = *(unsigned __int8 *)(a2 + 104);
    *(void *)(a2 + 88) = "min_version";
    *(void *)(a2 + 96) = 11;
    if (!v10) {
      *(unsigned char *)(a2 + 104) = 1;
    }
    sub_215DF0F9C((void *)a2, &v15);
    unsigned int v11 = v15;
    if (v15 >= 3)
    {
      uint64_t v14 = sub_2159AD310();
      sub_215E07C10((std::string *)v14, v11, 2u);
    }
  }
  if (v7 >= 2) {
    unsigned int v7 = 2;
  }
LABEL_15:
  sub_2159B20F0(a2, a3, v7);
  uint64_t v12 = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(a2 + 72);
  *(void *)(a2 + 112) = *(void *)(v13 - 8);
  *(void *)(a2 + 48) = v12 - 8;
  *(void *)(a2 + 72) = v13 - 8;
}

void sub_2159B20F0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    char v14 = 0;
    int v9 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "ns";
    *(void *)(a1 + 96) = 2;
    if (!v9) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    int v10 = (char *)sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    unsigned int v15 = 0;
    sub_215D30030(v10, &v15);
    uint64_t v13 = v15;
    int v11 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "clock_type";
    *(void *)(a1 + 96) = 10;
    if (!v11) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    unsigned int v15 = &v14;
    sub_2159B224C(a1, &v15);
    char v12 = v14;
    *(void *)a2 = v13;
    *(unsigned char *)(a2 + 8) = v12;
  }
  else
  {
    int v5 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "ns";
    *(void *)(a1 + 96) = 2;
    if (!v5) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    int v6 = (char *)sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    uint64_t v13 = 0;
    sub_215D30030(v6, &v13);
    *(void *)a2 = v13;
    unsigned int v7 = (char *)(a2 + 8);
    int v8 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "clock_type";
    *(void *)(a1 + 96) = 10;
    if (!v8) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    uint64_t v13 = v7;
    sub_2159B224C(a1, &v13);
  }
}

void sub_2159B224C(uint64_t a1, unsigned char **a2)
{
  if ((*(unsigned char *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v6 = 0;
    uint64_t v4 = (void **)sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    uint64_t v8 = 0;
    long long v7 = 0uLL;
    sub_215D3040C(v4, (uint64_t)&v7);
    uint64_t v6 = v8;
    *(_OWORD *)std::string __p = v7;
    operator new();
  }
  LOBYTE(v7) = 0;
  sub_215DF0D3C((void *)a1, &v7);
  **a2 = v7;
}

void sub_2159B236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B23DC(void *a1, uint64_t a2)
{
  if (*(unsigned char *)sub_215DF045C(a1))
  {
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    char v13 = 0;
    uint64_t v4 = (unsigned __int8 *)sub_215DF045C(a1);
    ++a1[14];
    sub_215DF19D8((uint64_t)&v13, v4, (void **)&v11);
    if (*(unsigned char *)(a2 + 24))
    {
      int v5 = *(void ***)a2;
      if (*(void *)a2)
      {
        uint64_t v6 = *(void ***)(a2 + 8);
        long long v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0) {
              operator delete(*(v6 - 3));
            }
            v6 -= 3;
          }
          while (v6 != v5);
          long long v7 = *(void ***)a2;
        }
        *(void *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(void *)(a2 + 16) = v12;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v8 = *(void ***)a2;
      if (*(void *)a2)
      {
        int v9 = *(void ***)(a2 + 8);
        int v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0) {
              operator delete(*(v9 - 3));
            }
            v9 -= 3;
          }
          while (v9 != v8);
          int v10 = *(void ***)a2;
        }
        *(void *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
}

void sub_2159B2528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_2159B253C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (char **)(a2 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "auto_timestamp";
  *(void *)(a1 + 96) = 14;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF01A0(a1);
  unsigned int v7 = 2;
  int v5 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF0F9C((void *)a1, &v7);
  if (v7 >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = v7;
  }
  sub_2159B1BBC(a1, v3, v6);
}

void sub_2159B2650(uint64_t a1)
{
  sub_215DF01A0(a1);
  unsigned int v5 = 2;
  int v2 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "version";
  *(void *)(a1 + 96) = 7;
  if (!v2) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  sub_215DF0F9C((void *)a1, &v5);
  unsigned int v3 = v5;
  if (v5 >= 2) {
    unsigned int v3 = 2;
  }
  if (v3 >= 2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "io_format";
    *(void *)(a1 + 96) = 9;
    if (!v4) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    sub_2159B313C((void *)a1);
  }
  sub_215BAE2E4();
}

void sub_2159B300C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_2159B3054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  std::istream::~istream();
  a24 = MEMORY[0x263F8C318] + 16;
  if (a37 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  if (a21 != -1) {
    ((void (*)(uint64_t, uint64_t *))off_26C674AF0[a21])(v39 - 65, &a13);
  }
  _Unwind_Resume(a1);
}

void sub_2159B313C(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  int v2 = (void **)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D3040C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159B3234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B32A4(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  int v2 = (void **)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D3040C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159B3394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159B3404(uint64_t a1, void *a2)
{
  uint64_t v4 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v4 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  long long v5 = (void **)(v4 + 64);
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 24;
  *(void *)(v4 + 104) = MEMORY[0x263F8C2F0] + 24;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = MEMORY[0x263F8C2F0] + 64;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  uint64_t v6 = (char *)sub_215DF045C(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_215D2FEDC(v6, &__n);
  std::string::size_type v7 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v7 && (std::string::append(&__n, v7, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v11[0] = v7;
  v11[1] = p_n;
  unint64_t v9 = sub_215DF045C(a2);
  ++a2[14];
  sub_215DF0588(v9, (uint64_t)v11);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v5);
  }
  *(std::string *)long long v5 = __n;
  *((unsigned char *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_21573B8E0(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__n.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_2159B35D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::istream::~istream();
  sub_2159A6ACC(v17);
  _Unwind_Resume(a1);
}

void sub_2159B3640(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(void *)&long long v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  char v27 = 0;
  sub_2159B4318(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  char v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_215738B0C(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      long long v9 = v25;
      uint64_t v10 = v26;
    }
    char v11 = 1;
  }
  char v12 = 0;
  char v13 = 0;
  LOBYTE(v14) = 0;
  char v16 = 0;
  LOBYTE(v17) = 0;
  char v19 = 0;
  LOBYTE(__p) = 0;
  char v22 = 0;
  sub_2159ADAB8(a3, (uint64_t)v8);
  if (v22)
  {
    long long v5 = (void **)__p;
    if (__p)
    {
      uint64_t v6 = v21;
      std::string::size_type v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        std::string::size_type v7 = __p;
      }
      char v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0) {
    operator delete(v17);
  }
  if (v16 && v15 < 0) {
    operator delete(v14);
  }
  if (v11 && SHIBYTE(v10) < 0) {
    operator delete((void *)v9);
  }
  if (v27)
  {
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
  }
}

void sub_2159B37F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0) {
      operator delete(*(void **)(v18 - 72));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B3834(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = (void *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_215DFABD4(a1, __p);
  unsigned int v7 = __p[0];
  if (LODWORD(__p[0]) >= 2) {
    unsigned int v8 = 2;
  }
  else {
    unsigned int v8 = __p[0];
  }
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_215DFB534(a1, __p);
    LOBYTE(v28[0]) = 0;
    sub_215DFA01C(a1, v28);
    char v9 = (char)v28[0];
    void *v6 = __p[0];
    *(unsigned char *)(a2 + 16) = v9;
    if (v7 < 2) {
      goto LABEL_9;
    }
LABEL_8:
    if (*(unsigned char *)(a1 + 131)) {
      goto LABEL_9;
    }
    while (1)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
        goto LABEL_9;
      }
      sub_215DFD700(a1, (uint64_t)__p);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_24:
          char v12 = 0;
          if (SHIBYTE(v32) < 0) {
            goto LABEL_27;
          }
          goto LABEL_13;
        }
      }
      else if (SHIBYTE(v32) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_24;
      }
      char v12 = 1;
      if (SHIBYTE(v32) < 0) {
LABEL_27:
      }
        operator delete(__p[0]);
LABEL_13:
      if (*(unsigned char *)(a1 + 131)) {
        char v11 = 0;
      }
      else {
        char v11 = v12;
      }
      if ((v11 & 1) == 0) {
        goto LABEL_9;
      }
    }
  }
  sub_215DFB534(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_215DFA01C(a1, __p);
  *(unsigned char *)(a2 + 16) = __p[0];
  if (v7 >= 2) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v10 = (void **)(a2 + 24);
  LOBYTE(v28[0]) = 0;
  sub_215DFA01C(a1, v28);
  if (!LOBYTE(v28[0]))
  {
    if (*(unsigned char *)(a2 + 48))
    {
      if (*(char *)(a2 + 47) < 0) {
        operator delete(*v10);
      }
      *(unsigned char *)(a2 + 48) = 0;
      if (a3 < 4) {
        return;
      }
LABEL_41:
      sub_2159B3FE0(a1, a2 + 56);
      if (a3 == 5)
      {
        char v13 = (void **)(a2 + 80);
        LOBYTE(v28[0]) = 0;
        sub_215DFA01C(a1, v28);
        if (LOBYTE(v28[0]))
        {
          if (!*(unsigned char *)(a2 + 104))
          {
            char *v13 = 0;
            *(void *)(a2 + 88) = 0;
            *(void *)(a2 + 96) = 0;
            *(unsigned char *)(a2 + 104) = 1;
          }
          ++*(void *)(a1 + 80);
          if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
          {
            *(unsigned char *)(a1 + 132) = 1;
          }
          else
          {
            sub_215DFD700(a1, (uint64_t)__p);
            if (*(char *)(a2 + 103) < 0) {
              operator delete(*v13);
            }
            *(_OWORD *)char v13 = *(_OWORD *)__p;
            *(void *)(a2 + 96) = v32;
            ++*(void *)(a1 + 104);
          }
        }
        else if (*(unsigned char *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0) {
            operator delete(*v13);
          }
          *(unsigned char *)(a2 + 104) = 0;
        }
        return;
      }
      if (a3 < 6) {
        return;
      }
      char v14 = (void **)(a2 + 80);
      LOBYTE(v28[0]) = 0;
      sub_215DFA01C(a1, v28);
      if (LOBYTE(v28[0]))
      {
        if (!*(unsigned char *)(a2 + 104))
        {
          void *v14 = 0;
          *(void *)(a2 + 88) = 0;
          *(void *)(a2 + 96) = 0;
          *(unsigned char *)(a2 + 104) = 1;
        }
        ++*(void *)(a1 + 80);
        if (!*(unsigned char *)(a1 + 128) || !*(unsigned char *)(a1 + 131))
        {
          sub_215DFD700(a1, (uint64_t)__p);
          if (*(char *)(a2 + 103) < 0) {
            operator delete(*v14);
          }
          *(_OWORD *)char v14 = *(_OWORD *)__p;
          *(void *)(a2 + 96) = v32;
LABEL_73:
          ++*(void *)(a1 + 104);
LABEL_74:
          char v15 = (void **)(a2 + 112);
          LOBYTE(v28[0]) = 0;
          sub_215DFA01C(a1, v28);
          if (LOBYTE(v28[0]))
          {
            if (!*(unsigned char *)(a2 + 136))
            {
              char *v15 = 0;
              *(void *)(a2 + 120) = 0;
              *(void *)(a2 + 128) = 0;
              *(unsigned char *)(a2 + 136) = 1;
            }
            ++*(void *)(a1 + 80);
            if (!*(unsigned char *)(a1 + 128) || !*(unsigned char *)(a1 + 131))
            {
              sub_215DFD700(a1, (uint64_t)__p);
              if (*(char *)(a2 + 135) < 0) {
                operator delete(*v15);
              }
              *(_OWORD *)char v15 = *(_OWORD *)__p;
              *(void *)(a2 + 128) = v32;
              goto LABEL_102;
            }
          }
          else
          {
            if (*(unsigned char *)(a2 + 136))
            {
              if (*(char *)(a2 + 135) < 0) {
                operator delete(*v15);
              }
              *(unsigned char *)(a2 + 136) = 0;
            }
            ++*(void *)(a1 + 80);
            if (!*(unsigned char *)(a1 + 128) || !*(unsigned char *)(a1 + 131))
            {
              sub_215DFD700(a1, (uint64_t)__p);
              if (SHIBYTE(v32) < 0) {
                operator delete(__p[0]);
              }
LABEL_102:
              ++*(void *)(a1 + 104);
              LOBYTE(v26[0]) = 0;
              sub_215DFA01C(a1, v26);
              if (!LOBYTE(v26[0]))
              {
LABEL_103:
                ++*(void *)(a1 + 80);
                if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
                {
                  *(unsigned char *)(a1 + 132) = 1;
                }
                else
                {
                  sub_215DFD700(a1, (uint64_t)v28);
                  if (SHIBYTE(v29) < 0) {
                    operator delete(v28[0]);
                  }
                  ++*(void *)(a1 + 104);
                }
                if (*(unsigned char *)(a2 + 168))
                {
                  uint64_t v20 = *(void *)(a2 + 144);
                  if (v20)
                  {
                    uint64_t v21 = *(void *)(a2 + 152);
                    char v22 = *(void **)(a2 + 144);
                    if (v21 != v20)
                    {
                      do
                      {
                        if (*(char *)(v21 - 1) < 0) {
                          operator delete(*(void **)(v21 - 24));
                        }
                        v21 -= 24;
                      }
                      while (v21 != v20);
                      char v22 = *(void **)(a2 + 144);
                    }
                    *(void *)(a2 + 152) = v20;
                    operator delete(v22);
                  }
                  *(unsigned char *)(a2 + 168) = 0;
                }
                return;
              }
              goto LABEL_89;
            }
          }
          *(unsigned char *)(a1 + 132) = 1;
          LOBYTE(v26[0]) = 0;
          sub_215DFA01C(a1, v26);
          if (!LOBYTE(v26[0])) {
            goto LABEL_103;
          }
LABEL_89:
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v32 = 0;
          char v33 = 1;
          ++*(void *)(a1 + 80);
          if (*(unsigned char *)(a1 + 128) && *(unsigned char *)(a1 + 131))
          {
            *(unsigned char *)(a1 + 132) = 1;
          }
          else
          {
            sub_215DFD700(a1, (uint64_t)v28);
            uint64_t v16 = *(void *)(a1 + 104);
            *(_OWORD *)std::string __p = *(_OWORD *)v28;
            uint64_t v32 = v29;
            *(void *)(a1 + 104) = v16 + 1;
          }
          sub_2159ACBA8(__p, (uint64_t)v26);
          *(_OWORD *)uint64_t v28 = *(_OWORD *)v26;
          uint64_t v29 = v27;
          v26[1] = 0;
          uint64_t v27 = 0;
          v26[0] = 0;
          char v30 = 1;
          sub_2159AD978(a2 + 144, (uint64_t)v28);
          if (v30)
          {
            uint64_t v17 = (void **)v28[0];
            if (v28[0])
            {
              uint64_t v18 = (void **)v28[1];
              char v19 = v28[0];
              if (v28[1] != v28[0])
              {
                do
                {
                  if (*((char *)v18 - 1) < 0) {
                    operator delete(*(v18 - 3));
                  }
                  v18 -= 3;
                }
                while (v18 != v17);
                char v19 = v28[0];
              }
              v28[1] = v17;
              operator delete(v19);
            }
          }
          uint64_t v23 = (void **)v26[0];
          if (v26[0])
          {
            long long v24 = (void **)v26[1];
            long long v25 = v26[0];
            if (v26[1] != v26[0])
            {
              do
              {
                if (*((char *)v24 - 1) < 0) {
                  operator delete(*(v24 - 3));
                }
                v24 -= 3;
              }
              while (v24 != v23);
              long long v25 = v26[0];
            }
            v26[1] = v23;
            operator delete(v25);
          }
          if (v33 && SHIBYTE(v32) < 0) {
            operator delete(__p[0]);
          }
          return;
        }
      }
      else
      {
        if (*(unsigned char *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0) {
            operator delete(*v14);
          }
          *(unsigned char *)(a2 + 104) = 0;
        }
        ++*(void *)(a1 + 80);
        if (!*(unsigned char *)(a1 + 128) || !*(unsigned char *)(a1 + 131))
        {
          sub_215DFD700(a1, (uint64_t)__p);
          if (SHIBYTE(v32) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_73;
        }
      }
      *(unsigned char *)(a1 + 132) = 1;
      goto LABEL_74;
    }
LABEL_36:
    if (a3 < 4) {
      return;
    }
    goto LABEL_41;
  }
  if (!*(unsigned char *)(a2 + 48))
  {
    *uint64_t v10 = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(unsigned char *)(a2 + 48) = 1;
    ++*(void *)(a1 + 80);
    if (!*(unsigned char *)(a1 + 128)) {
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  ++*(void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 128))
  {
LABEL_34:
    if (!*(unsigned char *)(a1 + 131)) {
      goto LABEL_38;
    }
    *(unsigned char *)(a1 + 132) = 1;
    goto LABEL_36;
  }
LABEL_38:
  sub_215DFD700(a1, (uint64_t)__p);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)uint64_t v10 = *(_OWORD *)__p;
  *(void *)(a2 + 40) = v32;
  ++*(void *)(a1 + 104);
  if (a3 >= 4) {
    goto LABEL_41;
  }
}

void sub_2159B3FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B3FE0(uint64_t a1, uint64_t a2)
{
  char v9 = 0;
  sub_215DFA01C(a1, &v9);
  if (v9)
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
    }
    LODWORD(__p) = 2;
    sub_215DFABD4(a1, &__p);
    unsigned int v4 = __p;
    if (__p >= 2) {
      unsigned int v5 = 2;
    }
    else {
      unsigned int v5 = __p;
    }
    if (v5 < 2)
    {
      std::string __p = 0;
      LOBYTE(v12) = 0;
      sub_215DFB534(a1, &__p);
      char v10 = 0;
      sub_215DFA01C(a1, &v10);
      char v6 = v10;
      *(void *)a2 = __p;
      *(unsigned char *)(a2 + 8) = v6;
      if (v4 < 2) {
        return;
      }
    }
    else
    {
      sub_215DFB534(a1, (void *)a2);
      LOBYTE(__p) = 0;
      sub_215DFA01C(a1, &__p);
      *(unsigned char *)(a2 + 8) = (_BYTE)__p;
      if (v4 < 2) {
        return;
      }
    }
    if (!*(unsigned char *)(a1 + 131))
    {
      do
      {
        if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
          return;
        }
        sub_215DFD700(a1, (uint64_t)&__p);
        if (v13 < 0)
        {
          if (v12 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
          {
LABEL_26:
            char v8 = 0;
            if (v13 < 0) {
              goto LABEL_29;
            }
            goto LABEL_15;
          }
        }
        else if (v13 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
        {
          goto LABEL_26;
        }
        char v8 = 1;
        if (v13 < 0) {
LABEL_29:
        }
          operator delete(__p);
LABEL_15:
        if (*(unsigned char *)(a1 + 131)) {
          char v7 = 0;
        }
        else {
          char v7 = v8;
        }
      }
      while ((v7 & 1) != 0);
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(a2 + 16) = 0;
  }
}

__n128 sub_2159B41A0(uint64_t a1, char **a2)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_215DFB854(a1, &v14);
  unsigned int v5 = a2[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  if (v14 <= v6)
  {
    if (v14 >= v6)
    {
      char v7 = *a2;
      uint64_t v10 = v5 - v7;
      if (v5 == v7) {
        return result;
      }
    }
    else
    {
      uint64_t v11 = (uint64_t)&(*a2)[24 * v14];
      while (v5 != (char *)v11)
      {
        if (*(v5 - 1) < 0) {
          operator delete(*((void **)v5 - 3));
        }
        v5 -= 24;
      }
      a2[1] = (char *)v11;
      char v7 = *a2;
      uint64_t v10 = v11 - (void)v7;
      if ((char *)v11 == v7) {
        return result;
      }
    }
  }
  else
  {
    sub_2159B0964(a2, v14 - v6);
    char v9 = a2;
    char v7 = *a2;
    char v8 = v9[1];
    uint64_t v10 = v8 - v7;
    if (v8 == v7) {
      return result;
    }
  }
  uint64_t v12 = 24 * (v10 / 24);
  do
  {
    while (1)
    {
      ++*(void *)(a1 + 80);
      if (!*(unsigned char *)(a1 + 128) || *(unsigned char *)(a1 + 131) == 0) {
        break;
      }
      *(unsigned char *)(a1 + 132) = 1;
      v7 += 24;
      v12 -= 24;
      if (!v12) {
        return result;
      }
    }
    sub_215DFD700(a1, (uint64_t)&v15);
    if (v7[23] < 0) {
      operator delete(*(void **)v7);
    }
    __n128 result = v15;
    *((void *)v7 + 2) = v16;
    *(__n128 *)char v7 = result;
    v7 += 24;
    ++*(void *)(a1 + 104);
    v12 -= 24;
  }
  while (v12);
  return result;
}

double sub_2159B4318(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6 = (void *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_215DFABD4(a1, __p);
  unsigned int v7 = __p[0];
  if (LODWORD(__p[0]) >= 2) {
    unsigned int v8 = 2;
  }
  else {
    unsigned int v8 = __p[0];
  }
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_215DFB534(a1, __p);
    char v14 = 0;
    sub_215DFA01C(a1, &v14);
    char v10 = v14;
    void *v6 = __p[0];
    *(unsigned char *)(a2 + 16) = v10;
    if (v7 < 2) {
      goto LABEL_9;
    }
LABEL_8:
    if (*(unsigned char *)(a1 + 131)) {
      goto LABEL_9;
    }
    while (1)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
        goto LABEL_9;
      }
      sub_215DFD700(a1, (uint64_t)__p);
      if (SHIBYTE(v16) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_25:
          char v13 = 0;
          if (SHIBYTE(v16) < 0) {
            goto LABEL_28;
          }
          goto LABEL_14;
        }
      }
      else if (SHIBYTE(v16) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_25;
      }
      char v13 = 1;
      if (SHIBYTE(v16) < 0) {
LABEL_28:
      }
        operator delete(__p[0]);
LABEL_14:
      if (*(unsigned char *)(a1 + 131)) {
        char v12 = 0;
      }
      else {
        char v12 = v13;
      }
      if ((v12 & 1) == 0) {
        goto LABEL_9;
      }
    }
  }
  sub_215DFB534(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_215DFA01C(a1, __p);
  *(unsigned char *)(a2 + 16) = __p[0];
  if (v7 >= 2) {
    goto LABEL_8;
  }
LABEL_9:
  if (a3 < 2) {
    return result;
  }
  uint64_t v11 = (void **)(a2 + 24);
  char v14 = 0;
  sub_215DFA01C(a1, &v14);
  if (v14)
  {
    if (*(unsigned char *)(a2 + 48))
    {
      ++*(void *)(a1 + 80);
      if (!*(unsigned char *)(a1 + 128)) {
        goto LABEL_37;
      }
    }
    else
    {
      *uint64_t v11 = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(unsigned char *)(a2 + 48) = 1;
      ++*(void *)(a1 + 80);
      if (!*(unsigned char *)(a1 + 128))
      {
LABEL_37:
        sub_215DFD700(a1, (uint64_t)__p);
        if (*(char *)(a2 + 47) < 0) {
          operator delete(*v11);
        }
        double result = *(double *)__p;
        *(_OWORD *)uint64_t v11 = *(_OWORD *)__p;
        *(void *)(a2 + 40) = v16;
        ++*(void *)(a1 + 104);
        return result;
      }
    }
    if (*(unsigned char *)(a1 + 131))
    {
      *(unsigned char *)(a1 + 132) = 1;
      return result;
    }
    goto LABEL_37;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*v11);
    }
    *(unsigned char *)(a2 + 48) = 0;
  }
  return result;
}

void sub_2159B4594()
{
}

void sub_2159B49A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void sub_2159B49C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void sub_2159B49E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  if (a34 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C674AF0[a34])(v35 - 120, v34);
  }
  sub_2159AFC08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159B4A28(uint64_t a1, unsigned __int16 *a2)
{
  LOWORD(__p[0]) = 0;
  sub_215DFA594(a1, __p);
  *a2 = (unsigned __int16)__p[0];
  LODWORD(__p[0]) = 2;
  sub_215DFABD4(a1, __p);
  unsigned int v4 = __p[0];
  if (LODWORD(__p[0]) >= 2) {
    unsigned int v5 = 2;
  }
  else {
    unsigned int v5 = __p[0];
  }
  if (v5 < 2)
  {
    __p[1] = 0;
    uint64_t v11 = 0;
    sub_215DFB854(a1, &v11);
    __p[0] = v11;
    sub_215DFABD4(a1, &__p[1]);
    sub_215DFABD4(a1, (_DWORD *)((unint64_t)__p | 0xC));
    *(_OWORD *)(a2 + 4) = *(_OWORD *)__p;
    if (v4 < 2) {
      goto LABEL_9;
    }
  }
  else
  {
    __p[0] = 0;
    sub_215DFB854(a1, __p);
    *((void **)a2 + 1) = __p[0];
    sub_215DFABD4(a1, (_DWORD *)a2 + 4);
    sub_215DFABD4(a1, (_DWORD *)a2 + 5);
    if (v4 < 2)
    {
LABEL_9:
      int v6 = *a2;
      if (v6 == 1) {
        sub_215BAE0AC((uint64_t)(a2 + 4), *((_DWORD *)a2 + 6));
      }
      sub_215BB14AC(v6);
      sub_2159B4E3C((uint64_t)__p, a1);
      sub_2159AEB98();
    }
  }
  if (*(unsigned char *)(a1 + 131)) {
    goto LABEL_9;
  }
  while (1)
  {
    if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
      goto LABEL_9;
    }
    sub_215DFD700(a1, (uint64_t)__p);
    if (v10 < 0)
    {
      if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
      {
LABEL_22:
        char v8 = 0;
        if (v10 < 0) {
          goto LABEL_25;
        }
        goto LABEL_11;
      }
    }
    else if (v10 == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
    {
      goto LABEL_22;
    }
    char v8 = 1;
    if (v10 < 0) {
LABEL_25:
    }
      operator delete(__p[0]);
LABEL_11:
    if (*(unsigned char *)(a1 + 131)) {
      char v7 = 0;
    }
    else {
      char v7 = v8;
    }
    if ((v7 & 1) == 0) {
      goto LABEL_9;
    }
  }
}

void sub_2159B4E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159B4E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v4 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  unsigned int v5 = (void **)(v4 + 64);
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 24;
  *(void *)(v4 + 104) = MEMORY[0x263F8C2F0] + 24;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = MEMORY[0x263F8C2F0] + 64;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  std::string::size_type __n = 0;
  sub_215DFB854(a2, &__n);
  memset(&v10, 0, sizeof(v10));
  if (!__n)
  {
    std::string::size_type v6 = 0;
    goto LABEL_8;
  }
  std::string::append(&v10, __n, 0);
  std::string::size_type v6 = __n;
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    char v7 = &v10;
    goto LABEL_9;
  }
  char v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if (!v10.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    char v7 = 0;
  }
LABEL_9:
  v9[0] = v6;
  v9[1] = v7;
  sub_215DFD91C(a2, (uint64_t)v9);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v5);
  }
  *(std::string *)unsigned int v5 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  sub_21573B8E0(a1);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_2159B4FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::istream::~istream();
  sub_2159A6ACC(v16);
  _Unwind_Resume(a1);
}

void sub_2159B5060(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 >= 3) {
    sub_215D02644(a2);
  }
  if (v9 >= 6) {
    unsigned int v10 = 6;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v10 < 3)
  {
    sub_2159B5180((uint64_t)&v14, a2, a3, v10);
    if (v9 < 3) {
      return;
    }
  }
  else
  {
    sub_2159B5394(a2, a3, v10);
    if (v9 < 3) {
      return;
    }
  }
  uint64_t v11 = a2[12];
  uint64_t v12 = a2[9];
  a2[6] = *(void *)(v11 - 8) + *(void *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_2159B516C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B5180(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  *(void *)&long long v25 = 0;
  BYTE8(v25) = 0;
  LOBYTE(v26) = 0;
  char v28 = 0;
  sub_2159B5450((uint64_t)v10, a2, (uint64_t)&v25);
  if (a4 >= 2) {
    sub_2159B5724(a2, (uint64_t)&v26);
  }
  *(_OWORD *)&char v10[8] = v25;
  LOBYTE(v11) = 0;
  char v13 = 0;
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
    {
      sub_215738B0C(&v11, (void *)v26, *((unint64_t *)&v26 + 1));
    }
    else
    {
      long long v11 = v26;
      uint64_t v12 = v27;
    }
    char v13 = 1;
  }
  char v14 = 0;
  char v15 = 0;
  LOBYTE(v16) = 0;
  char v18 = 0;
  LOBYTE(v19) = 0;
  char v21 = 0;
  LOBYTE(__p) = 0;
  char v24 = 0;
  sub_2159ADAB8(a3, (uint64_t)v10);
  if (v24)
  {
    char v7 = (void **)__p;
    if (__p)
    {
      char v8 = v23;
      unsigned int v9 = __p;
      if (v23 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0) {
            operator delete(*(v8 - 3));
          }
          v8 -= 3;
        }
        while (v8 != v7);
        unsigned int v9 = __p;
      }
      uint64_t v23 = v7;
      operator delete(v9);
    }
  }
  if (v21 && v20 < 0) {
    operator delete(v19);
  }
  if (v18 && v17 < 0) {
    operator delete(v16);
  }
  if (v13 && SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
  if (v28)
  {
    if (SHIBYTE(v27) < 0) {
      operator delete((void *)v26);
    }
  }
}

void sub_2159B5350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0) {
      operator delete(*(void **)(v18 - 88));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B5394(void *a1, uint64_t a2, unsigned int a3)
{
  sub_2159B5450((uint64_t)&v6, a1, a2 + 8);
  sub_2159B5724(a1, a2 + 24);
  if (a3 >= 4)
  {
    sub_2159B5820(a1, a2 + 56);
    if (a3 == 5)
    {
      sub_2159B5724(a1, a2 + 80);
    }
    else if (a3 >= 6)
    {
      sub_2159B5724(a1, a2 + 80);
      sub_2159B5724(a1, a2 + 112);
      sub_2159B58F0(a1, a2 + 144);
    }
  }
}

void *sub_2159B5450(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    uint64_t v15 = 0;
    char v16 = 0;
    double result = sub_2159B5644(a2, (uint64_t)&v15);
    char v13 = v16;
    *(void *)a3 = v15;
    *(unsigned char *)(a3 + 8) = v13;
  }
  else
  {
    sub_215D02644(a2);
    double result = sub_2159B5564(a2, a3);
    uint64_t v11 = a2[12];
    uint64_t v12 = a2[9];
    a2[6] = *(void *)(v11 - 8) + *(void *)(v12 - 8) + 8;
    a2[9] = v12 - 8;
    a2[12] = v11 - 8;
  }
  return result;
}

void sub_2159B5550(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2159B5564(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7
    || (*(void *)a2 = *(void *)(result[3] + v2), v6 = result[6], unint64_t v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  char v8 = *(unsigned char *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(unsigned char *)(a2 + 8) = v8;
  return result;
}

void sub_2159B561C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B5630(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2159B5644(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7
    || (*(void *)a2 = *(void *)(result[3] + v2), v6 = result[6], unint64_t v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  char v8 = *(unsigned char *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(unsigned char *)(a2 + 8) = v8;
  return result;
}

void sub_2159B56FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B5710(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B5724(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  int v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
    }
    else
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 1;
    }
    sub_215D029A0(a1, a2);
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(unsigned char *)(a2 + 24) = 0;
  }
}

void sub_2159B580C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2159B5820(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  int v3 = *(unsigned __int8 *)(result[3] + v2);
  result[6] = v2 + 1;
  if (v3)
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
    }
    return sub_2159B5450((uint64_t)&v5, result, a2);
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

void sub_2159B58DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B58F0(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  int v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
    }
    else
    {
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 1;
    }
    sub_2159B5A34(a1, a2);
  }
  else if (*(unsigned char *)(a2 + 24))
  {
    char v5 = *(void ***)a2;
    if (*(void *)a2)
    {
      uint64_t v6 = *(void ***)(a2 + 8);
      unint64_t v7 = *(void ***)a2;
      if (v6 != v5)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        unint64_t v7 = *(void ***)a2;
      }
      *(void *)(a2 + 8) = v5;
      operator delete(v7);
    }
    *(unsigned char *)(a2 + 24) = 0;
  }
}

void sub_2159B5A20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B5A34(void *a1, uint64_t a2)
{
  unint64_t v3 = a1[6];
  unint64_t v2 = a1[7];
  BOOL v4 = v2 >= v3;
  unint64_t v5 = v2 - v3;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unint64_t v8 = *(void *)(a1[3] + v3);
  a1[6] = v3 + 8;
  uint64_t v9 = *(void *)(a2 + 8);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *(void *)a2) >> 3);
  if (v8 > v10)
  {
    sub_2159B0964((char **)a2, v8 - v10);
    uint64_t v13 = a2;
    uint64_t v11 = *(char **)a2;
    uint64_t v12 = *(char **)(v13 + 8);
    uint64_t v14 = v12 - v11;
    if (v12 == v11) {
      return;
    }
    goto LABEL_16;
  }
  if (v8 >= v10)
  {
    uint64_t v11 = *(char **)a2;
    uint64_t v14 = v9 - *(void *)a2;
    if (v9 == *(void *)a2) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v15 = *(void *)a2 + 24 * v8;
  while (v9 != v15)
  {
    if (*(char *)(v9 - 1) < 0) {
      operator delete(*(void **)(v9 - 24));
    }
    v9 -= 24;
  }
  *(void *)(a2 + 8) = v15;
  uint64_t v11 = *(char **)a2;
  uint64_t v14 = v15 - (void)v11;
  if ((char *)v15 != v11)
  {
LABEL_16:
    uint64_t v16 = 24 * (v14 / 24);
    do
    {
      sub_215D029A0(a1, (uint64_t)v11);
      v11 += 24;
      v16 -= 24;
    }
    while (v16);
  }
}

void sub_2159B5B80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B5B94(void *a1, unsigned __int16 *a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 3) {
    goto LABEL_23;
  }
  unsigned int v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 <= 1) {
    sub_215BAE2E4();
  }
  sub_215D02644(a1);
  unint64_t v9 = a1[6];
  unint64_t v10 = a1[7];
  unint64_t v11 = v10 - v9;
  if (v10 < v9) {
    unint64_t v11 = 0;
  }
  if (v11 <= 1) {
    goto LABEL_23;
  }
  uint64_t v12 = a1[3];
  unsigned __int16 v13 = *(_WORD *)(v12 + v9);
  a1[6] = v9 + 2;
  *a2 = v13;
  uint64_t v14 = a2 + 4;
  BOOL v4 = v10 >= v9 + 2;
  unint64_t v15 = v10 - (v9 + 2);
  if (!v4) {
    unint64_t v15 = 0;
  }
  if (v15 <= 3) {
    goto LABEL_23;
  }
  unsigned int v16 = *(_DWORD *)(v12 + v9 + 2);
  a1[6] = v9 + 6;
  if (v16 <= 1)
  {
    long long v28 = 1uLL;
    sub_2159B655C(a1, &v28);
    _OWORD *v14 = v28;
    int v26 = *a2;
    if (v26 != 1)
    {
LABEL_19:
      sub_215BB14AC(v26);
      sub_2159B6640((uint64_t)&v28, a1);
      sub_2159AEB98();
    }
LABEL_22:
    sub_215BAE0AC((uint64_t)(a2 + 4), *((_DWORD *)a2 + 6));
  }
  sub_215D02644(a1);
  unint64_t v18 = a1[6];
  unint64_t v17 = a1[7];
  unint64_t v19 = v17 - v18;
  if (v17 < v18) {
    unint64_t v19 = 0;
  }
  if (v19 <= 7)
  {
LABEL_23:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
  }
  else
  {
    uint64_t v20 = a1[3];
    uint64_t v21 = *(void *)(v20 + v18);
    unint64_t v22 = v18 + 8;
    a1[6] = v22;
    *(void *)uint64_t v14 = v21;
    BOOL v4 = v17 >= v22;
    unint64_t v23 = v17 - v22;
    if (!v4) {
      unint64_t v23 = 0;
    }
    if (v23 > 7)
    {
      *((void *)a2 + 2) = *(void *)(v20 + v22);
      a1[6] += 8;
      uint64_t v24 = a1[12];
      uint64_t v25 = a1[9];
      a1[6] = *(void *)(v24 - 8) + *(void *)(v25 - 8) + 8;
      a1[9] = v25 - 8;
      a1[12] = v24 - 8;
      int v26 = *a2;
      if (v26 != 1) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
  }
  __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
}

void sub_2159B6438(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B644C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B6468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_2159B6484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_2159B6498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_2159AFC08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159B64CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B64E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_2159B6504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43)
{
  if (a43 != -1) {
    ((void (*)(char *, uint64_t))off_26C674AF0[a43])(&a22, v43);
  }
  sub_2159AFC08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_2159B655C(void *result, void *a2)
{
  unint64_t v3 = result[6];
  unint64_t v2 = result[7];
  unint64_t v4 = v2 - v3;
  if (v2 < v3) {
    unint64_t v4 = 0;
  }
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    goto LABEL_10;
  }
  uint64_t v5 = result[3];
  uint64_t v6 = *(void *)(v5 + v3);
  unint64_t v7 = v3 + 8;
  result[6] = v7;
  *a2 = v6;
  BOOL v8 = v2 >= v7;
  unint64_t v9 = v2 - v7;
  if (!v8) {
    unint64_t v9 = 0;
  }
  if (v9 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  a2[1] = *(void *)(v5 + v7);
  result[6] += 8;
  return result;
}

void sub_2159B6618(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159B662C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2159B6640(uint64_t a1, void *a2)
{
  uint64_t v4 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v4 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  uint64_t v5 = (void **)(v4 + 64);
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 24;
  *(void *)(v4 + 104) = MEMORY[0x263F8C2F0] + 24;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = MEMORY[0x263F8C2F0] + 64;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  unint64_t v6 = a2[6];
  unint64_t v7 = a2[7];
  BOOL v8 = v7 >= v6;
  unint64_t v9 = v7 - v6;
  if (!v8) {
    unint64_t v9 = 0;
  }
  if (v9 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  std::string::size_type v10 = *(void *)(a2[3] + v6);
  a2[6] = v6 + 8;
  memset(&__dst, 0, sizeof(__dst));
  if (v10 && (std::string::append(&__dst, v10, 0), SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0))
  {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__r.__words[0])
    {
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      p_dst = 0;
    }
  }
  else
  {
    p_dst = &__dst;
  }
  unint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  BOOL v8 = v13 >= v12;
  std::string::size_type v14 = v13 - v12;
  if (!v8) {
    std::string::size_type v14 = 0;
  }
  if (v14 < v10)
  {
    unint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v17, "Not enough data to read binary blob");
    v17->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(v17, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(p_dst, (const void *)(a2[3] + v12), v10);
  a2[6] += v10;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v5);
  }
  *(std::string *)uint64_t v5 = __dst;
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  sub_21573B8E0(a1);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_2159B68D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::istream::~istream();
  sub_2159A6ACC(v15);
  _Unwind_Resume(a1);
}

void sub_2159B6970(int *a1, void **a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4 = a4;
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 3)
    {
      int v9 = 0;
      goto LABEL_15;
    }
    unsigned int v12 = 3;
    (*((void (**)(void **, unsigned int *))*a2 + 13))(a2, &v12);
    if (v12 >= 7)
    {
      unsigned int v10 = v12;
      unint64_t v11 = sub_2159B6ADC();
      sub_215E07C10((std::string *)v11, v10, 6u);
    }
    int v7 = *a1;
  }
  int v9 = 0;
  if (v4 >= 3 && v7 >= 1)
  {
    (*((void (**)(void **))*a2 + 2))(a2);
    int v9 = 1;
  }
  if (v4 >= 6) {
    a4 = 6;
  }
  else {
    a4 = v4;
  }
  if (a4 < 3)
  {
LABEL_15:
    sub_2159B6FFC((uint64_t)&v13, a2, a3, a4);
    if (!v9) {
      return;
    }
    goto LABEL_16;
  }
  sub_2159B71F0(a2, a3, a4);
  if (!v9) {
    return;
  }
LABEL_16:
  (*((void (**)(void **))*a2 + 3))(a2);
}

long long *sub_2159B6ADC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888DE0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888DE0))
  {
    return &xmmword_267888DC8;
  }
  uint64_t v1 = sub_2159B6BC4();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267888DC8, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267888DD8 = v1->__r_.__value_.__r.__words[2];
    xmmword_267888DC8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888DC8, &dword_21572C000);
  __cxa_guard_release(&qword_267888DE0);
  return &xmmword_267888DC8;
}

void sub_2159B6BAC(_Unwind_Exception *a1)
{
}

std::string *sub_2159B6BC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888E00, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888E00))
  {
    return &stru_267888DE8;
  }
  sub_2159B6DEC((uint64_t)__p);
  sub_2159B6CC0(__p, &stru_267888DE8);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888DE8, &dword_21572C000);
  __cxa_guard_release(&qword_267888E00);
  return &stru_267888DE8;
}

void sub_2159B6C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267888E00);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267888E00);
  _Unwind_Resume(a1);
}

void sub_2159B6CC0(void *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unsigned int v4 = sub_21598F82C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v5;
  }
  sub_21573A150(&__p, (uint64_t)__dst, 1uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, a2, v6, v7);
  BOOL v8 = (void **)__p;
  if (__p)
  {
    int v9 = v12;
    unsigned int v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unsigned int v10 = __p;
    }
    unsigned int v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_2159B6DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2159B6DEC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888E20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888E20))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::DataInfoSample<6>]", qword_267888E08);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888E08, &dword_21572C000);
    __cxa_guard_release(&qword_267888E20);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888E40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888E40))
  {
    size_t v3 = sub_215747D98(qword_267888E08, "<", 0);
    sub_215747C90(qword_267888E08, 0, v3, qword_267888E28);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888E28, &dword_21572C000);
    __cxa_guard_release(&qword_267888E40);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888E60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888E60))
  {
    sub_215E19DF4((uint64_t)qword_267888E28, (uint64_t)&xmmword_267888E48);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888E48, &dword_21572C000);
    __cxa_guard_release(&qword_267888E60);
  }
  if (byte_267888E5F < 0)
  {
    long long v2 = xmmword_267888E48;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267888E48;
    *(void *)(a1 + 16) = unk_267888E58;
  }
}

void sub_2159B6FB4(_Unwind_Exception *a1)
{
}

void sub_2159B6FCC(_Unwind_Exception *a1)
{
}

void sub_2159B6FE4(_Unwind_Exception *a1)
{
}

void sub_2159B6FFC(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  *(void *)&long long v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  char v27 = 0;
  sub_2159B8198(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  char v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_215738B0C(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      long long v9 = v25;
      uint64_t v10 = v26;
    }
    char v11 = 1;
  }
  char v12 = 0;
  char v13 = 0;
  LOBYTE(v14) = 0;
  char v16 = 0;
  LOBYTE(v17) = 0;
  char v19 = 0;
  LOBYTE(__p) = 0;
  char v22 = 0;
  sub_2159ADAB8(a3, (uint64_t)v8);
  if (v22)
  {
    long long v5 = (void **)__p;
    if (__p)
    {
      int64x2_t v6 = v21;
      int8x16_t v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        int8x16_t v7 = __p;
      }
      uint64_t v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0) {
    operator delete(v17);
  }
  if (v16 && v15 < 0) {
    operator delete(v14);
  }
  if (v11 && SHIBYTE(v10) < 0) {
    operator delete((void *)v9);
  }
  if (v27)
  {
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
  }
}

void sub_2159B71AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a18 && a17 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0) {
      operator delete(*(void **)(v18 - 72));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159B71F0(void **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = a2 + 8;
  int8x16_t v7 = (void (**)(void **, void **))*a1;
  v27[0] = a1[1];
  LODWORD(__p) = 2;
  v7[13](a1, &__p);
  if (SLODWORD(v27[0]) < 1)
  {
    if (__p < 2)
    {
      std::string __p = 0;
      LOBYTE(v33) = 0;
      (*((void (**)(void **, void **))*a1 + 9))(a1, &__p);
      v29[0] = &v33;
      sub_2159B7CE0(a1, (unsigned char **)v29);
      char v8 = v33;
      *(void *)(a2 + 8) = __p;
      *(unsigned char *)(a2 + 16) = v8;
    }
    else
    {
      (*((void (**)(void **, uint64_t))*a1 + 9))(a1, v6);
      std::string __p = (void *)(a2 + 16);
      sub_2159B7CE0(a1, (unsigned char **)&__p);
    }
  }
  else
  {
    sub_2159B7ABC((int *)v27, a1, v6, __p);
  }
  long long v9 = (void **)(a2 + 24);
  LOBYTE(__p) = 0;
  (*((void (**)(void **, void **))*a1 + 10))(a1, &__p);
  if ((_BYTE)__p)
  {
    if (!*(unsigned char *)(a2 + 48))
    {
      *long long v9 = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(unsigned char *)(a2 + 48) = 1;
    }
    (*((void (**)(void **, uint64_t))*a1 + 18))(a1, a2 + 24);
  }
  else if (*(unsigned char *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*v9);
    }
    *(unsigned char *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    sub_2159B7E84(a1, a2 + 56);
    if (a3 == 5)
    {
      uint64_t v10 = (void **)(a2 + 80);
      LOBYTE(__p) = 0;
      (*((void (**)(void **, void **))*a1 + 10))(a1, &__p);
      if ((_BYTE)__p)
      {
        if (!*(unsigned char *)(a2 + 104))
        {
          *uint64_t v10 = 0;
          *(void *)(a2 + 88) = 0;
          *(void *)(a2 + 96) = 0;
          *(unsigned char *)(a2 + 104) = 1;
        }
        (*((void (**)(void **, uint64_t))*a1 + 18))(a1, a2 + 80);
      }
      else if (*(unsigned char *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0) {
          operator delete(*v10);
        }
        *(unsigned char *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      char v11 = (void **)(a2 + 80);
      if ((*((unsigned char *)a1 + 12) & 4) != 0)
      {
        LOBYTE(__p) = 0;
        (*((void (**)(void **, void **))*a1 + 10))(a1, &__p);
        if ((_BYTE)__p)
        {
          if (!*(unsigned char *)(a2 + 104))
          {
            *char v11 = 0;
            *(void *)(a2 + 88) = 0;
            *(void *)(a2 + 96) = 0;
            *(unsigned char *)(a2 + 104) = 1;
          }
          (*((void (**)(void **, uint64_t))*a1 + 18))(a1, a2 + 80);
        }
        else
        {
          if (*(unsigned char *)(a2 + 104))
          {
            if (*(char *)(a2 + 103) < 0) {
              operator delete(*v11);
            }
            *(unsigned char *)(a2 + 104) = 0;
          }
          (*((void (**)(void **, void **))*a1 + 35))(a1, v29);
        }
        char v13 = (void **)(a2 + 112);
        LOBYTE(__p) = 0;
        (*((void (**)(void **, void **))*a1 + 10))(a1, &__p);
        if ((_BYTE)__p)
        {
          if (!*(unsigned char *)(a2 + 136))
          {
            char *v13 = 0;
            *(void *)(a2 + 120) = 0;
            *(void *)(a2 + 128) = 0;
            *(unsigned char *)(a2 + 136) = 1;
          }
          (*((void (**)(void **, uint64_t))*a1 + 18))(a1, a2 + 112);
        }
        else
        {
          if (*(unsigned char *)(a2 + 136))
          {
            if (*(char *)(a2 + 135) < 0) {
              operator delete(*v13);
            }
            *(unsigned char *)(a2 + 136) = 0;
          }
          (*((void (**)(void **, void **))*a1 + 35))(a1, v29);
        }
        LOBYTE(__p) = 0;
        char v35 = 0;
        LOBYTE(v29[0]) = 0;
        (*((void (**)(void **, void **))*a1 + 10))(a1, v29);
        if (LOBYTE(v29[0]))
        {
          if (!v35)
          {
            std::string __p = 0;
            uint64_t v33 = 0;
            uint64_t v34 = 0;
            char v35 = 1;
          }
          (*((void (**)(void **, void **))*a1 + 18))(a1, &__p);
        }
        else
        {
          if (v35)
          {
            if (SHIBYTE(v34) < 0) {
              operator delete(__p);
            }
            char v35 = 0;
          }
          (*((void (**)(void **, void **))*a1 + 35))(a1, v27);
        }
        if (v35)
        {
          sub_2159ACBA8(&__p, (uint64_t)v27);
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v27;
          uint64_t v30 = v28;
          v27[1] = 0;
          uint64_t v28 = 0;
          v27[0] = 0;
          char v31 = 1;
          sub_2159AD978(a2 + 144, (uint64_t)v29);
          if (v31)
          {
            uint64_t v18 = (void **)v29[0];
            if (v29[0])
            {
              char v19 = (void **)v29[1];
              uint64_t v20 = v29[0];
              if (v29[1] != v29[0])
              {
                do
                {
                  if (*((char *)v19 - 1) < 0) {
                    operator delete(*(v19 - 3));
                  }
                  v19 -= 3;
                }
                while (v19 != v18);
                uint64_t v20 = v29[0];
              }
              v29[1] = v18;
              operator delete(v20);
            }
          }
          long long v24 = (void **)v27[0];
          if (v27[0])
          {
            long long v25 = (void **)v27[1];
            uint64_t v26 = v27[0];
            if (v27[1] != v27[0])
            {
              do
              {
                if (*((char *)v25 - 1) < 0) {
                  operator delete(*(v25 - 3));
                }
                v25 -= 3;
              }
              while (v25 != v24);
              uint64_t v26 = v27[0];
            }
            v27[1] = v24;
            operator delete(v26);
          }
        }
        else if (*(unsigned char *)(a2 + 168))
        {
          uint64_t v21 = *(void *)(a2 + 144);
          if (v21)
          {
            uint64_t v22 = *(void *)(a2 + 152);
            unint64_t v23 = *(void **)(a2 + 144);
            if (v22 != v21)
            {
              do
              {
                if (*(char *)(v22 - 1) < 0) {
                  operator delete(*(void **)(v22 - 24));
                }
                v22 -= 24;
              }
              while (v22 != v21);
              unint64_t v23 = *(void **)(a2 + 144);
            }
            *(void *)(a2 + 152) = v21;
            operator delete(v23);
          }
          *(unsigned char *)(a2 + 168) = 0;
        }
        if (v35 && SHIBYTE(v34) < 0) {
          operator delete(__p);
        }
      }
      else
      {
        LOBYTE(__p) = 0;
        (*((void (**)(void **, void **))*a1 + 10))(a1, &__p);
        if ((_BYTE)__p)
        {
          if (!*(unsigned char *)(a2 + 104))
          {
            *char v11 = 0;
            *(void *)(a2 + 88) = 0;
            *(void *)(a2 + 96) = 0;
            *(unsigned char *)(a2 + 104) = 1;
          }
          (*((void (**)(void **, uint64_t))*a1 + 18))(a1, a2 + 80);
        }
        else if (*(unsigned char *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0) {
            operator delete(*v11);
          }
          *(unsigned char *)(a2 + 104) = 0;
        }
        char v12 = (void **)(a2 + 112);
        LOBYTE(__p) = 0;
        (*((void (**)(void **, void **))*a1 + 10))(a1, &__p);
        if ((_BYTE)__p)
        {
          if (!*(unsigned char *)(a2 + 136))
          {
            *char v12 = 0;
            *(void *)(a2 + 120) = 0;
            *(void *)(a2 + 128) = 0;
            *(unsigned char *)(a2 + 136) = 1;
          }
          (*((void (**)(void **, uint64_t))*a1 + 18))(a1, a2 + 112);
        }
        else if (*(unsigned char *)(a2 + 136))
        {
          if (*(char *)(a2 + 135) < 0) {
            operator delete(*v12);
          }
          *(unsigned char *)(a2 + 136) = 0;
        }
        std::string::size_type v14 = (void **)(a2 + 144);
        LOBYTE(__p) = 0;
        (*((void (**)(void **, void **))*a1 + 10))(a1, &__p);
        if ((_BYTE)__p)
        {
          if (!*(unsigned char *)(a2 + 168))
          {
            void *v14 = 0;
            *(void *)(a2 + 152) = 0;
            *(void *)(a2 + 160) = 0;
            *(unsigned char *)(a2 + 168) = 1;
          }
          sub_2159B8040((uint64_t)a1, (char **)(a2 + 144));
        }
        else if (*(unsigned char *)(a2 + 168))
        {
          char v15 = (void **)*v14;
          if (*v14)
          {
            char v16 = *(void ***)(a2 + 152);
            unint64_t v17 = *v14;
            if (v16 != v15)
            {
              do
              {
                if (*((char *)v16 - 1) < 0) {
                  operator delete(*(v16 - 3));
                }
                v16 -= 3;
              }
              while (v16 != v15);
              unint64_t v17 = *v14;
            }
            *(void *)(a2 + 152) = v15;
            operator delete(v17);
          }
          *(unsigned char *)(a2 + 168) = 0;
        }
      }
    }
  }
}

void sub_2159B7A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159B7ABC(int *a1, unsigned char *a2, uint64_t a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    LODWORD(v14) = 2;
    (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, &v14);
    if (v14 >= 3)
    {
      unsigned int v12 = v14;
      char v13 = sub_2159AD310();
      sub_215E07C10((std::string *)v13, v12, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a2 + 72))(a2, a3);
    std::string::size_type v14 = (unsigned char *)(a3 + 8);
    sub_2159B7CE0(a2, &v14);
    return (*(uint64_t (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 < 2)
  {
    std::string::size_type v14 = 0;
    char v15 = 0;
    (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 72))(a2, &v14);
    char v16 = &v15;
    uint64_t result = sub_2159B7CE0(a2, &v16);
    char v11 = v15;
    *(void *)a3 = v14;
    *(unsigned char *)(a3 + 8) = v11;
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(*(void *)a2 + 72))(a2, a3);
    std::string::size_type v14 = (unsigned char *)(a3 + 8);
    return sub_2159B7CE0(a2, &v14);
  }
  return result;
}

uint64_t sub_2159B7CE0(unsigned char *a1, unsigned char **a2)
{
  if ((a1[12] & 2) != 0)
  {
    memset(__p, 0, sizeof(__p));
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, __p);
    operator new();
  }
  LOBYTE(__p[0]) = 0;
  uint64_t result = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a1 + 80))(a1, __p);
  **a2 = __p[0];
  return result;
}

void sub_2159B7E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    sub_215E15464((uint64_t)&a17, v18);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159B7E84(void *a1, uint64_t a2)
{
  char v8 = 0;
  uint64_t result = (*(uint64_t (**)(void *, char *))(*a1 + 80))(a1, &v8);
  if (v8)
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
    }
    uint64_t v5 = *a1;
    uint64_t v9 = a1[1];
    int v6 = v9;
    LODWORD(v10) = 2;
    (*(void (**)(void *, unsigned char **))(v5 + 104))(a1, &v10);
    if (v6 < 1)
    {
      if (v10 < 2)
      {
        unsigned int v10 = 0;
        char v11 = 0;
        (*(void (**)(void *, unsigned char **))(*a1 + 72))(a1, &v10);
        unsigned int v12 = &v11;
        uint64_t result = sub_2159B7CE0(a1, &v12);
        char v7 = v11;
        *(void *)a2 = v10;
        *(unsigned char *)(a2 + 8) = v7;
      }
      else
      {
        (*(void (**)(void *, uint64_t))(*a1 + 72))(a1, a2);
        unsigned int v10 = (unsigned char *)(a2 + 8);
        return sub_2159B7CE0(a1, &v10);
      }
    }
    else
    {
      return sub_2159B7ABC((int *)&v9, a1, a2, v10);
    }
  }
  else if (*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

void sub_2159B8040(uint64_t a1, char **a2)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v12);
  unsigned int v4 = a2[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v12 > v5)
  {
    sub_2159B0964(a2, v12 - v5);
    char v8 = a2;
    int v6 = *a2;
    char v7 = v8[1];
    uint64_t v9 = v7 - v6;
    if (v7 == v6) {
      return;
    }
    goto LABEL_13;
  }
  if (v12 >= v5)
  {
    int v6 = *a2;
    uint64_t v9 = v4 - v6;
    if (v4 == v6) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v10 = (uint64_t)&(*a2)[24 * v12];
  while (v4 != (char *)v10)
  {
    if (*(v4 - 1) < 0) {
      operator delete(*((void **)v4 - 3));
    }
    v4 -= 24;
  }
  a2[1] = (char *)v10;
  int v6 = *a2;
  uint64_t v9 = v10 - (void)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    uint64_t v11 = 24 * (v9 / 24);
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)a1 + 144))(a1, v6);
      v6 += 24;
      v11 -= 24;
    }
    while (v11);
  }
}

void sub_2159B8198(void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = a2 + 8;
  uint64_t v7 = *a1;
  uint64_t v10 = a1[1];
  LODWORD(v11) = 2;
  (*(void (**)(void *, unsigned char **))(v7 + 104))(a1, &v11);
  if ((int)v10 < 1)
  {
    if (v11 < 2)
    {
      uint64_t v11 = 0;
      char v12 = 0;
      (*(void (**)(void *, unsigned char **))(*a1 + 72))(a1, &v11);
      char v13 = &v12;
      sub_2159B7CE0(a1, &v13);
      char v8 = v12;
      *(void *)(a2 + 8) = v11;
      *(unsigned char *)(a2 + 16) = v8;
      if (a3 < 2) {
        return;
      }
    }
    else
    {
      (*(void (**)(void *, uint64_t))(*a1 + 72))(a1, v6);
      uint64_t v11 = (unsigned char *)(a2 + 16);
      sub_2159B7CE0(a1, &v11);
      if (a3 < 2) {
        return;
      }
    }
  }
  else
  {
    sub_2159B7ABC((int *)&v10, a1, v6, v11);
    if (a3 < 2) {
      return;
    }
  }
  uint64_t v9 = (void **)(a2 + 24);
  LOBYTE(v11) = 0;
  (*(void (**)(void *, unsigned char **))(*a1 + 80))(a1, &v11);
  if ((_BYTE)v11)
  {
    if (!*(unsigned char *)(a2 + 48))
    {
      *uint64_t v9 = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(unsigned char *)(a2 + 48) = 1;
    }
    (*(void (**)(void *, uint64_t))(*a1 + 144))(a1, a2 + 24);
  }
  else if (*(unsigned char *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*v9);
    }
    *(unsigned char *)(a2 + 48) = 0;
  }
}

void sub_2159B83B4(int *a1, uint64_t a2, unsigned __int16 *a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v12 = 2;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      unsigned int v10 = v12;
      uint64_t v11 = sub_2159B8518();
      sub_215E07C10((std::string *)v11, v10, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    sub_2159B8E10(a2, a3);
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = a4;
  }
  if (v9 > 1) {
    sub_2159B8E10(a2, a3);
  }
  sub_2159B890C();
}

long long *sub_2159B8518()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888640, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888640))
  {
    return &xmmword_267888628;
  }
  uint64_t v1 = sub_2159B8600();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267888628, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267888638 = v1->__r_.__value_.__r.__words[2];
    xmmword_267888628 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888628, &dword_21572C000);
  __cxa_guard_release(&qword_267888640);
  return &xmmword_267888628;
}

void sub_2159B85E8(_Unwind_Exception *a1)
{
}

std::string *sub_2159B8600()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888660, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888660))
  {
    return &stru_267888648;
  }
  sub_2159B86FC((uint64_t)__p);
  sub_2157E7638(__p, &stru_267888648);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888648, &dword_21572C000);
  __cxa_guard_release(&qword_267888660);
  return &stru_267888648;
}

void sub_2159B86BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267888660);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267888660);
  _Unwind_Resume(a1);
}

void sub_2159B86FC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888680, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888680))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageSample<>]", qword_267888668);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888668, &dword_21572C000);
    __cxa_guard_release(&qword_267888680);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678886A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678886A0))
  {
    size_t v3 = sub_215747D98(qword_267888668, "<", 0);
    sub_215747C90(qword_267888668, 0, v3, qword_267888688);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888688, &dword_21572C000);
    __cxa_guard_release(&qword_2678886A0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678886C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678886C0))
  {
    sub_215E19DF4((uint64_t)qword_267888688, (uint64_t)&xmmword_2678886A8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_2678886A8, &dword_21572C000);
    __cxa_guard_release(&qword_2678886C0);
  }
  if (byte_2678886BF < 0)
  {
    long long v2 = xmmword_2678886A8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2678886A8;
    *(void *)(a1 + 16) = unk_2678886B8;
  }
}

void sub_2159B88C4(_Unwind_Exception *a1)
{
}

void sub_2159B88DC(_Unwind_Exception *a1)
{
}

void sub_2159B88F4(_Unwind_Exception *a1)
{
}

void sub_2159B890C()
{
}

void sub_2159B8D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void sub_2159B8DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void sub_2159B8DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34)
{
  if (a34 != -1) {
    ((void (*)(uint64_t, uint64_t))off_26C674AF0[a34])(v35 - 120, v34);
  }
  sub_2159AFC08((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159B8E10(uint64_t a1, unsigned __int16 *a2)
{
  char v8 = a2;
  sub_2159B9244((unsigned char *)a1, &v8);
  int v4 = *(_DWORD *)(a1 + 8);
  LODWORD(v8) = 2;
  (*(void (**)(uint64_t, _WORD **))(*(void *)a1 + 104))(a1, &v8);
  if (v4 >= 1)
  {
    if (v4 == 2)
    {
      if (v8 >= 2)
      {
        LODWORD(v8) = 2;
        (*(void (**)(uint64_t, _WORD **))(*(void *)a1 + 104))(a1, &v8);
        unsigned int v5 = v8;
        if (v8 >= 3)
        {
          uint64_t v6 = sub_2159B93E8();
          sub_215E07C10((std::string *)v6, v5, 2u);
        }
LABEL_7:
        (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
        char v8 = a2 + 4;
        sub_2159B9924((unsigned char *)a1, (void ***)&v8);
        (*(void (**)(uint64_t, unsigned __int16 *))(*(void *)a1 + 104))(a1, a2 + 8);
        (*(void (**)(uint64_t, unsigned __int16 *))(*(void *)a1 + 104))(a1, a2 + 10);
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        int v7 = *a2;
        if (v7 != 1) {
          goto LABEL_8;
        }
        goto LABEL_10;
      }
    }
    else if (v8 > 1)
    {
      goto LABEL_7;
    }
  }
  sub_2159B97DC((unsigned char *)a1, (char *)a2 + 8, v8);
  int v7 = *a2;
  if (v7 != 1)
  {
LABEL_8:
    sub_215BB14AC(v7);
    sub_2159B9AC0((uint64_t)&v8, a1);
    sub_2159AEB98();
  }
LABEL_10:
  sub_215BAE0AC((uint64_t)(a2 + 4), *((_DWORD *)a2 + 6));
}

void sub_2159B9230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159B147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2159B9244(unsigned char *a1, _WORD **a2)
{
  if ((a1[12] & 2) != 0)
  {
    memset(__p, 0, sizeof(__p));
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, __p);
    operator new();
  }
  LOWORD(__p[0]) = 0;
  uint64_t result = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a1 + 96))(a1, __p);
  **a2 = __p[0];
  return result;
}

void sub_2159B9370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    sub_215E15464((uint64_t)&a17, v18);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

long long *sub_2159B93E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678885A0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678885A0))
  {
    return &xmmword_267888588;
  }
  uint64_t v1 = sub_2159B94D0();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267888588, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267888598 = v1->__r_.__value_.__r.__words[2];
    xmmword_267888588 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888588, &dword_21572C000);
  __cxa_guard_release(&qword_2678885A0);
  return &xmmword_267888588;
}

void sub_2159B94B8(_Unwind_Exception *a1)
{
}

std::string *sub_2159B94D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678885C0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_2678885C0))
  {
    return &stru_2678885A8;
  }
  sub_2159B95CC((uint64_t)__p);
  sub_2157E7638(__p, &stru_2678885A8);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_2678885A8, &dword_21572C000);
  __cxa_guard_release(&qword_2678885C0);
  return &stru_2678885A8;
}

void sub_2159B958C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2678885C0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2678885C0);
  _Unwind_Resume(a1);
}

void sub_2159B95CC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2678885E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2678885E0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageStructureSample<>]", qword_2678885C8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678885C8, &dword_21572C000);
    __cxa_guard_release(&qword_2678885E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888600, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888600))
  {
    size_t v3 = sub_215747D98(qword_2678885C8, "<", 0);
    sub_215747C90(qword_2678885C8, 0, v3, qword_2678885E8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_2678885E8, &dword_21572C000);
    __cxa_guard_release(&qword_267888600);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888620, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888620))
  {
    sub_215E19DF4((uint64_t)qword_2678885E8, (uint64_t)&xmmword_267888608);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888608, &dword_21572C000);
    __cxa_guard_release(&qword_267888620);
  }
  if (byte_26788861F < 0)
  {
    long long v2 = xmmword_267888608;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267888608;
    *(void *)(a1 + 16) = unk_267888618;
  }
}

void sub_2159B9794(_Unwind_Exception *a1)
{
}

void sub_2159B97AC(_Unwind_Exception *a1)
{
}

void sub_2159B97C4(_Unwind_Exception *a1)
{
}

double sub_2159B97DC(unsigned char *a1, char *a2, unsigned int a3)
{
  if (a3 < 2)
  {
    long long v7 = 1uLL;
    char v8 = (void **)&v7;
    sub_2159B9924(a1, &v8);
    (*(void (**)(unsigned char *, char *))(*(void *)a1 + 104))(a1, (char *)&v7 + 8);
    (*(void (**)(unsigned char *, unint64_t))(*(void *)a1 + 104))(a1, (unint64_t)&v7 | 0xC);
    double result = *(double *)&v7;
    *(_OWORD *)a2 = v7;
  }
  else
  {
    *(void *)&long long v7 = a2;
    sub_2159B9924(a1, (void ***)&v7);
    (*(void (**)(unsigned char *, char *))(*(void *)a1 + 104))(a1, a2 + 8);
    unsigned int v5 = *(void (**)(unsigned char *, char *))(*(void *)a1 + 104);
    v5(a1, a2 + 12);
  }
  return result;
}

uint64_t sub_2159B9924(unsigned char *a1, void ***a2)
{
  if ((a1[12] & 2) != 0)
  {
    memset(__p, 0, sizeof(__p));
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, __p);
    operator new();
  }
  __p[0] = 0;
  uint64_t result = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a1 + 120))(a1, __p);
  **a2 = __p[0];
  return result;
}

void sub_2159B9A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    sub_215E15464((uint64_t)&a17, v18);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159B9AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v4 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  unsigned int v5 = (void **)(v4 + 64);
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 24;
  *(void *)(v4 + 104) = MEMORY[0x263F8C2F0] + 24;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = MEMORY[0x263F8C2F0] + 64;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  std::string::size_type __n = 0;
  (*(void (**)(uint64_t, std::string::size_type *))(*(void *)a2 + 120))(a2, &__n);
  memset(&v10, 0, sizeof(v10));
  if (!__n)
  {
    std::string::size_type v6 = 0;
    goto LABEL_8;
  }
  std::string::append(&v10, __n, 0);
  std::string::size_type v6 = __n;
  if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    long long v7 = &v10;
    goto LABEL_9;
  }
  long long v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
  if (!v10.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
    {
      abort();
    }
    long long v7 = 0;
  }
LABEL_9:
  v9[0] = v6;
  v9[1] = v7;
  (*(void (**)(uint64_t, void *))(*(void *)a2 + 272))(a2, v9);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v5);
  }
  *(std::string *)unsigned int v5 = v10;
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  sub_21573B8E0(a1);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_2159B9CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::istream::~istream();
  sub_2159A6ACC(v16);
  _Unwind_Resume(a1);
}

void sub_2159B9D2C()
{
}

void sub_2159B9DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  sub_215821460((void **)va);
  _Unwind_Resume(a1);
}

void sub_2159B9E24(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

void sub_2159B9E48(uint64_t a1, void **a2)
{
  uint64_t v4 = a1 + 16;
  unsigned int v5 = (void (**)(void **, unsigned int *))*a2;
  unsigned int v9 = a2[1];
  unsigned int v10 = 6;
  v5[13](a2, &v10);
  if ((int)v9 < 1)
  {
    if (v10 < 3) {
      sub_2159B6FFC((uint64_t)&v10, a2, v4, v10);
    }
    else {
      sub_2159B71F0(a2, v4, v10);
    }
  }
  else
  {
    sub_2159B6970((int *)&v9, a2, v4, v10);
  }
  std::string::size_type v6 = (unsigned __int16 *)(a1 + 192);
  long long v7 = (void (**)(void **, unsigned int *))*a2;
  unsigned int v9 = a2[1];
  int v8 = (int)v9;
  unsigned int v10 = 2;
  v7[13](a2, &v10);
  if (v8 >= 1) {
    sub_2159B83B4((int *)&v9, (uint64_t)a2, v6, v10);
  }
  if (v10 >= 2) {
    sub_2159B8E10((uint64_t)a2, v6);
  }
  sub_2159B890C();
}

void sub_2159B9F9C(uint64_t a1, uint64_t a2)
{
  sub_215DEC088(a1);
  uint64_t v11 = "version";
  uint64_t v12 = 7;
  v13[0] = 4;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "version";
    *(void *)(a1 + 80) = 7;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEE064(a1, v13);
  sub_2159BA998((uint64_t)&v11, a2);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "vertices";
    *(void *)(a1 + 80) = 8;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC088(a1);
  std::string::size_type v6 = v11;
  for (uint64_t i = v12; v6 != (const char *)i; v6 += 12)
  {
    uint64_t v8 = *(void *)v6;
    LODWORD(v16) = *((_DWORD *)v6 + 2);
    uint64_t v15 = v8;
    v14[0] = (float *)3;
    v14[1] = (float *)&v15;
    sub_215DEF750(a1, v14);
  }
  uint64_t v9 = *(void *)(a1 + 56);
  unsigned int v10 = *(unsigned __int8 **)(v9 - 8);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 56) = v9 - 8;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
  if (*v10 <= 1u)
  {
    *(void *)(a1 + 72) = "colors_type";
    *(void *)(a1 + 80) = 11;
    *(unsigned char *)(a1 + 88) = 1;
  }
  sub_2159BB798();
}

void sub_2159BA8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215CEB204(v9, *(unsigned __int8 *)(v10 - 112));
  sub_2159A0134(&a9);
  _Unwind_Resume(a1);
}

void sub_2159BA8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BA90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BA920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BA934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BA948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BA95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BA970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BA984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159BA998(uint64_t a1, uint64_t a2)
{
  int v4 = sub_2159BAB4C((void *)a1, a2);
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a2 + 32);
  sub_2159BAB4C(v4 + 5, a2 + 40);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  sub_2159BAB4C((void *)(a1 + 80), a2 + 80);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  sub_2159BADC8((void *)(a1 + 120), a2 + 120);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  sub_2159BADC8((void *)(a1 + 160), a2 + 160);
  sub_2159BAF38((void *)(a1 + 192), a2 + 192);
  sub_2159BB1B4((void *)(a1 + 224), a2 + 224);
  sub_2159BB3E8((void *)(a1 + 256), a2 + 256);
  sub_2159BAF38((void *)(a1 + 288), a2 + 288);
  long long v5 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v5;
  sub_2159BB61C((void *)(a1 + 352), a2 + 352);
  return a1;
}

void sub_2159BAA98(_Unwind_Exception *a1)
{
  sub_2159A04E4(v9);
  sub_2159A0574(v8);
  sub_2159A05F8(v7);
  sub_2159A04E4(v6);
  sub_2159A067C(v5);
  sub_2159A067C(v4);
  sub_2159A06FC(v3);
  sub_2159A06FC(v2);
  sub_2159A06FC(v1);
  _Unwind_Resume(a1);
}

void sub_2159BAB0C()
{
}

void sub_2159BAB14()
{
}

void sub_2159BAB1C(_Unwind_Exception *a1)
{
  sub_2159A06FC(v2);
  sub_2159A06FC(v1);
  _Unwind_Resume(a1);
}

void sub_2159BAB38(_Unwind_Exception *a1)
{
  sub_2159A06FC(v1);
  _Unwind_Resume(a1);
}

void *sub_2159BAB4C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 28);
  if (v2 == -1) {
    sub_215742D4C();
  }
  char v13 = &v14;
  unint64_t v5 = ((uint64_t (*)(char **, uint64_t))off_26C674CC8[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  std::string::size_type v6 = *(const void **)a2;
  int64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
      sub_215738AC0();
    }
    int v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    uint64_t v12 = &v11;
    uint64_t v8 = (char *)((uint64_t (*)(int **, void *))off_26C674CD8[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_2159BAC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v17 = *(void *)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    int v18 = -1431655765 * ((unint64_t)(*(void *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    uint64_t v19 = *(unsigned int *)(v14 + 28);
    if (v19 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C674B50[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159BACE0()
{
  return 0;
}

uint64_t sub_2159BACE8()
{
  return 0x100000000;
}

void *sub_2159BACF0(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_2159BAD24(unsigned int **a1)
{
  uint64_t v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x263EF8960], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  return address;
}

void *sub_2159BADC8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 28);
  if (v2 == -1) {
    sub_215742D4C();
  }
  char v13 = &v14;
  unint64_t v5 = ((uint64_t (*)(char **, uint64_t))off_26C674CE8[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  std::string::size_type v6 = *(const void **)a2;
  size_t v7 = *(void *)(a2 + 8) - *(void *)a2;
  if (v7)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    int v11 = v7;
    if (HIDWORD(v5) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    uint64_t v12 = &v11;
    uint64_t v8 = (char *)((uint64_t (*)(int **, void *))off_26C674CF8[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[v7];
  }
  return a1;
}

void sub_2159BAEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v17 = *(void *)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    int v18 = *(_DWORD *)(v14 + 16) - v17;
    a12 = v17;
    a13 = v18;
    uint64_t v19 = *(unsigned int *)(v14 + 28);
    if (v19 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C674B40[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159BAF28()
{
  return 0;
}

uint64_t sub_2159BAF30()
{
  return 0x100000000;
}

void *sub_2159BAF38(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 28);
  if (v2 == -1) {
    sub_215742D4C();
  }
  char v13 = &v14;
  unint64_t v5 = ((uint64_t (*)(char **, uint64_t))off_26C674D08[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  std::string::size_type v6 = *(const void **)a2;
  int64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556) {
      sub_215738AC0();
    }
    int v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    uint64_t v12 = &v11;
    uint64_t v8 = (char *)((uint64_t (*)(int **, void *))off_26C674D18[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_2159BB058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v17 = *(void *)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    int v18 = -1431655765 * ((unint64_t)(*(void *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    uint64_t v19 = *(unsigned int *)(v14 + 28);
    if (v19 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C674B10[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159BB0CC()
{
  return 0;
}

uint64_t sub_2159BB0D4()
{
  return 0x100000000;
}

void *sub_2159BB0DC(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_2159BB110(unsigned int **a1)
{
  uint64_t v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x263EF8960], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  return address;
}

void *sub_2159BB1B4(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 28);
  if (v2 == -1) {
    sub_215742D4C();
  }
  char v13 = &v14;
  unint64_t v5 = ((uint64_t (*)(char **, uint64_t))off_26C674D28[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  std::string::size_type v6 = *(const void **)a2;
  int64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
  if (v7)
  {
    if (v7 < 0) {
      sub_215738AC0();
    }
    int v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    uint64_t v12 = &v11;
    uint64_t v8 = (char *)((uint64_t (*)(int **, void *))off_26C674D38[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_2159BB2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v17 = *(void *)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    unint64_t v18 = (unint64_t)(*(void *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    uint64_t v19 = *(unsigned int *)(v14 + 28);
    if (v19 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C674B30[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159BB320()
{
  return 0;
}

uint64_t sub_2159BB328()
{
  return 0x100000000;
}

void *sub_2159BB330(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_2159BB360(unsigned int **a1)
{
  uint64_t v1 = (**a1 + 511) & 0x1FFFFFE00;
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x263EF8960], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  return address;
}

void *sub_2159BB3E8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 28);
  if (v2 == -1) {
    sub_215742D4C();
  }
  char v13 = &v14;
  unint64_t v5 = ((uint64_t (*)(char **, uint64_t))off_26C674D48[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  std::string::size_type v6 = *(const void **)a2;
  int64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
  if (v7)
  {
    if (v7 < 0) {
      sub_215738AC0();
    }
    int v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    uint64_t v12 = &v11;
    uint64_t v8 = (char *)((uint64_t (*)(int **, void *))off_26C674D58[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_2159BB4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v17 = *(void *)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    unint64_t v18 = (unint64_t)(*(void *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    uint64_t v19 = *(unsigned int *)(v14 + 28);
    if (v19 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C674B20[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159BB554()
{
  return 0;
}

uint64_t sub_2159BB55C()
{
  return 0x100000000;
}

void *sub_2159BB564(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_2159BB594(unsigned int **a1)
{
  uint64_t v1 = (**a1 + 511) & 0x1FFFFFE00;
  vm_address_t address = 0;
  if (vm_allocate(*MEMORY[0x263EF8960], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    int v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  return address;
}

void *sub_2159BB61C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v2 = *(unsigned int *)(a2 + 28);
  if (v2 == -1) {
    sub_215742D4C();
  }
  char v13 = &v14;
  unint64_t v5 = ((uint64_t (*)(char **, uint64_t))off_26C674D68[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  std::string::size_type v6 = *(const void **)a2;
  int64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
  if (v7)
  {
    if (v7 < 0) {
      sub_215738AC0();
    }
    int v11 = (unint64_t)v7 >> 2;
    if (HIDWORD(v5) == 0xFFFFFFFF) {
      sub_215742D4C();
    }
    uint64_t v12 = &v11;
    uint64_t v8 = (char *)((uint64_t (*)(int **, void *))off_26C674D78[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[4 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_2159BB720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v17 = *(void *)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v17;
    unint64_t v18 = (unint64_t)(*(void *)(v14 + 16) - v17) >> 2;
    a12 = v17;
    a13 = v18;
    uint64_t v19 = *(unsigned int *)(v14 + 28);
    if (v19 == -1) {
      sub_215742D4C();
    }
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_26C674B00[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159BB788()
{
  return 0;
}

uint64_t sub_2159BB790()
{
  return 0x100000000;
}

void sub_2159BB798()
{
  int v0 = 0;
  sub_2159BB89C();
}

void sub_2159BB858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159BB874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159BB888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159BB89C()
{
}

void sub_2159BBA88(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_2159BBAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159BBAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v4 + 40))
  {
    v92 = (uint64_t *)(v4 + 16);
    sub_215E05FEC(&v92, 4u);
  }
  else
  {
    sub_215E0626C((uint64_t)&v92, v4 + 8);
  }
  sub_215E0076C(*(void *)(a1 + 24));
  sub_2159BA998((uint64_t)&v92, a2);
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v5 + 40))
  {
    v124 = (uint64_t *)(v5 + 16);
    sub_215E069EC(&v124, 0xAAAAAAAAAAAAAAABLL * (((char *)v93 - (char *)v92) >> 2));
  }
  else
  {
    sub_215E06D00();
  }
  if (v93 != v92)
  {
    std::string::size_type v6 = (unsigned int *)(v92 + 1);
    uint64_t v7 = 12 * (((char *)v93 - (char *)v92) / 12);
    do
    {
      uint64_t v8 = v6 - 2;
      uint64_t v9 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v9 + 40))
      {
        v124 = (uint64_t *)(v9 + 16);
        sub_215E06DFC((uint64_t)&v125, &v124, v8);
        sub_215E06DFC((uint64_t)&v125, &v124, v6 - 1);
        sub_215E06DFC((uint64_t)&v125, &v124, v6);
      }
      else
      {
        unsigned int v10 = *v8;
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v10);
        std::ostream::write();
        unsigned int v11 = *(v6 - 1);
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v11);
        std::ostream::write();
        unsigned int v12 = *v6;
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v12);
        std::ostream::write();
      }
      v6 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v13 + 40))
  {
    v124 = (uint64_t *)(v13 + 16);
    sub_215E05FEC(&v124, v94);
  }
  else
  {
    sub_215E0626C((uint64_t)&v124, v13 + 8);
  }
  uint64_t v14 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v14 + 40))
  {
    v124 = (uint64_t *)(v14 + 16);
    sub_215E069EC(&v124, 0xAAAAAAAAAAAAAAABLL * ((v96 - v95) >> 2));
  }
  else
  {
    sub_215E06D00();
  }
  if (v96 != v95)
  {
    uint64_t v15 = (unsigned int *)(v95 + 8);
    uint64_t v16 = 12 * ((v96 - v95) / 12);
    do
    {
      uint64_t v17 = v15 - 2;
      uint64_t v18 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v18 + 40))
      {
        v124 = (uint64_t *)(v18 + 16);
        sub_215E06DFC((uint64_t)&v125, &v124, v17);
        sub_215E06DFC((uint64_t)&v125, &v124, v15 - 1);
        sub_215E06DFC((uint64_t)&v125, &v124, v15);
      }
      else
      {
        unsigned int v19 = *v17;
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v19);
        std::ostream::write();
        unsigned int v20 = *(v15 - 1);
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v20);
        std::ostream::write();
        unsigned int v21 = *v15;
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v21);
        std::ostream::write();
      }
      v15 += 3;
      v16 -= 12;
    }
    while (v16);
  }
  uint64_t v22 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v22 + 40))
  {
    v124 = (uint64_t *)(v22 + 16);
    sub_215E05FEC(&v124, v97);
  }
  else
  {
    sub_215E0626C((uint64_t)&v124, v22 + 8);
  }
  uint64_t v23 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v23 + 40))
  {
    v124 = (uint64_t *)(v23 + 16);
    sub_215E069EC(&v124, 0xAAAAAAAAAAAAAAABLL * ((v99 - v98) >> 2));
  }
  else
  {
    sub_215E06D00();
  }
  if (v99 != v98)
  {
    long long v24 = (unsigned int *)(v98 + 8);
    uint64_t v25 = 12 * ((v99 - v98) / 12);
    do
    {
      uint64_t v26 = v24 - 2;
      uint64_t v27 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v27 + 40))
      {
        v124 = (uint64_t *)(v27 + 16);
        sub_215E06DFC((uint64_t)&v125, &v124, v26);
        sub_215E06DFC((uint64_t)&v125, &v124, v24 - 1);
        sub_215E06DFC((uint64_t)&v125, &v124, v24);
      }
      else
      {
        unsigned int v28 = *v26;
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v28);
        std::ostream::write();
        unsigned int v29 = *(v24 - 1);
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v29);
        std::ostream::write();
        unsigned int v30 = *v24;
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v30);
        std::ostream::write();
      }
      v24 += 3;
      v25 -= 12;
    }
    while (v25);
  }
  uint64_t v31 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v31 + 40))
  {
    v124 = (uint64_t *)(v31 + 16);
    sub_215E05FEC(&v124, v100);
  }
  else
  {
    sub_215E0626C((uint64_t)&v124, v31 + 8);
  }
  uint64_t v32 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v32 + 40))
  {
    v124 = (uint64_t *)(v32 + 16);
    sub_215E069EC(&v124, v102 - v101);
  }
  else
  {
    sub_215E06D00();
  }
  uint64_t v33 = v101;
  int64_t v34 = v102 - v101;
  uint64_t v35 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v35 + 40))
  {
    v124 = (uint64_t *)(v35 + 16);
    if (v102 != v101)
    {
      do
      {
        sub_215E053CC(&v124, *v33++);
        --v34;
      }
      while (v34);
    }
  }
  else if (v102 != v101)
  {
    do
    {
      int v36 = *v33;
      if (v36 < 0)
      {
        LOBYTE(v124) = -52;
        BYTE1(v124) = v36;
      }
      else
      {
        LOBYTE(v124) = *v33;
      }
      std::ostream::write();
      ++v33;
      --v34;
    }
    while (v34);
  }
  uint64_t v37 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v37 + 40))
  {
    v124 = (uint64_t *)(v37 + 16);
    sub_215E05FEC(&v124, v103);
  }
  else
  {
    sub_215E0626C((uint64_t)&v124, v37 + 8);
  }
  uint64_t v38 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v38 + 40))
  {
    v124 = (uint64_t *)(v38 + 16);
    sub_215E069EC(&v124, v105 - v104);
  }
  else
  {
    sub_215E06D00();
  }
  uint64_t v39 = v104;
  int64_t v40 = v105 - v104;
  uint64_t v41 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v41 + 40))
  {
    v124 = (uint64_t *)(v41 + 16);
    if (v105 != v104)
    {
      do
      {
        sub_215E053CC(&v124, *v39++);
        --v40;
      }
      while (v40);
    }
  }
  else if (v105 != v104)
  {
    do
    {
      int v42 = *v39;
      if (v42 < 0)
      {
        LOBYTE(v124) = -52;
        BYTE1(v124) = v42;
      }
      else
      {
        LOBYTE(v124) = *v39;
      }
      std::ostream::write();
      ++v39;
      --v40;
    }
    while (v40);
  }
  uint64_t v43 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v43 + 40))
  {
    v124 = (uint64_t *)(v43 + 16);
    sub_215E069EC(&v124, 0xAAAAAAAAAAAAAAABLL * ((v107 - v106) >> 2));
  }
  else
  {
    sub_215E06D00();
  }
  if (v107 != v106)
  {
    char v44 = (unsigned int *)(v106 + 8);
    uint64_t v45 = 12 * ((v107 - v106) / 12);
    do
    {
      uint64_t v46 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v46 + 40))
      {
        v124 = (uint64_t *)(v46 + 16);
        sub_215E05FEC(&v124, *(v44 - 2));
        sub_215E05FEC(&v124, *(v44 - 1));
        sub_215E05FEC(&v124, *v44);
      }
      else
      {
        unsigned int v47 = *(v44 - 2);
        if (v47 > 0xFF)
        {
          if (HIWORD(v47))
          {
            LOBYTE(v124) = -50;
            *(_DWORD *)((char *)&v124 + 1) = bswap32(v47);
          }
          else
          {
            LOBYTE(v124) = -51;
            *(_WORD *)((char *)&v124 + 1) = bswap32(v47) >> 16;
          }
        }
        else if (v47 > 0x7F)
        {
          LOBYTE(v124) = -52;
          BYTE1(v124) = v47;
        }
        else
        {
          LOBYTE(v124) = *(v44 - 2);
        }
        std::ostream::write();
        unsigned int v48 = *(v44 - 1);
        if (v48 >= 0x100)
        {
          if (v48 >= 0x10000)
          {
            LOBYTE(v124) = -50;
            *(_DWORD *)((char *)&v124 + 1) = bswap32(v48);
          }
          else
          {
            LOBYTE(v124) = -51;
            *(_WORD *)((char *)&v124 + 1) = bswap32(v48) >> 16;
          }
        }
        else if (v48 >= 0x80)
        {
          LOBYTE(v124) = -52;
          BYTE1(v124) = v48;
        }
        else
        {
          LOBYTE(v124) = *(v44 - 1);
        }
        std::ostream::write();
        unsigned int v49 = *v44;
        if (*v44 >= 0x100)
        {
          if (v49 >= 0x10000)
          {
            LOBYTE(v124) = -50;
            *(_DWORD *)((char *)&v124 + 1) = bswap32(v49);
          }
          else
          {
            LOBYTE(v124) = -51;
            *(_WORD *)((char *)&v124 + 1) = bswap32(v49) >> 16;
          }
        }
        else if (v49 < 0x80)
        {
          LOBYTE(v124) = *v44;
        }
        else
        {
          LOBYTE(v124) = -52;
          BYTE1(v124) = v49;
        }
        std::ostream::write();
      }
      v44 += 3;
      v45 -= 12;
    }
    while (v45);
  }
  uint64_t v50 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v50 + 40))
  {
    v124 = (uint64_t *)(v50 + 16);
    sub_215E069EC(&v124, (v109 - v108) >> 3);
  }
  else
  {
    sub_215E06D00();
  }
  if (v109 != v108)
  {
    unsigned int v51 = (unsigned int *)(v108 + 4);
    uint64_t v52 = 8 * ((v109 - v108) >> 3);
    do
    {
      uint64_t v53 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v53 + 40))
      {
        v124 = (uint64_t *)(v53 + 16);
        sub_215E05FEC(&v124, *(v51 - 1));
        sub_215E05FEC(&v124, *v51);
      }
      else
      {
        unsigned int v54 = *(v51 - 1);
        if (v54 > 0xFF)
        {
          if (HIWORD(v54))
          {
            LOBYTE(v124) = -50;
            *(_DWORD *)((char *)&v124 + 1) = bswap32(v54);
          }
          else
          {
            LOBYTE(v124) = -51;
            *(_WORD *)((char *)&v124 + 1) = bswap32(v54) >> 16;
          }
        }
        else if (v54 > 0x7F)
        {
          LOBYTE(v124) = -52;
          BYTE1(v124) = v54;
        }
        else
        {
          LOBYTE(v124) = *(v51 - 1);
        }
        std::ostream::write();
        unsigned int v55 = *v51;
        if (*v51 >= 0x100)
        {
          if (v55 >= 0x10000)
          {
            LOBYTE(v124) = -50;
            *(_DWORD *)((char *)&v124 + 1) = bswap32(v55);
          }
          else
          {
            LOBYTE(v124) = -51;
            *(_WORD *)((char *)&v124 + 1) = bswap32(v55) >> 16;
          }
        }
        else if (v55 < 0x80)
        {
          LOBYTE(v124) = *v51;
        }
        else
        {
          LOBYTE(v124) = -52;
          BYTE1(v124) = v55;
        }
        std::ostream::write();
      }
      v51 += 2;
      v52 -= 8;
    }
    while (v52);
  }
  uint64_t v56 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v56 + 40))
  {
    v124 = (uint64_t *)(v56 + 16);
    sub_215E069EC(&v124, (v111 - v110) >> 3);
  }
  else
  {
    sub_215E06D00();
  }
  if (v111 != v110)
  {
    uint64_t v57 = (unsigned int *)(v110 + 4);
    uint64_t v58 = 8 * ((v111 - v110) >> 3);
    do
    {
      uint64_t v59 = v57 - 1;
      uint64_t v60 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v60 + 40))
      {
        v124 = (uint64_t *)(v60 + 16);
        sub_215E06DFC((uint64_t)&v125, &v124, v59);
        sub_215E06DFC((uint64_t)&v125, &v124, v57);
      }
      else
      {
        unsigned int v61 = *v59;
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v61);
        std::ostream::write();
        unsigned int v62 = *v57;
        LOBYTE(v124) = -54;
        *(_DWORD *)((char *)&v124 + 1) = bswap32(v62);
        std::ostream::write();
      }
      v57 += 2;
      v58 -= 8;
    }
    while (v58);
  }
  uint64_t v63 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v63 + 40))
  {
    v124 = (uint64_t *)(v63 + 16);
    sub_215E069EC(&v124, 0xAAAAAAAAAAAAAAABLL * ((v113 - v112) >> 2));
  }
  else
  {
    sub_215E06D00();
  }
  if (v113 != v112)
  {
    v64 = (unsigned int *)(v112 + 8);
    uint64_t v65 = 12 * ((v113 - v112) / 12);
    do
    {
      uint64_t v66 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v66 + 40))
      {
        v124 = (uint64_t *)(v66 + 16);
        sub_215E05FEC(&v124, *(v64 - 2));
        sub_215E05FEC(&v124, *(v64 - 1));
        sub_215E05FEC(&v124, *v64);
      }
      else
      {
        unsigned int v67 = *(v64 - 2);
        if (v67 > 0xFF)
        {
          if (HIWORD(v67))
          {
            LOBYTE(v124) = -50;
            *(_DWORD *)((char *)&v124 + 1) = bswap32(v67);
          }
          else
          {
            LOBYTE(v124) = -51;
            *(_WORD *)((char *)&v124 + 1) = bswap32(v67) >> 16;
          }
        }
        else if (v67 > 0x7F)
        {
          LOBYTE(v124) = -52;
          BYTE1(v124) = v67;
        }
        else
        {
          LOBYTE(v124) = *(v64 - 2);
        }
        std::ostream::write();
        unsigned int v68 = *(v64 - 1);
        if (v68 >= 0x100)
        {
          if (v68 >= 0x10000)
          {
            LOBYTE(v124) = -50;
            *(_DWORD *)((char *)&v124 + 1) = bswap32(v68);
          }
          else
          {
            LOBYTE(v124) = -51;
            *(_WORD *)((char *)&v124 + 1) = bswap32(v68) >> 16;
          }
        }
        else if (v68 >= 0x80)
        {
          LOBYTE(v124) = -52;
          BYTE1(v124) = v68;
        }
        else
        {
          LOBYTE(v124) = *(v64 - 1);
        }
        std::ostream::write();
        unsigned int v69 = *v64;
        if (*v64 >= 0x100)
        {
          if (v69 >= 0x10000)
          {
            LOBYTE(v124) = -50;
            *(_DWORD *)((char *)&v124 + 1) = bswap32(v69);
          }
          else
          {
            LOBYTE(v124) = -51;
            *(_WORD *)((char *)&v124 + 1) = bswap32(v69) >> 16;
          }
        }
        else if (v69 < 0x80)
        {
          LOBYTE(v124) = *v64;
        }
        else
        {
          LOBYTE(v124) = -52;
          BYTE1(v124) = v69;
        }
        std::ostream::write();
      }
      v64 += 3;
      v65 -= 12;
    }
    while (v65);
  }
  uint64_t v70 = *(void *)(a1 + 24);
  if (v120)
  {
    if (*(unsigned char *)(v70 + 40))
    {
      v124 = (uint64_t *)(v70 + 16);
      sub_215E053CC(&v124, 1);
    }
    else
    {
      LOBYTE(v124) = 1;
      std::ostream::write();
    }
    uint64_t v71 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v71 + 40))
    {
      v124 = (uint64_t *)(v71 + 16);
      sub_215E05FEC(&v124, 2u);
    }
    else
    {
      LOBYTE(v124) = 2;
      std::ostream::write();
    }
    sub_215E0076C(*(void *)(a1 + 24));
    uint64_t v72 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v72 + 40))
    {
      v124 = (uint64_t *)(v72 + 16);
      sub_215E06DFC((uint64_t)&v125, &v124, &v114);
      sub_215E06DFC((uint64_t)&v125, &v124, &v115);
      sub_215E06DFC((uint64_t)&v125, &v124, &v116);
    }
    else
    {
      LOBYTE(v124) = -54;
      *(_DWORD *)((char *)&v124 + 1) = bswap32(v114);
      std::ostream::write();
      LOBYTE(v124) = -54;
      *(_DWORD *)((char *)&v124 + 1) = bswap32(v115);
      std::ostream::write();
      LOBYTE(v124) = -54;
      *(_DWORD *)((char *)&v124 + 1) = bswap32(v116);
      std::ostream::write();
    }
    uint64_t v73 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v73 + 40))
    {
      v124 = (uint64_t *)(v73 + 16);
      sub_215E06DFC((uint64_t)&v125, &v124, &v117);
      sub_215E06DFC((uint64_t)&v125, &v124, &v118);
      sub_215E06DFC((uint64_t)&v125, &v124, &v119);
    }
    else
    {
      LOBYTE(v124) = -54;
      *(_DWORD *)((char *)&v124 + 1) = bswap32(v117);
      std::ostream::write();
      LOBYTE(v124) = -54;
      *(_DWORD *)((char *)&v124 + 1) = bswap32(v118);
      std::ostream::write();
      LOBYTE(v124) = -54;
      *(_DWORD *)((char *)&v124 + 1) = bswap32(v119);
      std::ostream::write();
    }
    uint64_t v74 = *(void *)(a1 + 24);
    uint64_t v75 = *(void *)(*(void *)(v74 + 88) - 8);
    sub_215E001AC((uint64_t *)(v74 + 48), *(void *)(v74 + 16) - v75 - 9);
    size_t v76 = *(void *)(v74 + 48);
    if (v76) {
      memmove((void *)(*(void *)(v74 + 24) + v75), *(const void **)(v74 + 56), v76);
    }
    *(void *)(v74 + 48) = 0;
    uint64_t v77 = *(void *)(v74 + 80);
    uint64_t v78 = *(void *)(v74 + 88) - 8;
    *(void *)(v74 + 88) = v78;
    if (v77 == v78)
    {
      std::ostream::write();
      if (*(unsigned char *)(v74 + 40))
      {
        free(*(void **)(v74 + 24));
        *(unsigned char *)(v74 + 40) = 0;
      }
    }
  }
  else if (*(unsigned char *)(v70 + 40))
  {
    v124 = (uint64_t *)(v70 + 16);
    sub_215E053CC(&v124, 0);
  }
  else
  {
    LOBYTE(v124) = 0;
    std::ostream::write();
  }
  uint64_t v79 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v79 + 40))
  {
    v124 = (uint64_t *)(v79 + 16);
    sub_215E05FEC(&v124, v121);
  }
  else
  {
    sub_215E0626C((uint64_t)&v124, v79 + 8);
  }
  uint64_t v80 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v80 + 40))
  {
    v124 = (uint64_t *)(v80 + 16);
    sub_215E069EC(&v124, v123 - v122);
  }
  else
  {
    sub_215E06D00();
  }
  v81 = v122;
  uint64_t v82 = v123 - v122;
  uint64_t v83 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v83 + 40))
  {
    v124 = (uint64_t *)(v83 + 16);
    if (v123 != v122)
    {
      uint64_t v84 = 4 * v82;
      do
      {
        sub_215E06DFC((uint64_t)&v125, &v124, v81++);
        v84 -= 4;
      }
      while (v84);
    }
  }
  else if (v123 != v122)
  {
    uint64_t v85 = 4 * v82;
    do
    {
      unsigned int v86 = *v81;
      LOBYTE(v124) = -54;
      *(_DWORD *)((char *)&v124 + 1) = bswap32(v86);
      std::ostream::write();
      ++v81;
      v85 -= 4;
    }
    while (v85);
  }
  sub_2159A0134((uint64_t *)&v92);
  uint64_t v87 = *(void *)(a1 + 24);
  uint64_t v88 = *(void *)(*(void *)(v87 + 88) - 8);
  sub_215E001AC((uint64_t *)(v87 + 48), *(void *)(v87 + 16) - v88 - 9);
  size_t v89 = *(void *)(v87 + 48);
  if (v89) {
    memmove((void *)(*(void *)(v87 + 24) + v88), *(const void **)(v87 + 56), v89);
  }
  *(void *)(v87 + 48) = 0;
  uint64_t v90 = *(void *)(v87 + 80);
  uint64_t v91 = *(void *)(v87 + 88) - 8;
  *(void *)(v87 + 88) = v91;
  if (v90 == v91)
  {
    std::ostream::write();
    if (*(unsigned char *)(v87 + 40))
    {
      free(*(void **)(v87 + 24));
      *(unsigned char *)(v87 + 40) = 0;
    }
  }
}

void sub_2159BCCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BCE14(uint64_t a1, uint64_t a2)
{
  sub_215DEB804(a1);
  unsigned int v11 = "version";
  uint64_t v12 = 7;
  v13[0] = 4;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "version";
    *(void *)(a1 + 80) = 7;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC344(a1, v13);
  sub_2159BA998((uint64_t)&v11, a2);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "vertices";
    *(void *)(a1 + 80) = 8;
    if (!v5) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEB804(a1);
  std::string::size_type v6 = v11;
  for (uint64_t i = v12; v6 != (const char *)i; v6 += 12)
  {
    uint64_t v8 = *(void *)v6;
    LODWORD(v16) = *((_DWORD *)v6 + 2);
    uint64_t v15 = v8;
    v14[0] = (float *)3;
    v14[1] = (float *)&v15;
    sub_215DED67C(a1, v14);
  }
  uint64_t v9 = *(void *)(a1 + 56);
  unsigned int v10 = *(unsigned __int8 **)(v9 - 8);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 56) = v9 - 8;
  if (*(unsigned char *)(a1 + 88)) {
    *(unsigned char *)(a1 + 88) = 0;
  }
  if (*v10 <= 1u)
  {
    *(void *)(a1 + 72) = "colors_type";
    *(void *)(a1 + 80) = 11;
    *(unsigned char *)(a1 + 88) = 1;
  }
  sub_2159BD810();
}

void sub_2159BD750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215CE9D14(v9, *(unsigned __int8 *)(v10 - 112));
  sub_2159A0134(&a9);
  _Unwind_Resume(a1);
}

void sub_2159BD770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BD784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BD798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BD7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BD7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BD7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BD7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BD7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BD810()
{
  int v0 = 0;
  sub_2159BB89C();
}

void sub_2159BD8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159BD8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159BD900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159BD914(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  if (*(void *)(a1 + 40))
  {
    std::string::size_type v6 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v6, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v7 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (v9 != *a2)
  {
    do
    {
      if (v7)
      {
        uint64_t v10 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v10, (uint64_t)&v108, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v11 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v11 + 1;
      if (v11 != -1)
      {
        uint64_t v12 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v12, (uint64_t)&v108, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v13 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v13 + 1;
      if (v13 != -1)
      {
        uint64_t v14 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v14, (uint64_t)&v108, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v7 = *(void *)(a1 + 40) + 1;
      *(void *)(a1 + 40) = v7;
      v8 += 12;
    }
    while (v8 != v9);
  }
  if (v7)
  {
    uint64_t v15 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v15, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v16 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v16 + 1;
  if (v16 != -1)
  {
    uint64_t v17 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v17, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v18 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v18;
  uint64_t v19 = a2[5];
  for (uint64_t i = a2[6]; v19 != i; v19 += 12)
  {
    if (v18)
    {
      unsigned int v21 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v21, (uint64_t)&v108, 1);
    }
    *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    uint64_t v22 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v22 + 1;
    if (v22 != -1)
    {
      uint64_t v23 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v23, (uint64_t)&v108, 1);
    }
    *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    uint64_t v24 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v24 + 1;
    if (v24 != -1)
    {
      uint64_t v25 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v25, (uint64_t)&v108, 1);
    }
    *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    uint64_t v18 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 40) = v18;
  }
  if (v18)
  {
    uint64_t v26 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v26, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v27 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v27 + 1;
  if (v27 != -1)
  {
    unsigned int v28 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v28, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v29 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v29;
  uint64_t v30 = a2[10];
  for (uint64_t j = a2[11]; v30 != j; v30 += 12)
  {
    if (v29)
    {
      uint64_t v32 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v32, (uint64_t)&v108, 1);
    }
    *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    uint64_t v33 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v33 + 1;
    if (v33 != -1)
    {
      int64_t v34 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v34, (uint64_t)&v108, 1);
    }
    *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    uint64_t v35 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v35 + 1;
    if (v35 != -1)
    {
      int v36 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v36, (uint64_t)&v108, 1);
    }
    *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    uint64_t v29 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 40) = v29;
  }
  if (v29)
  {
    uint64_t v37 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v37, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v38 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v38 + 1;
  if (v38 != -1)
  {
    uint64_t v39 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v39, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v40 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v40;
  int v42 = (unsigned __int8 *)a2[15];
  uint64_t v41 = (unsigned __int8 *)a2[16];
  int64_t v43 = v41 - v42;
  if (v41 != v42)
  {
    do
    {
      sub_215DF927C(a1, v42++);
      --v43;
    }
    while (v43);
    uint64_t v40 = *(void *)(a1 + 40);
  }
  if (v40)
  {
    char v44 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v44, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v45 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v45 + 1;
  if (v45 != -1)
  {
    uint64_t v46 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v46, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v47 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v47;
  unsigned int v49 = (unsigned __int8 *)a2[20];
  unsigned int v48 = (unsigned __int8 *)a2[21];
  int64_t v50 = v48 - v49;
  if (v48 != v49)
  {
    do
    {
      sub_215DF927C(a1, v49++);
      --v50;
    }
    while (v50);
    uint64_t v47 = *(void *)(a1 + 40);
  }
  if (v47)
  {
    unsigned int v51 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v51, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v52 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v52;
  uint64_t v53 = a2[24];
  for (uint64_t k = a2[25]; v53 != k; v53 += 12)
  {
    if (v52)
    {
      uint64_t v63 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v63, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v64 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v64 + 1;
    if (v64 != -1)
    {
      uint64_t v65 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v65, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v66 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v66 + 1;
    if (v66 != -1)
    {
      unsigned int v67 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v67, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v52 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 40) = v52;
  }
  if (v52)
  {
    unsigned int v55 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v55, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v56 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v56;
  uint64_t v57 = a2[28];
  for (uint64_t m = a2[29]; v57 != m; v57 += 8)
  {
    if (v56)
    {
      unsigned int v68 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v68, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v69 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v69 + 1;
    if (v69 != -1)
    {
      uint64_t v70 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v70, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v56 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 40) = v56;
  }
  if (v56)
  {
    uint64_t v59 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v59, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v60 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v60;
  uint64_t v61 = a2[32];
  for (uint64_t n = a2[33]; v61 != n; v61 += 8)
  {
    if (v60)
    {
      uint64_t v71 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v71, (uint64_t)&v108, 1);
    }
    *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    uint64_t v72 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v72 + 1;
    if (v72 != -1)
    {
      uint64_t v73 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v73, (uint64_t)&v108, 1);
    }
    *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
    std::ostream::operator<<();
    uint64_t v60 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 40) = v60;
  }
  if (v60)
  {
    uint64_t v74 = *(void **)(a1 + 24);
    unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v74, (uint64_t)&v108, 1);
  }
  std::ostream::operator<<();
  uint64_t v75 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 40) = v75;
  uint64_t v76 = a2[36];
  for (iuint64_t i = a2[37]; v76 != ii; v76 += 12)
  {
    if (v75)
    {
      uint64_t v95 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v95, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v96 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v96 + 1;
    if (v96 != -1)
    {
      unsigned int v97 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v97, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v98 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v98 + 1;
    if (v98 != -1)
    {
      uint64_t v99 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v99, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v75 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 40) = v75;
  }
  if (a3 >= 2)
  {
    if (*((unsigned char *)a2 + 344))
    {
      unsigned __int8 v108 = 1;
      sub_215DF927C(a1, &v108);
      if (*(void *)(a1 + 40))
      {
        uint64_t v78 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v78, (uint64_t)&v108, 1);
      }
      std::ostream::operator<<();
      uint64_t v79 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v79 + 1;
      if (v79 != -1)
      {
        uint64_t v80 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v80, (uint64_t)&v108, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v81 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v81 + 1;
      if (v81 != -1)
      {
        uint64_t v82 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v82, (uint64_t)&v108, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v83 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v83 + 1;
      if (v83 != -1)
      {
        uint64_t v84 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v84, (uint64_t)&v108, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v85 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v85 + 1;
      if (v85 != -1)
      {
        unsigned int v86 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v86, (uint64_t)&v108, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v87 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v87 + 1;
      if (v87 != -1)
      {
        uint64_t v88 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v88, (uint64_t)&v108, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v89 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = v89 + 1;
      if (v89 != -1)
      {
        uint64_t v90 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v90, (uint64_t)&v108, 1);
      }
      *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      uint64_t v91 = *(void *)(a1 + 40);
      unsigned __int8 v92 = *(unsigned char *)(a1 + 34);
      *(void *)(a1 + 40) = v91 + 1;
      if (v91 != -1)
      {
        v93 = *(void **)(a1 + 24);
        unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
        sub_215731D94(v93, (uint64_t)&v108, 1);
      }
      unsigned int v94 = *(void **)(a1 + 24);
      unsigned __int8 v108 = v92;
      sub_215731D94(v94, (uint64_t)&v108, 1);
      ++*(void *)(a1 + 40);
      if (a3 < 4) {
        return;
      }
    }
    else
    {
      unsigned __int8 v108 = 0;
      sub_215DF927C(a1, &v108);
      if (a3 < 4) {
        return;
      }
    }
    if (*(void *)(a1 + 40))
    {
      unsigned int v100 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v100, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v101 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v101 + 1;
    if (v101 != -1)
    {
      v102 = *(void **)(a1 + 24);
      unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
      sub_215731D94(v102, (uint64_t)&v108, 1);
    }
    std::ostream::operator<<();
    uint64_t v103 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 40) = v103;
    uint64_t v104 = a2[44];
    uint64_t v105 = a2[45] - v104;
    if (v105)
    {
      uint64_t v106 = 4 * (v105 >> 2);
      do
      {
        if (v103)
        {
          uint64_t v107 = *(void **)(a1 + 24);
          unsigned __int8 v108 = *(unsigned char *)(a1 + 32);
          sub_215731D94(v107, (uint64_t)&v108, 1);
        }
        *(void *)(*(void *)(a1 + 24) + *(void *)(**(void **)(a1 + 24) - 24) + 16) = 9;
        v104 += 4;
        std::ostream::operator<<();
        uint64_t v103 = *(void *)(a1 + 40) + 1;
        *(void *)(a1 + 40) = v103;
        v106 -= 4;
      }
      while (v106);
    }
  }
}

uint64_t *sub_2159BE69C(uint64_t a1, uint64_t a2)
{
  LODWORD(__src) = 4;
  uint64_t v4 = a1 + 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  unsigned int v5 = __src;
  sub_215D02034((void *)a1);
  sub_2159BA998((uint64_t)&__src, a2);
  uint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v37 - __src) >> 2);
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  std::string::size_type v6 = __src;
  if (v37 != __src)
  {
    uint64_t v7 = 12 * ((v37 - __src) / 12);
    do
    {
      uint64_t v8 = v6 + 12;
      sub_215D04A50(v4, *(char **)(a1 + 32), v6, v6 + 12, 12);
      std::string::size_type v6 = v8;
      v7 -= 12;
    }
    while (v7);
  }
  LODWORD(v64) = v38;
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  uint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 2);
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  uint64_t v9 = v39;
  if (v40 != v39)
  {
    uint64_t v10 = 12 * ((v40 - v39) / 12);
    do
    {
      uint64_t v11 = v9 + 12;
      sub_215D04A50(v4, *(char **)(a1 + 32), v9, v9 + 12, 12);
      uint64_t v9 = v11;
      v10 -= 12;
    }
    while (v10);
  }
  LODWORD(v64) = v41;
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  uint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 2);
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  uint64_t v12 = v42;
  if (v43 != v42)
  {
    uint64_t v13 = 12 * ((v43 - v42) / 12);
    do
    {
      uint64_t v14 = v12 + 12;
      sub_215D04A50(v4, *(char **)(a1 + 32), v12, v12 + 12, 12);
      uint64_t v12 = v14;
      v13 -= 12;
    }
    while (v13);
  }
  LODWORD(v64) = v44;
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  uint64_t v64 = v46 - v45;
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  uint64_t v16 = v45;
  uint64_t v15 = v46;
  if (!v45
    && v46
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_38;
  }
  sub_215D04A50(v4, *(char **)(a1 + 32), v16, v15, v15 - v16);
  LODWORD(v64) = v47;
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
  uint64_t v64 = v49 - v48;
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  uint64_t v17 = v48;
  uint64_t v18 = v49;
  if (!v48
    && v49
    && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
  {
    goto LABEL_38;
  }
  sub_215D04A50(v4, *(char **)(a1 + 32), v17, v18, v18 - v17);
  uint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 2);
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  uint64_t v19 = v50;
  if (v51 != v50)
  {
    uint64_t v20 = 12 * ((v51 - v50) / 12);
    do
    {
      unsigned int v21 = v19 + 12;
      sub_215D04A50(v4, *(char **)(a1 + 32), v19, v19 + 12, 12);
      uint64_t v19 = v21;
      v20 -= 12;
    }
    while (v20);
  }
  uint64_t v64 = (v53 - v52) >> 3;
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  uint64_t v22 = v52;
  if (v53 != v52)
  {
    uint64_t v23 = 8 * ((v53 - v52) >> 3);
    do
    {
      uint64_t v24 = v22 + 8;
      sub_215D04A50(v4, *(char **)(a1 + 32), v22, v22 + 8, 8);
      uint64_t v22 = v24;
      v23 -= 8;
    }
    while (v23);
  }
  uint64_t v64 = (v55 - v54) >> 3;
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  uint64_t v25 = v54;
  if (v55 != v54)
  {
    uint64_t v26 = 8 * ((v55 - v54) >> 3);
    do
    {
      uint64_t v27 = v25 + 8;
      sub_215D04A50(v4, *(char **)(a1 + 32), v25, v25 + 8, 8);
      uint64_t v25 = v27;
      v26 -= 8;
    }
    while (v26);
  }
  uint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((v57 - v56) >> 2);
  sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
  unsigned int v28 = v56;
  if (v57 != v56)
  {
    uint64_t v29 = 12 * ((v57 - v56) / 12);
    do
    {
      uint64_t v30 = v28 + 12;
      sub_215D04A50(v4, *(char **)(a1 + 32), v28, v28 + 12, 12);
      unsigned int v28 = v30;
      v29 -= 12;
    }
    while (v29);
  }
  if (v5 >= 2)
  {
    if (v60[0])
    {
      LOBYTE(v64) = 1;
      sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
      LODWORD(v64) = 2;
      sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      sub_215D02034((void *)a1);
      sub_215D04A50(v4, *(char **)(a1 + 32), v58, v59, 12);
      sub_215D04A50(v4, *(char **)(a1 + 32), v59, v60, 12);
      uint64_t v31 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
      *(void *)(v31 + 10) = *(void *)(a1 + 32) - v31 - 18;
      *(void *)(a1 + 56) -= 8;
    }
    else
    {
      LOBYTE(v64) = 0;
      sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 1, 1);
    }
    if (v5 >= 4)
    {
      LODWORD(v64) = v61;
      sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v64 + 4, 4);
      uint64_t v64 = (v63 - v62) >> 2;
      sub_215D04A50(v4, *(char **)(a1 + 32), (char *)&v64, (char *)&v65, 8);
      uint64_t v32 = v62;
      uint64_t v33 = v63;
      if (v62
        || !v63
        || !sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        sub_215D04A50(v4, *(char **)(a1 + 32), v32, v33, v33 - v32);
        goto LABEL_37;
      }
LABEL_38:
      abort();
    }
  }
LABEL_37:
  uint64_t result = sub_2159A0134((uint64_t *)&__src);
  uint64_t v35 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
  *(void *)(v35 + 10) = *(void *)(a1 + 32) - v35 - 18;
  *(void *)(a1 + 56) -= 8;
  return result;
}

void sub_2159BEDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0134((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2159BEDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0134((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2159BEE10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0134((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2159BEE24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0134((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2159BEE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0134((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2159BEE4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0134((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2159BEE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0134((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2159BEE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0134((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2159BEE88(_DWORD *a1, uint64_t a2)
{
  int v4 = a1[2];
  LODWORD(v7[0]) = 4;
  (*(void (**)(_DWORD *, uint64_t *))(*(void *)a1 + 104))(a1, v7);
  unsigned int v5 = v7[0];
  if (v4 < 1)
  {
    sub_2159BA998((uint64_t)v7, a2);
    sub_2159BF018((uint64_t)a1, v7, v5);
    return sub_2159A0134(v7);
  }
  else
  {
    if (v4 == 2)
    {
      LODWORD(v7[0]) = 3;
      (*(void (**)(_DWORD *, uint64_t *))(*(void *)a1 + 104))(a1, v7);
    }
    (*(void (**)(_DWORD *))(*(void *)a1 + 16))(a1);
    sub_2159BA998((uint64_t)v7, a2);
    sub_2159BF018((uint64_t)a1, v7, v5);
    sub_2159A0134(v7);
    return (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1);
  }
}

void sub_2159BEFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159BF004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159BF018(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7 != *a2)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v6);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v6 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v6 + 8);
      v6 += 12;
    }
    while (v6 != v7);
  }
  sub_2159BFB48((unsigned char *)a1, (_DWORD *)a2 + 8);
  uint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[6] - a2[5]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
  uint64_t v8 = a2[5];
  for (uint64_t i = a2[6]; v8 != i; v8 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v8 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v8 + 8);
  }
  sub_2159BFB48((unsigned char *)a1, (_DWORD *)a2 + 18);
  uint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[11] - a2[10]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
  uint64_t v10 = a2[10];
  for (uint64_t j = a2[11]; v10 != j; v10 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v10);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v10 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v10 + 8);
  }
  sub_2159BFB48((unsigned char *)a1, (_DWORD *)a2 + 28);
  uint64_t v31 = a2[16] - a2[15];
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
  uint64_t v13 = a2[15];
  uint64_t v12 = a2[16];
  uint64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v13++);
      --v14;
    }
    while (v14);
  }
  sub_2159BFB48((unsigned char *)a1, (_DWORD *)a2 + 38);
  uint64_t v31 = a2[21] - a2[20];
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
  uint64_t v16 = a2[20];
  uint64_t v15 = a2[21];
  uint64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v16++);
      --v17;
    }
    while (v17);
  }
  uint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[25] - a2[24]) >> 2);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
  uint64_t v18 = a2[24];
  for (uint64_t k = a2[25]; v18 != k; v18 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v18);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v18 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v18 + 8);
  }
  uint64_t v31 = (a2[29] - a2[28]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
  uint64_t v20 = a2[28];
  for (uint64_t m = a2[29]; v20 != m; v20 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v20);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v20 + 4);
  }
  uint64_t v31 = (a2[33] - a2[32]) >> 3;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
  uint64_t v22 = a2[32];
  for (uint64_t n = a2[33]; v22 != n; v22 += 8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v22);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v22 + 4);
  }
  uint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((a2[37] - a2[36]) >> 2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
  uint64_t v25 = a2[36];
  for (iuint64_t i = a2[37]; v25 != ii; v25 += 12)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v25);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v25 + 4);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v25 + 8);
  }
  if (a3 >= 2)
  {
    if (*((unsigned char *)a2 + 344))
    {
      LOBYTE(v31) = 1;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v31);
      int v27 = *(_DWORD *)(a1 + 8);
      LODWORD(v31) = 2;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v31);
      if (v27 < 1)
      {
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, a2 + 42);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, (uint64_t)a2 + 340);
        if (a3 < 4) {
          return result;
        }
      }
      else
      {
        if (v27 == 2)
        {
          LODWORD(v31) = 2;
          (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v31);
        }
        (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, a2 + 40);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, (uint64_t)a2 + 324);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, a2 + 41);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, (uint64_t)a2 + 332);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 128))(a1, a2 + 42);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, (uint64_t)a2 + 340);
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        if (a3 < 4) {
          return result;
        }
      }
    }
    else
    {
      LOBYTE(v31) = 0;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v31);
      if (a3 < 4) {
        return result;
      }
    }
    sub_2159BFB48((unsigned char *)a1, (_DWORD *)a2 + 87);
    uint64_t v31 = (a2[45] - a2[44]) >> 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 120))(a1, &v31);
    uint64_t v28 = a2[44];
    uint64_t v29 = a2[45] - v28;
    if (v29)
    {
      uint64_t v30 = 4 * (v29 >> 2);
      do
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v28);
        v28 += 4;
        v30 -= 4;
      }
      while (v30);
    }
  }
  return result;
}

uint64_t sub_2159BFB48(unsigned char *a1, _DWORD *a2)
{
  if ((a1[12] & 2) != 0)
  {
    v3[6] = 0;
    sub_2159BB89C();
  }
  v3[0] = *a2;
  return (*(uint64_t (**)(unsigned char *, _DWORD *))(*(void *)a1 + 104))(a1, v3);
}

void sub_2159BFC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159BFC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159BFC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159BFCA8(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  v6[0] = 0;
  *(void *)((char *)&v6[1] + 4) = 0;
  *(void *)((char *)&v6[2] + 4) = 0;
  *(void *)((char *)&v6[3] + 4) = 0;
  v6[5] = 0;
  *(void *)((char *)&v6[6] + 4) = 0;
  *(void *)((char *)&v6[7] + 4) = 0;
  v6[10] = 0;
  *(void *)((char *)&v6[8] + 4) = 0;
  *(void *)((char *)&v6[11] + 4) = 0;
  *(void *)((char *)&v6[13] + 4) = 0;
  *(void *)((char *)&v6[12] + 4) = 0;
  v6[15] = 0;
  *(void *)((char *)&v6[17] + 4) = 0;
  *(void *)((char *)&v6[16] + 4) = 0;
  *(void *)((char *)&v6[18] + 4) = 0;
  int v20 = 0;
  char v21 = 0;
  char v22 = 0;
  memset(&v6[20], 0, 24);
  uint64_t v10 = 0;
  int v7 = 0;
  int v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  int v15 = 0;
  uint64_t v12 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v19 = 0;
  v4[0] = "vertices";
  v4[1] = 8;
  _OWORD v4[2] = v5;
  sub_2159C0BDC(a2, (uint64_t)v4);
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "colors_type";
  *(void *)(a2 + 96) = 11;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v4[0] = (char *)v6 + 4;
  sub_2159C0F48((void *)a2);
}

void sub_2159C0310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C0324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C0338(uint64_t a1, uint64_t a2)
{
  v5[0] = "vertices";
  v5[1] = 8;
  v5[2] = a2;
  sub_2159C0BDC(a1, (uint64_t)v5);
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "colors_type";
  *(void *)(a1 + 96) = 11;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  v5[0] = a2 + 32;
  sub_2159C0F48((void *)a1);
}

void sub_2159C0BDC(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  int v4 = *(uint64_t **)(a2 + 16);
  sub_215DF07E4(a1);
  unsigned int v5 = *(unsigned __int8 **)(a1 + 32);
  int v6 = *v5;
  if (v6 == 2)
  {
    unint64_t v7 = (uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = (float **)(v4 + 1);
      uint64_t v9 = (float *)v4[1];
      uint64_t v10 = (float *)*v4;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
      goto LABEL_12;
    }
    unint64_t v7 = 1;
  }
  uint64_t v8 = (float **)(v4 + 1);
  uint64_t v9 = (float *)v4[1];
  uint64_t v10 = (float *)*v4;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_2159C0D3C(v4, v7 - v11);
    uint64_t v10 = (float *)*v4;
    uint64_t v9 = (float *)v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    uint64_t v9 = &v10[3 * v7];
    char *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    unint64_t v12 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v12, v10);
    v10 += 3;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v14 - 8);
  *(void *)(a1 + 48) = v13 - 8;
  *(void *)(a1 + 72) = v14 - 8;
}

void sub_2159C0D3C(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555) {
      sub_215738AC0();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0xAAAAAAAAAAAAAAALL) {
      uint64_t v9 = 0x1555555555555555;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      LODWORD(v26) = v9;
      uint64_t v10 = *((unsigned int *)a1 + 7);
      if (v10 == -1) {
        sub_215742D4C();
      }
      uint64_t v24 = &v26;
      uint64_t v11 = ((uint64_t (*)(void ***, uint64_t *))off_26C674CD8[v10])(&v24, a1 + 3);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    uint64_t v14 = (_DWORD *)(v11 + 12 * v6);
    uint64_t v15 = v11 + 12 * v12;
    size_t v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    uint64_t v17 = (char *)v14 + v16;
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 12);
        v18 -= 12;
        int v21 = *(_DWORD *)(v18 + 8);
        *(void *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      uint64_t v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    uint64_t v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      uint64_t v24 = (void **)v18;
      int v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      uint64_t v23 = *((unsigned int *)a1 + 7);
      if (v23 == -1) {
        sub_215742D4C();
      }
      uint64_t v26 = &v24;
      ((void (*)(void **, uint64_t *))off_26C674B50[v23])(&v26, a1 + 3);
    }
  }
}

void sub_2159C0F48(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  uint64_t v2 = (void **)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D30C0C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159C1040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159C10B0(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  sub_215DF07E4(a1);
  long long v5 = *(unsigned __int8 **)(a1 + 32);
  int v6 = *v5;
  if (v6 == 2)
  {
    unint64_t v7 = (uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      unint64_t v7 = 0;
      unint64_t v8 = (unint64_t *)(v4 + 1);
      unint64_t v9 = v4[1];
      uint64_t v10 = *v4;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
      goto LABEL_12;
    }
    unint64_t v7 = 1;
  }
  unint64_t v8 = (unint64_t *)(v4 + 1);
  unint64_t v9 = v4[1];
  uint64_t v10 = *v4;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_2159C1224(v4, v7 - v11);
    uint64_t v10 = *v4;
    unint64_t v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    unint64_t v9 = v10 + 12 * v7;
    unint64_t *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 3;
    v15[1] = v10;
    unint64_t v12 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v12, (uint64_t)v15);
    v10 += 12;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v14 - 8);
  *(void *)(a1 + 48) = v13 - 8;
  *(void *)(a1 + 72) = v14 - 8;
}

void sub_2159C1224(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero((void *)a1[1], v13);
      v5 += v13;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x1555555555555555) {
      sub_215738AC0();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0xAAAAAAAAAAAAAAALL) {
      uint64_t v9 = 0x1555555555555555;
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      LODWORD(v26) = v9;
      uint64_t v10 = *((unsigned int *)a1 + 7);
      if (v10 == -1) {
        sub_215742D4C();
      }
      uint64_t v24 = &v26;
      uint64_t v11 = ((uint64_t (*)(void ***, uint64_t *))off_26C674D18[v10])(&v24, a1 + 3);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    uint64_t v14 = (_DWORD *)(v11 + 12 * v6);
    uint64_t v15 = v11 + 12 * v12;
    size_t v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    uint64_t v17 = (char *)v14 + v16;
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 12);
        v18 -= 12;
        int v21 = *(_DWORD *)(v18 + 8);
        *(void *)(v14 - 3) = v20;
        v14 -= 3;
        v14[2] = v21;
      }
      while (v18 != v19);
      uint64_t v18 = *a1;
    }
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v17;
    uint64_t v22 = a1[2];
    a1[2] = v15;
    if (v18)
    {
      uint64_t v24 = (void **)v18;
      int v25 = -1431655765 * ((unint64_t)(v22 - v18) >> 2);
      uint64_t v23 = *((unsigned int *)a1 + 7);
      if (v23 == -1) {
        sub_215742D4C();
      }
      uint64_t v26 = &v24;
      ((void (*)(void **, uint64_t *))off_26C674B10[v23])(&v26, a1 + 3);
    }
  }
}

void sub_2159C1430(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  sub_215DF07E4(a1);
  uint64_t v5 = *(unsigned __int8 **)(a1 + 32);
  int v6 = *v5;
  if (v6 == 2)
  {
    unint64_t v7 = (uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      unint64_t v7 = 0;
      unint64_t v8 = v4 + 1;
      uint64_t v9 = v4[1];
      uint64_t v10 = *v4;
      unint64_t v11 = (v9 - *v4) >> 3;
      goto LABEL_12;
    }
    unint64_t v7 = 1;
  }
  unint64_t v8 = v4 + 1;
  uint64_t v9 = v4[1];
  uint64_t v10 = *v4;
  unint64_t v11 = (v9 - *v4) >> 3;
  if (v7 > v11)
  {
    sub_2159C1588((uint64_t)v4, v7 - v11);
    uint64_t v10 = *v4;
    uint64_t v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    uint64_t v9 = v10 + 8 * v7;
    void *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 2;
    v15[1] = v10;
    unint64_t v12 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF2328(v12, (uint64_t)v15);
    v10 += 8;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v14 - 8);
  *(void *)(a1 + 48) = v13 - 8;
  *(void *)(a1 + 72) = v14 - 8;
}

void sub_2159C1588(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = v5 - *(void *)a1;
    uint64_t v7 = v6 >> 3;
    unint64_t v8 = (v6 >> 3) + a2;
    if (v8 >> 61) {
      sub_215738AC0();
    }
    uint64_t v9 = v4 - *(void *)a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= v8) {
      uint64_t v10 = (v6 >> 3) + a2;
    }
    BOOL v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    uint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      LODWORD(v35) = v12;
      uint64_t v13 = *(unsigned int *)(a1 + 28);
      if (v13 == -1) {
        sub_215742D4C();
      }
      uint64_t v33 = &v35;
      uint64_t v15 = ((uint64_t (*)(void ***, uint64_t))off_26C674D38[v13])(&v33, a1 + 24);
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v14 = 0;
    }
    size_t v16 = (char *)(v15 + 8 * v7);
    size_t v17 = 8 * a2;
    uint64_t v18 = v15 + 8 * v14;
    bzero(v16, v17);
    uint64_t v19 = &v16[v17];
    uint64_t v20 = *(void ***)a1;
    int v21 = *(void ***)(a1 + 8);
    if (v21 != *(void ***)a1)
    {
      unint64_t v22 = (unint64_t)v21 - *(void *)a1 - 8;
      if (v22 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)v21 - v15 - v6 < 0x20) {
        goto LABEL_31;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      int v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      uint64_t v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      int v27 = (long long *)(v21 - 2);
      uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *uint64_t v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      int v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v30 = (uint64_t)*--v21;
          *((void *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      int v21 = *(void ***)a1;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v19;
    uint64_t v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v18;
    if (v21)
    {
      uint64_t v33 = v21;
      int v34 = (unint64_t)(v31 - (void)v21) >> 3;
      uint64_t v32 = *(unsigned int *)(a1 + 28);
      if (v32 == -1) {
        sub_215742D4C();
      }
      uint64_t v35 = &v33;
      ((void (*)(void **, uint64_t))off_26C674B30[v32])(&v35, a1 + 24);
    }
  }
}

void sub_2159C1784(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v4 = *(float ***)(a2 + 16);
  sub_215DF07E4(a1);
  uint64_t v5 = *(unsigned __int8 **)(a1 + 32);
  int v6 = *v5;
  if (v6 == 2)
  {
    unint64_t v7 = (uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 3);
  }
  else
  {
    if (!*v5)
    {
      unint64_t v7 = 0;
      unint64_t v8 = v4 + 1;
      uint64_t v9 = v4[1];
      uint64_t v10 = *v4;
      unint64_t v11 = ((char *)v9 - (char *)*v4) >> 3;
      goto LABEL_12;
    }
    unint64_t v7 = 1;
  }
  unint64_t v8 = v4 + 1;
  uint64_t v9 = v4[1];
  uint64_t v10 = *v4;
  unint64_t v11 = ((char *)v9 - (char *)*v4) >> 3;
  if (v7 > v11)
  {
    sub_2159C18C8((uint64_t)v4, v7 - v11);
    uint64_t v10 = *v4;
    uint64_t v9 = v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    uint64_t v9 = &v10[2 * v7];
    void *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    unint64_t v12 = sub_215DF0AA0((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF262C(v12, v10);
    v10 += 2;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v14 - 8);
  *(void *)(a1 + 48) = v13 - 8;
  *(void *)(a1 + 72) = v14 - 8;
}

void sub_2159C18C8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += 8 * a2;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = v5 - *(void *)a1;
    uint64_t v7 = v6 >> 3;
    unint64_t v8 = (v6 >> 3) + a2;
    if (v8 >> 61) {
      sub_215738AC0();
    }
    uint64_t v9 = v4 - *(void *)a1;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= v8) {
      uint64_t v10 = (v6 >> 3) + a2;
    }
    BOOL v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
    uint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      LODWORD(v35) = v12;
      uint64_t v13 = *(unsigned int *)(a1 + 28);
      if (v13 == -1) {
        sub_215742D4C();
      }
      uint64_t v33 = &v35;
      uint64_t v15 = ((uint64_t (*)(void ***, uint64_t))off_26C674D58[v13])(&v33, a1 + 24);
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v14 = 0;
    }
    size_t v16 = (char *)(v15 + 8 * v7);
    size_t v17 = 8 * a2;
    uint64_t v18 = v15 + 8 * v14;
    bzero(v16, v17);
    uint64_t v19 = &v16[v17];
    uint64_t v20 = *(void ***)a1;
    int v21 = *(void ***)(a1 + 8);
    if (v21 != *(void ***)a1)
    {
      unint64_t v22 = (unint64_t)v21 - *(void *)a1 - 8;
      if (v22 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)v21 - v15 - v6 < 0x20) {
        goto LABEL_31;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      int v25 = &v21[v24 / 0xFFFFFFFFFFFFFFF8];
      v16 -= v24;
      uint64_t v26 = (_OWORD *)(v15 + 8 * v7 - 16);
      int v27 = (long long *)(v21 - 2);
      uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v29 = *v27;
        *(v26 - 1) = *(v27 - 1);
        *uint64_t v26 = v29;
        v26 -= 2;
        v27 -= 2;
        v28 -= 4;
      }
      while (v28);
      int v21 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v30 = (uint64_t)*--v21;
          *((void *)v16 - 1) = v30;
          v16 -= 8;
        }
        while (v21 != v20);
      }
      int v21 = *(void ***)a1;
    }
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v19;
    uint64_t v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v18;
    if (v21)
    {
      uint64_t v33 = v21;
      int v34 = (unint64_t)(v31 - (void)v21) >> 3;
      uint64_t v32 = *(unsigned int *)(a1 + 28);
      if (v32 == -1) {
        sub_215742D4C();
      }
      uint64_t v35 = &v33;
      ((void (*)(void **, uint64_t))off_26C674B20[v32])(&v35, a1 + 24);
    }
  }
}

void sub_2159C1AC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E770, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E770))
  {
    sub_2159C1B98();
    if (byte_26788E7EF < 0)
    {
      sub_215738B0C(&xmmword_26788E7C0, (void *)qword_26788E7D8, unk_26788E7E0);
    }
    else
    {
      xmmword_26788E7C0 = *(_OWORD *)&qword_26788E7D8;
      qword_26788E7D0 = unk_26788E7E8;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788E7C0, &dword_21572C000);
    __cxa_guard_release(&qword_26788E770);
  }
}

void sub_2159C1B80(_Unwind_Exception *a1)
{
}

void sub_2159C1B98()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E778, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E778))
  {
    sub_2159C1C80(__p);
    sub_2157E7638(__p, (std::string *)&qword_26788E7D8);
    if (v1 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788E7D8, &dword_21572C000);
    __cxa_guard_release(&qword_26788E778);
  }
}

void sub_2159C1C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_26788E778);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_26788E778);
  _Unwind_Resume(a1);
}

void sub_2159C1C80(void *__dst)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E780, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E780))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::mesh::TriMeshBoundingBoxSample<>]", qword_26788E7F0);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26788E7F0, &dword_21572C000);
    __cxa_guard_release(&qword_26788E780);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E788, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E788))
  {
    size_t v3 = sub_215747D98(qword_26788E7F0, "<", 0);
    sub_215747C90(qword_26788E7F0, 0, v3, qword_26788E808);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26788E808, &dword_21572C000);
    __cxa_guard_release(&qword_26788E788);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E790, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E790))
  {
    sub_215E19DF4((uint64_t)qword_26788E808, (uint64_t)&xmmword_26788E820);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788E820, &dword_21572C000);
    __cxa_guard_release(&qword_26788E790);
  }
  if (byte_26788E837 < 0)
  {
    long long v2 = xmmword_26788E820;
    sub_215738B0C(__dst, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)std::string __dst = xmmword_26788E820;
    __dst[2] = unk_26788E830;
  }
}

void sub_2159C1E40(_Unwind_Exception *a1)
{
}

void sub_2159C1E58(_Unwind_Exception *a1)
{
}

void sub_2159C1E70(_Unwind_Exception *a1)
{
}

uint64_t sub_2159C1E88(uint64_t a1, uint64_t a2)
{
  LOBYTE(v11) = 0;
  char v13 = 0;
  if (*(unsigned char *)(a2 + 344))
  {
    *(void *)&long long v3 = *(void *)(a2 + 320);
    DWORD2(v3) = *(_DWORD *)(a2 + 328);
    HIDWORD(v3) = *(void *)(a2 + 332);
    LODWORD(v4) = vdup_lane_s32(*(int32x2_t *)(a2 + 332), 1).u32[0];
    long long v11 = v3;
    HIDWORD(v4) = *(_DWORD *)(a2 + 340);
    uint64_t v12 = v4;
    char v13 = 1;
  }
  int v10 = 0;
  HIDWORD(v9) = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  sub_2159C2588(a1, a2, (_DWORD *)(a2 + 32), a2 + 40, (_DWORD *)(a2 + 72), a2 + 80, (_DWORD *)(a2 + 112), a2 + 120, (_DWORD *)(a2 + 152), a2 + 160, a2 + 192, a2 + 224, a2 + 256, a2 + 288, &v11, &v10, (uint64_t)&v6);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v14 = v6;
    int v15 = (unint64_t)(v8 - v6) >> 2;
    if (HIDWORD(v9) == -1) {
      sub_215742D4C();
    }
    size_t v16 = &v14;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B00[HIDWORD(v9)])(&v16, &v9);
  }
  return a1;
}

void sub_2159C1FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2159A078C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2159C1FD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    a1[1] = v4;
    int v5 = -1431655765 * ((unint64_t)(a1[2] - v4) >> 2);
    uint64_t v36 = v4;
    int v37 = v5;
    uint64_t v6 = *((unsigned int *)a1 + 7);
    if (v6 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v6])(&v38, a1 + 3);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  a1[3] = *(void *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1[5];
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 32);
  if (v7)
  {
    a1[6] = v7;
    int v8 = -1431655765 * ((unint64_t)(a1[7] - v7) >> 2);
    uint64_t v36 = v7;
    int v37 = v8;
    uint64_t v9 = *((unsigned int *)a1 + 17);
    if (v9 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v9])(&v38, a1 + 8);
    a1[5] = 0;
    a1[6] = 0;
    a1[7] = 0;
  }
  a1[8] = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  uint64_t v10 = a1[10];
  *((_DWORD *)a1 + 18) = *(_DWORD *)(a2 + 72);
  if (v10)
  {
    a1[11] = v10;
    int v11 = -1431655765 * ((unint64_t)(a1[12] - v10) >> 2);
    uint64_t v36 = v10;
    int v37 = v11;
    uint64_t v12 = *((unsigned int *)a1 + 27);
    if (v12 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v12])(&v38, a1 + 13);
    a1[10] = 0;
    a1[11] = 0;
    a1[12] = 0;
  }
  a1[13] = *(void *)(a2 + 104);
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  a1[12] = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  uint64_t v13 = a1[15];
  *((_DWORD *)a1 + 28) = *(_DWORD *)(a2 + 112);
  if (v13)
  {
    a1[16] = v13;
    int v14 = *((_DWORD *)a1 + 34) - v13;
    uint64_t v36 = v13;
    int v37 = v14;
    uint64_t v15 = *((unsigned int *)a1 + 37);
    if (v15 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B40[v15])(&v38, a1 + 18);
    a1[15] = 0;
    a1[16] = 0;
    a1[17] = 0;
  }
  a1[18] = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v16 = a1[20];
  *((_DWORD *)a1 + 38) = *(_DWORD *)(a2 + 152);
  if (v16)
  {
    a1[21] = v16;
    int v17 = *((_DWORD *)a1 + 44) - v16;
    uint64_t v36 = v16;
    int v37 = v17;
    uint64_t v18 = *((unsigned int *)a1 + 47);
    if (v18 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B40[v18])(&v38, a1 + 23);
    a1[20] = 0;
    a1[21] = 0;
    a1[22] = 0;
  }
  a1[23] = *(void *)(a2 + 184);
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  a1[22] = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  uint64_t v19 = a1[24];
  if (v19)
  {
    a1[25] = v19;
    int v20 = -1431655765 * ((unint64_t)(a1[26] - v19) >> 2);
    uint64_t v36 = v19;
    int v37 = v20;
    uint64_t v21 = *((unsigned int *)a1 + 55);
    if (v21 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B10[v21])(&v38, a1 + 27);
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
  a1[27] = *(void *)(a2 + 216);
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  uint64_t v22 = a1[28];
  if (v22)
  {
    a1[29] = v22;
    unint64_t v23 = (unint64_t)(a1[30] - v22) >> 3;
    uint64_t v36 = v22;
    int v37 = v23;
    uint64_t v24 = *((unsigned int *)a1 + 63);
    if (v24 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B30[v24])(&v38, a1 + 31);
    a1[28] = 0;
    a1[29] = 0;
    a1[30] = 0;
  }
  a1[31] = *(void *)(a2 + 248);
  *((_OWORD *)a1 + 14) = *(_OWORD *)(a2 + 224);
  a1[30] = *(void *)(a2 + 240);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  uint64_t v25 = a1[32];
  if (v25)
  {
    a1[33] = v25;
    unint64_t v26 = (unint64_t)(a1[34] - v25) >> 3;
    uint64_t v36 = v25;
    int v37 = v26;
    uint64_t v27 = *((unsigned int *)a1 + 71);
    if (v27 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B20[v27])(&v38, a1 + 35);
    a1[32] = 0;
    a1[33] = 0;
    a1[34] = 0;
  }
  a1[35] = *(void *)(a2 + 280);
  *((_OWORD *)a1 + 16) = *(_OWORD *)(a2 + 256);
  a1[34] = *(void *)(a2 + 272);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  uint64_t v28 = a1[36];
  if (v28)
  {
    a1[37] = v28;
    int v29 = -1431655765 * ((unint64_t)(a1[38] - v28) >> 2);
    uint64_t v36 = v28;
    int v37 = v29;
    uint64_t v30 = *((unsigned int *)a1 + 79);
    if (v30 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B10[v30])(&v38, a1 + 39);
    a1[36] = 0;
    a1[37] = 0;
    a1[38] = 0;
  }
  a1[39] = *(void *)(a2 + 312);
  *((_OWORD *)a1 + 18) = *(_OWORD *)(a2 + 288);
  a1[38] = *(void *)(a2 + 304);
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 288) = 0;
  long long v31 = *(_OWORD *)(a2 + 336);
  *((_OWORD *)a1 + 20) = *(_OWORD *)(a2 + 320);
  *((_OWORD *)a1 + 21) = v31;
  uint64_t v32 = a1[44];
  if (v32)
  {
    a1[45] = v32;
    unint64_t v33 = (unint64_t)(a1[46] - v32) >> 2;
    uint64_t v36 = v32;
    int v37 = v33;
    uint64_t v34 = *((unsigned int *)a1 + 95);
    if (v34 == -1) {
      sub_215742D4C();
    }
    int v38 = &v36;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B00[v34])(&v38, a1 + 47);
    a1[44] = 0;
    a1[45] = 0;
    a1[46] = 0;
  }
  a1[47] = *(void *)(a2 + 376);
  *((_OWORD *)a1 + 22) = *(_OWORD *)(a2 + 352);
  a1[46] = *(void *)(a2 + 368);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  return a1;
}

uint64_t sub_2159C2588(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long *a15, _DWORD *a16, uint64_t a17)
{
  uint64_t v24 = sub_2159BAB4C((void *)a1, a2);
  *((_DWORD *)v24 + 8) = *a3;
  sub_2159BAB4C(v24 + 5, a4);
  *(_DWORD *)(a1 + 72) = *a5;
  sub_2159BAB4C((void *)(a1 + 80), a6);
  *(_DWORD *)(a1 + 112) = *a7;
  sub_2159BADC8((void *)(a1 + 120), a8);
  *(_DWORD *)(a1 + 152) = *a9;
  sub_2159BADC8((void *)(a1 + 160), a10);
  sub_2159BAF38((void *)(a1 + 192), a11);
  sub_2159BB1B4((void *)(a1 + 224), a12);
  sub_2159BB3E8((void *)(a1 + 256), a13);
  sub_2159BAF38((void *)(a1 + 288), a14);
  long long v25 = *a15;
  *(_OWORD *)(a1 + 332) = *(long long *)((char *)a15 + 12);
  *(_OWORD *)(a1 + 320) = v25;
  *(_DWORD *)(a1 + 348) = *a16;
  sub_2159BB61C((void *)(a1 + 352), a17);
  return a1;
}

void sub_2159C26B4(_Unwind_Exception *a1)
{
  uint64_t v10 = v7;
  sub_2159A04E4(v10);
  sub_2159A0574(v9);
  sub_2159A05F8(v8);
  sub_2159A04E4(v6);
  sub_2159A067C(v5);
  sub_2159A067C(v4);
  sub_2159A06FC(v3);
  sub_2159A06FC(v2);
  sub_2159A06FC(v1);
  _Unwind_Resume(a1);
}

void sub_2159C272C()
{
}

void sub_2159C2734()
{
}

void sub_2159C273C(_Unwind_Exception *a1)
{
  sub_2159A06FC(v2);
  sub_2159A06FC(v1);
  _Unwind_Resume(a1);
}

void sub_2159C2758(_Unwind_Exception *a1)
{
  sub_2159A06FC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2159C276C(uint64_t *a1)
{
  uint64_t v2 = a1[36];
  if (v2)
  {
    a1[37] = v2;
    int v3 = -1431655765 * ((unint64_t)(a1[38] - v2) >> 2);
    uint64_t v30 = v2;
    int v31 = v3;
    uint64_t v4 = *((unsigned int *)a1 + 79);
    if (v4 == -1) {
      sub_215742D4C();
    }
    uint64_t v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B10[v4])(&v32, a1 + 39);
  }
  uint64_t v5 = a1[32];
  if (v5)
  {
    a1[33] = v5;
    unint64_t v6 = (unint64_t)(a1[34] - v5) >> 3;
    uint64_t v30 = v5;
    int v31 = v6;
    uint64_t v7 = *((unsigned int *)a1 + 71);
    if (v7 == -1) {
      sub_215742D4C();
    }
    uint64_t v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B20[v7])(&v32, a1 + 35);
  }
  uint64_t v8 = a1[28];
  if (v8)
  {
    a1[29] = v8;
    unint64_t v9 = (unint64_t)(a1[30] - v8) >> 3;
    uint64_t v30 = v8;
    int v31 = v9;
    uint64_t v10 = *((unsigned int *)a1 + 63);
    if (v10 == -1) {
      sub_215742D4C();
    }
    uint64_t v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B30[v10])(&v32, a1 + 31);
  }
  uint64_t v11 = a1[24];
  if (v11)
  {
    a1[25] = v11;
    int v12 = -1431655765 * ((unint64_t)(a1[26] - v11) >> 2);
    uint64_t v30 = v11;
    int v31 = v12;
    uint64_t v13 = *((unsigned int *)a1 + 55);
    if (v13 == -1) {
      sub_215742D4C();
    }
    uint64_t v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B10[v13])(&v32, a1 + 27);
  }
  uint64_t v14 = a1[20];
  if (v14)
  {
    a1[21] = v14;
    int v15 = *((_DWORD *)a1 + 44) - v14;
    uint64_t v30 = v14;
    int v31 = v15;
    uint64_t v16 = *((unsigned int *)a1 + 47);
    if (v16 == -1) {
      sub_215742D4C();
    }
    uint64_t v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B40[v16])(&v32, a1 + 23);
  }
  uint64_t v17 = a1[15];
  if (v17)
  {
    a1[16] = v17;
    int v18 = *((_DWORD *)a1 + 34) - v17;
    uint64_t v30 = v17;
    int v31 = v18;
    uint64_t v19 = *((unsigned int *)a1 + 37);
    if (v19 == -1) {
      sub_215742D4C();
    }
    uint64_t v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B40[v19])(&v32, a1 + 18);
  }
  uint64_t v20 = a1[10];
  if (v20)
  {
    a1[11] = v20;
    int v21 = -1431655765 * ((unint64_t)(a1[12] - v20) >> 2);
    uint64_t v30 = v20;
    int v31 = v21;
    uint64_t v22 = *((unsigned int *)a1 + 27);
    if (v22 == -1) {
      sub_215742D4C();
    }
    uint64_t v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v22])(&v32, a1 + 13);
  }
  uint64_t v23 = a1[5];
  if (v23)
  {
    a1[6] = v23;
    int v24 = -1431655765 * ((unint64_t)(a1[7] - v23) >> 2);
    uint64_t v30 = v23;
    int v31 = v24;
    uint64_t v25 = *((unsigned int *)a1 + 17);
    if (v25 == -1) {
      sub_215742D4C();
    }
    uint64_t v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v25])(&v32, a1 + 8);
  }
  uint64_t v26 = *a1;
  if (*a1)
  {
    a1[1] = v26;
    int v27 = -1431655765 * ((unint64_t)(a1[2] - v26) >> 2);
    uint64_t v30 = v26;
    int v31 = v27;
    uint64_t v28 = *((unsigned int *)a1 + 7);
    if (v28 == -1) {
      sub_215742D4C();
    }
    uint64_t v32 = &v30;
    ((void (*)(uint64_t **, uint64_t *))off_26C674B50[v28])(&v32, a1 + 3);
  }
  return a1;
}

void sub_2159C2AC4(uint64_t a1, void *a2, uint64_t a3)
{
  LODWORD(v118[0]) = 4;
  sub_215DFF824(a2[6], v118);
  unsigned int v5 = v118[0];
  if (LODWORD(v118[0]) >= 3) {
    sub_2159B0060(a2 + 2);
  }
  if (v5 >= 4) {
    unsigned int v6 = 4;
  }
  else {
    unsigned int v6 = v5;
  }
  if (v6 < 3)
  {
    unsigned int v119 = 0;
    char v120 = 0;
    uint64_t v122 = 0;
    uint64_t v121 = 0;
    v123 = 0;
    v124 = 0;
    uint64_t v125 = 0;
    uint64_t v126 = 0;
    v127 = 0;
    v128 = 0;
    uint64_t v130 = 0;
    uint64_t v129 = 0;
    v131 = 0;
    uint64_t v133 = 0;
    v132 = 0;
    uint64_t v134 = 0;
    v136 = 0;
    v135 = 0;
    uint64_t v137 = 0;
    v138[32] = 0;
    LOBYTE(v139) = 0;
    char v142 = 0;
    memset(v138, 0, 28);
    memset(&v138[8], 0, 28);
    memset(&v138[16], 0, 28);
    memset(&v138[24], 0, 28);
    *(void *)&v118[0] = 0;
    sub_215DFFC24(a2[6], v118);
    uint64_t v11 = v119;
    uint64_t v10 = v120;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v120 - v119);
    if (*(void *)&v118[0] <= v12)
    {
      if (*(void *)&v118[0] < v12)
      {
        uint64_t v10 = &v119[3 * *(void *)&v118[0]];
        char v120 = v10;
      }
    }
    else
    {
      sub_2159C0D3C((uint64_t *)&v119, *(void *)&v118[0] - v12);
      uint64_t v11 = v119;
      uint64_t v10 = v120;
    }
    if (v10 != v11)
    {
      uint64_t v57 = v10;
      do
      {
        uint64_t v58 = a2[6];
        sub_215DFFD1C(v58, v11);
        uint64_t v59 = v11 + 1;
        sub_215DFFD1C(v58, v59++);
        sub_215DFFD1C(v58, v59);
        uint64_t v11 = v59 + 1;
      }
      while (v11 != v57);
    }
    LODWORD(v118[0]) = 0;
    sub_215DFF824(a2[6], v118);
    HIDWORD(v122) = v118[0];
    *(void *)&v118[0] = 0xAAAAAAAAAAAAAAABLL * (v124 - v123);
    sub_215DFFC24(a2[6], v118);
    int v61 = v123;
    uint64_t v60 = v124;
    unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * (v124 - v123);
    if (*(void *)&v118[0] <= v62)
    {
      if (*(void *)&v118[0] < v62)
      {
        uint64_t v60 = &v123[3 * *(void *)&v118[0]];
        v124 = v60;
      }
    }
    else
    {
      sub_2159C0D3C((uint64_t *)&v123, *(void *)&v118[0] - v62);
      int v61 = v123;
      uint64_t v60 = v124;
    }
    if (v60 != v61)
    {
      uint64_t v63 = v60;
      do
      {
        uint64_t v64 = a2[6];
        sub_215DFFD1C(v64, v61);
        uint64_t v65 = v61 + 1;
        sub_215DFFD1C(v64, v65++);
        sub_215DFFD1C(v64, v65);
        int v61 = v65 + 1;
      }
      while (v61 != v63);
    }
    LODWORD(v118[0]) = 0;
    sub_215DFF824(a2[6], v118);
    HIDWORD(v126) = v118[0];
    *(void *)&v118[0] = 0xAAAAAAAAAAAAAAABLL * (v128 - v127);
    sub_215DFFC24(a2[6], v118);
    unsigned int v67 = v127;
    uint64_t v66 = v128;
    unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * (v128 - v127);
    if (*(void *)&v118[0] <= v68)
    {
      if (*(void *)&v118[0] < v68)
      {
        uint64_t v66 = &v127[3 * *(void *)&v118[0]];
        v128 = v66;
      }
    }
    else
    {
      sub_2159C0D3C((uint64_t *)&v127, *(void *)&v118[0] - v68);
      unsigned int v67 = v127;
      uint64_t v66 = v128;
    }
    if (v66 != v67)
    {
      uint64_t v69 = v66;
      do
      {
        uint64_t v70 = a2[6];
        sub_215DFFD1C(v70, v67);
        uint64_t v71 = v67 + 1;
        sub_215DFFD1C(v70, v71++);
        sub_215DFFD1C(v70, v71);
        unsigned int v67 = v71 + 1;
      }
      while (v67 != v69);
    }
    LODWORD(v118[0]) = 0;
    sub_215DFF824(a2[6], v118);
    HIDWORD(v130) = v118[0];
    *(void *)&v118[0] = v132 - v131;
    sub_215DFFC24(a2[6], v118);
    uint64_t v72 = v132;
    uint64_t v73 = v131;
    if (*(void *)&v118[0] <= (unint64_t)(v132 - v131))
    {
      if (*(void *)&v118[0] < (unint64_t)(v132 - v131))
      {
        uint64_t v72 = &v131[*(void *)&v118[0]];
        v132 = &v131[*(void *)&v118[0]];
      }
    }
    else
    {
      sub_215957E5C((uint64_t)&v131, *(void *)&v118[0] - (v132 - v131));
      uint64_t v73 = v131;
      uint64_t v72 = v132;
    }
    uint64_t v74 = a2[6];
    uint64_t v75 = v72 - v73;
    if (v72 != v73)
    {
      do
      {
        sub_215DFF4BC(v74, v73++);
        --v75;
      }
      while (v75);
      uint64_t v74 = a2[6];
    }
    LODWORD(v118[0]) = 0;
    sub_215DFF824(v74, v118);
    HIDWORD(v134) = v118[0];
    *(void *)&v118[0] = v136 - v135;
    sub_215DFFC24(a2[6], v118);
    uint64_t v76 = v136;
    uint64_t v77 = v135;
    if (*(void *)&v118[0] <= (unint64_t)(v136 - v135))
    {
      if (*(void *)&v118[0] < (unint64_t)(v136 - v135))
      {
        uint64_t v76 = &v135[*(void *)&v118[0]];
        v136 = &v135[*(void *)&v118[0]];
      }
    }
    else
    {
      sub_215957E5C((uint64_t)&v135, *(void *)&v118[0] - (v136 - v135));
      uint64_t v77 = v135;
      uint64_t v76 = v136;
    }
    uint64_t v78 = a2[6];
    uint64_t v79 = v76 - v77;
    if (v76 != v77)
    {
      do
      {
        sub_215DFF4BC(v78, v77++);
        --v79;
      }
      while (v79);
      uint64_t v78 = a2[6];
    }
    *(void *)&v118[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v138[3] - *(void *)&v138[1]) >> 2);
    sub_215DFFC24(v78, v118);
    uint64_t v80 = *(void *)&v138[3];
    uint64_t v81 = *(_DWORD **)&v138[1];
    unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v138[3] - *(void *)&v138[1]) >> 2);
    if (*(void *)&v118[0] <= v82)
    {
      if (*(void *)&v118[0] < v82)
      {
        uint64_t v80 = *(void *)&v138[1] + 12 * *(void *)&v118[0];
        *(void *)&v138[3] = v80;
      }
    }
    else
    {
      sub_2159C1224((uint64_t *)&v138[1], *(void *)&v118[0] - v82);
      uint64_t v81 = *(_DWORD **)&v138[1];
      uint64_t v80 = *(void *)&v138[3];
    }
    if ((_DWORD *)v80 != v81)
    {
      uint64_t v83 = (_DWORD *)v80;
      do
      {
        uint64_t v84 = a2[6];
        sub_215DFF824(v84, v81);
        uint64_t v85 = v81 + 1;
        sub_215DFF824(v84, v85++);
        sub_215DFF824(v84, v85);
        uint64_t v81 = v85 + 1;
      }
      while (v81 != v83);
    }
    *(void *)&v118[0] = (uint64_t)(*(void *)&v138[11] - *(void *)&v138[9]) >> 3;
    sub_215DFFC24(a2[6], v118);
    uint64_t v86 = *(void *)&v138[11];
    uint64_t v87 = *(_DWORD **)&v138[9];
    unint64_t v88 = (uint64_t)(*(void *)&v138[11] - *(void *)&v138[9]) >> 3;
    if (*(void *)&v118[0] <= v88)
    {
      if (*(void *)&v118[0] < v88)
      {
        uint64_t v86 = *(void *)&v138[9] + 8 * *(void *)&v118[0];
        *(void *)&v138[11] = v86;
      }
    }
    else
    {
      sub_2159C1588((uint64_t)&v138[9], *(void *)&v118[0] - v88);
      uint64_t v87 = *(_DWORD **)&v138[9];
      uint64_t v86 = *(void *)&v138[11];
    }
    if ((_DWORD *)v86 != v87)
    {
      uint64_t v89 = (_DWORD *)v86;
      do
      {
        uint64_t v90 = a2[6];
        sub_215DFF824(v90, v87);
        uint64_t v91 = v87 + 1;
        sub_215DFF824(v90, v91);
        uint64_t v87 = v91 + 1;
      }
      while (v87 != v89);
    }
    *(void *)&v118[0] = (uint64_t)(*(void *)&v138[19] - *(void *)&v138[17]) >> 3;
    sub_215DFFC24(a2[6], v118);
    uint64_t v92 = *(void *)&v138[19];
    v93 = *(float **)&v138[17];
    unint64_t v94 = (uint64_t)(*(void *)&v138[19] - *(void *)&v138[17]) >> 3;
    if (*(void *)&v118[0] <= v94)
    {
      if (*(void *)&v118[0] < v94)
      {
        uint64_t v92 = *(void *)&v138[17] + 8 * *(void *)&v118[0];
        *(void *)&v138[19] = v92;
      }
    }
    else
    {
      sub_2159C18C8((uint64_t)&v138[17], *(void *)&v118[0] - v94);
      v93 = *(float **)&v138[17];
      uint64_t v92 = *(void *)&v138[19];
    }
    if ((float *)v92 != v93)
    {
      uint64_t v95 = (float *)v92;
      do
      {
        uint64_t v96 = a2[6];
        sub_215DFFD1C(v96, v93);
        unsigned int v97 = v93 + 1;
        sub_215DFFD1C(v96, v97);
        v93 = v97 + 1;
      }
      while (v93 != v95);
    }
    *(void *)&v118[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v138[27] - *(void *)&v138[25]) >> 2);
    sub_215DFFC24(a2[6], v118);
    uint64_t v98 = *(void *)&v138[27];
    uint64_t v99 = *(_DWORD **)&v138[25];
    unint64_t v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v138[27] - *(void *)&v138[25]) >> 2);
    if (*(void *)&v118[0] <= v100)
    {
      if (*(void *)&v118[0] < v100)
      {
        uint64_t v98 = *(void *)&v138[25] + 12 * *(void *)&v118[0];
        *(void *)&v138[27] = v98;
      }
    }
    else
    {
      sub_2159C1224((uint64_t *)&v138[25], *(void *)&v118[0] - v100);
      uint64_t v99 = *(_DWORD **)&v138[25];
      uint64_t v98 = *(void *)&v138[27];
    }
    if ((_DWORD *)v98 != v99)
    {
      uint64_t v101 = (_DWORD *)v98;
      do
      {
        uint64_t v102 = a2[6];
        sub_215DFF824(v102, v99);
        uint64_t v103 = v99 + 1;
        sub_215DFF824(v102, v103++);
        sub_215DFF824(v102, v103);
        uint64_t v99 = v103 + 1;
      }
      while (v99 != v101);
    }
    if (v6 >= 2)
    {
      char v143 = 0;
      sub_215DFF4BC(a2[6], &v143);
      if (v143)
      {
        if (!v142)
        {
          uint64_t v139 = 0;
          uint64_t v140 = 0;
          uint64_t v141 = 0;
          char v142 = 1;
        }
        LODWORD(v118[0]) = 1;
        sub_215DFF824(a2[6], v118);
        uint64_t v104 = a2[6];
        sub_215DFFD1C(v104, (float *)&v139);
        sub_215DFFD1C(v104, (float *)&v139 + 1);
        sub_215DFFD1C(v104, (float *)&v140);
        uint64_t v105 = a2[6];
        sub_215DFFD1C(v105, (float *)&v140 + 1);
        sub_215DFFD1C(v105, (float *)&v141);
        sub_215DFFD1C(v105, (float *)&v141 + 1);
      }
      else if (v142)
      {
        char v142 = 0;
      }
    }
    sub_2159C1E88((uint64_t)v118, (uint64_t)&v119);
    sub_2159C1FD0((uint64_t *)a3, (uint64_t)v118);
    sub_2159A0134((uint64_t *)v118);
    sub_2159C276C((uint64_t *)&v119);
  }
  else
  {
    *(void *)&v118[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    sub_215DFFC24(a2[6], v118);
    uint64_t v8 = *(float **)a3;
    uint64_t v7 = *(float **)(a3 + 8);
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)a3) >> 2);
    if (*(void *)&v118[0] <= v9)
    {
      if (*(void *)&v118[0] < v9)
      {
        uint64_t v7 = &v8[3 * *(void *)&v118[0]];
        *(void *)(a3 + 8) = v7;
      }
    }
    else
    {
      sub_2159C0D3C((uint64_t *)a3, *(void *)&v118[0] - v9);
      uint64_t v8 = *(float **)a3;
      uint64_t v7 = *(float **)(a3 + 8);
    }
    if (v7 != v8)
    {
      uint64_t v13 = v7;
      do
      {
        uint64_t v14 = a2[6];
        sub_215DFFD1C(v14, v8);
        sub_215DFFD1C(v14, v8 + 1);
        sub_215DFFD1C(v14, v8 + 2);
        v8 += 3;
      }
      while (v8 != v13);
    }
    LODWORD(v118[0]) = 0;
    sub_215DFF824(a2[6], v118);
    *(_DWORD *)(a3 + 32) = v118[0];
    *(void *)&v118[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 48) - *(void *)(a3 + 40)) >> 2);
    sub_215DFFC24(a2[6], v118);
    uint64_t v16 = *(float **)(a3 + 40);
    int v15 = *(float **)(a3 + 48);
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v15 - v16);
    if (*(void *)&v118[0] <= v17)
    {
      if (*(void *)&v118[0] < v17)
      {
        int v15 = &v16[3 * *(void *)&v118[0]];
        *(void *)(a3 + 48) = v15;
      }
    }
    else
    {
      sub_2159C0D3C((uint64_t *)(a3 + 40), *(void *)&v118[0] - v17);
      uint64_t v16 = *(float **)(a3 + 40);
      int v15 = *(float **)(a3 + 48);
    }
    if (v15 != v16)
    {
      int v18 = v15;
      do
      {
        uint64_t v19 = a2[6];
        sub_215DFFD1C(v19, v16);
        sub_215DFFD1C(v19, v16 + 1);
        sub_215DFFD1C(v19, v16 + 2);
        v16 += 3;
      }
      while (v16 != v18);
    }
    LODWORD(v118[0]) = 0;
    sub_215DFF824(a2[6], v118);
    *(_DWORD *)(a3 + 72) = v118[0];
    *(void *)&v118[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 88) - *(void *)(a3 + 80)) >> 2);
    sub_215DFFC24(a2[6], v118);
    int v21 = *(float **)(a3 + 80);
    uint64_t v20 = *(float **)(a3 + 88);
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v20 - v21);
    if (*(void *)&v118[0] <= v22)
    {
      if (*(void *)&v118[0] < v22)
      {
        uint64_t v20 = &v21[3 * *(void *)&v118[0]];
        *(void *)(a3 + 88) = v20;
      }
    }
    else
    {
      sub_2159C0D3C((uint64_t *)(a3 + 80), *(void *)&v118[0] - v22);
      int v21 = *(float **)(a3 + 80);
      uint64_t v20 = *(float **)(a3 + 88);
    }
    if (v20 != v21)
    {
      uint64_t v23 = v20;
      do
      {
        uint64_t v24 = a2[6];
        sub_215DFFD1C(v24, v21);
        sub_215DFFD1C(v24, v21 + 1);
        sub_215DFFD1C(v24, v21 + 2);
        v21 += 3;
      }
      while (v21 != v23);
    }
    LODWORD(v118[0]) = 0;
    sub_215DFF824(a2[6], v118);
    *(_DWORD *)(a3 + 112) = v118[0];
    *(void *)&v118[0] = *(void *)(a3 + 128) - *(void *)(a3 + 120);
    sub_215DFFC24(a2[6], v118);
    uint64_t v26 = *(unsigned char **)(a3 + 120);
    uint64_t v25 = *(unsigned char **)(a3 + 128);
    if (*(void *)&v118[0] <= (unint64_t)(v25 - v26))
    {
      if (*(void *)&v118[0] < (unint64_t)(v25 - v26))
      {
        uint64_t v25 = &v26[*(void *)&v118[0]];
        *(void *)(a3 + 128) = &v26[*(void *)&v118[0]];
      }
    }
    else
    {
      sub_215957E5C(a3 + 120, *(void *)&v118[0] - (v25 - v26));
      uint64_t v26 = *(unsigned char **)(a3 + 120);
      uint64_t v25 = *(unsigned char **)(a3 + 128);
    }
    uint64_t v27 = a2[6];
    uint64_t v28 = v25 - v26;
    if (v25 != v26)
    {
      do
      {
        sub_215DFF4BC(v27, v26++);
        --v28;
      }
      while (v28);
      uint64_t v27 = a2[6];
    }
    LODWORD(v118[0]) = 0;
    sub_215DFF824(v27, v118);
    *(_DWORD *)(a3 + 152) = v118[0];
    *(void *)&v118[0] = *(void *)(a3 + 168) - *(void *)(a3 + 160);
    sub_215DFFC24(a2[6], v118);
    uint64_t v30 = *(unsigned char **)(a3 + 160);
    int v29 = *(unsigned char **)(a3 + 168);
    if (*(void *)&v118[0] <= (unint64_t)(v29 - v30))
    {
      if (*(void *)&v118[0] < (unint64_t)(v29 - v30))
      {
        int v29 = &v30[*(void *)&v118[0]];
        *(void *)(a3 + 168) = &v30[*(void *)&v118[0]];
      }
    }
    else
    {
      sub_215957E5C(a3 + 160, *(void *)&v118[0] - (v29 - v30));
      uint64_t v30 = *(unsigned char **)(a3 + 160);
      int v29 = *(unsigned char **)(a3 + 168);
    }
    uint64_t v31 = a2[6];
    uint64_t v32 = v29 - v30;
    if (v29 != v30)
    {
      do
      {
        sub_215DFF4BC(v31, v30++);
        --v32;
      }
      while (v32);
      uint64_t v31 = a2[6];
    }
    *(void *)&v118[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 200) - *(void *)(a3 + 192)) >> 2);
    sub_215DFFC24(v31, v118);
    uint64_t v34 = *(_DWORD **)(a3 + 192);
    unint64_t v33 = *(_DWORD **)(a3 + 200);
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (v33 - v34);
    if (*(void *)&v118[0] <= v35)
    {
      if (*(void *)&v118[0] < v35)
      {
        unint64_t v33 = &v34[3 * *(void *)&v118[0]];
        *(void *)(a3 + 200) = v33;
      }
    }
    else
    {
      sub_2159C1224((uint64_t *)(a3 + 192), *(void *)&v118[0] - v35);
      uint64_t v34 = *(_DWORD **)(a3 + 192);
      unint64_t v33 = *(_DWORD **)(a3 + 200);
    }
    if (v33 != v34)
    {
      uint64_t v36 = v33;
      do
      {
        uint64_t v37 = a2[6];
        sub_215DFF824(v37, v34);
        sub_215DFF824(v37, v34 + 1);
        sub_215DFF824(v37, v34 + 2);
        v34 += 3;
      }
      while (v34 != v36);
    }
    *(void *)&v118[0] = (uint64_t)(*(void *)(a3 + 232) - *(void *)(a3 + 224)) >> 3;
    sub_215DFFC24(a2[6], v118);
    uint64_t v39 = *(char **)(a3 + 224);
    int v38 = *(char **)(a3 + 232);
    unint64_t v40 = (v38 - v39) >> 3;
    if (*(void *)&v118[0] <= v40)
    {
      if (*(void *)&v118[0] < v40)
      {
        int v38 = &v39[8 * *(void *)&v118[0]];
        *(void *)(a3 + 232) = v38;
      }
    }
    else
    {
      sub_2159C1588(a3 + 224, *(void *)&v118[0] - v40);
      uint64_t v39 = *(char **)(a3 + 224);
      int v38 = *(char **)(a3 + 232);
    }
    if (v38 != v39)
    {
      int v41 = v38;
      do
      {
        uint64_t v42 = a2[6];
        sub_215DFF824(v42, v39);
        sub_215DFF824(v42, (_DWORD *)v39 + 1);
        v39 += 8;
      }
      while (v39 != v41);
    }
    *(void *)&v118[0] = (uint64_t)(*(void *)(a3 + 264) - *(void *)(a3 + 256)) >> 3;
    sub_215DFFC24(a2[6], v118);
    int v44 = *(float **)(a3 + 256);
    int64_t v43 = *(float **)(a3 + 264);
    unint64_t v45 = ((char *)v43 - (char *)v44) >> 3;
    if (*(void *)&v118[0] <= v45)
    {
      if (*(void *)&v118[0] < v45)
      {
        int64_t v43 = &v44[2 * *(void *)&v118[0]];
        *(void *)(a3 + 264) = v43;
      }
    }
    else
    {
      sub_2159C18C8(a3 + 256, *(void *)&v118[0] - v45);
      int v44 = *(float **)(a3 + 256);
      int64_t v43 = *(float **)(a3 + 264);
    }
    if (v43 != v44)
    {
      uint64_t v46 = v43;
      do
      {
        uint64_t v47 = a2[6];
        sub_215DFFD1C(v47, v44);
        sub_215DFFD1C(v47, v44 + 1);
        v44 += 2;
      }
      while (v44 != v46);
    }
    *(void *)&v118[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 296) - *(void *)(a3 + 288)) >> 2);
    sub_215DFFC24(a2[6], v118);
    unsigned int v49 = *(_DWORD **)(a3 + 288);
    unsigned int v48 = *(_DWORD **)(a3 + 296);
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (v48 - v49);
    if (*(void *)&v118[0] <= v50)
    {
      if (*(void *)&v118[0] < v50)
      {
        unsigned int v48 = &v49[3 * *(void *)&v118[0]];
        *(void *)(a3 + 296) = v48;
      }
    }
    else
    {
      sub_2159C1224((uint64_t *)(a3 + 288), *(void *)&v118[0] - v50);
      unsigned int v49 = *(_DWORD **)(a3 + 288);
      unsigned int v48 = *(_DWORD **)(a3 + 296);
    }
    if (v48 != v49)
    {
      unsigned int v51 = v48;
      do
      {
        uint64_t v52 = a2[6];
        sub_215DFF824(v52, v49);
        sub_215DFF824(v52, v49 + 1);
        sub_215DFF824(v52, v49 + 2);
        v49 += 3;
      }
      while (v49 != v51);
    }
    LOBYTE(v119) = 0;
    sub_215DFF4BC(a2[6], &v119);
    if ((_BYTE)v119)
    {
      if (!*(unsigned char *)(a3 + 344))
      {
        *(void *)(a3 + 320) = 0;
        *(void *)(a3 + 328) = 0;
        *(void *)(a3 + 336) = 0;
        *(unsigned char *)(a3 + 344) = 1;
      }
      LODWORD(v118[0]) = 2;
      sub_215DFF824(a2[6], v118);
      if (LODWORD(v118[0]) <= 1)
      {
        memset(v118, 0, 24);
        uint64_t v106 = a2[6];
        sub_215DFFD1C(v106, (float *)v118);
        sub_215DFFD1C(v106, (float *)v118 + 1);
        sub_215DFFD1C(v106, (float *)v118 + 2);
        uint64_t v107 = a2[6];
        sub_215DFFD1C(v107, (float *)((unint64_t)v118 | 0xC));
        sub_215DFFD1C(v107, (float *)&v118[1]);
        sub_215DFFD1C(v107, (float *)&v118[1] + 1);
        long long v108 = v118[0];
        int32x2_t v109 = *(int32x2_t *)((char *)v118 + 12);
        HIDWORD(v108) = HIDWORD(v118[0]);
        *(_OWORD *)(a3 + 320) = v108;
        LODWORD(v108) = vdup_lane_s32(v109, 1).u32[0];
        DWORD1(v108) = DWORD1(v118[1]);
        *(void *)(a3 + 336) = v108;
        if (v6 < 4) {
          goto LABEL_162;
        }
      }
      else
      {
        sub_2159B0060(a2 + 2);
        uint64_t v54 = a2[6];
        sub_215DFFD1C(v54, (float *)(a3 + 320));
        sub_215DFFD1C(v54, (float *)(a3 + 324));
        sub_215DFFD1C(v54, (float *)(a3 + 328));
        uint64_t v55 = a2[6];
        sub_215DFFD1C(v55, (float *)(a3 + 332));
        sub_215DFFD1C(v55, (float *)(a3 + 336));
        sub_215DFFD1C(v55, (float *)(a3 + 340));
        uint64_t v56 = a2[4];
        unint64_t v53 = *(void *)(v56 - 16)
            - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2)
            + *(void *)(v56 - 8);
        if (v53) {
          (*(void (**)(void *, unint64_t))(a2[2] + 40))(a2 + 2, v53);
        }
        a2[4] -= 16;
        if (v6 < 4) {
          goto LABEL_162;
        }
      }
LABEL_151:
      LODWORD(v118[0]) = 0;
      sub_215DFF824(a2[6], v118);
      *(_DWORD *)(a3 + 348) = v118[0];
      *(void *)&v118[0] = (uint64_t)(*(void *)(a3 + 360) - *(void *)(a3 + 352)) >> 2;
      sub_215DFFC24(a2[6], v118);
      uint64_t v111 = *(float **)(a3 + 352);
      uint64_t v110 = *(float **)(a3 + 360);
      unint64_t v112 = v110 - v111;
      unint64_t v53 = *(void *)&v118[0] - v112;
      if (*(void *)&v118[0] <= v112)
      {
        if (*(void *)&v118[0] < v112)
        {
          uint64_t v110 = &v111[*(void *)&v118[0]];
          *(void *)(a3 + 360) = v110;
        }
      }
      else
      {
        sub_215958438(a3 + 352, v53);
        uint64_t v111 = *(float **)(a3 + 352);
        uint64_t v110 = *(float **)(a3 + 360);
      }
      uint64_t v113 = (char *)v110 - (char *)v111;
      if (v113)
      {
        uint64_t v114 = a2[6];
        uint64_t v115 = 4 * (v113 >> 2);
        do
        {
          sub_215DFFD1C(v114, v111++);
          v115 -= 4;
        }
        while (v115);
      }
      goto LABEL_162;
    }
    if (*(unsigned char *)(a3 + 344)) {
      *(unsigned char *)(a3 + 344) = 0;
    }
    if (v6 >= 4) {
      goto LABEL_151;
    }
  }
LABEL_162:
  if (v5 >= 3)
  {
    uint64_t v116 = a2[4];
    uint64_t v117 = *(void *)(v116 - 16)
         - (*(uint64_t (**)(void *, unint64_t))(a2[2] + 32))(a2 + 2, v53)
         + *(void *)(v116 - 8);
    if (v117) {
      (*(void (**)(void *, uint64_t))(a2[2] + 40))(a2 + 2, v117);
    }
    a2[4] -= 16;
  }
}

void sub_2159C3B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C3C48(uint64_t a1, uint64_t a2)
{
  memset(v5, 0, sizeof(v5));
  v6[0] = 0;
  *(void *)((char *)&v6[1] + 4) = 0;
  *(void *)((char *)&v6[2] + 4) = 0;
  *(void *)((char *)&v6[3] + 4) = 0;
  v6[5] = 0;
  *(void *)((char *)&v6[6] + 4) = 0;
  *(void *)((char *)&v6[7] + 4) = 0;
  v6[10] = 0;
  *(void *)((char *)&v6[8] + 4) = 0;
  *(void *)((char *)&v6[11] + 4) = 0;
  *(void *)((char *)&v6[13] + 4) = 0;
  *(void *)((char *)&v6[12] + 4) = 0;
  v6[15] = 0;
  *(void *)((char *)&v6[17] + 4) = 0;
  *(void *)((char *)&v6[16] + 4) = 0;
  *(void *)((char *)&v6[18] + 4) = 0;
  int v20 = 0;
  char v21 = 0;
  char v22 = 0;
  memset(&v6[20], 0, 24);
  uint64_t v10 = 0;
  int v7 = 0;
  int v11 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  int v15 = 0;
  uint64_t v12 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v19 = 0;
  v4[0] = "vertices";
  v4[1] = 8;
  _OWORD v4[2] = v5;
  sub_2159C4B18(a2, (uint64_t)v4);
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "colors_type";
  *(void *)(a2 + 96) = 11;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  v4[0] = (char *)v6 + 4;
  sub_2159C4C64((void *)a2);
}

void sub_2159C4288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C429C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C42B0(uint64_t a1, uint64_t a2)
{
  v5[0] = "vertices";
  v5[1] = 8;
  v5[2] = a2;
  sub_2159C4B18(a1, (uint64_t)v5);
  int v4 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 88) = "colors_type";
  *(void *)(a1 + 96) = 11;
  if (!v4) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  v5[0] = a2 + 32;
  sub_2159C4C64((void *)a1);
}

void sub_2159C4B18(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  int v4 = *(uint64_t **)(a2 + 16);
  sub_215DF01A0(a1);
  unsigned int v5 = *(unsigned __int8 **)(a1 + 32);
  int v6 = *v5;
  if (v6 == 2)
  {
    unint64_t v7 = (uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    unint64_t v7 = *(void *)(*((void *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = (float **)(v4 + 1);
      uint64_t v9 = (float *)v4[1];
      uint64_t v10 = (float *)*v4;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
      goto LABEL_12;
    }
    unint64_t v7 = 1;
  }
  uint64_t v8 = (float **)(v4 + 1);
  uint64_t v9 = (float *)v4[1];
  uint64_t v10 = (float *)*v4;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_2159C0D3C(v4, v7 - v11);
    uint64_t v10 = (float *)*v4;
    uint64_t v9 = (float *)v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    uint64_t v9 = &v10[3 * v7];
    float *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    unint64_t v12 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v12, v10);
    v10 += 3;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v14 - 8);
  *(void *)(a1 + 48) = v13 - 8;
  *(void *)(a1 + 72) = v14 - 8;
}

void sub_2159C4C64(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  uint64_t v2 = (void **)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D3040C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159C4D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159C4DCC(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  sub_215DF01A0(a1);
  long long v5 = *(unsigned __int8 **)(a1 + 32);
  int v6 = *v5;
  if (v6 == 2)
  {
    unint64_t v7 = (uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    unint64_t v7 = *(void *)(*((void *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = (unint64_t *)(v4 + 1);
      unint64_t v9 = v4[1];
      uint64_t v10 = *v4;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
      goto LABEL_12;
    }
    unint64_t v7 = 1;
  }
  uint64_t v8 = (unint64_t *)(v4 + 1);
  unint64_t v9 = v4[1];
  uint64_t v10 = *v4;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v4) >> 2);
  if (v7 > v11)
  {
    sub_2159C1224(v4, v7 - v11);
    uint64_t v10 = *v4;
    unint64_t v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    unint64_t v9 = v10 + 12 * v7;
    unint64_t *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 3;
    v15[1] = v10;
    unint64_t v12 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v12, (uint64_t)v15);
    v10 += 12;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v14 - 8);
  *(void *)(a1 + 48) = v13 - 8;
  *(void *)(a1 + 72) = v14 - 8;
}

void sub_2159C4F2C(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v4 = *(uint64_t **)(a2 + 16);
  sub_215DF01A0(a1);
  long long v5 = *(unsigned __int8 **)(a1 + 32);
  int v6 = *v5;
  if (v6 == 2)
  {
    unint64_t v7 = (uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    unint64_t v7 = *(void *)(*((void *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = v4 + 1;
      uint64_t v9 = v4[1];
      uint64_t v10 = *v4;
      unint64_t v11 = (v9 - *v4) >> 3;
      goto LABEL_12;
    }
    unint64_t v7 = 1;
  }
  uint64_t v8 = v4 + 1;
  uint64_t v9 = v4[1];
  uint64_t v10 = *v4;
  unint64_t v11 = (v9 - *v4) >> 3;
  if (v7 > v11)
  {
    sub_2159C1588((uint64_t)v4, v7 - v11);
    uint64_t v10 = *v4;
    uint64_t v9 = v4[1];
    goto LABEL_14;
  }
LABEL_12:
  if (v11 > v7)
  {
    uint64_t v9 = v10 + 8 * v7;
    void *v8 = v9;
  }
LABEL_14:
  while (v10 != v9)
  {
    v15[0] = 2;
    v15[1] = v10;
    unint64_t v12 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1424(v12, (uint64_t)v15);
    v10 += 8;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v14 - 8);
  *(void *)(a1 + 48) = v13 - 8;
  *(void *)(a1 + 72) = v14 - 8;
}

void sub_2159C5070(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)a2;
  if (!v3) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  uint64_t v4 = *(float ***)(a2 + 16);
  sub_215DF01A0(a1);
  long long v5 = *(unsigned __int8 **)(a1 + 32);
  int v6 = *v5;
  if (v6 == 2)
  {
    unint64_t v7 = (uint64_t)(*(void *)(*((void *)v5 + 1) + 8) - **((void **)v5 + 1)) >> 4;
  }
  else if (v6 == 1)
  {
    unint64_t v7 = *(void *)(*((void *)v5 + 1) + 16);
  }
  else
  {
    if (!*v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = v4 + 1;
      uint64_t v9 = v4[1];
      uint64_t v10 = *v4;
      unint64_t v11 = ((char *)v9 - (char *)*v4) >> 3;
      goto LABEL_12;
    }
    unint64_t v7 = 1;
  }
  uint64_t v8 = v4 + 1;
  uint64_t v9 = v4[1];
  uint64_t v10 = *v4;
  unint64_t v11 = ((char *)v9 - (char *)*v4) >> 3;
  if (v7 > v11)
  {
    sub_2159C18C8((uint64_t)v4, v7 - v11);
    uint64_t v10 = *v4;
    uint64_t v9 = v4[1];
    goto LABEL_15;
  }
LABEL_12:
  if (v11 > v7)
  {
    uint64_t v9 = &v10[2 * v7];
    void *v8 = v9;
  }
LABEL_15:
  while (v10 != v9)
  {
    unint64_t v12 = sub_215DF045C((void *)a1);
    ++*(void *)(a1 + 112);
    sub_215DF1750(v12, v10);
    v10 += 2;
  }
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(a1 + 72);
  *(void *)(a1 + 112) = *(void *)(v14 - 8);
  *(void *)(a1 + 48) = v13 - 8;
  *(void *)(a1 + 72) = v14 - 8;
}

uint64_t *sub_2159C51A0(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  unint64_t v50 = 0;
  unsigned int v51 = 0;
  uint64_t v53 = 0;
  uint64_t v52 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  unint64_t v62 = 0;
  uint64_t v64 = 0;
  uint64_t v63 = 0;
  uint64_t v65 = 0;
  unsigned int v67 = 0;
  uint64_t v66 = 0;
  uint64_t v68 = 0;
  v69[32] = 0;
  LOBYTE(v70) = 0;
  char v73 = 0;
  memset(v69, 0, 28);
  memset(&v69[8], 0, 28);
  memset(&v69[16], 0, 28);
  memset(&v69[24], 0, 28);
  v49[0] = 0;
  sub_215DFB854(a2, v49);
  uint64_t v8 = v50;
  unint64_t v7 = v51;
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v51 - v50);
  if (v49[0] <= v9)
  {
    if (v49[0] < v9)
    {
      unint64_t v7 = &v50[3 * v49[0]];
      unsigned int v51 = v7;
    }
  }
  else
  {
    sub_2159C0D3C((uint64_t *)&v50, v49[0] - v9);
    uint64_t v8 = v50;
    unint64_t v7 = v51;
  }
  if (v7 != v8)
  {
    uint64_t v10 = v7;
    do
    {
      sub_215DFBEC8(a2, v8);
      unint64_t v11 = v8 + 1;
      sub_215DFBEC8(a2, v11++);
      sub_215DFBEC8(a2, v11);
      uint64_t v8 = v11 + 1;
    }
    while (v8 != v10);
  }
  LODWORD(v49[0]) = 0;
  sub_215DFABD4(a2, v49);
  HIDWORD(v53) = v49[0];
  v49[0] = 0xAAAAAAAAAAAAAAABLL * (v55 - v54);
  sub_215DFB854(a2, v49);
  uint64_t v13 = v54;
  unint64_t v12 = v55;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v55 - v54);
  if (v49[0] <= v14)
  {
    if (v49[0] < v14)
    {
      unint64_t v12 = &v54[3 * v49[0]];
      uint64_t v55 = v12;
    }
  }
  else
  {
    sub_2159C0D3C((uint64_t *)&v54, v49[0] - v14);
    uint64_t v13 = v54;
    unint64_t v12 = v55;
  }
  if (v12 != v13)
  {
    int v15 = v12;
    do
    {
      sub_215DFBEC8(a2, v13);
      uint64_t v16 = v13 + 1;
      sub_215DFBEC8(a2, v16++);
      sub_215DFBEC8(a2, v16);
      uint64_t v13 = v16 + 1;
    }
    while (v13 != v15);
  }
  LODWORD(v49[0]) = 0;
  sub_215DFABD4(a2, v49);
  HIDWORD(v57) = v49[0];
  v49[0] = 0xAAAAAAAAAAAAAAABLL * (v59 - v58);
  sub_215DFB854(a2, v49);
  uint64_t v18 = v58;
  uint64_t v17 = v59;
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v59 - v58);
  if (v49[0] <= v19)
  {
    if (v49[0] < v19)
    {
      uint64_t v17 = &v58[3 * v49[0]];
      uint64_t v59 = v17;
    }
  }
  else
  {
    sub_2159C0D3C((uint64_t *)&v58, v49[0] - v19);
    uint64_t v18 = v58;
    uint64_t v17 = v59;
  }
  if (v17 != v18)
  {
    int v20 = v17;
    do
    {
      sub_215DFBEC8(a2, v18);
      char v21 = v18 + 1;
      sub_215DFBEC8(a2, v21++);
      sub_215DFBEC8(a2, v21);
      uint64_t v18 = v21 + 1;
    }
    while (v18 != v20);
  }
  LODWORD(v49[0]) = 0;
  sub_215DFABD4(a2, v49);
  HIDWORD(v61) = v49[0];
  v49[0] = v63 - v62;
  sub_215DFB854(a2, v49);
  char v22 = v63;
  uint64_t v23 = v62;
  if (v49[0] <= (unint64_t)(v63 - v62))
  {
    if (v49[0] < (unint64_t)(v63 - v62))
    {
      char v22 = &v62[v49[0]];
      uint64_t v63 = &v62[v49[0]];
    }
  }
  else
  {
    sub_215957E5C((uint64_t)&v62, v49[0] - (v63 - v62));
    uint64_t v23 = v62;
    char v22 = v63;
  }
  uint64_t v24 = v22 - v23;
  if (v22 != v23)
  {
    do
    {
      sub_215DFA01C(a2, v23++);
      --v24;
    }
    while (v24);
  }
  LODWORD(v49[0]) = 0;
  sub_215DFABD4(a2, v49);
  HIDWORD(v65) = v49[0];
  v49[0] = v67 - v66;
  sub_215DFB854(a2, v49);
  uint64_t v25 = v67;
  uint64_t v26 = v66;
  if (v49[0] <= (unint64_t)(v67 - v66))
  {
    if (v49[0] < (unint64_t)(v67 - v66))
    {
      uint64_t v25 = &v66[v49[0]];
      unsigned int v67 = &v66[v49[0]];
    }
  }
  else
  {
    sub_215957E5C((uint64_t)&v66, v49[0] - (v67 - v66));
    uint64_t v26 = v66;
    uint64_t v25 = v67;
  }
  uint64_t v27 = v25 - v26;
  if (v25 != v26)
  {
    do
    {
      sub_215DFA01C(a2, v26++);
      --v27;
    }
    while (v27);
  }
  v49[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v69[3] - *(void *)&v69[1]) >> 2);
  sub_215DFB854(a2, v49);
  uint64_t v28 = *(void *)&v69[3];
  int v29 = *(_DWORD **)&v69[1];
  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v69[3] - *(void *)&v69[1]) >> 2);
  if (v49[0] <= v30)
  {
    if (v49[0] < v30)
    {
      uint64_t v28 = *(void *)&v69[1] + 12 * v49[0];
      *(void *)&v69[3] = v28;
    }
  }
  else
  {
    sub_2159C1224((uint64_t *)&v69[1], v49[0] - v30);
    int v29 = *(_DWORD **)&v69[1];
    uint64_t v28 = *(void *)&v69[3];
  }
  if ((_DWORD *)v28 != v29)
  {
    uint64_t v31 = (_DWORD *)v28;
    do
    {
      sub_215DFABD4(a2, v29);
      uint64_t v32 = v29 + 1;
      sub_215DFABD4(a2, v32++);
      sub_215DFABD4(a2, v32);
      int v29 = v32 + 1;
    }
    while (v29 != v31);
  }
  v49[0] = (uint64_t)(*(void *)&v69[11] - *(void *)&v69[9]) >> 3;
  sub_215DFB854(a2, v49);
  uint64_t v33 = *(void *)&v69[11];
  uint64_t v34 = *(_DWORD **)&v69[9];
  unint64_t v35 = (uint64_t)(*(void *)&v69[11] - *(void *)&v69[9]) >> 3;
  if (v49[0] <= v35)
  {
    if (v49[0] < v35)
    {
      uint64_t v33 = *(void *)&v69[9] + 8 * v49[0];
      *(void *)&v69[11] = v33;
    }
  }
  else
  {
    sub_2159C1588((uint64_t)&v69[9], v49[0] - v35);
    uint64_t v34 = *(_DWORD **)&v69[9];
    uint64_t v33 = *(void *)&v69[11];
  }
  if ((_DWORD *)v33 != v34)
  {
    uint64_t v36 = (_DWORD *)v33;
    do
    {
      sub_215DFABD4(a2, v34);
      uint64_t v37 = v34 + 1;
      sub_215DFABD4(a2, v37);
      uint64_t v34 = v37 + 1;
    }
    while (v34 != v36);
  }
  v49[0] = (uint64_t)(*(void *)&v69[19] - *(void *)&v69[17]) >> 3;
  sub_215DFB854(a2, v49);
  uint64_t v38 = *(void *)&v69[19];
  uint64_t v39 = *(_DWORD **)&v69[17];
  unint64_t v40 = (uint64_t)(*(void *)&v69[19] - *(void *)&v69[17]) >> 3;
  if (v49[0] <= v40)
  {
    if (v49[0] < v40)
    {
      uint64_t v38 = *(void *)&v69[17] + 8 * v49[0];
      *(void *)&v69[19] = v38;
    }
  }
  else
  {
    sub_2159C18C8((uint64_t)&v69[17], v49[0] - v40);
    uint64_t v39 = *(_DWORD **)&v69[17];
    uint64_t v38 = *(void *)&v69[19];
  }
  if ((_DWORD *)v38 != v39)
  {
    int v41 = (_DWORD *)v38;
    do
    {
      sub_215DFBEC8(a2, v39);
      uint64_t v42 = v39 + 1;
      sub_215DFBEC8(a2, v42);
      uint64_t v39 = v42 + 1;
    }
    while (v39 != v41);
  }
  v49[0] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v69[27] - *(void *)&v69[25]) >> 2);
  sub_215DFB854(a2, v49);
  uint64_t v43 = *(void *)&v69[27];
  int v44 = *(_DWORD **)&v69[25];
  unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v69[27] - *(void *)&v69[25]) >> 2);
  if (v49[0] <= v45)
  {
    if (v49[0] < v45)
    {
      uint64_t v43 = *(void *)&v69[25] + 12 * v49[0];
      *(void *)&v69[27] = v43;
    }
  }
  else
  {
    sub_2159C1224((uint64_t *)&v69[25], v49[0] - v45);
    int v44 = *(_DWORD **)&v69[25];
    uint64_t v43 = *(void *)&v69[27];
  }
  if ((_DWORD *)v43 != v44)
  {
    uint64_t v46 = (_DWORD *)v43;
    do
    {
      sub_215DFABD4(a2, v44);
      uint64_t v47 = v44 + 1;
      sub_215DFABD4(a2, v47++);
      sub_215DFABD4(a2, v47);
      int v44 = v47 + 1;
    }
    while (v44 != v46);
  }
  if (a4 >= 2)
  {
    char v74 = 0;
    sub_215DFA01C(a2, &v74);
    if (v74)
    {
      if (!v73)
      {
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        char v73 = 1;
      }
      LODWORD(v49[0]) = 1;
      sub_215DFABD4(a2, v49);
      sub_215DFBEC8(a2, &v70);
      sub_215DFBEC8(a2, (_DWORD *)&v70 + 1);
      sub_215DFBEC8(a2, &v71);
      sub_215DFBEC8(a2, (_DWORD *)&v71 + 1);
      sub_215DFBEC8(a2, &v72);
      sub_215DFBEC8(a2, (_DWORD *)&v72 + 1);
    }
    else if (v73)
    {
      char v73 = 0;
    }
  }
  sub_2159C1E88((uint64_t)v49, (uint64_t)&v50);
  sub_2159C1FD0(a3, (uint64_t)v49);
  sub_2159A0134(v49);
  return sub_2159C276C((uint64_t *)&v50);
}

void sub_2159C5940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C5954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C5968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C5990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C59A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C59B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C59CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C59E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C59F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C5A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C5A1C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  sub_215DFB854(a1, __p);
  unint64_t v7 = *(_DWORD **)a2;
  int v6 = *(_DWORD **)(a2 + 8);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(void *)a2) >> 2);
  if (__p[0] <= (void *)v8)
  {
    if (__p[0] < (void *)v8)
    {
      int v6 = &v7[3 * (uint64_t)__p[0]];
      *(void *)(a2 + 8) = v6;
    }
  }
  else
  {
    sub_2159C0D3C((uint64_t *)a2, (unint64_t)__p[0] - v8);
    unint64_t v7 = *(_DWORD **)a2;
    int v6 = *(_DWORD **)(a2 + 8);
  }
  if (v6 != v7)
  {
    unint64_t v9 = v6;
    do
    {
      sub_215DFBEC8(a1, v7);
      sub_215DFBEC8(a1, v7 + 1);
      sub_215DFBEC8(a1, v7 + 2);
      v7 += 3;
    }
    while (v7 != v9);
  }
  LODWORD(__p[0]) = 0;
  sub_215DFABD4(a1, __p);
  *(_DWORD *)(a2 + 32) = __p[0];
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2));
  sub_215DFB854(a1, __p);
  unint64_t v11 = *(_DWORD **)(a2 + 40);
  uint64_t v10 = *(_DWORD **)(a2 + 48);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v10 - v11);
  if (__p[0] <= (void *)v12)
  {
    if (__p[0] < (void *)v12)
    {
      uint64_t v10 = &v11[3 * (uint64_t)__p[0]];
      *(void *)(a2 + 48) = v10;
    }
  }
  else
  {
    sub_2159C0D3C((uint64_t *)(a2 + 40), (unint64_t)__p[0] - v12);
    unint64_t v11 = *(_DWORD **)(a2 + 40);
    uint64_t v10 = *(_DWORD **)(a2 + 48);
  }
  if (v10 != v11)
  {
    uint64_t v13 = v10;
    do
    {
      sub_215DFBEC8(a1, v11);
      sub_215DFBEC8(a1, v11 + 1);
      sub_215DFBEC8(a1, v11 + 2);
      v11 += 3;
    }
    while (v11 != v13);
  }
  LODWORD(__p[0]) = 0;
  sub_215DFABD4(a1, __p);
  *(_DWORD *)(a2 + 72) = __p[0];
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2));
  sub_215DFB854(a1, __p);
  int v15 = *(_DWORD **)(a2 + 80);
  unint64_t v14 = *(_DWORD **)(a2 + 88);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v14 - v15);
  if (__p[0] <= (void *)v16)
  {
    if (__p[0] < (void *)v16)
    {
      unint64_t v14 = &v15[3 * (uint64_t)__p[0]];
      *(void *)(a2 + 88) = v14;
    }
  }
  else
  {
    sub_2159C0D3C((uint64_t *)(a2 + 80), (unint64_t)__p[0] - v16);
    int v15 = *(_DWORD **)(a2 + 80);
    unint64_t v14 = *(_DWORD **)(a2 + 88);
  }
  if (v14 != v15)
  {
    uint64_t v17 = v14;
    do
    {
      sub_215DFBEC8(a1, v15);
      sub_215DFBEC8(a1, v15 + 1);
      sub_215DFBEC8(a1, v15 + 2);
      v15 += 3;
    }
    while (v15 != v17);
  }
  LODWORD(__p[0]) = 0;
  sub_215DFABD4(a1, __p);
  *(_DWORD *)(a2 + 112) = __p[0];
  __p[0] = (void *)(*(void *)(a2 + 128) - *(void *)(a2 + 120));
  sub_215DFB854(a1, __p);
  unint64_t v19 = *(unsigned char **)(a2 + 120);
  uint64_t v18 = *(char **)(a2 + 128);
  if (__p[0] <= (void *)(v18 - v19))
  {
    if (__p[0] < (void *)(v18 - v19))
    {
      uint64_t v18 = &v19[(unint64_t)__p[0]];
      *(void *)(a2 + 128) = &v19[(unint64_t)__p[0]];
    }
  }
  else
  {
    sub_215957E5C(a2 + 120, (size_t)__p[0] - (v18 - v19));
    unint64_t v19 = *(unsigned char **)(a2 + 120);
    uint64_t v18 = *(char **)(a2 + 128);
  }
  uint64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    do
    {
      sub_215DFA01C(a1, v19++);
      --v20;
    }
    while (v20);
  }
  LODWORD(__p[0]) = 0;
  sub_215DFABD4(a1, __p);
  *(_DWORD *)(a2 + 152) = __p[0];
  __p[0] = (void *)(*(void *)(a2 + 168) - *(void *)(a2 + 160));
  sub_215DFB854(a1, __p);
  char v22 = *(unsigned char **)(a2 + 160);
  char v21 = *(char **)(a2 + 168);
  if (__p[0] <= (void *)(v21 - v22))
  {
    if (__p[0] < (void *)(v21 - v22))
    {
      char v21 = &v22[(unint64_t)__p[0]];
      *(void *)(a2 + 168) = &v22[(unint64_t)__p[0]];
    }
  }
  else
  {
    sub_215957E5C(a2 + 160, (size_t)__p[0] - (v21 - v22));
    char v22 = *(unsigned char **)(a2 + 160);
    char v21 = *(char **)(a2 + 168);
  }
  uint64_t v23 = v21 - v22;
  if (v21 != v22)
  {
    do
    {
      sub_215DFA01C(a1, v22++);
      --v23;
    }
    while (v23);
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 200) - *(void *)(a2 + 192)) >> 2));
  sub_215DFB854(a1, __p);
  uint64_t v25 = *(_DWORD **)(a2 + 192);
  uint64_t v24 = *(_DWORD **)(a2 + 200);
  unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (v24 - v25);
  if (__p[0] <= (void *)v26)
  {
    if (__p[0] < (void *)v26)
    {
      uint64_t v24 = &v25[3 * (uint64_t)__p[0]];
      *(void *)(a2 + 200) = v24;
    }
  }
  else
  {
    sub_2159C1224((uint64_t *)(a2 + 192), (unint64_t)__p[0] - v26);
    uint64_t v25 = *(_DWORD **)(a2 + 192);
    uint64_t v24 = *(_DWORD **)(a2 + 200);
  }
  if (v24 != v25)
  {
    uint64_t v27 = v24;
    do
    {
      sub_215DFABD4(a1, v25);
      sub_215DFABD4(a1, v25 + 1);
      sub_215DFABD4(a1, v25 + 2);
      v25 += 3;
    }
    while (v25 != v27);
  }
  __p[0] = (void *)((uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 3);
  sub_215DFB854(a1, __p);
  int v29 = *(char **)(a2 + 224);
  uint64_t v28 = *(char **)(a2 + 232);
  unint64_t v30 = (v28 - v29) >> 3;
  if (__p[0] <= (void *)v30)
  {
    if (__p[0] < (void *)v30)
    {
      uint64_t v28 = &v29[8 * (uint64_t)__p[0]];
      *(void *)(a2 + 232) = v28;
    }
  }
  else
  {
    sub_2159C1588(a2 + 224, (unint64_t)__p[0] - v30);
    int v29 = *(char **)(a2 + 224);
    uint64_t v28 = *(char **)(a2 + 232);
  }
  if (v28 != v29)
  {
    uint64_t v31 = v28;
    do
    {
      sub_215DFABD4(a1, v29);
      sub_215DFABD4(a1, (_DWORD *)v29 + 1);
      v29 += 8;
    }
    while (v29 != v31);
  }
  __p[0] = (void *)((uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 3);
  sub_215DFB854(a1, __p);
  uint64_t v33 = *(char **)(a2 + 256);
  uint64_t v32 = *(char **)(a2 + 264);
  unint64_t v34 = (v32 - v33) >> 3;
  if (__p[0] <= (void *)v34)
  {
    if (__p[0] < (void *)v34)
    {
      uint64_t v32 = &v33[8 * (uint64_t)__p[0]];
      *(void *)(a2 + 264) = v32;
    }
  }
  else
  {
    sub_2159C18C8(a2 + 256, (unint64_t)__p[0] - v34);
    uint64_t v33 = *(char **)(a2 + 256);
    uint64_t v32 = *(char **)(a2 + 264);
  }
  if (v32 != v33)
  {
    unint64_t v35 = v32;
    do
    {
      sub_215DFBEC8(a1, v33);
      sub_215DFBEC8(a1, (_DWORD *)v33 + 1);
      v33 += 8;
    }
    while (v33 != v35);
  }
  __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 296) - *(void *)(a2 + 288)) >> 2));
  sub_215DFB854(a1, __p);
  uint64_t v37 = *(_DWORD **)(a2 + 288);
  uint64_t v36 = *(_DWORD **)(a2 + 296);
  unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (v36 - v37);
  if (__p[0] <= (void *)v38)
  {
    if (__p[0] < (void *)v38)
    {
      uint64_t v36 = &v37[3 * (uint64_t)__p[0]];
      *(void *)(a2 + 296) = v36;
    }
  }
  else
  {
    sub_2159C1224((uint64_t *)(a2 + 288), (unint64_t)__p[0] - v38);
    uint64_t v37 = *(_DWORD **)(a2 + 288);
    uint64_t v36 = *(_DWORD **)(a2 + 296);
  }
  if (v36 != v37)
  {
    uint64_t v39 = v36;
    do
    {
      sub_215DFABD4(a1, v37);
      sub_215DFABD4(a1, v37 + 1);
      sub_215DFABD4(a1, v37 + 2);
      v37 += 3;
    }
    while (v37 != v39);
  }
  if (a3 >= 2)
  {
    char v51 = 0;
    sub_215DFA01C(a1, &v51);
    if (!v51)
    {
      if (*(unsigned char *)(a2 + 344)) {
        *(unsigned char *)(a2 + 344) = 0;
      }
      goto LABEL_76;
    }
    if (!*(unsigned char *)(a2 + 344))
    {
      *(void *)(a2 + 320) = 0;
      *(void *)(a2 + 328) = 0;
      *(void *)(a2 + 336) = 0;
      *(unsigned char *)(a2 + 344) = 1;
    }
    LODWORD(__p[0]) = 2;
    sub_215DFABD4(a1, __p);
    unsigned int v40 = __p[0];
    if (LODWORD(__p[0]) >= 2) {
      unsigned int v41 = 2;
    }
    else {
      unsigned int v41 = __p[0];
    }
    if (v41 < 2)
    {
      memset(__p, 0, 24);
      sub_215DFBEC8(a1, __p);
      sub_215DFBEC8(a1, (_DWORD *)__p + 1);
      sub_215DFBEC8(a1, &__p[1]);
      sub_215DFBEC8(a1, (_DWORD *)((unint64_t)__p | 0xC));
      sub_215DFBEC8(a1, &__p[2]);
      sub_215DFBEC8(a1, (_DWORD *)&__p[2] + 1);
      long long v42 = *(_OWORD *)__p;
      int32x2_t v43 = *(int32x2_t *)((char *)&__p[1] + 4);
      HIDWORD(v42) = HIDWORD(__p[1]);
      *(_OWORD *)(a2 + 320) = v42;
      LODWORD(v42) = vdup_lane_s32(v43, 1).u32[0];
      DWORD1(v42) = HIDWORD(__p[2]);
      *(void *)(a2 + 336) = v42;
      if (v40 < 2) {
        goto LABEL_76;
      }
    }
    else
    {
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 320));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 324));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 328));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 332));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 336));
      sub_215DFBEC8(a1, (_DWORD *)(a2 + 340));
      if (v40 < 2)
      {
LABEL_76:
        if (a3 >= 4)
        {
          LODWORD(__p[0]) = 0;
          sub_215DFABD4(a1, __p);
          *(_DWORD *)(a2 + 348) = __p[0];
          __p[0] = (void *)((uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2);
          sub_215DFB854(a1, __p);
          unint64_t v45 = *(char **)(a2 + 352);
          int v44 = *(char **)(a2 + 360);
          unint64_t v46 = (v44 - v45) >> 2;
          if (__p[0] <= (void *)v46)
          {
            if (__p[0] < (void *)v46)
            {
              int v44 = &v45[4 * (uint64_t)__p[0]];
              *(void *)(a2 + 360) = v44;
            }
          }
          else
          {
            sub_215958438(a2 + 352, (unint64_t)__p[0] - v46);
            unint64_t v45 = *(char **)(a2 + 352);
            int v44 = *(char **)(a2 + 360);
          }
          uint64_t v49 = v44 - v45;
          if (v49)
          {
            uint64_t v50 = 4 * (v49 >> 2);
            do
            {
              sub_215DFBEC8(a1, v45);
              v45 += 4;
              v50 -= 4;
            }
            while (v50);
          }
        }
        return;
      }
    }
    if (*(unsigned char *)(a1 + 131)) {
      goto LABEL_76;
    }
    while (1)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
        goto LABEL_76;
      }
      sub_215DFD700(a1, (uint64_t)__p);
      if (SHIBYTE(__p[2]) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_90:
          char v48 = 0;
          if (SHIBYTE(__p[2]) < 0) {
            goto LABEL_93;
          }
          goto LABEL_79;
        }
      }
      else if (SHIBYTE(__p[2]) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_90;
      }
      char v48 = 1;
      if (SHIBYTE(__p[2]) < 0) {
LABEL_93:
      }
        operator delete(__p[0]);
LABEL_79:
      if (*(unsigned char *)(a1 + 131)) {
        char v47 = 0;
      }
      else {
        char v47 = v48;
      }
      if ((v47 & 1) == 0) {
        goto LABEL_76;
      }
    }
  }
}

void sub_2159C6278(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3) {
    goto LABEL_84;
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 >= 3) {
    sub_215D02644(a2);
  }
  if (v9 >= 4) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v10 < 3)
  {
    memset(v87, 0, sizeof(v87));
    uint64_t v88 = 0;
    memset(v89, 0, sizeof(v89));
    uint64_t v90 = 0;
    memset(v91, 0, sizeof(v91));
    uint64_t v92 = 0;
    memset(v93, 0, sizeof(v93));
    uint64_t v94 = 0;
    memset(v95, 0, 24);
    int v96 = 0;
    v97[0] = 0;
    char v98 = 0;
    memset((char *)&v95[3] + 4, 0, 28);
    memset((char *)&v95[7] + 4, 0, 28);
    memset((char *)&v95[11] + 4, 0, 28);
    memset((char *)&v95[15] + 4, 0, 28);
    sub_2159C6C30(a2, v87);
    unint64_t v46 = a2[6];
    unint64_t v47 = a2[7];
    BOOL v5 = v47 >= v46;
    unint64_t v48 = v47 - v46;
    if (!v5) {
      unint64_t v48 = 0;
    }
    if (v48 > 3)
    {
      int v49 = *(_DWORD *)(a2[3] + v46);
      a2[6] = v46 + 4;
      HIDWORD(v88) = v49;
      sub_2159C6C30(a2, v89);
      unint64_t v50 = a2[6];
      unint64_t v51 = a2[7];
      BOOL v5 = v51 >= v50;
      unint64_t v52 = v51 - v50;
      if (!v5) {
        unint64_t v52 = 0;
      }
      if (v52 > 3)
      {
        int v53 = *(_DWORD *)(a2[3] + v50);
        a2[6] = v50 + 4;
        HIDWORD(v90) = v53;
        sub_2159C6C30(a2, v91);
        unint64_t v54 = a2[6];
        unint64_t v55 = a2[7];
        BOOL v5 = v55 >= v54;
        unint64_t v56 = v55 - v54;
        if (!v5) {
          unint64_t v56 = 0;
        }
        if (v56 > 3)
        {
          int v57 = *(_DWORD *)(a2[3] + v54);
          a2[6] = v54 + 4;
          HIDWORD(v92) = v57;
          sub_2159C6DA0(a2, v93);
          unint64_t v58 = a2[6];
          unint64_t v59 = a2[7];
          BOOL v5 = v59 >= v58;
          unint64_t v60 = v59 - v58;
          if (!v5) {
            unint64_t v60 = 0;
          }
          if (v60 > 3)
          {
            int v61 = *(_DWORD *)(a2[3] + v58);
            a2[6] = v58 + 4;
            HIDWORD(v94) = v61;
            sub_2159C6DA0(a2, v95);
            sub_2159C6EC4(a2, &v95[4]);
            sub_2159C7034(a2, (char **)&v95[8]);
            sub_2159C7170(a2, (char **)&v95[12]);
            sub_2159C6EC4(a2, &v95[16]);
            if (v10 < 2)
            {
LABEL_80:
              sub_2159C1E88((uint64_t)v86, (uint64_t)v87);
              sub_2159C1FD0((uint64_t *)a3, (uint64_t)v86);
              sub_2159A0134((uint64_t *)v86);
              sub_2159C276C(v87);
              goto LABEL_81;
            }
            unint64_t v62 = a2[6];
            unint64_t v63 = a2[7];
            if (v63 > v62)
            {
              int v64 = *(unsigned __int8 *)(a2[3] + v62);
              unint64_t v65 = v62 + 1;
              a2[6] = v62 + 1;
              if (!v64)
              {
                if (v98) {
                  char v98 = 0;
                }
                goto LABEL_80;
              }
              if (!v98)
              {
                memset(v97, 0, sizeof(v97));
                char v98 = 1;
              }
              BOOL v5 = v63 >= v65;
              unint64_t v66 = v63 - v65;
              if (!v5) {
                unint64_t v66 = 0;
              }
              if (v66 > 3)
              {
                a2[6] = v62 + 5;
                sub_2159C72AC(a2, (uint64_t)v97);
                goto LABEL_80;
              }
            }
          }
        }
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  sub_2159C6C30(a2, (uint64_t *)a3);
  unint64_t v11 = a2[6];
  unint64_t v12 = a2[7];
  BOOL v5 = v12 >= v11;
  unint64_t v13 = v12 - v11;
  if (!v5) {
    unint64_t v13 = 0;
  }
  if (v13 <= 3) {
    goto LABEL_84;
  }
  int v14 = *(_DWORD *)(a2[3] + v11);
  a2[6] = v11 + 4;
  *(_DWORD *)(a3 + 32) = v14;
  sub_2159C6C30(a2, (uint64_t *)(a3 + 40));
  unint64_t v15 = a2[6];
  unint64_t v16 = a2[7];
  BOOL v5 = v16 >= v15;
  unint64_t v17 = v16 - v15;
  if (!v5) {
    unint64_t v17 = 0;
  }
  if (v17 <= 3) {
    goto LABEL_84;
  }
  int v18 = *(_DWORD *)(a2[3] + v15);
  a2[6] = v15 + 4;
  *(_DWORD *)(a3 + 72) = v18;
  sub_2159C6C30(a2, (uint64_t *)(a3 + 80));
  unint64_t v19 = a2[6];
  unint64_t v20 = a2[7];
  BOOL v5 = v20 >= v19;
  unint64_t v21 = v20 - v19;
  if (!v5) {
    unint64_t v21 = 0;
  }
  if (v21 <= 3) {
    goto LABEL_84;
  }
  int v22 = *(_DWORD *)(a2[3] + v19);
  a2[6] = v19 + 4;
  *(_DWORD *)(a3 + 112) = v22;
  sub_2159C6DA0(a2, (void *)(a3 + 120));
  unint64_t v23 = a2[6];
  unint64_t v24 = a2[7];
  BOOL v5 = v24 >= v23;
  unint64_t v25 = v24 - v23;
  if (!v5) {
    unint64_t v25 = 0;
  }
  if (v25 <= 3) {
    goto LABEL_84;
  }
  int v26 = *(_DWORD *)(a2[3] + v23);
  a2[6] = v23 + 4;
  *(_DWORD *)(a3 + 152) = v26;
  sub_2159C6DA0(a2, (void *)(a3 + 160));
  sub_2159C6EC4(a2, (uint64_t *)(a3 + 192));
  sub_2159C7034(a2, (char **)(a3 + 224));
  sub_2159C7170(a2, (char **)(a3 + 256));
  sub_2159C6EC4(a2, (uint64_t *)(a3 + 288));
  unint64_t v28 = a2[6];
  unint64_t v27 = a2[7];
  if (v27 <= v28) {
    goto LABEL_84;
  }
  int v29 = *(unsigned __int8 *)(a2[3] + v28);
  unint64_t v30 = v28 + 1;
  a2[6] = v30;
  if (v29)
  {
    uint64_t v31 = (void *)(a3 + 320);
    if (!*(unsigned char *)(a3 + 344))
    {
      *uint64_t v31 = 0;
      *(void *)(a3 + 328) = 0;
      *(void *)(a3 + 336) = 0;
      *(unsigned char *)(a3 + 344) = 1;
      unint64_t v30 = a2[6];
      unint64_t v27 = a2[7];
    }
    BOOL v5 = v27 >= v30;
    unint64_t v32 = v27 - v30;
    if (!v5) {
      unint64_t v32 = 0;
    }
    if (v32 > 3)
    {
      unsigned int v33 = *(_DWORD *)(a2[3] + v30);
      a2[6] = v30 + 4;
      if (v33 <= 1)
      {
        memset(v86, 0, 24);
        sub_2159C72AC(a2, (uint64_t)v86);
        long long v67 = v86[0];
        int32x2_t v68 = *(int32x2_t *)((char *)v86 + 12);
        HIDWORD(v67) = HIDWORD(v86[0]);
        *(_OWORD *)(a3 + 320) = v67;
        LODWORD(v67) = vdup_lane_s32(v68, 1).u32[0];
        DWORD1(v67) = DWORD1(v86[1]);
        *(void *)(a3 + 336) = v67;
        if (v10 < 4) {
          goto LABEL_81;
        }
      }
      else
      {
        sub_215D02644(a2);
        unint64_t v34 = a2[6];
        unint64_t v35 = a2[7];
        BOOL v5 = v35 >= v34;
        unint64_t v36 = v35 - v34;
        if (!v5) {
          unint64_t v36 = 0;
        }
        if (v36 <= 0xB) {
          goto LABEL_96;
        }
        uint64_t v37 = (uint64_t *)(a2[3] + v34);
        uint64_t v38 = *v37;
        *(_DWORD *)(a3 + 328) = *((_DWORD *)v37 + 2);
        *uint64_t v31 = v38;
        unint64_t v39 = a2[7];
        unint64_t v40 = a2[6] + 12;
        a2[6] = v40;
        BOOL v5 = v39 >= v40;
        unint64_t v41 = v39 - v40;
        if (!v5) {
          unint64_t v41 = 0;
        }
        if (v41 <= 0xB)
        {
LABEL_96:
          uint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_21573A000(v84, "Not enough data to read span");
          goto LABEL_97;
        }
        unint64_t v42 = a2[3] + v40;
        uint64_t v43 = *(void *)v42;
        *(_DWORD *)(a3 + 340) = *(_DWORD *)(v42 + 8);
        *(void *)(a3 + 332) = v43;
        a2[6] += 12;
        uint64_t v44 = a2[12];
        uint64_t v45 = a2[9];
        a2[6] = *(void *)(v44 - 8) + *(void *)(v45 - 8) + 8;
        a2[9] = v45 - 8;
        a2[12] = v44 - 8;
        if (v10 < 4) {
          goto LABEL_81;
        }
      }
LABEL_64:
      unint64_t v70 = a2[6];
      unint64_t v69 = a2[7];
      unint64_t v71 = v69 - v70;
      if (v69 < v70) {
        unint64_t v71 = 0;
      }
      if (v71 <= 3) {
        goto LABEL_92;
      }
      uint64_t v72 = a2[3];
      int v73 = *(_DWORD *)(v72 + v70);
      a2[6] = v70 + 4;
      *(_DWORD *)(a3 + 348) = v73;
      unint64_t v74 = v69 - (v70 + 4);
      if (v69 < v70 + 4) {
        unint64_t v74 = 0;
      }
      if (v74 <= 7)
      {
LABEL_92:
        uint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_21573A000(v84, "Not enough data to read");
      }
      else
      {
        unint64_t v75 = *(void *)(v72 + v70 + 4);
        unint64_t v76 = v70 + 12;
        a2[6] = v76;
        uint64_t v77 = *(char **)(a3 + 352);
        uint64_t v78 = *(char **)(a3 + 360);
        unint64_t v79 = (v78 - v77) >> 2;
        if (v75 <= v79)
        {
          if (v75 < v79)
          {
            uint64_t v78 = &v77[4 * v75];
            *(void *)(a3 + 360) = v78;
          }
        }
        else
        {
          sub_215958438(a3 + 352, v75 - v79);
          uint64_t v77 = *(char **)(a3 + 352);
          uint64_t v78 = *(char **)(a3 + 360);
          unint64_t v76 = a2[6];
          unint64_t v69 = a2[7];
        }
        unint64_t v80 = v78 - v77;
        BOOL v5 = v69 >= v76;
        unint64_t v81 = v69 - v76;
        if (!v5) {
          unint64_t v81 = 0;
        }
        if (v81 >= v80)
        {
          memcpy(v77, (const void *)(a2[3] + v76), v78 - v77);
          a2[6] += v80;
          goto LABEL_81;
        }
        uint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_21573A000(v84, "Not enough data to read span");
      }
LABEL_97:
      __cxa_throw(v84, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
    }
LABEL_84:
    uint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(v84, "Not enough data to read");
    goto LABEL_97;
  }
  if (*(unsigned char *)(a3 + 344)) {
    *(unsigned char *)(a3 + 344) = 0;
  }
  if (v10 >= 4) {
    goto LABEL_64;
  }
LABEL_81:
  if (v9 >= 3)
  {
    uint64_t v82 = a2[12];
    uint64_t v83 = a2[9];
    a2[6] = *(void *)(v82 - 8) + *(void *)(v83 - 8) + 8;
    a2[9] = v83 - 8;
    a2[12] = v82 - 8;
  }
}

void sub_2159C6AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  __cxa_free_exception(v57);
  sub_2159C276C(&a57);
  _Unwind_Resume(a1);
}

void sub_2159C6BCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C6BE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C6BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
}

void sub_2159C6C08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C6C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
}

void sub_2159C6C30(void *a1, uint64_t *a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    goto LABEL_16;
  }
  unint64_t v8 = *(void *)(a1[3] + v2);
  a1[6] = v2 + 8;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 2);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      uint64_t v10 = v9 + 12 * v8;
      a2[1] = v10;
    }
  }
  else
  {
    sub_2159C0D3C(a2, v8 - v11);
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
  }
  uint64_t v12 = v10 - v9;
  if (v12)
  {
    unint64_t v13 = a1[6];
    uint64_t v14 = 12 * (v12 / 12);
    while (1)
    {
      unint64_t v15 = a1[7];
      BOOL v4 = v15 >= v13;
      unint64_t v16 = v15 - v13;
      if (!v4) {
        unint64_t v16 = 0;
      }
      if (v16 <= 0xB) {
        break;
      }
      unint64_t v17 = a1[3] + v13;
      uint64_t v18 = *(void *)v17;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v17 + 8);
      *(void *)uint64_t v9 = v18;
      v9 += 12;
      unint64_t v13 = a1[6] + 12;
      a1[6] = v13;
      v14 -= 12;
      if (!v14) {
        return;
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
}

void sub_2159C6D78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C6D8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2159C6DA0(void *a1, void *a2)
{
  unint64_t v3 = a1[6];
  unint64_t v2 = a1[7];
  unint64_t v4 = v2 - v3;
  if (v2 < v3) {
    unint64_t v4 = 0;
  }
  if (v4 <= 7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    goto LABEL_14;
  }
  unint64_t v7 = *(void *)(a1[3] + v3);
  unint64_t v8 = v3 + 8;
  a1[6] = v8;
  uint64_t v9 = (char *)*a2;
  uint64_t v10 = (char *)a2[1];
  unint64_t v11 = &v10[-*a2];
  if (v7 <= (unint64_t)v11)
  {
    if (v7 < (unint64_t)v11)
    {
      uint64_t v10 = &v9[v7];
      a2[1] = &v9[v7];
    }
  }
  else
  {
    sub_215957E5C((uint64_t)a2, v7 - (void)v11);
    uint64_t v9 = (char *)*a2;
    uint64_t v10 = (char *)a2[1];
    unint64_t v8 = a1[6];
    unint64_t v2 = a1[7];
  }
  unint64_t v12 = v10 - v9;
  BOOL v13 = v2 >= v8;
  unint64_t v14 = v2 - v8;
  if (!v13) {
    unint64_t v14 = 0;
  }
  if (v14 < v12)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
LABEL_14:
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  uint64_t result = memcpy(v9, (const void *)(a1[3] + v8), v10 - v9);
  a1[6] += v12;
  return result;
}

void sub_2159C6E9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C6EB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C6EC4(void *a1, uint64_t *a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    goto LABEL_16;
  }
  unint64_t v8 = *(void *)(a1[3] + v2);
  a1[6] = v2 + 8;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a2) >> 2);
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      uint64_t v10 = v9 + 12 * v8;
      a2[1] = v10;
    }
  }
  else
  {
    sub_2159C1224(a2, v8 - v11);
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
  }
  uint64_t v12 = v10 - v9;
  if (v12)
  {
    unint64_t v13 = a1[6];
    uint64_t v14 = 12 * (v12 / 12);
    while (1)
    {
      unint64_t v15 = a1[7];
      BOOL v4 = v15 >= v13;
      unint64_t v16 = v15 - v13;
      if (!v4) {
        unint64_t v16 = 0;
      }
      if (v16 <= 0xB) {
        break;
      }
      unint64_t v17 = a1[3] + v13;
      uint64_t v18 = *(void *)v17;
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(v17 + 8);
      *(void *)uint64_t v9 = v18;
      v9 += 12;
      unint64_t v13 = a1[6] + 12;
      a1[6] = v13;
      v14 -= 12;
      if (!v14) {
        return;
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
}

void sub_2159C700C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C7020(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C7034(void *a1, char **a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    goto LABEL_16;
  }
  unint64_t v8 = *(void *)(a1[3] + v2);
  a1[6] = v2 + 8;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  unint64_t v11 = (v10 - *a2) >> 3;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      uint64_t v10 = &v9[8 * v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_2159C1588((uint64_t)a2, v8 - v11);
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
  }
  uint64_t v12 = v10 - v9;
  if (v12)
  {
    unint64_t v13 = a1[6];
    uint64_t v14 = 8 * (v12 >> 3);
    while (1)
    {
      unint64_t v15 = a1[7];
      BOOL v4 = v15 >= v13;
      unint64_t v16 = v15 - v13;
      if (!v4) {
        unint64_t v16 = 0;
      }
      if (v16 <= 7) {
        break;
      }
      *(void *)uint64_t v9 = *(void *)(a1[3] + v13);
      v9 += 8;
      unint64_t v13 = a1[6] + 8;
      a1[6] = v13;
      v14 -= 8;
      if (!v14) {
        return;
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
}

void sub_2159C7148(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C715C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C7170(void *a1, char **a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    goto LABEL_16;
  }
  unint64_t v8 = *(void *)(a1[3] + v2);
  a1[6] = v2 + 8;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  unint64_t v11 = (v10 - *a2) >> 3;
  if (v8 <= v11)
  {
    if (v8 < v11)
    {
      uint64_t v10 = &v9[8 * v8];
      a2[1] = v10;
    }
  }
  else
  {
    sub_2159C18C8((uint64_t)a2, v8 - v11);
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
  }
  uint64_t v12 = v10 - v9;
  if (v12)
  {
    unint64_t v13 = a1[6];
    uint64_t v14 = 8 * (v12 >> 3);
    while (1)
    {
      unint64_t v15 = a1[7];
      BOOL v4 = v15 >= v13;
      unint64_t v16 = v15 - v13;
      if (!v4) {
        unint64_t v16 = 0;
      }
      if (v16 <= 7) {
        break;
      }
      *(void *)uint64_t v9 = *(void *)(a1[3] + v13);
      v9 += 8;
      unint64_t v13 = a1[6] + 8;
      a1[6] = v13;
      v14 -= 8;
      if (!v14) {
        return;
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
LABEL_16:
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
}

void sub_2159C7284(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C7298(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_2159C72AC(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  unint64_t v3 = result[7];
  BOOL v4 = v3 >= v2;
  unint64_t v5 = v3 - v2;
  if (!v4) {
    unint64_t v5 = 0;
  }
  if (v5 <= 0xB) {
    goto LABEL_8;
  }
  unint64_t v6 = (uint64_t *)(result[3] + v2);
  uint64_t v7 = *v6;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)v6 + 2);
  *(void *)a2 = v7;
  unint64_t v8 = result[7];
  unint64_t v9 = result[6] + 12;
  result[6] = v9;
  BOOL v4 = v8 >= v9;
  unint64_t v10 = v8 - v9;
  if (!v4) {
    unint64_t v10 = 0;
  }
  if (v10 <= 0xB)
  {
LABEL_8:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read span");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unint64_t v11 = result[3] + v9;
  uint64_t v12 = *(void *)v11;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(v11 + 8);
  *(void *)(a2 + 12) = v12;
  result[6] += 12;
  return result;
}

void sub_2159C7388(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C739C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159C73B0(int *a1, unsigned char *a2, uint64_t *a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 3)
    {
      int v9 = 0;
      goto LABEL_9;
    }
    unsigned int v12 = 3;
    (*(void (**)(unsigned char *, unsigned int *))(*(void *)a2 + 104))(a2, &v12);
    if (v12 >= 5)
    {
      unsigned int v11 = v12;
      sub_2159C7500();
      sub_215E07C10((std::string *)&xmmword_26788E838, v11, 4u);
    }
    int v7 = *a1;
  }
  int v9 = 0;
  if (a4 >= 3 && v7 >= 1)
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    int v9 = 1;
  }
LABEL_9:
  if (a4 >= 4) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 < 3)
  {
    sub_2159C79E8(a2, a3, v10);
    if (!v9) {
      return;
    }
  }
  else
  {
    sub_2159C8108((uint64_t)a2, (uint64_t)a3, v10);
    if (!v9) {
      return;
    }
  }
  (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
}

void sub_2159C7500()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E798, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E798))
  {
    sub_2159C75D4();
    if (byte_26788E867 < 0)
    {
      sub_215738B0C(&xmmword_26788E838, (void *)qword_26788E850, unk_26788E858);
    }
    else
    {
      xmmword_26788E838 = *(_OWORD *)&qword_26788E850;
      qword_26788E848 = unk_26788E860;
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788E838, &dword_21572C000);
    __cxa_guard_release(&qword_26788E798);
  }
}

void sub_2159C75BC(_Unwind_Exception *a1)
{
}

void sub_2159C75D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E7A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E7A0))
  {
    sub_2159C77E0(__p);
    sub_2159C76B4(__p);
    if (v1 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit(MEMORY[0x263F8C0B8], &qword_26788E850, &dword_21572C000);
    __cxa_guard_release(&qword_26788E7A0);
  }
}

void sub_2159C7674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_26788E7A0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_26788E7A0);
  _Unwind_Resume(a1);
}

void sub_2159C76B4(void *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  unint64_t v2 = sub_2157EB0D8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(__dst, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __dst = v3;
  }
  sub_21573A150(&__p, (uint64_t)__dst, 1uLL);
  sub_215E19EAC(a1, (uint64_t *)&__p, (std::string *)&qword_26788E850, v4, v5);
  unint64_t v6 = (void **)__p;
  if (__p)
  {
    int v7 = v10;
    unint64_t v8 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      unint64_t v8 = __p;
    }
    unsigned int v10 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_2159C77B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2159C77E0(void *__dst)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E7A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E7A8))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::mesh::TriMeshDataSample<>]", qword_26788E868);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26788E868, &dword_21572C000);
    __cxa_guard_release(&qword_26788E7A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E7B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E7B0))
  {
    size_t v3 = sub_215747D98(qword_26788E868, "<", 0);
    sub_215747C90(qword_26788E868, 0, v3, qword_26788E880);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_26788E880, &dword_21572C000);
    __cxa_guard_release(&qword_26788E7B0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26788E7B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26788E7B8))
  {
    sub_215E19DF4((uint64_t)qword_26788E880, (uint64_t)&xmmword_26788E898);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_26788E898, &dword_21572C000);
    __cxa_guard_release(&qword_26788E7B8);
  }
  if (byte_26788E8AF < 0)
  {
    long long v2 = xmmword_26788E898;
    sub_215738B0C(__dst, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)std::string __dst = xmmword_26788E898;
    __dst[2] = unk_26788E8A8;
  }
}

void sub_2159C79A0(_Unwind_Exception *a1)
{
}

void sub_2159C79B8(_Unwind_Exception *a1)
{
}

void sub_2159C79D0(_Unwind_Exception *a1)
{
}

uint64_t *sub_2159C79E8(unsigned char *a1, uint64_t *a2, unsigned int a3)
{
  memset(v24, 0, sizeof(v24));
  uint64_t v25 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v27 = 0;
  memset(v28, 0, sizeof(v28));
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0;
  unint64_t v35 = 0;
  unint64_t v34 = 0;
  uint64_t v36 = 0;
  v37[32] = 0;
  LOBYTE(v38) = 0;
  char v41 = 0;
  memset(v37, 0, 28);
  memset(&v37[8], 0, 28);
  memset(&v37[16], 0, 28);
  memset(&v37[24], 0, 28);
  sub_2159C884C((uint64_t)a1, v24);
  v23[0] = (_DWORD *)&v25 + 1;
  sub_2159C89A0(a1, v23);
  sub_2159C884C((uint64_t)a1, v26);
  v23[0] = (_DWORD *)&v27 + 1;
  sub_2159C89A0(a1, v23);
  sub_2159C884C((uint64_t)a1, v28);
  v23[0] = (_DWORD *)&v29 + 1;
  sub_2159C89A0(a1, v23);
  v23[0] = (_DWORD *)(v31 - v30);
  (*(void (**)(unsigned char *, _DWORD **))(*(void *)a1 + 120))(a1, v23);
  unint64_t v6 = v31;
  int v7 = v30;
  if (v23[0] <= (_DWORD *)(v31 - v30))
  {
    if (v23[0] < (_DWORD *)(v31 - v30))
    {
      unint64_t v6 = &v30[(unint64_t)v23[0]];
      uint64_t v31 = &v30[(unint64_t)v23[0]];
    }
  }
  else
  {
    sub_215957E5C((uint64_t)&v30, (size_t)v23[0] - (v31 - v30));
    int v7 = v30;
    unint64_t v6 = v31;
  }
  if (v6 != v7)
  {
    unint64_t v8 = (char *)(v6 - v7);
    do
    {
      (*(void (**)(unsigned char *, char *))(*(void *)a1 + 80))(a1, v7++);
      --v8;
    }
    while (v8);
  }
  v23[0] = (_DWORD *)&v33 + 1;
  sub_2159C89A0(a1, v23);
  v23[0] = (_DWORD *)(v35 - v34);
  (*(void (**)(unsigned char *, _DWORD **))(*(void *)a1 + 120))(a1, v23);
  int v9 = v35;
  unsigned int v10 = v34;
  if (v23[0] <= (_DWORD *)(v35 - v34))
  {
    if (v23[0] < (_DWORD *)(v35 - v34))
    {
      int v9 = &v34[(unint64_t)v23[0]];
      unint64_t v35 = &v34[(unint64_t)v23[0]];
    }
  }
  else
  {
    sub_215957E5C((uint64_t)&v34, (size_t)v23[0] - (v35 - v34));
    unsigned int v10 = v34;
    int v9 = v35;
  }
  if (v9 != v10)
  {
    unsigned int v11 = (char *)(v9 - v10);
    do
    {
      (*(void (**)(unsigned char *, char *))(*(void *)a1 + 80))(a1, v10++);
      --v11;
    }
    while (v11);
  }
  sub_2159C8B44((uint64_t)a1, (uint64_t *)&v37[1]);
  v23[0] = (_DWORD *)((uint64_t)(*(void *)&v37[11] - *(void *)&v37[9]) >> 3);
  (*(void (**)(unsigned char *, _DWORD **))(*(void *)a1 + 120))(a1, v23);
  uint64_t v12 = *(void *)&v37[11];
  uint64_t v13 = *(void *)&v37[9];
  unint64_t v14 = (uint64_t)(*(void *)&v37[11] - *(void *)&v37[9]) >> 3;
  if (v23[0] <= (_DWORD *)v14)
  {
    if (v23[0] < (_DWORD *)v14)
    {
      uint64_t v12 = *(void *)&v37[9] + 8 * (uint64_t)v23[0];
      *(void *)&v37[11] = v12;
    }
  }
  else
  {
    sub_2159C1588((uint64_t)&v37[9], (unint64_t)v23[0] - v14);
    uint64_t v13 = *(void *)&v37[9];
    uint64_t v12 = *(void *)&v37[11];
  }
  if (v12 != v13)
  {
    uint64_t v15 = v12;
    do
    {
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 104))(a1, v13);
      uint64_t v16 = v13 + 4;
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 104))(a1, v16);
      uint64_t v13 = v16 + 4;
    }
    while (v13 != v15);
  }
  v23[0] = (_DWORD *)((uint64_t)(*(void *)&v37[19] - *(void *)&v37[17]) >> 3);
  (*(void (**)(unsigned char *, _DWORD **))(*(void *)a1 + 120))(a1, v23);
  uint64_t v17 = *(void *)&v37[19];
  uint64_t v18 = *(void *)&v37[17];
  unint64_t v19 = (uint64_t)(*(void *)&v37[19] - *(void *)&v37[17]) >> 3;
  if (v23[0] <= (_DWORD *)v19)
  {
    if (v23[0] < (_DWORD *)v19)
    {
      uint64_t v17 = *(void *)&v37[17] + 8 * (uint64_t)v23[0];
      *(void *)&v37[19] = v17;
    }
  }
  else
  {
    sub_2159C18C8((uint64_t)&v37[17], (unint64_t)v23[0] - v19);
    uint64_t v18 = *(void *)&v37[17];
    uint64_t v17 = *(void *)&v37[19];
  }
  if (v17 != v18)
  {
    uint64_t v20 = v17;
    do
    {
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, v18);
      uint64_t v21 = v18 + 4;
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 128))(a1, v21);
      uint64_t v18 = v21 + 4;
    }
    while (v18 != v20);
  }
  sub_2159C8B44((uint64_t)a1, (uint64_t *)&v37[25]);
  if (a3 >= 2)
  {
    char v42 = 0;
    (*(void (**)(unsigned char *, char *))(*(void *)a1 + 80))(a1, &v42);
    if (v42)
    {
      if (!v41)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        char v41 = 1;
      }
      LODWORD(v23[0]) = 1;
      (*(void (**)(unsigned char *, _DWORD **))(*(void *)a1 + 104))(a1, v23);
      (*(void (**)(unsigned char *, uint64_t *))(*(void *)a1 + 128))(a1, &v38);
      (*(void (**)(unsigned char *, char *))(*(void *)a1 + 128))(a1, (char *)&v38 + 4);
      (*(void (**)(unsigned char *, uint64_t *))(*(void *)a1 + 128))(a1, &v39);
      (*(void (**)(unsigned char *, char *))(*(void *)a1 + 128))(a1, (char *)&v39 + 4);
      (*(void (**)(unsigned char *, uint64_t *))(*(void *)a1 + 128))(a1, &v40);
      (*(void (**)(unsigned char *, char *))(*(void *)a1 + 128))(a1, (char *)&v40 + 4);
    }
    else if (v41)
    {
      char v41 = 0;
    }
  }
  sub_2159C1E88((uint64_t)v23, (uint64_t)v24);
  sub_2159C1FD0(a2, (uint64_t)v23);
  sub_2159A0134((uint64_t *)v23);
  return sub_2159C276C(v24);
}

void sub_2159C8090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C80A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C80B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C80CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C80E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C80F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
}

void sub_2159C8108(uint64_t a1, uint64_t a2, unsigned int a3)
{
  sub_2159C884C(a1, (uint64_t *)a2);
  unint64_t v27 = a2 + 32;
  sub_2159C89A0((unsigned char *)a1, (_DWORD **)&v27);
  sub_2159C884C(a1, (uint64_t *)(a2 + 40));
  unint64_t v27 = a2 + 72;
  sub_2159C89A0((unsigned char *)a1, (_DWORD **)&v27);
  sub_2159C884C(a1, (uint64_t *)(a2 + 80));
  unint64_t v27 = a2 + 112;
  sub_2159C89A0((unsigned char *)a1, (_DWORD **)&v27);
  unint64_t v27 = *(void *)(a2 + 128) - *(void *)(a2 + 120);
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v27);
  int v7 = *(char **)(a2 + 120);
  unint64_t v6 = *(char **)(a2 + 128);
  if (v27 <= v6 - v7)
  {
    if (v27 < v6 - v7)
    {
      unint64_t v6 = &v7[v27];
      *(void *)(a2 + 128) = &v7[v27];
    }
  }
  else
  {
    sub_215957E5C(a2 + 120, v27 - (v6 - v7));
    int v7 = *(char **)(a2 + 120);
    unint64_t v6 = *(char **)(a2 + 128);
  }
  if (v6 != v7)
  {
    unint64_t v8 = (char *)(v6 - v7);
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, v7++);
      --v8;
    }
    while (v8);
  }
  unint64_t v27 = a2 + 152;
  sub_2159C89A0((unsigned char *)a1, (_DWORD **)&v27);
  unint64_t v27 = *(void *)(a2 + 168) - *(void *)(a2 + 160);
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v27);
  unsigned int v10 = *(char **)(a2 + 160);
  int v9 = *(char **)(a2 + 168);
  if (v27 <= v9 - v10)
  {
    if (v27 < v9 - v10)
    {
      int v9 = &v10[v27];
      *(void *)(a2 + 168) = &v10[v27];
    }
  }
  else
  {
    sub_215957E5C(a2 + 160, v27 - (v9 - v10));
    unsigned int v10 = *(char **)(a2 + 160);
    int v9 = *(char **)(a2 + 168);
  }
  if (v9 != v10)
  {
    unsigned int v11 = (char *)(v9 - v10);
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, v10++);
      --v11;
    }
    while (v11);
  }
  sub_2159C8B44(a1, (uint64_t *)(a2 + 192));
  unint64_t v27 = (uint64_t)(*(void *)(a2 + 232) - *(void *)(a2 + 224)) >> 3;
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v27);
  uint64_t v13 = *(void *)(a2 + 224);
  uint64_t v12 = *(void *)(a2 + 232);
  unint64_t v14 = (v12 - v13) >> 3;
  if (v27 <= v14)
  {
    if (v27 < v14)
    {
      uint64_t v12 = v13 + 8 * v27;
      *(void *)(a2 + 232) = v12;
    }
  }
  else
  {
    sub_2159C1588(a2 + 224, v27 - v14);
    uint64_t v13 = *(void *)(a2 + 224);
    uint64_t v12 = *(void *)(a2 + 232);
  }
  if (v12 != v13)
  {
    uint64_t v15 = v12;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v13);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v13 + 4);
      v13 += 8;
    }
    while (v13 != v15);
  }
  unint64_t v27 = (uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 3;
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v27);
  uint64_t v17 = *(void *)(a2 + 256);
  uint64_t v16 = *(void *)(a2 + 264);
  unint64_t v18 = (v16 - v17) >> 3;
  if (v27 <= v18)
  {
    if (v27 < v18)
    {
      uint64_t v16 = v17 + 8 * v27;
      *(void *)(a2 + 264) = v16;
    }
  }
  else
  {
    sub_2159C18C8(a2 + 256, v27 - v18);
    uint64_t v17 = *(void *)(a2 + 256);
    uint64_t v16 = *(void *)(a2 + 264);
  }
  if (v16 != v17)
  {
    uint64_t v19 = v16;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v17);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v17 + 4);
      v17 += 8;
    }
    while (v17 != v19);
  }
  sub_2159C8B44(a1, (uint64_t *)(a2 + 288));
  char v26 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)a1 + 80))(a1, &v26);
  if (v26)
  {
    if (!*(unsigned char *)(a2 + 344))
    {
      *(void *)(a2 + 320) = 0;
      *(void *)(a2 + 328) = 0;
      *(void *)(a2 + 336) = 0;
      *(unsigned char *)(a2 + 344) = 1;
    }
    int v20 = *(_DWORD *)(a1 + 8);
    LODWORD(v27) = 2;
    (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 104))(a1, &v27);
    if (v20 >= 1)
    {
      if (v20 == 2)
      {
        if (v27 >= 2)
        {
          LODWORD(v27) = 2;
          (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 104))(a1, &v27);
          unsigned int v21 = v27;
          if (v27 >= 3)
          {
            sub_2159C1AC4();
            sub_215E07C10((std::string *)&xmmword_26788E7C0, v21, 2u);
          }
          goto LABEL_40;
        }
      }
      else if (v27 > 1)
      {
LABEL_40:
        (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 320);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 324);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 328);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 332);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 336);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 340);
        (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
        goto LABEL_42;
      }
    }
    sub_2159C8C98(a1, a2 + 320, v27);
  }
  else if (*(unsigned char *)(a2 + 344))
  {
    *(unsigned char *)(a2 + 344) = 0;
  }
LABEL_42:
  if (a3 >= 4)
  {
    unint64_t v27 = a2 + 348;
    sub_2159C89A0((unsigned char *)a1, (_DWORD **)&v27);
    unint64_t v27 = (uint64_t)(*(void *)(a2 + 360) - *(void *)(a2 + 352)) >> 2;
    (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v27);
    uint64_t v23 = *(void *)(a2 + 352);
    uint64_t v22 = *(void *)(a2 + 360);
    unint64_t v24 = (v22 - v23) >> 2;
    if (v27 <= v24)
    {
      if (v27 < v24)
      {
        uint64_t v22 = v23 + 4 * v27;
        *(void *)(a2 + 360) = v22;
      }
    }
    else
    {
      sub_215958438(a2 + 352, v27 - v24);
      uint64_t v23 = *(void *)(a2 + 352);
      uint64_t v22 = *(void *)(a2 + 360);
    }
    if (v22 != v23)
    {
      uint64_t v25 = 4 * ((v22 - v23) >> 2);
      do
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v23);
        v23 += 4;
        v25 -= 4;
      }
      while (v25);
    }
  }
}

void sub_2159C884C(uint64_t a1, uint64_t *a2)
{
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v8);
  uint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 2);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      unint64_t v4 = v5 + 12 * v8;
      a2[1] = v4;
    }
  }
  else
  {
    sub_2159C0D3C(a2, v8 - v6);
    uint64_t v5 = *a2;
    unint64_t v4 = a2[1];
  }
  if (v4 != v5)
  {
    unint64_t v7 = v4;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v5);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v5 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v5 + 8);
      v5 += 12;
    }
    while (v5 != v7);
  }
}

uint64_t sub_2159C89A0(unsigned char *a1, _DWORD **a2)
{
  if ((a1[12] & 2) != 0)
  {
    memset(__p, 0, sizeof(__p));
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, __p);
    operator new();
  }
  LODWORD(__p[0]) = 0;
  uint64_t result = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a1 + 104))(a1, __p);
  **a2 = __p[0];
  return result;
}

void sub_2159C8ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    sub_215E15464((uint64_t)&a17, v18);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2159C8B44(uint64_t a1, uint64_t *a2)
{
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  (*(void (**)(uint64_t, unint64_t *))(*(void *)a1 + 120))(a1, &v8);
  uint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a2) >> 2);
  if (v8 <= v6)
  {
    if (v8 < v6)
    {
      unint64_t v4 = v5 + 12 * v8;
      a2[1] = v4;
    }
  }
  else
  {
    sub_2159C1224(a2, v8 - v6);
    uint64_t v5 = *a2;
    unint64_t v4 = a2[1];
  }
  if (v4 != v5)
  {
    unint64_t v7 = v4;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v5);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v5 + 4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v5 + 8);
      v5 += 12;
    }
    while (v5 != v7);
  }
}

__n64 sub_2159C8C98(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 < 2)
  {
    memset(v9, 0, 24);
    (*(void (**)(uint64_t, _OWORD *))(*(void *)a1 + 128))(a1, v9);
    (*(void (**)(uint64_t, char *))(*(void *)a1 + 128))(a1, (char *)v9 + 4);
    (*(void (**)(uint64_t, char *))(*(void *)a1 + 128))(a1, (char *)v9 + 8);
    (*(void (**)(uint64_t, unint64_t))(*(void *)a1 + 128))(a1, (unint64_t)v9 | 0xC);
    (*(void (**)(uint64_t, _OWORD *))(*(void *)a1 + 128))(a1, &v9[1]);
    (*(void (**)(uint64_t, char *))(*(void *)a1 + 128))(a1, (char *)&v9[1] + 4);
    long long v7 = v9[0];
    int32x2_t v8 = *(int32x2_t *)((char *)v9 + 12);
    HIDWORD(v7) = HIDWORD(v9[0]);
    *(_OWORD *)a2 = v7;
    result.n64_u32[0] = vdup_lane_s32(v8, 1).u32[0];
    result.n64_u32[1] = DWORD1(v9[1]);
    *(__n64 *)(a2 + 16) = result;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 4);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 12);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, a2 + 16);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)a1 + 128);
    v5(a1, a2 + 20);
  }
  return result;
}

void sub_2159C8F48(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  operator new();
}

void sub_2159C9058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159C9094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_215733368(v10);
  MEMORY[0x2166C4D20](v9, 0x10B3C40E92279A6);
  sub_215733368((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159C90C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_2159C90DC(uint64_t a1, uint64_t a2)
{
  v12[0] = a1;
  v12[1] = a1 + 32;
  unsigned char v12[2] = a1 + 40;
  v12[3] = a1 + 72;
  void v12[4] = a1 + 80;
  v12[5] = a1 + 112;
  v12[6] = a1 + 120;
  v12[7] = a1 + 152;
  v12[8] = a1 + 160;
  v12[9] = a1 + 192;
  v12[10] = a1 + 224;
  v12[11] = a1 + 256;
  v12[12] = a1 + 288;
  v12[13] = a1 + 320;
  uint64_t v13 = (_DWORD *)(a1 + 348);
  unint64_t v14 = (uint64_t *)(a1 + 352);
  v9[0] = a2;
  v9[1] = a2 + 32;
  _OWORD v9[2] = a2 + 40;
  uint64_t v9[3] = a2 + 72;
  v9[4] = a2 + 80;
  v9[5] = a2 + 112;
  v9[6] = a2 + 120;
  unsigned char v9[7] = a2 + 152;
  v9[8] = a2 + 160;
  v9[9] = a2 + 192;
  v9[10] = a2 + 224;
  v9[11] = a2 + 256;
  v9[12] = a2 + 288;
  _OWORD v9[13] = a2 + 320;
  uint64_t v10 = (_DWORD *)(a2 + 348);
  uint64_t v11 = a2 + 352;
  if (!sub_2159C9254((uint64_t)&v15, (uint64_t)v12, (uint64_t)v9)) {
    return 0;
  }
  if (*v13 != *v10) {
    return 0;
  }
  uint64_t v3 = *v14;
  uint64_t v2 = v14[1];
  unint64_t v4 = *(float **)v11;
  if (v2 - *v14 != *(void *)(v11 + 8) - *(void *)v11) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 4;
  do
  {
    float v6 = *v4++;
    BOOL result = *(float *)(v5 - 4) == v6;
    BOOL v8 = *(float *)(v5 - 4) != v6 || v5 == v2;
    v5 += 4;
  }
  while (!v8);
  return result;
}

BOOL sub_2159C9254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_2159C9410((uint64_t)&v26, a2, a3)) {
    return 0;
  }
  float v6 = **(float ***)(a2 + 88);
  uint64_t v5 = *(float **)(*(void *)(a2 + 88) + 8);
  uint64_t v7 = **(void **)(a3 + 88);
  if ((char *)v5 - (char *)v6 != *(void *)(*(void *)(a3 + 88) + 8) - v7) {
    return 0;
  }
  if (v6 != v5)
  {
    BOOL v8 = (float *)(v7 + 4);
    do
    {
      float v9 = *(v8 - 1);
      BOOL v10 = *v6 == v9;
      if (*v6 == v9) {
        BOOL v10 = v6[1] == *v8;
      }
      if (!v10) {
        return 0;
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v5);
  }
  uint64_t v12 = **(void **)(a2 + 96);
  uint64_t v11 = *(void *)(*(void *)(a2 + 96) + 8);
  uint64_t v13 = **(void **)(a3 + 96);
  if (v11 - v12 != *(void *)(*(void *)(a3 + 96) + 8) - v13) {
    return 0;
  }
  if (v12 != v11)
  {
    while (*(void *)v12 == *(void *)v13 && *(_DWORD *)(v12 + 8) == (unint64_t)*(unsigned int *)(v13 + 8))
    {
      v12 += 12;
      v13 += 12;
      if (v12 == v11) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v15 = *(void *)(a2 + 104);
  uint64_t v16 = *(void *)(a3 + 104);
  if (*(unsigned char *)(v15 + 24)) {
    BOOL v17 = *(unsigned char *)(v16 + 24) == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    return (*(unsigned char *)(v15 + 24) != 0) == (*(unsigned char *)(v16 + 24) != 0);
  }
  BOOL v19 = *(float *)v15 == *(float *)v16;
  if (*(float *)v15 == *(float *)v16)
  {
    float v20 = *(float *)(v15 + 4);
    float v21 = *(float *)(v16 + 4);
    BOOL v19 = v20 == v21;
    if (v20 == v21) {
      BOOL v19 = *(float *)(v15 + 8) == *(float *)(v16 + 8);
    }
  }
  if (!v19) {
    return 0;
  }
  float v22 = *(float *)(v15 + 12);
  float v23 = *(float *)(v16 + 12);
  BOOL result = v22 == v23;
  if (v22 == v23)
  {
    float v24 = *(float *)(v15 + 16);
    float v25 = *(float *)(v16 + 16);
    BOOL result = v24 == v25;
    if (v24 == v25) {
      return *(float *)(v15 + 20) == *(float *)(v16 + 20);
    }
  }
  return result;
}

BOOL sub_2159C9410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_2159C9504((uint64_t)&v17, a2, a3)) {
    return 0;
  }
  uint64_t v6 = **(void **)(a2 + 72);
  uint64_t v5 = *(void *)(*(void *)(a2 + 72) + 8);
  uint64_t v7 = **(void **)(a3 + 72);
  if (v5 - v6 != *(void *)(*(void *)(a3 + 72) + 8) - v7) {
    return 0;
  }
  if (v6 != v5)
  {
    while (*(void *)v6 == *(void *)v7 && *(_DWORD *)(v6 + 8) == (unint64_t)*(unsigned int *)(v7 + 8))
    {
      v6 += 12;
      v7 += 12;
      if (v6 == v5) {
        goto LABEL_10;
      }
    }
    return 0;
  }
LABEL_10:
  BOOL v10 = **(char ***)(a2 + 80);
  float v9 = *(char **)(*(void *)(a2 + 80) + 8);
  uint64_t v11 = **(uint64_t ***)(a3 + 80);
  if (v9 - v10 != *(void *)(*(void *)(a3 + 80) + 8) - (void)v11) {
    return 0;
  }
  if (v10 == v9) {
    return 1;
  }
  do
  {
    uint64_t v13 = *(void *)v10;
    v10 += 8;
    uint64_t v12 = v13;
    uint64_t v14 = *v11++;
    BOOL result = v12 == v14;
  }
  while (v12 == v14 && v10 != v9);
  return result;
}

BOOL sub_2159C9504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_2159C95D4((uint64_t)&v12, a2, (uint64_t **)a3)
    && **(_DWORD **)(a2 + 40) == **(_DWORD **)(a3 + 40)
    && (uint64_t v5 = *(void *)(a2 + 48),
        uint64_t v6 = *(void *)(a3 + 48),
        size_t v7 = *(void *)(v5 + 8) - *(void *)v5,
        v7 == *(void *)(v6 + 8) - *(void *)v6)
    && !memcmp(*(const void **)v5, *(const void **)v6, v7)
    && **(_DWORD **)(a2 + 56) == **(_DWORD **)(a3 + 56)
    && (uint64_t v8 = *(void *)(a2 + 64),
        uint64_t v9 = *(void *)(a3 + 64),
        size_t v10 = *(void *)(v8 + 8) - *(void *)v8,
        v10 == *(void *)(v9 + 8) - *(void *)v9))
  {
    return memcmp(*(const void **)v8, *(const void **)v9, v10) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL sub_2159C95D4(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  unint64_t v4 = **(float ***)a2;
  uint64_t v3 = *(float **)(*(void *)a2 + 8);
  uint64_t v5 = **a3;
  if ((char *)v3 - (char *)v4 != (*a3)[1] - v5) {
    return 0;
  }
  if (v4 != v3)
  {
    uint64_t v6 = (float *)(v5 + 4);
    do
    {
      float v7 = *(v6 - 1);
      BOOL v8 = *v4 == v7;
      if (*v4 == v7)
      {
        float v9 = v4[1];
        BOOL v8 = v9 == *v6;
        if (v9 == *v6) {
          BOOL v8 = v4[2] == v6[1];
        }
      }
      if (!v8) {
        return 0;
      }
      v4 += 3;
      v6 += 3;
    }
    while (v4 != v3);
  }
  if (**(_DWORD **)(a2 + 8) != *(_DWORD *)a3[1]) {
    return 0;
  }
  uint64_t v11 = **(float ***)(a2 + 16);
  size_t v10 = *(float **)(*(void *)(a2 + 16) + 8);
  uint64_t v12 = *a3[2];
  if ((char *)v10 - (char *)v11 != a3[2][1] - v12) {
    return 0;
  }
  if (v11 != v10)
  {
    uint64_t v13 = (float *)(v12 + 4);
    do
    {
      float v14 = *(v13 - 1);
      BOOL v15 = *v11 == v14;
      if (*v11 == v14)
      {
        float v16 = v11[1];
        BOOL v15 = v16 == *v13;
        if (v16 == *v13) {
          BOOL v15 = v11[2] == v13[1];
        }
      }
      if (!v15) {
        return 0;
      }
      v11 += 3;
      v13 += 3;
    }
    while (v11 != v10);
  }
  if (**(_DWORD **)(a2 + 24) != *(_DWORD *)a3[3]) {
    return 0;
  }
  uint64_t v18 = **(void **)(a2 + 32);
  uint64_t v17 = *(void *)(*(void *)(a2 + 32) + 8);
  uint64_t v19 = *a3[4];
  if (v17 - v18 != a3[4][1] - v19) {
    return 0;
  }
  if (v18 == v17) {
    return 1;
  }
  uint64_t v20 = v18 + 12;
  float v21 = (float *)(v19 + 4);
  do
  {
    float v24 = *(float *)(v20 - 12);
    float v25 = *(v21 - 1);
    BOOL result = v24 == v25;
    if (v24 == v25)
    {
      float v26 = *(float *)(v20 - 8);
      BOOL result = v26 == *v21;
      if (v26 == *v21) {
        BOOL result = *(float *)(v20 - 4) == v21[1];
      }
    }
    BOOL v23 = !result || v20 == v17;
    v20 += 12;
    v21 += 3;
  }
  while (!v23);
  return result;
}

void *sub_2159C9788(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = a2 + 16;
  int __src = 6;
  uint64_t v7 = a1 + 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v15, 4);
  unsigned int v8 = __src;
  sub_215D02034((void *)a1);
  sub_2159AA330(a1, v6, v8);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
  *(void *)(v9 + 10) = *(void *)(a1 + 32) - v9 - 18;
  *(void *)(a1 + 56) -= 8;
  BOOL result = sub_2159BE69C(a1, a2 + 192);
  if (a3 >= 3)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 584) - *(void *)(a2 + 576)) >> 3);
    BOOL result = sub_215D04A50(v7, *(char **)(a1 + 32), (char *)&v15, (char *)&v16, 8);
    uint64_t v11 = *(char **)(a2 + 576);
    uint64_t v12 = *(void *)(a2 + 584) - (void)v11;
    if (v12)
    {
      uint64_t v13 = 24 * (v12 / 24);
      do
      {
        BOOL result = sub_215D023C8(a1, v11);
        v11 += 24;
        v13 -= 24;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t sub_2159C98D0(const void *a1, uint64_t a2)
{
  uint64_t v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675CB8, 0);
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    int v5 = *((unsigned __int8 *)v3 + 104);
    v3[11] = "info";
    v3[12] = 4;
    if (!v5) {
      *((unsigned char *)v3 + 104) = 1;
    }
    sub_215DF07E4((uint64_t)v3);
    v9[0] = "version";
    v9[1] = 7;
    unsigned int v10 = 6;
    int v6 = *(unsigned __int8 *)(v4 + 104);
    *(void *)(v4 + 88) = "version";
    *(void *)(v4 + 96) = 7;
    if (!v6) {
      *(unsigned char *)(v4 + 104) = 1;
    }
    sub_215DF1DC8((void *)v4, &v10);
    if (v10 >= 6) {
      unsigned int v7 = 6;
    }
    else {
      unsigned int v7 = v10;
    }
    if (v7 >= 3) {
      sub_2159AC908(v4, a2 + 16);
    }
    sub_2159AC714((uint64_t)v9, v4);
  }
  return 0;
}

uint64_t sub_2159C9B2C(const void *a1, uint64_t a2)
{
  uint64_t v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_26C6851F8, (const struct __class_type_info *)&unk_26C675D78, 0);
  uint64_t v4 = (uint64_t)v3;
  if (v3)
  {
    int v5 = *((unsigned __int8 *)v3 + 104);
    v3[11] = "info";
    v3[12] = 4;
    if (!v5) {
      *((unsigned char *)v3 + 104) = 1;
    }
    sub_215DF01A0((uint64_t)v3);
    v9[0] = "version";
    v9[1] = 7;
    unsigned int v10 = 6;
    int v6 = *(unsigned __int8 *)(v4 + 104);
    *(void *)(v4 + 88) = "version";
    *(void *)(v4 + 96) = 7;
    if (!v6) {
      *(unsigned char *)(v4 + 104) = 1;
    }
    sub_215DF0F9C((void *)v4, &v10);
    if (v10 >= 6) {
      unsigned int v7 = 6;
    }
    else {
      unsigned int v7 = v10;
    }
    if (v7 >= 3) {
      sub_2159B191C(v4, a2 + 16);
    }
    sub_2159B1728((uint64_t)v9, v4);
  }
  return 0;
}

double sub_2159C9D88(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = a2 + 16;
  LODWORD(__p) = 6;
  sub_215DFABD4(a1, &__p);
  unsigned int v7 = __p;
  if (__p >= 6) {
    unsigned int v8 = 6;
  }
  else {
    unsigned int v8 = __p;
  }
  if (v8 < 3)
  {
    sub_2159B3640((uint64_t)&__p, a1, v6, v8);
    if (v7 < 3) {
      goto LABEL_9;
    }
LABEL_8:
    if (*(unsigned char *)(a1 + 131)) {
      goto LABEL_9;
    }
    while (1)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
        goto LABEL_9;
      }
      sub_215DFD700(a1, (uint64_t)&__p);
      if (v18 < 0)
      {
        if (v17 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_26:
          char v13 = 0;
          if (v18 < 0) {
            goto LABEL_29;
          }
          goto LABEL_15;
        }
      }
      else if (v18 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
      {
        goto LABEL_26;
      }
      char v13 = 1;
      if (v18 < 0) {
LABEL_29:
      }
        operator delete(__p);
LABEL_15:
      if (*(unsigned char *)(a1 + 131)) {
        char v12 = 0;
      }
      else {
        char v12 = v13;
      }
      if ((v12 & 1) == 0) {
        goto LABEL_9;
      }
    }
  }
  sub_2159B3834(a1, v6, v8);
  if (v7 >= 3) {
    goto LABEL_8;
  }
LABEL_9:
  LODWORD(__p) = 4;
  sub_215DFABD4(a1, &__p);
  unsigned int v9 = __p;
  if (__p >= 4) {
    unsigned int v10 = 4;
  }
  else {
    unsigned int v10 = __p;
  }
  if (v10 < 3)
  {
    sub_2159C51A0((uint64_t)&__p, a1, (uint64_t *)(a2 + 192), v10);
    if (v9 < 3) {
      goto LABEL_32;
    }
LABEL_31:
    if (*(unsigned char *)(a1 + 131)) {
      goto LABEL_32;
    }
    while (1)
    {
      if ((*(unsigned char *)(*(void *)(a1 + 16) + *(void *)(**(void **)(a1 + 16) - 24) + 32) & 2) != 0) {
        goto LABEL_32;
      }
      sub_215DFD700(a1, (uint64_t)&__p);
      if (v18 < 0)
      {
        if (v17 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_46:
          char v15 = 0;
          if (v18 < 0) {
            goto LABEL_49;
          }
          goto LABEL_35;
        }
      }
      else if (v18 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
      {
        goto LABEL_46;
      }
      char v15 = 1;
      if (v18 < 0) {
LABEL_49:
      }
        operator delete(__p);
LABEL_35:
      if (*(unsigned char *)(a1 + 131)) {
        char v14 = 0;
      }
      else {
        char v14 = v15;
      }
      if ((v14 & 1) == 0) {
        goto LABEL_32;
      }
    }
  }
  sub_2159C5A1C(a1, a2 + 192, v10);
  if (v9 >= 3) {
    goto LABEL_31;
  }
LABEL_32:
  if (a3 >= 3) {
    *(void *)&double result = sub_2159B41A0(a1, (char **)(a2 + 576)).n128_u64[0];
  }
  return result;
}

void sub_2159C9FF8(void **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = a2 + 16;
  unsigned int v7 = (void (**)(void **, unsigned int *))*a1;
  uint64_t v11 = a1[1];
  unsigned int v12 = 6;
  v7[13](a1, &v12);
  if ((int)v11 < 1)
  {
    if (v12 < 3) {
      sub_2159B6FFC((uint64_t)&v12, a1, v6, v12);
    }
    else {
      sub_2159B71F0(a1, v6, v12);
    }
  }
  else
  {
    sub_2159B6970((int *)&v11, a1, v6, v12);
  }
  unsigned int v8 = (void (**)(void **, unsigned int *))*a1;
  uint64_t v11 = a1[1];
  int v9 = (int)v11;
  unsigned int v12 = 4;
  v8[13](a1, &v12);
  if (v9 >= 1)
  {
    sub_2159C73B0((int *)&v11, a1, (uint64_t *)(a2 + 192), v12);
    if (a3 < 3) {
      return;
    }
    goto LABEL_13;
  }
  unsigned int v10 = (uint64_t *)(a2 + 192);
  if (v12 < 3)
  {
    sub_2159C79E8(a1, v10, v12);
    if (a3 < 3) {
      return;
    }
    goto LABEL_13;
  }
  sub_2159C8108((uint64_t)a1, (uint64_t)v10, v12);
  if (a3 >= 3) {
LABEL_13:
  }
    sub_2159B8040((uint64_t)a1, (char **)(a2 + 576));
}

uint64_t sub_2159CA15C(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v10 = a2;
  uint64_t v11 = "{";
  uint64_t v12 = a2;
  char v13 = "{";
  char v14 = "{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_6;
  }
  char v15 = &v10;
  ((void (*)(uint64_t **))off_26C674C98[v3])(&v15);
  sub_2157D208C((uint64_t)&v10, a2, a3);
  uint64_t v10 = a2;
  uint64_t v11 = ",";
  uint64_t v12 = a2;
  char v13 = ",";
  char v14 = ",";
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    goto LABEL_6;
  }
  char v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_26C674C98[v6])(&v15, a2);
  sub_2157D208C((uint64_t)&v10, a2, a3 + 1);
  uint64_t v10 = a2;
  uint64_t v11 = ",";
  uint64_t v12 = a2;
  char v13 = ",";
  char v14 = ",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_6;
  }
  char v15 = &v10;
  ((void (*)(uint64_t **, uint64_t))off_26C674C98[v7])(&v15, a2);
  sub_2157D208C((uint64_t)&v10, a2, a3 + 2);
  uint64_t v10 = a2;
  uint64_t v11 = "}";
  uint64_t v12 = a2;
  char v13 = "}";
  char v14 = "}";
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
LABEL_6:
  }
    sub_215742D4C();
  char v15 = &v10;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C674C98[v8])(&v15, a2);
}

uint64_t sub_2159CA2B0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v14 = a2;
  char v15 = (std::string *)"{";
  uint64_t v16 = a2;
  uint64_t v17 = (std::string *)"{";
  char v18 = (std::string *)"{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *))off_26C674C98[v3])(&v13);
  std::to_string(&v13, *a3);
  uint64_t v14 = a2;
  char v15 = &v13;
  uint64_t v16 = a2;
  uint64_t v17 = &v13;
  char v18 = &v13;
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    sub_215742D4C();
  }
  uint64_t v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C674B78[v6])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  char v15 = (std::string *)",";
  uint64_t v16 = a2;
  uint64_t v17 = (std::string *)",";
  char v18 = (std::string *)",";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C674C98[v7])(&v13, a2);
  std::to_string(&v13, a3[1]);
  uint64_t v14 = a2;
  char v15 = &v13;
  uint64_t v16 = a2;
  uint64_t v17 = &v13;
  char v18 = &v13;
  uint64_t v8 = *(unsigned int *)(a2 + 24);
  if (v8 == -1) {
    goto LABEL_16;
  }
  uint64_t v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C674B78[v8])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  char v15 = (std::string *)",";
  uint64_t v16 = a2;
  uint64_t v17 = (std::string *)",";
  char v18 = (std::string *)",";
  uint64_t v9 = *(unsigned int *)(a2 + 24);
  if (v9 == -1) {
LABEL_15:
  }
    sub_215742D4C();
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  ((void (*)(std::string *, uint64_t))off_26C674C98[v9])(&v13, a2);
  std::to_string(&v13, a3[2]);
  uint64_t v14 = a2;
  char v15 = &v13;
  uint64_t v16 = a2;
  uint64_t v17 = &v13;
  char v18 = &v13;
  uint64_t v10 = *(unsigned int *)(a2 + 24);
  if (v10 == -1) {
LABEL_16:
  }
    sub_215742D4C();
  uint64_t v19 = &v14;
  ((void (*)(uint64_t **, uint64_t))off_26C674B78[v10])(&v19, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = a2;
  char v15 = (std::string *)"}";
  uint64_t v16 = a2;
  uint64_t v17 = (std::string *)"}";
  char v18 = (std::string *)"}";
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  if (v11 == -1) {
    goto LABEL_15;
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  return ((uint64_t (*)(std::string *, uint64_t))off_26C674C98[v11])(&v13, a2);
}

void sub_2159CA4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159CA4F4(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v9 = a2;
  uint64_t v10 = "{";
  uint64_t v11 = a2;
  uint64_t v12 = "{";
  std::string v13 = "{";
  uint64_t v3 = *(unsigned int *)(a2 + 24);
  if (v3 == -1) {
    goto LABEL_5;
  }
  uint64_t v14 = &v9;
  ((void (*)(uint64_t **))off_26C674C98[v3])(&v14);
  sub_2157D208C((uint64_t)&v9, a2, a3);
  uint64_t v9 = a2;
  uint64_t v10 = ",";
  uint64_t v11 = a2;
  uint64_t v12 = ",";
  std::string v13 = ",";
  uint64_t v6 = *(unsigned int *)(a2 + 24);
  if (v6 == -1) {
    goto LABEL_5;
  }
  uint64_t v14 = &v9;
  ((void (*)(uint64_t **, uint64_t))off_26C674C98[v6])(&v14, a2);
  sub_2157D208C((uint64_t)&v9, a2, a3 + 1);
  uint64_t v9 = a2;
  uint64_t v10 = "}";
  uint64_t v11 = a2;
  uint64_t v12 = "}";
  std::string v13 = "}";
  uint64_t v7 = *(unsigned int *)(a2 + 24);
  if (v7 == -1) {
LABEL_5:
  }
    sub_215742D4C();
  uint64_t v14 = &v9;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C674C98[v7])(&v14, a2);
}

void sub_2159CA5FC(uint64_t a1, void **a2, float *a3)
{
  std::to_string(&v23, *a3);
  int v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v23;
  }
  else {
    uint64_t v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  uint64_t v8 = size;
  do
  {
    if (!v8)
    {
      uint64_t v8 = -1;
      if ((*((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_14;
      }
LABEL_11:
      if (v8 != HIBYTE(v23.__r_.__value_.__r.__words[2]) - 1)
      {
        int v5 = &v23;
        goto LABEL_16;
      }
LABEL_15:
      sub_215731D94(*a2, (uint64_t)v6, size);
LABEL_48:
      if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      goto LABEL_51;
    }
    int v9 = v6->__r_.__value_.__s.__data_[--v8];
  }
  while (v9 == 48);
  if ((*((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x80) == 0) {
    goto LABEL_11;
  }
LABEL_14:
  if (v8 == v23.__r_.__value_.__l.__size_ - 1) {
    goto LABEL_15;
  }
LABEL_16:
  if (strtof((const char *)v5, 0) != *a3)
  {
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v23;
    }
    else {
      uint64_t v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    goto LABEL_15;
  }
  std::string::size_type v10 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v23;
  }
  else {
    uint64_t v11 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v10 = v23.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = 1;
  if (v11->__r_.__value_.__s.__data_[v8] == 46) {
    uint64_t v12 = 2;
  }
  size_t v13 = v12 + v8;
  if (v10 >= v13) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v10;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    sub_215731CD8();
  }
  if (v14 >= 0x17)
  {
    uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v16 = v14 | 7;
    }
    uint64_t v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    size_t v21 = v14;
    int64_t v22 = v17 | 0x8000000000000000;
    std::string __p = p_p;
    goto LABEL_40;
  }
  HIBYTE(v22) = v14;
  p_p = &__p;
  if (v14) {
LABEL_40:
  }
    memmove(p_p, v11, v14);
  *((unsigned char *)p_p + v14) = 0;
  if (v22 >= 0) {
    char v18 = &__p;
  }
  else {
    char v18 = __p;
  }
  if (v22 >= 0) {
    uint64_t v19 = HIBYTE(v22);
  }
  else {
    uint64_t v19 = v21;
  }
  sub_215731D94(*a2, (uint64_t)v18, v19);
  if ((SHIBYTE(v22) & 0x80000000) == 0) {
    goto LABEL_48;
  }
  operator delete(__p);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return;
  }
LABEL_51:
  operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_2159CA800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159CA86C(uint64_t result, uint64_t a2)
{
  *(void *)double result = &unk_26C65A790;
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  long long v2 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(result + 64) = 0;
  *(_OWORD *)(result + 48) = v2;
  *(unsigned char *)(result + 88) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    long long v3 = *(_OWORD *)(a2 + 64);
    *(void *)(result + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(result + 64) = v3;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 64) = 0;
    *(unsigned char *)(result + 88) = 1;
  }
  *(unsigned char *)(result + 96) = 0;
  *(unsigned char *)(result + 120) = 0;
  if (*(unsigned char *)(a2 + 120))
  {
    long long v4 = *(_OWORD *)(a2 + 96);
    *(void *)(result + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(result + 96) = v4;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 96) = 0;
    *(unsigned char *)(result + 120) = 1;
  }
  long long v5 = *(_OWORD *)(a2 + 128);
  uint64_t v6 = *(void *)(a2 + 144);
  *(unsigned char *)(result + 160) = 0;
  *(void *)(result + 144) = v6;
  *(_OWORD *)(result + 128) = v5;
  *(unsigned char *)(result + 208) = 0;
  if (*(unsigned char *)(a2 + 208))
  {
    _X2 = 0;
    _X3 = 0;
    long long v9 = *(_OWORD *)(a2 + 160);
    *(void *)(result + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(result + 160) = v9;
    *(void *)(a2 + 168) = 0;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 160) = 0;
    __asm { CASPAL          X2, X3, X2, X3, [X8] }
    *(void *)(result + 192) = _X2;
    *(void *)(result + 200) = 0;
    *(unsigned char *)(result + 208) = 1;
  }
  *(unsigned char *)(result + 224) = 0;
  *(unsigned char *)(result + 248) = 0;
  if (*(unsigned char *)(a2 + 248))
  {
    *(void *)(result + 224) = 0;
    *(void *)(result + 232) = 0;
    *(void *)(result + 240) = 0;
    *(_OWORD *)(result + 224) = *(_OWORD *)(a2 + 224);
    *(void *)(result + 240) = *(void *)(a2 + 240);
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 232) = 0;
    *(void *)(a2 + 240) = 0;
    *(unsigned char *)(result + 248) = 1;
  }
  *(void *)double result = &unk_26C65A710;
  return result;
}

double sub_2159CA9D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  *(void *)a2 = *(void *)(a1 + 8);
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = 0;
  long long v5 = (unsigned char *)(a2 + 16);
  *(unsigned char *)(a2 + 40) = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_215738B0C(v5, *(void **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      long long v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)long long v5 = v6;
      *(void *)(a2 + 32) = *(void *)(a1 + 40);
    }
    *(unsigned char *)(a2 + 40) = 1;
  }
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  if (*(unsigned char *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_215738B0C((unsigned char *)(a2 + 48), *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      long long v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(void *)(a2 + 64) = *(void *)(a1 + 96);
    }
    *(unsigned char *)(a2 + 72) = 1;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 64);
    *(void *)(a2 + 80) = *(void *)(a1 + 56);
    *(void *)(a2 + 88) = v7;
    *(unsigned char *)(a2 + 96) = 1;
    if (*(unsigned char *)(a1 + 136)) {
      goto LABEL_13;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 80) = 0;
    *(unsigned char *)(a2 + 96) = 0;
    if (*(unsigned char *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_215738B0C(__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
      }
      else
      {
        long long v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)std::string __dst = v6;
        *(void *)&__dst[16] = *(void *)(a1 + 128);
      }
      uint64_t v9 = *(void *)&__dst[8];
      uint64_t v10 = *(void *)&__dst[15];
      *(void *)(a2 + 112) = *(void *)__dst;
      *(void *)(a2 + 120) = v9;
      *(void *)(a2 + 127) = v10;
      *(unsigned char *)(a2 + 135) = __dst[23];
      *(void *)(a2 + 144) = 0;
      *(void *)(a2 + 152) = 0;
      *(unsigned char *)(a2 + 160) = 1;
      char v8 = *(unsigned char *)(a1 + 168);
      if (v8) {
        goto LABEL_20;
      }
      goto LABEL_17;
    }
  }
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  char v8 = *(unsigned char *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_2159CABF0((uint64_t **)(a1 + 144), (uint64_t)__dst);
    *(void *)&long long v6 = *(void *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(void *)(a2 + 192) = *(void *)&__dst[16];
    *(unsigned char *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(unsigned char *)(a2 + 176) = 0;
  *(unsigned char *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_2159CAB84(_Unwind_Exception *exception_object)
{
  if (v1[72] && v1[71] < 0) {
    operator delete(*v3);
  }
  if (v1[40])
  {
    if (v1[39] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

double sub_2159CABF0@<D0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[1] - *a1;
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  sub_215992258((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_21599240C(*a1, a1[1], (uint64_t)&v6, (void (*)(void **__return_ptr, uint64_t *, uint64_t))sub_215AEF2F0);
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  return result;
}

void sub_2159CAC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  if (__p)
  {
    uint64_t v11 = a10;
    uint64_t v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((unsigned char *)v11 - 16) && *((char *)v11 - 41) < 0) {
          operator delete(*(v11 - 8));
        }
        if (*((unsigned char *)v11 - 72))
        {
          if (*((char *)v11 - 73) < 0) {
            operator delete(*(v11 - 12));
          }
        }
        v11 -= 12;
      }
      while (v11 != __p);
      uint64_t v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159CAD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_2159CB498((uint64_t)v3, a2);
  sub_2159CAE6C(a1, (uint64_t)v3);
}

void sub_2159CAE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CAE6C(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "auto_timestamp";
    *(void *)(a1 + 80) = 14;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC088(a1);
  uint64_t v16 = 7;
  int v17 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a1 + 88), *(void *)(a1 + 72) = "version", *(void *)(a1 + 80) = 7, v5))
  {
    sub_215DEE064(a1, &v17);
    long long v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = 1;
    sub_215DEE064(a1, &v17);
    long long v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u)
    {
LABEL_7:
      *(void *)(a1 + 72) = "ns";
      uint64_t v7 = a1 + 72;
      uint64_t v9 = (unsigned char *)(a1 + 88);
      int v8 = *(unsigned __int8 *)(a1 + 88);
      *(void *)(a1 + 80) = 2;
      uint64_t v10 = (void *)(a1 + 80);
      if (!v8) {
        *uint64_t v9 = 1;
      }
LABEL_16:
      uint64_t v16 = *(void *)(a2 + 8);
      uint64_t v12 = (unsigned __int8 *)sub_215DEBCD0(a1);
      int v13 = *v12;
      *uint64_t v12 = 5;
      size_t v14 = (void **)*((void *)v12 + 1);
      *((void *)v12 + 1) = v16;
      uint64_t v16 = (uint64_t)v14;
      sub_215CEB204((void ***)&v16, v13);
      long long v6 = *(unsigned __int8 **)(a1 + 40);
LABEL_17:
      if (*v6 <= 1u)
      {
        int v15 = *v9;
        *(void *)uint64_t v7 = "clock_type";
        *uint64_t v10 = 10;
        if (!v15) {
          *uint64_t v9 = 1;
        }
      }
      sub_2159A4E4C();
    }
  }
  uint64_t v10 = (void *)(a1 + 80);
  uint64_t v7 = a1 + 72;
  uint64_t v9 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && **(_DWORD **)v7 == *(_DWORD *)"version"
    && *(_DWORD *)(*(void *)v7 + 3) == *(_DWORD *)"sion")
  {
    goto LABEL_17;
  }
  goto LABEL_16;
}

void sub_2159CB418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CB450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CB468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CB480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2159CB498(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
    }
    else
    {
      long long v5 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  long long v6 = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 104) = 0;
  if (*(unsigned char *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(unsigned char *)(a1 + 104) = 1;
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 112), *(void **)(a2 + 112), *(void *)(a2 + 120));
    }
    else
    {
      long long v9 = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(unsigned char *)(a1 + 136) = 1;
  }
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  if (*(unsigned char *)(a2 + 168))
  {
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    sub_2159A4D18((char *)(a1 + 144), *(void *)(a2 + 144), *(void *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3));
    *(unsigned char *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_2159CB60C(_Unwind_Exception *exception_object)
{
  if (v2[136] && v2[135] < 0) {
    operator delete(*v4);
  }
  if (v2[104] && v2[103] < 0) {
    operator delete(*v3);
  }
  if (v2[48])
  {
    if (v2[47] < 0) {
      operator delete(*v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159CB6C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_2159CBB80((uint64_t)v3, a2);
  sub_2159CB7E8(a1, (uint64_t)v3);
}

void sub_2159CB7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CB7E8(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "auto_timestamp";
    *(void *)(a1 + 80) = 14;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEC088(a1);
  uint64_t v16 = 7;
  int v17 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a1 + 88), *(void *)(a1 + 72) = "version", *(void *)(a1 + 80) = 7, v5))
  {
    sub_215DEE064(a1, &v17);
    long long v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = 1;
    sub_215DEE064(a1, &v17);
    long long v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u)
    {
LABEL_7:
      *(void *)(a1 + 72) = "ns";
      uint64_t v7 = a1 + 72;
      long long v9 = (unsigned char *)(a1 + 88);
      int v8 = *(unsigned __int8 *)(a1 + 88);
      *(void *)(a1 + 80) = 2;
      uint64_t v10 = (void *)(a1 + 80);
      if (!v8) {
        *long long v9 = 1;
      }
LABEL_16:
      uint64_t v16 = *(void *)(a2 + 8);
      uint64_t v12 = (unsigned __int8 *)sub_215DEBCD0(a1);
      int v13 = *v12;
      *uint64_t v12 = 5;
      size_t v14 = (void **)*((void *)v12 + 1);
      *((void *)v12 + 1) = v16;
      uint64_t v16 = (uint64_t)v14;
      sub_215CEB204((void ***)&v16, v13);
      long long v6 = *(unsigned __int8 **)(a1 + 40);
LABEL_17:
      if (*v6 <= 1u)
      {
        int v15 = *v9;
        *(void *)uint64_t v7 = "clock_type";
        *uint64_t v10 = 10;
        if (!v15) {
          *long long v9 = 1;
        }
      }
      sub_2159A4E4C();
    }
  }
  uint64_t v10 = (void *)(a1 + 80);
  uint64_t v7 = a1 + 72;
  long long v9 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && **(_DWORD **)v7 == *(_DWORD *)"version"
    && *(_DWORD *)(*(void *)v7 + 3) == *(_DWORD *)"sion")
  {
    goto LABEL_17;
  }
  goto LABEL_16;
}

void sub_2159CBB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CBB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CBB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CEB204(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2159CBB80(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
    }
    else
    {
      long long v5 = *(_OWORD *)(a2 + 24);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  long long v6 = *(_OWORD *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 104) = 0;
  if (*(unsigned char *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(unsigned char *)(a1 + 104) = 1;
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_215738B0C((unsigned char *)(a1 + 112), *(void **)(a2 + 112), *(void *)(a2 + 120));
    }
    else
    {
      long long v9 = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(unsigned char *)(a1 + 136) = 1;
  }
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  if (*(unsigned char *)(a2 + 168))
  {
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    sub_2159A4D18((char *)(a1 + 144), *(void *)(a2 + 144), *(void *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3));
    *(unsigned char *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_2159CBCF4(_Unwind_Exception *exception_object)
{
  if (v2[136] && v2[135] < 0) {
    operator delete(*v4);
  }
  if (v2[104] && v2[103] < 0) {
    operator delete(*v3);
  }
  if (v2[48])
  {
    if (v2[47] < 0) {
      operator delete(*v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159CBDB0(uint64_t a1, uint64_t a2)
{
  v9[0] = *(unsigned char *)a2;
  v9[8] = *(unsigned char *)(a2 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  long long v4 = *(unsigned char **)(a2 + 16);
  long long v3 = *(unsigned char **)(a2 + 24);
  size_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    long long v6 = (char *)operator new(v3 - v4);
    uint64_t v7 = &v6[v5];
    std::string __p = v6;
    uint64_t v12 = &v6[v5];
    memcpy(v6, v4, v5);
    uint64_t v11 = v7;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v8) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  int v13 = v9;
  sub_2159CC60C();
}

void sub_2159CBEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159CBEC0(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      long long v4 = (void **)*(unsigned __int8 *)sub_215E0A408(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_57;
        }
      }
      else
      {
        int v5 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v5) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_57;
      }
      uint64_t v16 = *(int **)(a3 + 72);
      int v17 = *v16;
      int v18 = *(int *)((char *)v16 + 3);
      if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion") {
        goto LABEL_57;
      }
      return;
    case 1:
      long long v4 = (void **)*(unsigned __int16 *)sub_215E0A66C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_57;
        }
      }
      else
      {
        int v6 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v6) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_57;
      }
      uint64_t v20 = *(int **)(a3 + 72);
      int v21 = *v20;
      int v22 = *(int *)((char *)v20 + 3);
      if (v21 != *(_DWORD *)"version" || v22 != *(_DWORD *)"sion") {
        goto LABEL_57;
      }
      return;
    case 2:
      LODWORD(v55) = *(_DWORD *)sub_215E0A75C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v7 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v7) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      sub_215DEE064(a3, &v55);
      return;
    case 3:
      long long v4 = *(void ***)sub_215E0A84C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88))
        {
LABEL_57:
          LOBYTE(v55) = 6;
          unint64_t v56 = v4;
          unint64_t v28 = (unsigned __int8 *)sub_215DEBCD0(a3);
          goto LABEL_86;
        }
      }
      else
      {
        int v8 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v8) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_57;
      }
      float v24 = *(int **)(a3 + 72);
      int v25 = *v24;
      int v26 = *(int *)((char *)v24 + 3);
      if (v25 != *(_DWORD *)"version" || v26 != *(_DWORD *)"sion") {
        goto LABEL_57;
      }
      return;
    case 5:
      long long v9 = (void **)*(char *)sub_215E0A93C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_85;
        }
      }
      else
      {
        int v10 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v10) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_85;
      }
      uint64_t v29 = *(int **)(a3 + 72);
      int v30 = *v29;
      int v31 = *(int *)((char *)v29 + 3);
      if (v30 != *(_DWORD *)"version" || v31 != *(_DWORD *)"sion") {
        goto LABEL_85;
      }
      return;
    case 6:
      long long v9 = (void **)*(__int16 *)sub_215E0AA2C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_85;
        }
      }
      else
      {
        int v11 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v11) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_85;
      }
      uint64_t v33 = *(int **)(a3 + 72);
      int v34 = *v33;
      int v35 = *(int *)((char *)v33 + 3);
      if (v34 != *(_DWORD *)"version" || v35 != *(_DWORD *)"sion") {
        goto LABEL_85;
      }
      return;
    case 7:
      long long v9 = (void **)*(int *)sub_215E0AB1C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_85;
        }
      }
      else
      {
        int v12 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v12) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_85;
      }
      uint64_t v37 = *(int **)(a3 + 72);
      int v38 = *v37;
      int v39 = *(int *)((char *)v37 + 3);
      if (v38 != *(_DWORD *)"version" || v39 != *(_DWORD *)"sion") {
        goto LABEL_85;
      }
      return;
    case 8:
      long long v9 = *(void ***)sub_215E0AC0C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_85;
        }
      }
      else
      {
        int v13 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v13) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) == 7)
      {
        char v41 = *(int **)(a3 + 72);
        int v42 = *v41;
        int v43 = *(int *)((char *)v41 + 3);
        if (v42 == *(_DWORD *)"version" && v43 == *(_DWORD *)"sion") {
          return;
        }
      }
LABEL_85:
      LOBYTE(v55) = 5;
      unint64_t v56 = v9;
      unint64_t v28 = (unsigned __int8 *)sub_215DEBCD0(a3);
LABEL_86:
      int v45 = *v28;
      unsigned __int8 *v28 = v55;
      LOBYTE(v55) = v45;
      unint64_t v46 = (void **)*((void *)v28 + 1);
      *((void *)v28 + 1) = v56;
      unint64_t v56 = v46;
      sub_215CEB204(&v56, v45);
      return;
    case 11:
      LODWORD(v55) = *(_DWORD *)sub_215E0ACFC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88))
        {
LABEL_93:
          sub_215DEE144(a3, (float *)&v55);
          return;
        }
      }
      else
      {
        int v14 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v14) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_93;
      }
      unint64_t v47 = *(int **)(a3 + 72);
      int v48 = *v47;
      int v49 = *(int *)((char *)v47 + 3);
      if (v48 != *(_DWORD *)"version" || v49 != *(_DWORD *)"sion") {
        goto LABEL_93;
      }
      return;
    case 12:
      uint64_t v55 = *(void *)sub_215E0ADEC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88))
        {
LABEL_100:
          sub_215DEE340(a3, (double *)&v55);
          return;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v15) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_100;
      }
      unint64_t v51 = *(int **)(a3 + 72);
      int v52 = *v51;
      int v53 = *(int *)((char *)v51 + 3);
      if (v52 != *(_DWORD *)"version" || v53 != *(_DWORD *)"sion") {
        goto LABEL_100;
      }
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159CC530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CC548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CC560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CC578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CC590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CC5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CC5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CEB204(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CC60C()
{
  int v0 = 0;
  sub_2157E3DE8();
}

void sub_2159CC6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159CC6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CC704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CC718(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159CB498((uint64_t)v8, a2);
  sub_2159A6F1C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    int v5 = (void **)__p;
    if (__p)
    {
      int v6 = v19;
      int v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        int v7 = __p;
      }
      uint64_t v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159CC820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CC838(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159CBB80((uint64_t)v8, a2);
  sub_2159CC958(a1, (uint64_t)v8, a3);
  if (v20)
  {
    int v5 = (void **)__p;
    if (__p)
    {
      int v6 = v19;
      int v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        int v7 = __p;
      }
      uint64_t v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159CC940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CC958(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v6 + 40))
  {
    uint64_t v19 = (uint64_t *)(v6 + 16);
    sub_215E05FEC(&v19, 2u);
    sub_215E0076C(*(void *)(a1 + 24));
    uint64_t v7 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v7 + 40)) {
      goto LABEL_3;
    }
LABEL_6:
    sub_215E068A8();
    int v8 = *(char *)(a2 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v9 + 40)) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  sub_215E0626C((uint64_t)&v19, v6 + 8);
  sub_215E0076C(*(void *)(a1 + 24));
  uint64_t v7 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v7 + 40)) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v19 = (uint64_t *)(v7 + 16);
  sub_215E06360(&v19, *(void *)(a2 + 8));
  int v8 = *(char *)(a2 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v9 + 40))
  {
LABEL_4:
    uint64_t v19 = (uint64_t *)(v9 + 16);
    sub_215E053CC(&v19, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v19) = -52;
    BYTE1(v19) = v8;
  }
  else
  {
    LOBYTE(v19) = v8;
  }
  std::ostream::write();
LABEL_11:
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(*(void *)(v10 + 88) - 8);
  sub_215E001AC((uint64_t *)(v10 + 48), *(void *)(v10 + 16) - v11 - 9);
  size_t v12 = *(void *)(v10 + 48);
  if (v12) {
    memmove((void *)(*(void *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  }
  *(void *)(v10 + 48) = 0;
  uint64_t v13 = *(void *)(v10 + 80);
  uint64_t v14 = *(void *)(v10 + 88) - 8;
  *(void *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(unsigned char *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(unsigned char *)(v10 + 40) = 0;
    }
  }
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v17 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v17 + 40))
    {
      uint64_t v19 = (uint64_t *)(v17 + 16);
      sub_215E053CC(&v19, 0);
      if (a3 < 4) {
        return;
      }
    }
    else
    {
      LOBYTE(v19) = 0;
      std::ostream::write();
      if (a3 < 4) {
        return;
      }
    }
    goto LABEL_26;
  }
  uint64_t v15 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v15 + 40))
  {
    uint64_t v19 = (uint64_t *)(v15 + 16);
    sub_215E053CC(&v19, 1);
    uint64_t v16 = *(void *)(a1 + 24);
    if (*(unsigned char *)(v16 + 40)) {
      goto LABEL_19;
    }
LABEL_25:
    sub_215E0752C((uint64_t)&v19, v16 + 8, a2 + 24);
    if (a3 < 4) {
      return;
    }
    goto LABEL_26;
  }
  LOBYTE(v19) = 1;
  std::ostream::write();
  uint64_t v16 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(v16 + 40)) {
    goto LABEL_25;
  }
LABEL_19:
  uint64_t v19 = (uint64_t *)(v16 + 16);
  sub_215E07110((uint64_t)&v18, &v19, (const void **)(a2 + 24));
  if (a3 < 4) {
    return;
  }
LABEL_26:
  sub_2159A7590(a1, a2 + 56);
}

void sub_2159CCBDC(uint64_t a1, char *a2)
{
  int v3 = *a2;
  v10[0] = *a2;
  char v10[8] = a2[8];
  size_t v12 = 0;
  uint64_t v13 = 0;
  std::string __p = 0;
  int v5 = (unsigned char *)*((void *)a2 + 2);
  long long v4 = (unsigned char *)*((void *)a2 + 3);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    int v8 = &v7[v6];
    std::string __p = v7;
    uint64_t v13 = &v7[v6];
    memcpy(v7, v5, v6);
    size_t v12 = v8;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v9 + 40))
  {
    uint64_t v14 = (uint64_t *)(v9 + 16);
    sub_215E053CC(&v14, v3);
  }
  else
  {
    if (v3 < 0)
    {
      LOBYTE(v14) = -52;
      BYTE1(v14) = v3;
    }
    else
    {
      LOBYTE(v14) = v3;
    }
    std::ostream::write();
  }
  sub_2159CCD0C(v10[0], (uint64_t)v10, a1);
  if (__p)
  {
    size_t v12 = __p;
    operator delete(__p);
  }
}

void sub_2159CCCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2159CCD0C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      long long v4 = (char *)sub_215E0A408(a2 + 8);
      int v5 = *v4;
      uint64_t v6 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v6 + 40))
      {
        *(void *)unint64_t v28 = v6 + 16;
        return sub_215E053CC((uint64_t **)v28, v5);
      }
      if (v5 < 0)
      {
        v28[0] = -52;
        v28[1] = v5;
      }
      else
      {
        v28[0] = *v4;
      }
      return (char *)std::ostream::write();
    case 1:
      unsigned int v8 = *(unsigned __int16 *)sub_215E0A66C(a2 + 8);
      uint64_t v9 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v9 + 40))
      {
        *(void *)unint64_t v28 = v9 + 16;
        return sub_215E058EC((uint64_t **)v28, v8);
      }
      if (v8 <= 0x7F)
      {
        v28[0] = v8;
        return (char *)std::ostream::write();
      }
      if (v8 > 0xFF)
      {
        v28[0] = -51;
        *(_WORD *)&v28[1] = __rev16(v8);
      }
      else
      {
        v28[0] = -52;
        v28[1] = v8;
      }
      return (char *)std::ostream::write();
    case 2:
      unsigned int v10 = *(_DWORD *)sub_215E0A75C(a2 + 8);
      uint64_t v11 = *(void *)(a3 + 24);
      if (!*(unsigned char *)(v11 + 40)) {
        return (char *)sub_215E0626C((uint64_t)v28, v11 + 8);
      }
      *(void *)unint64_t v28 = v11 + 16;
      return sub_215E05FEC((uint64_t **)v28, v10);
    case 3:
      unint64_t v12 = *(void *)sub_215E0A84C(a2 + 8);
      uint64_t v13 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v13 + 40))
      {
        *(void *)unint64_t v28 = v13 + 16;
        return sub_215E069EC((uint64_t **)v28, v12);
      }
      else
      {
        return (char *)sub_215E06D00();
      }
    case 5:
      int v14 = *(char *)sub_215E0A93C(a2 + 8);
      uint64_t v15 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v15 + 40))
      {
        *(void *)unint64_t v28 = v15 + 16;
        return sub_215E05278((uint64_t **)v28, v14);
      }
      else
      {
        if (v14 > -33)
        {
          v28[0] = v14;
        }
        else
        {
          v28[0] = -48;
          v28[1] = v14;
        }
        return (char *)std::ostream::write();
      }
    case 6:
      __int16 v16 = *(_WORD *)sub_215E0AA2C(a2 + 8);
      uint64_t v17 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v17 + 40))
      {
        *(void *)unint64_t v28 = v17 + 16;
        return sub_215E0551C((uint64_t **)v28, v16);
      }
      else
      {
        return (char *)sub_215E057EC();
      }
    case 7:
      unsigned int v18 = *(_DWORD *)sub_215E0AB1C(a2 + 8);
      uint64_t v19 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v19 + 40))
      {
        *(void *)unint64_t v28 = v19 + 16;
        return sub_215E05AC4((uint64_t **)v28, v18);
      }
      else
      {
        return (char *)sub_215E05EEC();
      }
    case 8:
      unint64_t v20 = *(void *)sub_215E0AC0C(a2 + 8);
      uint64_t v21 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v21 + 40))
      {
        *(void *)unint64_t v28 = v21 + 16;
        return sub_215E06360((uint64_t **)v28, v20);
      }
      else
      {
        return (char *)sub_215E068A8();
      }
    case 11:
      unsigned int v22 = *(_DWORD *)sub_215E0ACFC(a2 + 8);
      LODWORD(v26) = v22;
      uint64_t v23 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v23 + 40))
      {
        *(void *)unint64_t v28 = v23 + 16;
        return (char *)sub_215E06DFC((uint64_t)&v27, (uint64_t **)v28, (unsigned int *)&v26);
      }
      else
      {
        v28[0] = -54;
        *(_DWORD *)&v28[1] = bswap32(v22);
        return (char *)std::ostream::write();
      }
    case 12:
      unint64_t v24 = *(void *)sub_215E0ADEC(a2 + 8);
      unint64_t v26 = v24;
      uint64_t v25 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v25 + 40))
      {
        *(void *)unint64_t v28 = v25 + 16;
        return (char *)sub_215E06EE4((uint64_t)&v27, (uint64_t **)v28, &v26);
      }
      else
      {
        v28[0] = -53;
        *(void *)&v28[1] = bswap64(v24);
        return (char *)std::ostream::write();
      }
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159CD210(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_2159CB498((uint64_t)v3, a2);
  sub_2159CD330(a1, (uint64_t)v3);
}

void sub_2159CD318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CD330(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "auto_timestamp";
    *(void *)(a1 + 80) = 14;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEB804(a1);
  uint64_t v16 = 7;
  int v17 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a1 + 88), *(void *)(a1 + 72) = "version", *(void *)(a1 + 80) = 7, v5))
  {
    sub_215DEC344(a1, &v17);
    uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = 1;
    sub_215DEC344(a1, &v17);
    uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u)
    {
LABEL_7:
      *(void *)(a1 + 72) = "ns";
      uint64_t v7 = a1 + 72;
      uint64_t v9 = (unsigned char *)(a1 + 88);
      int v8 = *(unsigned __int8 *)(a1 + 88);
      *(void *)(a1 + 80) = 2;
      unsigned int v10 = (void *)(a1 + 80);
      if (!v8) {
        *uint64_t v9 = 1;
      }
LABEL_16:
      uint64_t v16 = *(void *)(a2 + 8);
      unint64_t v12 = (unsigned __int8 *)sub_215DEB350(a1);
      int v13 = *v12;
      *unint64_t v12 = 5;
      uint64_t v14 = *((void *)v12 + 1);
      *((void *)v12 + 1) = v16;
      uint64_t v16 = v14;
      sub_215CE9D14(&v16, v13);
      uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
LABEL_17:
      if (*v6 <= 1u)
      {
        int v15 = *v9;
        *(void *)uint64_t v7 = "clock_type";
        *unsigned int v10 = 10;
        if (!v15) {
          *uint64_t v9 = 1;
        }
      }
      sub_2159A86B0();
    }
  }
  unsigned int v10 = (void *)(a1 + 80);
  uint64_t v7 = a1 + 72;
  uint64_t v9 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && **(_DWORD **)v7 == *(_DWORD *)"version"
    && *(_DWORD *)(*(void *)v7 + 3) == *(_DWORD *)"sion")
  {
    goto LABEL_17;
  }
  goto LABEL_16;
}

void sub_2159CD8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CD914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CD92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CD944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CD95C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  sub_2159CBB80((uint64_t)v3, a2);
  sub_2159CDA7C(a1, (uint64_t)v3);
}

void sub_2159CDA64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CDA7C(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v4 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "auto_timestamp";
    *(void *)(a1 + 80) = 14;
    if (!v4) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  sub_215DEB804(a1);
  uint64_t v16 = 7;
  int v17 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a1 + 88), *(void *)(a1 + 72) = "version", *(void *)(a1 + 80) = 7, v5))
  {
    sub_215DEC344(a1, &v17);
    uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = 1;
    sub_215DEC344(a1, &v17);
    uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
    if (*v6 <= 1u)
    {
LABEL_7:
      *(void *)(a1 + 72) = "ns";
      uint64_t v7 = a1 + 72;
      uint64_t v9 = (unsigned char *)(a1 + 88);
      int v8 = *(unsigned __int8 *)(a1 + 88);
      *(void *)(a1 + 80) = 2;
      unsigned int v10 = (void *)(a1 + 80);
      if (!v8) {
        *uint64_t v9 = 1;
      }
LABEL_16:
      uint64_t v16 = *(void *)(a2 + 8);
      unint64_t v12 = (unsigned __int8 *)sub_215DEB350(a1);
      int v13 = *v12;
      *unint64_t v12 = 5;
      uint64_t v14 = *((void *)v12 + 1);
      *((void *)v12 + 1) = v16;
      uint64_t v16 = v14;
      sub_215CE9D14(&v16, v13);
      uint64_t v6 = *(unsigned __int8 **)(a1 + 40);
LABEL_17:
      if (*v6 <= 1u)
      {
        int v15 = *v9;
        *(void *)uint64_t v7 = "clock_type";
        *unsigned int v10 = 10;
        if (!v15) {
          *uint64_t v9 = 1;
        }
      }
      sub_2159A86B0();
    }
  }
  unsigned int v10 = (void *)(a1 + 80);
  uint64_t v7 = a1 + 72;
  uint64_t v9 = (unsigned char *)(a1 + 88);
  if (*(unsigned char *)(a1 + 88)
    && *(void *)(a1 + 80) == 7
    && **(_DWORD **)v7 == *(_DWORD *)"version"
    && *(_DWORD *)(*(void *)v7 + 3) == *(_DWORD *)"sion")
  {
    goto LABEL_17;
  }
  goto LABEL_16;
}

void sub_2159CDDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CDDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CDDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  sub_215CE9D14(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2159CDE14(uint64_t a1, uint64_t a2)
{
  v9[0] = *(unsigned char *)a2;
  v9[8] = *(unsigned char *)(a2 + 8);
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  std::string __p = 0;
  int v4 = *(unsigned char **)(a2 + 16);
  int v3 = *(unsigned char **)(a2 + 24);
  size_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    uint64_t v6 = (char *)operator new(v3 - v4);
    uint64_t v7 = &v6[v5];
    std::string __p = v6;
    unint64_t v12 = &v6[v5];
    memcpy(v6, v4, v5);
    uint64_t v11 = v7;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v8) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  int v13 = v9;
  sub_2159CE670();
}

void sub_2159CDF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159CDF24(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      uint64_t v4 = *(unsigned __int8 *)sub_215E0A408(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_57;
        }
      }
      else
      {
        int v5 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v5) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_57;
      }
      uint64_t v16 = *(int **)(a3 + 72);
      int v17 = *v16;
      int v18 = *(int *)((char *)v16 + 3);
      if (v17 != *(_DWORD *)"version" || v18 != *(_DWORD *)"sion") {
        goto LABEL_57;
      }
      return;
    case 1:
      uint64_t v4 = *(unsigned __int16 *)sub_215E0A66C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_57;
        }
      }
      else
      {
        int v6 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v6) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_57;
      }
      unint64_t v20 = *(int **)(a3 + 72);
      int v21 = *v20;
      int v22 = *(int *)((char *)v20 + 3);
      if (v21 != *(_DWORD *)"version" || v22 != *(_DWORD *)"sion") {
        goto LABEL_57;
      }
      return;
    case 2:
      LODWORD(v55) = *(_DWORD *)sub_215E0A75C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v7 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v7) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      sub_215DEC344(a3, &v55);
      return;
    case 3:
      uint64_t v4 = *(void *)sub_215E0A84C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88))
        {
LABEL_57:
          LOBYTE(v55) = 6;
          uint64_t v56 = v4;
          unint64_t v28 = (unsigned __int8 *)sub_215DEB350(a3);
          goto LABEL_86;
        }
      }
      else
      {
        int v8 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v8) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_57;
      }
      unint64_t v24 = *(int **)(a3 + 72);
      int v25 = *v24;
      int v26 = *(int *)((char *)v24 + 3);
      if (v25 != *(_DWORD *)"version" || v26 != *(_DWORD *)"sion") {
        goto LABEL_57;
      }
      return;
    case 5:
      uint64_t v9 = *(char *)sub_215E0A93C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_85;
        }
      }
      else
      {
        int v10 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v10) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_85;
      }
      uint64_t v29 = *(int **)(a3 + 72);
      int v30 = *v29;
      int v31 = *(int *)((char *)v29 + 3);
      if (v30 != *(_DWORD *)"version" || v31 != *(_DWORD *)"sion") {
        goto LABEL_85;
      }
      return;
    case 6:
      uint64_t v9 = *(__int16 *)sub_215E0AA2C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_85;
        }
      }
      else
      {
        int v11 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v11) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_85;
      }
      uint64_t v33 = *(int **)(a3 + 72);
      int v34 = *v33;
      int v35 = *(int *)((char *)v33 + 3);
      if (v34 != *(_DWORD *)"version" || v35 != *(_DWORD *)"sion") {
        goto LABEL_85;
      }
      return;
    case 7:
      uint64_t v9 = *(int *)sub_215E0AB1C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_85;
        }
      }
      else
      {
        int v12 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v12) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_85;
      }
      uint64_t v37 = *(int **)(a3 + 72);
      int v38 = *v37;
      int v39 = *(int *)((char *)v37 + 3);
      if (v38 != *(_DWORD *)"version" || v39 != *(_DWORD *)"sion") {
        goto LABEL_85;
      }
      return;
    case 8:
      uint64_t v9 = *(void *)sub_215E0AC0C(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88)) {
          goto LABEL_85;
        }
      }
      else
      {
        int v13 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v13) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) == 7)
      {
        char v41 = *(int **)(a3 + 72);
        int v42 = *v41;
        int v43 = *(int *)((char *)v41 + 3);
        if (v42 == *(_DWORD *)"version" && v43 == *(_DWORD *)"sion") {
          return;
        }
      }
LABEL_85:
      LOBYTE(v55) = 5;
      uint64_t v56 = v9;
      unint64_t v28 = (unsigned __int8 *)sub_215DEB350(a3);
LABEL_86:
      int v45 = *v28;
      unsigned __int8 *v28 = v55;
      LOBYTE(v55) = v45;
      uint64_t v46 = *((void *)v28 + 1);
      *((void *)v28 + 1) = v56;
      uint64_t v56 = v46;
      sub_215CE9D14(&v56, v45);
      return;
    case 11:
      LODWORD(v55) = *(_DWORD *)sub_215E0ACFC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88))
        {
LABEL_93:
          sub_215DEC424(a3, (float *)&v55);
          return;
        }
      }
      else
      {
        int v14 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v14) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_93;
      }
      unint64_t v47 = *(int **)(a3 + 72);
      int v48 = *v47;
      int v49 = *(int *)((char *)v47 + 3);
      if (v48 != *(_DWORD *)"version" || v49 != *(_DWORD *)"sion") {
        goto LABEL_93;
      }
      return;
    case 12:
      uint64_t v55 = *(void *)sub_215E0ADEC(a2 + 8);
      if (**(unsigned __int8 **)(a3 + 40) > 1u)
      {
        if (!*(unsigned char *)(a3 + 88))
        {
LABEL_100:
          sub_215DEC620(a3, (double *)&v55);
          return;
        }
      }
      else
      {
        int v15 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "number";
        *(void *)(a3 + 80) = 6;
        if (!v15) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      if (*(void *)(a3 + 80) != 7) {
        goto LABEL_100;
      }
      unint64_t v51 = *(int **)(a3 + 72);
      int v52 = *v51;
      int v53 = *(int *)((char *)v51 + 3);
      if (v52 != *(_DWORD *)"version" || v53 != *(_DWORD *)"sion") {
        goto LABEL_100;
      }
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159CE594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CE5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CE5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CE5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CE5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CE60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CE624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  sub_215CE9D14(v9, a9);
  _Unwind_Resume(a1);
}

void sub_2159CE670()
{
  int v0 = 0;
  sub_2157E3DE8();
}

void sub_2159CE738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159CE754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CE768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CE77C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159CB498((uint64_t)v8, a2);
  sub_2159CE89C(a1, (uint64_t)v8, a3);
  if (v20)
  {
    int v5 = (void **)__p;
    if (__p)
    {
      int v6 = v19;
      int v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        int v7 = __p;
      }
      uint64_t v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159CE884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CE89C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(void *)(a1 + 40))
  {
    int v6 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    int v8 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 16);
  sub_215DF927C(a1, (unsigned __int8 *)&__p);
  std::string::value_type v9 = *(unsigned char *)(a1 + 34);
  if (*(void *)(a1 + 40))
  {
    char v10 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v10, (uint64_t)&__p, 1);
  }
  char v11 = *(void **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_215731D94(v11, (uint64_t)&__p, 1);
  ++*(void *)(a1 + 40);
  if (*(unsigned char *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_215DF927C(a1, (unsigned __int8 *)&__p);
    sub_215DF933C(a1, a2 + 24);
    if (a3 < 4) {
      return;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_215DF927C(a1, (unsigned __int8 *)&__p);
    if (a3 < 4) {
      return;
    }
  }
  sub_2159A9B60(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(unsigned char *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_215DF927C(a1, (unsigned __int8 *)&__p);
      sub_215DF933C(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_215DF927C(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6) {
    return;
  }
  if (*(unsigned char *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_215DF927C(a1, (unsigned __int8 *)&__p);
    sub_215DF933C(a1, a2 + 80);
    if (*(unsigned char *)(a2 + 136)) {
      goto LABEL_17;
    }
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_215DF927C(a1, (unsigned __int8 *)&__p);
    if (*(void *)(a1 + 40))
    {
      int v22 = *(void **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
      sub_215731D94(v22, (uint64_t)&__p, 1);
      ++*(void *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      char v27 = 0;
      if (*(unsigned char *)(a2 + 168)) {
        goto LABEL_18;
      }
    }
    else
    {
      *(void *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      char v27 = 0;
      if (*(unsigned char *)(a2 + 168)) {
        goto LABEL_18;
      }
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_215DF927C(a1, (unsigned __int8 *)&v25);
    if (*(void *)(a1 + 40))
    {
      uint64_t v23 = *(void **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
      sub_215731D94(v23, (uint64_t)&v25, 1);
      uint64_t v24 = *(void *)(a1 + 40) + 1;
    }
    else
    {
      uint64_t v24 = 1;
    }
    *(void *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_215DF927C(a1, (unsigned __int8 *)&__p);
  if (*(void *)(a1 + 40))
  {
    uint64_t v21 = *(void **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 32);
    sub_215731D94(v21, (uint64_t)&__p, 1);
    ++*(void *)(a1 + 40);
    if (!*(unsigned char *)(a2 + 136)) {
      goto LABEL_43;
    }
  }
  else
  {
    *(void *)(a1 + 40) = 1;
    if (!*(unsigned char *)(a2 + 136)) {
      goto LABEL_43;
    }
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_215DF927C(a1, (unsigned __int8 *)&__p);
  sub_215DF933C(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v27 = 0;
  if (!*(unsigned char *)(a2 + 168)) {
    goto LABEL_45;
  }
LABEL_18:
  uint64_t v14 = *(void *)(a2 + 144);
  uint64_t v15 = *(void *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_215742E98(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    char v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      uint64_t v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0) {
        int v18 = v16;
      }
      else {
        int v18 = (uint64_t *)*v16;
      }
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = v16[1];
      }
      if (v17)
      {
        uint64_t v19 = 0;
        while (1)
        {
          int v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92) {
            break;
          }
          if (v17 == ++v19) {
            goto LABEL_20;
          }
        }
        if (v17 != v19 && v19 != -1) {
          break;
        }
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15) {
        goto LABEL_36;
      }
    }
    sub_2159A56AC(v14, v15, *(void *)(a2 + 152), ";", 1uLL, &v25);
  }
  std::string __p = v25;
  char v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_215DF927C(a1, (unsigned __int8 *)&v25);
  sub_215DF933C(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2159CED04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159CED28(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159CBB80((uint64_t)v8, a2);
  sub_2159CEE48(a1, (uint64_t)v8, a3);
  if (v20)
  {
    int v5 = (void **)__p;
    if (__p)
    {
      int v6 = v19;
      uint64_t v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      uint64_t v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159CEE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CEE48(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(void *)(a1 + 40))
  {
    int v6 = *(void **)(a1 + 24);
    char v15 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v6, (uint64_t)&v15, 1);
  }
  std::ostream::operator<<();
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    int v8 = *(void **)(a1 + 24);
    char v16 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v8, (uint64_t)&v16, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  unsigned __int8 v12 = *(unsigned char *)(a2 + 16);
  sub_215DF927C(a1, &v12);
  char v9 = *(unsigned char *)(a1 + 34);
  if (*(void *)(a1 + 40))
  {
    char v10 = *(void **)(a1 + 24);
    char v17 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v10, (uint64_t)&v17, 1);
  }
  char v11 = *(void **)(a1 + 24);
  char v18 = v9;
  sub_215731D94(v11, (uint64_t)&v18, 1);
  ++*(void *)(a1 + 40);
  if (*(unsigned char *)(a2 + 48))
  {
    unsigned __int8 v14 = 1;
    sub_215DF927C(a1, &v14);
    sub_215DF933C(a1, a2 + 24);
    if (a3 < 4) {
      return;
    }
  }
  else
  {
    unsigned __int8 v13 = 0;
    sub_215DF927C(a1, &v13);
    if (a3 < 4) {
      return;
    }
  }
  sub_2159A9B60(a1, a2 + 56);
}

void sub_2159CEFA8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = *(unsigned char *)a2;
  v9[0] = *(unsigned char *)a2;
  v9[8] = *(unsigned char *)(a2 + 8);
  char v11 = 0;
  unsigned __int8 v12 = 0;
  std::string __p = 0;
  int v5 = *(unsigned char **)(a2 + 16);
  uint64_t v4 = *(unsigned char **)(a2 + 24);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    int v8 = &v7[v6];
    std::string __p = v7;
    unsigned __int8 v12 = &v7[v6];
    memcpy(v7, v5, v6);
    char v11 = v8;
  }
  unsigned __int8 v13 = v3;
  sub_215DF927C(a1, &v13);
  sub_2159CF08C(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    char v11 = __p;
    operator delete(__p);
  }
}

void sub_2159CF06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159CF08C(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      unsigned __int8 v12 = *(unsigned char *)sub_215E0A408(a2 + 8);
      sub_215DF927C(a3, &v12);
      return;
    case 1:
      sub_215E0A66C(a2 + 8);
      if (*(void *)(a3 + 40))
      {
        uint64_t v4 = *(void **)(a3 + 24);
        char v14 = *(unsigned char *)(a3 + 32);
        sub_215731D94(v4, (uint64_t)&v14, 1);
      }
      std::ostream::operator<<();
      goto LABEL_31;
    case 2:
      sub_215E0A75C(a2 + 8);
      if (*(void *)(a3 + 40))
      {
        int v5 = *(void **)(a3 + 24);
        char v15 = *(unsigned char *)(a3 + 32);
        sub_215731D94(v5, (uint64_t)&v15, 1);
      }
      std::ostream::operator<<();
      goto LABEL_31;
    case 3:
      sub_215E0A84C(a2 + 8);
      if (*(void *)(a3 + 40))
      {
        size_t v6 = *(void **)(a3 + 24);
        char v16 = *(unsigned char *)(a3 + 32);
        sub_215731D94(v6, (uint64_t)&v16, 1);
      }
      std::ostream::operator<<();
      goto LABEL_31;
    case 5:
      char v13 = *(unsigned char *)sub_215E0A93C(a2 + 8);
      sub_215DF9090(a3, &v13);
      return;
    case 6:
      sub_215E0AA2C(a2 + 8);
      if (*(void *)(a3 + 40))
      {
        uint64_t v7 = *(void **)(a3 + 24);
        char v17 = *(unsigned char *)(a3 + 32);
        sub_215731D94(v7, (uint64_t)&v17, 1);
      }
      std::ostream::operator<<();
      goto LABEL_31;
    case 7:
      sub_215E0AB1C(a2 + 8);
      if (*(void *)(a3 + 40))
      {
        int v8 = *(void **)(a3 + 24);
        char v18 = *(unsigned char *)(a3 + 32);
        sub_215731D94(v8, (uint64_t)&v18, 1);
      }
      std::ostream::operator<<();
      goto LABEL_31;
    case 8:
      sub_215E0AC0C(a2 + 8);
      if (*(void *)(a3 + 40))
      {
        char v9 = *(void **)(a3 + 24);
        char v19 = *(unsigned char *)(a3 + 32);
        sub_215731D94(v9, (uint64_t)&v19, 1);
      }
      std::ostream::operator<<();
      goto LABEL_31;
    case 11:
      sub_215E0ACFC(a2 + 8);
      if (*(void *)(a3 + 40))
      {
        char v10 = *(void **)(a3 + 24);
        char v20 = *(unsigned char *)(a3 + 32);
        sub_215731D94(v10, (uint64_t)&v20, 1);
      }
      *(void *)(*(void *)(a3 + 24) + *(void *)(**(void **)(a3 + 24) - 24) + 16) = 9;
      std::ostream::operator<<();
      goto LABEL_31;
    case 12:
      sub_215E0ADEC(a2 + 8);
      if (*(void *)(a3 + 40))
      {
        char v11 = *(void **)(a3 + 24);
        char v21 = *(unsigned char *)(a3 + 32);
        sub_215731D94(v11, (uint64_t)&v21, 1);
      }
      *(void *)(*(void *)(a3 + 24) + *(void *)(**(void **)(a3 + 24) - 24) + 16) = 17;
      std::ostream::operator<<();
LABEL_31:
      ++*(void *)(a3 + 40);
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159CF3C8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159CB498((uint64_t)v8, a2);
  sub_2159AA450(a1, (uint64_t)v8, a3);
  if (v20)
  {
    int v5 = (void **)__p;
    if (__p)
    {
      size_t v6 = v19;
      uint64_t v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      char v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159CF4D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CF4E8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159CBB80((uint64_t)v8, a2);
  sub_2159CF608(a1, v8, a3);
  if (v20)
  {
    int v5 = (void **)__p;
    if (__p)
    {
      size_t v6 = v19;
      uint64_t v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        uint64_t v7 = __p;
      }
      char v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159CF5F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2159CF608(uint64_t a1, char *a2, unsigned int a3)
{
  size_t v6 = a2 + 8;
  int __src = 2;
  uint64_t v7 = a1 + 24;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&__src, &v11, 4);
  sub_215D02034((void *)a1);
  sub_215D04A50(v7, *(char **)(a1 + 32), v6, a2 + 16, 8);
  char v12 = a2[16];
  sub_215D04A50(v7, *(char **)(a1 + 32), &v12, &v13, 1);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) - 8) + *(void *)(a1 + 24);
  *(void *)(v8 + 10) = *(void *)(a1 + 32) - v8 - 18;
  *(void *)(a1 + 56) -= 8;
  if (a2[48])
  {
    char v14 = 1;
    sub_215D04A50(v7, *(char **)(a1 + 32), &v14, (char *)&v15, 1);
    double result = sub_215D023C8(a1, a2 + 24);
    if (a3 < 4) {
      return result;
    }
  }
  else
  {
    char v13 = 0;
    double result = sub_215D04A50(v7, *(char **)(a1 + 32), &v13, &v14, 1);
    if (a3 < 4) {
      return result;
    }
  }
  return sub_2159AA784(a1, a2 + 56);
}

void sub_2159CF75C(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)a2;
  v9[0] = *(unsigned char *)a2;
  v9[8] = *(unsigned char *)(a2 + 8);
  char v11 = 0;
  char v12 = 0;
  std::string __p = 0;
  int v5 = *(unsigned char **)(a2 + 16);
  uint64_t v4 = *(unsigned char **)(a2 + 24);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    uint64_t v8 = &v7[v6];
    std::string __p = v7;
    char v12 = &v7[v6];
    memcpy(v7, v5, v6);
    char v11 = v8;
  }
  char __src = v3;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v14, 1);
  sub_2159CF850(v9[0], (uint64_t)v9, a1);
  if (__p)
  {
    char v11 = __p;
    operator delete(__p);
  }
}

void sub_2159CF830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2159CF850(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      uint64_t v4 = (unsigned char *)sub_215E0A408(a2 + 8);
      goto LABEL_10;
    case 1:
      int v5 = (_WORD *)sub_215E0A66C(a2 + 8);
      goto LABEL_12;
    case 2:
      size_t v6 = (_DWORD *)sub_215E0A75C(a2 + 8);
      goto LABEL_14;
    case 3:
      uint64_t v7 = (uint64_t *)sub_215E0A84C(a2 + 8);
      goto LABEL_16;
    case 5:
      uint64_t v4 = (unsigned char *)sub_215E0A93C(a2 + 8);
LABEL_10:
      LOBYTE(__src) = *v4;
      return sub_215D04A50(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 1, 1);
    case 6:
      int v5 = (_WORD *)sub_215E0AA2C(a2 + 8);
LABEL_12:
      LOWORD(__src) = *v5;
      return sub_215D04A50(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 2, 2);
    case 7:
      size_t v6 = (_DWORD *)sub_215E0AB1C(a2 + 8);
LABEL_14:
      LODWORD(__src) = *v6;
      goto LABEL_18;
    case 8:
      uint64_t v7 = (uint64_t *)sub_215E0AC0C(a2 + 8);
LABEL_16:
      uint64_t __src = *v7;
      goto LABEL_20;
    case 11:
      LODWORD(__src) = *(_DWORD *)sub_215E0ACFC(a2 + 8);
LABEL_18:
      double result = sub_215D04A50(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&__src + 4, 4);
      break;
    case 12:
      uint64_t __src = *(void *)sub_215E0ADEC(a2 + 8);
LABEL_20:
      double result = sub_215D04A50(a3 + 24, *(char **)(a3 + 32), (char *)&__src, (char *)&v10, 8);
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

void sub_2159CFA30(int *a1, uint64_t *a2, uint64_t a3)
{
  int v7 = 5;
  (*(void (**)(uint64_t *, int *))(*a2 + 104))(a2, &v7);
  unsigned int v6 = v7;
  if (*a1 < 1 || *a1 == 2 && (int v8 = 3, (*(void (**)(uint64_t *, int *))(*a2 + 104))(a2, &v8), *a1 <= 0))
  {
    sub_2159CFB78(a2, a3, v6);
  }
  else
  {
    (*(void (**)(uint64_t *))(*a2 + 16))(a2);
    sub_2159CFB78(a2, a3, v6);
    (*(void (**)(uint64_t *))(*a2 + 24))(a2);
  }
}

void sub_2159CFB78(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159CB498((uint64_t)v8, a2);
  sub_2159CFC98(a1, (uint64_t)v8, a3);
  if (v20)
  {
    int v5 = (void **)__p;
    if (__p)
    {
      unsigned int v6 = v19;
      int v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        int v7 = __p;
      }
      char v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159CFC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159CFC98(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  __p.__r_.__value_.__r.__words[0] = a1[1];
  sub_2159AB96C((int *)&__p, a1, a2 + 8);
  if (*(unsigned char *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 24);
    if (a3 < 4) {
      return;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    if (a3 < 4) {
      return;
    }
  }
  if (*(unsigned char *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = a1[1];
    sub_2159AB96C((int *)&__p, a1, a2 + 56);
    if (a3 == 5) {
      goto LABEL_7;
    }
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(unsigned char *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*((unsigned char *)a1 + 12) & 4) == 0)
    {
      if (*(unsigned char *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 80);
        if (*(unsigned char *)(a2 + 136)) {
          goto LABEL_14;
        }
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        if (*(unsigned char *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 112);
          if (*(unsigned char *)(a2 + 168)) {
            goto LABEL_15;
          }
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
      if (*(unsigned char *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(void *)(a2 + 152) - *(void *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t *, std::string *))(*a1 + 120))(a1, &__p);
        uint64_t v6 = *(void *)(a2 + 144);
        uint64_t v7 = *(void *)(a2 + 152) - v6;
        if (v7)
        {
          uint64_t v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
      return;
    }
    if (*(unsigned char *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 80);
      if (*(unsigned char *)(a2 + 136)) {
        goto LABEL_21;
      }
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t *, void *))(*a1 + 288))(a1, &unk_215ED14AF);
      if (*(unsigned char *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        char v22 = 0;
        if (*(unsigned char *)(a2 + 168))
        {
LABEL_22:
          uint64_t v11 = *(void *)(a2 + 144);
          uint64_t v12 = *(void *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_215742E98(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            char v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              uint64_t v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0) {
                uint64_t v15 = v13;
              }
              else {
                uint64_t v15 = (uint64_t *)*v13;
              }
              if ((v14 & 0x80u) != 0) {
                uint64_t v14 = v13[1];
              }
              if (v14)
              {
                uint64_t v16 = 0;
                while (1)
                {
                  int v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92) {
                    break;
                  }
                  if (v14 == ++v16) {
                    goto LABEL_24;
                  }
                }
                if (v14 != v16 && v16 != -1) {
                  break;
                }
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12) {
                goto LABEL_39;
              }
            }
            sub_2159A56AC(v11, v12, *(void *)(a2 + 152), ";", 1uLL, &v20);
          }
          std::string __p = v20;
          char v22 = 1;
          uint64_t v18 = *a1;
          v20.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t *, std::string *))(v18 + 80))(a1, &v20);
          (*(void (**)(uint64_t *, std::string *))(*a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          return;
        }
LABEL_48:
        uint64_t v19 = *a1;
        v20.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t *, std::string *))(v19 + 80))(a1, &v20);
        (*(void (**)(uint64_t *, void *))(*a1 + 288))(a1, &unk_215ED14AF);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t *, std::string *))(*a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t *, void *))(*a1 + 288))(a1, &unk_215ED14AF);
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v22 = 0;
    if (*(unsigned char *)(a2 + 168)) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
}

void sub_2159D04CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D04F0(int *a1, uint64_t a2, uint64_t a3)
{
  int v7 = 4;
  (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v7);
  unsigned int v6 = v7;
  if (*a1 < 1
    || *a1 == 2 && (int v8 = 3, (*(void (**)(uint64_t, int *))(*(void *)a2 + 104))(a2, &v8), *a1 <= 0))
  {
    sub_2159D0638(a2, a3, v6);
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    sub_2159D0638(a2, a3, v6);
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  }
}

void sub_2159D0638(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_2159CBB80((uint64_t)v8, a2);
  sub_2159D0758(a1, (uint64_t)v8, a3);
  if (v20)
  {
    int v5 = (void **)__p;
    if (__p)
    {
      unsigned int v6 = v19;
      int v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0) {
            operator delete(*(v6 - 3));
          }
          v6 -= 3;
        }
        while (v6 != v5);
        int v7 = __p;
      }
      uint64_t v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0) {
    operator delete(v15);
  }
  if (v14 && v13 < 0) {
    operator delete(v12);
  }
  if (v11)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_2159D0740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21599FF58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2159D0758(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v7 = *(void *)(a1 + 8);
  sub_2159AB96C((int *)&v7, (unsigned char *)a1, a2 + 8);
  if (*(unsigned char *)(a2 + 48))
  {
    LOBYTE(v7) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v7);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4) {
      return result;
    }
  }
  else
  {
    LOBYTE(v7) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v7);
    if (a3 < 4) {
      return result;
    }
  }
  if (*(unsigned char *)(a2 + 72))
  {
    LOBYTE(v7) = 1;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v7);
    uint64_t v7 = *(void *)(a1 + 8);
    return sub_2159AB96C((int *)&v7, (unsigned char *)a1, a2 + 56);
  }
  else
  {
    LOBYTE(v7) = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 80))(a1, &v7);
  }
}

void sub_2159D0904(int *a1, unsigned char *a2, uint64_t a3)
{
  int v6 = 2;
  (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1
    || *a1 == 2 && (int v7 = 2, (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v7), *a1 <= 0))
  {
    sub_2159D0A48(a2, a3);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    sub_2159D0A48(a2, a3);
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

void sub_2159D0A48(unsigned char *a1, uint64_t a2)
{
  v8[0] = *(unsigned char *)a2;
  v8[8] = *(unsigned char *)(a2 + 8);
  char v10 = 0;
  char v11 = 0;
  std::string __p = 0;
  uint64_t v4 = *(unsigned char **)(a2 + 16);
  char v3 = *(unsigned char **)(a2 + 24);
  size_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    int v6 = (char *)operator new(v3 - v4);
    int v7 = &v6[v5];
    std::string __p = v6;
    char v11 = &v6[v5];
    memcpy(v6, v4, v5);
    char v10 = v7;
  }
  uint64_t v12 = v8;
  sub_2159D0EBC(a1, &v12);
  sub_2159D0B2C(v8[0], (uint64_t)v8, (uint64_t)a1);
  if (__p)
  {
    char v10 = __p;
    operator delete(__p);
  }
}

void sub_2159D0B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159D0B2C(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v5) = *(unsigned char *)sub_215E0A408(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 80))(a3, &v5);
      break;
    case 1:
      LOWORD(v5) = *(_WORD *)sub_215E0A66C(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 96))(a3, &v5);
      break;
    case 2:
      LODWORD(v5) = *(_DWORD *)sub_215E0A75C(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 104))(a3, &v5);
      break;
    case 3:
      uint64_t v5 = *(void *)sub_215E0A84C(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 120))(a3, &v5);
      break;
    case 5:
      LOBYTE(v5) = *(unsigned char *)sub_215E0A93C(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 88))(a3, &v5);
      break;
    case 6:
      LOWORD(v5) = *(_WORD *)sub_215E0AA2C(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 48))(a3, &v5);
      break;
    case 7:
      LODWORD(v5) = *(_DWORD *)sub_215E0AB1C(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 56))(a3, &v5);
      break;
    case 8:
      uint64_t v5 = *(void *)sub_215E0AC0C(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 72))(a3, &v5);
      break;
    case 11:
      LODWORD(v5) = *(_DWORD *)sub_215E0ACFC(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 128))(a3, &v5);
      break;
    case 12:
      uint64_t v5 = *(void *)sub_215E0ADEC(a2 + 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a3 + 136))(a3, &v5);
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

uint64_t sub_2159D0EBC(unsigned char *a1, unsigned char **a2)
{
  if ((a1[12] & 2) != 0)
  {
    int v4 = 0;
    sub_2157E3DE8();
  }
  v3[0] = **a2;
  return (*(uint64_t (**)(unsigned char *, unsigned char *))(*(void *)a1 + 80))(a1, v3);
}

void sub_2159D0FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D1000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159D1014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159D1028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DF07E4(a2);
  v8[0] = "version";
  v8[1] = 7;
  unsigned int v9 = 2;
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_215DF1DC8((void *)a2, &v9);
  if (v9 >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = v9;
  }
  if (v6 >= 2)
  {
    int v7 = *(unsigned __int8 *)(a2 + 104);
    *(void *)(a2 + 88) = "value_type";
    *(void *)(a2 + 96) = 10;
    if (!v7) {
      *(unsigned char *)(a2 + 104) = 1;
    }
    v8[0] = a3;
    sub_2159D177C((void *)a2);
  }
  sub_2159D1128((uint64_t)v8, a2);
}

void sub_2159D1128(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)operator new(4uLL) = 0;
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "value_type";
  *(void *)(a2 + 96) = 10;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_2159D177C((void *)a2);
}

void sub_2159D1284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v18 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v18 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_2159D12D0(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v35) = 0;
      int v5 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v5) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1B68((void *)a2, &v35);
      char v6 = v35;
      int v7 = operator new(1uLL);
      *int v7 = v6;
      int v8 = v7 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 1:
      LOWORD(v35) = 0;
      int v10 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v10) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1C98((void *)a2, &v35);
      __int16 v11 = v35;
      int v7 = operator new(2uLL);
      *(_WORD *)int v7 = v11;
      int v8 = v7 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 2:
      LODWORD(v35) = 0;
      int v12 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v12) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1DC8((void *)a2, &v35);
      int v13 = v35;
      int v7 = operator new(4uLL);
      *(_DWORD *)int v7 = v13;
      int v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 3:
      int v14 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v14) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      uint64_t v15 = (char *)sub_215DF0AA0((void *)a2);
      ++*(void *)(a2 + 112);
      uint64_t v35 = 0;
      sub_215D306DC(v15, &v35);
      uint64_t v16 = v35;
      int v7 = operator new(8uLL);
      *(void *)int v7 = v16;
      int v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 5:
      LOBYTE(v35) = 0;
      int v17 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v17) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1AD0((void *)a2, &v35);
      char v18 = v35;
      int v7 = operator new(1uLL);
      *int v7 = v18;
      int v8 = v7 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 6:
      LOWORD(v35) = 0;
      int v19 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v19) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1C00((void *)a2, &v35);
      __int16 v20 = v35;
      uint64_t v21 = operator new(2uLL);
      *uint64_t v21 = v20;
      char v22 = v21 + 1;
      *(unsigned char *)(a3 + 8) = 6;
      uint64_t v23 = *(void **)(a3 + 16);
      if (v23)
      {
        *(void *)(a3 + 24) = v23;
        operator delete(v23);
      }
      *(void *)(a3 + 16) = v21;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 32) = v22;
      return;
    case 7:
      LODWORD(v35) = 0;
      int v24 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v24) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1D30((void *)a2, &v35);
      int v25 = v35;
      int v7 = operator new(4uLL);
      *(_DWORD *)int v7 = v25;
      int v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 8:
      int v26 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v26) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      char v27 = (char *)sub_215DF0AA0((void *)a2);
      ++*(void *)(a2 + 112);
      uint64_t v35 = 0;
      sub_215D30830(v27, &v35);
      uint64_t v28 = v35;
      int v7 = operator new(8uLL);
      *(void *)int v7 = v28;
      int v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 11:
      int v29 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v29) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      int v30 = (uint64_t *)sub_215DF0AA0((void *)a2);
      ++*(void *)(a2 + 112);
      float v31 = sub_215DF73DC(v30);
      int v7 = operator new(4uLL);
      *(float *)int v7 = v31;
      int v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 12:
      int v32 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v32) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      uint64_t v33 = (uint64_t *)sub_215DF0AA0((void *)a2);
      ++*(void *)(a2 + 112);
      double v34 = sub_215DF74C0(v33);
      int v7 = operator new(8uLL);
      *(double *)int v7 = v34;
      int v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      unsigned int v9 = *(void **)(a3 + 16);
      if (v9)
      {
LABEL_45:
        *(void *)(a3 + 24) = v9;
        operator delete(v9);
      }
LABEL_46:
      *(void *)(a3 + 16) = v7;
      *(void *)(a3 + 24) = v8;
      *(void *)(a3 + 32) = v8;
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D177C(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  long long v2 = (void **)sub_215DF0AA0(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D30C0C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159D1874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D18E4(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v35) = 0;
      int v5 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v5) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1B68((void *)a2, &v35);
      char v6 = v35;
      int v7 = operator new(1uLL);
      *int v7 = v6;
      int v8 = v7 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 1:
      LOWORD(v35) = 0;
      int v10 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v10) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1C98((void *)a2, &v35);
      __int16 v11 = v35;
      int v7 = operator new(2uLL);
      *(_WORD *)int v7 = v11;
      int v8 = v7 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 2:
      LODWORD(v35) = 0;
      int v12 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v12) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1DC8((void *)a2, &v35);
      int v13 = v35;
      int v7 = operator new(4uLL);
      *(_DWORD *)int v7 = v13;
      int v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 3:
      int v14 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v14) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      uint64_t v15 = (char *)sub_215DF0AA0((void *)a2);
      ++*(void *)(a2 + 112);
      uint64_t v35 = 0;
      sub_215D306DC(v15, &v35);
      uint64_t v16 = v35;
      int v7 = operator new(8uLL);
      *(void *)int v7 = v16;
      int v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 5:
      LOBYTE(v35) = 0;
      int v17 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v17) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1AD0((void *)a2, &v35);
      char v18 = v35;
      int v7 = operator new(1uLL);
      *int v7 = v18;
      int v8 = v7 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 6:
      LOWORD(v35) = 0;
      int v19 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v19) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1C00((void *)a2, &v35);
      __int16 v20 = v35;
      uint64_t v21 = operator new(2uLL);
      *uint64_t v21 = v20;
      char v22 = v21 + 1;
      *(unsigned char *)(a3 + 8) = 6;
      uint64_t v23 = *(void **)(a3 + 16);
      if (v23)
      {
        *(void *)(a3 + 24) = v23;
        operator delete(v23);
      }
      *(void *)(a3 + 16) = v21;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 32) = v22;
      return;
    case 7:
      LODWORD(v35) = 0;
      int v24 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v24) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF1D30((void *)a2, &v35);
      int v25 = v35;
      int v7 = operator new(4uLL);
      *(_DWORD *)int v7 = v25;
      int v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 8:
      int v26 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v26) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      char v27 = (char *)sub_215DF0AA0((void *)a2);
      ++*(void *)(a2 + 112);
      uint64_t v35 = 0;
      sub_215D30830(v27, &v35);
      uint64_t v28 = v35;
      int v7 = operator new(8uLL);
      *(void *)int v7 = v28;
      int v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 11:
      int v29 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v29) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      int v30 = (uint64_t *)sub_215DF0AA0((void *)a2);
      ++*(void *)(a2 + 112);
      float v31 = sub_215DF73DC(v30);
      int v7 = operator new(4uLL);
      *(float *)int v7 = v31;
      int v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 12:
      int v32 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v32) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      uint64_t v33 = (uint64_t *)sub_215DF0AA0((void *)a2);
      ++*(void *)(a2 + 112);
      double v34 = sub_215DF74C0(v33);
      int v7 = operator new(8uLL);
      *(double *)int v7 = v34;
      int v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      unsigned int v9 = *(void **)(a3 + 16);
      if (v9)
      {
LABEL_45:
        *(void *)(a3 + 24) = v9;
        operator delete(v9);
      }
LABEL_46:
      *(void *)(a3 + 16) = v7;
      *(void *)(a3 + 24) = v8;
      *(void *)(a3 + 32) = v8;
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D1D90(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_2159D1E90((uint64_t)&v10, (uint64_t)a2, (uint64_t)a3);
  }
  else
  {
    char v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    unsigned __int8 v11 = 0;
    sub_215DFF4BC(a2[6], &v11);
    int v7 = v11;
    *a3 = v11;
    sub_2159D2018(v7, (uint64_t)a2, (uint64_t)a3);
    uint64_t v8 = a2[4];
    uint64_t v9 = *(void *)(v8 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v8 - 8);
    if (v9) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v9);
    }
    a2[4] -= 16;
  }
}

void sub_2159D1E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = 7;
  char v19 = 7;
  int v5 = (char *)operator new(4uLL);
  __int16 v20 = v5;
  *(_DWORD *)int v5 = 0;
  uint64_t v21 = v5 + 4;
  char v22 = v5 + 4;
  v14[0] = 0;
  sub_215DFF4BC(*(void *)(a2 + 48), v14);
  v18[0] = v14[0];
  sub_2159D2344(v14[0], a2, (uint64_t)v18);
  char v6 = v18[0];
  v14[0] = v18[0];
  char v7 = v19;
  v14[8] = v19;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  uint64_t v8 = v20;
  size_t v9 = v21 - v20;
  if (v21 == v20)
  {
    unsigned __int8 v11 = 0;
    char v10 = 0;
    *(unsigned char *)a3 = v18[0];
    *(unsigned char *)(a3 + 8) = v7;
    int v13 = (void *)(a3 + 16);
    int v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(void *)(a3 + 24) = v12;
      operator delete(v12);
      void *v13 = 0;
      v13[1] = 0;
      _DWORD v13[2] = 0;
      uint64_t v8 = v20;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    char v10 = (char *)operator new(v21 - v20);
    unsigned __int8 v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(unsigned char *)a3 = v6;
    *(unsigned char *)(a3 + 8) = v7;
    int v13 = (void *)(a3 + 16);
    int v12 = *(void **)(a3 + 16);
    if (v12) {
      goto LABEL_4;
    }
  }
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v11;
  if (v8)
  {
    uint64_t v21 = v8;
    operator delete(v8);
  }
}

void sub_2159D1FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    char v18 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    char v18 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_2159D2018(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_215DFF4BC(*(void *)(a2 + 48), &v17);
      char v4 = v17;
      int v5 = operator new(1uLL);
      unsigned char *v5 = v4;
      char v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 1:
      LOWORD(v17) = 0;
      sub_215DFF670(*(void *)(a2 + 48), &v17);
      __int16 v8 = v17;
      int v5 = operator new(2uLL);
      *(_WORD *)int v5 = v8;
      char v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 2:
      LODWORD(v17) = 0;
      sub_215DFF824(*(void *)(a2 + 48), &v17);
      int v9 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v9;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 3:
      uint64_t v17 = 0;
      sub_215DFFC24(*(void *)(a2 + 48), &v17);
      uint64_t v10 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v10;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 5:
      LOBYTE(v17) = 0;
      sub_215DFF408(*(void *)(a2 + 48), &v17);
      char v11 = v17;
      int v5 = operator new(1uLL);
      unsigned char *v5 = v11;
      char v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 6:
      LOWORD(v17) = 0;
      sub_215DFF5BC(*(void *)(a2 + 48), &v17);
      __int16 v12 = v17;
      int v5 = operator new(2uLL);
      *(_WORD *)int v5 = v12;
      char v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 6;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 7:
      LODWORD(v17) = 0;
      sub_215DFF770(*(void *)(a2 + 48), &v17);
      int v13 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v13;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 8:
      uint64_t v17 = 0;
      sub_215DFFB20(*(void *)(a2 + 48), &v17);
      uint64_t v14 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v14;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 11:
      LODWORD(v17) = 0;
      sub_215DFFD1C(*(void *)(a2 + 48), (float *)&v17);
      int v15 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v15;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 12:
      uint64_t v17 = 0;
      sub_215DFFE68(*(void *)(a2 + 48), (double *)&v17);
      uint64_t v16 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v16;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      char v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_24:
        *(void *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_25:
      *(void *)(a3 + 16) = v5;
      *(void *)(a3 + 24) = v6;
      *(void *)(a3 + 32) = v6;
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D2344(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_215DFF4BC(*(void *)(a2 + 48), &v17);
      char v4 = v17;
      int v5 = operator new(1uLL);
      unsigned char *v5 = v4;
      char v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 1:
      LOWORD(v17) = 0;
      sub_215DFF670(*(void *)(a2 + 48), &v17);
      __int16 v8 = v17;
      int v5 = operator new(2uLL);
      *(_WORD *)int v5 = v8;
      char v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 2:
      LODWORD(v17) = 0;
      sub_215DFF824(*(void *)(a2 + 48), &v17);
      int v9 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v9;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 3:
      uint64_t v17 = 0;
      sub_215DFFC24(*(void *)(a2 + 48), &v17);
      uint64_t v10 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v10;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 5:
      LOBYTE(v17) = 0;
      sub_215DFF408(*(void *)(a2 + 48), &v17);
      char v11 = v17;
      int v5 = operator new(1uLL);
      unsigned char *v5 = v11;
      char v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 6:
      LOWORD(v17) = 0;
      sub_215DFF5BC(*(void *)(a2 + 48), &v17);
      __int16 v12 = v17;
      int v5 = operator new(2uLL);
      *(_WORD *)int v5 = v12;
      char v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 6;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 7:
      LODWORD(v17) = 0;
      sub_215DFF770(*(void *)(a2 + 48), &v17);
      int v13 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v13;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 8:
      uint64_t v17 = 0;
      sub_215DFFB20(*(void *)(a2 + 48), &v17);
      uint64_t v14 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v14;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 11:
      LODWORD(v17) = 0;
      sub_215DFFD1C(*(void *)(a2 + 48), (float *)&v17);
      int v15 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v15;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 12:
      uint64_t v17 = 0;
      sub_215DFFE68(*(void *)(a2 + 48), (double *)&v17);
      uint64_t v16 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v16;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      char v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_24:
        *(void *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_25:
      *(void *)(a3 + 16) = v5;
      *(void *)(a3 + 24) = v6;
      *(void *)(a3 + 32) = v6;
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D2670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DF01A0(a2);
  v8[0] = "version";
  v8[1] = 7;
  unsigned int v9 = 2;
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_215DF0F9C((void *)a2, &v9);
  if (v9 >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = v9;
  }
  if (v6 >= 2)
  {
    int v7 = *(unsigned __int8 *)(a2 + 104);
    *(void *)(a2 + 88) = "value_type";
    *(void *)(a2 + 96) = 10;
    if (!v7) {
      *(unsigned char *)(a2 + 104) = 1;
    }
    v8[0] = a3;
    sub_2159D2DC4((void *)a2);
  }
  sub_2159D2770((uint64_t)v8, a2);
}

void sub_2159D2770(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)operator new(4uLL) = 0;
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "value_type";
  *(void *)(a2 + 96) = 10;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_2159D2DC4((void *)a2);
}

void sub_2159D28CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    char v18 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    char v18 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_2159D2918(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v35) = 0;
      int v5 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v5) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0D3C((void *)a2, &v35);
      char v6 = v35;
      int v7 = operator new(1uLL);
      *int v7 = v6;
      __int16 v8 = v7 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 1:
      LOWORD(v35) = 0;
      int v10 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v10) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0E6C((void *)a2, &v35);
      __int16 v11 = v35;
      int v7 = operator new(2uLL);
      *(_WORD *)int v7 = v11;
      __int16 v8 = v7 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 2:
      LODWORD(v35) = 0;
      int v12 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v12) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0F9C((void *)a2, &v35);
      int v13 = v35;
      int v7 = operator new(4uLL);
      *(_DWORD *)int v7 = v13;
      __int16 v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 3:
      int v14 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v14) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      int v15 = (char *)sub_215DF045C((void *)a2);
      ++*(void *)(a2 + 112);
      uint64_t v35 = 0;
      sub_215D2FEDC(v15, &v35);
      uint64_t v16 = v35;
      int v7 = operator new(8uLL);
      *(void *)int v7 = v16;
      __int16 v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 5:
      LOBYTE(v35) = 0;
      int v17 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v17) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0CA4((void *)a2, &v35);
      char v18 = v35;
      int v7 = operator new(1uLL);
      *int v7 = v18;
      __int16 v8 = v7 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 6:
      LOWORD(v35) = 0;
      int v19 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v19) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0DD4((void *)a2, &v35);
      __int16 v20 = v35;
      uint64_t v21 = operator new(2uLL);
      *uint64_t v21 = v20;
      char v22 = v21 + 1;
      *(unsigned char *)(a3 + 8) = 6;
      uint64_t v23 = *(void **)(a3 + 16);
      if (v23)
      {
        *(void *)(a3 + 24) = v23;
        operator delete(v23);
      }
      *(void *)(a3 + 16) = v21;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 32) = v22;
      return;
    case 7:
      LODWORD(v35) = 0;
      int v24 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v24) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0F04((void *)a2, &v35);
      int v25 = v35;
      int v7 = operator new(4uLL);
      *(_DWORD *)int v7 = v25;
      __int16 v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 8:
      int v26 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v26) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      char v27 = (char *)sub_215DF045C((void *)a2);
      ++*(void *)(a2 + 112);
      uint64_t v35 = 0;
      sub_215D30030(v27, &v35);
      uint64_t v28 = v35;
      int v7 = operator new(8uLL);
      *(void *)int v7 = v28;
      __int16 v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 11:
      int v29 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v29) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      int v30 = (uint64_t *)sub_215DF045C((void *)a2);
      ++*(void *)(a2 + 112);
      float v31 = sub_215DF6C1C(v30);
      int v7 = operator new(4uLL);
      *(float *)int v7 = v31;
      __int16 v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 12:
      int v32 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v32) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      uint64_t v33 = (uint64_t *)sub_215DF045C((void *)a2);
      ++*(void *)(a2 + 112);
      double v34 = sub_215DF6D00(v33);
      int v7 = operator new(8uLL);
      *(double *)int v7 = v34;
      __int16 v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      unsigned int v9 = *(void **)(a3 + 16);
      if (v9)
      {
LABEL_45:
        *(void *)(a3 + 24) = v9;
        operator delete(v9);
      }
LABEL_46:
      *(void *)(a3 + 16) = v7;
      *(void *)(a3 + 24) = v8;
      *(void *)(a3 + 32) = v8;
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D2DC4(void *a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v4 = 0;
  long long v2 = (void **)sub_215DF045C(a1);
  ++a1[14];
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  sub_215D3040C(v2, (uint64_t)&v5);
  uint64_t v4 = v6;
  *(_OWORD *)std::string __p = v5;
  operator new();
}

void sub_2159D2EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23 = (uint64_t)a17;
  a17 = 0;
  if (v23) {
    sub_215E15464((uint64_t)&a17, v23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D2F2C(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v35) = 0;
      int v5 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v5) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0D3C((void *)a2, &v35);
      char v6 = v35;
      int v7 = operator new(1uLL);
      *int v7 = v6;
      __int16 v8 = v7 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 1:
      LOWORD(v35) = 0;
      int v10 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v10) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0E6C((void *)a2, &v35);
      __int16 v11 = v35;
      int v7 = operator new(2uLL);
      *(_WORD *)int v7 = v11;
      __int16 v8 = v7 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 2:
      LODWORD(v35) = 0;
      int v12 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v12) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0F9C((void *)a2, &v35);
      int v13 = v35;
      int v7 = operator new(4uLL);
      *(_DWORD *)int v7 = v13;
      __int16 v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 3:
      int v14 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v14) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      int v15 = (char *)sub_215DF045C((void *)a2);
      ++*(void *)(a2 + 112);
      uint64_t v35 = 0;
      sub_215D2FEDC(v15, &v35);
      uint64_t v16 = v35;
      int v7 = operator new(8uLL);
      *(void *)int v7 = v16;
      __int16 v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 5:
      LOBYTE(v35) = 0;
      int v17 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v17) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0CA4((void *)a2, &v35);
      char v18 = v35;
      int v7 = operator new(1uLL);
      *int v7 = v18;
      __int16 v8 = v7 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 6:
      LOWORD(v35) = 0;
      int v19 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v19) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0DD4((void *)a2, &v35);
      __int16 v20 = v35;
      uint64_t v21 = operator new(2uLL);
      *uint64_t v21 = v20;
      char v22 = v21 + 1;
      *(unsigned char *)(a3 + 8) = 6;
      uint64_t v23 = *(void **)(a3 + 16);
      if (v23)
      {
        *(void *)(a3 + 24) = v23;
        operator delete(v23);
      }
      *(void *)(a3 + 16) = v21;
      *(void *)(a3 + 24) = v22;
      *(void *)(a3 + 32) = v22;
      return;
    case 7:
      LODWORD(v35) = 0;
      int v24 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v24) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      sub_215DF0F04((void *)a2, &v35);
      int v25 = v35;
      int v7 = operator new(4uLL);
      *(_DWORD *)int v7 = v25;
      __int16 v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 8:
      int v26 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v26) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      char v27 = (char *)sub_215DF045C((void *)a2);
      ++*(void *)(a2 + 112);
      uint64_t v35 = 0;
      sub_215D30030(v27, &v35);
      uint64_t v28 = v35;
      int v7 = operator new(8uLL);
      *(void *)int v7 = v28;
      __int16 v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 11:
      int v29 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v29) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      int v30 = (uint64_t *)sub_215DF045C((void *)a2);
      ++*(void *)(a2 + 112);
      float v31 = sub_215DF6C1C(v30);
      int v7 = operator new(4uLL);
      *(float *)int v7 = v31;
      __int16 v8 = v7 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      unsigned int v9 = *(void **)(a3 + 16);
      if (!v9) {
        goto LABEL_46;
      }
      goto LABEL_45;
    case 12:
      int v32 = *(unsigned __int8 *)(a2 + 104);
      *(void *)(a2 + 88) = "number";
      *(void *)(a2 + 96) = 6;
      if (!v32) {
        *(unsigned char *)(a2 + 104) = 1;
      }
      uint64_t v33 = (uint64_t *)sub_215DF045C((void *)a2);
      ++*(void *)(a2 + 112);
      double v34 = sub_215DF6D00(v33);
      int v7 = operator new(8uLL);
      *(double *)int v7 = v34;
      __int16 v8 = v7 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      unsigned int v9 = *(void **)(a3 + 16);
      if (v9)
      {
LABEL_45:
        *(void *)(a3 + 24) = v9;
        operator delete(v9);
      }
LABEL_46:
      *(void *)(a3 + 16) = v7;
      *(void *)(a3 + 24) = v8;
      *(void *)(a3 + 32) = v8;
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D33D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = 7;
  char v19 = 7;
  int v5 = (char *)operator new(4uLL);
  __int16 v20 = v5;
  *(_DWORD *)int v5 = 0;
  uint64_t v21 = v5 + 4;
  char v22 = v5 + 4;
  v14[0] = 0;
  sub_215DFA01C(a2, v14);
  v18[0] = v14[0];
  sub_2159D3890(v14[0], a2, (uint64_t)v18);
  char v6 = v18[0];
  v14[0] = v18[0];
  char v7 = v19;
  v14[8] = v19;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = 0;
  __int16 v8 = v20;
  size_t v9 = v21 - v20;
  if (v21 == v20)
  {
    __int16 v11 = 0;
    int v10 = 0;
    *(unsigned char *)a3 = v18[0];
    *(unsigned char *)(a3 + 8) = v7;
    int v13 = (void *)(a3 + 16);
    int v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(void *)(a3 + 24) = v12;
      operator delete(v12);
      void *v13 = 0;
      v13[1] = 0;
      _DWORD v13[2] = 0;
      __int16 v8 = v20;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    int v10 = (char *)operator new(v21 - v20);
    __int16 v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(unsigned char *)a3 = v6;
    *(unsigned char *)(a3 + 8) = v7;
    int v13 = (void *)(a3 + 16);
    int v12 = *(void **)(a3 + 16);
    if (v12) {
      goto LABEL_4;
    }
  }
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v11;
  if (v8)
  {
    uint64_t v21 = v8;
    operator delete(v8);
  }
}

void sub_2159D3514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    char v18 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    char v18 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_2159D3560(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_215DFA01C(a2, &v17);
      char v4 = v17;
      int v5 = operator new(1uLL);
      unsigned char *v5 = v4;
      char v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 1:
      LOWORD(v17) = 0;
      sub_215DFA594(a2, &v17);
      __int16 v8 = v17;
      int v5 = operator new(2uLL);
      *(_WORD *)int v5 = v8;
      char v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 2:
      LODWORD(v17) = 0;
      sub_215DFABD4(a2, &v17);
      int v9 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v9;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 3:
      uint64_t v17 = 0;
      sub_215DFB854(a2, &v17);
      uint64_t v10 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v10;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 5:
      LOBYTE(v17) = 0;
      sub_215DF9DC4(a2, &v17);
      char v11 = v17;
      int v5 = operator new(1uLL);
      unsigned char *v5 = v11;
      char v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 6:
      LOWORD(v17) = 0;
      sub_215DFA274(a2, &v17);
      __int16 v12 = v17;
      int v5 = operator new(2uLL);
      *(_WORD *)int v5 = v12;
      char v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 6;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 7:
      LODWORD(v17) = 0;
      sub_215DFA8B4(a2, &v17);
      int v13 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v13;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 8:
      uint64_t v17 = 0;
      sub_215DFB534(a2, &v17);
      uint64_t v14 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v14;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 11:
      LODWORD(v17) = 0;
      sub_215DFBEC8(a2, &v17);
      int v15 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v15;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 12:
      uint64_t v17 = 0;
      sub_215DFC1E8(a2, &v17);
      uint64_t v16 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v16;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      char v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_24:
        *(void *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_25:
      *(void *)(a3 + 16) = v5;
      *(void *)(a3 + 24) = v6;
      *(void *)(a3 + 32) = v6;
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D3890(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      sub_215DFA01C(a2, &v17);
      char v4 = v17;
      int v5 = operator new(1uLL);
      unsigned char *v5 = v4;
      char v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 1:
      LOWORD(v17) = 0;
      sub_215DFA594(a2, &v17);
      __int16 v8 = v17;
      int v5 = operator new(2uLL);
      *(_WORD *)int v5 = v8;
      char v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 2:
      LODWORD(v17) = 0;
      sub_215DFABD4(a2, &v17);
      int v9 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v9;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 3:
      uint64_t v17 = 0;
      sub_215DFB854(a2, &v17);
      uint64_t v10 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v10;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 5:
      LOBYTE(v17) = 0;
      sub_215DF9DC4(a2, &v17);
      char v11 = v17;
      int v5 = operator new(1uLL);
      unsigned char *v5 = v11;
      char v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 6:
      LOWORD(v17) = 0;
      sub_215DFA274(a2, &v17);
      __int16 v12 = v17;
      int v5 = operator new(2uLL);
      *(_WORD *)int v5 = v12;
      char v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 6;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 7:
      LODWORD(v17) = 0;
      sub_215DFA8B4(a2, &v17);
      int v13 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v13;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 8:
      uint64_t v17 = 0;
      sub_215DFB534(a2, &v17);
      uint64_t v14 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v14;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 11:
      LODWORD(v17) = 0;
      sub_215DFBEC8(a2, &v17);
      int v15 = v17;
      int v5 = operator new(4uLL);
      *(_DWORD *)int v5 = v15;
      char v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 12:
      uint64_t v17 = 0;
      sub_215DFC1E8(a2, &v17);
      uint64_t v16 = v17;
      int v5 = operator new(8uLL);
      *(void *)int v5 = v16;
      char v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      char v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_24:
        *(void *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_25:
      *(void *)(a3 + 16) = v5;
      *(void *)(a3 + 24) = v6;
      *(void *)(a3 + 32) = v6;
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D3BC0(uint64_t a1, void *a2, unsigned char *a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3) {
    goto LABEL_8;
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 > 1)
  {
    sub_215D02644(a2);
    unint64_t v10 = a2[6];
    if (a2[7] > v10)
    {
      int v11 = *(unsigned __int8 *)(a2[3] + v10);
      a2[6] = v10 + 1;
      *a3 = v11;
      sub_2159D3F0C(v11, a2, (uint64_t)a3);
      uint64_t v12 = a2[12];
      uint64_t v13 = a2[9];
      a2[6] = *(void *)(v12 - 8) + *(void *)(v13 - 8) + 8;
      a2[9] = v13 - 8;
      a2[12] = v12 - 8;
      return;
    }
LABEL_8:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  sub_2159D3D0C((uint64_t)&v15, a2, (uint64_t)a3);
}

void sub_2159D3CE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D3CF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D3D0C(uint64_t a1, void *a2, uint64_t a3)
{
  v17[0] = 7;
  char v18 = 7;
  BOOL v5 = (char *)operator new(4uLL);
  char v19 = v5;
  *(_DWORD *)BOOL v5 = 0;
  __int16 v20 = v5 + 4;
  uint64_t v21 = v5 + 4;
  unint64_t v6 = a2[6];
  if (a2[7] <= v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  int v7 = *(unsigned __int8 *)(a2[3] + v6);
  a2[6] = v6 + 1;
  v17[0] = v7;
  sub_2159D44F4(v7, a2, (uint64_t)v17);
  char v8 = v17[0];
  char v9 = v18;
  unint64_t v10 = v19;
  size_t v11 = v20 - v19;
  if (v20 == v19)
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    *(unsigned char *)a3 = v17[0];
    *(unsigned char *)(a3 + 8) = v9;
    char v15 = (void *)(a3 + 16);
    uint64_t v14 = *(void **)(a3 + 16);
    if (v14)
    {
LABEL_5:
      *(void *)(a3 + 24) = v14;
      operator delete(v14);
      void *v15 = 0;
      v15[1] = 0;
      void v15[2] = 0;
      unint64_t v10 = v19;
    }
  }
  else
  {
    if ((v11 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    uint64_t v12 = (char *)operator new(v20 - v19);
    uint64_t v13 = &v12[v11];
    memcpy(v12, v10, v11);
    *(unsigned char *)a3 = v8;
    *(unsigned char *)(a3 + 8) = v9;
    char v15 = (void *)(a3 + 16);
    uint64_t v14 = *(void **)(a3 + 16);
    if (v14) {
      goto LABEL_5;
    }
  }
  *(void *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v13;
  if (v10)
  {
    __int16 v20 = v10;
    operator delete(v10);
  }
}

void sub_2159D3EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  __cxa_free_exception(v17);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2159D3F0C(int a1, void *a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      unint64_t v4 = a2[6];
      if (a2[7] <= v4) {
        goto LABEL_56;
      }
      char v5 = *(unsigned char *)(a2[3] + v4);
      a2[6] = v4 + 1;
      unint64_t v6 = operator new(1uLL);
      unsigned char *v6 = v5;
      char v8 = (void *)(a3 + 16);
      int v7 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 0;
      if (v7) {
        goto LABEL_4;
      }
      goto LABEL_5;
    case 1:
      unint64_t v10 = a2[6];
      unint64_t v11 = a2[7];
      BOOL v12 = v11 >= v10;
      unint64_t v13 = v11 - v10;
      if (!v12) {
        unint64_t v13 = 0;
      }
      if (v13 <= 1) {
        goto LABEL_56;
      }
      __int16 v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      unint64_t v6 = operator new(2uLL);
      *(_WORD *)unint64_t v6 = v14;
      uint64_t v16 = (void *)(a3 + 16);
      char v15 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 1;
      if (!v15) {
        goto LABEL_32;
      }
      goto LABEL_31;
    case 2:
      unint64_t v17 = a2[6];
      unint64_t v18 = a2[7];
      BOOL v12 = v18 >= v17;
      unint64_t v19 = v18 - v17;
      if (!v12) {
        unint64_t v19 = 0;
      }
      if (v19 <= 3) {
        goto LABEL_56;
      }
      int v20 = *(_DWORD *)(a2[3] + v17);
      a2[6] = v17 + 4;
      unint64_t v6 = operator new(4uLL);
      *(_DWORD *)unint64_t v6 = v20;
      char v22 = (void *)(a3 + 16);
      uint64_t v21 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 2;
      if (!v21) {
        goto LABEL_38;
      }
      goto LABEL_37;
    case 3:
      unint64_t v23 = a2[6];
      unint64_t v24 = a2[7];
      BOOL v12 = v24 >= v23;
      unint64_t v25 = v24 - v23;
      if (!v12) {
        unint64_t v25 = 0;
      }
      if (v25 <= 7) {
        goto LABEL_56;
      }
      uint64_t v26 = *(void *)(a2[3] + v23);
      a2[6] = v23 + 8;
      unint64_t v6 = operator new(8uLL);
      *(void *)unint64_t v6 = v26;
      uint64_t v28 = (void *)(a3 + 16);
      char v27 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 3;
      if (!v27) {
        goto LABEL_44;
      }
      goto LABEL_43;
    case 5:
      unint64_t v29 = a2[6];
      if (a2[7] <= v29) {
        goto LABEL_56;
      }
      char v30 = *(unsigned char *)(a2[3] + v29);
      a2[6] = v29 + 1;
      unint64_t v6 = operator new(1uLL);
      unsigned char *v6 = v30;
      char v8 = (void *)(a3 + 16);
      int v7 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 5;
      if (!v7) {
        goto LABEL_5;
      }
LABEL_4:
      *(void *)(a3 + 24) = v7;
      operator delete(v7);
      void *v8 = 0;
      v8[1] = 0;
      void v8[2] = 0;
LABEL_5:
      char v9 = v6 + 1;
      break;
    case 6:
      unint64_t v31 = a2[6];
      unint64_t v32 = a2[7];
      BOOL v12 = v32 >= v31;
      unint64_t v33 = v32 - v31;
      if (!v12) {
        unint64_t v33 = 0;
      }
      if (v33 <= 1) {
        goto LABEL_56;
      }
      __int16 v34 = *(_WORD *)(a2[3] + v31);
      a2[6] = v31 + 2;
      unint64_t v6 = operator new(2uLL);
      *(_WORD *)unint64_t v6 = v34;
      uint64_t v16 = (void *)(a3 + 16);
      char v15 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_31:
        *(void *)(a3 + 24) = v15;
        operator delete(v15);
        void *v16 = 0;
        v16[1] = 0;
        std::string::size_type v16[2] = 0;
      }
LABEL_32:
      char v9 = v6 + 2;
      break;
    case 7:
      unint64_t v35 = a2[6];
      unint64_t v36 = a2[7];
      BOOL v12 = v36 >= v35;
      unint64_t v37 = v36 - v35;
      if (!v12) {
        unint64_t v37 = 0;
      }
      if (v37 <= 3) {
        goto LABEL_56;
      }
      int v38 = *(_DWORD *)(a2[3] + v35);
      a2[6] = v35 + 4;
      unint64_t v6 = operator new(4uLL);
      *(_DWORD *)unint64_t v6 = v38;
      char v22 = (void *)(a3 + 16);
      uint64_t v21 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 7;
      if (v21) {
        goto LABEL_37;
      }
      goto LABEL_38;
    case 8:
      unint64_t v39 = a2[6];
      unint64_t v40 = a2[7];
      BOOL v12 = v40 >= v39;
      unint64_t v41 = v40 - v39;
      if (!v12) {
        unint64_t v41 = 0;
      }
      if (v41 <= 7) {
        goto LABEL_56;
      }
      uint64_t v42 = *(void *)(a2[3] + v39);
      a2[6] = v39 + 8;
      unint64_t v6 = operator new(8uLL);
      *(void *)unint64_t v6 = v42;
      uint64_t v28 = (void *)(a3 + 16);
      char v27 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 8;
      if (v27) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 11:
      unint64_t v47 = a2[6];
      unint64_t v48 = a2[7];
      BOOL v12 = v48 >= v47;
      unint64_t v49 = v48 - v47;
      if (!v12) {
        unint64_t v49 = 0;
      }
      if (v49 <= 3) {
        goto LABEL_56;
      }
      int v50 = *(_DWORD *)(a2[3] + v47);
      a2[6] = v47 + 4;
      unint64_t v6 = operator new(4uLL);
      *(_DWORD *)unint64_t v6 = v50;
      char v22 = (void *)(a3 + 16);
      uint64_t v21 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 11;
      if (!v21) {
        goto LABEL_38;
      }
LABEL_37:
      *(void *)(a3 + 24) = v21;
      operator delete(v21);
      *char v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
LABEL_38:
      char v9 = v6 + 4;
      break;
    case 12:
      unint64_t v43 = a2[6];
      unint64_t v44 = a2[7];
      BOOL v12 = v44 >= v43;
      unint64_t v45 = v44 - v43;
      if (!v12) {
        unint64_t v45 = 0;
      }
      if (v45 <= 7)
      {
LABEL_56:
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_21573A000(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
      }
      uint64_t v46 = *(void *)(a2[3] + v43);
      a2[6] = v43 + 8;
      unint64_t v6 = operator new(8uLL);
      *(void *)unint64_t v6 = v46;
      uint64_t v28 = (void *)(a3 + 16);
      char v27 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 12;
      if (v27)
      {
LABEL_43:
        *(void *)(a3 + 24) = v27;
        operator delete(v27);
        void *v28 = 0;
        v28[1] = 0;
        v28[2] = 0;
      }
LABEL_44:
      char v9 = v6 + 8;
      break;
    default:
      sub_215E097D8(a1);
  }
  *(void *)(a3 + 16) = v6;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = v9;
}

void sub_2159D43F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D440C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4420(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4434(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4448(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D445C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4470(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4484(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4498(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D44AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D44F4(int a1, void *a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      unint64_t v4 = a2[6];
      if (a2[7] <= v4) {
        goto LABEL_56;
      }
      char v5 = *(unsigned char *)(a2[3] + v4);
      a2[6] = v4 + 1;
      unint64_t v6 = operator new(1uLL);
      unsigned char *v6 = v5;
      char v8 = (void *)(a3 + 16);
      int v7 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 0;
      if (v7) {
        goto LABEL_4;
      }
      goto LABEL_5;
    case 1:
      unint64_t v10 = a2[6];
      unint64_t v11 = a2[7];
      BOOL v12 = v11 >= v10;
      unint64_t v13 = v11 - v10;
      if (!v12) {
        unint64_t v13 = 0;
      }
      if (v13 <= 1) {
        goto LABEL_56;
      }
      __int16 v14 = *(_WORD *)(a2[3] + v10);
      a2[6] = v10 + 2;
      unint64_t v6 = operator new(2uLL);
      *(_WORD *)unint64_t v6 = v14;
      uint64_t v16 = (void *)(a3 + 16);
      char v15 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 1;
      if (!v15) {
        goto LABEL_32;
      }
      goto LABEL_31;
    case 2:
      unint64_t v17 = a2[6];
      unint64_t v18 = a2[7];
      BOOL v12 = v18 >= v17;
      unint64_t v19 = v18 - v17;
      if (!v12) {
        unint64_t v19 = 0;
      }
      if (v19 <= 3) {
        goto LABEL_56;
      }
      int v20 = *(_DWORD *)(a2[3] + v17);
      a2[6] = v17 + 4;
      unint64_t v6 = operator new(4uLL);
      *(_DWORD *)unint64_t v6 = v20;
      char v22 = (void *)(a3 + 16);
      uint64_t v21 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 2;
      if (!v21) {
        goto LABEL_38;
      }
      goto LABEL_37;
    case 3:
      unint64_t v23 = a2[6];
      unint64_t v24 = a2[7];
      BOOL v12 = v24 >= v23;
      unint64_t v25 = v24 - v23;
      if (!v12) {
        unint64_t v25 = 0;
      }
      if (v25 <= 7) {
        goto LABEL_56;
      }
      uint64_t v26 = *(void *)(a2[3] + v23);
      a2[6] = v23 + 8;
      unint64_t v6 = operator new(8uLL);
      *(void *)unint64_t v6 = v26;
      uint64_t v28 = (void *)(a3 + 16);
      char v27 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 3;
      if (!v27) {
        goto LABEL_44;
      }
      goto LABEL_43;
    case 5:
      unint64_t v29 = a2[6];
      if (a2[7] <= v29) {
        goto LABEL_56;
      }
      char v30 = *(unsigned char *)(a2[3] + v29);
      a2[6] = v29 + 1;
      unint64_t v6 = operator new(1uLL);
      unsigned char *v6 = v30;
      char v8 = (void *)(a3 + 16);
      int v7 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 5;
      if (!v7) {
        goto LABEL_5;
      }
LABEL_4:
      *(void *)(a3 + 24) = v7;
      operator delete(v7);
      void *v8 = 0;
      v8[1] = 0;
      void v8[2] = 0;
LABEL_5:
      char v9 = v6 + 1;
      break;
    case 6:
      unint64_t v31 = a2[6];
      unint64_t v32 = a2[7];
      BOOL v12 = v32 >= v31;
      unint64_t v33 = v32 - v31;
      if (!v12) {
        unint64_t v33 = 0;
      }
      if (v33 <= 1) {
        goto LABEL_56;
      }
      __int16 v34 = *(_WORD *)(a2[3] + v31);
      a2[6] = v31 + 2;
      unint64_t v6 = operator new(2uLL);
      *(_WORD *)unint64_t v6 = v34;
      uint64_t v16 = (void *)(a3 + 16);
      char v15 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 6;
      if (v15)
      {
LABEL_31:
        *(void *)(a3 + 24) = v15;
        operator delete(v15);
        void *v16 = 0;
        v16[1] = 0;
        std::string::size_type v16[2] = 0;
      }
LABEL_32:
      char v9 = v6 + 2;
      break;
    case 7:
      unint64_t v35 = a2[6];
      unint64_t v36 = a2[7];
      BOOL v12 = v36 >= v35;
      unint64_t v37 = v36 - v35;
      if (!v12) {
        unint64_t v37 = 0;
      }
      if (v37 <= 3) {
        goto LABEL_56;
      }
      int v38 = *(_DWORD *)(a2[3] + v35);
      a2[6] = v35 + 4;
      unint64_t v6 = operator new(4uLL);
      *(_DWORD *)unint64_t v6 = v38;
      char v22 = (void *)(a3 + 16);
      uint64_t v21 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 7;
      if (v21) {
        goto LABEL_37;
      }
      goto LABEL_38;
    case 8:
      unint64_t v39 = a2[6];
      unint64_t v40 = a2[7];
      BOOL v12 = v40 >= v39;
      unint64_t v41 = v40 - v39;
      if (!v12) {
        unint64_t v41 = 0;
      }
      if (v41 <= 7) {
        goto LABEL_56;
      }
      uint64_t v42 = *(void *)(a2[3] + v39);
      a2[6] = v39 + 8;
      unint64_t v6 = operator new(8uLL);
      *(void *)unint64_t v6 = v42;
      uint64_t v28 = (void *)(a3 + 16);
      char v27 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 8;
      if (v27) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 11:
      unint64_t v47 = a2[6];
      unint64_t v48 = a2[7];
      BOOL v12 = v48 >= v47;
      unint64_t v49 = v48 - v47;
      if (!v12) {
        unint64_t v49 = 0;
      }
      if (v49 <= 3) {
        goto LABEL_56;
      }
      int v50 = *(_DWORD *)(a2[3] + v47);
      a2[6] = v47 + 4;
      unint64_t v6 = operator new(4uLL);
      *(_DWORD *)unint64_t v6 = v50;
      char v22 = (void *)(a3 + 16);
      uint64_t v21 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 11;
      if (!v21) {
        goto LABEL_38;
      }
LABEL_37:
      *(void *)(a3 + 24) = v21;
      operator delete(v21);
      *char v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
LABEL_38:
      char v9 = v6 + 4;
      break;
    case 12:
      unint64_t v43 = a2[6];
      unint64_t v44 = a2[7];
      BOOL v12 = v44 >= v43;
      unint64_t v45 = v44 - v43;
      if (!v12) {
        unint64_t v45 = 0;
      }
      if (v45 <= 7)
      {
LABEL_56:
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_21573A000(exception, "Not enough data to read");
        __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
      }
      uint64_t v46 = *(void *)(a2[3] + v43);
      a2[6] = v43 + 8;
      unint64_t v6 = operator new(8uLL);
      *(void *)unint64_t v6 = v46;
      uint64_t v28 = (void *)(a3 + 16);
      char v27 = *(void **)(a3 + 16);
      *(unsigned char *)(a3 + 8) = 12;
      if (v27)
      {
LABEL_43:
        *(void *)(a3 + 24) = v27;
        operator delete(v27);
        void *v28 = 0;
        v28[1] = 0;
        v28[2] = 0;
      }
LABEL_44:
      char v9 = v6 + 8;
      break;
    default:
      sub_215E097D8(a1);
  }
  *(void *)(a3 + 16) = v6;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = v9;
}

void sub_2159D49E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D49F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4A08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4A1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4A30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4A44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4A58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4A6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4A80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4A94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159D4ADC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  LODWORD(v7) = 2;
  (*(void (**)(uint64_t, unsigned char **))(v5 + 104))(a2, &v7);
  if ((int)v6 < 1)
  {
    if (v7 < 2)
    {
      sub_2159D4F78((uint64_t)&v7, (unsigned char *)a2, (uint64_t)a3);
    }
    else
    {
      int v7 = a3;
      sub_2159D5570((unsigned char *)a2, &v7);
      sub_2159D5100(*a3, a2, (uint64_t)a3);
    }
  }
  else
  {
    sub_2159D4BC4((int *)&v6, (unsigned char *)a2, a3, v7);
  }
}

void sub_2159D4BC4(int *a1, unsigned char *a2, unsigned char *a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v12 = 2;
    (*(void (**)(unsigned char *, unsigned int *))(*(void *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      unsigned int v10 = v12;
      unint64_t v11 = sub_2159D4D5C();
      sub_215E07C10((std::string *)v11, v10, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    __int16 v14 = a3;
    sub_2159D5570(a2, &v14);
    sub_2159D5100(*a3, (uint64_t)a2, (uint64_t)a3);
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = a4;
  }
  if (v9 <= 1)
  {
    sub_2159D4F78((uint64_t)&v13, a2, (uint64_t)a3);
  }
  else
  {
    __int16 v14 = a3;
    sub_2159D5570(a2, &v14);
    sub_2159D5100(*a3, (uint64_t)a2, (uint64_t)a3);
  }
}

long long *sub_2159D4D5C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888E80, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888E80))
  {
    return &xmmword_267888E68;
  }
  char v1 = (char *)sub_2159D4E44();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_267888E68, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267888E78 = *((void *)v1 + 2);
    xmmword_267888E68 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888E68, &dword_21572C000);
  __cxa_guard_release(&qword_267888E80);
  return &xmmword_267888E68;
}

void sub_2159D4E2C(_Unwind_Exception *a1)
{
}

void *sub_2159D4E44()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888EA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888EA0))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::commonio::NumberSample]", qword_267888E88);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888E88, &dword_21572C000);
    __cxa_guard_release(&qword_267888EA0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888EC0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888EC0))
  {
    return &unk_267888EA8;
  }
  sub_215E19DF4((uint64_t)qword_267888E88, (uint64_t)&unk_267888EA8);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267888EA8, &dword_21572C000);
  __cxa_guard_release(&qword_267888EC0);
  return &unk_267888EA8;
}

void sub_2159D4F48(_Unwind_Exception *a1)
{
}

void sub_2159D4F60(_Unwind_Exception *a1)
{
}

void sub_2159D4F78(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  v19[0] = 7;
  char v20 = 7;
  uint64_t v5 = (char *)operator new(4uLL);
  uint64_t v21 = v5;
  *(_DWORD *)uint64_t v5 = 0;
  char v22 = v5 + 4;
  unint64_t v23 = v5 + 4;
  __int16 v14 = v19;
  sub_2159D5570(a2, &v14);
  sub_2159D5714(v19[0], (uint64_t)a2, (uint64_t)v19);
  unsigned __int8 v6 = v19[0];
  LOBYTE(v14) = v19[0];
  char v7 = v20;
  char v15 = v20;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = 0;
  char v8 = v21;
  size_t v9 = v22 - v21;
  if (v22 == v21)
  {
    unint64_t v11 = 0;
    unsigned int v10 = 0;
    *(unsigned char *)a3 = v19[0];
    *(unsigned char *)(a3 + 8) = v7;
    char v13 = (void *)(a3 + 16);
    unsigned int v12 = *(void **)(a3 + 16);
    if (v12)
    {
LABEL_4:
      *(void *)(a3 + 24) = v12;
      operator delete(v12);
      void *v13 = 0;
      v13[1] = 0;
      _DWORD v13[2] = 0;
      char v8 = v21;
    }
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0) {
      sub_215738AC0();
    }
    unsigned int v10 = (char *)operator new(v22 - v21);
    unint64_t v11 = &v10[v9];
    memcpy(v10, v8, v9);
    *(unsigned char *)a3 = v6;
    *(unsigned char *)(a3 + 8) = v7;
    char v13 = (void *)(a3 + 16);
    unsigned int v12 = *(void **)(a3 + 16);
    if (v12) {
      goto LABEL_4;
    }
  }
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v11;
  if (v8)
  {
    char v22 = v8;
    operator delete(v8);
  }
}

void sub_2159D50B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v18 = a16;
    if (!a16) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v18 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void sub_2159D5100(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 80))(a2, &v17);
      char v4 = v17;
      uint64_t v5 = operator new(1uLL);
      unsigned char *v5 = v4;
      unsigned __int8 v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 96))(a2, &v17);
      __int16 v8 = v17;
      uint64_t v5 = operator new(2uLL);
      *(_WORD *)uint64_t v5 = v8;
      unsigned __int8 v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 104))(a2, &v17);
      int v9 = v17;
      uint64_t v5 = operator new(4uLL);
      *(_DWORD *)uint64_t v5 = v9;
      unsigned __int8 v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 3:
      uint64_t v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 120))(a2, &v17);
      uint64_t v10 = v17;
      uint64_t v5 = operator new(8uLL);
      *(void *)uint64_t v5 = v10;
      unsigned __int8 v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 88))(a2, &v17);
      char v11 = v17;
      uint64_t v5 = operator new(1uLL);
      unsigned char *v5 = v11;
      unsigned __int8 v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 48))(a2, &v17);
      __int16 v12 = v17;
      uint64_t v5 = operator new(2uLL);
      *(_WORD *)uint64_t v5 = v12;
      unsigned __int8 v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 6;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 56))(a2, &v17);
      int v13 = v17;
      uint64_t v5 = operator new(4uLL);
      *(_DWORD *)uint64_t v5 = v13;
      unsigned __int8 v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 8:
      uint64_t v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 72))(a2, &v17);
      uint64_t v14 = v17;
      uint64_t v5 = operator new(8uLL);
      *(void *)uint64_t v5 = v14;
      unsigned __int8 v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v17);
      int v15 = v17;
      uint64_t v5 = operator new(4uLL);
      *(_DWORD *)uint64_t v5 = v15;
      unsigned __int8 v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 12:
      uint64_t v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v17);
      uint64_t v16 = v17;
      uint64_t v5 = operator new(8uLL);
      *(void *)uint64_t v5 = v16;
      unsigned __int8 v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      char v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_24:
        *(void *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_25:
      *(void *)(a3 + 16) = v5;
      *(void *)(a3 + 24) = v6;
      *(void *)(a3 + 32) = v6;
      return;
    default:
      sub_215E097D8(a1);
  }
}

uint64_t sub_2159D5570(unsigned char *a1, unsigned char **a2)
{
  if ((a1[12] & 2) != 0)
  {
    memset(__p, 0, sizeof(__p));
    (*(void (**)(unsigned char *, void **))(*(void *)a1 + 144))(a1, __p);
    operator new();
  }
  LOBYTE(__p[0]) = 0;
  uint64_t result = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a1 + 80))(a1, __p);
  **a2 = __p[0];
  return result;
}

void sub_2159D569C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18 = a17;
  a17 = 0;
  if (v18)
  {
    sub_215E15464((uint64_t)&a17, v18);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2159D5714(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 80))(a2, &v17);
      char v4 = v17;
      uint64_t v5 = operator new(1uLL);
      unsigned char *v5 = v4;
      unsigned __int8 v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 0;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 1:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 96))(a2, &v17);
      __int16 v8 = v17;
      uint64_t v5 = operator new(2uLL);
      *(_WORD *)uint64_t v5 = v8;
      unsigned __int8 v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 1;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 2:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 104))(a2, &v17);
      int v9 = v17;
      uint64_t v5 = operator new(4uLL);
      *(_DWORD *)uint64_t v5 = v9;
      unsigned __int8 v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 2;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 3:
      uint64_t v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 120))(a2, &v17);
      uint64_t v10 = v17;
      uint64_t v5 = operator new(8uLL);
      *(void *)uint64_t v5 = v10;
      unsigned __int8 v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 3;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 5:
      LOBYTE(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 88))(a2, &v17);
      char v11 = v17;
      uint64_t v5 = operator new(1uLL);
      unsigned char *v5 = v11;
      unsigned __int8 v6 = v5 + 1;
      *(unsigned char *)(a3 + 8) = 5;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 6:
      LOWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 48))(a2, &v17);
      __int16 v12 = v17;
      uint64_t v5 = operator new(2uLL);
      *(_WORD *)uint64_t v5 = v12;
      unsigned __int8 v6 = v5 + 2;
      *(unsigned char *)(a3 + 8) = 6;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 7:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 56))(a2, &v17);
      int v13 = v17;
      uint64_t v5 = operator new(4uLL);
      *(_DWORD *)uint64_t v5 = v13;
      unsigned __int8 v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 7;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 8:
      uint64_t v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 72))(a2, &v17);
      uint64_t v14 = v17;
      uint64_t v5 = operator new(8uLL);
      *(void *)uint64_t v5 = v14;
      unsigned __int8 v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 8;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 11:
      LODWORD(v17) = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 128))(a2, &v17);
      int v15 = v17;
      uint64_t v5 = operator new(4uLL);
      *(_DWORD *)uint64_t v5 = v15;
      unsigned __int8 v6 = v5 + 4;
      *(unsigned char *)(a3 + 8) = 11;
      char v7 = *(void **)(a3 + 16);
      if (!v7) {
        goto LABEL_25;
      }
      goto LABEL_24;
    case 12:
      uint64_t v17 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)a2 + 136))(a2, &v17);
      uint64_t v16 = v17;
      uint64_t v5 = operator new(8uLL);
      *(void *)uint64_t v5 = v16;
      unsigned __int8 v6 = v5 + 8;
      *(unsigned char *)(a3 + 8) = 12;
      char v7 = *(void **)(a3 + 16);
      if (v7)
      {
LABEL_24:
        *(void *)(a3 + 24) = v7;
        operator delete(v7);
      }
LABEL_25:
      *(void *)(a3 + 16) = v5;
      *(void *)(a3 + 24) = v6;
      *(void *)(a3 + 32) = v6;
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D5B84()
{
}

void sub_2159D5D60(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2159D5D94(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  char v7 = &v4;
  sub_2159CC60C();
}

void sub_2159D5F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159D5F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159D5F74(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      long long v4 = (float *)sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v6 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v6) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v4;
      uint64_t v35 = v5;
      sub_215DEC208(a3, (size_t *)&v34);
      break;
    case 1:
      char v7 = (float *)sub_215D160E4((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v9 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v9) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v7;
      uint64_t v35 = v8;
      sub_215DEEA00(a3, (uint64_t)&v34);
      break;
    case 2:
      uint64_t v10 = (float *)sub_215D161EC((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v12 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v12) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v10;
      uint64_t v35 = v11;
      sub_215DEEC78(a3, (uint64_t)&v34);
      break;
    case 3:
      int v13 = (float *)sub_215D162F4((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v15 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v15) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v13;
      uint64_t v35 = v14;
      sub_215DEF168(a3, (uint64_t)&v34);
      break;
    case 5:
      uint64_t v16 = (float *)sub_215D15F58((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v18 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v18) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v16;
      uint64_t v35 = v17;
      sub_215DEE788(a3, (size_t *)&v34);
      break;
    case 6:
      unint64_t v19 = (float *)sub_215D16060((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v21 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v21) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v19;
      uint64_t v35 = v20;
      sub_215DEE8C4(a3, (uint64_t)&v34);
      break;
    case 7:
      char v22 = (float *)sub_215D16168((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v24 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v24) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v22;
      uint64_t v35 = v23;
      sub_215DEEB3C(a3, (uint64_t)&v34);
      break;
    case 8:
      unint64_t v25 = (float *)sub_215D16270((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v27 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v27) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v25;
      uint64_t v35 = v26;
      sub_215DEF02C(a3, (uint64_t)&v34);
      break;
    case 11:
      uint64_t v28 = (float *)sub_215D16378((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v30 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v30) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v28;
      uint64_t v35 = v29;
      sub_215DEF750(a3, &v34);
      break;
    case 12:
      unint64_t v31 = (float *)sub_215D163FC((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v33 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v33) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v31;
      uint64_t v35 = v32;
      sub_215DEFB74(a3, &v34);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D637C(uint64_t a1, long long *a2)
{
  long long v7 = *a2;
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 2);
  int v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v4 + 40))
  {
    uint64_t v10 = (uint64_t *)(v4 + 16);
    sub_215E053CC(&v10, v7);
  }
  else
  {
    if ((char)v7 < 0)
    {
      LOBYTE(v10) = -52;
      BYTE1(v10) = v7;
    }
    else
    {
      LOBYTE(v10) = v7;
    }
    std::ostream::write();
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v5 + 40))
  {
    uint64_t v10 = (uint64_t *)(v5 + 16);
    sub_215E069EC(&v10, *((unint64_t *)&v7 + 1));
  }
  else
  {
    sub_215E06D00();
  }
  sub_2159D64D0(v7, (uint64_t)&v7, a1);
  int v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2159D64BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_2159D64D0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      unint64_t result = sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      unint64_t v5 = result;
      long long v7 = v6;
      uint64_t v8 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v8 + 40))
      {
        *(void *)&long long v55 = v8 + 16;
        if (result)
        {
          do
          {
            unint64_t result = (unint64_t)sub_215E053CC((uint64_t **)&v55, *v7++);
            --v5;
          }
          while (v5);
        }
      }
      else if (result)
      {
        do
        {
          int v42 = *v7;
          if (v42 < 0)
          {
            LOBYTE(v55) = -52;
            BYTE1(v55) = v42;
          }
          else
          {
            LOBYTE(v55) = *v7;
          }
          unint64_t result = std::ostream::write();
          ++v7;
          --v5;
        }
        while (v5);
      }
      break;
    case 1:
      *(void *)&long long v55 = sub_215D160E4((unsigned __int8 **)(a2 + 16));
      *((void *)&v55 + 1) = v9;
      unint64_t result = sub_215DFF1B4(*(void *)(a3 + 24), &v55);
      break;
    case 2:
      unint64_t result = sub_215D161EC((unsigned __int8 **)(a2 + 16));
      uint64_t v11 = v10;
      uint64_t v12 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v12 + 40))
      {
        *(void *)&long long v55 = v12 + 16;
        if (result)
        {
          uint64_t v13 = 4 * result;
          do
          {
            unint64_t result = (unint64_t)sub_215E05FEC((uint64_t **)&v55, *v11++);
            v13 -= 4;
          }
          while (v13);
        }
      }
      else if (result)
      {
        uint64_t v43 = v12 + 8;
        uint64_t v44 = 4 * result;
        do
        {
          unint64_t result = sub_215E0626C((uint64_t)&v55, v43);
          ++v11;
          v44 -= 4;
        }
        while (v44);
      }
      break;
    case 3:
      unint64_t result = sub_215D162F4((unsigned __int8 **)(a2 + 16));
      int v15 = v14;
      uint64_t v16 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v16 + 40))
      {
        *(void *)&long long v55 = v16 + 16;
        if (result)
        {
          uint64_t v17 = 8 * result;
          do
          {
            unint64_t result = (unint64_t)sub_215E069EC((uint64_t **)&v55, *v15++);
            v17 -= 8;
          }
          while (v17);
        }
      }
      else if (result)
      {
        uint64_t v45 = 8 * result;
        do
        {
          ++v15;
          unint64_t result = sub_215E06D00();
          v45 -= 8;
        }
        while (v45);
      }
      break;
    case 5:
      unint64_t result = sub_215D15F58((unsigned __int8 **)(a2 + 16));
      unint64_t v18 = result;
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v21 + 40))
      {
        *(void *)&long long v55 = v21 + 16;
        if (result)
        {
          do
          {
            unint64_t result = (unint64_t)sub_215E05278((uint64_t **)&v55, (char)*v20++);
            --v18;
          }
          while (v18);
        }
      }
      else if (result)
      {
        do
        {
          int v46 = (char)*v20;
          if (v46 > -33)
          {
            LOBYTE(v55) = *v20;
          }
          else
          {
            LOBYTE(v55) = -48;
            BYTE1(v55) = v46;
          }
          unint64_t result = std::ostream::write();
          ++v20;
          --v18;
        }
        while (v18);
      }
      break;
    case 6:
      unint64_t result = sub_215D16060((unsigned __int8 **)(a2 + 16));
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v24 + 40))
      {
        *(void *)&long long v55 = v24 + 16;
        if (result)
        {
          uint64_t v25 = 2 * result;
          do
          {
            unint64_t result = (unint64_t)sub_215E0551C((uint64_t **)&v55, *v23++);
            v25 -= 2;
          }
          while (v25);
        }
      }
      else if (result)
      {
        uint64_t v47 = 2 * result;
        do
        {
          ++v23;
          unint64_t result = sub_215E057EC();
          v47 -= 2;
        }
        while (v47);
      }
      break;
    case 7:
      unint64_t result = sub_215D16168((unsigned __int8 **)(a2 + 16));
      int v27 = v26;
      uint64_t v28 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v28 + 40))
      {
        *(void *)&long long v55 = v28 + 16;
        if (result)
        {
          uint64_t v29 = 4 * result;
          do
          {
            unint64_t result = (unint64_t)sub_215E05AC4((uint64_t **)&v55, *v27++);
            v29 -= 4;
          }
          while (v29);
        }
      }
      else if (result)
      {
        uint64_t v48 = 4 * result;
        do
        {
          ++v27;
          unint64_t result = sub_215E05EEC();
          v48 -= 4;
        }
        while (v48);
      }
      break;
    case 8:
      unint64_t result = sub_215D16270((unsigned __int8 **)(a2 + 16));
      unint64_t v31 = v30;
      uint64_t v32 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v32 + 40))
      {
        *(void *)&long long v55 = v32 + 16;
        if (result)
        {
          uint64_t v33 = 8 * result;
          do
          {
            unint64_t result = (unint64_t)sub_215E06360((uint64_t **)&v55, *v31++);
            v33 -= 8;
          }
          while (v33);
        }
      }
      else if (result)
      {
        uint64_t v49 = 8 * result;
        do
        {
          ++v31;
          unint64_t result = sub_215E068A8();
          v49 -= 8;
        }
        while (v49);
      }
      break;
    case 11:
      unint64_t result = sub_215D16378((unsigned __int8 **)(a2 + 16));
      uint64_t v35 = v34;
      uint64_t v36 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v36 + 40))
      {
        *(void *)&long long v55 = v36 + 16;
        if (result)
        {
          uint64_t v37 = 4 * result;
          do
          {
            unint64_t result = (unint64_t)sub_215E06DFC((uint64_t)&v54, (uint64_t **)&v55, v35++);
            v37 -= 4;
          }
          while (v37);
        }
      }
      else if (result)
      {
        uint64_t v50 = 4 * result;
        do
        {
          unsigned int v51 = *v35;
          LOBYTE(v55) = -54;
          *(_DWORD *)((char *)&v55 + 1) = bswap32(v51);
          unint64_t result = std::ostream::write();
          ++v35;
          v50 -= 4;
        }
        while (v50);
      }
      break;
    case 12:
      unint64_t result = sub_215D163FC((unsigned __int8 **)(a2 + 16));
      unint64_t v39 = v38;
      uint64_t v40 = *(void *)(a3 + 24);
      if (*(unsigned char *)(v40 + 40))
      {
        *(void *)&long long v55 = v40 + 16;
        if (result)
        {
          uint64_t v41 = 8 * result;
          do
          {
            unint64_t result = (unint64_t)sub_215E06EE4((uint64_t)&v54, (uint64_t **)&v55, v39++);
            v41 -= 8;
          }
          while (v41);
        }
      }
      else if (result)
      {
        uint64_t v52 = 8 * result;
        do
        {
          unint64_t v53 = *v39;
          LOBYTE(v55) = -53;
          *(void *)((char *)&v55 + 1) = bswap64(v53);
          unint64_t result = std::ostream::write();
          ++v39;
          v52 -= 8;
        }
        while (v52);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

void sub_2159D6A28(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  long long v7 = &v4;
  sub_2159CE670();
}

void sub_2159D6BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159D6BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159D6C08(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      long long v4 = (float *)sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v6 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v6) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v4;
      uint64_t v35 = v5;
      sub_215DEB984(a3, (size_t *)&v34);
      break;
    case 1:
      long long v7 = (float *)sub_215D160E4((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v9 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v9) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v7;
      uint64_t v35 = v8;
      sub_215DECBA4(a3, (uint64_t)&v34);
      break;
    case 2:
      uint64_t v10 = (float *)sub_215D161EC((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v12 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v12) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v10;
      uint64_t v35 = v11;
      sub_215DECE1C(a3, (uint64_t)&v34);
      break;
    case 3:
      uint64_t v13 = (float *)sub_215D162F4((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v15 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v15) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v13;
      uint64_t v35 = v14;
      sub_215DED094(a3, (uint64_t)&v34);
      break;
    case 5:
      uint64_t v16 = (float *)sub_215D15F58((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v18 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v18) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v16;
      uint64_t v35 = v17;
      sub_215DEC92C(a3, (size_t *)&v34);
      break;
    case 6:
      unint64_t v19 = (float *)sub_215D16060((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v21 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v21) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v19;
      uint64_t v35 = v20;
      sub_215DECA68(a3, (uint64_t)&v34);
      break;
    case 7:
      char v22 = (float *)sub_215D16168((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v24 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v24) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v22;
      uint64_t v35 = v23;
      sub_215DECCE0(a3, (uint64_t)&v34);
      break;
    case 8:
      uint64_t v25 = (float *)sub_215D16270((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v27 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v27) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v25;
      uint64_t v35 = v26;
      sub_215DECF58(a3, (uint64_t)&v34);
      break;
    case 11:
      uint64_t v28 = (float *)sub_215D16378((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v30 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v30) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v28;
      uint64_t v35 = v29;
      sub_215DED67C(a3, &v34);
      break;
    case 12:
      unint64_t v31 = (float *)sub_215D163FC((unsigned __int8 **)(a2 + 16));
      if (**(unsigned __int8 **)(a3 + 40) <= 1u)
      {
        int v33 = *(unsigned __int8 *)(a3 + 88);
        *(void *)(a3 + 72) = "numbers";
        *(void *)(a3 + 80) = 7;
        if (!v33) {
          *(unsigned char *)(a3 + 88) = 1;
        }
      }
      __int16 v34 = v31;
      uint64_t v35 = v32;
      sub_215DEDAA0(a3, &v34);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D7010(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned __int8 v9 = v6;
  sub_215DF927C(a1, &v9);
  if (*(void *)(a1 + 40))
  {
    long long v4 = *(void **)(a1 + 24);
    unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)&v9, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  sub_2159D7120(v6, (uint64_t)&v6, a1);
  uint64_t v5 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2159D710C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159D7120(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      uint64_t v4 = sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      if (v4)
      {
        uint64_t v6 = v4;
        uint64_t v7 = v5;
        do
        {
          sub_215DF927C(a3, v7++);
          --v6;
        }
        while (v6);
      }
      break;
    case 1:
      unint64_t v8 = sub_215D160E4((unsigned __int8 **)(a2 + 16));
      if (v8)
      {
        uint64_t v10 = v9;
        uint64_t v11 = *(void *)(a3 + 40);
        uint64_t v12 = 2 * v8;
        do
        {
          if (v11)
          {
            uint64_t v13 = *(void **)(a3 + 24);
            char v60 = *(unsigned char *)(a3 + 32);
            sub_215731D94(v13, (uint64_t)&v60, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          uint64_t v11 = *(void *)(a3 + 40) + 1;
          *(void *)(a3 + 40) = v11;
          v12 -= 2;
        }
        while (v12);
      }
      break;
    case 2:
      unint64_t v14 = sub_215D161EC((unsigned __int8 **)(a2 + 16));
      if (v14)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)(a3 + 40);
        uint64_t v18 = 4 * v14;
        do
        {
          if (v17)
          {
            unint64_t v19 = *(void **)(a3 + 24);
            char v61 = *(unsigned char *)(a3 + 32);
            sub_215731D94(v19, (uint64_t)&v61, 1);
          }
          v16 += 4;
          std::ostream::operator<<();
          uint64_t v17 = *(void *)(a3 + 40) + 1;
          *(void *)(a3 + 40) = v17;
          v18 -= 4;
        }
        while (v18);
      }
      break;
    case 3:
      unint64_t v20 = sub_215D162F4((unsigned __int8 **)(a2 + 16));
      if (v20)
      {
        uint64_t v22 = v21;
        uint64_t v23 = *(void *)(a3 + 40);
        uint64_t v24 = 8 * v20;
        do
        {
          if (v23)
          {
            uint64_t v25 = *(void **)(a3 + 24);
            char v62 = *(unsigned char *)(a3 + 32);
            sub_215731D94(v25, (uint64_t)&v62, 1);
          }
          v22 += 8;
          std::ostream::operator<<();
          uint64_t v23 = *(void *)(a3 + 40) + 1;
          *(void *)(a3 + 40) = v23;
          v24 -= 8;
        }
        while (v24);
      }
      break;
    case 5:
      uint64_t v26 = sub_215D15F58((unsigned __int8 **)(a2 + 16));
      if (v26)
      {
        uint64_t v28 = v26;
        uint64_t v29 = v27;
        do
        {
          sub_215DF9090(a3, v29++);
          --v28;
        }
        while (v28);
      }
      break;
    case 6:
      unint64_t v30 = sub_215D16060((unsigned __int8 **)(a2 + 16));
      if (v30)
      {
        uint64_t v32 = v31;
        uint64_t v33 = *(void *)(a3 + 40);
        uint64_t v34 = 2 * v30;
        do
        {
          if (v33)
          {
            uint64_t v35 = *(void **)(a3 + 24);
            char v63 = *(unsigned char *)(a3 + 32);
            sub_215731D94(v35, (uint64_t)&v63, 1);
          }
          v32 += 2;
          std::ostream::operator<<();
          uint64_t v33 = *(void *)(a3 + 40) + 1;
          *(void *)(a3 + 40) = v33;
          v34 -= 2;
        }
        while (v34);
      }
      break;
    case 7:
      unint64_t v36 = sub_215D16168((unsigned __int8 **)(a2 + 16));
      if (v36)
      {
        uint64_t v38 = v37;
        uint64_t v39 = *(void *)(a3 + 40);
        uint64_t v40 = 4 * v36;
        do
        {
          if (v39)
          {
            uint64_t v41 = *(void **)(a3 + 24);
            char v64 = *(unsigned char *)(a3 + 32);
            sub_215731D94(v41, (uint64_t)&v64, 1);
          }
          v38 += 4;
          std::ostream::operator<<();
          uint64_t v39 = *(void *)(a3 + 40) + 1;
          *(void *)(a3 + 40) = v39;
          v40 -= 4;
        }
        while (v40);
      }
      break;
    case 8:
      unint64_t v42 = sub_215D16270((unsigned __int8 **)(a2 + 16));
      if (v42)
      {
        uint64_t v44 = v43;
        uint64_t v45 = *(void *)(a3 + 40);
        uint64_t v46 = 8 * v42;
        do
        {
          if (v45)
          {
            uint64_t v47 = *(void **)(a3 + 24);
            char v65 = *(unsigned char *)(a3 + 32);
            sub_215731D94(v47, (uint64_t)&v65, 1);
          }
          v44 += 8;
          std::ostream::operator<<();
          uint64_t v45 = *(void *)(a3 + 40) + 1;
          *(void *)(a3 + 40) = v45;
          v46 -= 8;
        }
        while (v46);
      }
      break;
    case 11:
      unint64_t v48 = sub_215D16378((unsigned __int8 **)(a2 + 16));
      if (v48)
      {
        uint64_t v50 = v49;
        uint64_t v51 = *(void *)(a3 + 40);
        uint64_t v52 = 4 * v48;
        do
        {
          if (v51)
          {
            unint64_t v53 = *(void **)(a3 + 24);
            char v66 = *(unsigned char *)(a3 + 32);
            sub_215731D94(v53, (uint64_t)&v66, 1);
          }
          *(void *)(*(void *)(a3 + 24) + *(void *)(**(void **)(a3 + 24) - 24) + 16) = 9;
          v50 += 4;
          std::ostream::operator<<();
          uint64_t v51 = *(void *)(a3 + 40) + 1;
          *(void *)(a3 + 40) = v51;
          v52 -= 4;
        }
        while (v52);
      }
      break;
    case 12:
      unint64_t v54 = sub_215D163FC((unsigned __int8 **)(a2 + 16));
      if (v54)
      {
        uint64_t v56 = v55;
        uint64_t v57 = *(void *)(a3 + 40);
        uint64_t v58 = 8 * v54;
        do
        {
          if (v57)
          {
            unint64_t v59 = *(void **)(a3 + 24);
            char v67 = *(unsigned char *)(a3 + 32);
            sub_215731D94(v59, (uint64_t)&v67, 1);
          }
          *(void *)(*(void *)(a3 + 24) + *(void *)(**(void **)(a3 + 24) - 24) + 16) = 17;
          v56 += 8;
          std::ostream::operator<<();
          uint64_t v57 = *(void *)(a3 + 40) + 1;
          *(void *)(a3 + 40) = v57;
          v58 -= 8;
        }
        while (v58);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D7554(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char __src = v5;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v9, 1);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&v5 + 8, (char *)&v6, 8);
  sub_2159D7660(v5, (uint64_t)&v5, a1);
  uint64_t v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2159D764C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_2159D7660(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      int64_t v4 = sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v5;
      if (v5) {
        goto LABEL_26;
      }
      goto LABEL_24;
    case 1:
      unint64_t v7 = sub_215D160E4((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v8;
      int64_t v4 = 2 * v7;
      if (v8) {
        goto LABEL_26;
      }
      goto LABEL_24;
    case 2:
      unint64_t v9 = sub_215D161EC((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v10;
      int64_t v4 = 4 * v9;
      if (v10) {
        goto LABEL_26;
      }
      goto LABEL_24;
    case 3:
      unint64_t v11 = sub_215D162F4((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v12;
      int64_t v4 = 8 * v11;
      if (v12) {
        goto LABEL_26;
      }
      goto LABEL_24;
    case 5:
      int64_t v4 = sub_215D15F58((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v13;
      if (v13) {
        goto LABEL_26;
      }
      goto LABEL_24;
    case 6:
      unint64_t v14 = sub_215D16060((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v15;
      int64_t v4 = 2 * v14;
      if (v15) {
        goto LABEL_26;
      }
      goto LABEL_24;
    case 7:
      unint64_t v16 = sub_215D16168((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v17;
      int64_t v4 = 4 * v16;
      if (v17) {
        goto LABEL_26;
      }
      goto LABEL_24;
    case 8:
      unint64_t v18 = sub_215D16270((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v19;
      int64_t v4 = 8 * v18;
      if (v19) {
        goto LABEL_26;
      }
      goto LABEL_24;
    case 11:
      unint64_t v20 = sub_215D16378((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v21;
      int64_t v4 = 4 * v20;
      if (v21) {
        goto LABEL_26;
      }
      goto LABEL_24;
    case 12:
      unint64_t v22 = sub_215D163FC((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = v23;
      int64_t v4 = 8 * v22;
      if (!v23)
      {
LABEL_24:
        if (v4
          && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          abort();
        }
      }
LABEL_26:
      uint64_t v24 = *(char **)(a3 + 32);
      return sub_215D04A50(a3 + 24, v24, v6, &v6[v4], v4);
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D785C(int *a1, unsigned char *a2, long long *a3)
{
  int v6 = 2;
  (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1
    || *a1 == 2 && (int v7 = 2, (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v7), *a1 <= 0))
  {
    sub_2159D79A0(a2, a3);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    sub_2159D79A0(a2, a3);
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

void sub_2159D79A0(unsigned char *a1, long long *a2)
{
  long long v5 = *a2;
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  int v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = &v5;
  sub_2159D0EBC(a1, (unsigned char **)&v8);
  (*(void (**)(unsigned char *, char *))(*(void *)a1 + 120))(a1, (char *)&v5 + 8);
  sub_2159D7AA4(v5, (uint64_t)&v5, (uint64_t)a1);
  int64_t v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2159D7A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159D7AA4(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      uint64_t result = sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v6 = result;
        uint64_t v7 = v5;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 80))(a3, v7++);
          --v6;
        }
        while (v6);
      }
      break;
    case 1:
      uint64_t result = sub_215D160E4((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v9 = v8;
        uint64_t v10 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 96))(a3, v9);
          v9 += 2;
          v10 -= 2;
        }
        while (v10);
      }
      break;
    case 2:
      uint64_t result = sub_215D161EC((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v12 = v11;
        uint64_t v13 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 104))(a3, v12);
          v12 += 4;
          v13 -= 4;
        }
        while (v13);
      }
      break;
    case 3:
      uint64_t result = sub_215D162F4((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v15 = v14;
        uint64_t v16 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 120))(a3, v15);
          v15 += 8;
          v16 -= 8;
        }
        while (v16);
      }
      break;
    case 5:
      uint64_t result = sub_215D15F58((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v18 = result;
        uint64_t v19 = v17;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 88))(a3, v19++);
          --v18;
        }
        while (v18);
      }
      break;
    case 6:
      uint64_t result = sub_215D16060((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v21 = v20;
        uint64_t v22 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, v21);
          v21 += 2;
          v22 -= 2;
        }
        while (v22);
      }
      break;
    case 7:
      uint64_t result = sub_215D16168((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v24 = v23;
        uint64_t v25 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v24);
          v24 += 4;
          v25 -= 4;
        }
        while (v25);
      }
      break;
    case 8:
      uint64_t result = sub_215D16270((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v27 = v26;
        uint64_t v28 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 72))(a3, v27);
          v27 += 8;
          v28 -= 8;
        }
        while (v28);
      }
      break;
    case 11:
      uint64_t result = sub_215D16378((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v30 = v29;
        uint64_t v31 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 128))(a3, v30);
          v30 += 4;
          v31 -= 4;
        }
        while (v31);
      }
      break;
    case 12:
      uint64_t result = sub_215D163FC((unsigned __int8 **)(a2 + 16));
      if (result)
      {
        uint64_t v33 = v32;
        uint64_t v34 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 136))(a3, v33);
          v33 += 8;
          v34 -= 8;
        }
        while (v34);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

void sub_2159D7E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DF07E4(a2);
  v8[0] = "version";
  v8[1] = 7;
  unsigned int v9 = 2;
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_215DF1DC8((void *)a2, &v9);
  if (v9 >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = v9;
  }
  if (v6 >= 2)
  {
    int v7 = *(unsigned __int8 *)(a2 + 104);
    *(void *)(a2 + 88) = "value_type";
    *(void *)(a2 + 96) = 10;
    if (!v7) {
      *(unsigned char *)(a2 + 104) = 1;
    }
    v8[0] = a3;
    sub_2159D177C((void *)a2);
  }
  sub_2159D7FB0((uint64_t)v8, a2);
}

void sub_2159D7FB0(uint64_t a1, uint64_t a2)
{
  char v4 = 7;
  uint64_t v5 = 0;
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_215D1482C(&v10, 7, (uint64_t)&__p);
  long long v6 = v10;
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "value_type";
  *(void *)(a2 + 96) = 10;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  std::string __p = &v4;
  sub_2159D177C((void *)a2);
}

void sub_2159D8164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D8180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159D8194(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159D8314(v3);
      break;
    case 1:
      sub_2159D8478(v3);
      break;
    case 2:
      sub_2159D85E8(v3);
      break;
    case 3:
      sub_2159D875C(v3);
      break;
    case 5:
      sub_2159D8908(v3);
      break;
    case 6:
      sub_2159D8A6C(v3);
      break;
    case 7:
      sub_2159D8BDC(v3);
      break;
    case 8:
      sub_2159D8D50(v3);
      break;
    case 11:
      sub_2159D8EFC(v3);
      break;
    case 12:
      sub_2159D9060(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D8314(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v3 = (char *)operator new(v2);
    char v4 = &v3[v2];
    std::string __p = v3;
    uint64_t v12 = &v3[v2];
    bzero(v3, v2);
    uint64_t v11 = &v3[v2];
  }
  else
  {
    char v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = v4 - v3;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF0BCC(v7, (uint64_t)&v13);
  sub_215D1429C(&v13, 0, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159D8454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D8478(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    char v4 = v12;
    uint64_t v11 = v12;
  }
  else
  {
    char v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 1;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF2178(v7, (uint64_t)&v13);
  sub_215D14650(&v13, 1, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D85C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D85E8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    char v4 = v12;
    uint64_t v11 = v12;
  }
  else
  {
    char v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 2;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF2328(v7, (uint64_t)&v13);
  sub_215D14A08(&v13, 2, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D8738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D875C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v11 = v12;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)v4);
  ++*(void *)(v4 + 112);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_215DF4844(v6, (uint64_t)&v13);
  unint64_t v7 = (void *)v13;
  if (*((void *)&v13 + 1) != (void)v13) {
    memmove(v3, (const void *)v13, *((void *)&v13 + 1) - v13);
  }
  if (v7)
  {
    *((void *)&v13 + 1) = v7;
    operator delete(v7);
  }
  sub_215D14DC0(&v13, 3, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D88CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D8908(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(v2);
    uint64_t v4 = &v3[v2];
    std::string __p = v3;
    uint64_t v12 = &v3[v2];
    bzero(v3, v2);
    uint64_t v11 = &v3[v2];
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = v4 - v3;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1F38(v7, (uint64_t)&v13);
  sub_215D140C4(&v13, 5, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159D8A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D8A6C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v4 = v12;
    uint64_t v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 1;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF2058(v7, (uint64_t)&v13);
  sub_215D14474(&v13, 6, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D8BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D8BDC(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v4 = v12;
    uint64_t v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 2;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF2250(v7, (uint64_t)&v13);
  sub_215D1482C(&v13, 7, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D8D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D8D50(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v11 = v12;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)v4);
  ++*(void *)(v4 + 112);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_215DF45EC(v6, (uint64_t)&v13);
  unint64_t v7 = (void *)v13;
  if (*((void *)&v13 + 1) != (void)v13) {
    memmove(v3, (const void *)v13, *((void *)&v13 + 1) - v13);
  }
  if (v7)
  {
    *((void *)&v13 + 1) = v7;
    operator delete(v7);
  }
  sub_215D14BE4(&v13, 8, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D8EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D8EFC(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v11 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    long long v10 = v11;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)v4);
  ++*(void *)(v4 + 112);
  sub_215DF262C(v6, (float *)v3);
  sub_215D14F9C(&v12, 11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  uint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159D903C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D9060(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v11 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    long long v10 = v11;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)v4);
  ++*(void *)(v4 + 112);
  sub_215DF2748(v6, (double *)v3);
  sub_215D15178(&v12, 12, (uint64_t)&__p);
  uint64_t v7 = *a1;
  uint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159D91A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D91C4(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159D9344(v3);
      break;
    case 1:
      sub_2159D94A8(v3);
      break;
    case 2:
      sub_2159D9618(v3);
      break;
    case 3:
      sub_2159D978C(v3);
      break;
    case 5:
      sub_2159D9938(v3);
      break;
    case 6:
      sub_2159D9A9C(v3);
      break;
    case 7:
      sub_2159D9C0C(v3);
      break;
    case 8:
      sub_2159D9D80(v3);
      break;
    case 11:
      sub_2159D9F2C(v3);
      break;
    case 12:
      sub_2159DA090(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159D9344(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v3 = (char *)operator new(v2);
    uint64_t v4 = &v3[v2];
    std::string __p = v3;
    long long v12 = &v3[v2];
    bzero(v3, v2);
    uint64_t v11 = &v3[v2];
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = v4 - v3;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF0BCC(v7, (uint64_t)&v13);
  sub_215D1429C(&v13, 0, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159D9484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D94A8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    long long v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v4 = v12;
    uint64_t v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 1;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF2178(v7, (uint64_t)&v13);
  sub_215D14650(&v13, 1, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D95F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D9618(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    long long v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v4 = v12;
    uint64_t v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 2;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF2328(v7, (uint64_t)&v13);
  sub_215D14A08(&v13, 2, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D9768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D978C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    long long v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v11 = v12;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)v4);
  ++*(void *)(v4 + 112);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_215DF4844(v6, (uint64_t)&v13);
  unint64_t v7 = (void *)v13;
  if (*((void *)&v13 + 1) != (void)v13) {
    memmove(v3, (const void *)v13, *((void *)&v13 + 1) - v13);
  }
  if (v7)
  {
    *((void *)&v13 + 1) = v7;
    operator delete(v7);
  }
  sub_215D14DC0(&v13, 3, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D98FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D9938(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(v2);
    uint64_t v4 = &v3[v2];
    std::string __p = v3;
    long long v12 = &v3[v2];
    bzero(v3, v2);
    uint64_t v11 = &v3[v2];
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = v4 - v3;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1F38(v7, (uint64_t)&v13);
  sub_215D140C4(&v13, 5, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159D9A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D9A9C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    long long v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v4 = v12;
    uint64_t v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 1;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF2058(v7, (uint64_t)&v13);
  sub_215D14474(&v13, 6, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D9BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D9C0C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    long long v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v4 = v12;
    uint64_t v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 2;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF0AA0((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF2250(v7, (uint64_t)&v13);
  sub_215D1482C(&v13, 7, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D9D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D9D80(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    long long v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v11 = v12;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)v4);
  ++*(void *)(v4 + 112);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_215DF45EC(v6, (uint64_t)&v13);
  unint64_t v7 = (void *)v13;
  if (*((void *)&v13 + 1) != (void)v13) {
    memmove(v3, (const void *)v13, *((void *)&v13 + 1) - v13);
  }
  if (v7)
  {
    *((void *)&v13 + 1) = v7;
    operator delete(v7);
  }
  sub_215D14BE4(&v13, 8, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159D9EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159D9F2C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v11 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    long long v10 = v11;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)v4);
  ++*(void *)(v4 + 112);
  sub_215DF262C(v6, (float *)v3);
  sub_215D14F9C(&v12, 11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  uint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159DA06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DA090(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v11 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    long long v10 = v11;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF0AA0((void *)v4);
  ++*(void *)(v4 + 112);
  sub_215DF2748(v6, (double *)v3);
  sub_215D15178(&v12, 12, (uint64_t)&__p);
  uint64_t v7 = *a1;
  uint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159DA1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DA1F4(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (a4 < 2)
  {
    sub_2159DA304((uint64_t)&v9, (uint64_t)a2, (uint64_t)a3);
  }
  else
  {
    unint64_t v6 = a2 + 2;
    sub_2159B0060(a2 + 2);
    unsigned __int8 v10 = 0;
    sub_215DFF4BC(a2[6], &v10);
    *a3 = v10;
    sub_215DFFC24(a2[6], (void *)a3 + 1);
    sub_2159DA4A0(*a3, (uint64_t)a3, (uint64_t)a2);
    uint64_t v7 = a2[4];
    uint64_t v8 = *(void *)(v7 - 16) - (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2) + *(void *)(v7 - 8);
    if (v8) {
      (*(void (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v8);
    }
    a2[4] -= 16;
  }
}

void sub_2159DA304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[0] = 7;
  uint64_t v10 = 0;
  std::string __p = 0;
  long long v13 = 0;
  uint64_t v14 = 0;
  sub_215D1482C(&v15, 7, (uint64_t)&__p);
  long long v11 = v15;
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_215DFF4BC(*(void *)(a2 + 48), &__p);
  v9[0] = __p;
  sub_215DFFC24(*(void *)(a2 + 48), &v10);
  sub_2159DB3B0(v9[0], (uint64_t)v9, a2);
  uint64_t v5 = v10;
  long long v6 = v11;
  long long v11 = 0uLL;
  *(unsigned char *)a3 = v9[0];
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2159DA470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DA48C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159DA4A0(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159DA620(v3);
      break;
    case 1:
      sub_2159DA76C(v3);
      break;
    case 2:
      sub_2159DA8C8(v3);
      break;
    case 3:
      sub_2159DAA28(v3);
      break;
    case 5:
      sub_2159DAB88(v3);
      break;
    case 6:
      sub_2159DACD4(v3);
      break;
    case 7:
      sub_2159DAE30(v3);
      break;
    case 8:
      sub_2159DAF90(v3);
      break;
    case 11:
      sub_2159DB0F0(v3);
      break;
    case 12:
      sub_2159DB250(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159DA620(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v3 = operator new(v2);
    std::string __p = v3;
    uint64_t v10 = &v3[v2];
    bzero(v3, v2);
    char v9 = &v3[v2];
    size_t v4 = v2;
    uint64_t v5 = *(void *)(a1[1] + 48);
    do
    {
      sub_215DFF4BC(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_215D1429C(&v11, 0, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DA748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DA76C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    char v9 = v10;
    if (2 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_215DFF670(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_215D14650(&v11, 1, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DA8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DA8C8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    char v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFF824(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D14A08(&v11, 2, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DAA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DAA28(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    char v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFFC24(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D14DC0(&v11, 3, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DAB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DAB88(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v3 = operator new(v2);
    std::string __p = v3;
    uint64_t v10 = &v3[v2];
    bzero(v3, v2);
    char v9 = &v3[v2];
    size_t v4 = v2;
    uint64_t v5 = *(void *)(a1[1] + 48);
    do
    {
      sub_215DFF408(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_215D140C4(&v11, 5, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DACB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DACD4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    char v9 = v10;
    if (2 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_215DFF5BC(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_215D14474(&v11, 6, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DAE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DAE30(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    char v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFF770(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D1482C(&v11, 7, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DAF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DAF90(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    char v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFFB20(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D14BE4(&v11, 8, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DB0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DB0F0(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    char v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFFD1C(v4, (float *)v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D14F9C(&v11, 11, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DB22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DB250(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    char v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFFE68(v4, (double *)v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D15178(&v11, 12, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DB38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DB3B0(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159DB530(v3);
      break;
    case 1:
      sub_2159DB67C(v3);
      break;
    case 2:
      sub_2159DB7D8(v3);
      break;
    case 3:
      sub_2159DB938(v3);
      break;
    case 5:
      sub_2159DBA98(v3);
      break;
    case 6:
      sub_2159DBBE4(v3);
      break;
    case 7:
      sub_2159DBD40(v3);
      break;
    case 8:
      sub_2159DBEA0(v3);
      break;
    case 11:
      sub_2159DC000(v3);
      break;
    case 12:
      sub_2159DC160(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159DB530(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v3 = operator new(v2);
    std::string __p = v3;
    uint64_t v10 = &v3[v2];
    bzero(v3, v2);
    char v9 = &v3[v2];
    size_t v4 = v2;
    uint64_t v5 = *(void *)(a1[1] + 48);
    do
    {
      sub_215DFF4BC(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_215D1429C(&v11, 0, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DB658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DB67C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    char v9 = v10;
    if (2 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_215DFF670(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_215D14650(&v11, 1, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DB7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DB7D8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    char v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFF824(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D14A08(&v11, 2, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DB914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DB938(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    char v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFFC24(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D14DC0(&v11, 3, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DBA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DBA98(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v3 = operator new(v2);
    std::string __p = v3;
    uint64_t v10 = &v3[v2];
    bzero(v3, v2);
    char v9 = &v3[v2];
    size_t v4 = v2;
    uint64_t v5 = *(void *)(a1[1] + 48);
    do
    {
      sub_215DFF408(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_215D140C4(&v11, 5, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DBBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DBBE4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    char v9 = v10;
    if (2 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_215DFF5BC(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_215D14474(&v11, 6, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DBD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DBD40(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    char v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFF770(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D1482C(&v11, 7, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DBE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DBEA0(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    char v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFFB20(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D14BE4(&v11, 8, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DBFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DC000(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    char v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFFD1C(v4, (float *)v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D14F9C(&v11, 11, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DC13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DC160(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  char v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    char v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = *(void *)(a1[1] + 48);
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFFE68(v4, (double *)v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D15178(&v11, 12, (uint64_t)&__p);
  uint64_t v6 = *a1;
  uint64_t v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    char v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DC29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DC2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DF01A0(a2);
  v8[0] = "version";
  v8[1] = 7;
  unsigned int v9 = 2;
  int v5 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "version";
  *(void *)(a2 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  sub_215DF0F9C((void *)a2, &v9);
  if (v9 >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = v9;
  }
  if (v6 >= 2)
  {
    int v7 = *(unsigned __int8 *)(a2 + 104);
    *(void *)(a2 + 88) = "value_type";
    *(void *)(a2 + 96) = 10;
    if (!v7) {
      *(unsigned char *)(a2 + 104) = 1;
    }
    v8[0] = a3;
    sub_2159D2DC4((void *)a2);
  }
  sub_2159DC408((uint64_t)v8, a2);
}

void sub_2159DC408(uint64_t a1, uint64_t a2)
{
  char v4 = 7;
  uint64_t v5 = 0;
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_215D1482C(&v10, 7, (uint64_t)&__p);
  long long v6 = v10;
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  int v3 = *(unsigned __int8 *)(a2 + 104);
  *(void *)(a2 + 88) = "value_type";
  *(void *)(a2 + 96) = 10;
  if (!v3) {
    *(unsigned char *)(a2 + 104) = 1;
  }
  std::string __p = &v4;
  sub_2159D2DC4((void *)a2);
}

void sub_2159DC5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DC5D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159DC5EC(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159DC76C(v3);
      break;
    case 1:
      sub_2159DC8D0(v3);
      break;
    case 2:
      sub_2159DCA40(v3);
      break;
    case 3:
      sub_2159DCBB4(v3);
      break;
    case 5:
      sub_2159DCD60(v3);
      break;
    case 6:
      sub_2159DCEC4(v3);
      break;
    case 7:
      sub_2159DD034(v3);
      break;
    case 8:
      sub_2159DD1A8(v3);
      break;
    case 11:
      sub_2159DD354(v3);
      break;
    case 12:
      sub_2159DD4B8(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159DC76C(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v3 = (char *)operator new(v2);
    char v4 = &v3[v2];
    std::string __p = v3;
    long long v12 = &v3[v2];
    bzero(v3, v2);
    long long v11 = &v3[v2];
  }
  else
  {
    char v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = v4 - v3;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF0588(v7, (uint64_t)&v13);
  sub_215D1429C(&v13, 0, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159DC8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DC8D0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    long long v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    char v4 = v12;
    long long v11 = v12;
  }
  else
  {
    char v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 1;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1274(v7, (uint64_t)&v13);
  sub_215D14650(&v13, 1, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DCA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DCA40(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    long long v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    char v4 = v12;
    long long v11 = v12;
  }
  else
  {
    char v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 2;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1424(v7, (uint64_t)&v13);
  sub_215D14A08(&v13, 2, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DCB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DCBB4(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    long long v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    long long v11 = v12;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)v4);
  ++*(void *)(v4 + 112);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_215DF331C(v6, (uint64_t)&v13);
  unint64_t v7 = (void *)v13;
  if (*((void *)&v13 + 1) != (void)v13) {
    memmove(v3, (const void *)v13, *((void *)&v13 + 1) - v13);
  }
  if (v7)
  {
    *((void *)&v13 + 1) = v7;
    operator delete(v7);
  }
  sub_215D14DC0(&v13, 3, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DCD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DCD60(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(v2);
    uint64_t v4 = &v3[v2];
    std::string __p = v3;
    long long v12 = &v3[v2];
    bzero(v3, v2);
    long long v11 = &v3[v2];
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = v4 - v3;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1034(v7, (uint64_t)&v13);
  sub_215D140C4(&v13, 5, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159DCEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DCEC4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    long long v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v4 = v12;
    long long v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 1;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1154(v7, (uint64_t)&v13);
  sub_215D14474(&v13, 6, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DD010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DD034(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    long long v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v4 = v12;
    long long v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 2;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF134C(v7, (uint64_t)&v13);
  sub_215D1482C(&v13, 7, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DD184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DD1A8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    long long v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    long long v11 = v12;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)v4);
  ++*(void *)(v4 + 112);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_215DF2D20(v6, (uint64_t)&v13);
  unint64_t v7 = (void *)v13;
  if (*((void *)&v13 + 1) != (void)v13) {
    memmove(v3, (const void *)v13, *((void *)&v13 + 1) - v13);
  }
  if (v7)
  {
    *((void *)&v13 + 1) = v7;
    operator delete(v7);
  }
  sub_215D14BE4(&v13, 8, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DD318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DD354(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    long long v11 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    long long v10 = v11;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)v4);
  ++*(void *)(v4 + 112);
  sub_215DF1750(v6, (float *)v3);
  sub_215D14F9C(&v12, 11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  uint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159DD494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DD4B8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    long long v11 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    long long v10 = v11;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)v4);
  ++*(void *)(v4 + 112);
  sub_215DF1894(v6, (double *)v3);
  sub_215D15178(&v12, 12, (uint64_t)&__p);
  uint64_t v7 = *a1;
  uint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159DD5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DD61C(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159DD79C(v3);
      break;
    case 1:
      sub_2159DD900(v3);
      break;
    case 2:
      sub_2159DDA70(v3);
      break;
    case 3:
      sub_2159DDBE4(v3);
      break;
    case 5:
      sub_2159DDD90(v3);
      break;
    case 6:
      sub_2159DDEF4(v3);
      break;
    case 7:
      sub_2159DE064(v3);
      break;
    case 8:
      sub_2159DE1D8(v3);
      break;
    case 11:
      sub_2159DE384(v3);
      break;
    case 12:
      sub_2159DE4E8(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159DD79C(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v3 = (char *)operator new(v2);
    uint64_t v4 = &v3[v2];
    std::string __p = v3;
    long long v12 = &v3[v2];
    bzero(v3, v2);
    long long v11 = &v3[v2];
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = v4 - v3;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF0588(v7, (uint64_t)&v13);
  sub_215D1429C(&v13, 0, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159DD8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DD900(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    long long v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v4 = v12;
    long long v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 1;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1274(v7, (uint64_t)&v13);
  sub_215D14650(&v13, 1, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DDA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DDA70(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    long long v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v4 = v12;
    long long v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 2;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1424(v7, (uint64_t)&v13);
  sub_215D14A08(&v13, 2, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DDBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DDBE4(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    long long v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    long long v11 = v12;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)v4);
  ++*(void *)(v4 + 112);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_215DF331C(v6, (uint64_t)&v13);
  unint64_t v7 = (void *)v13;
  if (*((void *)&v13 + 1) != (void)v13) {
    memmove(v3, (const void *)v13, *((void *)&v13 + 1) - v13);
  }
  if (v7)
  {
    *((void *)&v13 + 1) = v7;
    operator delete(v7);
  }
  sub_215D14DC0(&v13, 3, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DDD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DDD90(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(v2);
    uint64_t v4 = &v3[v2];
    std::string __p = v3;
    long long v12 = &v3[v2];
    bzero(v3, v2);
    long long v11 = &v3[v2];
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = v4 - v3;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1034(v7, (uint64_t)&v13);
  sub_215D140C4(&v13, 5, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159DDED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DDEF4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    long long v12 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v4 = v12;
    long long v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 1;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF1154(v7, (uint64_t)&v13);
  sub_215D14474(&v13, 6, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DE040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DE064(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    long long v12 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v4 = v12;
    long long v11 = v12;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
  }
  uint64_t v5 = a1[1];
  int v6 = *(unsigned __int8 *)(v5 + 104);
  *(void *)(v5 + 88) = "numbers";
  *(void *)(v5 + 96) = 7;
  if (!v6) {
    *(unsigned char *)(v5 + 104) = 1;
  }
  *(void *)&long long v13 = (v4 - v3) >> 2;
  *((void *)&v13 + 1) = v3;
  unint64_t v7 = sub_215DF045C((void *)v5);
  ++*(void *)(v5 + 112);
  sub_215DF134C(v7, (uint64_t)&v13);
  sub_215D1482C(&v13, 7, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DE1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DE1D8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    long long v12 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    long long v11 = v12;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)v4);
  ++*(void *)(v4 + 112);
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  sub_215DF2D20(v6, (uint64_t)&v13);
  unint64_t v7 = (void *)v13;
  if (*((void *)&v13 + 1) != (void)v13) {
    memmove(v3, (const void *)v13, *((void *)&v13 + 1) - v13);
  }
  if (v7)
  {
    *((void *)&v13 + 1) = v7;
    operator delete(v7);
  }
  sub_215D14BE4(&v13, 8, (uint64_t)&__p);
  uint64_t v8 = *a1;
  uint64_t v9 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v8 + 16) = v13;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159DE348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DE384(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    long long v11 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    long long v10 = v11;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)v4);
  ++*(void *)(v4 + 112);
  sub_215DF1750(v6, (float *)v3);
  sub_215D14F9C(&v12, 11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  uint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159DE4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DE4E8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    long long v11 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    long long v10 = v11;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = a1[1];
  int v5 = *(unsigned __int8 *)(v4 + 104);
  *(void *)(v4 + 88) = "numbers";
  *(void *)(v4 + 96) = 7;
  if (!v5) {
    *(unsigned char *)(v4 + 104) = 1;
  }
  unint64_t v6 = sub_215DF045C((void *)v4);
  ++*(void *)(v4 + 112);
  sub_215DF1894(v6, (double *)v3);
  sub_215D15178(&v12, 12, (uint64_t)&__p);
  uint64_t v7 = *a1;
  uint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159DE628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DE64C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  LODWORD(__p[0]) = 2;
  sub_215DFABD4(a2, __p);
  unsigned int v5 = __p[0];
  if (LODWORD(__p[0]) >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = __p[0];
  }
  if (v6 < 2)
  {
    sub_2159DE7B0((uint64_t)__p, a2, (uint64_t)a3);
    if (v5 < 2) {
      return;
    }
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    sub_215DFA01C(a2, __p);
    *a3 = __p[0];
    sub_215DFB854(a2, (void *)a3 + 1);
    sub_2159DE94C(*a3, (uint64_t)a3, a2);
    if (v5 < 2) {
      return;
    }
  }
  if (!*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)__p);
      if (v10 < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_21:
          char v8 = 0;
          if (v10 < 0) {
            goto LABEL_24;
          }
          goto LABEL_10;
        }
      }
      else if (v10 == 1 && *(unsigned __int8 *)(a2 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_21;
      }
      char v8 = 1;
      if (v10 < 0) {
LABEL_24:
      }
        operator delete(__p[0]);
LABEL_10:
      if (*(unsigned char *)(a2 + 131)) {
        char v7 = 0;
      }
      else {
        char v7 = v8;
      }
    }
    while ((v7 & 1) != 0);
  }
}

void sub_2159DE7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v9[0] = 7;
  uint64_t v10 = 0;
  std::string __p = 0;
  long long v13 = 0;
  uint64_t v14 = 0;
  sub_215D1482C(&v15, 7, (uint64_t)&__p);
  long long v11 = v15;
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
  LOBYTE(__p) = 0;
  sub_215DFA01C(a2, &__p);
  v9[0] = __p;
  sub_215DFB854(a2, &v10);
  sub_2159DF834(v9[0], (uint64_t)v9, a2);
  uint64_t v5 = v10;
  long long v6 = v11;
  long long v11 = 0uLL;
  *(unsigned char *)a3 = v9[0];
  *(void *)(a3 + 8) = v5;
  char v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  char v8 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2159DE91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DE938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159DE94C(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159DEACC(v3);
      break;
    case 1:
      sub_2159DEC14(v3);
      break;
    case 2:
      sub_2159DED6C(v3);
      break;
    case 3:
      sub_2159DEEC8(v3);
      break;
    case 5:
      sub_2159DF024(v3);
      break;
    case 6:
      sub_2159DF16C(v3);
      break;
    case 7:
      sub_2159DF2C4(v3);
      break;
    case 8:
      sub_2159DF420(v3);
      break;
    case 11:
      sub_2159DF57C(v3);
      break;
    case 12:
      sub_2159DF6D8(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159DEACC(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v3 = operator new(v2);
    std::string __p = v3;
    uint64_t v10 = &v3[v2];
    bzero(v3, v2);
    uint64_t v9 = &v3[v2];
    size_t v4 = v2;
    uint64_t v5 = a1[1];
    do
    {
      sub_215DFA01C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_215D1429C(&v11, 0, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DEBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DEC14(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v9 = v10;
    if (2 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_215DFA594(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_215D14650(&v11, 1, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DED48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DED6C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFABD4(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D14A08(&v11, 2, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DEEA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DEEC8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFB854(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D14DC0(&v11, 3, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DF000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DF024(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v3 = operator new(v2);
    std::string __p = v3;
    uint64_t v10 = &v3[v2];
    bzero(v3, v2);
    uint64_t v9 = &v3[v2];
    size_t v4 = v2;
    uint64_t v5 = a1[1];
    do
    {
      sub_215DF9DC4(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_215D140C4(&v11, 5, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DF148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DF16C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v9 = v10;
    if (2 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_215DFA274(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_215D14474(&v11, 6, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DF2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DF2C4(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFA8B4(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D1482C(&v11, 7, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DF3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DF420(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFB534(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D14BE4(&v11, 8, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DF558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DF57C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFBEC8(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D14F9C(&v11, 11, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DF6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DF6D8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFC1E8(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D15178(&v11, 12, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DF810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DF834(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159DF9B4(v3);
      break;
    case 1:
      sub_2159DFAFC(v3);
      break;
    case 2:
      sub_2159DFC54(v3);
      break;
    case 3:
      sub_2159DFDB0(v3);
      break;
    case 5:
      sub_2159DFF0C(v3);
      break;
    case 6:
      sub_2159E0054(v3);
      break;
    case 7:
      sub_2159E01AC(v3);
      break;
    case 8:
      sub_2159E0308(v3);
      break;
    case 11:
      sub_2159E0464(v3);
      break;
    case 12:
      sub_2159E05C0(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159DF9B4(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int v3 = operator new(v2);
    std::string __p = v3;
    uint64_t v10 = &v3[v2];
    bzero(v3, v2);
    uint64_t v9 = &v3[v2];
    size_t v4 = v2;
    uint64_t v5 = a1[1];
    do
    {
      sub_215DFA01C(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_215D1429C(&v11, 0, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DFAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DFAFC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v9 = v10;
    if (2 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_215DFA594(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_215D14650(&v11, 1, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DFC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DFC54(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFABD4(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D14A08(&v11, 2, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DFD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DFDB0(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFB854(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D14DC0(&v11, 3, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159DFEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159DFF0C(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int v3 = operator new(v2);
    std::string __p = v3;
    uint64_t v10 = &v3[v2];
    bzero(v3, v2);
    uint64_t v9 = &v3[v2];
    size_t v4 = v2;
    uint64_t v5 = a1[1];
    do
    {
      sub_215DF9DC4(v5, v3++);
      --v4;
    }
    while (v4);
  }
  sub_215D140C4(&v11, 5, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159E0030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E0054(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    uint64_t v9 = v10;
    if (2 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 2 * ((2 * v2) >> 1);
      do
      {
        sub_215DFA274(v4, v3);
        v3 += 2;
        v5 -= 2;
      }
      while (v5);
    }
  }
  sub_215D14474(&v11, 6, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159E0188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E01AC(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFA8B4(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D1482C(&v11, 7, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159E02E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E0308(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFB534(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D14BE4(&v11, 8, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159E0440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E0464(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    uint64_t v9 = v10;
    if (4 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 4 * ((uint64_t)(4 * v2) >> 2);
      do
      {
        sub_215DFBEC8(v4, v3);
        v3 += 4;
        v5 -= 4;
      }
      while (v5);
    }
  }
  sub_215D14F9C(&v11, 11, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159E059C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E05C0(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    int v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v10 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    uint64_t v9 = v10;
    if (8 * v2)
    {
      uint64_t v4 = a1[1];
      uint64_t v5 = 8 * ((uint64_t)(8 * v2) >> 3);
      do
      {
        sub_215DFC1E8(v4, v3);
        v3 += 8;
        v5 -= 8;
      }
      while (v5);
    }
  }
  sub_215D15178(&v11, 12, (uint64_t)&__p);
  uint64_t v6 = *a1;
  char v7 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v6 + 16) = v11;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
}

void sub_2159E06F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E071C(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    sub_2159E081C((uint64_t)&v13, a2, a3);
  }
  else
  {
    sub_215D02644(a2);
    sub_2159E0994(a2, a3);
    uint64_t v10 = a2[12];
    uint64_t v11 = a2[9];
    a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
    a2[9] = v11 - 8;
    a2[12] = v10 - 8;
  }
}

void sub_2159E0808(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159E081C(uint64_t a1, void *a2, uint64_t a3)
{
  v9[0] = 7;
  uint64_t v10 = 0;
  std::string __p = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  sub_215D1482C(&v15, 7, (uint64_t)&__p);
  long long v11 = v15;
  if (__p)
  {
    char v13 = __p;
    operator delete(__p);
  }
  sub_2159E1DDC(a2, (uint64_t)v9);
  uint64_t v5 = v10;
  long long v6 = v11;
  long long v11 = 0uLL;
  *(unsigned char *)a3 = v9[0];
  *(void *)(a3 + 8) = v5;
  char v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  char v8 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2159E0964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159E0978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E0994(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  if (v3 <= v2) {
    goto LABEL_8;
  }
  uint64_t v5 = a1[3];
  int v6 = *(unsigned __int8 *)(v5 + v2);
  unint64_t v7 = v2 + 1;
  a1[6] = v7;
  *(unsigned char *)a2 = v6;
  BOOL v8 = v3 >= v7;
  unint64_t v9 = v3 - v7;
  if (!v8) {
    unint64_t v9 = 0;
  }
  if (v9 <= 7)
  {
LABEL_8:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 8) = *(void *)(v5 + v7);
  a1[6] += 8;

  sub_2159E0A84(v6, a2, (uint64_t)a1);
}

void sub_2159E0A5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159E0A70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159E0A84(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159E0C04(v3);
      break;
    case 1:
      sub_2159E0DC4(v3);
      break;
    case 2:
      sub_2159E0F8C(v3);
      break;
    case 3:
      sub_2159E1158(v3);
      break;
    case 5:
      sub_2159E1324(v3);
      break;
    case 6:
      sub_2159E14E4(v3);
      break;
    case 7:
      sub_2159E16AC(v3);
      break;
    case 8:
      sub_2159E1878(v3);
      break;
    case 11:
      sub_2159E1A44(v3);
      break;
    case 12:
      sub_2159E1C10(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159E0C04(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    unint64_t v3 = (char *)operator new(v2);
    unint64_t v4 = &v3[v2];
    std::string __p = v3;
    uint64_t v16 = &v3[v2];
    bzero(v3, v2);
    long long v15 = &v3[v2];
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D1429C(&v17, 0, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159E0D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E0DC4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14650(&v17, 1, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E0F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E0F8C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14A08(&v17, 2, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E1124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E1158(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14DC0(&v17, 3, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E12F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E1324(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(v2);
    unint64_t v4 = &v3[v2];
    std::string __p = v3;
    uint64_t v16 = &v3[v2];
    bzero(v3, v2);
    long long v15 = &v3[v2];
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D140C4(&v17, 5, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159E14B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E14E4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14474(&v17, 6, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E1678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E16AC(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D1482C(&v17, 7, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E1844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E1878(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14BE4(&v17, 8, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E1A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E1A44(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14F9C(&v17, 11, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E1BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E1C10(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D15178(&v17, 12, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E1DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E1DDC(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  if (v3 <= v2) {
    goto LABEL_8;
  }
  uint64_t v5 = a1[3];
  int v6 = *(unsigned __int8 *)(v5 + v2);
  unint64_t v7 = v2 + 1;
  a1[6] = v7;
  *(unsigned char *)a2 = v6;
  BOOL v8 = v3 >= v7;
  unint64_t v9 = v3 - v7;
  if (!v8) {
    unint64_t v9 = 0;
  }
  if (v9 <= 7)
  {
LABEL_8:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 8) = *(void *)(v5 + v7);
  a1[6] += 8;

  sub_2159E1ECC(v6, a2, (uint64_t)a1);
}

void sub_2159E1EA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159E1EB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159E1ECC(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159E204C(v3);
      break;
    case 1:
      sub_2159E220C(v3);
      break;
    case 2:
      sub_2159E23D4(v3);
      break;
    case 3:
      sub_2159E25A0(v3);
      break;
    case 5:
      sub_2159E276C(v3);
      break;
    case 6:
      sub_2159E292C(v3);
      break;
    case 7:
      sub_2159E2AF4(v3);
      break;
    case 8:
      sub_2159E2CC0(v3);
      break;
    case 11:
      sub_2159E2E8C(v3);
      break;
    case 12:
      sub_2159E3058(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159E204C(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    unint64_t v3 = (char *)operator new(v2);
    unint64_t v4 = &v3[v2];
    std::string __p = v3;
    uint64_t v16 = &v3[v2];
    bzero(v3, v2);
    long long v15 = &v3[v2];
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D1429C(&v17, 0, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159E21D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E220C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14650(&v17, 1, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E23A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E23D4(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14A08(&v17, 2, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E256C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E25A0(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14DC0(&v17, 3, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E2738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E276C(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(v2);
    unint64_t v4 = &v3[v2];
    std::string __p = v3;
    uint64_t v16 = &v3[v2];
    bzero(v3, v2);
    long long v15 = &v3[v2];
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D140C4(&v17, 5, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159E28F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E292C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(2 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[2 * v2];
    bzero(v3, 2 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14474(&v17, 6, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E2AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E2AF4(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D1482C(&v17, 7, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E2C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E2CC0(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14BE4(&v17, 8, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E2E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E2E8C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(4 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[4 * v2];
    bzero(v3, 4 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D14F9C(&v17, 11, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E3024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E3058(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    unint64_t v3 = (char *)operator new(8 * v2);
    std::string __p = v3;
    uint64_t v16 = &v3[8 * v2];
    bzero(v3, 8 * v2);
    unint64_t v4 = v16;
    long long v15 = v16;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v3 = 0;
  }
  size_t v5 = v4 - v3;
  int v6 = (void *)a1[1];
  unint64_t v7 = v6[6];
  unint64_t v8 = v6[7];
  BOOL v9 = v8 >= v7;
  size_t v10 = v8 - v7;
  if (!v9) {
    size_t v10 = 0;
  }
  if (v10 < v5)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v3, (const void *)(v6[3] + v7), v5);
  v6[6] += v5;
  sub_215D15178(&v17, 12, (uint64_t)&__p);
  uint64_t v11 = *a1;
  long long v12 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v11 + 16) = v17;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = __p;
    operator delete(__p);
  }
}

void sub_2159E31F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E3224(int *a1, unsigned char *a2, unsigned char *a3)
{
  unsigned int v6 = 2;
  (*(void (**)(unsigned char *, unsigned int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1)
  {
    if (v6 < 2)
    {
      sub_2159E36F8((uint64_t)&v7, a2, (uint64_t)a3);
    }
    else
    {
      unint64_t v8 = a3;
      sub_2159D5570(a2, &v8);
      (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 120))(a2, a3 + 8);
      sub_2159E38B0(*a3, (uint64_t)a3, (uint64_t)a2);
    }
  }
  else
  {
    sub_2159E333C(a1, a2, a3, v6);
  }
}

void sub_2159E333C(int *a1, unsigned char *a2, unsigned char *a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    unsigned int v13 = 2;
    (*(void (**)(unsigned char *, unsigned int *))(*(void *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      unsigned int v11 = v13;
      long long v12 = sub_2159E34DC();
      sub_215E07C10((std::string *)v12, v11, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    int v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 < 2)
  {
    sub_2159E36F8((uint64_t)&v14, a2, (uint64_t)a3);
    return;
  }
  int v9 = 0;
LABEL_13:
  long long v15 = a3;
  sub_2159D5570(a2, &v15);
  (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 120))(a2, a3 + 8);
  sub_2159E38B0(*a3, (uint64_t)a3, (uint64_t)a2);
  if (v9) {
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

long long *sub_2159E34DC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888EE0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888EE0))
  {
    return &xmmword_267888EC8;
  }
  uint64_t v1 = (char *)sub_2159E35C4();
  if (v1[23] < 0)
  {
    sub_215738B0C(&xmmword_267888EC8, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v2 = *(_OWORD *)v1;
    qword_267888ED8 = *((void *)v1 + 2);
    xmmword_267888EC8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888EC8, &dword_21572C000);
  __cxa_guard_release(&qword_267888EE0);
  return &xmmword_267888EC8;
}

void sub_2159E35AC(_Unwind_Exception *a1)
{
}

void *sub_2159E35C4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888F00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888F00))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::NumbersSample]", qword_267888EE8);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888EE8, &dword_21572C000);
    __cxa_guard_release(&qword_267888F00);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888F20, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888F20))
  {
    return &unk_267888F08;
  }
  sub_215E19DF4((uint64_t)qword_267888EE8, (uint64_t)&unk_267888F08);
  __cxa_atexit(MEMORY[0x263F8C0B8], &unk_267888F08, &dword_21572C000);
  __cxa_guard_release(&qword_267888F20);
  return &unk_267888F08;
}

void sub_2159E36C8(_Unwind_Exception *a1)
{
}

void sub_2159E36E0(_Unwind_Exception *a1)
{
}

void sub_2159E36F8(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  v9[0] = 7;
  uint64_t v10 = 0;
  std::string __p = 0;
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  sub_215D1482C(&v15, 7, (uint64_t)&__p);
  long long v11 = v15;
  if (__p)
  {
    unsigned int v13 = __p;
    operator delete(__p);
  }
  std::string __p = v9;
  sub_2159D5570(a2, (unsigned char **)&__p);
  (*(void (**)(unsigned char *, uint64_t *))(*(void *)a2 + 120))(a2, &v10);
  sub_2159E47A0(v9[0], (uint64_t)v9, (uint64_t)a2);
  uint64_t v5 = v10;
  long long v6 = v11;
  long long v11 = 0uLL;
  *(unsigned char *)a3 = v9[0];
  *(void *)(a3 + 8) = v5;
  int v7 = *(std::__shared_weak_count **)(a3 + 24);
  *(_OWORD *)(a3 + 16) = v6;
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1))
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_2159E3880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E389C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159E38B0(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159E3A30(v3);
      break;
    case 1:
      sub_2159E3B7C(v3);
      break;
    case 2:
      sub_2159E3CD4(v3);
      break;
    case 3:
      sub_2159E3E30(v3);
      break;
    case 5:
      sub_2159E3F8C(v3);
      break;
    case 6:
      sub_2159E40D8(v3);
      break;
    case 7:
      sub_2159E4230(v3);
      break;
    case 8:
      sub_2159E438C(v3);
      break;
    case 11:
      sub_2159E44E8(v3);
      break;
    case 12:
      sub_2159E4644(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159E3A30(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  unint64_t v8 = 0;
  int v9 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    unint64_t v3 = (char *)operator new(v2);
    std::string __p = v3;
    int v9 = &v3[v2];
    bzero(v3, v2);
    unint64_t v8 = &v3[v2];
    uint64_t v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v4 + 80))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_215D1429C(&v10, 0, (uint64_t)&__p);
  uint64_t v5 = *a1;
  long long v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v10;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (__p)
  {
    unint64_t v8 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159E3B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E3B7C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    uint64_t v3 = 2 * v2;
    uint64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    long long v11 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 96))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_215D14650(&v12, 1, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E3CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E3CD4(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    uint64_t v3 = 4 * v2;
    uint64_t v4 = (char *)operator new(4 * v2);
    std::string __p = v4;
    long long v11 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 104))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_215D14A08(&v12, 2, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E3E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E3E30(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    uint64_t v3 = 8 * v2;
    uint64_t v4 = (char *)operator new(8 * v2);
    std::string __p = v4;
    long long v11 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 120))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_215D14DC0(&v12, 3, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E3F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E3F8C(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  unint64_t v8 = 0;
  int v9 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    uint64_t v3 = (char *)operator new(v2);
    std::string __p = v3;
    int v9 = &v3[v2];
    bzero(v3, v2);
    unint64_t v8 = &v3[v2];
    uint64_t v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v4 + 88))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_215D140C4(&v10, 5, (uint64_t)&__p);
  uint64_t v5 = *a1;
  unint64_t v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v10;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (__p)
  {
    unint64_t v8 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159E40B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E40D8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    uint64_t v3 = 2 * v2;
    uint64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    long long v11 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 48))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_215D14474(&v12, 6, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E420C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E4230(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    uint64_t v3 = 4 * v2;
    uint64_t v4 = (char *)operator new(4 * v2);
    std::string __p = v4;
    long long v11 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 56))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_215D1482C(&v12, 7, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E4368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E438C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    uint64_t v3 = 8 * v2;
    uint64_t v4 = (char *)operator new(8 * v2);
    std::string __p = v4;
    long long v11 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 72))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_215D14BE4(&v12, 8, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E44C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E44E8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    uint64_t v3 = 4 * v2;
    uint64_t v4 = (char *)operator new(4 * v2);
    std::string __p = v4;
    long long v11 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 128))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_215D14F9C(&v12, 11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E4620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E4644(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    uint64_t v3 = 8 * v2;
    uint64_t v4 = (char *)operator new(8 * v2);
    std::string __p = v4;
    long long v11 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 136))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_215D15178(&v12, 12, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E477C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E47A0(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159E4920(v3);
      break;
    case 1:
      sub_2159E4A6C(v3);
      break;
    case 2:
      sub_2159E4BC4(v3);
      break;
    case 3:
      sub_2159E4D20(v3);
      break;
    case 5:
      sub_2159E4E7C(v3);
      break;
    case 6:
      sub_2159E4FC8(v3);
      break;
    case 7:
      sub_2159E5120(v3);
      break;
    case 8:
      sub_2159E527C(v3);
      break;
    case 11:
      sub_2159E53D8(v3);
      break;
    case 12:
      sub_2159E5534(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159E4920(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  unint64_t v8 = 0;
  int v9 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v3 = (char *)operator new(v2);
    std::string __p = v3;
    int v9 = &v3[v2];
    bzero(v3, v2);
    unint64_t v8 = &v3[v2];
    uint64_t v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v4 + 80))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_215D1429C(&v10, 0, (uint64_t)&__p);
  uint64_t v5 = *a1;
  unint64_t v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v10;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (__p)
  {
    unint64_t v8 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159E4A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E4A6C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    uint64_t v3 = 2 * v2;
    uint64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    long long v11 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 96))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_215D14650(&v12, 1, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E4BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E4BC4(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    uint64_t v3 = 4 * v2;
    uint64_t v4 = (char *)operator new(4 * v2);
    std::string __p = v4;
    long long v11 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 104))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_215D14A08(&v12, 2, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E4CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E4D20(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    uint64_t v3 = 8 * v2;
    uint64_t v4 = (char *)operator new(8 * v2);
    std::string __p = v4;
    long long v11 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 120))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_215D14DC0(&v12, 3, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E4E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E4E7C(void *a1)
{
  size_t v2 = *(void *)(*a1 + 8);
  unint64_t v8 = 0;
  int v9 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((v2 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    uint64_t v3 = (char *)operator new(v2);
    std::string __p = v3;
    int v9 = &v3[v2];
    bzero(v3, v2);
    unint64_t v8 = &v3[v2];
    uint64_t v4 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v4 + 88))(v4, v3++);
      --v2;
    }
    while (v2);
  }
  sub_215D140C4(&v10, 5, (uint64_t)&__p);
  uint64_t v5 = *a1;
  unint64_t v6 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v5 + 16) = v10;
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (__p)
  {
    unint64_t v8 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159E4FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E4FC8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 < 0) {
      sub_2157E81A4();
    }
    uint64_t v3 = 2 * v2;
    uint64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    long long v11 = &v4[2 * v2];
    bzero(v4, 2 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 48))(v5, v4);
      v4 += 2;
      v6 -= 2;
    }
    while (v6);
  }
  sub_215D14474(&v12, 6, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E50FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E5120(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    uint64_t v3 = 4 * v2;
    uint64_t v4 = (char *)operator new(4 * v2);
    std::string __p = v4;
    long long v11 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 56))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_215D1482C(&v12, 7, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E5258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E527C(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    uint64_t v3 = 8 * v2;
    uint64_t v4 = (char *)operator new(8 * v2);
    std::string __p = v4;
    long long v11 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 72))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_215D14BE4(&v12, 8, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E53B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E53D8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 62) {
      sub_2157E81A4();
    }
    uint64_t v3 = 4 * v2;
    uint64_t v4 = (char *)operator new(4 * v2);
    std::string __p = v4;
    long long v11 = &v4[4 * v2];
    bzero(v4, 4 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 128))(v5, v4);
      v4 += 4;
      v6 -= 4;
    }
    while (v6);
  }
  sub_215D14F9C(&v12, 11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E5510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E5534(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 8);
  long long v10 = 0;
  long long v11 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (v2 >> 61) {
      sub_2157E81A4();
    }
    uint64_t v3 = 8 * v2;
    uint64_t v4 = (char *)operator new(8 * v2);
    std::string __p = v4;
    long long v11 = &v4[8 * v2];
    bzero(v4, 8 * v2);
    long long v10 = v11;
    uint64_t v5 = a1[1];
    unint64_t v6 = v3 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 136))(v5, v4);
      v4 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  sub_215D15178(&v12, 12, (uint64_t)&__p);
  uint64_t v7 = *a1;
  unint64_t v8 = *(std::__shared_weak_count **)(*a1 + 24);
  *(_OWORD *)(v7 + 16) = v12;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_2159E566C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E5690()
{
}

void sub_2159E586C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2159E58A0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v7 = &v4;
  sub_2159CC60C();
}

void sub_2159E5AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159E5AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159E5B0C(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        return;
      }
      uint64_t v7 = v5;
      if (v5)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v7;
          sub_215DEC208(a3, (size_t *)&v35);
          v7 += 2;
          --v6;
        }
        while (v6);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v7;
        sub_215DEC208(a3, (size_t *)&v35);
        v7 += 2;
        if (!--v6) {
          return;
        }
      }
      goto LABEL_75;
    case 1:
      sub_215D160E4((unsigned __int8 **)(a2 + 16));
      uint64_t v9 = *(void *)(a2 + 8);
      if (!v9) {
        return;
      }
      uint64_t v10 = v8;
      if (v8)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v10;
          sub_215DEEA00(a3, (uint64_t)&v35);
          v10 += 4;
          --v9;
        }
        while (v9);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v10;
        sub_215DEEA00(a3, (uint64_t)&v35);
        v10 += 4;
        if (!--v9) {
          return;
        }
      }
      goto LABEL_75;
    case 2:
      sub_215D161EC((unsigned __int8 **)(a2 + 16));
      uint64_t v12 = *(void *)(a2 + 8);
      if (!v12) {
        return;
      }
      uint64_t v13 = v11;
      if (v11)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v13;
          sub_215DEEC78(a3, (uint64_t)&v35);
          v13 += 8;
          --v12;
        }
        while (v12);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v13;
        sub_215DEEC78(a3, (uint64_t)&v35);
        v13 += 8;
        if (!--v12) {
          return;
        }
      }
      goto LABEL_75;
    case 3:
      sub_215D162F4((unsigned __int8 **)(a2 + 16));
      uint64_t v15 = *(void *)(a2 + 8);
      if (!v15) {
        return;
      }
      uint64_t v16 = v14;
      if (v14)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v16;
          sub_215DEF168(a3, (uint64_t)&v35);
          v16 += 16;
          --v15;
        }
        while (v15);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v16;
        sub_215DEF168(a3, (uint64_t)&v35);
        v16 += 16;
        if (!--v15) {
          return;
        }
      }
      goto LABEL_75;
    case 5:
      sub_215D15F58((unsigned __int8 **)(a2 + 16));
      uint64_t v18 = *(void *)(a2 + 8);
      if (!v18) {
        return;
      }
      uint64_t v19 = v17;
      if (v17)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v19;
          sub_215DEE788(a3, (size_t *)&v35);
          v19 += 2;
          --v18;
        }
        while (v18);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v19;
        sub_215DEE788(a3, (size_t *)&v35);
        v19 += 2;
        if (!--v18) {
          return;
        }
      }
      goto LABEL_75;
    case 6:
      sub_215D16060((unsigned __int8 **)(a2 + 16));
      uint64_t v21 = *(void *)(a2 + 8);
      if (!v21) {
        return;
      }
      uint64_t v22 = v20;
      if (v20)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v22;
          sub_215DEE8C4(a3, (uint64_t)&v35);
          v22 += 4;
          --v21;
        }
        while (v21);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v22;
        sub_215DEE8C4(a3, (uint64_t)&v35);
        v22 += 4;
        if (!--v21) {
          return;
        }
      }
      goto LABEL_75;
    case 7:
      sub_215D16168((unsigned __int8 **)(a2 + 16));
      uint64_t v24 = *(void *)(a2 + 8);
      if (!v24) {
        return;
      }
      uint64_t v25 = v23;
      if (v23)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v25;
          sub_215DEEB3C(a3, (uint64_t)&v35);
          v25 += 8;
          --v24;
        }
        while (v24);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v25;
        sub_215DEEB3C(a3, (uint64_t)&v35);
        v25 += 8;
        if (!--v24) {
          return;
        }
      }
      goto LABEL_75;
    case 8:
      sub_215D16270((unsigned __int8 **)(a2 + 16));
      uint64_t v27 = *(void *)(a2 + 8);
      if (!v27) {
        return;
      }
      uint64_t v28 = v26;
      if (v26)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v28;
          sub_215DEF02C(a3, (uint64_t)&v35);
          v28 += 16;
          --v27;
        }
        while (v27);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v28;
        sub_215DEF02C(a3, (uint64_t)&v35);
        v28 += 16;
        if (!--v27) {
          return;
        }
      }
      goto LABEL_75;
    case 11:
      sub_215D16378((unsigned __int8 **)(a2 + 16));
      uint64_t v30 = *(void *)(a2 + 8);
      if (!v30) {
        return;
      }
      uint64_t v31 = v29;
      if (v29)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v31;
          sub_215DEF750(a3, (float **)&v35);
          v31 += 8;
          --v30;
        }
        while (v30);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v31;
        sub_215DEF750(a3, (float **)&v35);
        v31 += 8;
        if (!--v30) {
          return;
        }
      }
      goto LABEL_75;
    case 12:
      sub_215D163FC((unsigned __int8 **)(a2 + 16));
      uint64_t v33 = *(void *)(a2 + 8);
      if (!v33) {
        return;
      }
      uint64_t v34 = v32;
      if (!v32)
      {
        while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          uint64_t v35 = 2;
          uint64_t v36 = v34;
          sub_215DEFB74(a3, &v35);
          v34 += 16;
          if (!--v33) {
            return;
          }
        }
LABEL_75:
        abort();
      }
      do
      {
        uint64_t v35 = 2;
        uint64_t v36 = v34;
        sub_215DEFB74(a3, &v35);
        v34 += 16;
        --v33;
      }
      while (v33);
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159E626C(uint64_t *a1, long long *a2)
{
  long long v7 = *a2;
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1[3];
  if (*(unsigned char *)(v4 + 40))
  {
    v10[0] = (uint64_t *)(v4 + 16);
    sub_215E053CC(v10, v7);
  }
  else
  {
    if ((char)v7 < 0)
    {
      LOBYTE(v10[0]) = -52;
      BYTE1(v10[0]) = v7;
    }
    else
    {
      LOBYTE(v10[0]) = v7;
    }
    std::ostream::write();
  }
  uint64_t v5 = a1[3];
  if (*(unsigned char *)(v5 + 40))
  {
    v10[0] = (uint64_t *)(v5 + 16);
    sub_215E069EC(v10, *((unint64_t *)&v7 + 1));
  }
  else
  {
    sub_215E06D00();
  }
  long long v11 = xmmword_26425A6C8;
  v10[0] = (uint64_t *)&v7;
  v10[1] = a1;
  void v10[2] = (uint64_t *)&v11;
  sub_2159E63DC(v7, v10);
  uint64_t v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2159E63C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159E63DC(int a1, void *a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      uint64_t v4 = result;
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v7 + 40))
      {
        *(void *)&long long v63 = v7 + 16;
        if (result)
        {
          do
          {
            char v8 = *v6++;
            uint64_t result = (uint64_t)sub_215E053CC((uint64_t **)&v63, v8);
            --v4;
          }
          while (v4);
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        do
        {
          while (1)
          {
            int v50 = *v6;
            if ((v50 & 0x80000000) == 0) {
              break;
            }
            LOBYTE(v63) = -52;
            BYTE1(v63) = v50;
            uint64_t result = std::ostream::write();
            ++v6;
            if (!--v4) {
              return result;
            }
          }
          LOBYTE(v63) = *v6;
          uint64_t result = std::ostream::write();
          ++v6;
          --v4;
        }
        while (v4);
      }
      return result;
    case 1:
      unint64_t v9 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      uint64_t v10 = a2[1];
      *(void *)&long long v63 = v9;
      *((void *)&v63 + 1) = v11;
      return sub_215DFF1B4(*(void *)(v10 + 24), &v63);
    case 2:
      uint64_t result = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v14 + 40))
      {
        *(void *)&long long v63 = v14 + 16;
        if (result)
        {
          uint64_t v15 = 4 * result;
          do
          {
            unsigned int v16 = *v13++;
            uint64_t result = (uint64_t)sub_215E05FEC((uint64_t **)&v63, v16);
            v15 -= 4;
          }
          while (v15);
        }
      }
      else if (result)
      {
        uint64_t v51 = v14 + 8;
        uint64_t v52 = 4 * result;
        do
        {
          ++v13;
          uint64_t result = sub_215E0626C((uint64_t)&v63, v51);
          v52 -= 4;
        }
        while (v52);
      }
      return result;
    case 3:
      uint64_t result = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v19 + 40))
      {
        *(void *)&long long v63 = v19 + 16;
        if (result)
        {
          uint64_t v20 = 8 * result;
          do
          {
            unint64_t v21 = *v18++;
            uint64_t result = (uint64_t)sub_215E069EC((uint64_t **)&v63, v21);
            v20 -= 8;
          }
          while (v20);
        }
      }
      else if (result)
      {
        uint64_t v53 = 8 * result;
        do
        {
          ++v18;
          uint64_t result = sub_215E06D00();
          v53 -= 8;
        }
        while (v53);
      }
      return result;
    case 5:
      uint64_t result = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      uint64_t v22 = result;
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v25 + 40))
      {
        *(void *)&long long v63 = v25 + 16;
        if (result)
        {
          do
          {
            int v26 = (char)*v24++;
            uint64_t result = (uint64_t)sub_215E05278((uint64_t **)&v63, v26);
            --v22;
          }
          while (v22);
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        do
        {
          while (1)
          {
            int v54 = (char)*v24;
            if (v54 <= -33) {
              break;
            }
            LOBYTE(v63) = *v24;
            uint64_t result = std::ostream::write();
            ++v24;
            if (!--v22) {
              return result;
            }
          }
          LOBYTE(v63) = -48;
          BYTE1(v63) = v54;
          uint64_t result = std::ostream::write();
          ++v24;
          --v22;
        }
        while (v22);
      }
      return result;
    case 6:
      uint64_t result = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v29 + 40))
      {
        *(void *)&long long v63 = v29 + 16;
        if (result)
        {
          uint64_t v30 = 2 * result;
          do
          {
            signed int v31 = *v28++;
            uint64_t result = (uint64_t)sub_215E0551C((uint64_t **)&v63, v31);
            v30 -= 2;
          }
          while (v30);
        }
      }
      else if (result)
      {
        uint64_t v55 = 2 * result;
        do
        {
          ++v28;
          uint64_t result = sub_215E057EC();
          v55 -= 2;
        }
        while (v55);
      }
      return result;
    case 7:
      uint64_t result = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v34 + 40))
      {
        *(void *)&long long v63 = v34 + 16;
        if (result)
        {
          uint64_t v35 = 4 * result;
          do
          {
            unsigned int v36 = *v33++;
            uint64_t result = (uint64_t)sub_215E05AC4((uint64_t **)&v63, v36);
            v35 -= 4;
          }
          while (v35);
        }
      }
      else if (result)
      {
        uint64_t v56 = 4 * result;
        do
        {
          ++v33;
          uint64_t result = sub_215E05EEC();
          v56 -= 4;
        }
        while (v56);
      }
      return result;
    case 8:
      uint64_t result = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      uint64_t v38 = v37;
      uint64_t v39 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v39 + 40))
      {
        *(void *)&long long v63 = v39 + 16;
        if (result)
        {
          uint64_t v40 = 8 * result;
          do
          {
            unint64_t v41 = *v38++;
            uint64_t result = (uint64_t)sub_215E06360((uint64_t **)&v63, v41);
            v40 -= 8;
          }
          while (v40);
        }
      }
      else if (result)
      {
        uint64_t v57 = 8 * result;
        do
        {
          ++v38;
          uint64_t result = sub_215E068A8();
          v57 -= 8;
        }
        while (v57);
      }
      return result;
    case 11:
      uint64_t result = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      uint64_t v43 = v42;
      uint64_t v44 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v44 + 40))
      {
        *(void *)&long long v63 = v44 + 16;
        if (result)
        {
          uint64_t v45 = 4 * result;
          do
          {
            uint64_t result = (uint64_t)sub_215E06DFC((uint64_t)&v62, (uint64_t **)&v63, v43++);
            v45 -= 4;
          }
          while (v45);
        }
      }
      else if (result)
      {
        uint64_t v58 = 4 * result;
        do
        {
          unsigned int v59 = *v43++;
          LOBYTE(v63) = -54;
          *(_DWORD *)((char *)&v63 + 1) = bswap32(v59);
          uint64_t result = std::ostream::write();
          v58 -= 4;
        }
        while (v58);
      }
      return result;
    case 12:
      uint64_t result = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v48 + 40))
      {
        *(void *)&long long v63 = v48 + 16;
        if (result)
        {
          uint64_t v49 = 8 * result;
          do
          {
            uint64_t result = (uint64_t)sub_215E06EE4((uint64_t)&v62, (uint64_t **)&v63, v47++);
            v49 -= 8;
          }
          while (v49);
        }
      }
      else if (result)
      {
        uint64_t v60 = 8 * result;
        do
        {
          unint64_t v61 = *v47++;
          LOBYTE(v63) = -53;
          *(void *)((char *)&v63 + 1) = bswap64(v61);
          uint64_t result = std::ostream::write();
          v60 -= 8;
        }
        while (v60);
      }
      return result;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159E6970(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v7 = &v4;
  sub_2159CE670();
}

void sub_2159E6BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159E6BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159E6BDC(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        return;
      }
      uint64_t v7 = v5;
      if (v5)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v7;
          sub_215DEB984(a3, (size_t *)&v35);
          v7 += 2;
          --v6;
        }
        while (v6);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v7;
        sub_215DEB984(a3, (size_t *)&v35);
        v7 += 2;
        if (!--v6) {
          return;
        }
      }
      goto LABEL_75;
    case 1:
      sub_215D160E4((unsigned __int8 **)(a2 + 16));
      uint64_t v9 = *(void *)(a2 + 8);
      if (!v9) {
        return;
      }
      uint64_t v10 = v8;
      if (v8)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v10;
          sub_215DECBA4(a3, (uint64_t)&v35);
          v10 += 4;
          --v9;
        }
        while (v9);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v10;
        sub_215DECBA4(a3, (uint64_t)&v35);
        v10 += 4;
        if (!--v9) {
          return;
        }
      }
      goto LABEL_75;
    case 2:
      sub_215D161EC((unsigned __int8 **)(a2 + 16));
      uint64_t v12 = *(void *)(a2 + 8);
      if (!v12) {
        return;
      }
      uint64_t v13 = v11;
      if (v11)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v13;
          sub_215DECE1C(a3, (uint64_t)&v35);
          v13 += 8;
          --v12;
        }
        while (v12);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v13;
        sub_215DECE1C(a3, (uint64_t)&v35);
        v13 += 8;
        if (!--v12) {
          return;
        }
      }
      goto LABEL_75;
    case 3:
      sub_215D162F4((unsigned __int8 **)(a2 + 16));
      uint64_t v15 = *(void *)(a2 + 8);
      if (!v15) {
        return;
      }
      uint64_t v16 = v14;
      if (v14)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v16;
          sub_215DED094(a3, (uint64_t)&v35);
          v16 += 16;
          --v15;
        }
        while (v15);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v16;
        sub_215DED094(a3, (uint64_t)&v35);
        v16 += 16;
        if (!--v15) {
          return;
        }
      }
      goto LABEL_75;
    case 5:
      sub_215D15F58((unsigned __int8 **)(a2 + 16));
      uint64_t v18 = *(void *)(a2 + 8);
      if (!v18) {
        return;
      }
      uint64_t v19 = v17;
      if (v17)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v19;
          sub_215DEC92C(a3, (size_t *)&v35);
          v19 += 2;
          --v18;
        }
        while (v18);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v19;
        sub_215DEC92C(a3, (size_t *)&v35);
        v19 += 2;
        if (!--v18) {
          return;
        }
      }
      goto LABEL_75;
    case 6:
      sub_215D16060((unsigned __int8 **)(a2 + 16));
      uint64_t v21 = *(void *)(a2 + 8);
      if (!v21) {
        return;
      }
      uint64_t v22 = v20;
      if (v20)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v22;
          sub_215DECA68(a3, (uint64_t)&v35);
          v22 += 4;
          --v21;
        }
        while (v21);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v22;
        sub_215DECA68(a3, (uint64_t)&v35);
        v22 += 4;
        if (!--v21) {
          return;
        }
      }
      goto LABEL_75;
    case 7:
      sub_215D16168((unsigned __int8 **)(a2 + 16));
      uint64_t v24 = *(void *)(a2 + 8);
      if (!v24) {
        return;
      }
      uint64_t v25 = v23;
      if (v23)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v25;
          sub_215DECCE0(a3, (uint64_t)&v35);
          v25 += 8;
          --v24;
        }
        while (v24);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v25;
        sub_215DECCE0(a3, (uint64_t)&v35);
        v25 += 8;
        if (!--v24) {
          return;
        }
      }
      goto LABEL_75;
    case 8:
      sub_215D16270((unsigned __int8 **)(a2 + 16));
      uint64_t v27 = *(void *)(a2 + 8);
      if (!v27) {
        return;
      }
      uint64_t v28 = v26;
      if (v26)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v28;
          sub_215DECF58(a3, (uint64_t)&v35);
          v28 += 16;
          --v27;
        }
        while (v27);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v28;
        sub_215DECF58(a3, (uint64_t)&v35);
        v28 += 16;
        if (!--v27) {
          return;
        }
      }
      goto LABEL_75;
    case 11:
      sub_215D16378((unsigned __int8 **)(a2 + 16));
      uint64_t v30 = *(void *)(a2 + 8);
      if (!v30) {
        return;
      }
      uint64_t v31 = v29;
      if (v29)
      {
        do
        {
          uint64_t v35 = 2;
          uint64_t v36 = v31;
          sub_215DED67C(a3, (float **)&v35);
          v31 += 8;
          --v30;
        }
        while (v30);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 2;
        uint64_t v36 = v31;
        sub_215DED67C(a3, (float **)&v35);
        v31 += 8;
        if (!--v30) {
          return;
        }
      }
      goto LABEL_75;
    case 12:
      sub_215D163FC((unsigned __int8 **)(a2 + 16));
      uint64_t v33 = *(void *)(a2 + 8);
      if (!v33) {
        return;
      }
      uint64_t v34 = v32;
      if (!v32)
      {
        while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          uint64_t v35 = 2;
          uint64_t v36 = v34;
          sub_215DEDAA0(a3, &v35);
          v34 += 16;
          if (!--v33) {
            return;
          }
        }
LABEL_75:
        abort();
      }
      do
      {
        uint64_t v35 = 2;
        uint64_t v36 = v34;
        sub_215DEDAA0(a3, &v35);
        v34 += 16;
        --v33;
      }
      while (v33);
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159E733C(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v9[0]) = v6;
  sub_215DF927C(a1, (unsigned __int8 *)v9);
  if (*(void *)(a1 + 40))
  {
    long long v4 = *(void **)(a1 + 24);
    LOBYTE(v9[0]) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)v9, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  long long v10 = xmmword_26425A6C8;
  v9[0] = &v6;
  v9[1] = a1;
  void v9[2] = &v10;
  sub_2159E7468(v6, v9);
  uint64_t v5 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2159E7454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159E7468(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      if (v3)
      {
        uint64_t v5 = v3;
        long long v6 = v4;
        uint64_t v7 = a2[1];
        do
        {
          sub_215DF927C(v7, v6++);
          --v5;
        }
        while (v5);
      }
      break;
    case 1:
      unint64_t v8 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      if (v8)
      {
        uint64_t v10 = v9;
        uint64_t v11 = a2[1];
        uint64_t v12 = *(void *)(v11 + 40);
        uint64_t v13 = 2 * v8;
        do
        {
          if (v12)
          {
            uint64_t v14 = *(void **)(v11 + 24);
            char v69 = *(unsigned char *)(v11 + 32);
            sub_215731D94(v14, (uint64_t)&v69, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          uint64_t v12 = *(void *)(v11 + 40) + 1;
          *(void *)(v11 + 40) = v12;
          v13 -= 2;
        }
        while (v13);
      }
      break;
    case 2:
      unint64_t v15 = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      if (v15)
      {
        uint64_t v17 = v16;
        uint64_t v18 = a2[1];
        uint64_t v19 = *(void *)(v18 + 40);
        uint64_t v20 = 4 * v15;
        do
        {
          if (v19)
          {
            uint64_t v21 = *(void **)(v18 + 24);
            char v70 = *(unsigned char *)(v18 + 32);
            sub_215731D94(v21, (uint64_t)&v70, 1);
          }
          v17 += 4;
          std::ostream::operator<<();
          uint64_t v19 = *(void *)(v18 + 40) + 1;
          *(void *)(v18 + 40) = v19;
          v20 -= 4;
        }
        while (v20);
      }
      break;
    case 3:
      unint64_t v22 = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      if (v22)
      {
        uint64_t v24 = v23;
        uint64_t v25 = a2[1];
        uint64_t v26 = *(void *)(v25 + 40);
        uint64_t v27 = 8 * v22;
        do
        {
          if (v26)
          {
            uint64_t v28 = *(void **)(v25 + 24);
            char v71 = *(unsigned char *)(v25 + 32);
            sub_215731D94(v28, (uint64_t)&v71, 1);
          }
          v24 += 8;
          std::ostream::operator<<();
          uint64_t v26 = *(void *)(v25 + 40) + 1;
          *(void *)(v25 + 40) = v26;
          v27 -= 8;
        }
        while (v27);
      }
      break;
    case 5:
      uint64_t v29 = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      if (v29)
      {
        uint64_t v31 = v29;
        uint64_t v32 = v30;
        uint64_t v33 = a2[1];
        do
        {
          sub_215DF9090(v33, v32++);
          --v31;
        }
        while (v31);
      }
      break;
    case 6:
      unint64_t v34 = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      if (v34)
      {
        uint64_t v36 = v35;
        uint64_t v37 = a2[1];
        uint64_t v38 = *(void *)(v37 + 40);
        uint64_t v39 = 2 * v34;
        do
        {
          if (v38)
          {
            uint64_t v40 = *(void **)(v37 + 24);
            char v72 = *(unsigned char *)(v37 + 32);
            sub_215731D94(v40, (uint64_t)&v72, 1);
          }
          v36 += 2;
          std::ostream::operator<<();
          uint64_t v38 = *(void *)(v37 + 40) + 1;
          *(void *)(v37 + 40) = v38;
          v39 -= 2;
        }
        while (v39);
      }
      break;
    case 7:
      unint64_t v41 = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      if (v41)
      {
        uint64_t v43 = v42;
        uint64_t v44 = a2[1];
        uint64_t v45 = *(void *)(v44 + 40);
        uint64_t v46 = 4 * v41;
        do
        {
          if (v45)
          {
            uint64_t v47 = *(void **)(v44 + 24);
            char v73 = *(unsigned char *)(v44 + 32);
            sub_215731D94(v47, (uint64_t)&v73, 1);
          }
          v43 += 4;
          std::ostream::operator<<();
          uint64_t v45 = *(void *)(v44 + 40) + 1;
          *(void *)(v44 + 40) = v45;
          v46 -= 4;
        }
        while (v46);
      }
      break;
    case 8:
      unint64_t v48 = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      if (v48)
      {
        uint64_t v50 = v49;
        uint64_t v51 = a2[1];
        uint64_t v52 = *(void *)(v51 + 40);
        uint64_t v53 = 8 * v48;
        do
        {
          if (v52)
          {
            int v54 = *(void **)(v51 + 24);
            char v74 = *(unsigned char *)(v51 + 32);
            sub_215731D94(v54, (uint64_t)&v74, 1);
          }
          v50 += 8;
          std::ostream::operator<<();
          uint64_t v52 = *(void *)(v51 + 40) + 1;
          *(void *)(v51 + 40) = v52;
          v53 -= 8;
        }
        while (v53);
      }
      break;
    case 11:
      unint64_t v55 = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      if (v55)
      {
        uint64_t v57 = v56;
        uint64_t v58 = a2[1];
        uint64_t v59 = *(void *)(v58 + 40);
        uint64_t v60 = 4 * v55;
        do
        {
          if (v59)
          {
            unint64_t v61 = *(void **)(v58 + 24);
            char v75 = *(unsigned char *)(v58 + 32);
            sub_215731D94(v61, (uint64_t)&v75, 1);
          }
          *(void *)(*(void *)(v58 + 24) + *(void *)(**(void **)(v58 + 24) - 24) + 16) = 9;
          v57 += 4;
          std::ostream::operator<<();
          uint64_t v59 = *(void *)(v58 + 40) + 1;
          *(void *)(v58 + 40) = v59;
          v60 -= 4;
        }
        while (v60);
      }
      break;
    case 12:
      unint64_t v62 = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      if (v62)
      {
        uint64_t v64 = v63;
        uint64_t v65 = a2[1];
        uint64_t v66 = *(void *)(v65 + 40);
        uint64_t v67 = 8 * v62;
        do
        {
          if (v66)
          {
            int32x2_t v68 = *(void **)(v65 + 24);
            char v76 = *(unsigned char *)(v65 + 32);
            sub_215731D94(v68, (uint64_t)&v76, 1);
          }
          *(void *)(*(void *)(v65 + 24) + *(void *)(**(void **)(v65 + 24) - 24) + 16) = 17;
          v64 += 8;
          std::ostream::operator<<();
          uint64_t v66 = *(void *)(v65 + 40) + 1;
          *(void *)(v65 + 40) = v66;
          v67 -= 8;
        }
        while (v67);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159E78EC(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(__src[0]) = v5;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&v5 + 8, (char *)&v6, 8);
  long long v9 = xmmword_26425A6C8;
  __src[0] = &v5;
  __src[1] = a1;
  __src[2] = &v9;
  sub_2159E7A1C(v5, __src);
  long long v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2159E7A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_2159E7A1C(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      int64_t v4 = v3;
      uint64_t v6 = v5;
      uint64_t v7 = a2[1];
      if (v5) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v3 == 0;
      }
      if (!v8) {
        goto LABEL_18;
      }
      goto LABEL_19;
    case 1:
      unint64_t v9 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      goto LABEL_23;
    case 2:
      unint64_t v11 = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      goto LABEL_32;
    case 3:
      unint64_t v13 = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      goto LABEL_39;
    case 5:
      uint64_t v15 = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      int64_t v4 = v15;
      uint64_t v6 = v16;
      uint64_t v7 = a2[1];
      if (v16) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v15 == 0;
      }
      if (v17) {
        goto LABEL_19;
      }
LABEL_18:
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_47;
      }
LABEL_19:
      uint64_t v18 = v7 + 24;
      uint64_t v19 = *(char **)(v7 + 32);
      uint64_t v20 = &v6[v4];
      uint64_t v21 = v6;
      int64_t v22 = v4;
      break;
    case 6:
      unint64_t v9 = sub_215D16060((unsigned __int8 **)(*a2 + 16));
LABEL_23:
      uint64_t v24 = v10;
      uint64_t v25 = a2[1];
      uint64_t v26 = 2 * v9;
      if (v10) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v26 == 0;
      }
      if (!v27) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 7:
      unint64_t v11 = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      goto LABEL_32;
    case 8:
      unint64_t v13 = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      goto LABEL_39;
    case 11:
      unint64_t v11 = sub_215D16378((unsigned __int8 **)(*a2 + 16));
LABEL_32:
      uint64_t v24 = v12;
      uint64_t v25 = a2[1];
      uint64_t v26 = 4 * v11;
      if (v12) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v26 == 0;
      }
      if (!v28) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 12:
      unint64_t v13 = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
LABEL_39:
      uint64_t v24 = v14;
      uint64_t v25 = a2[1];
      uint64_t v26 = 8 * v13;
      if (v14) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v26 == 0;
      }
      if (!v29)
      {
LABEL_43:
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
LABEL_47:
          abort();
        }
      }
LABEL_44:
      uint64_t v18 = v25 + 24;
      uint64_t v19 = *(char **)(v25 + 32);
      uint64_t v20 = &v24[v26];
      uint64_t v21 = v24;
      int64_t v22 = v26;
      break;
    default:
      sub_215E097D8(a1);
  }
  return sub_215D04A50(v18, v19, v21, v20, v22);
}

void sub_2159E7CA8(int *a1, unsigned char *a2, long long *a3)
{
  int v6 = 2;
  (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1
    || *a1 == 2 && (int v7 = 2, (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v7), *a1 <= 0))
  {
    sub_2159E7DEC(a2, a3);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    sub_2159E7DEC(a2, a3);
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

void sub_2159E7DEC(unsigned char *a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  int v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[0] = &v5;
  sub_2159D0EBC(a1, v8);
  (*(void (**)(unsigned char *, char *))(*(void *)a1 + 120))(a1, (char *)&v5 + 8);
  long long v9 = xmmword_26425A6C8;
  v8[0] = &v5;
  v8[1] = a1;
  void v8[2] = &v9;
  sub_2159E7F0C(v5, v8);
  int64_t v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2159E7EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159E7F0C(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v5 = result;
        uint64_t v6 = v4;
        uint64_t v7 = a2[1];
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 80))(v7, v6++);
          --v5;
        }
        while (v5);
      }
      break;
    case 1:
      uint64_t result = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v9 = v8;
        uint64_t v10 = a2[1];
        uint64_t v11 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 96))(v10, v9);
          v9 += 2;
          v11 -= 2;
        }
        while (v11);
      }
      break;
    case 2:
      uint64_t result = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v13 = v12;
        uint64_t v14 = a2[1];
        uint64_t v15 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 104))(v14, v13);
          v13 += 4;
          v15 -= 4;
        }
        while (v15);
      }
      break;
    case 3:
      uint64_t result = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v17 = v16;
        uint64_t v18 = a2[1];
        uint64_t v19 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 120))(v18, v17);
          v17 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      break;
    case 5:
      uint64_t result = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v21 = result;
        uint64_t v22 = v20;
        uint64_t v23 = a2[1];
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v23 + 88))(v23, v22++);
          --v21;
        }
        while (v21);
      }
      break;
    case 6:
      uint64_t result = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v25 = v24;
        uint64_t v26 = a2[1];
        uint64_t v27 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 48))(v26, v25);
          v25 += 2;
          v27 -= 2;
        }
        while (v27);
      }
      break;
    case 7:
      uint64_t result = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v29 = v28;
        uint64_t v30 = a2[1];
        uint64_t v31 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v30 + 56))(v30, v29);
          v29 += 4;
          v31 -= 4;
        }
        while (v31);
      }
      break;
    case 8:
      uint64_t result = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v33 = v32;
        uint64_t v34 = a2[1];
        uint64_t v35 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v34 + 72))(v34, v33);
          v33 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      break;
    case 11:
      uint64_t result = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v37 = v36;
        uint64_t v38 = a2[1];
        uint64_t v39 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v38 + 128))(v38, v37);
          v37 += 4;
          v39 -= 4;
        }
        while (v39);
      }
      break;
    case 12:
      uint64_t result = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v41 = v40;
        uint64_t v42 = a2[1];
        uint64_t v43 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 136))(v42, v41);
          v41 += 8;
          v43 -= 8;
        }
        while (v43);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

void sub_2159E8320(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "value_type";
    *(void *)(a1 + 96) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    uint64_t v4 = a2;
    sub_2159D177C((void *)a1);
  }
  sub_2159E8448();
}

void sub_2159E8448()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D17DD8();
}

void sub_2159E8648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E8664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159E8678(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159E87F8(v3);
      break;
    case 1:
      sub_2159E89FC(v3);
      break;
    case 2:
      sub_2159E8C0C(v3);
      break;
    case 3:
      sub_2159E8E20(v3);
      break;
    case 5:
      sub_2159E9078(v3);
      break;
    case 6:
      sub_2159E927C(v3);
      break;
    case 7:
      sub_2159E948C(v3);
      break;
    case 8:
      sub_2159E96A0(v3);
      break;
    case 11:
      sub_2159E98F8(v3);
      break;
    case 12:
      sub_2159E9B00(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159E87F8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    uint64_t v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v15 = &v4[v3];
    bzero(v4, 2 * v2);
    uint64_t v14 = v5;
  }
  if (v2)
  {
    uint64_t v6 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v16 = 2;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF0BCC(v8, (uint64_t)&v16);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2159E9D08(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159E89D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E89FC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(4 * v2);
    uint64_t v12 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    uint64_t v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2178(v5, (uint64_t)&v13);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159E8BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E8C0C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v12 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    uint64_t v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2328(v5, (uint64_t)&v13);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159E8DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E8E20(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF4844(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159E9FE4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159E9038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E9078(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 2 * v2);
    uint64_t v14 = v5;
  }
  if (v2)
  {
    uint64_t v6 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v7 = (void *)a1[1];
      *(void *)&long long v16 = 2;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF1F38(v8, (uint64_t)&v16);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2159EA0D8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159E9254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E927C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(4 * v2);
    uint64_t v12 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    uint64_t v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2058(v5, (uint64_t)&v13);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159E9464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E948C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v12 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    uint64_t v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2250(v5, (uint64_t)&v13);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159E9678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E96A0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF45EC(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159EA3B4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159E98B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E98F8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      sub_215DF262C(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159EA4A8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159E9AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159E9B00(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      sub_215DF2748(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159EA59C(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159E9CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159E9D08(_OWORD *a1, uint64_t a2)
{
  sub_215D1429C(&v6, 0, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159E9DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159E9DFC(_OWORD *a1, uint64_t a2)
{
  sub_215D14650(&v6, 1, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159E9E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159E9EF0(_OWORD *a1, uint64_t a2)
{
  sub_215D14A08(&v6, 2, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159E9F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159E9FE4(_OWORD *a1, uint64_t a2)
{
  sub_215D14DC0(&v6, 3, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159EA084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159EA0D8(_OWORD *a1, uint64_t a2)
{
  sub_215D140C4(&v6, 5, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159EA178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159EA1CC(_OWORD *a1, uint64_t a2)
{
  sub_215D14474(&v6, 6, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159EA26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159EA2C0(_OWORD *a1, uint64_t a2)
{
  sub_215D1482C(&v6, 7, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159EA360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159EA3B4(_OWORD *a1, uint64_t a2)
{
  sub_215D14BE4(&v6, 8, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159EA454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159EA4A8(_OWORD *a1, uint64_t a2)
{
  sub_215D14F9C(&v6, 11, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159EA548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159EA59C(_OWORD *a1, uint64_t a2)
{
  sub_215D15178(&v6, 12, a2);
  long long v5 = v6;
  sub_215D17C18((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159EA63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EA690(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159EA810(v3);
      break;
    case 1:
      sub_2159EAA14(v3);
      break;
    case 2:
      sub_2159EAC24(v3);
      break;
    case 3:
      sub_2159EAE38(v3);
      break;
    case 5:
      sub_2159EB090(v3);
      break;
    case 6:
      sub_2159EB294(v3);
      break;
    case 7:
      sub_2159EB4A4(v3);
      break;
    case 8:
      sub_2159EB6B8(v3);
      break;
    case 11:
      sub_2159EB910(v3);
      break;
    case 12:
      sub_2159EBB18(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159EA810(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    long long v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 2 * v2);
    uint64_t v14 = v5;
  }
  if (v2)
  {
    uint64_t v6 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v16 = 2;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF0BCC(v8, (uint64_t)&v16);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2159E9D08(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159EA9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EAA14(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(4 * v2);
    uint64_t v12 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2178(v5, (uint64_t)&v13);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159EABFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EAC24(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v12 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2328(v5, (uint64_t)&v13);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159EAE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EAE38(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF4844(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159E9FE4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EB050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EB090(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 2 * v2);
    uint64_t v14 = v5;
  }
  if (v2)
  {
    uint64_t v6 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v7 = (void *)a1[1];
      *(void *)&long long v16 = 2;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF1F38(v8, (uint64_t)&v16);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2159EA0D8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159EB26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EB294(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(4 * v2);
    uint64_t v12 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2058(v5, (uint64_t)&v13);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159EB47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EB4A4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v12 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2250(v5, (uint64_t)&v13);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159EB690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EB6B8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF45EC(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159EA3B4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EB8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EB910(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      sub_215DF262C(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159EA4A8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EBAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EBB18(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      sub_215DF2748(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159EA59C(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EBCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159EBD20(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (a4 < 2) {
    sub_2159EBE48();
  }
  unint64_t v6 = a2 + 2;
  sub_2159B0060(a2 + 2);
  LOBYTE(v11[0]) = 0;
  sub_215DFF4BC(a2[6], v11);
  *a3 = v11[0];
  sub_215DFFC24(a2[6], (void *)a3 + 1);
  long long v12 = xmmword_26425A6C8;
  int v7 = *a3;
  v11[0] = a3;
  v11[1] = a2;
  void v11[2] = &v12;
  sub_2159EBFF8(v7, v11);
  uint64_t v8 = a2[4];
  uint64_t result = (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2);
  uint64_t v10 = *(void *)(v8 - 16) - result + *(void *)(v8 - 8);
  if (v10) {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v10);
  }
  a2[4] -= 16;
  return result;
}

void sub_2159EBE48()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D17DD8();
}

void sub_2159EBFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EBFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159EBFF8(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_2159EC0D4(a2);
      break;
    case 1:
      sub_2159EC26C(a2);
      break;
    case 2:
      sub_2159EC414(a2);
      break;
    case 3:
      sub_2159EC5C0(a2);
      break;
    case 5:
      sub_2159EC76C(a2);
      break;
    case 6:
      sub_2159EC904(a2);
      break;
    case 7:
      sub_2159ECAAC(a2);
      break;
    case 8:
      sub_2159ECC58(a2);
      break;
    case 11:
      sub_2159ECE04(a2);
      break;
    case 12:
      sub_2159ECFB0(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159EC0D4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF4BC(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159E9D08(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EC248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EC26C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    size_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF670(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159EC3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EC414(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF824(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159EC59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EC5C0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFC24(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159E9FE4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159EC748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EC76C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF408(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159EA0D8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EC8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EC904(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    size_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF5BC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159ECA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ECAAC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF770(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159ECC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ECC58(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFB20(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA3B4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159ECDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ECE04(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFFD1C(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA4A8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159ECF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ECFB0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFE68(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA59C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159ED138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ED15C(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_2159ED238(a2);
      break;
    case 1:
      sub_2159ED3D0(a2);
      break;
    case 2:
      sub_2159ED578(a2);
      break;
    case 3:
      sub_2159ED724(a2);
      break;
    case 5:
      sub_2159ED8D0(a2);
      break;
    case 6:
      sub_2159EDA68(a2);
      break;
    case 7:
      sub_2159EDC10(a2);
      break;
    case 8:
      sub_2159EDDBC(a2);
      break;
    case 11:
      sub_2159EDF68(a2);
      break;
    case 12:
      sub_2159EE114(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159ED238(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF4BC(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159E9D08(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159ED3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ED3D0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    size_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF670(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159ED554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ED578(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF824(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159ED700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ED724(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFC24(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159E9FE4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159ED8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159ED8D0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF408(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159EA0D8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EDA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EDA68(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    size_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF5BC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159EDBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EDC10(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF770(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159EDD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EDDBC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFB20(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA3B4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159EDF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EDF68(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFFD1C(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA4A8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159EE0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EE114(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFE68(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA59C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159EE29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EE2C0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "value_type";
    *(void *)(a1 + 96) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    uint64_t v4 = a2;
    sub_2159D2DC4((void *)a1);
  }
  sub_2159EE3E8();
}

void sub_2159EE3E8()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D17DD8();
}

void sub_2159EE5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EE604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159EE618(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159EE798(v3);
      break;
    case 1:
      sub_2159EE99C(v3);
      break;
    case 2:
      sub_2159EEBAC(v3);
      break;
    case 3:
      sub_2159EEDC0(v3);
      break;
    case 5:
      sub_2159EF018(v3);
      break;
    case 6:
      sub_2159EF21C(v3);
      break;
    case 7:
      sub_2159EF42C(v3);
      break;
    case 8:
      sub_2159EF640(v3);
      break;
    case 11:
      sub_2159EF898(v3);
      break;
    case 12:
      sub_2159EFAA0(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159EE798(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    size_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 2 * v2);
    uint64_t v14 = v5;
  }
  if (v2)
  {
    uint64_t v6 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v16 = 2;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF0588(v8, (uint64_t)&v16);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2159E9D08(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159EE974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EE99C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(4 * v2);
    long long v12 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1274(v5, (uint64_t)&v13);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159EEB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EEBAC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    long long v12 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1424(v5, (uint64_t)&v13);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159EED98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EEDC0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF331C(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159E9FE4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EEFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EF018(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 2 * v2);
    uint64_t v14 = v5;
  }
  if (v2)
  {
    uint64_t v6 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v7 = (void *)a1[1];
      *(void *)&long long v16 = 2;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1034(v8, (uint64_t)&v16);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2159EA0D8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159EF1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EF21C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(4 * v2);
    long long v12 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1154(v5, (uint64_t)&v13);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159EF404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EF42C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    long long v12 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF134C(v5, (uint64_t)&v13);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159EF618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EF640(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF2D20(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159EA3B4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EF858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EF898(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      sub_215DF1750(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159EA4A8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EFA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EFAA0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      sub_215DF1894(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159EA59C(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159EFC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159EFCA8(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159EFE28(v3);
      break;
    case 1:
      sub_2159F002C(v3);
      break;
    case 2:
      sub_2159F023C(v3);
      break;
    case 3:
      sub_2159F0450(v3);
      break;
    case 5:
      sub_2159F06A8(v3);
      break;
    case 6:
      sub_2159F08AC(v3);
      break;
    case 7:
      sub_2159F0ABC(v3);
      break;
    case 8:
      sub_2159F0CD0(v3);
      break;
    case 11:
      sub_2159F0F28(v3);
      break;
    case 12:
      sub_2159F1130(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159EFE28(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 2 * v2);
    uint64_t v14 = v5;
  }
  if (v2)
  {
    uint64_t v6 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v16 = 2;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF0588(v8, (uint64_t)&v16);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2159E9D08(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159F0004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F002C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(4 * v2);
    long long v12 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1274(v5, (uint64_t)&v13);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159F0214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F023C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    long long v12 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1424(v5, (uint64_t)&v13);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159F0428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F0450(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF331C(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159E9FE4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159F0668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F06A8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 2 * v2);
    uint64_t v14 = v5;
  }
  if (v2)
  {
    uint64_t v6 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v7 = (void *)a1[1];
      *(void *)&long long v16 = 2;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1034(v8, (uint64_t)&v16);
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  sub_2159EA0D8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159F0884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F08AC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (2 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(4 * v2);
    long long v12 = (char *)__p + 4 * v2;
    bzero(__p, 4 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1154(v5, (uint64_t)&v13);
      v3 += 4;
      --v2;
    }
    while (v2);
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159F0A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F0ABC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    long long v12 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v11 = v12;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 2;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF134C(v5, (uint64_t)&v13);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159F0CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F0CD0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF2D20(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159EA3B4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159F0EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F0F28(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(8 * v2);
    uint64_t v14 = (char *)__p + 8 * v2;
    bzero(__p, 8 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      sub_215DF1750(v6, (float *)&v4[v3]);
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  sub_2159EA4A8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159F1108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F1130(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((unint64_t)(2 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(16 * v2);
    uint64_t v14 = (char *)__p + 16 * v2;
    bzero(__p, 16 * v2);
    long long v13 = v14;
  }
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      sub_215DF1894(v6, (double *)&v4[v3]);
      v3 += 16;
      --v2;
    }
    while (v2);
  }
  sub_2159EA59C(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159F1310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F1338(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  LODWORD(__p) = 2;
  sub_215DFABD4(a2, &__p);
  unsigned int v5 = __p;
  if (__p >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = __p;
  }
  if (v6 < 2) {
    sub_2159F14B4();
  }
  LOBYTE(__p) = 0;
  sub_215DFA01C(a2, &__p);
  *a3 = __p;
  sub_215DFB854(a2, (void *)a3 + 1);
  long long v10 = xmmword_26425A6C8;
  int v7 = *a3;
  std::string __p = a3;
  uint64_t v12 = a2;
  long long v13 = &v10;
  sub_2159F1664(v7, &__p);
  if (v5 >= 2 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (SHIBYTE(v13) < 0)
      {
        if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_21:
          char v9 = 0;
          if (SHIBYTE(v13) < 0) {
            goto LABEL_24;
          }
          goto LABEL_10;
        }
      }
      else if (SHIBYTE(v13) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_21;
      }
      char v9 = 1;
      if (SHIBYTE(v13) < 0) {
LABEL_24:
      }
        operator delete(__p);
LABEL_10:
      if (*(unsigned char *)(a2 + 131)) {
        char v8 = 0;
      }
      else {
        char v8 = v9;
      }
    }
    while ((v8 & 1) != 0);
  }
}

void sub_2159F14B4()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D17DD8();
}

void sub_2159F1634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F1650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159F1664(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_2159F1740(a2);
      break;
    case 1:
      sub_2159F18D4(a2);
      break;
    case 2:
      sub_2159F1A78(a2);
      break;
    case 3:
      sub_2159F1C20(a2);
      break;
    case 5:
      sub_2159F1DC8(a2);
      break;
    case 6:
      sub_2159F1F5C(a2);
      break;
    case 7:
      sub_2159F2100(a2);
      break;
    case 8:
      sub_2159F22A8(a2);
      break;
    case 11:
      sub_2159F2450(a2);
      break;
    case 12:
      sub_2159F25F8(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159F1740(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DFA01C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159E9D08(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  char v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159F18B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F18D4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    size_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA594(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F1A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F1A78(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFABD4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F1BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F1C20(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB854(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159E9FE4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F1DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F1DC8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DF9DC4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159EA0D8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159F1F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F1F5C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    size_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA274(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F20DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F2100(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFA8B4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F2284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F22A8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB534(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA3B4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F242C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F2450(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFBEC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA4A8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F25D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F25F8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFC1E8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA59C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F277C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F27A0(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_2159F287C(a2);
      break;
    case 1:
      sub_2159F2A10(a2);
      break;
    case 2:
      sub_2159F2BB4(a2);
      break;
    case 3:
      sub_2159F2D5C(a2);
      break;
    case 5:
      sub_2159F2F04(a2);
      break;
    case 6:
      sub_2159F3098(a2);
      break;
    case 7:
      sub_2159F323C(a2);
      break;
    case 8:
      sub_2159F33E4(a2);
      break;
    case 11:
      sub_2159F358C(a2);
      break;
    case 12:
      sub_2159F3734(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159F287C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DFA01C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159E9D08(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159F29EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F2A10(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    size_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA594(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F2B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F2BB4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFABD4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F2D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F2D5C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB854(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159E9FE4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F2EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F2F04(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(2 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DF9DC4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159EA0D8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159F3074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F3098(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    size_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA274(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F3218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F323C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFA8B4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F33C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F33E4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB534(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA3B4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F3568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F358C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    size_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFBEC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA4A8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F3710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F3734(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    size_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFC1E8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA59C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F38B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F38DC(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1) {
    sub_2159F39DC();
  }
  sub_215D02644(a2);
  sub_2159F3B58(a2, a3);
  uint64_t v10 = a2[12];
  uint64_t v11 = a2[9];
  a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
}

void sub_2159F39C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159F39DC()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D17DD8();
}

void sub_2159F3B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159F3B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F3B58(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  if (v3 <= v2) {
    goto LABEL_6;
  }
  uint64_t v4 = a1[3];
  int v5 = *(unsigned __int8 *)(v4 + v2);
  unint64_t v6 = v2 + 1;
  a1[6] = v6;
  *(unsigned char *)a2 = v5;
  BOOL v7 = v3 >= v6;
  unint64_t v8 = v3 - v6;
  if (!v7) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7)
  {
LABEL_6:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 8) = *(void *)(v4 + v6);
  a1[6] += 8;
  long long v11 = xmmword_26425A6C8;
  v10[0] = a2;
  v10[1] = a1;
  void v10[2] = &v11;
  sub_2159F3C64(v5, v10);
}

void sub_2159F3C3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159F3C50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159F3C64(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_2159F3D40(a2);
      break;
    case 1:
      sub_2159F3F4C(a2);
      break;
    case 2:
      sub_2159F4160(a2);
      break;
    case 3:
      sub_2159F4378(a2);
      break;
    case 5:
      sub_2159F4590(a2);
      break;
    case 6:
      sub_2159F479C(a2);
      break;
    case 7:
      sub_2159F49B0(a2);
      break;
    case 8:
      sub_2159F4BC8(a2);
      break;
    case 11:
      sub_2159F4DE0(a2);
      break;
    case 12:
      sub_2159F4FF8(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159F3D40(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    uint64_t v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    uint64_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159E9D08(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F3F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F3F4C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 4 * v2;
    int v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[2 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159E9DFC(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F412C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F4160(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 8 * v2;
    int v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159E9EF0(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F4344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F4378(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 16 * v2;
    int v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159E9FE4(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F455C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F4590(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v4 = (char *)operator new(2 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    uint64_t v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    size_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  size_t v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159EA0D8(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  long long v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F4768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F479C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 4 * v2;
    int v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[2 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA1CC(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F497C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F49B0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 8 * v2;
    int v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA2C0(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F4B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F4BC8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 16 * v2;
    int v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA3B4(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F4DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F4DE0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 8 * v2;
    int v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA4A8(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F4FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F4FF8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 16 * v2;
    int v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA59C(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F51DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F5210(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  if (v3 <= v2) {
    goto LABEL_6;
  }
  uint64_t v4 = a1[3];
  int v5 = *(unsigned __int8 *)(v4 + v2);
  unint64_t v6 = v2 + 1;
  a1[6] = v6;
  *(unsigned char *)a2 = v5;
  BOOL v7 = v3 >= v6;
  unint64_t v8 = v3 - v6;
  if (!v7) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7)
  {
LABEL_6:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 8) = *(void *)(v4 + v6);
  a1[6] += 8;
  long long v11 = xmmword_26425A6C8;
  v10[0] = a2;
  v10[1] = a1;
  void v10[2] = &v11;
  sub_2159F531C(v5, v10);
}

void sub_2159F52F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159F5308(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2159F531C(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_2159F53F8(a2);
      break;
    case 1:
      sub_2159F5604(a2);
      break;
    case 2:
      sub_2159F5818(a2);
      break;
    case 3:
      sub_2159F5A30(a2);
      break;
    case 5:
      sub_2159F5C48(a2);
      break;
    case 6:
      sub_2159F5E54(a2);
      break;
    case 7:
      sub_2159F6068(a2);
      break;
    case 8:
      sub_2159F6280(a2);
      break;
    case 11:
      sub_2159F6498(a2);
      break;
    case 12:
      sub_2159F66B0(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159F53F8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    uint64_t v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    uint64_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159E9D08(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  long long v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F55D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F5604(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 4 * v2;
    int v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[2 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159E9DFC(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F57E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F5818(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 8 * v2;
    int v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159E9EF0(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F59FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F5A30(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 16 * v2;
    int v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159E9FE4(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F5C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F5C48(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    size_t v4 = (char *)operator new(2 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    uint64_t v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    size_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  size_t v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159EA0D8(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  long long v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F5E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F5E54(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 4 * v2;
    int v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[2 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA1CC(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F6034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F6068(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 8 * v2;
    int v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA2C0(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F624C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F6280(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 16 * v2;
    int v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA3B4(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F6464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F6498(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 8 * v2;
    int v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[4 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA4A8(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F667C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F66B0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 16 * v2;
    int v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v21 = &v5[8 * v3];
    bzero(v5, v4);
    size_t v6 = &v5[v4];
    uint64_t v20 = &v5[v4];
  }
  else
  {
    size_t v6 = 0;
    int v5 = 0;
  }
  size_t v7 = v6 - v5;
  unint64_t v8 = (void *)a1[1];
  unint64_t v9 = v8[6];
  unint64_t v10 = v8[7];
  BOOL v11 = v10 >= v9;
  size_t v12 = v10 - v9;
  if (!v11) {
    size_t v12 = 0;
  }
  if (v12 < v7)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v8[3] + v9), v7);
  v8[6] += v7;
  sub_2159EA59C(&v18, (uint64_t)&__p);
  uint64_t v13 = *a1;
  long long v14 = v18;
  long long v18 = 0uLL;
  long long v15 = *(std::__shared_weak_count **)(v13 + 24);
  *(_OWORD *)(v13 + 16) = v14;
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)&v18 + 1);
  if (*((void *)&v18 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v18 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  if (__p)
  {
    uint64_t v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F6894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F68C8(int *a1, unsigned char *a2, unsigned char *a3)
{
  LODWORD(v7[0]) = 2;
  (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, v7);
  if (*a1 < 1)
  {
    if (LODWORD(v7[0]) < 2) {
      sub_2159F6FA4();
    }
    v7[0] = a3;
    sub_2159D5570(a2, v7);
    (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 120))(a2, a3 + 8);
    long long v8 = xmmword_26425A6C8;
    int v6 = *a3;
    v7[0] = a3;
    v7[1] = a2;
    v7[2] = &v8;
    sub_2159F7170(v6, v7);
  }
  else
  {
    sub_2159F69F8(a1, a2, a3, v7[0]);
  }
}

void sub_2159F69F8(int *a1, unsigned char *a2, unsigned char *a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    LODWORD(v14[0]) = 2;
    (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, v14);
    if (LODWORD(v14[0]) >= 3)
    {
      unsigned int v12 = v14[0];
      uint64_t v13 = sub_2159F6BB0();
      sub_215E07C10((std::string *)v13, v12, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    int v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 < 2) {
    sub_2159F6FA4();
  }
  int v9 = 0;
LABEL_13:
  v14[0] = a3;
  sub_2159D5570(a2, v14);
  (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 120))(a2, a3 + 8);
  long long v15 = xmmword_26425A6C8;
  int v11 = *a3;
  v14[0] = a3;
  v14[1] = a2;
  v14[2] = &v15;
  sub_2159F7170(v11, v14);
  if (v9) {
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

long long *sub_2159F6BB0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888F40, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888F40))
  {
    return &xmmword_267888F28;
  }
  uint64_t v1 = sub_2159F6C98();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267888F28, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267888F38 = v1->__r_.__value_.__r.__words[2];
    xmmword_267888F28 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888F28, &dword_21572C000);
  __cxa_guard_release(&qword_267888F40);
  return &xmmword_267888F28;
}

void sub_2159F6C80(_Unwind_Exception *a1)
{
}

std::string *sub_2159F6C98()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888F60, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888F60))
  {
    return &stru_267888F48;
  }
  sub_2159F6D94((uint64_t)__p);
  sub_2157E7638(__p, &stru_267888F48);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888F48, &dword_21572C000);
  __cxa_guard_release(&qword_267888F60);
  return &stru_267888F48;
}

void sub_2159F6D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267888F60);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267888F60);
  _Unwind_Resume(a1);
}

void sub_2159F6D94(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888F80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888F80))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::PointsSample<2>]", qword_267888F68);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888F68, &dword_21572C000);
    __cxa_guard_release(&qword_267888F80);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888FA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888FA0))
  {
    size_t v3 = sub_215747D98(qword_267888F68, "<", 0);
    sub_215747C90(qword_267888F68, 0, v3, qword_267888F88);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267888F88, &dword_21572C000);
    __cxa_guard_release(&qword_267888FA0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888FC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267888FC0))
  {
    sub_215E19DF4((uint64_t)qword_267888F88, (uint64_t)&xmmword_267888FA8);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888FA8, &dword_21572C000);
    __cxa_guard_release(&qword_267888FC0);
  }
  if (byte_267888FBF < 0)
  {
    long long v2 = xmmword_267888FA8;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267888FA8;
    *(void *)(a1 + 16) = unk_267888FB8;
  }
}

void sub_2159F6F5C(_Unwind_Exception *a1)
{
}

void sub_2159F6F74(_Unwind_Exception *a1)
{
}

void sub_2159F6F8C(_Unwind_Exception *a1)
{
}

void sub_2159F6FA4()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D17DD8();
}

void sub_2159F7140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F715C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159F7170(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_2159F724C(a2);
      break;
    case 1:
      sub_2159F73E4(a2);
      break;
    case 2:
      sub_2159F7590(a2);
      break;
    case 3:
      sub_2159F7740(a2);
      break;
    case 5:
      sub_2159F78F0(a2);
      break;
    case 6:
      sub_2159F7A88(a2);
      break;
    case 7:
      sub_2159F7C34(a2);
      break;
    case 8:
      sub_2159F7DE4(a2);
      break;
    case 11:
      sub_2159F7F94(a2);
      break;
    case 12:
      sub_2159F8144(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159F724C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    uint64_t v13 = &v4[v3];
    bzero(v4, v3);
    unsigned int v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2159E9D08(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  long long v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    unsigned int v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F73C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F73E4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    uint64_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F756C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F7590(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    uint64_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F771C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F7740(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    uint64_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159E9FE4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F78CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F78F0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  unsigned int v12 = 0;
  long long v13 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    long long v13 = &v4[v3];
    bzero(v4, v3);
    unsigned int v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2159EA0D8(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    unsigned int v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F7A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F7A88(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    uint64_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F7C10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F7C34(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    uint64_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F7DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F7DE4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    uint64_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA3B4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F7F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F7F94(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    uint64_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA4A8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F8120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F8144(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    uint64_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA59C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F82D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F82F4(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_2159F83D0(a2);
      break;
    case 1:
      sub_2159F8568(a2);
      break;
    case 2:
      sub_2159F8714(a2);
      break;
    case 3:
      sub_2159F88C4(a2);
      break;
    case 5:
      sub_2159F8A74(a2);
      break;
    case 6:
      sub_2159F8C0C(a2);
      break;
    case 7:
      sub_2159F8DB8(a2);
      break;
    case 8:
      sub_2159F8F68(a2);
      break;
    case 11:
      sub_2159F9118(a2);
      break;
    case 12:
      sub_2159F92C8(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159F83D0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  unsigned int v12 = 0;
  long long v13 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157C3CEC();
    }
    int64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    long long v13 = &v4[v3];
    bzero(v4, v3);
    unsigned int v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2159E9D08(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    unsigned int v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F8544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F8568(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    uint64_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159E9DFC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F86F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F8714(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    uint64_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159E9EF0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F88A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F88C4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    uint64_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159E9FE4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F8A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F8A74(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  size_t v3 = 2 * v2;
  unsigned int v12 = 0;
  long long v13 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      sub_2157E81A4();
    }
    int64_t v4 = (char *)operator new(2 * v2);
    std::string __p = v4;
    long long v13 = &v4[v3];
    bzero(v4, v3);
    unsigned int v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2159EA0D8(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    unsigned int v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F8BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F8C0C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 4 * v2;
    uint64_t v5 = (char *)operator new(4 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159EA1CC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F8D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F8DB8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    uint64_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA2C0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F8F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F8F68(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    uint64_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA3B4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F90F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F9118(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 8 * v2;
    uint64_t v5 = (char *)operator new(8 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159EA4A8(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F92A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F92C8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unint64_t v3 = 2 * v2;
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (2 * v2)
  {
    if (v3 >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 16 * v2;
    uint64_t v5 = (char *)operator new(16 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159EA59C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2159F9454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159F9478()
{
}

void sub_2159F9654(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2159F9688(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v7 = &v4;
  sub_2159CC60C();
}

void sub_2159F98C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CEB204(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159F98E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159F98F4(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        return;
      }
      uint64_t v7 = v5;
      if (v5)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v7;
          sub_215DEC208(a3, (size_t *)&v35);
          v7 += 3;
          --v6;
        }
        while (v6);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v7;
        sub_215DEC208(a3, (size_t *)&v35);
        v7 += 3;
        if (!--v6) {
          return;
        }
      }
      goto LABEL_75;
    case 1:
      sub_215D160E4((unsigned __int8 **)(a2 + 16));
      uint64_t v9 = *(void *)(a2 + 8);
      if (!v9) {
        return;
      }
      uint64_t v10 = v8;
      if (v8)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v10;
          sub_215DEEA00(a3, (uint64_t)&v35);
          v10 += 6;
          --v9;
        }
        while (v9);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v10;
        sub_215DEEA00(a3, (uint64_t)&v35);
        v10 += 6;
        if (!--v9) {
          return;
        }
      }
      goto LABEL_75;
    case 2:
      sub_215D161EC((unsigned __int8 **)(a2 + 16));
      uint64_t v12 = *(void *)(a2 + 8);
      if (!v12) {
        return;
      }
      uint64_t v13 = v11;
      if (v11)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v13;
          sub_215DEEC78(a3, (uint64_t)&v35);
          v13 += 12;
          --v12;
        }
        while (v12);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v13;
        sub_215DEEC78(a3, (uint64_t)&v35);
        v13 += 12;
        if (!--v12) {
          return;
        }
      }
      goto LABEL_75;
    case 3:
      sub_215D162F4((unsigned __int8 **)(a2 + 16));
      uint64_t v15 = *(void *)(a2 + 8);
      if (!v15) {
        return;
      }
      uint64_t v16 = v14;
      if (v14)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v16;
          sub_215DEF168(a3, (uint64_t)&v35);
          v16 += 24;
          --v15;
        }
        while (v15);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v16;
        sub_215DEF168(a3, (uint64_t)&v35);
        v16 += 24;
        if (!--v15) {
          return;
        }
      }
      goto LABEL_75;
    case 5:
      sub_215D15F58((unsigned __int8 **)(a2 + 16));
      uint64_t v18 = *(void *)(a2 + 8);
      if (!v18) {
        return;
      }
      uint64_t v19 = v17;
      if (v17)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v19;
          sub_215DEE788(a3, (size_t *)&v35);
          v19 += 3;
          --v18;
        }
        while (v18);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v19;
        sub_215DEE788(a3, (size_t *)&v35);
        v19 += 3;
        if (!--v18) {
          return;
        }
      }
      goto LABEL_75;
    case 6:
      sub_215D16060((unsigned __int8 **)(a2 + 16));
      uint64_t v21 = *(void *)(a2 + 8);
      if (!v21) {
        return;
      }
      uint64_t v22 = v20;
      if (v20)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v22;
          sub_215DEE8C4(a3, (uint64_t)&v35);
          v22 += 6;
          --v21;
        }
        while (v21);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v22;
        sub_215DEE8C4(a3, (uint64_t)&v35);
        v22 += 6;
        if (!--v21) {
          return;
        }
      }
      goto LABEL_75;
    case 7:
      sub_215D16168((unsigned __int8 **)(a2 + 16));
      uint64_t v24 = *(void *)(a2 + 8);
      if (!v24) {
        return;
      }
      uint64_t v25 = v23;
      if (v23)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v25;
          sub_215DEEB3C(a3, (uint64_t)&v35);
          v25 += 12;
          --v24;
        }
        while (v24);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v25;
        sub_215DEEB3C(a3, (uint64_t)&v35);
        v25 += 12;
        if (!--v24) {
          return;
        }
      }
      goto LABEL_75;
    case 8:
      sub_215D16270((unsigned __int8 **)(a2 + 16));
      uint64_t v27 = *(void *)(a2 + 8);
      if (!v27) {
        return;
      }
      uint64_t v28 = v26;
      if (v26)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v28;
          sub_215DEF02C(a3, (uint64_t)&v35);
          v28 += 24;
          --v27;
        }
        while (v27);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v28;
        sub_215DEF02C(a3, (uint64_t)&v35);
        v28 += 24;
        if (!--v27) {
          return;
        }
      }
      goto LABEL_75;
    case 11:
      sub_215D16378((unsigned __int8 **)(a2 + 16));
      uint64_t v30 = *(void *)(a2 + 8);
      if (!v30) {
        return;
      }
      uint64_t v31 = v29;
      if (v29)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v31;
          sub_215DEF750(a3, (float **)&v35);
          v31 += 12;
          --v30;
        }
        while (v30);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v31;
        sub_215DEF750(a3, (float **)&v35);
        v31 += 12;
        if (!--v30) {
          return;
        }
      }
      goto LABEL_75;
    case 12:
      sub_215D163FC((unsigned __int8 **)(a2 + 16));
      uint64_t v33 = *(void *)(a2 + 8);
      if (!v33) {
        return;
      }
      uint64_t v34 = v32;
      if (!v32)
      {
        while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          uint64_t v35 = 3;
          uint64_t v36 = v34;
          sub_215DEFB74(a3, &v35);
          v34 += 24;
          if (!--v33) {
            return;
          }
        }
LABEL_75:
        abort();
      }
      do
      {
        uint64_t v35 = 3;
        uint64_t v36 = v34;
        sub_215DEFB74(a3, &v35);
        v34 += 24;
        --v33;
      }
      while (v33);
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159FA054(uint64_t *a1, long long *a2)
{
  long long v7 = *a2;
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 2);
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1[3];
  if (*(unsigned char *)(v4 + 40))
  {
    v10[0] = (uint64_t *)(v4 + 16);
    sub_215E053CC(v10, v7);
  }
  else
  {
    if ((char)v7 < 0)
    {
      LOBYTE(v10[0]) = -52;
      BYTE1(v10[0]) = v7;
    }
    else
    {
      LOBYTE(v10[0]) = v7;
    }
    std::ostream::write();
  }
  uint64_t v5 = a1[3];
  if (*(unsigned char *)(v5 + 40))
  {
    v10[0] = (uint64_t *)(v5 + 16);
    sub_215E069EC(v10, *((unint64_t *)&v7 + 1));
  }
  else
  {
    sub_215E06D00();
  }
  long long v11 = xmmword_26425A6D8;
  v10[0] = (uint64_t *)&v7;
  v10[1] = a1;
  void v10[2] = (uint64_t *)&v11;
  sub_2159FA1C4(v7, v10);
  uint64_t v6 = v9;
  if (v9)
  {
    if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_2159FA1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159FA1C4(int a1, void *a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  switch(a1)
  {
    case 0:
      uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      uint64_t v4 = result;
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v7 + 40))
      {
        *(void *)&long long v63 = v7 + 16;
        if (result)
        {
          do
          {
            char v8 = *v6++;
            uint64_t result = (uint64_t)sub_215E053CC((uint64_t **)&v63, v8);
            --v4;
          }
          while (v4);
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        do
        {
          while (1)
          {
            int v50 = *v6;
            if ((v50 & 0x80000000) == 0) {
              break;
            }
            LOBYTE(v63) = -52;
            BYTE1(v63) = v50;
            uint64_t result = std::ostream::write();
            ++v6;
            if (!--v4) {
              return result;
            }
          }
          LOBYTE(v63) = *v6;
          uint64_t result = std::ostream::write();
          ++v6;
          --v4;
        }
        while (v4);
      }
      return result;
    case 1:
      unint64_t v9 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      uint64_t v10 = a2[1];
      *(void *)&long long v63 = v9;
      *((void *)&v63 + 1) = v11;
      return sub_215DFF1B4(*(void *)(v10 + 24), &v63);
    case 2:
      uint64_t result = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v14 + 40))
      {
        *(void *)&long long v63 = v14 + 16;
        if (result)
        {
          uint64_t v15 = 4 * result;
          do
          {
            unsigned int v16 = *v13++;
            uint64_t result = (uint64_t)sub_215E05FEC((uint64_t **)&v63, v16);
            v15 -= 4;
          }
          while (v15);
        }
      }
      else if (result)
      {
        uint64_t v51 = v14 + 8;
        uint64_t v52 = 4 * result;
        do
        {
          ++v13;
          uint64_t result = sub_215E0626C((uint64_t)&v63, v51);
          v52 -= 4;
        }
        while (v52);
      }
      return result;
    case 3:
      uint64_t result = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v19 + 40))
      {
        *(void *)&long long v63 = v19 + 16;
        if (result)
        {
          uint64_t v20 = 8 * result;
          do
          {
            unint64_t v21 = *v18++;
            uint64_t result = (uint64_t)sub_215E069EC((uint64_t **)&v63, v21);
            v20 -= 8;
          }
          while (v20);
        }
      }
      else if (result)
      {
        uint64_t v53 = 8 * result;
        do
        {
          ++v18;
          uint64_t result = sub_215E06D00();
          v53 -= 8;
        }
        while (v53);
      }
      return result;
    case 5:
      uint64_t result = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      uint64_t v22 = result;
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v25 + 40))
      {
        *(void *)&long long v63 = v25 + 16;
        if (result)
        {
          do
          {
            int v26 = (char)*v24++;
            uint64_t result = (uint64_t)sub_215E05278((uint64_t **)&v63, v26);
            --v22;
          }
          while (v22);
        }
      }
      else
      {
        if (!result) {
          return result;
        }
        do
        {
          while (1)
          {
            int v54 = (char)*v24;
            if (v54 <= -33) {
              break;
            }
            LOBYTE(v63) = *v24;
            uint64_t result = std::ostream::write();
            ++v24;
            if (!--v22) {
              return result;
            }
          }
          LOBYTE(v63) = -48;
          BYTE1(v63) = v54;
          uint64_t result = std::ostream::write();
          ++v24;
          --v22;
        }
        while (v22);
      }
      return result;
    case 6:
      uint64_t result = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v29 + 40))
      {
        *(void *)&long long v63 = v29 + 16;
        if (result)
        {
          uint64_t v30 = 2 * result;
          do
          {
            signed int v31 = *v28++;
            uint64_t result = (uint64_t)sub_215E0551C((uint64_t **)&v63, v31);
            v30 -= 2;
          }
          while (v30);
        }
      }
      else if (result)
      {
        uint64_t v55 = 2 * result;
        do
        {
          ++v28;
          uint64_t result = sub_215E057EC();
          v55 -= 2;
        }
        while (v55);
      }
      return result;
    case 7:
      uint64_t result = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v34 + 40))
      {
        *(void *)&long long v63 = v34 + 16;
        if (result)
        {
          uint64_t v35 = 4 * result;
          do
          {
            unsigned int v36 = *v33++;
            uint64_t result = (uint64_t)sub_215E05AC4((uint64_t **)&v63, v36);
            v35 -= 4;
          }
          while (v35);
        }
      }
      else if (result)
      {
        uint64_t v56 = 4 * result;
        do
        {
          ++v33;
          uint64_t result = sub_215E05EEC();
          v56 -= 4;
        }
        while (v56);
      }
      return result;
    case 8:
      uint64_t result = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      uint64_t v38 = v37;
      uint64_t v39 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v39 + 40))
      {
        *(void *)&long long v63 = v39 + 16;
        if (result)
        {
          uint64_t v40 = 8 * result;
          do
          {
            unint64_t v41 = *v38++;
            uint64_t result = (uint64_t)sub_215E06360((uint64_t **)&v63, v41);
            v40 -= 8;
          }
          while (v40);
        }
      }
      else if (result)
      {
        uint64_t v57 = 8 * result;
        do
        {
          ++v38;
          uint64_t result = sub_215E068A8();
          v57 -= 8;
        }
        while (v57);
      }
      return result;
    case 11:
      uint64_t result = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      uint64_t v43 = v42;
      uint64_t v44 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v44 + 40))
      {
        *(void *)&long long v63 = v44 + 16;
        if (result)
        {
          uint64_t v45 = 4 * result;
          do
          {
            uint64_t result = (uint64_t)sub_215E06DFC((uint64_t)&v62, (uint64_t **)&v63, v43++);
            v45 -= 4;
          }
          while (v45);
        }
      }
      else if (result)
      {
        uint64_t v58 = 4 * result;
        do
        {
          unsigned int v59 = *v43++;
          LOBYTE(v63) = -54;
          *(_DWORD *)((char *)&v63 + 1) = bswap32(v59);
          uint64_t result = std::ostream::write();
          v58 -= 4;
        }
        while (v58);
      }
      return result;
    case 12:
      uint64_t result = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)(a2[1] + 24);
      if (*(unsigned char *)(v48 + 40))
      {
        *(void *)&long long v63 = v48 + 16;
        if (result)
        {
          uint64_t v49 = 8 * result;
          do
          {
            uint64_t result = (uint64_t)sub_215E06EE4((uint64_t)&v62, (uint64_t **)&v63, v47++);
            v49 -= 8;
          }
          while (v49);
        }
      }
      else if (result)
      {
        uint64_t v60 = 8 * result;
        do
        {
          unint64_t v61 = *v47++;
          LOBYTE(v63) = -53;
          *(void *)((char *)&v63 + 1) = bswap64(v61);
          uint64_t result = std::ostream::write();
          v60 -= 8;
        }
        while (v60);
      }
      return result;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159FA758(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  uint64_t v2 = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 2);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v3 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "value_type";
    *(void *)(a1 + 80) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v7 = &v4;
  sub_2159CE670();
}

void sub_2159FA990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  sub_215CE9D14(v13, a13);
  sub_2159A0A50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2159FA9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159FA9C4(int a1, uint64_t a2, uint64_t a3)
{
  switch(a1)
  {
    case 0:
      sub_215D15FDC((unsigned __int8 **)(a2 + 16));
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        return;
      }
      uint64_t v7 = v5;
      if (v5)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v7;
          sub_215DEB984(a3, (size_t *)&v35);
          v7 += 3;
          --v6;
        }
        while (v6);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v7;
        sub_215DEB984(a3, (size_t *)&v35);
        v7 += 3;
        if (!--v6) {
          return;
        }
      }
      goto LABEL_75;
    case 1:
      sub_215D160E4((unsigned __int8 **)(a2 + 16));
      uint64_t v9 = *(void *)(a2 + 8);
      if (!v9) {
        return;
      }
      uint64_t v10 = v8;
      if (v8)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v10;
          sub_215DECBA4(a3, (uint64_t)&v35);
          v10 += 6;
          --v9;
        }
        while (v9);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v10;
        sub_215DECBA4(a3, (uint64_t)&v35);
        v10 += 6;
        if (!--v9) {
          return;
        }
      }
      goto LABEL_75;
    case 2:
      sub_215D161EC((unsigned __int8 **)(a2 + 16));
      uint64_t v12 = *(void *)(a2 + 8);
      if (!v12) {
        return;
      }
      uint64_t v13 = v11;
      if (v11)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v13;
          sub_215DECE1C(a3, (uint64_t)&v35);
          v13 += 12;
          --v12;
        }
        while (v12);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v13;
        sub_215DECE1C(a3, (uint64_t)&v35);
        v13 += 12;
        if (!--v12) {
          return;
        }
      }
      goto LABEL_75;
    case 3:
      sub_215D162F4((unsigned __int8 **)(a2 + 16));
      uint64_t v15 = *(void *)(a2 + 8);
      if (!v15) {
        return;
      }
      uint64_t v16 = v14;
      if (v14)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v16;
          sub_215DED094(a3, (uint64_t)&v35);
          v16 += 24;
          --v15;
        }
        while (v15);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v16;
        sub_215DED094(a3, (uint64_t)&v35);
        v16 += 24;
        if (!--v15) {
          return;
        }
      }
      goto LABEL_75;
    case 5:
      sub_215D15F58((unsigned __int8 **)(a2 + 16));
      uint64_t v18 = *(void *)(a2 + 8);
      if (!v18) {
        return;
      }
      uint64_t v19 = v17;
      if (v17)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v19;
          sub_215DEC92C(a3, (size_t *)&v35);
          v19 += 3;
          --v18;
        }
        while (v18);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v19;
        sub_215DEC92C(a3, (size_t *)&v35);
        v19 += 3;
        if (!--v18) {
          return;
        }
      }
      goto LABEL_75;
    case 6:
      sub_215D16060((unsigned __int8 **)(a2 + 16));
      uint64_t v21 = *(void *)(a2 + 8);
      if (!v21) {
        return;
      }
      uint64_t v22 = v20;
      if (v20)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v22;
          sub_215DECA68(a3, (uint64_t)&v35);
          v22 += 6;
          --v21;
        }
        while (v21);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v22;
        sub_215DECA68(a3, (uint64_t)&v35);
        v22 += 6;
        if (!--v21) {
          return;
        }
      }
      goto LABEL_75;
    case 7:
      sub_215D16168((unsigned __int8 **)(a2 + 16));
      uint64_t v24 = *(void *)(a2 + 8);
      if (!v24) {
        return;
      }
      uint64_t v25 = v23;
      if (v23)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v25;
          sub_215DECCE0(a3, (uint64_t)&v35);
          v25 += 12;
          --v24;
        }
        while (v24);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v25;
        sub_215DECCE0(a3, (uint64_t)&v35);
        v25 += 12;
        if (!--v24) {
          return;
        }
      }
      goto LABEL_75;
    case 8:
      sub_215D16270((unsigned __int8 **)(a2 + 16));
      uint64_t v27 = *(void *)(a2 + 8);
      if (!v27) {
        return;
      }
      uint64_t v28 = v26;
      if (v26)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v28;
          sub_215DECF58(a3, (uint64_t)&v35);
          v28 += 24;
          --v27;
        }
        while (v27);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v28;
        sub_215DECF58(a3, (uint64_t)&v35);
        v28 += 24;
        if (!--v27) {
          return;
        }
      }
      goto LABEL_75;
    case 11:
      sub_215D16378((unsigned __int8 **)(a2 + 16));
      uint64_t v30 = *(void *)(a2 + 8);
      if (!v30) {
        return;
      }
      uint64_t v31 = v29;
      if (v29)
      {
        do
        {
          uint64_t v35 = 3;
          uint64_t v36 = v31;
          sub_215DED67C(a3, (float **)&v35);
          v31 += 12;
          --v30;
        }
        while (v30);
        return;
      }
      while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        uint64_t v35 = 3;
        uint64_t v36 = v31;
        sub_215DED67C(a3, (float **)&v35);
        v31 += 12;
        if (!--v30) {
          return;
        }
      }
      goto LABEL_75;
    case 12:
      sub_215D163FC((unsigned __int8 **)(a2 + 16));
      uint64_t v33 = *(void *)(a2 + 8);
      if (!v33) {
        return;
      }
      uint64_t v34 = v32;
      if (!v32)
      {
        while (!sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
          uint64_t v35 = 3;
          uint64_t v36 = v34;
          sub_215DEDAA0(a3, &v35);
          v34 += 24;
          if (!--v33) {
            return;
          }
        }
LABEL_75:
        abort();
      }
      do
      {
        uint64_t v35 = 3;
        uint64_t v36 = v34;
        sub_215DEDAA0(a3, &v35);
        v34 += 24;
        --v33;
      }
      while (v33);
      return;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159FB124(uint64_t a1, long long *a2)
{
  long long v6 = *a2;
  int v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(v9[0]) = v6;
  sub_215DF927C(a1, (unsigned __int8 *)v9);
  if (*(void *)(a1 + 40))
  {
    long long v4 = *(void **)(a1 + 24);
    LOBYTE(v9[0]) = *(unsigned char *)(a1 + 32);
    sub_215731D94(v4, (uint64_t)v9, 1);
  }
  std::ostream::operator<<();
  ++*(void *)(a1 + 40);
  long long v10 = xmmword_26425A6D8;
  v9[0] = &v6;
  v9[1] = a1;
  void v9[2] = &v10;
  sub_2159FB250(v6, v9);
  uint64_t v5 = v8;
  if (v8)
  {
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_2159FB23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2159FB250(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      if (v3)
      {
        uint64_t v5 = v3;
        long long v6 = v4;
        uint64_t v7 = a2[1];
        do
        {
          sub_215DF927C(v7, v6++);
          --v5;
        }
        while (v5);
      }
      break;
    case 1:
      unint64_t v8 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      if (v8)
      {
        uint64_t v10 = v9;
        uint64_t v11 = a2[1];
        uint64_t v12 = *(void *)(v11 + 40);
        uint64_t v13 = 2 * v8;
        do
        {
          if (v12)
          {
            uint64_t v14 = *(void **)(v11 + 24);
            char v69 = *(unsigned char *)(v11 + 32);
            sub_215731D94(v14, (uint64_t)&v69, 1);
          }
          v10 += 2;
          std::ostream::operator<<();
          uint64_t v12 = *(void *)(v11 + 40) + 1;
          *(void *)(v11 + 40) = v12;
          v13 -= 2;
        }
        while (v13);
      }
      break;
    case 2:
      unint64_t v15 = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      if (v15)
      {
        uint64_t v17 = v16;
        uint64_t v18 = a2[1];
        uint64_t v19 = *(void *)(v18 + 40);
        uint64_t v20 = 4 * v15;
        do
        {
          if (v19)
          {
            uint64_t v21 = *(void **)(v18 + 24);
            char v70 = *(unsigned char *)(v18 + 32);
            sub_215731D94(v21, (uint64_t)&v70, 1);
          }
          v17 += 4;
          std::ostream::operator<<();
          uint64_t v19 = *(void *)(v18 + 40) + 1;
          *(void *)(v18 + 40) = v19;
          v20 -= 4;
        }
        while (v20);
      }
      break;
    case 3:
      unint64_t v22 = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      if (v22)
      {
        uint64_t v24 = v23;
        uint64_t v25 = a2[1];
        uint64_t v26 = *(void *)(v25 + 40);
        uint64_t v27 = 8 * v22;
        do
        {
          if (v26)
          {
            uint64_t v28 = *(void **)(v25 + 24);
            char v71 = *(unsigned char *)(v25 + 32);
            sub_215731D94(v28, (uint64_t)&v71, 1);
          }
          v24 += 8;
          std::ostream::operator<<();
          uint64_t v26 = *(void *)(v25 + 40) + 1;
          *(void *)(v25 + 40) = v26;
          v27 -= 8;
        }
        while (v27);
      }
      break;
    case 5:
      uint64_t v29 = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      if (v29)
      {
        uint64_t v31 = v29;
        uint64_t v32 = v30;
        uint64_t v33 = a2[1];
        do
        {
          sub_215DF9090(v33, v32++);
          --v31;
        }
        while (v31);
      }
      break;
    case 6:
      unint64_t v34 = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      if (v34)
      {
        uint64_t v36 = v35;
        uint64_t v37 = a2[1];
        uint64_t v38 = *(void *)(v37 + 40);
        uint64_t v39 = 2 * v34;
        do
        {
          if (v38)
          {
            uint64_t v40 = *(void **)(v37 + 24);
            char v72 = *(unsigned char *)(v37 + 32);
            sub_215731D94(v40, (uint64_t)&v72, 1);
          }
          v36 += 2;
          std::ostream::operator<<();
          uint64_t v38 = *(void *)(v37 + 40) + 1;
          *(void *)(v37 + 40) = v38;
          v39 -= 2;
        }
        while (v39);
      }
      break;
    case 7:
      unint64_t v41 = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      if (v41)
      {
        uint64_t v43 = v42;
        uint64_t v44 = a2[1];
        uint64_t v45 = *(void *)(v44 + 40);
        uint64_t v46 = 4 * v41;
        do
        {
          if (v45)
          {
            uint64_t v47 = *(void **)(v44 + 24);
            char v73 = *(unsigned char *)(v44 + 32);
            sub_215731D94(v47, (uint64_t)&v73, 1);
          }
          v43 += 4;
          std::ostream::operator<<();
          uint64_t v45 = *(void *)(v44 + 40) + 1;
          *(void *)(v44 + 40) = v45;
          v46 -= 4;
        }
        while (v46);
      }
      break;
    case 8:
      unint64_t v48 = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      if (v48)
      {
        uint64_t v50 = v49;
        uint64_t v51 = a2[1];
        uint64_t v52 = *(void *)(v51 + 40);
        uint64_t v53 = 8 * v48;
        do
        {
          if (v52)
          {
            int v54 = *(void **)(v51 + 24);
            char v74 = *(unsigned char *)(v51 + 32);
            sub_215731D94(v54, (uint64_t)&v74, 1);
          }
          v50 += 8;
          std::ostream::operator<<();
          uint64_t v52 = *(void *)(v51 + 40) + 1;
          *(void *)(v51 + 40) = v52;
          v53 -= 8;
        }
        while (v53);
      }
      break;
    case 11:
      unint64_t v55 = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      if (v55)
      {
        uint64_t v57 = v56;
        uint64_t v58 = a2[1];
        uint64_t v59 = *(void *)(v58 + 40);
        uint64_t v60 = 4 * v55;
        do
        {
          if (v59)
          {
            unint64_t v61 = *(void **)(v58 + 24);
            char v75 = *(unsigned char *)(v58 + 32);
            sub_215731D94(v61, (uint64_t)&v75, 1);
          }
          *(void *)(*(void *)(v58 + 24) + *(void *)(**(void **)(v58 + 24) - 24) + 16) = 9;
          v57 += 4;
          std::ostream::operator<<();
          uint64_t v59 = *(void *)(v58 + 40) + 1;
          *(void *)(v58 + 40) = v59;
          v60 -= 4;
        }
        while (v60);
      }
      break;
    case 12:
      unint64_t v62 = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      if (v62)
      {
        uint64_t v64 = v63;
        uint64_t v65 = a2[1];
        uint64_t v66 = *(void *)(v65 + 40);
        uint64_t v67 = 8 * v62;
        do
        {
          if (v66)
          {
            int32x2_t v68 = *(void **)(v65 + 24);
            char v76 = *(unsigned char *)(v65 + 32);
            sub_215731D94(v68, (uint64_t)&v76, 1);
          }
          *(void *)(*(void *)(v65 + 24) + *(void *)(**(void **)(v65 + 24) - 24) + 16) = 17;
          v64 += 8;
          std::ostream::operator<<();
          uint64_t v66 = *(void *)(v65 + 40) + 1;
          *(void *)(v65 + 40) = v66;
          v67 -= 8;
        }
        while (v67);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159FB6D4(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LOBYTE(__src[0]) = v5;
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)__src, (char *)__src + 1, 1);
  sub_215D04A50(a1 + 24, *(char **)(a1 + 32), (char *)&v5 + 8, (char *)&v6, 8);
  long long v9 = xmmword_26425A6D8;
  __src[0] = &v5;
  __src[1] = a1;
  __src[2] = &v9;
  sub_2159FB804(v5, __src);
  long long v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2159FB7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_2159FB804(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      int64_t v4 = v3;
      uint64_t v6 = v5;
      uint64_t v7 = a2[1];
      if (v5) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v3 == 0;
      }
      if (!v8) {
        goto LABEL_18;
      }
      goto LABEL_19;
    case 1:
      unint64_t v9 = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      goto LABEL_23;
    case 2:
      unint64_t v11 = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      goto LABEL_32;
    case 3:
      unint64_t v13 = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      goto LABEL_39;
    case 5:
      uint64_t v15 = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      int64_t v4 = v15;
      uint64_t v6 = v16;
      uint64_t v7 = a2[1];
      if (v16) {
        BOOL v17 = 1;
      }
      else {
        BOOL v17 = v15 == 0;
      }
      if (v17) {
        goto LABEL_19;
      }
LABEL_18:
      if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        goto LABEL_47;
      }
LABEL_19:
      uint64_t v18 = v7 + 24;
      uint64_t v19 = *(char **)(v7 + 32);
      uint64_t v20 = &v6[v4];
      uint64_t v21 = v6;
      int64_t v22 = v4;
      break;
    case 6:
      unint64_t v9 = sub_215D16060((unsigned __int8 **)(*a2 + 16));
LABEL_23:
      uint64_t v24 = v10;
      uint64_t v25 = a2[1];
      uint64_t v26 = 2 * v9;
      if (v10) {
        BOOL v27 = 1;
      }
      else {
        BOOL v27 = v26 == 0;
      }
      if (!v27) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 7:
      unint64_t v11 = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      goto LABEL_32;
    case 8:
      unint64_t v13 = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      goto LABEL_39;
    case 11:
      unint64_t v11 = sub_215D16378((unsigned __int8 **)(*a2 + 16));
LABEL_32:
      uint64_t v24 = v12;
      uint64_t v25 = a2[1];
      uint64_t v26 = 4 * v11;
      if (v12) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v26 == 0;
      }
      if (!v28) {
        goto LABEL_43;
      }
      goto LABEL_44;
    case 12:
      unint64_t v13 = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
LABEL_39:
      uint64_t v24 = v14;
      uint64_t v25 = a2[1];
      uint64_t v26 = 8 * v13;
      if (v14) {
        BOOL v29 = 1;
      }
      else {
        BOOL v29 = v26 == 0;
      }
      if (!v29)
      {
LABEL_43:
        if (sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
        {
LABEL_47:
          abort();
        }
      }
LABEL_44:
      uint64_t v18 = v25 + 24;
      uint64_t v19 = *(char **)(v25 + 32);
      uint64_t v20 = &v24[v26];
      uint64_t v21 = v24;
      int64_t v22 = v26;
      break;
    default:
      sub_215E097D8(a1);
  }
  return sub_215D04A50(v18, v19, v21, v20, v22);
}

void sub_2159FBA90(int *a1, unsigned char *a2, long long *a3)
{
  int v6 = 2;
  (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v6);
  if (*a1 < 1
    || *a1 == 2 && (int v7 = 2, (*(void (**)(unsigned char *, int *))(*(void *)a2 + 104))(a2, &v7), *a1 <= 0))
  {
    sub_2159FBBD4(a2, a3);
  }
  else
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    sub_2159FBBD4(a2, a3);
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

void sub_2159FBBD4(unsigned char *a1, long long *a2)
{
  long long v5 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 2);
  int v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[0] = &v5;
  sub_2159D0EBC(a1, v8);
  (*(void (**)(unsigned char *, char *))(*(void *)a1 + 120))(a1, (char *)&v5 + 8);
  long long v9 = xmmword_26425A6D8;
  v8[0] = &v5;
  v8[1] = a1;
  void v8[2] = &v9;
  sub_2159FBCF4(v5, v8);
  int64_t v4 = v7;
  if (v7)
  {
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2159FBCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2159FBCF4(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      uint64_t result = sub_215D15FDC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v5 = result;
        uint64_t v6 = v4;
        uint64_t v7 = a2[1];
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 80))(v7, v6++);
          --v5;
        }
        while (v5);
      }
      break;
    case 1:
      uint64_t result = sub_215D160E4((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v9 = v8;
        uint64_t v10 = a2[1];
        uint64_t v11 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 96))(v10, v9);
          v9 += 2;
          v11 -= 2;
        }
        while (v11);
      }
      break;
    case 2:
      uint64_t result = sub_215D161EC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v13 = v12;
        uint64_t v14 = a2[1];
        uint64_t v15 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 104))(v14, v13);
          v13 += 4;
          v15 -= 4;
        }
        while (v15);
      }
      break;
    case 3:
      uint64_t result = sub_215D162F4((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v17 = v16;
        uint64_t v18 = a2[1];
        uint64_t v19 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 120))(v18, v17);
          v17 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      break;
    case 5:
      uint64_t result = sub_215D15F58((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v21 = result;
        uint64_t v22 = v20;
        uint64_t v23 = a2[1];
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v23 + 88))(v23, v22++);
          --v21;
        }
        while (v21);
      }
      break;
    case 6:
      uint64_t result = sub_215D16060((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v25 = v24;
        uint64_t v26 = a2[1];
        uint64_t v27 = 2 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 48))(v26, v25);
          v25 += 2;
          v27 -= 2;
        }
        while (v27);
      }
      break;
    case 7:
      uint64_t result = sub_215D16168((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v29 = v28;
        uint64_t v30 = a2[1];
        uint64_t v31 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v30 + 56))(v30, v29);
          v29 += 4;
          v31 -= 4;
        }
        while (v31);
      }
      break;
    case 8:
      uint64_t result = sub_215D16270((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v33 = v32;
        uint64_t v34 = a2[1];
        uint64_t v35 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v34 + 72))(v34, v33);
          v33 += 8;
          v35 -= 8;
        }
        while (v35);
      }
      break;
    case 11:
      uint64_t result = sub_215D16378((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v37 = v36;
        uint64_t v38 = a2[1];
        uint64_t v39 = 4 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v38 + 128))(v38, v37);
          v37 += 4;
          v39 -= 4;
        }
        while (v39);
      }
      break;
    case 12:
      uint64_t result = sub_215D163FC((unsigned __int8 **)(*a2 + 16));
      if (result)
      {
        uint64_t v41 = v40;
        uint64_t v42 = a2[1];
        uint64_t v43 = 8 * result;
        do
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 136))(v42, v41);
          v41 += 8;
          v43 -= 8;
        }
        while (v43);
      }
      break;
    default:
      sub_215E097D8(a1);
  }
  return result;
}

void sub_2159FC108(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "value_type";
    *(void *)(a1 + 96) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    uint64_t v4 = a2;
    sub_2159D177C((void *)a1);
  }
  sub_2159FC230();
}

void sub_2159FC230()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D1835C();
}

void sub_2159FC430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FC44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159FC460(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159FC5E0(v3);
      break;
    case 1:
      sub_2159FC7E0(v3);
      break;
    case 2:
      sub_2159FC9F0(v3);
      break;
    case 3:
      sub_2159FCC04(v3);
      break;
    case 5:
      sub_2159FCE5C(v3);
      break;
    case 6:
      sub_2159FD05C(v3);
      break;
    case 7:
      sub_2159FD26C(v3);
      break;
    case 8:
      sub_2159FD480(v3);
      break;
    case 11:
      sub_2159FD6D8(v3);
      break;
    case 12:
      sub_2159FD8E0(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159FC5E0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    uint64_t v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v15 = &v4[v3];
    bzero(v4, 3 * v2);
    uint64_t v6 = 0;
    uint64_t v14 = v5;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v16 = 3;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF0BCC(v8, (uint64_t)&v16);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2159FDAE8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159FC7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FC7E0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(6 * v2);
    uint64_t v12 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    uint64_t v3 = 0;
    uint64_t v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2178(v5, (uint64_t)&v13);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159FC9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FC9F0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v12 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    uint64_t v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2328(v5, (uint64_t)&v13);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159FCBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FCC04(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF4844(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FDDC4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159FCE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FCE5C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 3 * v2);
    uint64_t v6 = 0;
    uint64_t v14 = v5;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v7 = (void *)a1[1];
      *(void *)&long long v16 = 3;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF1F38(v8, (uint64_t)&v16);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2159FDEB8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159FD034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FD05C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(6 * v2);
    uint64_t v12 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    uint64_t v3 = 0;
    uint64_t v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2058(v5, (uint64_t)&v13);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159FD244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FD26C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v12 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    uint64_t v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2250(v5, (uint64_t)&v13);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
}

void sub_2159FD458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FD480(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF45EC(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FE194(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159FD698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FD6D8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      sub_215DF262C(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FE288(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159FD8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FD8E0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      sub_215DF2748(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FE37C(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159FDAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FDAE8(_OWORD *a1, uint64_t a2)
{
  sub_215D1429C(&v6, 0, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FDB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FDBDC(_OWORD *a1, uint64_t a2)
{
  sub_215D14650(&v6, 1, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FDC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FDCD0(_OWORD *a1, uint64_t a2)
{
  sub_215D14A08(&v6, 2, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FDD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FDDC4(_OWORD *a1, uint64_t a2)
{
  sub_215D14DC0(&v6, 3, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FDE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FDEB8(_OWORD *a1, uint64_t a2)
{
  sub_215D140C4(&v6, 5, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FDF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FDFAC(_OWORD *a1, uint64_t a2)
{
  sub_215D14474(&v6, 6, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FE04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FE0A0(_OWORD *a1, uint64_t a2)
{
  sub_215D1482C(&v6, 7, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FE140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FE194(_OWORD *a1, uint64_t a2)
{
  sub_215D14BE4(&v6, 8, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FE234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FE288(_OWORD *a1, uint64_t a2)
{
  sub_215D14F9C(&v6, 11, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FE328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2159FE37C(_OWORD *a1, uint64_t a2)
{
  sub_215D15178(&v6, 12, a2);
  long long v5 = v6;
  sub_215D17CEC((uint64_t)&v6, (uint64_t)&v5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)&v5 + 1);
  if (*((void *)&v5 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  *a1 = v6;
  return a1;
}

void sub_2159FE41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    if (!atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FE470(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_2159FE5F0(v3);
      break;
    case 1:
      sub_2159FE7F0(v3);
      break;
    case 2:
      sub_2159FEA00(v3);
      break;
    case 3:
      sub_2159FEC14(v3);
      break;
    case 5:
      sub_2159FEE6C(v3);
      break;
    case 6:
      sub_2159FF06C(v3);
      break;
    case 7:
      sub_2159FF27C(v3);
      break;
    case 8:
      sub_2159FF490(v3);
      break;
    case 11:
      sub_2159FF6E8(v3);
      break;
    case 12:
      sub_2159FF8F0(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159FE5F0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    long long v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 3 * v2);
    uint64_t v6 = 0;
    uint64_t v14 = v5;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v16 = 3;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF0BCC(v8, (uint64_t)&v16);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2159FDAE8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159FE7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FE7F0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(6 * v2);
    uint64_t v12 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2178(v5, (uint64_t)&v13);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159FE9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FEA00(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v12 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2328(v5, (uint64_t)&v13);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159FEBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FEC14(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF4844(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FDDC4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159FEE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FEE6C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 3 * v2);
    uint64_t v6 = 0;
    uint64_t v14 = v5;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v7 = (void *)a1[1];
      *(void *)&long long v16 = 3;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF0AA0(v7);
      ++v7[14];
      sub_215DF1F38(v8, (uint64_t)&v16);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2159FDEB8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_2159FF044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FF06C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(6 * v2);
    uint64_t v12 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2058(v5, (uint64_t)&v13);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159FF254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FF27C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v12 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF0AA0(v4);
      ++v4[14];
      sub_215DF2250(v5, (uint64_t)&v13);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_2159FF468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FF490(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF45EC(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FE194(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159FF6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FF6E8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      sub_215DF262C(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FE288(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159FF8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FF8F0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF0AA0(v5);
      ++v5[14];
      sub_215DF2748(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FE37C(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_2159FFAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2159FFAF8(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  if (a4 < 2) {
    sub_2159FFC20();
  }
  unint64_t v6 = a2 + 2;
  sub_2159B0060(a2 + 2);
  LOBYTE(v11[0]) = 0;
  sub_215DFF4BC(a2[6], v11);
  *a3 = v11[0];
  sub_215DFFC24(a2[6], (void *)a3 + 1);
  long long v12 = xmmword_26425A6D8;
  int v7 = *a3;
  v11[0] = a3;
  v11[1] = a2;
  void v11[2] = &v12;
  sub_2159FFDD0(v7, v11);
  uint64_t v8 = a2[4];
  uint64_t result = (*(uint64_t (**)(void *))(a2[2] + 32))(a2 + 2);
  uint64_t v10 = *(void *)(v8 - 16) - result + *(void *)(v8 - 8);
  if (v10) {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(*v6 + 40))(a2 + 2, v10);
  }
  a2[4] -= 16;
  return result;
}

void sub_2159FFC20()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D1835C();
}

void sub_2159FFDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2159FFDBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2159FFDD0(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_2159FFEAC(a2);
      break;
    case 1:
      sub_215A00044(a2);
      break;
    case 2:
      sub_215A001EC(a2);
      break;
    case 3:
      sub_215A00398(a2);
      break;
    case 5:
      sub_215A00544(a2);
      break;
    case 6:
      sub_215A006DC(a2);
      break;
    case 7:
      sub_215A00884(a2);
      break;
    case 8:
      sub_215A00A30(a2);
      break;
    case 11:
      sub_215A00BDC(a2);
      break;
    case 12:
      sub_215A00D88(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_2159FFEAC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = operator new(3 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF4BC(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159FDAE8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A00020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A00044(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    size_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF670(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A001C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A001EC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF824(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A00374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A00398(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFC24(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FDDC4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A00520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A00544(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(3 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF408(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159FDEB8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A006B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A006DC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    size_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF5BC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A00860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A00884(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF770(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A00A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A00A30(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFB20(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE194(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A00BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A00BDC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFFD1C(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE288(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A00D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A00D88(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFE68(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE37C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A00F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A00F34(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A01010(a2);
      break;
    case 1:
      sub_215A011A8(a2);
      break;
    case 2:
      sub_215A01350(a2);
      break;
    case 3:
      sub_215A014FC(a2);
      break;
    case 5:
      sub_215A016A8(a2);
      break;
    case 6:
      sub_215A01840(a2);
      break;
    case 7:
      sub_215A019E8(a2);
      break;
    case 8:
      sub_215A01B94(a2);
      break;
    case 11:
      sub_215A01D40(a2);
      break;
    case 12:
      sub_215A01EEC(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A01010(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    int64_t v4 = operator new(3 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF4BC(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159FDAE8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A01184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A011A8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    size_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF670(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0132C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A01350(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF824(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A014D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A014FC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFC24(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FDDC4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A01684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A016A8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(3 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = *(void *)(a1[1] + 48);
      do
      {
        sub_215DFF408(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159FDEB8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A0181C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A01840(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    size_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFF5BC(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A019C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A019E8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFF770(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A01B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A01B94(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFB20(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE194(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A01D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A01D40(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFFD1C(v7, (float *)v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE288(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A01EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A01EEC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = *(void *)(a1[1] + 48);
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFFE68(v7, (double *)v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE37C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A02074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A02098(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 104);
    *(void *)(a1 + 88) = "value_type";
    *(void *)(a1 + 96) = 10;
    if (!v3) {
      *(unsigned char *)(a1 + 104) = 1;
    }
    uint64_t v4 = a2;
    sub_2159D2DC4((void *)a1);
  }
  sub_215A021C0();
}

void sub_215A021C0()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D1835C();
}

void sub_215A023C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A023DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A023F0(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_215A02570(v3);
      break;
    case 1:
      sub_215A02770(v3);
      break;
    case 2:
      sub_215A02980(v3);
      break;
    case 3:
      sub_215A02B94(v3);
      break;
    case 5:
      sub_215A02DEC(v3);
      break;
    case 6:
      sub_215A02FEC(v3);
      break;
    case 7:
      sub_215A031FC(v3);
      break;
    case 8:
      sub_215A03410(v3);
      break;
    case 11:
      sub_215A03668(v3);
      break;
    case 12:
      sub_215A03870(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A02570(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    size_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 3 * v2);
    uint64_t v6 = 0;
    uint64_t v14 = v5;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v16 = 3;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF0588(v8, (uint64_t)&v16);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2159FDAE8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_215A02748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A02770(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(6 * v2);
    long long v12 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1274(v5, (uint64_t)&v13);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_215A02958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A02980(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    long long v12 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1424(v5, (uint64_t)&v13);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_215A02B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A02B94(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF331C(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FDDC4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A02DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A02DEC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 3 * v2);
    uint64_t v6 = 0;
    uint64_t v14 = v5;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v7 = (void *)a1[1];
      *(void *)&long long v16 = 3;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1034(v8, (uint64_t)&v16);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2159FDEB8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_215A02FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A02FEC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(6 * v2);
    long long v12 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1154(v5, (uint64_t)&v13);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_215A031D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A031FC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    long long v12 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF134C(v5, (uint64_t)&v13);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_215A033E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A03410(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF2D20(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FE194(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A03628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A03668(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      sub_215DF1750(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FE288(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A03848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A03870(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      sub_215DF1894(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FE37C(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A03A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A03A78(int a1, uint64_t a2, uint64_t a3)
{
  v3[0] = a2;
  v3[1] = a3;
  switch(a1)
  {
    case 0:
      sub_215A03BF8(v3);
      break;
    case 1:
      sub_215A03DF8(v3);
      break;
    case 2:
      sub_215A04008(v3);
      break;
    case 3:
      sub_215A0421C(v3);
      break;
    case 5:
      sub_215A04474(v3);
      break;
    case 6:
      sub_215A04674(v3);
      break;
    case 7:
      sub_215A04884(v3);
      break;
    case 8:
      sub_215A04A98(v3);
      break;
    case 11:
      sub_215A04CF0(v3);
      break;
    case 12:
      sub_215A04EF8(v3);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A03BF8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 3 * v2);
    uint64_t v6 = 0;
    uint64_t v14 = v5;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v7 = (void *)a1[1];
      *(void *)&long long v16 = 3;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF0588(v8, (uint64_t)&v16);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2159FDAE8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_215A03DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A03DF8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(6 * v2);
    long long v12 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1274(v5, (uint64_t)&v13);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_215A03FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A04008(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    long long v12 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1424(v5, (uint64_t)&v13);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_215A041F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0421C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF331C(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FDDC4(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A04434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A04474(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v14 = 0;
  long long v15 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    unint64_t v5 = &v4[v3];
    std::string __p = v4;
    long long v15 = &v4[v3];
    bzero(v4, 3 * v2);
    uint64_t v6 = 0;
    uint64_t v14 = v5;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      long long v7 = (void *)a1[1];
      *(void *)&long long v16 = 3;
      *((void *)&v16 + 1) = (char *)__p + v6;
      unint64_t v8 = sub_215DF045C(v7);
      ++v7[14];
      sub_215DF1034(v8, (uint64_t)&v16);
      v6 += 3;
      --v2;
    }
    while (v2);
  }
  sub_2159FDEB8(&v16, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
}

void sub_215A0464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A04674(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    std::string __p = operator new(6 * v2);
    long long v12 = (char *)__p + 6 * v2;
    bzero(__p, 6 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF1154(v5, (uint64_t)&v13);
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_215A0485C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A04884(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v11 = 0;
  long long v12 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    long long v12 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v11 = v12;
    do
    {
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      uint64_t v4 = (void *)a1[1];
      *(void *)&long long v13 = 3;
      *((void *)&v13 + 1) = (char *)__p + v3;
      unint64_t v5 = sub_215DF045C(v4);
      ++v4[14];
      sub_215DF134C(v5, (uint64_t)&v13);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v13;
  long long v13 = 0uLL;
  unint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_215A04A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A04A98(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      sub_215DF2D20(v6, (uint64_t)&v15);
      long long v7 = (void *)v15;
      if (*((void *)&v15 + 1) != (void)v15)
      {
        memmove(&v4[v3], (const void *)v15, *((void *)&v15 + 1) - v15);
        long long v7 = (void *)v15;
      }
      if (v7)
      {
        *((void *)&v15 + 1) = v7;
        operator delete(v7);
      }
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FE194(&v15, (uint64_t)&__p);
  uint64_t v8 = *a1;
  long long v9 = v15;
  long long v15 = 0uLL;
  long long v10 = *(std::__shared_weak_count **)(v8 + 24);
  *(_OWORD *)(v8 + 16) = v9;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  long long v11 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A04CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A04CF0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    std::string __p = operator new(12 * v2);
    uint64_t v14 = (char *)__p + 12 * v2;
    bzero(__p, 12 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      sub_215DF1750(v6, (float *)&v4[v3]);
      v3 += 12;
      --v2;
    }
    while (v2);
  }
  sub_2159FE288(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A04ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A04EF8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    std::string __p = operator new(24 * v2);
    uint64_t v14 = (char *)__p + 24 * v2;
    bzero(__p, 24 * v2);
    uint64_t v3 = 0;
    long long v13 = v14;
    do
    {
      uint64_t v4 = (char *)__p;
      if (!__p
        && sub_215E1A31C("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_215E1ABD8))
      {
        abort();
      }
      unint64_t v5 = (void *)a1[1];
      unint64_t v6 = sub_215DF045C(v5);
      ++v5[14];
      sub_215DF1894(v6, (double *)&v4[v3]);
      v3 += 24;
      --v2;
    }
    while (v2);
  }
  sub_2159FE37C(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A050D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A05100(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  LODWORD(__p) = 2;
  sub_215DFABD4(a2, &__p);
  unsigned int v5 = __p;
  if (__p >= 2) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = __p;
  }
  if (v6 < 2) {
    sub_215A0527C();
  }
  LOBYTE(__p) = 0;
  sub_215DFA01C(a2, &__p);
  *a3 = __p;
  sub_215DFB854(a2, (void *)a3 + 1);
  long long v10 = xmmword_26425A6D8;
  int v7 = *a3;
  std::string __p = a3;
  uint64_t v12 = a2;
  long long v13 = &v10;
  sub_215A0542C(v7, &__p);
  if (v5 >= 2 && !*(unsigned char *)(a2 + 131))
  {
    do
    {
      if ((*(unsigned char *)(*(void *)(a2 + 16) + *(void *)(**(void **)(a2 + 16) - 24) + 32) & 2) != 0) {
        return;
      }
      sub_215DFD700(a2, (uint64_t)&__p);
      if (SHIBYTE(v13) < 0)
      {
        if (v12 == 1 && *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)__p)
        {
LABEL_21:
          char v9 = 0;
          if (SHIBYTE(v13) < 0) {
            goto LABEL_24;
          }
          goto LABEL_10;
        }
      }
      else if (SHIBYTE(v13) == 1 && *(unsigned __int8 *)(a2 + 72) == __p)
      {
        goto LABEL_21;
      }
      char v9 = 1;
      if (SHIBYTE(v13) < 0) {
LABEL_24:
      }
        operator delete(__p);
LABEL_10:
      if (*(unsigned char *)(a2 + 131)) {
        char v8 = 0;
      }
      else {
        char v8 = v9;
      }
    }
    while ((v8 & 1) != 0);
  }
}

void sub_215A0527C()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D1835C();
}

void sub_215A053FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A05418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A0542C(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A05508(a2);
      break;
    case 1:
      sub_215A0569C(a2);
      break;
    case 2:
      sub_215A05840(a2);
      break;
    case 3:
      sub_215A059E8(a2);
      break;
    case 5:
      sub_215A05B90(a2);
      break;
    case 6:
      sub_215A05D24(a2);
      break;
    case 7:
      sub_215A05EC8(a2);
      break;
    case 8:
      sub_215A06070(a2);
      break;
    case 11:
      sub_215A06218(a2);
      break;
    case 12:
      sub_215A063C0(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A05508(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = operator new(3 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DFA01C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159FDAE8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  char v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A05678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0569C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    size_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA594(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0581C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A05840(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFABD4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A059C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A059E8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB854(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FDDC4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A05B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A05B90(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(3 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DF9DC4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159FDEB8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A05D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A05D24(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    size_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA274(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A05EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A05EC8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFA8B4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0604C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A06070(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB534(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE194(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A061F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A06218(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFBEC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE288(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0639C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A063C0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFC1E8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE37C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A06544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A06568(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A06644(a2);
      break;
    case 1:
      sub_215A067D8(a2);
      break;
    case 2:
      sub_215A0697C(a2);
      break;
    case 3:
      sub_215A06B24(a2);
      break;
    case 5:
      sub_215A06CCC(a2);
      break;
    case 6:
      sub_215A06E60(a2);
      break;
    case 7:
      sub_215A07004(a2);
      break;
    case 8:
      sub_215A071AC(a2);
      break;
    case 11:
      sub_215A07354(a2);
      break;
    case 12:
      sub_215A074FC(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A06644(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    int64_t v4 = operator new(3 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DFA01C(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159FDAE8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A067B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A067D8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    size_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA594(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A06958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0697C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFABD4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A06B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A06B24(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB854(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FDDC4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A06CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A06CCC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = operator new(3 * v2);
    std::string __p = v4;
    uint64_t v14 = &v4[v3];
    bzero(v4, v3);
    long long v13 = &v4[v3];
    size_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = a1[1];
      do
      {
        sub_215DF9DC4(v6, v4++);
        --v5;
      }
      while (v5);
    }
  }
  sub_2159FDEB8(&v11, (uint64_t)&__p);
  uint64_t v7 = *a1;
  long long v8 = v11;
  long long v11 = 0uLL;
  uint64_t v9 = *(std::__shared_weak_count **)(v7 + 24);
  *(_OWORD *)(v7 + 16) = v8;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  long long v10 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if (*((void *)&v11 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
}

void sub_215A06E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A06E60(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    size_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        sub_215DFA274(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A06FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A07004(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFA8B4(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A07188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A071AC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFB534(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE194(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A07330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A07354(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    size_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        sub_215DFBEC8(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE288(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A074D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A074FC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    size_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        sub_215DFC1E8(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE37C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  long long v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A07680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A076A4(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2[6];
  unint64_t v4 = a2[7];
  BOOL v5 = v4 >= v3;
  unint64_t v6 = v4 - v3;
  if (!v5) {
    unint64_t v6 = 0;
  }
  if (v6 <= 3)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  unsigned int v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1) {
    sub_215A077A4();
  }
  sub_215D02644(a2);
  sub_215A07920(a2, a3);
  uint64_t v10 = a2[12];
  uint64_t v11 = a2[9];
  a2[6] = *(void *)(v10 - 8) + *(void *)(v11 - 8) + 8;
  a2[9] = v11 - 8;
  a2[12] = v10 - 8;
}

void sub_215A07790(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A077A4()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D1835C();
}

void sub_215A078F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A07904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A07920(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  if (v3 <= v2) {
    goto LABEL_6;
  }
  uint64_t v4 = a1[3];
  int v5 = *(unsigned __int8 *)(v4 + v2);
  unint64_t v6 = v2 + 1;
  a1[6] = v6;
  *(unsigned char *)a2 = v5;
  BOOL v7 = v3 >= v6;
  unint64_t v8 = v3 - v6;
  if (!v7) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7)
  {
LABEL_6:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 8) = *(void *)(v4 + v6);
  a1[6] += 8;
  long long v11 = xmmword_26425A6D8;
  v10[0] = a2;
  v10[1] = a1;
  void v10[2] = &v11;
  sub_215A07A2C(v5, v10);
}

void sub_215A07A04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A07A18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A07A2C(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A07B08(a2);
      break;
    case 1:
      sub_215A07D14(a2);
      break;
    case 2:
      sub_215A07F28(a2);
      break;
    case 3:
      sub_215A08140(a2);
      break;
    case 5:
      sub_215A08358(a2);
      break;
    case 6:
      sub_215A08564(a2);
      break;
    case 7:
      sub_215A08778(a2);
      break;
    case 8:
      sub_215A08990(a2);
      break;
    case 11:
      sub_215A08BA8(a2);
      break;
    case 12:
      sub_215A08DC0(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A07B08(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    uint64_t v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    uint64_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDAE8(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A07CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A07D14(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if (3 * (void)v2 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 6 * (void)v2;
    int v5 = (char *)operator new(6 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDBDC(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A07EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A07F28(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 12 * (void)v2;
    int v5 = (char *)operator new(12 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDCD0(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0810C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A08140(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 24 * (void)v2;
    int v5 = (char *)operator new(24 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDDC4(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A08324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A08358(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = (char *)operator new(3 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    uint64_t v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    size_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDEB8(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A08530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A08564(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if (3 * (void)v2 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 6 * (void)v2;
    int v5 = (char *)operator new(6 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDFAC(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A08744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A08778(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 12 * (void)v2;
    int v5 = (char *)operator new(12 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FE0A0(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0895C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A08990(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 24 * (void)v2;
    int v5 = (char *)operator new(24 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FE194(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A08B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A08BA8(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 12 * (void)v2;
    int v5 = (char *)operator new(12 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FE288(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A08D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A08DC0(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 24 * (void)v2;
    int v5 = (char *)operator new(24 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FE37C(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A08FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A08FD8(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  if (v3 <= v2) {
    goto LABEL_6;
  }
  uint64_t v4 = a1[3];
  int v5 = *(unsigned __int8 *)(v4 + v2);
  unint64_t v6 = v2 + 1;
  a1[6] = v6;
  *(unsigned char *)a2 = v5;
  BOOL v7 = v3 >= v6;
  unint64_t v8 = v3 - v6;
  if (!v7) {
    unint64_t v8 = 0;
  }
  if (v8 <= 7)
  {
LABEL_6:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_21573A000(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  *(void *)(a2 + 8) = *(void *)(v4 + v6);
  a1[6] += 8;
  long long v11 = xmmword_26425A6D8;
  v10[0] = a2;
  v10[1] = a1;
  void v10[2] = &v11;
  sub_215A090E4(v5, v10);
}

void sub_215A090BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A090D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_215A090E4(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A091C0(a2);
      break;
    case 1:
      sub_215A093CC(a2);
      break;
    case 2:
      sub_215A095E0(a2);
      break;
    case 3:
      sub_215A097F8(a2);
      break;
    case 5:
      sub_215A09A10(a2);
      break;
    case 6:
      sub_215A09C1C(a2);
      break;
    case 7:
      sub_215A09E30(a2);
      break;
    case 8:
      sub_215A0A048(a2);
      break;
    case 11:
      sub_215A0A260(a2);
      break;
    case 12:
      sub_215A0A478(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A091C0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    uint64_t v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    uint64_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDAE8(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A09398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A093CC(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if (3 * (void)v2 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 6 * (void)v2;
    int v5 = (char *)operator new(6 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDBDC(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A095AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A095E0(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 12 * (void)v2;
    int v5 = (char *)operator new(12 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDCD0(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A097C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A097F8(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 24 * (void)v2;
    int v5 = (char *)operator new(24 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDDC4(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A099DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A09A10(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = (char *)operator new(3 * v2);
    int v5 = &v4[v3];
    std::string __p = v4;
    uint64_t v20 = &v4[v3];
    bzero(v4, v3);
    uint64_t v19 = &v4[v3];
  }
  else
  {
    int v5 = 0;
    size_t v4 = 0;
  }
  size_t v6 = v5 - v4;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v4, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDEB8(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A09BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A09C1C(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if (3 * (void)v2 < 0) {
      sub_2157E81A4();
    }
    size_t v4 = 6 * (void)v2;
    int v5 = (char *)operator new(6 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[2 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FDFAC(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A09DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A09E30(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 12 * (void)v2;
    int v5 = (char *)operator new(12 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FE0A0(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0A014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0A048(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 24 * (void)v2;
    int v5 = (char *)operator new(24 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FE194(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0A22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0A260(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 62) {
      sub_2157E81A4();
    }
    size_t v4 = 12 * (void)v2;
    int v5 = (char *)operator new(12 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[4 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FE288(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0A444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0A478(void *a1)
{
  uint64_t v2 = *(char **)(*a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * (void)v2;
    if ((unint64_t)(3 * (void)v2) >> 61) {
      sub_2157E81A4();
    }
    size_t v4 = 24 * (void)v2;
    int v5 = (char *)operator new(24 * (void)v2);
    std::string __p = v5;
    uint64_t v20 = &v5[8 * v3];
    bzero(v5, v4);
    uint64_t v2 = &v5[v4];
    uint64_t v19 = &v5[v4];
  }
  else
  {
    int v5 = 0;
  }
  size_t v6 = v2 - v5;
  BOOL v7 = (void *)a1[1];
  unint64_t v8 = v7[6];
  unint64_t v9 = v7[7];
  BOOL v10 = v9 >= v8;
  size_t v11 = v9 - v8;
  if (!v10) {
    size_t v11 = 0;
  }
  if (v11 < v6)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read span");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26425A308, MEMORY[0x263F8C068]);
  }
  memcpy(v5, (const void *)(v7[3] + v8), v6);
  v7[6] += v6;
  sub_2159FE37C(&v17, (uint64_t)&__p);
  uint64_t v12 = *a1;
  long long v13 = v17;
  long long v17 = 0uLL;
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  long long v15 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (__p)
  {
    uint64_t v19 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0A65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0A690(int *a1, unsigned char *a2, unsigned char *a3)
{
  LODWORD(v7[0]) = 2;
  (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, v7);
  if (*a1 < 1)
  {
    if (LODWORD(v7[0]) < 2) {
      sub_215A0AD6C();
    }
    v7[0] = a3;
    sub_2159D5570(a2, v7);
    (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 120))(a2, a3 + 8);
    long long v8 = xmmword_26425A6D8;
    int v6 = *a3;
    v7[0] = a3;
    v7[1] = a2;
    v7[2] = &v8;
    sub_215A0AF38(v6, v7);
  }
  else
  {
    sub_215A0A7C0(a1, a2, a3, v7[0]);
  }
}

void sub_215A0A7C0(int *a1, unsigned char *a2, unsigned char *a3, unsigned int a4)
{
  int v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2) {
      goto LABEL_8;
    }
    LODWORD(v14[0]) = 2;
    (*(void (**)(unsigned char *, unsigned char **))(*(void *)a2 + 104))(a2, v14);
    if (LODWORD(v14[0]) >= 3)
    {
      unsigned int v12 = v14[0];
      long long v13 = sub_215A0A978();
      sub_215E07C10((std::string *)v13, v12, 2u);
    }
    int v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(unsigned char *))(*(void *)a2 + 16))(a2);
    int v9 = 1;
    goto LABEL_13;
  }
LABEL_8:
  if (a4 >= 2) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = a4;
  }
  if (v10 < 2) {
    sub_215A0AD6C();
  }
  int v9 = 0;
LABEL_13:
  v14[0] = a3;
  sub_2159D5570(a2, v14);
  (*(void (**)(unsigned char *, unsigned char *))(*(void *)a2 + 120))(a2, a3 + 8);
  long long v15 = xmmword_26425A6D8;
  int v11 = *a3;
  v14[0] = a3;
  v14[1] = a2;
  v14[2] = &v15;
  sub_215A0AF38(v11, v14);
  if (v9) {
    (*(void (**)(unsigned char *))(*(void *)a2 + 24))(a2);
  }
}

long long *sub_215A0A978()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267888FE0, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267888FE0))
  {
    return &xmmword_267888FC8;
  }
  uint64_t v1 = sub_215A0AA60();
  if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_215738B0C(&xmmword_267888FC8, v1->__r_.__value_.__l.__data_, v1->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
    qword_267888FD8 = v1->__r_.__value_.__r.__words[2];
    xmmword_267888FC8 = v2;
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267888FC8, &dword_21572C000);
  __cxa_guard_release(&qword_267888FE0);
  return &xmmword_267888FC8;
}

void sub_215A0AA48(_Unwind_Exception *a1)
{
}

std::string *sub_215A0AA60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889000, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_267889000))
  {
    return &stru_267888FE8;
  }
  sub_215A0AB5C((uint64_t)__p);
  sub_2157EAAC8(__p, &stru_267888FE8);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  __cxa_atexit(MEMORY[0x263F8C0B8], &stru_267888FE8, &dword_21572C000);
  __cxa_guard_release(&qword_267889000);
  return &stru_267888FE8;
}

void sub_215A0AB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_267889000);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_267889000);
  _Unwind_Resume(a1);
}

void sub_215A0AB5C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889020, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889020))
  {
    sub_215E19B7C("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::conio::PointsSample<3>]", qword_267889008);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889008, &dword_21572C000);
    __cxa_guard_release(&qword_267889020);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889040, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889040))
  {
    size_t v3 = sub_215747D98(qword_267889008, "<", 0);
    sub_215747C90(qword_267889008, 0, v3, qword_267889028);
    __cxa_atexit(MEMORY[0x263F8C0B8], qword_267889028, &dword_21572C000);
    __cxa_guard_release(&qword_267889040);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267889060, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267889060))
  {
    sub_215E19DF4((uint64_t)qword_267889028, (uint64_t)&xmmword_267889048);
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267889048, &dword_21572C000);
    __cxa_guard_release(&qword_267889060);
  }
  if (byte_26788905F < 0)
  {
    long long v2 = xmmword_267889048;
    sub_215738B0C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_267889048;
    *(void *)(a1 + 16) = unk_267889058;
  }
}

void sub_215A0AD24(_Unwind_Exception *a1)
{
}

void sub_215A0AD3C(_Unwind_Exception *a1)
{
}

void sub_215A0AD54(_Unwind_Exception *a1)
{
}

void sub_215A0AD6C()
{
  char v0 = 7;
  uint64_t v1 = 0;
  std::string __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_215D1835C();
}

void sub_215A0AF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0AF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2159A0A50((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A0AF38(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A0B014(a2);
      break;
    case 1:
      sub_215A0B1AC(a2);
      break;
    case 2:
      sub_215A0B35C(a2);
      break;
    case 3:
      sub_215A0B510(a2);
      break;
    case 5:
      sub_215A0B6C4(a2);
      break;
    case 6:
      sub_215A0B85C(a2);
      break;
    case 7:
      sub_215A0BA0C(a2);
      break;
    case 8:
      sub_215A0BBC0(a2);
      break;
    case 11:
      sub_215A0BD74(a2);
      break;
    case 12:
      sub_215A0BF28(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A0B014(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unsigned int v12 = 0;
  long long v13 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    uint64_t v4 = (char *)operator new(3 * v2);
    std::string __p = v4;
    long long v13 = &v4[v3];
    bzero(v4, v3);
    unsigned int v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2159FDAE8(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  long long v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  int v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    unsigned int v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0B188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0B1AC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    uint64_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0B338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0B35C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    uint64_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0B4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0B510(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    uint64_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FDDC4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0B6A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0B6C4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unsigned int v12 = 0;
  long long v13 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = (char *)operator new(3 * v2);
    std::string __p = v4;
    long long v13 = &v4[v3];
    bzero(v4, v3);
    unsigned int v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2159FDEB8(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    unsigned int v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0B838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0B85C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    uint64_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0B9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0BA0C(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    uint64_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0BB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0BBC0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    uint64_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE194(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0BD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0BD74(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    uint64_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE288(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0BF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0BF28(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    uint64_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE37C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0C0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0C0DC(int a1, void *a2)
{
  switch(a1)
  {
    case 0:
      sub_215A0C1B8(a2);
      break;
    case 1:
      sub_215A0C350(a2);
      break;
    case 2:
      sub_215A0C500(a2);
      break;
    case 3:
      sub_215A0C6B4(a2);
      break;
    case 5:
      sub_215A0C868(a2);
      break;
    case 6:
      sub_215A0CA00(a2);
      break;
    case 7:
      sub_215A0CBB0(a2);
      break;
    case 8:
      sub_215A0CD64(a2);
      break;
    case 11:
      sub_215A0CF18(a2);
      break;
    case 12:
      sub_215A0D0CC(a2);
      break;
    default:
      sub_215E097D8(a1);
  }
}

void sub_215A0C1B8(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unsigned int v12 = 0;
  long long v13 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157C3CEC();
    }
    int64_t v4 = (char *)operator new(3 * v2);
    std::string __p = v4;
    long long v13 = &v4[v3];
    bzero(v4, v3);
    unsigned int v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 80))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2159FDAE8(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    unsigned int v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0C32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0C350(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    uint64_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 96))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDBDC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0C4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0C500(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    uint64_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 104))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FDCD0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0C690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0C6B4(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    uint64_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 120))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FDDC4(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0C844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0C868(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  unsigned int v12 = 0;
  long long v13 = 0;
  std::string __p = 0;
  if (v2)
  {
    size_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = (char *)operator new(3 * v2);
    std::string __p = v4;
    long long v13 = &v4[v3];
    bzero(v4, v3);
    unsigned int v12 = &v4[v3];
    uint64_t v5 = a1[1];
    do
    {
      (*(void (**)(uint64_t, char *))(*(void *)v5 + 88))(v5, v4++);
      --v3;
    }
    while (v3);
  }
  sub_2159FDEB8(&v10, (uint64_t)&__p);
  uint64_t v6 = *a1;
  long long v7 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
  *(_OWORD *)(v6 + 16) = v7;
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  if (*((void *)&v10 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p)
  {
    unsigned int v12 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0C9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0CA00(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if (3 * v2 < 0) {
      sub_2157E81A4();
    }
    int64_t v4 = 6 * v2;
    uint64_t v5 = (char *)operator new(6 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[2 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = a1[1];
      uint64_t v8 = 2 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 48))(v7, v5);
        v5 += 2;
        v8 -= 2;
      }
      while (v8);
    }
  }
  sub_2159FDFAC(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0CB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0CBB0(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    uint64_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 56))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE0A0(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0CD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0CD64(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    uint64_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 72))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE194(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0CEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0CF18(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 62) {
      sub_2157E81A4();
    }
    int64_t v4 = 12 * v2;
    uint64_t v5 = (char *)operator new(12 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[4 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = a1[1];
      uint64_t v8 = 4 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 128))(v7, v5);
        v5 += 4;
        v8 -= 4;
      }
      while (v8);
    }
  }
  sub_2159FE288(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0D0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0D0CC(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 8);
  long long v15 = 0;
  uint64_t v16 = 0;
  std::string __p = 0;
  if (v2)
  {
    uint64_t v3 = 3 * v2;
    if ((unint64_t)(3 * v2) >> 61) {
      sub_2157E81A4();
    }
    int64_t v4 = 24 * v2;
    uint64_t v5 = (char *)operator new(24 * v2);
    std::string __p = v5;
    uint64_t v16 = &v5[8 * v3];
    bzero(v5, v4);
    long long v15 = &v5[v4];
    if (v4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = a1[1];
      uint64_t v8 = 8 * v6;
      do
      {
        (*(void (**)(uint64_t, char *))(*(void *)v7 + 136))(v7, v5);
        v5 += 8;
        v8 -= 8;
      }
      while (v8);
    }
  }
  sub_2159FE37C(&v13, (uint64_t)&__p);
  uint64_t v9 = *a1;
  long long v10 = v13;
  long long v13 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v9 + 24);
  *(_OWORD *)(v9 + 16) = v10;
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  unsigned int v12 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  if (__p)
  {
    long long v15 = (char *)__p;
    operator delete(__p);
  }
}

void sub_215A0D25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0D280()
{
}

void sub_215A0D474(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_215A0D4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v11[3] = *MEMORY[0x263EF8340];
  sub_215DEC088(a2);
  uint64_t v9 = "version";
  uint64_t v10 = 7;
  LODWORD(v11[0]) = 2;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v5 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "version";
    *(void *)(a2 + 80) = 7;
    if (!v5) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  sub_215DEE064(a2, v11);
  LODWORD(v9) = *(_DWORD *)a3;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t *, void, void))(a3 + 8);
  uint64_t v7 = a3 + 8;
  uint64_t v6 = v8;
  uint64_t v10 = 0;
  v11[0] = 0;
  if (v8) {
    v6(1, v7, &v10, 0, 0);
  }
  sub_215A0D62C(a2, (uint64_t)&v9);
}

void sub_215A0D5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0D62C(uint64_t a1, uint64_t a2)
{
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    int v2 = *(unsigned __int8 *)(a1 + 88);
    *(void *)(a1 + 72) = "camera_type";
    *(void *)(a1 + 80) = 11;
    if (!v2) {
      *(unsigned char *)(a1 + 88) = 1;
    }
  }
  uint64_t v3 = a2;
  sub_215A0DB44();
}

void sub_215A0DB44()
{
  int v0 = 0;
  sub_215A0DC50();
}

void sub_215A0DC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0DC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A0DC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_215742CF0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_215A0DC50()
{
}

void sub_215A0DE3C(_Unwind_Exception *a1)
{
  MEMORY[0x2166C4D20](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_215A0DE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0DEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DEC088(a2);
  uint64_t v10 = (uint64_t)"version";
  uint64_t v11 = 7;
  int v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEE064(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEE064(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 88);
  *(void *)(a2 + 72) = "focal_length";
  *(void *)(a2 + 80) = 12;
  if (!v6) {
    *(unsigned char *)(a2 + 88) = 1;
  }
LABEL_7:
  uint64_t v10 = 2;
  uint64_t v11 = a3;
  sub_215DEF750(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "principal_point";
    *(void *)(a2 + 80) = 15;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v10 = 2;
  uint64_t v11 = a3 + 8;
  sub_215DEF750(a2, (float **)&v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "image_size";
    *(void *)(a2 + 80) = 10;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v10 = 2;
  uint64_t v11 = a3 + 16;
  sub_215DEEC78(a2, (uint64_t)&v10);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v9 - 8);
  *(void *)(a2 + 56) = v9 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void sub_215A0E034()
{
  exceptiouint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  exception->__vftable = 0;
  uint64_t v1 = sub_215A0E06C(exception);
  __cxa_throw(v1, MEMORY[0x263F8C1E8], (void (*)(void *))std::exception::~exception);
}

std::bad_cast *sub_215A0E06C(std::bad_cast *a1)
{
  uint64_t result = std::bad_cast::bad_cast(a1);
  result->__vftable = (std::bad_cast_vtbl *)(MEMORY[0x263F8C378] + 16);
  return result;
}

void sub_215A0E0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DEC088(a2);
  uint64_t v10 = (uint64_t)"version";
  uint64_t v11 = 7;
  int v12 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEE064(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEE064(a2, &v12);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 88);
  *(void *)(a2 + 72) = "focal_length";
  *(void *)(a2 + 80) = 12;
  if (!v6) {
    *(unsigned char *)(a2 + 88) = 1;
  }
LABEL_7:
  uint64_t v10 = 2;
  uint64_t v11 = a3;
  sub_215DEFB74(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "principal_point";
    *(void *)(a2 + 80) = 15;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v10 = 2;
  uint64_t v11 = a3 + 16;
  sub_215DEFB74(a2, &v10);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "image_size";
    *(void *)(a2 + 80) = 10;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v10 = 2;
  uint64_t v11 = a3 + 32;
  sub_215DEEC78(a2, (uint64_t)&v10);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v9 - 8);
  *(void *)(a2 + 56) = v9 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void sub_215A0E234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DEC088(a2);
  uint64_t v11 = (uint64_t)"version";
  uint64_t v12 = 7;
  int v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEE064(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEE064(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 88);
  *(void *)(a2 + 72) = "focal_length";
  *(void *)(a2 + 80) = 12;
  if (!v6) {
    *(unsigned char *)(a2 + 88) = 1;
  }
LABEL_7:
  uint64_t v11 = 2;
  uint64_t v12 = a3;
  sub_215DEF750(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "principal_point";
    *(void *)(a2 + 80) = 15;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 2;
  uint64_t v12 = a3 + 8;
  sub_215DEF750(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "distortion_coeff";
    *(void *)(a2 + 80) = 16;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 5;
  uint64_t v12 = a3 + 16;
  sub_215DEF750(a2, (float **)&v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v9 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "image_size";
    *(void *)(a2 + 80) = 10;
    if (!v9) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 2;
  uint64_t v12 = a3 + 36;
  sub_215DEEC78(a2, (uint64_t)&v11);
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v10 - 8);
  *(void *)(a2 + 56) = v10 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void sub_215A0E40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_215DEC088(a2);
  uint64_t v11 = (uint64_t)"version";
  uint64_t v12 = 7;
  int v13 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (int v5 = *(unsigned __int8 *)(a2 + 88), *(void *)(a2 + 72) = "version", *(void *)(a2 + 80) = 7, v5))
  {
    sub_215DEE064(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)(a2 + 88) = 1;
    sub_215DEE064(a2, &v13);
    if (**(unsigned __int8 **)(a2 + 40) > 1u) {
      goto LABEL_7;
    }
  }
  int v6 = *(unsigned __int8 *)(a2 + 88);
  *(void *)(a2 + 72) = "focal_length";
  *(void *)(a2 + 80) = 12;
  if (!v6) {
    *(unsigned char *)(a2 + 88) = 1;
  }
LABEL_7:
  uint64_t v11 = 2;
  uint64_t v12 = a3;
  sub_215DEFB74(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "principal_point";
    *(void *)(a2 + 80) = 15;
    if (!v7) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 2;
  uint64_t v12 = a3 + 16;
  sub_215DEFB74(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v8 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "distortion_coeff";
    *(void *)(a2 + 80) = 16;
    if (!v8) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 5;
  uint64_t v12 = a3 + 32;
  sub_215DEFB74(a2, &v11);
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    int v9 = *(unsigned __int8 *)(a2 + 88);
    *(void *)(a2 + 72) = "image_size";
    *(void *)(a2 + 80) = 10;
    if (!v9) {
      *(unsigned char *)(a2 + 88) = 1;
    }
  }
  uint64_t v11 = 2;
  uint64_t v12 = a3 + 72;
  sub_215DEEC78(a2, (uint64_t)&v11);
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = *(void *)(v10 - 8);
  *(void *)(a2 + 56) = v10 - 8;
  if (*(unsigned char *)(a2 + 88)) {
    *(unsigned char *)(a2 + 88) = 0;
  }
}

void sub_215A0E5E4(uint64_t a1, uint64_t a2, int *a3)
{
  v14[4] = *MEMORY[0x263EF8340];
  sub_215E0076C(*(void *)(a2 + 24));
  int v13 = *a3;
  int v7 = (void (*)(uint64_t, int *, void *, void, void))*((void *)a3 + 1);
  int v6 = a3 + 2;
  int v5 = v7;
  v14[0] = 0;
  v14[1] = 0;
  if (v7) {
    v5(1, v6, v14, 0, 0);
  }
  sub_215A0E770(a2, (uint64_t)&v13);
  if (v14[0]) {
    ((void (*)(void, void *, void, void, void))v14[0])(0, v14, 0, 0, 0);
  }
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(*(void *)(v8 + 88) - 8);
  sub_215E001AC((uint64_t *)(v8 + 48), *(void *)(v8 + 16) - v9 - 9);
  size_t v10 = *(void *)(v8 + 48);
  if (v10) {
    memmove((void *)(*(void *)(v8 + 24) + v9), *(const void **)(v8 + 56), v10);
  }
  *(void *)(v8 + 48) = 0;
  uint64_t v11 = *(void *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 88) - 8;
  *(void *)(v8 + 88) = v12;
  if (v11 == v12)
  {
    std::ostream::write();
    if (*(unsigned char *)(v8 + 40))
    {
      free(*(void **)(v8 + 24));
      *(unsigned char *)(v8 + 40) = 0;
    }
  }
}

void sub_215A0E728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_215731D80(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_215A0E770(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(_DWORD *)a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v5 + 40))
  {
    *(void *)uint64_t v115 = v5 + 16;
    sub_215E05FEC((uint64_t **)v115, v4);
  }
  else
  {
    sub_215E0626C((uint64_t)v115, v5 + 8);
  }
  unsigned int v8 = *(_DWORD *)a2;
  if (!v7 & v6)
  {
    switch(v8)
    {
      case 'd':
        uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v10 = a2 + 8;
        uint64_t v9 = v11;
        if (!v11 || (uint64_t v12 = (unsigned int *)v9(3, v10, 0, &unk_26C676720, &unk_215ED39E0)) == 0) {
          sub_215A0E034();
        }
        uint64_t v13 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v13 + 40))
        {
          *(void *)uint64_t v115 = v13 + 16;
          sub_215E05FEC((uint64_t **)v115, 2u);
        }
        else
        {
          sub_215E0626C((uint64_t)v115, v13 + 8);
        }
        sub_215E0076C(*(void *)(a1 + 24));
        uint64_t v68 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v68 + 40))
        {
          *(void *)uint64_t v115 = v68 + 16;
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 1);
        }
        else
        {
          unsigned int v75 = *v12;
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v75);
          std::ostream::write();
          unsigned int v76 = v12[1];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v76);
          std::ostream::write();
        }
        uint64_t v77 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v77 + 40))
        {
          *(void *)uint64_t v115 = v77 + 16;
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 2);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 3);
        }
        else
        {
          unsigned int v85 = v12[2];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v85);
          std::ostream::write();
          unsigned int v86 = v12[3];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v86);
          std::ostream::write();
        }
        uint64_t v87 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v87 + 40))
        {
          *(void *)uint64_t v115 = v87 + 16;
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 4);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 5);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 6);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 7);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 8);
        }
        else
        {
          unsigned int v99 = v12[4];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v99);
          std::ostream::write();
          unsigned int v100 = v12[5];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v100);
          std::ostream::write();
          unsigned int v101 = v12[6];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v101);
          std::ostream::write();
          unsigned int v102 = v12[7];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v102);
          std::ostream::write();
          unsigned int v103 = v12[8];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v103);
          std::ostream::write();
        }
        uint64_t v60 = *(void *)(a1 + 24);
        if (!*(unsigned char *)(v60 + 40)) {
          goto LABEL_126;
        }
        goto LABEL_120;
      case 'e':
        uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v42 = a2 + 8;
        uint64_t v41 = v43;
        if (!v43 || (uint64_t v35 = v41(3, v42, 0, &unk_26C676770, &unk_215ED3AB8)) == 0) {
          sub_215A0E034();
        }
        uint64_t v44 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v44 + 40))
        {
          *(void *)uint64_t v115 = v44 + 16;
          sub_215E05FEC((uint64_t **)v115, 2u);
        }
        else
        {
          sub_215E0626C((uint64_t)v115, v44 + 8);
        }
        sub_215E0076C(*(void *)(a1 + 24));
        uint64_t v69 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v69 + 40))
        {
          *(void *)uint64_t v115 = v69 + 16;
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)v35);
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 8));
        }
        else
        {
          *(void *)&v115[1] = bswap64(*(void *)v35);
          v115[0] = -53;
          std::ostream::write();
          unint64_t v78 = *(void *)(v35 + 8);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v78);
          std::ostream::write();
        }
        uint64_t v79 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v79 + 40))
        {
          *(void *)uint64_t v115 = v79 + 16;
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 16));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 24));
        }
        else
        {
          *(void *)&v115[1] = bswap64(*(void *)(v35 + 16));
          v115[0] = -53;
          std::ostream::write();
          unint64_t v88 = *(void *)(v35 + 24);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v88);
          std::ostream::write();
        }
        uint64_t v89 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v89 + 40))
        {
          *(void *)uint64_t v115 = v89 + 16;
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 32));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 40));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 48));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 56));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 64));
        }
        else
        {
          *(void *)&v115[1] = bswap64(*(void *)(v35 + 32));
          v115[0] = -53;
          std::ostream::write();
          unint64_t v104 = *(void *)(v35 + 40);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v104);
          std::ostream::write();
          unint64_t v105 = *(void *)(v35 + 48);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v105);
          std::ostream::write();
          unint64_t v106 = *(void *)(v35 + 56);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v106);
          std::ostream::write();
          unint64_t v107 = *(void *)(v35 + 64);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v107);
          std::ostream::write();
        }
        uint64_t v60 = *(void *)(a1 + 24);
        if (!*(unsigned char *)(v60 + 40)) {
          goto LABEL_126;
        }
        goto LABEL_117;
      case 'n':
        uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v38 = a2 + 8;
        uint64_t v37 = v39;
        if (!v39 || (uint64_t v12 = (unsigned int *)v37(3, v38, 0, &unk_26C6767C0, &unk_215ED3B90)) == 0) {
          sub_215A0E034();
        }
        uint64_t v40 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v40 + 40))
        {
          *(void *)uint64_t v115 = v40 + 16;
          sub_215E05FEC((uint64_t **)v115, 2u);
        }
        else
        {
          sub_215E0626C((uint64_t)v115, v40 + 8);
        }
        sub_215E0076C(*(void *)(a1 + 24));
        uint64_t v67 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v67 + 40))
        {
          *(void *)uint64_t v115 = v67 + 16;
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 1);
        }
        else
        {
          unsigned int v72 = *v12;
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v72);
          std::ostream::write();
          unsigned int v73 = v12[1];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v73);
          std::ostream::write();
        }
        uint64_t v74 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v74 + 40))
        {
          *(void *)uint64_t v115 = v74 + 16;
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 2);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 3);
        }
        else
        {
          unsigned int v82 = v12[2];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v82);
          std::ostream::write();
          unsigned int v83 = v12[3];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v83);
          std::ostream::write();
        }
        uint64_t v84 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v84 + 40))
        {
          *(void *)uint64_t v115 = v84 + 16;
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 4);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 5);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 6);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 7);
          sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v12 + 8);
        }
        else
        {
          unsigned int v94 = v12[4];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v94);
          std::ostream::write();
          unsigned int v95 = v12[5];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v95);
          std::ostream::write();
          unsigned int v96 = v12[6];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v96);
          std::ostream::write();
          unsigned int v97 = v12[7];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v97);
          std::ostream::write();
          unsigned int v98 = v12[8];
          v115[0] = -54;
          *(_DWORD *)&v115[1] = bswap32(v98);
          std::ostream::write();
        }
        uint64_t v60 = *(void *)(a1 + 24);
        if (!*(unsigned char *)(v60 + 40)) {
          goto LABEL_126;
        }
LABEL_120:
        *(void *)uint64_t v115 = v60 + 16;
        sub_215E05FEC((uint64_t **)v115, v12[9]);
        sub_215E05FEC((uint64_t **)v115, v12[10]);
        goto LABEL_127;
      case 'o':
        uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
        uint64_t v33 = a2 + 8;
        uint64_t v32 = v34;
        if (!v34 || (uint64_t v35 = v32(3, v33, 0, &unk_26C676810, &unk_215ED3C68)) == 0) {
          sub_215A0E034();
        }
        uint64_t v36 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v36 + 40))
        {
          *(void *)uint64_t v115 = v36 + 16;
          sub_215E05FEC((uint64_t **)v115, 2u);
        }
        else
        {
          sub_215E0626C((uint64_t)v115, v36 + 8);
        }
        sub_215E0076C(*(void *)(a1 + 24));
        uint64_t v66 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v66 + 40))
        {
          *(void *)uint64_t v115 = v66 + 16;
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)v35);
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 8));
        }
        else
        {
          *(void *)&v115[1] = bswap64(*(void *)v35);
          v115[0] = -53;
          std::ostream::write();
          unint64_t v70 = *(void *)(v35 + 8);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v70);
          std::ostream::write();
        }
        uint64_t v71 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v71 + 40))
        {
          *(void *)uint64_t v115 = v71 + 16;
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 16));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 24));
        }
        else
        {
          *(void *)&v115[1] = bswap64(*(void *)(v35 + 16));
          v115[0] = -53;
          std::ostream::write();
          unint64_t v80 = *(void *)(v35 + 24);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v80);
          std::ostream::write();
        }
        uint64_t v81 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v81 + 40))
        {
          *(void *)uint64_t v115 = v81 + 16;
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 32));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 40));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 48));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 56));
          sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v35 + 64));
        }
        else
        {
          *(void *)&v115[1] = bswap64(*(void *)(v35 + 32));
          v115[0] = -53;
          std::ostream::write();
          unint64_t v90 = *(void *)(v35 + 40);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v90);
          std::ostream::write();
          unint64_t v91 = *(void *)(v35 + 48);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v91);
          std::ostream::write();
          unint64_t v92 = *(void *)(v35 + 56);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v92);
          std::ostream::write();
          unint64_t v93 = *(void *)(v35 + 64);
          v115[0] = -53;
          *(void *)&v115[1] = bswap64(v93);
          std::ostream::write();
        }
        uint64_t v60 = *(void *)(a1 + 24);
        if (*(unsigned char *)(v60 + 40))
        {
LABEL_117:
          *(void *)uint64_t v115 = v60 + 16;
          sub_215E05FEC((uint64_t **)v115, *(_DWORD *)(v35 + 72));
          sub_215E05FEC((uint64_t **)v115, *(_DWORD *)(v35 + 76));
        }
        else
        {
LABEL_126:
          uint64_t v108 = v60 + 8;
          sub_215E0626C((uint64_t)v115, v60 + 8);
          sub_215E0626C((uint64_t)v115, v108);
        }
        goto LABEL_127;
      default:
        return;
    }
  }
  switch(v8)
  {
    case 0u:
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
      uint64_t v15 = a2 + 8;
      uint64_t v14 = v16;
      if (!v16 || (long long v17 = (unsigned int *)v14(3, v15, 0, &unk_26C6765E0, &unk_215ED368C)) == 0) {
        sub_215A0E034();
      }
      uint64_t v18 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v18 + 40))
      {
        *(void *)uint64_t v115 = v18 + 16;
        sub_215E05FEC((uint64_t **)v115, 2u);
      }
      else
      {
        sub_215E0626C((uint64_t)v115, v18 + 8);
      }
      sub_215E0076C(*(void *)(a1 + 24));
      uint64_t v47 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v47 + 40))
      {
        *(void *)uint64_t v115 = v47 + 16;
        sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v17);
        sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v17 + 1);
      }
      else
      {
        unsigned int v54 = *v17;
        v115[0] = -54;
        *(_DWORD *)&v115[1] = bswap32(v54);
        std::ostream::write();
        unsigned int v55 = v17[1];
        v115[0] = -54;
        *(_DWORD *)&v115[1] = bswap32(v55);
        std::ostream::write();
      }
      uint64_t v56 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v56 + 40))
      {
        *(void *)uint64_t v115 = v56 + 16;
        sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v17 + 2);
        sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v17 + 3);
      }
      else
      {
        unsigned int v63 = v17[2];
        v115[0] = -54;
        *(_DWORD *)&v115[1] = bswap32(v63);
        std::ostream::write();
        unsigned int v64 = v17[3];
        v115[0] = -54;
        *(_DWORD *)&v115[1] = bswap32(v64);
        std::ostream::write();
      }
      uint64_t v60 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v60 + 40)) {
        goto LABEL_69;
      }
      goto LABEL_126;
    case 1u:
      uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
      uint64_t v29 = a2 + 8;
      uint64_t v28 = v30;
      if (!v30 || (uint64_t v22 = v28(3, v29, 0, &unk_26C676630, &unk_215ED3760)) == 0) {
        sub_215A0E034();
      }
      uint64_t v31 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v31 + 40))
      {
        *(void *)uint64_t v115 = v31 + 16;
        sub_215E05FEC((uint64_t **)v115, 2u);
      }
      else
      {
        sub_215E0626C((uint64_t)v115, v31 + 8);
      }
      sub_215E0076C(*(void *)(a1 + 24));
      uint64_t v48 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v48 + 40))
      {
        *(void *)uint64_t v115 = v48 + 16;
        sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)v22);
        sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v22 + 8));
      }
      else
      {
        *(void *)&v115[1] = bswap64(*(void *)v22);
        v115[0] = -53;
        std::ostream::write();
        unint64_t v57 = *(void *)(v22 + 8);
        v115[0] = -53;
        *(void *)&v115[1] = bswap64(v57);
        std::ostream::write();
      }
      uint64_t v58 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v58 + 40))
      {
        *(void *)uint64_t v115 = v58 + 16;
        sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v22 + 16));
        sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v22 + 24));
      }
      else
      {
        *(void *)&v115[1] = bswap64(*(void *)(v22 + 16));
        v115[0] = -53;
        std::ostream::write();
        unint64_t v65 = *(void *)(v22 + 24);
        v115[0] = -53;
        *(void *)&v115[1] = bswap64(v65);
        std::ostream::write();
      }
      uint64_t v60 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v60 + 40)) {
        goto LABEL_66;
      }
      goto LABEL_126;
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      return;
    case 0xAu:
      uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
      uint64_t v25 = a2 + 8;
      uint64_t v24 = v26;
      if (!v26 || (long long v17 = (unsigned int *)v24(3, v25, 0, &unk_26C676680, &unk_215ED3834)) == 0) {
        sub_215A0E034();
      }
      uint64_t v27 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v27 + 40))
      {
        *(void *)uint64_t v115 = v27 + 16;
        sub_215E05FEC((uint64_t **)v115, 2u);
      }
      else
      {
        sub_215E0626C((uint64_t)v115, v27 + 8);
      }
      sub_215E0076C(*(void *)(a1 + 24));
      uint64_t v46 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v46 + 40))
      {
        *(void *)uint64_t v115 = v46 + 16;
        sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v17);
        sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v17 + 1);
      }
      else
      {
        unsigned int v51 = *v17;
        v115[0] = -54;
        *(_DWORD *)&v115[1] = bswap32(v51);
        std::ostream::write();
        unsigned int v52 = v17[1];
        v115[0] = -54;
        *(_DWORD *)&v115[1] = bswap32(v52);
        std::ostream::write();
      }
      uint64_t v53 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v53 + 40))
      {
        *(void *)uint64_t v115 = v53 + 16;
        sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v17 + 2);
        sub_215E06DFC((uint64_t)&v114, (uint64_t **)v115, v17 + 3);
      }
      else
      {
        unsigned int v61 = v17[2];
        v115[0] = -54;
        *(_DWORD *)&v115[1] = bswap32(v61);
        std::ostream::write();
        unsigned int v62 = v17[3];
        v115[0] = -54;
        *(_DWORD *)&v115[1] = bswap32(v62);
        std::ostream::write();
      }
      uint64_t v60 = *(void *)(a1 + 24);
      if (!*(unsigned char *)(v60 + 40)) {
        goto LABEL_126;
      }
LABEL_69:
      *(void *)uint64_t v115 = v60 + 16;
      sub_215E05FEC((uint64_t **)v115, v17[4]);
      sub_215E05FEC((uint64_t **)v115, v17[5]);
      break;
    case 0xBu:
      uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, void, void *, void *))(a2 + 8);
      uint64_t v20 = a2 + 8;
      uint64_t v19 = v21;
      if (!v21 || (uint64_t v22 = v19(3, v20, 0, &unk_26C6766D0, &unk_215ED3908)) == 0) {
        sub_215A0E034();
      }
      uint64_t v23 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v23 + 40))
      {
        *(void *)uint64_t v115 = v23 + 16;
        sub_215E05FEC((uint64_t **)v115, 2u);
      }
      else
      {
        sub_215E0626C((uint64_t)v115, v23 + 8);
      }
      sub_215E0076C(*(void *)(a1 + 24));
      uint64_t v45 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v45 + 40))
      {
        *(void *)uint64_t v115 = v45 + 16;
        sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)v22);
        sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v22 + 8));
      }
      else
      {
        *(void *)&v115[1] = bswap64(*(void *)v22);
        v115[0] = -53;
        std::ostream::write();
        unint64_t v49 = *(void *)(v22 + 8);
        v115[0] = -53;
        *(void *)&v115[1] = bswap64(v49);
        std::ostream::write();
      }
      uint64_t v50 = *(void *)(a1 + 24);
      if (*(unsigned char *)(v50 + 40))
      {
        *(void *)uint64_t v115 = v50 + 16;
        sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v22 + 16));
        sub_215E06EE4((uint64_t)&v114, (uint64_t **)v115, (unint64_t *)(v22 + 24));
      }
      else
      {
        *(void *)&v115[1] = bswap64(*(void *)(v22 + 16));
        v115[0] = -53;
        std::ostream::write();
        unint64_t v59 = *(void *)(v22 + 24);
        v115[0] = -53;
        *(void *)&v115[1] = bswap64(v59);
        std::ostream::write();
      }
      uint64_t v60 = *(void *)(a1 + 24);
      if (!*(unsigned char *)(v60 + 40)) {
        goto LABEL_126;
      }
LABEL_66:
      *(void *)uint64_t v115 = v60 + 16;
      sub_215E05FEC((uint64_t **)v115, *(_DWORD *)(v22 + 32));
      sub_215E05FEC((uint64_t **)v115, *(_DWORD *)(v22 + 36));
      break;
    default:
      JUMPOUT(0);
  }
LABEL_127:
  uint64_t v109 = *(void *)(a1 + 24);
  uint64_t v110 = *(void *)(*(void *)(v109 + 88) - 8);
  sub_215E001AC((uint64_t *)(v109 + 48), *(void *)(v109 + 16) - v110 - 9);
  size_t v111 = *(void *)(v109 + 48);
  if (v111) {
    memmove((void *)(*(void *)(v109 + 24) + v110), *(const void **)(v109 + 56), v111);
  }
  *(void *)(v109 + 48) = 0;
  uint64_t v112 = *(void *)(v109 + 80);
  uint64_t v113 = *(void *)(v109 + 88) - 8;
  *(void *)(v109 + 88) = v113;
  if (v112 == v113)
  {
    std::ostream::write();
    if (*(unsigned char *)(v109 + 40))
    {
      free(*(void **)(v109 + 24));
      *(unsigned char *)(v109 + 40) = 0;
    }
  }
}